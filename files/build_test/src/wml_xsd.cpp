#include "wml_xsd.h"
#include <stdlib.h>
#include <sstream>
#include <algorithm>
#include <functional>
#include <assert.h>
#include "dml-wordprocessingDrawing_xsd.h"
#include "shared-math_xsd.h"
#include "shared-relationshipReference_xsd.h"
#include "shared-commonSimpleTypes_xsd.h"
#include "shared-customXmlSchemaProperties_xsd.h"
#include "vml-main_xsd.h"
#include "vml-officeDrawing_xsd.h"
namespace ns_w {
using namespace std;

// Element

// Attribute

// ST_LongHexNumber
ST_LongHexNumber::ST_LongHexNumber()
    :m_has_hexBinary(false),
     m_hexBinary("")
{
}
ST_LongHexNumber::ST_LongHexNumber(const XSD::hexBinary_& _hexBinary)
    :m_has_hexBinary(true)
{

    set_hexBinary(_hexBinary);
}
ST_LongHexNumber::~ST_LongHexNumber()
{
    clear();
}
bool ST_LongHexNumber::has_hexBinary() const
{
    return m_has_hexBinary;
}

void ST_LongHexNumber::set_hexBinary(const XSD::hexBinary_& _hexBinary)
{   assert(_hexBinary.size() == 8);

    m_has_hexBinary = true;
    m_hexBinary = _hexBinary;
}

const XSD::hexBinary_& ST_LongHexNumber::get_hexBinary() const
{
    return m_hexBinary;
}

void ST_LongHexNumber::clear()
{
    m_has_hexBinary = false;
    m_hexBinary.clear();;
}

void ST_LongHexNumber::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_hexBinary)
    {
        _outStream << " " << _attrName << "=\"" << m_hexBinary << "\"";;
    }
}

const ST_LongHexNumber& ST_LongHexNumber::default_instance()
{
    if (!ST_LongHexNumber::default_instance_)
    {
        ST_LongHexNumber::default_instance_ = new ST_LongHexNumber();
    }
    return *ST_LongHexNumber::default_instance_;
}

std::string ST_LongHexNumber::toString() const
{
    std::stringstream strStream;
    strStream << get_hexBinary();
    return strStream.str();
}

ST_LongHexNumber* ST_LongHexNumber::default_instance_ = NULL;

// ST_ShortHexNumber
ST_ShortHexNumber::ST_ShortHexNumber()
    :m_has_hexBinary(false),
     m_hexBinary("")
{
}
ST_ShortHexNumber::ST_ShortHexNumber(const XSD::hexBinary_& _hexBinary)
    :m_has_hexBinary(true)
{

    set_hexBinary(_hexBinary);
}
ST_ShortHexNumber::~ST_ShortHexNumber()
{
    clear();
}
bool ST_ShortHexNumber::has_hexBinary() const
{
    return m_has_hexBinary;
}

void ST_ShortHexNumber::set_hexBinary(const XSD::hexBinary_& _hexBinary)
{   assert(_hexBinary.size() == 4);

    m_has_hexBinary = true;
    m_hexBinary = _hexBinary;
}

const XSD::hexBinary_& ST_ShortHexNumber::get_hexBinary() const
{
    return m_hexBinary;
}

void ST_ShortHexNumber::clear()
{
    m_has_hexBinary = false;
    m_hexBinary.clear();;
}

void ST_ShortHexNumber::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_hexBinary)
    {
        _outStream << " " << _attrName << "=\"" << m_hexBinary << "\"";;
    }
}

const ST_ShortHexNumber& ST_ShortHexNumber::default_instance()
{
    if (!ST_ShortHexNumber::default_instance_)
    {
        ST_ShortHexNumber::default_instance_ = new ST_ShortHexNumber();
    }
    return *ST_ShortHexNumber::default_instance_;
}

std::string ST_ShortHexNumber::toString() const
{
    std::stringstream strStream;
    strStream << get_hexBinary();
    return strStream.str();
}

ST_ShortHexNumber* ST_ShortHexNumber::default_instance_ = NULL;

// ST_UcharHexNumber
ST_UcharHexNumber::ST_UcharHexNumber()
    :m_has_hexBinary(false),
     m_hexBinary("")
{
}
ST_UcharHexNumber::ST_UcharHexNumber(const XSD::hexBinary_& _hexBinary)
    :m_has_hexBinary(true)
{

    set_hexBinary(_hexBinary);
}
ST_UcharHexNumber::~ST_UcharHexNumber()
{
    clear();
}
bool ST_UcharHexNumber::has_hexBinary() const
{
    return m_has_hexBinary;
}

void ST_UcharHexNumber::set_hexBinary(const XSD::hexBinary_& _hexBinary)
{   assert(_hexBinary.size() == 2);

    m_has_hexBinary = true;
    m_hexBinary = _hexBinary;
}

const XSD::hexBinary_& ST_UcharHexNumber::get_hexBinary() const
{
    return m_hexBinary;
}

void ST_UcharHexNumber::clear()
{
    m_has_hexBinary = false;
    m_hexBinary.clear();;
}

void ST_UcharHexNumber::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_hexBinary)
    {
        _outStream << " " << _attrName << "=\"" << m_hexBinary << "\"";;
    }
}

const ST_UcharHexNumber& ST_UcharHexNumber::default_instance()
{
    if (!ST_UcharHexNumber::default_instance_)
    {
        ST_UcharHexNumber::default_instance_ = new ST_UcharHexNumber();
    }
    return *ST_UcharHexNumber::default_instance_;
}

std::string ST_UcharHexNumber::toString() const
{
    std::stringstream strStream;
    strStream << get_hexBinary();
    return strStream.str();
}

ST_UcharHexNumber* ST_UcharHexNumber::default_instance_ = NULL;

// ST_DecimalNumberOrPercent
ST_DecimalNumberOrPercent::ST_DecimalNumberOrPercent()
    :m_has_ST_UnqualifiedPercentage(false),
     m_ST_UnqualifiedPercentage(NULL),
     m_has_ST_Percentage(false),
     m_ST_Percentage(NULL)
{
}
ST_DecimalNumberOrPercent::ST_DecimalNumberOrPercent(const ST_DecimalNumberOrPercent& _ST_DecimalNumberOrPercent)
    :m_has_ST_UnqualifiedPercentage(false),
     m_ST_UnqualifiedPercentage(NULL),
     m_has_ST_Percentage(false),
     m_ST_Percentage(NULL)
{

    m_has_ST_UnqualifiedPercentage = _ST_DecimalNumberOrPercent.has_ST_UnqualifiedPercentage();
    if (_ST_DecimalNumberOrPercent.has_ST_UnqualifiedPercentage())
    {
        m_ST_UnqualifiedPercentage = new ST_UnqualifiedPercentage(_ST_DecimalNumberOrPercent.get_ST_UnqualifiedPercentage());
    }


    m_has_ST_Percentage = _ST_DecimalNumberOrPercent.has_ST_Percentage();
    if (_ST_DecimalNumberOrPercent.has_ST_Percentage())
    {
        m_ST_Percentage = new ns_s::ST_Percentage(_ST_DecimalNumberOrPercent.get_ST_Percentage());
    }
}
ST_DecimalNumberOrPercent::~ST_DecimalNumberOrPercent()
{
    clear();
}
bool ST_DecimalNumberOrPercent::has_ST_UnqualifiedPercentage() const
{
    return m_has_ST_UnqualifiedPercentage;
}

ST_UnqualifiedPercentage* ST_DecimalNumberOrPercent::mutable_ST_UnqualifiedPercentage()
{
    clear_ST_Percentage();
    m_has_ST_UnqualifiedPercentage = true;
    if (!m_ST_UnqualifiedPercentage)
    {
        m_ST_UnqualifiedPercentage = new ST_UnqualifiedPercentage();
    }
    return m_ST_UnqualifiedPercentage;
}

const ST_UnqualifiedPercentage& ST_DecimalNumberOrPercent::get_ST_UnqualifiedPercentage() const
{
    if (m_ST_UnqualifiedPercentage)
    {
        return *m_ST_UnqualifiedPercentage;
    }
    return ST_UnqualifiedPercentage::default_instance();
}

void ST_DecimalNumberOrPercent::clear_ST_UnqualifiedPercentage()
{
    m_has_ST_UnqualifiedPercentage = false;
    if (m_ST_UnqualifiedPercentage)
    {
        delete m_ST_UnqualifiedPercentage;
        m_ST_UnqualifiedPercentage = NULL;
    }
}

bool ST_DecimalNumberOrPercent::has_ST_Percentage() const
{
    return m_has_ST_Percentage;
}

ns_s::ST_Percentage* ST_DecimalNumberOrPercent::mutable_ST_Percentage()
{
    clear_ST_UnqualifiedPercentage();
    m_has_ST_Percentage = true;
    if (!m_ST_Percentage)
    {
        m_ST_Percentage = new ns_s::ST_Percentage();
    }
    return m_ST_Percentage;
}

const ns_s::ST_Percentage& ST_DecimalNumberOrPercent::get_ST_Percentage() const
{
    if (m_ST_Percentage)
    {
        return *m_ST_Percentage;
    }
    return ns_s::ST_Percentage::default_instance();
}

void ST_DecimalNumberOrPercent::clear_ST_Percentage()
{
    m_has_ST_Percentage = false;
    if (m_ST_Percentage)
    {
        delete m_ST_Percentage;
        m_ST_Percentage = NULL;
    }
}

std::string ST_DecimalNumberOrPercent::toString() const
{
    if (m_has_ST_UnqualifiedPercentage)
    {
        return m_ST_UnqualifiedPercentage->toString();
    }

    if (m_has_ST_Percentage)
    {
        return m_ST_Percentage->toString();
    }

    return string();
}

void ST_DecimalNumberOrPercent::clear()
{   clear_ST_UnqualifiedPercentage();
    clear_ST_Percentage();
}

void ST_DecimalNumberOrPercent::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_ST_UnqualifiedPercentage)
    {
        m_ST_UnqualifiedPercentage->toXmlAttr(_attrName, _outStream);
        return;
    }

    if (m_has_ST_Percentage)
    {
        m_ST_Percentage->toXmlAttr(_attrName, _outStream);
        return;
    }
}

const ST_DecimalNumberOrPercent& ST_DecimalNumberOrPercent::default_instance()
{
    if (!ST_DecimalNumberOrPercent::default_instance_)
    {
        ST_DecimalNumberOrPercent::default_instance_ = new ST_DecimalNumberOrPercent();
    }
    return *ST_DecimalNumberOrPercent::default_instance_;
}

ST_DecimalNumberOrPercent* ST_DecimalNumberOrPercent::default_instance_ = NULL;

// ST_UnqualifiedPercentage
ST_UnqualifiedPercentage::ST_UnqualifiedPercentage()
    :m_has_integer(false),
     m_integer(0)
{
}
ST_UnqualifiedPercentage::ST_UnqualifiedPercentage(const XSD::integer_& _integer)
    :m_has_integer(true)
{

    set_integer(_integer);
}
ST_UnqualifiedPercentage::~ST_UnqualifiedPercentage()
{
    clear();
}
bool ST_UnqualifiedPercentage::has_integer() const
{
    return m_has_integer;
}

void ST_UnqualifiedPercentage::set_integer(const XSD::integer_& _integer)
{
    m_has_integer = true;
    m_integer = _integer;
}

const XSD::integer_& ST_UnqualifiedPercentage::get_integer() const
{
    return m_integer;
}

void ST_UnqualifiedPercentage::clear()
{
    m_has_integer = false;
    m_integer = 0;;
}

void ST_UnqualifiedPercentage::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_integer)
    {
        _outStream << " " << _attrName << "=\"" << m_integer << "\"";;
    }
}

const ST_UnqualifiedPercentage& ST_UnqualifiedPercentage::default_instance()
{
    if (!ST_UnqualifiedPercentage::default_instance_)
    {
        ST_UnqualifiedPercentage::default_instance_ = new ST_UnqualifiedPercentage();
    }
    return *ST_UnqualifiedPercentage::default_instance_;
}

std::string ST_UnqualifiedPercentage::toString() const
{
    std::stringstream strStream;
    strStream << get_integer();
    return strStream.str();
}

ST_UnqualifiedPercentage* ST_UnqualifiedPercentage::default_instance_ = NULL;

// ST_DecimalNumber
ST_DecimalNumber::ST_DecimalNumber()
    :m_has_integer(false),
     m_integer(0)
{
}
ST_DecimalNumber::ST_DecimalNumber(const XSD::integer_& _integer)
    :m_has_integer(true)
{

    set_integer(_integer);
}
ST_DecimalNumber::~ST_DecimalNumber()
{
    clear();
}
bool ST_DecimalNumber::has_integer() const
{
    return m_has_integer;
}

void ST_DecimalNumber::set_integer(const XSD::integer_& _integer)
{
    m_has_integer = true;
    m_integer = _integer;
}

const XSD::integer_& ST_DecimalNumber::get_integer() const
{
    return m_integer;
}

void ST_DecimalNumber::clear()
{
    m_has_integer = false;
    m_integer = 0;;
}

void ST_DecimalNumber::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_integer)
    {
        _outStream << " " << _attrName << "=\"" << m_integer << "\"";;
    }
}

const ST_DecimalNumber& ST_DecimalNumber::default_instance()
{
    if (!ST_DecimalNumber::default_instance_)
    {
        ST_DecimalNumber::default_instance_ = new ST_DecimalNumber();
    }
    return *ST_DecimalNumber::default_instance_;
}

std::string ST_DecimalNumber::toString() const
{
    std::stringstream strStream;
    strStream << get_integer();
    return strStream.str();
}

ST_DecimalNumber* ST_DecimalNumber::default_instance_ = NULL;

// ST_SignedTwipsMeasure
ST_SignedTwipsMeasure::ST_SignedTwipsMeasure()
    :m_has_integer(false),
     m_integer(0),
     m_has_ST_UniversalMeasure(false),
     m_ST_UniversalMeasure(NULL)
{
}
ST_SignedTwipsMeasure::ST_SignedTwipsMeasure(const ST_SignedTwipsMeasure& _ST_SignedTwipsMeasure)
    :m_has_integer(false),
     m_integer(0),
     m_has_ST_UniversalMeasure(false),
     m_ST_UniversalMeasure(NULL)
{

    m_has_integer = _ST_SignedTwipsMeasure.has_integer();
    m_integer = _ST_SignedTwipsMeasure.get_integer();


    m_has_ST_UniversalMeasure = _ST_SignedTwipsMeasure.has_ST_UniversalMeasure();
    if (_ST_SignedTwipsMeasure.has_ST_UniversalMeasure())
    {
        m_ST_UniversalMeasure = new ns_s::ST_UniversalMeasure(_ST_SignedTwipsMeasure.get_ST_UniversalMeasure());
    }
}
ST_SignedTwipsMeasure::~ST_SignedTwipsMeasure()
{
    clear();
}
bool ST_SignedTwipsMeasure::has_integer() const
{
    return m_has_integer;
}

void ST_SignedTwipsMeasure::set_integer(const XSD::integer_& _integer)
{
    clear_ST_UniversalMeasure();
    m_has_integer = true;
    m_integer = _integer;
}

const XSD::integer_& ST_SignedTwipsMeasure::get_integer() const
{
    return m_integer;
}

void ST_SignedTwipsMeasure::clear_integer()
{
    m_has_integer = false;
    m_integer = 0;
}

bool ST_SignedTwipsMeasure::has_ST_UniversalMeasure() const
{
    return m_has_ST_UniversalMeasure;
}

ns_s::ST_UniversalMeasure* ST_SignedTwipsMeasure::mutable_ST_UniversalMeasure()
{
    clear_integer();
    m_has_ST_UniversalMeasure = true;
    if (!m_ST_UniversalMeasure)
    {
        m_ST_UniversalMeasure = new ns_s::ST_UniversalMeasure();
    }
    return m_ST_UniversalMeasure;
}

const ns_s::ST_UniversalMeasure& ST_SignedTwipsMeasure::get_ST_UniversalMeasure() const
{
    if (m_ST_UniversalMeasure)
    {
        return *m_ST_UniversalMeasure;
    }
    return ns_s::ST_UniversalMeasure::default_instance();
}

void ST_SignedTwipsMeasure::clear_ST_UniversalMeasure()
{
    m_has_ST_UniversalMeasure = false;
    if (m_ST_UniversalMeasure)
    {
        delete m_ST_UniversalMeasure;
        m_ST_UniversalMeasure = NULL;
    }
}

std::string ST_SignedTwipsMeasure::toString() const
{
    if (m_has_integer)
    {

        std::stringstream strStream;
        strStream << m_integer;
        return strStream.str();

    }

    if (m_has_ST_UniversalMeasure)
    {
        return m_ST_UniversalMeasure->toString();
    }

    return string();
}

void ST_SignedTwipsMeasure::clear()
{   clear_integer();
    clear_ST_UniversalMeasure();
}

void ST_SignedTwipsMeasure::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_integer)
    {
        _outStream << " " << _attrName << "=\"" << m_integer << "\"";
        return;
    }

    if (m_has_ST_UniversalMeasure)
    {
        m_ST_UniversalMeasure->toXmlAttr(_attrName, _outStream);
        return;
    }
}

const ST_SignedTwipsMeasure& ST_SignedTwipsMeasure::default_instance()
{
    if (!ST_SignedTwipsMeasure::default_instance_)
    {
        ST_SignedTwipsMeasure::default_instance_ = new ST_SignedTwipsMeasure();
    }
    return *ST_SignedTwipsMeasure::default_instance_;
}

ST_SignedTwipsMeasure* ST_SignedTwipsMeasure::default_instance_ = NULL;

// ST_PixelsMeasure
ST_PixelsMeasure::ST_PixelsMeasure()

{
}
ST_PixelsMeasure::ST_PixelsMeasure(const ns_s::ST_UnsignedDecimalNumber& _ST_UnsignedDecimalNumber)
    :ns_s::ST_UnsignedDecimalNumber(_ST_UnsignedDecimalNumber)
{
}
ST_PixelsMeasure::~ST_PixelsMeasure()
{
    clear();
}
const ST_PixelsMeasure& ST_PixelsMeasure::default_instance()
{
    if (!ST_PixelsMeasure::default_instance_)
    {
        ST_PixelsMeasure::default_instance_ = new ST_PixelsMeasure();
    }
    return *ST_PixelsMeasure::default_instance_;
}

ST_PixelsMeasure* ST_PixelsMeasure::default_instance_ = NULL;

// ST_HpsMeasure
ST_HpsMeasure::ST_HpsMeasure()
    :m_has_ST_UnsignedDecimalNumber(false),
     m_ST_UnsignedDecimalNumber(NULL),
     m_has_ST_PositiveUniversalMeasure(false),
     m_ST_PositiveUniversalMeasure(NULL)
{
}
ST_HpsMeasure::ST_HpsMeasure(const ST_HpsMeasure& _ST_HpsMeasure)
    :m_has_ST_UnsignedDecimalNumber(false),
     m_ST_UnsignedDecimalNumber(NULL),
     m_has_ST_PositiveUniversalMeasure(false),
     m_ST_PositiveUniversalMeasure(NULL)
{

    m_has_ST_UnsignedDecimalNumber = _ST_HpsMeasure.has_ST_UnsignedDecimalNumber();
    if (_ST_HpsMeasure.has_ST_UnsignedDecimalNumber())
    {
        m_ST_UnsignedDecimalNumber = new ns_s::ST_UnsignedDecimalNumber(_ST_HpsMeasure.get_ST_UnsignedDecimalNumber());
    }


    m_has_ST_PositiveUniversalMeasure = _ST_HpsMeasure.has_ST_PositiveUniversalMeasure();
    if (_ST_HpsMeasure.has_ST_PositiveUniversalMeasure())
    {
        m_ST_PositiveUniversalMeasure = new ns_s::ST_PositiveUniversalMeasure(_ST_HpsMeasure.get_ST_PositiveUniversalMeasure());
    }
}
ST_HpsMeasure::~ST_HpsMeasure()
{
    clear();
}
bool ST_HpsMeasure::has_ST_UnsignedDecimalNumber() const
{
    return m_has_ST_UnsignedDecimalNumber;
}

ns_s::ST_UnsignedDecimalNumber* ST_HpsMeasure::mutable_ST_UnsignedDecimalNumber()
{
    clear_ST_PositiveUniversalMeasure();
    m_has_ST_UnsignedDecimalNumber = true;
    if (!m_ST_UnsignedDecimalNumber)
    {
        m_ST_UnsignedDecimalNumber = new ns_s::ST_UnsignedDecimalNumber();
    }
    return m_ST_UnsignedDecimalNumber;
}

const ns_s::ST_UnsignedDecimalNumber& ST_HpsMeasure::get_ST_UnsignedDecimalNumber() const
{
    if (m_ST_UnsignedDecimalNumber)
    {
        return *m_ST_UnsignedDecimalNumber;
    }
    return ns_s::ST_UnsignedDecimalNumber::default_instance();
}

void ST_HpsMeasure::clear_ST_UnsignedDecimalNumber()
{
    m_has_ST_UnsignedDecimalNumber = false;
    if (m_ST_UnsignedDecimalNumber)
    {
        delete m_ST_UnsignedDecimalNumber;
        m_ST_UnsignedDecimalNumber = NULL;
    }
}

bool ST_HpsMeasure::has_ST_PositiveUniversalMeasure() const
{
    return m_has_ST_PositiveUniversalMeasure;
}

ns_s::ST_PositiveUniversalMeasure* ST_HpsMeasure::mutable_ST_PositiveUniversalMeasure()
{
    clear_ST_UnsignedDecimalNumber();
    m_has_ST_PositiveUniversalMeasure = true;
    if (!m_ST_PositiveUniversalMeasure)
    {
        m_ST_PositiveUniversalMeasure = new ns_s::ST_PositiveUniversalMeasure();
    }
    return m_ST_PositiveUniversalMeasure;
}

const ns_s::ST_PositiveUniversalMeasure& ST_HpsMeasure::get_ST_PositiveUniversalMeasure() const
{
    if (m_ST_PositiveUniversalMeasure)
    {
        return *m_ST_PositiveUniversalMeasure;
    }
    return ns_s::ST_PositiveUniversalMeasure::default_instance();
}

void ST_HpsMeasure::clear_ST_PositiveUniversalMeasure()
{
    m_has_ST_PositiveUniversalMeasure = false;
    if (m_ST_PositiveUniversalMeasure)
    {
        delete m_ST_PositiveUniversalMeasure;
        m_ST_PositiveUniversalMeasure = NULL;
    }
}

std::string ST_HpsMeasure::toString() const
{
    if (m_has_ST_UnsignedDecimalNumber)
    {
        return m_ST_UnsignedDecimalNumber->toString();
    }

    if (m_has_ST_PositiveUniversalMeasure)
    {
        return m_ST_PositiveUniversalMeasure->toString();
    }

    return string();
}

void ST_HpsMeasure::clear()
{   clear_ST_UnsignedDecimalNumber();
    clear_ST_PositiveUniversalMeasure();
}

void ST_HpsMeasure::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_ST_UnsignedDecimalNumber)
    {
        m_ST_UnsignedDecimalNumber->toXmlAttr(_attrName, _outStream);
        return;
    }

    if (m_has_ST_PositiveUniversalMeasure)
    {
        m_ST_PositiveUniversalMeasure->toXmlAttr(_attrName, _outStream);
        return;
    }
}

const ST_HpsMeasure& ST_HpsMeasure::default_instance()
{
    if (!ST_HpsMeasure::default_instance_)
    {
        ST_HpsMeasure::default_instance_ = new ST_HpsMeasure();
    }
    return *ST_HpsMeasure::default_instance_;
}

ST_HpsMeasure* ST_HpsMeasure::default_instance_ = NULL;

// ST_SignedHpsMeasure
ST_SignedHpsMeasure::ST_SignedHpsMeasure()
    :m_has_integer(false),
     m_integer(0),
     m_has_ST_UniversalMeasure(false),
     m_ST_UniversalMeasure(NULL)
{
}
ST_SignedHpsMeasure::ST_SignedHpsMeasure(const ST_SignedHpsMeasure& _ST_SignedHpsMeasure)
    :m_has_integer(false),
     m_integer(0),
     m_has_ST_UniversalMeasure(false),
     m_ST_UniversalMeasure(NULL)
{

    m_has_integer = _ST_SignedHpsMeasure.has_integer();
    m_integer = _ST_SignedHpsMeasure.get_integer();


    m_has_ST_UniversalMeasure = _ST_SignedHpsMeasure.has_ST_UniversalMeasure();
    if (_ST_SignedHpsMeasure.has_ST_UniversalMeasure())
    {
        m_ST_UniversalMeasure = new ns_s::ST_UniversalMeasure(_ST_SignedHpsMeasure.get_ST_UniversalMeasure());
    }
}
ST_SignedHpsMeasure::~ST_SignedHpsMeasure()
{
    clear();
}
bool ST_SignedHpsMeasure::has_integer() const
{
    return m_has_integer;
}

void ST_SignedHpsMeasure::set_integer(const XSD::integer_& _integer)
{
    clear_ST_UniversalMeasure();
    m_has_integer = true;
    m_integer = _integer;
}

const XSD::integer_& ST_SignedHpsMeasure::get_integer() const
{
    return m_integer;
}

void ST_SignedHpsMeasure::clear_integer()
{
    m_has_integer = false;
    m_integer = 0;
}

bool ST_SignedHpsMeasure::has_ST_UniversalMeasure() const
{
    return m_has_ST_UniversalMeasure;
}

ns_s::ST_UniversalMeasure* ST_SignedHpsMeasure::mutable_ST_UniversalMeasure()
{
    clear_integer();
    m_has_ST_UniversalMeasure = true;
    if (!m_ST_UniversalMeasure)
    {
        m_ST_UniversalMeasure = new ns_s::ST_UniversalMeasure();
    }
    return m_ST_UniversalMeasure;
}

const ns_s::ST_UniversalMeasure& ST_SignedHpsMeasure::get_ST_UniversalMeasure() const
{
    if (m_ST_UniversalMeasure)
    {
        return *m_ST_UniversalMeasure;
    }
    return ns_s::ST_UniversalMeasure::default_instance();
}

void ST_SignedHpsMeasure::clear_ST_UniversalMeasure()
{
    m_has_ST_UniversalMeasure = false;
    if (m_ST_UniversalMeasure)
    {
        delete m_ST_UniversalMeasure;
        m_ST_UniversalMeasure = NULL;
    }
}

std::string ST_SignedHpsMeasure::toString() const
{
    if (m_has_integer)
    {

        std::stringstream strStream;
        strStream << m_integer;
        return strStream.str();

    }

    if (m_has_ST_UniversalMeasure)
    {
        return m_ST_UniversalMeasure->toString();
    }

    return string();
}

void ST_SignedHpsMeasure::clear()
{   clear_integer();
    clear_ST_UniversalMeasure();
}

void ST_SignedHpsMeasure::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_integer)
    {
        _outStream << " " << _attrName << "=\"" << m_integer << "\"";
        return;
    }

    if (m_has_ST_UniversalMeasure)
    {
        m_ST_UniversalMeasure->toXmlAttr(_attrName, _outStream);
        return;
    }
}

const ST_SignedHpsMeasure& ST_SignedHpsMeasure::default_instance()
{
    if (!ST_SignedHpsMeasure::default_instance_)
    {
        ST_SignedHpsMeasure::default_instance_ = new ST_SignedHpsMeasure();
    }
    return *ST_SignedHpsMeasure::default_instance_;
}

ST_SignedHpsMeasure* ST_SignedHpsMeasure::default_instance_ = NULL;

// ST_DateTime
ST_DateTime::ST_DateTime()
    :m_has_dateTime(false),
     m_dateTime("")
{
}
ST_DateTime::ST_DateTime(const XSD::dateTime_& _dateTime)
    :m_has_dateTime(true)
{

    set_dateTime(_dateTime);
}
ST_DateTime::~ST_DateTime()
{
    clear();
}
bool ST_DateTime::has_dateTime() const
{
    return m_has_dateTime;
}

void ST_DateTime::set_dateTime(const XSD::dateTime_& _dateTime)
{
    m_has_dateTime = true;
    m_dateTime = _dateTime;
}

const XSD::dateTime_& ST_DateTime::get_dateTime() const
{
    return m_dateTime;
}

void ST_DateTime::clear()
{
    m_has_dateTime = false;
    m_dateTime.clear();;
}

void ST_DateTime::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_dateTime)
    {
        _outStream << " " << _attrName << "=\"" << m_dateTime << "\"";;
    }
}

const ST_DateTime& ST_DateTime::default_instance()
{
    if (!ST_DateTime::default_instance_)
    {
        ST_DateTime::default_instance_ = new ST_DateTime();
    }
    return *ST_DateTime::default_instance_;
}

std::string ST_DateTime::toString() const
{
    std::stringstream strStream;
    strStream << get_dateTime();
    return strStream.str();
}

ST_DateTime* ST_DateTime::default_instance_ = NULL;

// ST_MacroName
ST_MacroName::ST_MacroName()
    :m_has_string(false),
     m_string("")
{
}
ST_MacroName::ST_MacroName(const XSD::string_& _string)
    :m_has_string(true)
{

    set_string(_string);
}
ST_MacroName::~ST_MacroName()
{
    clear();
}
bool ST_MacroName::has_string() const
{
    return m_has_string;
}

void ST_MacroName::set_string(const XSD::string_& _string)
{   assert(_string.size() <= 33);

    m_has_string = true;
    m_string = _string;
}

const XSD::string_& ST_MacroName::get_string() const
{
    return m_string;
}

void ST_MacroName::clear()
{
    m_has_string = false;
    m_string.clear();;
}

void ST_MacroName::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_string)
    {
        _outStream << " " << _attrName << "=\"" << m_string << "\"";;
    }
}

const ST_MacroName& ST_MacroName::default_instance()
{
    if (!ST_MacroName::default_instance_)
    {
        ST_MacroName::default_instance_ = new ST_MacroName();
    }
    return *ST_MacroName::default_instance_;
}

std::string ST_MacroName::toString() const
{
    std::stringstream strStream;
    strStream << get_string();
    return strStream.str();
}

ST_MacroName* ST_MacroName::default_instance_ = NULL;

// ST_EighthPointMeasure
ST_EighthPointMeasure::ST_EighthPointMeasure()

{
}
ST_EighthPointMeasure::ST_EighthPointMeasure(const ns_s::ST_UnsignedDecimalNumber& _ST_UnsignedDecimalNumber)
    :ns_s::ST_UnsignedDecimalNumber(_ST_UnsignedDecimalNumber)
{
}
ST_EighthPointMeasure::~ST_EighthPointMeasure()
{
    clear();
}
const ST_EighthPointMeasure& ST_EighthPointMeasure::default_instance()
{
    if (!ST_EighthPointMeasure::default_instance_)
    {
        ST_EighthPointMeasure::default_instance_ = new ST_EighthPointMeasure();
    }
    return *ST_EighthPointMeasure::default_instance_;
}

ST_EighthPointMeasure* ST_EighthPointMeasure::default_instance_ = NULL;

// ST_PointMeasure
ST_PointMeasure::ST_PointMeasure()

{
}
ST_PointMeasure::ST_PointMeasure(const ns_s::ST_UnsignedDecimalNumber& _ST_UnsignedDecimalNumber)
    :ns_s::ST_UnsignedDecimalNumber(_ST_UnsignedDecimalNumber)
{
}
ST_PointMeasure::~ST_PointMeasure()
{
    clear();
}
const ST_PointMeasure& ST_PointMeasure::default_instance()
{
    if (!ST_PointMeasure::default_instance_)
    {
        ST_PointMeasure::default_instance_ = new ST_PointMeasure();
    }
    return *ST_PointMeasure::default_instance_;
}

ST_PointMeasure* ST_PointMeasure::default_instance_ = NULL;

// ST_TextScale
ST_TextScale::ST_TextScale()
    :m_has_ST_TextScalePercent(false),
     m_ST_TextScalePercent(NULL),
     m_has_ST_TextScaleDecimal(false),
     m_ST_TextScaleDecimal(NULL)
{
}
ST_TextScale::ST_TextScale(const ST_TextScale& _ST_TextScale)
    :m_has_ST_TextScalePercent(false),
     m_ST_TextScalePercent(NULL),
     m_has_ST_TextScaleDecimal(false),
     m_ST_TextScaleDecimal(NULL)
{

    m_has_ST_TextScalePercent = _ST_TextScale.has_ST_TextScalePercent();
    if (_ST_TextScale.has_ST_TextScalePercent())
    {
        m_ST_TextScalePercent = new ST_TextScalePercent(_ST_TextScale.get_ST_TextScalePercent());
    }


    m_has_ST_TextScaleDecimal = _ST_TextScale.has_ST_TextScaleDecimal();
    if (_ST_TextScale.has_ST_TextScaleDecimal())
    {
        m_ST_TextScaleDecimal = new ST_TextScaleDecimal(_ST_TextScale.get_ST_TextScaleDecimal());
    }
}
ST_TextScale::~ST_TextScale()
{
    clear();
}
bool ST_TextScale::has_ST_TextScalePercent() const
{
    return m_has_ST_TextScalePercent;
}

ST_TextScalePercent* ST_TextScale::mutable_ST_TextScalePercent()
{
    clear_ST_TextScaleDecimal();
    m_has_ST_TextScalePercent = true;
    if (!m_ST_TextScalePercent)
    {
        m_ST_TextScalePercent = new ST_TextScalePercent();
    }
    return m_ST_TextScalePercent;
}

const ST_TextScalePercent& ST_TextScale::get_ST_TextScalePercent() const
{
    if (m_ST_TextScalePercent)
    {
        return *m_ST_TextScalePercent;
    }
    return ST_TextScalePercent::default_instance();
}

void ST_TextScale::clear_ST_TextScalePercent()
{
    m_has_ST_TextScalePercent = false;
    if (m_ST_TextScalePercent)
    {
        delete m_ST_TextScalePercent;
        m_ST_TextScalePercent = NULL;
    }
}

bool ST_TextScale::has_ST_TextScaleDecimal() const
{
    return m_has_ST_TextScaleDecimal;
}

ST_TextScaleDecimal* ST_TextScale::mutable_ST_TextScaleDecimal()
{
    clear_ST_TextScalePercent();
    m_has_ST_TextScaleDecimal = true;
    if (!m_ST_TextScaleDecimal)
    {
        m_ST_TextScaleDecimal = new ST_TextScaleDecimal();
    }
    return m_ST_TextScaleDecimal;
}

const ST_TextScaleDecimal& ST_TextScale::get_ST_TextScaleDecimal() const
{
    if (m_ST_TextScaleDecimal)
    {
        return *m_ST_TextScaleDecimal;
    }
    return ST_TextScaleDecimal::default_instance();
}

void ST_TextScale::clear_ST_TextScaleDecimal()
{
    m_has_ST_TextScaleDecimal = false;
    if (m_ST_TextScaleDecimal)
    {
        delete m_ST_TextScaleDecimal;
        m_ST_TextScaleDecimal = NULL;
    }
}

std::string ST_TextScale::toString() const
{
    if (m_has_ST_TextScalePercent)
    {
        return m_ST_TextScalePercent->toString();
    }

    if (m_has_ST_TextScaleDecimal)
    {
        return m_ST_TextScaleDecimal->toString();
    }

    return string();
}

void ST_TextScale::clear()
{   clear_ST_TextScalePercent();
    clear_ST_TextScaleDecimal();
}

void ST_TextScale::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_ST_TextScalePercent)
    {
        m_ST_TextScalePercent->toXmlAttr(_attrName, _outStream);
        return;
    }

    if (m_has_ST_TextScaleDecimal)
    {
        m_ST_TextScaleDecimal->toXmlAttr(_attrName, _outStream);
        return;
    }
}

const ST_TextScale& ST_TextScale::default_instance()
{
    if (!ST_TextScale::default_instance_)
    {
        ST_TextScale::default_instance_ = new ST_TextScale();
    }
    return *ST_TextScale::default_instance_;
}

ST_TextScale* ST_TextScale::default_instance_ = NULL;

// ST_TextScalePercent
ST_TextScalePercent::ST_TextScalePercent()
    :m_has_string(false),
     m_string("")
{
}
ST_TextScalePercent::ST_TextScalePercent(const XSD::string_& _string)
    :m_has_string(true)
{

    set_string(_string);
}
ST_TextScalePercent::~ST_TextScalePercent()
{
    clear();
}
bool ST_TextScalePercent::has_string() const
{
    return m_has_string;
}

void ST_TextScalePercent::set_string(const XSD::string_& _string)
{
    m_has_string = true;
    m_string = _string;
}

const XSD::string_& ST_TextScalePercent::get_string() const
{
    return m_string;
}

void ST_TextScalePercent::clear()
{
    m_has_string = false;
    m_string.clear();;
}

void ST_TextScalePercent::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_string)
    {
        _outStream << " " << _attrName << "=\"" << m_string << "\"";;
    }
}

const ST_TextScalePercent& ST_TextScalePercent::default_instance()
{
    if (!ST_TextScalePercent::default_instance_)
    {
        ST_TextScalePercent::default_instance_ = new ST_TextScalePercent();
    }
    return *ST_TextScalePercent::default_instance_;
}

std::string ST_TextScalePercent::toString() const
{
    std::stringstream strStream;
    strStream << get_string();
    return strStream.str();
}

ST_TextScalePercent* ST_TextScalePercent::default_instance_ = NULL;

// ST_TextScaleDecimal
ST_TextScaleDecimal::ST_TextScaleDecimal()
    :m_has_integer(false),
     m_integer(0)
{
}
ST_TextScaleDecimal::ST_TextScaleDecimal(const XSD::integer_& _integer)
    :m_has_integer(true)
{

    set_integer(_integer);
}
ST_TextScaleDecimal::~ST_TextScaleDecimal()
{
    clear();
}
bool ST_TextScaleDecimal::has_integer() const
{
    return m_has_integer;
}

void ST_TextScaleDecimal::set_integer(const XSD::integer_& _integer)
{   assert(0 <= _integer);
    assert(_integer <= 600);

    m_has_integer = true;
    m_integer = _integer;
}

const XSD::integer_& ST_TextScaleDecimal::get_integer() const
{
    return m_integer;
}

void ST_TextScaleDecimal::clear()
{
    m_has_integer = false;
    m_integer = 0;;
}

void ST_TextScaleDecimal::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_integer)
    {
        _outStream << " " << _attrName << "=\"" << m_integer << "\"";;
    }
}

const ST_TextScaleDecimal& ST_TextScaleDecimal::default_instance()
{
    if (!ST_TextScaleDecimal::default_instance_)
    {
        ST_TextScaleDecimal::default_instance_ = new ST_TextScaleDecimal();
    }
    return *ST_TextScaleDecimal::default_instance_;
}

std::string ST_TextScaleDecimal::toString() const
{
    std::stringstream strStream;
    strStream << get_integer();
    return strStream.str();
}

ST_TextScaleDecimal* ST_TextScaleDecimal::default_instance_ = NULL;

// ST_HighlightColor
ST_HighlightColor::ST_HighlightColor()
    :m_has_type(false)
{
}
ST_HighlightColor::ST_HighlightColor(const ST_HighlightColor::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_HighlightColor::~ST_HighlightColor()
{
    clear();
}
bool ST_HighlightColor::has_type() const
{
    return m_has_type;
}

void ST_HighlightColor::set_type(const ST_HighlightColor::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_HighlightColor::Type& ST_HighlightColor::get_type() const
{
    return m_type;
}

std::string ST_HighlightColor::toString() const
{
    return ST_HighlightColor::TypeStrList[m_type];
}

void ST_HighlightColor::clear()
{
    m_has_type = false;
}

void ST_HighlightColor::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_HighlightColor& ST_HighlightColor::default_instance()
{
    if (!ST_HighlightColor::default_instance_)
    {
        ST_HighlightColor::default_instance_ = new ST_HighlightColor();
    }
    return *ST_HighlightColor::default_instance_;
}

const std::string ST_HighlightColor::TypeStrList[] =
{
    "black",
    "blue",
    "cyan",
    "green",
    "magenta",
    "red",
    "yellow",
    "white",
    "darkBlue",
    "darkCyan",
    "darkGreen",
    "darkMagenta",
    "darkRed",
    "darkYellow",
    "darkGray",
    "lightGray",
    "none"
};
ST_HighlightColor* ST_HighlightColor::default_instance_ = NULL;

// ST_HexColorAuto
ST_HexColorAuto::ST_HexColorAuto()
    :m_has_type(false)
{
}
ST_HexColorAuto::ST_HexColorAuto(const ST_HexColorAuto::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_HexColorAuto::~ST_HexColorAuto()
{
    clear();
}
bool ST_HexColorAuto::has_type() const
{
    return m_has_type;
}

void ST_HexColorAuto::set_type(const ST_HexColorAuto::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_HexColorAuto::Type& ST_HexColorAuto::get_type() const
{
    return m_type;
}

std::string ST_HexColorAuto::toString() const
{
    return ST_HexColorAuto::TypeStrList[m_type];
}

void ST_HexColorAuto::clear()
{
    m_has_type = false;
}

void ST_HexColorAuto::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_HexColorAuto& ST_HexColorAuto::default_instance()
{
    if (!ST_HexColorAuto::default_instance_)
    {
        ST_HexColorAuto::default_instance_ = new ST_HexColorAuto();
    }
    return *ST_HexColorAuto::default_instance_;
}

const std::string ST_HexColorAuto::TypeStrList[] =
{
    "auto"
};
ST_HexColorAuto* ST_HexColorAuto::default_instance_ = NULL;

// ST_HexColor
ST_HexColor::ST_HexColor()
    :m_has_ST_HexColorAuto(false),
     m_ST_HexColorAuto(NULL),
     m_has_ST_HexColorRGB(false),
     m_ST_HexColorRGB(NULL)
{
}
ST_HexColor::ST_HexColor(const ST_HexColor& _ST_HexColor)
    :m_has_ST_HexColorAuto(false),
     m_ST_HexColorAuto(NULL),
     m_has_ST_HexColorRGB(false),
     m_ST_HexColorRGB(NULL)
{

    m_has_ST_HexColorAuto = _ST_HexColor.has_ST_HexColorAuto();
    if (_ST_HexColor.has_ST_HexColorAuto())
    {
        m_ST_HexColorAuto = new ST_HexColorAuto(_ST_HexColor.get_ST_HexColorAuto());
    }


    m_has_ST_HexColorRGB = _ST_HexColor.has_ST_HexColorRGB();
    if (_ST_HexColor.has_ST_HexColorRGB())
    {
        m_ST_HexColorRGB = new ns_s::ST_HexColorRGB(_ST_HexColor.get_ST_HexColorRGB());
    }
}
ST_HexColor::~ST_HexColor()
{
    clear();
}
bool ST_HexColor::has_ST_HexColorAuto() const
{
    return m_has_ST_HexColorAuto;
}

ST_HexColorAuto* ST_HexColor::mutable_ST_HexColorAuto()
{
    clear_ST_HexColorRGB();
    m_has_ST_HexColorAuto = true;
    if (!m_ST_HexColorAuto)
    {
        m_ST_HexColorAuto = new ST_HexColorAuto();
    }
    return m_ST_HexColorAuto;
}

const ST_HexColorAuto& ST_HexColor::get_ST_HexColorAuto() const
{
    if (m_ST_HexColorAuto)
    {
        return *m_ST_HexColorAuto;
    }
    return ST_HexColorAuto::default_instance();
}

void ST_HexColor::clear_ST_HexColorAuto()
{
    m_has_ST_HexColorAuto = false;
    if (m_ST_HexColorAuto)
    {
        delete m_ST_HexColorAuto;
        m_ST_HexColorAuto = NULL;
    }
}

bool ST_HexColor::has_ST_HexColorRGB() const
{
    return m_has_ST_HexColorRGB;
}

ns_s::ST_HexColorRGB* ST_HexColor::mutable_ST_HexColorRGB()
{
    clear_ST_HexColorAuto();
    m_has_ST_HexColorRGB = true;
    if (!m_ST_HexColorRGB)
    {
        m_ST_HexColorRGB = new ns_s::ST_HexColorRGB();
    }
    return m_ST_HexColorRGB;
}

const ns_s::ST_HexColorRGB& ST_HexColor::get_ST_HexColorRGB() const
{
    if (m_ST_HexColorRGB)
    {
        return *m_ST_HexColorRGB;
    }
    return ns_s::ST_HexColorRGB::default_instance();
}

void ST_HexColor::clear_ST_HexColorRGB()
{
    m_has_ST_HexColorRGB = false;
    if (m_ST_HexColorRGB)
    {
        delete m_ST_HexColorRGB;
        m_ST_HexColorRGB = NULL;
    }
}

std::string ST_HexColor::toString() const
{
    if (m_has_ST_HexColorAuto)
    {
        return m_ST_HexColorAuto->toString();
    }

    if (m_has_ST_HexColorRGB)
    {
        return m_ST_HexColorRGB->toString();
    }

    return string();
}

void ST_HexColor::clear()
{   clear_ST_HexColorAuto();
    clear_ST_HexColorRGB();
}

void ST_HexColor::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_ST_HexColorAuto)
    {
        m_ST_HexColorAuto->toXmlAttr(_attrName, _outStream);
        return;
    }

    if (m_has_ST_HexColorRGB)
    {
        m_ST_HexColorRGB->toXmlAttr(_attrName, _outStream);
        return;
    }
}

const ST_HexColor& ST_HexColor::default_instance()
{
    if (!ST_HexColor::default_instance_)
    {
        ST_HexColor::default_instance_ = new ST_HexColor();
    }
    return *ST_HexColor::default_instance_;
}

ST_HexColor* ST_HexColor::default_instance_ = NULL;

// ST_Underline
ST_Underline::ST_Underline()
    :m_has_type(false)
{
}
ST_Underline::ST_Underline(const ST_Underline::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_Underline::~ST_Underline()
{
    clear();
}
bool ST_Underline::has_type() const
{
    return m_has_type;
}

void ST_Underline::set_type(const ST_Underline::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_Underline::Type& ST_Underline::get_type() const
{
    return m_type;
}

std::string ST_Underline::toString() const
{
    return ST_Underline::TypeStrList[m_type];
}

void ST_Underline::clear()
{
    m_has_type = false;
}

void ST_Underline::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_Underline& ST_Underline::default_instance()
{
    if (!ST_Underline::default_instance_)
    {
        ST_Underline::default_instance_ = new ST_Underline();
    }
    return *ST_Underline::default_instance_;
}

const std::string ST_Underline::TypeStrList[] =
{
    "single",
    "words",
    "double",
    "thick",
    "dotted",
    "dottedHeavy",
    "dash",
    "dashedHeavy",
    "dashLong",
    "dashLongHeavy",
    "dotDash",
    "dashDotHeavy",
    "dotDotDash",
    "dashDotDotHeavy",
    "wave",
    "wavyHeavy",
    "wavyDouble",
    "none"
};
ST_Underline* ST_Underline::default_instance_ = NULL;

// ST_TextEffect
ST_TextEffect::ST_TextEffect()
    :m_has_type(false)
{
}
ST_TextEffect::ST_TextEffect(const ST_TextEffect::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_TextEffect::~ST_TextEffect()
{
    clear();
}
bool ST_TextEffect::has_type() const
{
    return m_has_type;
}

void ST_TextEffect::set_type(const ST_TextEffect::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_TextEffect::Type& ST_TextEffect::get_type() const
{
    return m_type;
}

std::string ST_TextEffect::toString() const
{
    return ST_TextEffect::TypeStrList[m_type];
}

void ST_TextEffect::clear()
{
    m_has_type = false;
}

void ST_TextEffect::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_TextEffect& ST_TextEffect::default_instance()
{
    if (!ST_TextEffect::default_instance_)
    {
        ST_TextEffect::default_instance_ = new ST_TextEffect();
    }
    return *ST_TextEffect::default_instance_;
}

const std::string ST_TextEffect::TypeStrList[] =
{
    "blinkBackground",
    "lights",
    "antsBlack",
    "antsRed",
    "shimmer",
    "sparkle",
    "none"
};
ST_TextEffect* ST_TextEffect::default_instance_ = NULL;

// ST_Border
ST_Border::ST_Border()
    :m_has_type(false)
{
}
ST_Border::ST_Border(const ST_Border::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_Border::~ST_Border()
{
    clear();
}
bool ST_Border::has_type() const
{
    return m_has_type;
}

void ST_Border::set_type(const ST_Border::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_Border::Type& ST_Border::get_type() const
{
    return m_type;
}

std::string ST_Border::toString() const
{
    return ST_Border::TypeStrList[m_type];
}

void ST_Border::clear()
{
    m_has_type = false;
}

void ST_Border::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_Border& ST_Border::default_instance()
{
    if (!ST_Border::default_instance_)
    {
        ST_Border::default_instance_ = new ST_Border();
    }
    return *ST_Border::default_instance_;
}

const std::string ST_Border::TypeStrList[] =
{
    "nil",
    "none",
    "single",
    "thick",
    "double",
    "dotted",
    "dashed",
    "dotDash",
    "dotDotDash",
    "triple",
    "thinThickSmallGap",
    "thickThinSmallGap",
    "thinThickThinSmallGap",
    "thinThickMediumGap",
    "thickThinMediumGap",
    "thinThickThinMediumGap",
    "thinThickLargeGap",
    "thickThinLargeGap",
    "thinThickThinLargeGap",
    "wave",
    "doubleWave",
    "dashSmallGap",
    "dashDotStroked",
    "threeDEmboss",
    "threeDEngrave",
    "outset",
    "inset",
    "apples",
    "archedScallops",
    "babyPacifier",
    "babyRattle",
    "balloons3Colors",
    "balloonsHotAir",
    "basicBlackDashes",
    "basicBlackDots",
    "basicBlackSquares",
    "basicThinLines",
    "basicWhiteDashes",
    "basicWhiteDots",
    "basicWhiteSquares",
    "basicWideInline",
    "basicWideMidline",
    "basicWideOutline",
    "bats",
    "birds",
    "birdsFlight",
    "cabins",
    "cakeSlice",
    "candyCorn",
    "celticKnotwork",
    "certificateBanner",
    "chainLink",
    "champagneBottle",
    "checkedBarBlack",
    "checkedBarColor",
    "checkered",
    "christmasTree",
    "circlesLines",
    "circlesRectangles",
    "classicalWave",
    "clocks",
    "compass",
    "confetti",
    "confettiGrays",
    "confettiOutline",
    "confettiStreamers",
    "confettiWhite",
    "cornerTriangles",
    "couponCutoutDashes",
    "couponCutoutDots",
    "crazyMaze",
    "creaturesButterfly",
    "creaturesFish",
    "creaturesInsects",
    "creaturesLadyBug",
    "crossStitch",
    "cup",
    "decoArch",
    "decoArchColor",
    "decoBlocks",
    "diamondsGray",
    "doubleD",
    "doubleDiamonds",
    "earth1",
    "earth2",
    "earth3",
    "eclipsingSquares1",
    "eclipsingSquares2",
    "eggsBlack",
    "fans",
    "film",
    "firecrackers",
    "flowersBlockPrint",
    "flowersDaisies",
    "flowersModern1",
    "flowersModern2",
    "flowersPansy",
    "flowersRedRose",
    "flowersRoses",
    "flowersTeacup",
    "flowersTiny",
    "gems",
    "gingerbreadMan",
    "gradient",
    "handmade1",
    "handmade2",
    "heartBalloon",
    "heartGray",
    "hearts",
    "heebieJeebies",
    "holly",
    "houseFunky",
    "hypnotic",
    "iceCreamCones",
    "lightBulb",
    "lightning1",
    "lightning2",
    "mapPins",
    "mapleLeaf",
    "mapleMuffins",
    "marquee",
    "marqueeToothed",
    "moons",
    "mosaic",
    "musicNotes",
    "northwest",
    "ovals",
    "packages",
    "palmsBlack",
    "palmsColor",
    "paperClips",
    "papyrus",
    "partyFavor",
    "partyGlass",
    "pencils",
    "people",
    "peopleWaving",
    "peopleHats",
    "poinsettias",
    "postageStamp",
    "pumpkin1",
    "pushPinNote2",
    "pushPinNote1",
    "pyramids",
    "pyramidsAbove",
    "quadrants",
    "rings",
    "safari",
    "sawtooth",
    "sawtoothGray",
    "scaredCat",
    "seattle",
    "shadowedSquares",
    "sharksTeeth",
    "shorebirdTracks",
    "skyrocket",
    "snowflakeFancy",
    "snowflakes",
    "sombrero",
    "southwest",
    "stars",
    "starsTop",
    "stars3d",
    "starsBlack",
    "starsShadowed",
    "sun",
    "swirligig",
    "tornPaper",
    "tornPaperBlack",
    "trees",
    "triangleParty",
    "triangles",
    "triangle1",
    "triangle2",
    "triangleCircle1",
    "triangleCircle2",
    "shapes1",
    "shapes2",
    "twistedLines1",
    "twistedLines2",
    "vine",
    "waveline",
    "weavingAngles",
    "weavingBraid",
    "weavingRibbon",
    "weavingStrips",
    "whiteFlowers",
    "woodwork",
    "xIllusions",
    "zanyTriangles",
    "zigZag",
    "zigZagStitch",
    "custom"
};
ST_Border* ST_Border::default_instance_ = NULL;

// ST_Shd
ST_Shd::ST_Shd()
    :m_has_type(false)
{
}
ST_Shd::ST_Shd(const ST_Shd::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_Shd::~ST_Shd()
{
    clear();
}
bool ST_Shd::has_type() const
{
    return m_has_type;
}

void ST_Shd::set_type(const ST_Shd::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_Shd::Type& ST_Shd::get_type() const
{
    return m_type;
}

std::string ST_Shd::toString() const
{
    return ST_Shd::TypeStrList[m_type];
}

void ST_Shd::clear()
{
    m_has_type = false;
}

void ST_Shd::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_Shd& ST_Shd::default_instance()
{
    if (!ST_Shd::default_instance_)
    {
        ST_Shd::default_instance_ = new ST_Shd();
    }
    return *ST_Shd::default_instance_;
}

const std::string ST_Shd::TypeStrList[] =
{
    "nil",
    "clear",
    "solid",
    "horzStripe",
    "vertStripe",
    "reverseDiagStripe",
    "diagStripe",
    "horzCross",
    "diagCross",
    "thinHorzStripe",
    "thinVertStripe",
    "thinReverseDiagStripe",
    "thinDiagStripe",
    "thinHorzCross",
    "thinDiagCross",
    "pct5",
    "pct10",
    "pct12",
    "pct15",
    "pct20",
    "pct25",
    "pct30",
    "pct35",
    "pct37",
    "pct40",
    "pct45",
    "pct50",
    "pct55",
    "pct60",
    "pct62",
    "pct65",
    "pct70",
    "pct75",
    "pct80",
    "pct85",
    "pct87",
    "pct90",
    "pct95"
};
ST_Shd* ST_Shd::default_instance_ = NULL;

// ST_Em
ST_Em::ST_Em()
    :m_has_type(false)
{
}
ST_Em::ST_Em(const ST_Em::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_Em::~ST_Em()
{
    clear();
}
bool ST_Em::has_type() const
{
    return m_has_type;
}

void ST_Em::set_type(const ST_Em::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_Em::Type& ST_Em::get_type() const
{
    return m_type;
}

std::string ST_Em::toString() const
{
    return ST_Em::TypeStrList[m_type];
}

void ST_Em::clear()
{
    m_has_type = false;
}

void ST_Em::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_Em& ST_Em::default_instance()
{
    if (!ST_Em::default_instance_)
    {
        ST_Em::default_instance_ = new ST_Em();
    }
    return *ST_Em::default_instance_;
}

const std::string ST_Em::TypeStrList[] =
{
    "none",
    "dot",
    "comma",
    "circle",
    "underDot"
};
ST_Em* ST_Em::default_instance_ = NULL;

// ST_CombineBrackets
ST_CombineBrackets::ST_CombineBrackets()
    :m_has_type(false)
{
}
ST_CombineBrackets::ST_CombineBrackets(const ST_CombineBrackets::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_CombineBrackets::~ST_CombineBrackets()
{
    clear();
}
bool ST_CombineBrackets::has_type() const
{
    return m_has_type;
}

void ST_CombineBrackets::set_type(const ST_CombineBrackets::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_CombineBrackets::Type& ST_CombineBrackets::get_type() const
{
    return m_type;
}

std::string ST_CombineBrackets::toString() const
{
    return ST_CombineBrackets::TypeStrList[m_type];
}

void ST_CombineBrackets::clear()
{
    m_has_type = false;
}

void ST_CombineBrackets::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_CombineBrackets& ST_CombineBrackets::default_instance()
{
    if (!ST_CombineBrackets::default_instance_)
    {
        ST_CombineBrackets::default_instance_ = new ST_CombineBrackets();
    }
    return *ST_CombineBrackets::default_instance_;
}

const std::string ST_CombineBrackets::TypeStrList[] =
{
    "none",
    "round",
    "square",
    "angle",
    "curly"
};
ST_CombineBrackets* ST_CombineBrackets::default_instance_ = NULL;

// ST_HeightRule
ST_HeightRule::ST_HeightRule()
    :m_has_type(false)
{
}
ST_HeightRule::ST_HeightRule(const ST_HeightRule::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_HeightRule::~ST_HeightRule()
{
    clear();
}
bool ST_HeightRule::has_type() const
{
    return m_has_type;
}

void ST_HeightRule::set_type(const ST_HeightRule::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_HeightRule::Type& ST_HeightRule::get_type() const
{
    return m_type;
}

std::string ST_HeightRule::toString() const
{
    return ST_HeightRule::TypeStrList[m_type];
}

void ST_HeightRule::clear()
{
    m_has_type = false;
}

void ST_HeightRule::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_HeightRule& ST_HeightRule::default_instance()
{
    if (!ST_HeightRule::default_instance_)
    {
        ST_HeightRule::default_instance_ = new ST_HeightRule();
    }
    return *ST_HeightRule::default_instance_;
}

const std::string ST_HeightRule::TypeStrList[] =
{
    "auto",
    "exact",
    "atLeast"
};
ST_HeightRule* ST_HeightRule::default_instance_ = NULL;

// ST_Wrap
ST_Wrap::ST_Wrap()
    :m_has_type(false)
{
}
ST_Wrap::ST_Wrap(const ST_Wrap::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_Wrap::~ST_Wrap()
{
    clear();
}
bool ST_Wrap::has_type() const
{
    return m_has_type;
}

void ST_Wrap::set_type(const ST_Wrap::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_Wrap::Type& ST_Wrap::get_type() const
{
    return m_type;
}

std::string ST_Wrap::toString() const
{
    return ST_Wrap::TypeStrList[m_type];
}

void ST_Wrap::clear()
{
    m_has_type = false;
}

void ST_Wrap::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_Wrap& ST_Wrap::default_instance()
{
    if (!ST_Wrap::default_instance_)
    {
        ST_Wrap::default_instance_ = new ST_Wrap();
    }
    return *ST_Wrap::default_instance_;
}

const std::string ST_Wrap::TypeStrList[] =
{
    "auto",
    "notBeside",
    "around",
    "tight",
    "through",
    "none"
};
ST_Wrap* ST_Wrap::default_instance_ = NULL;

// ST_VAnchor
ST_VAnchor::ST_VAnchor()
    :m_has_type(false)
{
}
ST_VAnchor::ST_VAnchor(const ST_VAnchor::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_VAnchor::~ST_VAnchor()
{
    clear();
}
bool ST_VAnchor::has_type() const
{
    return m_has_type;
}

void ST_VAnchor::set_type(const ST_VAnchor::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_VAnchor::Type& ST_VAnchor::get_type() const
{
    return m_type;
}

std::string ST_VAnchor::toString() const
{
    return ST_VAnchor::TypeStrList[m_type];
}

void ST_VAnchor::clear()
{
    m_has_type = false;
}

void ST_VAnchor::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_VAnchor& ST_VAnchor::default_instance()
{
    if (!ST_VAnchor::default_instance_)
    {
        ST_VAnchor::default_instance_ = new ST_VAnchor();
    }
    return *ST_VAnchor::default_instance_;
}

const std::string ST_VAnchor::TypeStrList[] =
{
    "text",
    "margin",
    "page"
};
ST_VAnchor* ST_VAnchor::default_instance_ = NULL;

// ST_HAnchor
ST_HAnchor::ST_HAnchor()
    :m_has_type(false)
{
}
ST_HAnchor::ST_HAnchor(const ST_HAnchor::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_HAnchor::~ST_HAnchor()
{
    clear();
}
bool ST_HAnchor::has_type() const
{
    return m_has_type;
}

void ST_HAnchor::set_type(const ST_HAnchor::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_HAnchor::Type& ST_HAnchor::get_type() const
{
    return m_type;
}

std::string ST_HAnchor::toString() const
{
    return ST_HAnchor::TypeStrList[m_type];
}

void ST_HAnchor::clear()
{
    m_has_type = false;
}

void ST_HAnchor::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_HAnchor& ST_HAnchor::default_instance()
{
    if (!ST_HAnchor::default_instance_)
    {
        ST_HAnchor::default_instance_ = new ST_HAnchor();
    }
    return *ST_HAnchor::default_instance_;
}

const std::string ST_HAnchor::TypeStrList[] =
{
    "text",
    "margin",
    "page"
};
ST_HAnchor* ST_HAnchor::default_instance_ = NULL;

// ST_DropCap
ST_DropCap::ST_DropCap()
    :m_has_type(false)
{
}
ST_DropCap::ST_DropCap(const ST_DropCap::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_DropCap::~ST_DropCap()
{
    clear();
}
bool ST_DropCap::has_type() const
{
    return m_has_type;
}

void ST_DropCap::set_type(const ST_DropCap::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_DropCap::Type& ST_DropCap::get_type() const
{
    return m_type;
}

std::string ST_DropCap::toString() const
{
    return ST_DropCap::TypeStrList[m_type];
}

void ST_DropCap::clear()
{
    m_has_type = false;
}

void ST_DropCap::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_DropCap& ST_DropCap::default_instance()
{
    if (!ST_DropCap::default_instance_)
    {
        ST_DropCap::default_instance_ = new ST_DropCap();
    }
    return *ST_DropCap::default_instance_;
}

const std::string ST_DropCap::TypeStrList[] =
{
    "none",
    "drop",
    "margin"
};
ST_DropCap* ST_DropCap::default_instance_ = NULL;

// ST_TabJc
ST_TabJc::ST_TabJc()
    :m_has_type(false)
{
}
ST_TabJc::ST_TabJc(const ST_TabJc::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_TabJc::~ST_TabJc()
{
    clear();
}
bool ST_TabJc::has_type() const
{
    return m_has_type;
}

void ST_TabJc::set_type(const ST_TabJc::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_TabJc::Type& ST_TabJc::get_type() const
{
    return m_type;
}

std::string ST_TabJc::toString() const
{
    return ST_TabJc::TypeStrList[m_type];
}

void ST_TabJc::clear()
{
    m_has_type = false;
}

void ST_TabJc::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_TabJc& ST_TabJc::default_instance()
{
    if (!ST_TabJc::default_instance_)
    {
        ST_TabJc::default_instance_ = new ST_TabJc();
    }
    return *ST_TabJc::default_instance_;
}

const std::string ST_TabJc::TypeStrList[] =
{
    "clear",
    "start",
    "center",
    "end",
    "decimal",
    "bar",
    "num",
    "left",
    "right"
};
ST_TabJc* ST_TabJc::default_instance_ = NULL;

// ST_TabTlc
ST_TabTlc::ST_TabTlc()
    :m_has_type(false)
{
}
ST_TabTlc::ST_TabTlc(const ST_TabTlc::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_TabTlc::~ST_TabTlc()
{
    clear();
}
bool ST_TabTlc::has_type() const
{
    return m_has_type;
}

void ST_TabTlc::set_type(const ST_TabTlc::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_TabTlc::Type& ST_TabTlc::get_type() const
{
    return m_type;
}

std::string ST_TabTlc::toString() const
{
    return ST_TabTlc::TypeStrList[m_type];
}

void ST_TabTlc::clear()
{
    m_has_type = false;
}

void ST_TabTlc::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_TabTlc& ST_TabTlc::default_instance()
{
    if (!ST_TabTlc::default_instance_)
    {
        ST_TabTlc::default_instance_ = new ST_TabTlc();
    }
    return *ST_TabTlc::default_instance_;
}

const std::string ST_TabTlc::TypeStrList[] =
{
    "none",
    "dot",
    "hyphen",
    "underscore",
    "heavy",
    "middleDot"
};
ST_TabTlc* ST_TabTlc::default_instance_ = NULL;

// ST_LineSpacingRule
ST_LineSpacingRule::ST_LineSpacingRule()
    :m_has_type(false)
{
}
ST_LineSpacingRule::ST_LineSpacingRule(const ST_LineSpacingRule::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_LineSpacingRule::~ST_LineSpacingRule()
{
    clear();
}
bool ST_LineSpacingRule::has_type() const
{
    return m_has_type;
}

void ST_LineSpacingRule::set_type(const ST_LineSpacingRule::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_LineSpacingRule::Type& ST_LineSpacingRule::get_type() const
{
    return m_type;
}

std::string ST_LineSpacingRule::toString() const
{
    return ST_LineSpacingRule::TypeStrList[m_type];
}

void ST_LineSpacingRule::clear()
{
    m_has_type = false;
}

void ST_LineSpacingRule::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_LineSpacingRule& ST_LineSpacingRule::default_instance()
{
    if (!ST_LineSpacingRule::default_instance_)
    {
        ST_LineSpacingRule::default_instance_ = new ST_LineSpacingRule();
    }
    return *ST_LineSpacingRule::default_instance_;
}

const std::string ST_LineSpacingRule::TypeStrList[] =
{
    "auto",
    "exact",
    "atLeast"
};
ST_LineSpacingRule* ST_LineSpacingRule::default_instance_ = NULL;

// ST_Jc
ST_Jc::ST_Jc()
    :m_has_type(false)
{
}
ST_Jc::ST_Jc(const ST_Jc::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_Jc::~ST_Jc()
{
    clear();
}
bool ST_Jc::has_type() const
{
    return m_has_type;
}

void ST_Jc::set_type(const ST_Jc::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_Jc::Type& ST_Jc::get_type() const
{
    return m_type;
}

std::string ST_Jc::toString() const
{
    return ST_Jc::TypeStrList[m_type];
}

void ST_Jc::clear()
{
    m_has_type = false;
}

void ST_Jc::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_Jc& ST_Jc::default_instance()
{
    if (!ST_Jc::default_instance_)
    {
        ST_Jc::default_instance_ = new ST_Jc();
    }
    return *ST_Jc::default_instance_;
}

const std::string ST_Jc::TypeStrList[] =
{
    "start",
    "center",
    "end",
    "both",
    "mediumKashida",
    "distribute",
    "numTab",
    "highKashida",
    "lowKashida",
    "thaiDistribute",
    "left",
    "right"
};
ST_Jc* ST_Jc::default_instance_ = NULL;

// ST_JcTable
ST_JcTable::ST_JcTable()
    :m_has_type(false)
{
}
ST_JcTable::ST_JcTable(const ST_JcTable::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_JcTable::~ST_JcTable()
{
    clear();
}
bool ST_JcTable::has_type() const
{
    return m_has_type;
}

void ST_JcTable::set_type(const ST_JcTable::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_JcTable::Type& ST_JcTable::get_type() const
{
    return m_type;
}

std::string ST_JcTable::toString() const
{
    return ST_JcTable::TypeStrList[m_type];
}

void ST_JcTable::clear()
{
    m_has_type = false;
}

void ST_JcTable::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_JcTable& ST_JcTable::default_instance()
{
    if (!ST_JcTable::default_instance_)
    {
        ST_JcTable::default_instance_ = new ST_JcTable();
    }
    return *ST_JcTable::default_instance_;
}

const std::string ST_JcTable::TypeStrList[] =
{
    "center",
    "end",
    "left",
    "right",
    "start"
};
ST_JcTable* ST_JcTable::default_instance_ = NULL;

// ST_View
ST_View::ST_View()
    :m_has_type(false)
{
}
ST_View::ST_View(const ST_View::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_View::~ST_View()
{
    clear();
}
bool ST_View::has_type() const
{
    return m_has_type;
}

void ST_View::set_type(const ST_View::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_View::Type& ST_View::get_type() const
{
    return m_type;
}

std::string ST_View::toString() const
{
    return ST_View::TypeStrList[m_type];
}

void ST_View::clear()
{
    m_has_type = false;
}

void ST_View::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_View& ST_View::default_instance()
{
    if (!ST_View::default_instance_)
    {
        ST_View::default_instance_ = new ST_View();
    }
    return *ST_View::default_instance_;
}

const std::string ST_View::TypeStrList[] =
{
    "none",
    "print",
    "outline",
    "masterPages",
    "normal",
    "web"
};
ST_View* ST_View::default_instance_ = NULL;

// ST_Zoom
ST_Zoom::ST_Zoom()
    :m_has_type(false)
{
}
ST_Zoom::ST_Zoom(const ST_Zoom::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_Zoom::~ST_Zoom()
{
    clear();
}
bool ST_Zoom::has_type() const
{
    return m_has_type;
}

void ST_Zoom::set_type(const ST_Zoom::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_Zoom::Type& ST_Zoom::get_type() const
{
    return m_type;
}

std::string ST_Zoom::toString() const
{
    return ST_Zoom::TypeStrList[m_type];
}

void ST_Zoom::clear()
{
    m_has_type = false;
}

void ST_Zoom::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_Zoom& ST_Zoom::default_instance()
{
    if (!ST_Zoom::default_instance_)
    {
        ST_Zoom::default_instance_ = new ST_Zoom();
    }
    return *ST_Zoom::default_instance_;
}

const std::string ST_Zoom::TypeStrList[] =
{
    "none",
    "fullPage",
    "bestFit",
    "textFit"
};
ST_Zoom* ST_Zoom::default_instance_ = NULL;

// ST_Proof
ST_Proof::ST_Proof()
    :m_has_type(false)
{
}
ST_Proof::ST_Proof(const ST_Proof::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_Proof::~ST_Proof()
{
    clear();
}
bool ST_Proof::has_type() const
{
    return m_has_type;
}

void ST_Proof::set_type(const ST_Proof::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_Proof::Type& ST_Proof::get_type() const
{
    return m_type;
}

std::string ST_Proof::toString() const
{
    return ST_Proof::TypeStrList[m_type];
}

void ST_Proof::clear()
{
    m_has_type = false;
}

void ST_Proof::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_Proof& ST_Proof::default_instance()
{
    if (!ST_Proof::default_instance_)
    {
        ST_Proof::default_instance_ = new ST_Proof();
    }
    return *ST_Proof::default_instance_;
}

const std::string ST_Proof::TypeStrList[] =
{
    "clean",
    "dirty"
};
ST_Proof* ST_Proof::default_instance_ = NULL;

// ST_DocType
ST_DocType::ST_DocType()
    :m_has_string(false),
     m_string("")
{
}
ST_DocType::ST_DocType(const XSD::string_& _string)
    :m_has_string(true)
{

    set_string(_string);
}
ST_DocType::~ST_DocType()
{
    clear();
}
bool ST_DocType::has_string() const
{
    return m_has_string;
}

void ST_DocType::set_string(const XSD::string_& _string)
{
    m_has_string = true;
    m_string = _string;
}

const XSD::string_& ST_DocType::get_string() const
{
    return m_string;
}

void ST_DocType::clear()
{
    m_has_string = false;
    m_string.clear();;
}

void ST_DocType::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_string)
    {
        _outStream << " " << _attrName << "=\"" << m_string << "\"";;
    }
}

const ST_DocType& ST_DocType::default_instance()
{
    if (!ST_DocType::default_instance_)
    {
        ST_DocType::default_instance_ = new ST_DocType();
    }
    return *ST_DocType::default_instance_;
}

std::string ST_DocType::toString() const
{
    std::stringstream strStream;
    strStream << get_string();
    return strStream.str();
}

ST_DocType* ST_DocType::default_instance_ = NULL;

// ST_DocProtect
ST_DocProtect::ST_DocProtect()
    :m_has_type(false)
{
}
ST_DocProtect::ST_DocProtect(const ST_DocProtect::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_DocProtect::~ST_DocProtect()
{
    clear();
}
bool ST_DocProtect::has_type() const
{
    return m_has_type;
}

void ST_DocProtect::set_type(const ST_DocProtect::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_DocProtect::Type& ST_DocProtect::get_type() const
{
    return m_type;
}

std::string ST_DocProtect::toString() const
{
    return ST_DocProtect::TypeStrList[m_type];
}

void ST_DocProtect::clear()
{
    m_has_type = false;
}

void ST_DocProtect::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_DocProtect& ST_DocProtect::default_instance()
{
    if (!ST_DocProtect::default_instance_)
    {
        ST_DocProtect::default_instance_ = new ST_DocProtect();
    }
    return *ST_DocProtect::default_instance_;
}

const std::string ST_DocProtect::TypeStrList[] =
{
    "none",
    "readOnly",
    "comments",
    "trackedChanges",
    "forms"
};
ST_DocProtect* ST_DocProtect::default_instance_ = NULL;

// ST_MailMergeDocType
ST_MailMergeDocType::ST_MailMergeDocType()
    :m_has_type(false)
{
}
ST_MailMergeDocType::ST_MailMergeDocType(const ST_MailMergeDocType::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_MailMergeDocType::~ST_MailMergeDocType()
{
    clear();
}
bool ST_MailMergeDocType::has_type() const
{
    return m_has_type;
}

void ST_MailMergeDocType::set_type(const ST_MailMergeDocType::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_MailMergeDocType::Type& ST_MailMergeDocType::get_type() const
{
    return m_type;
}

std::string ST_MailMergeDocType::toString() const
{
    return ST_MailMergeDocType::TypeStrList[m_type];
}

void ST_MailMergeDocType::clear()
{
    m_has_type = false;
}

void ST_MailMergeDocType::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_MailMergeDocType& ST_MailMergeDocType::default_instance()
{
    if (!ST_MailMergeDocType::default_instance_)
    {
        ST_MailMergeDocType::default_instance_ = new ST_MailMergeDocType();
    }
    return *ST_MailMergeDocType::default_instance_;
}

const std::string ST_MailMergeDocType::TypeStrList[] =
{
    "catalog",
    "envelopes",
    "mailingLabels",
    "formLetters",
    "email",
    "fax"
};
ST_MailMergeDocType* ST_MailMergeDocType::default_instance_ = NULL;

// ST_MailMergeDataType
ST_MailMergeDataType::ST_MailMergeDataType()
    :m_has_string(false),
     m_string("")
{
}
ST_MailMergeDataType::ST_MailMergeDataType(const XSD::string_& _string)
    :m_has_string(true)
{

    set_string(_string);
}
ST_MailMergeDataType::~ST_MailMergeDataType()
{
    clear();
}
bool ST_MailMergeDataType::has_string() const
{
    return m_has_string;
}

void ST_MailMergeDataType::set_string(const XSD::string_& _string)
{
    m_has_string = true;
    m_string = _string;
}

const XSD::string_& ST_MailMergeDataType::get_string() const
{
    return m_string;
}

void ST_MailMergeDataType::clear()
{
    m_has_string = false;
    m_string.clear();;
}

void ST_MailMergeDataType::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_string)
    {
        _outStream << " " << _attrName << "=\"" << m_string << "\"";;
    }
}

const ST_MailMergeDataType& ST_MailMergeDataType::default_instance()
{
    if (!ST_MailMergeDataType::default_instance_)
    {
        ST_MailMergeDataType::default_instance_ = new ST_MailMergeDataType();
    }
    return *ST_MailMergeDataType::default_instance_;
}

std::string ST_MailMergeDataType::toString() const
{
    std::stringstream strStream;
    strStream << get_string();
    return strStream.str();
}

ST_MailMergeDataType* ST_MailMergeDataType::default_instance_ = NULL;

// ST_MailMergeDest
ST_MailMergeDest::ST_MailMergeDest()
    :m_has_type(false)
{
}
ST_MailMergeDest::ST_MailMergeDest(const ST_MailMergeDest::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_MailMergeDest::~ST_MailMergeDest()
{
    clear();
}
bool ST_MailMergeDest::has_type() const
{
    return m_has_type;
}

void ST_MailMergeDest::set_type(const ST_MailMergeDest::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_MailMergeDest::Type& ST_MailMergeDest::get_type() const
{
    return m_type;
}

std::string ST_MailMergeDest::toString() const
{
    return ST_MailMergeDest::TypeStrList[m_type];
}

void ST_MailMergeDest::clear()
{
    m_has_type = false;
}

void ST_MailMergeDest::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_MailMergeDest& ST_MailMergeDest::default_instance()
{
    if (!ST_MailMergeDest::default_instance_)
    {
        ST_MailMergeDest::default_instance_ = new ST_MailMergeDest();
    }
    return *ST_MailMergeDest::default_instance_;
}

const std::string ST_MailMergeDest::TypeStrList[] =
{
    "newDocument",
    "printer",
    "email",
    "fax"
};
ST_MailMergeDest* ST_MailMergeDest::default_instance_ = NULL;

// ST_MailMergeOdsoFMDFieldType
ST_MailMergeOdsoFMDFieldType::ST_MailMergeOdsoFMDFieldType()
    :m_has_type(false)
{
}
ST_MailMergeOdsoFMDFieldType::ST_MailMergeOdsoFMDFieldType(const ST_MailMergeOdsoFMDFieldType::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_MailMergeOdsoFMDFieldType::~ST_MailMergeOdsoFMDFieldType()
{
    clear();
}
bool ST_MailMergeOdsoFMDFieldType::has_type() const
{
    return m_has_type;
}

void ST_MailMergeOdsoFMDFieldType::set_type(const ST_MailMergeOdsoFMDFieldType::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_MailMergeOdsoFMDFieldType::Type& ST_MailMergeOdsoFMDFieldType::get_type() const
{
    return m_type;
}

std::string ST_MailMergeOdsoFMDFieldType::toString() const
{
    return ST_MailMergeOdsoFMDFieldType::TypeStrList[m_type];
}

void ST_MailMergeOdsoFMDFieldType::clear()
{
    m_has_type = false;
}

void ST_MailMergeOdsoFMDFieldType::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_MailMergeOdsoFMDFieldType& ST_MailMergeOdsoFMDFieldType::default_instance()
{
    if (!ST_MailMergeOdsoFMDFieldType::default_instance_)
    {
        ST_MailMergeOdsoFMDFieldType::default_instance_ = new ST_MailMergeOdsoFMDFieldType();
    }
    return *ST_MailMergeOdsoFMDFieldType::default_instance_;
}

const std::string ST_MailMergeOdsoFMDFieldType::TypeStrList[] =
{
    "null",
    "dbColumn"
};
ST_MailMergeOdsoFMDFieldType* ST_MailMergeOdsoFMDFieldType::default_instance_ = NULL;

// ST_TextDirection
ST_TextDirection::ST_TextDirection()
    :m_has_type(false)
{
}
ST_TextDirection::ST_TextDirection(const ST_TextDirection::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_TextDirection::~ST_TextDirection()
{
    clear();
}
bool ST_TextDirection::has_type() const
{
    return m_has_type;
}

void ST_TextDirection::set_type(const ST_TextDirection::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_TextDirection::Type& ST_TextDirection::get_type() const
{
    return m_type;
}

std::string ST_TextDirection::toString() const
{
    return ST_TextDirection::TypeStrList[m_type];
}

void ST_TextDirection::clear()
{
    m_has_type = false;
}

void ST_TextDirection::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_TextDirection& ST_TextDirection::default_instance()
{
    if (!ST_TextDirection::default_instance_)
    {
        ST_TextDirection::default_instance_ = new ST_TextDirection();
    }
    return *ST_TextDirection::default_instance_;
}

const std::string ST_TextDirection::TypeStrList[] =
{
    "tb",
    "rl",
    "lr",
    "tbV",
    "rlV",
    "lrV",
    "btLr",
    "lrTb",
    "lrTbV",
    "tbLrV",
    "tbRl",
    "tbRlV"
};
ST_TextDirection* ST_TextDirection::default_instance_ = NULL;

// ST_TextAlignment
ST_TextAlignment::ST_TextAlignment()
    :m_has_type(false)
{
}
ST_TextAlignment::ST_TextAlignment(const ST_TextAlignment::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_TextAlignment::~ST_TextAlignment()
{
    clear();
}
bool ST_TextAlignment::has_type() const
{
    return m_has_type;
}

void ST_TextAlignment::set_type(const ST_TextAlignment::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_TextAlignment::Type& ST_TextAlignment::get_type() const
{
    return m_type;
}

std::string ST_TextAlignment::toString() const
{
    return ST_TextAlignment::TypeStrList[m_type];
}

void ST_TextAlignment::clear()
{
    m_has_type = false;
}

void ST_TextAlignment::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_TextAlignment& ST_TextAlignment::default_instance()
{
    if (!ST_TextAlignment::default_instance_)
    {
        ST_TextAlignment::default_instance_ = new ST_TextAlignment();
    }
    return *ST_TextAlignment::default_instance_;
}

const std::string ST_TextAlignment::TypeStrList[] =
{
    "top",
    "center",
    "baseline",
    "bottom",
    "auto"
};
ST_TextAlignment* ST_TextAlignment::default_instance_ = NULL;

// ST_DisplacedByCustomXml
ST_DisplacedByCustomXml::ST_DisplacedByCustomXml()
    :m_has_type(false)
{
}
ST_DisplacedByCustomXml::ST_DisplacedByCustomXml(const ST_DisplacedByCustomXml::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_DisplacedByCustomXml::~ST_DisplacedByCustomXml()
{
    clear();
}
bool ST_DisplacedByCustomXml::has_type() const
{
    return m_has_type;
}

void ST_DisplacedByCustomXml::set_type(const ST_DisplacedByCustomXml::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_DisplacedByCustomXml::Type& ST_DisplacedByCustomXml::get_type() const
{
    return m_type;
}

std::string ST_DisplacedByCustomXml::toString() const
{
    return ST_DisplacedByCustomXml::TypeStrList[m_type];
}

void ST_DisplacedByCustomXml::clear()
{
    m_has_type = false;
}

void ST_DisplacedByCustomXml::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_DisplacedByCustomXml& ST_DisplacedByCustomXml::default_instance()
{
    if (!ST_DisplacedByCustomXml::default_instance_)
    {
        ST_DisplacedByCustomXml::default_instance_ = new ST_DisplacedByCustomXml();
    }
    return *ST_DisplacedByCustomXml::default_instance_;
}

const std::string ST_DisplacedByCustomXml::TypeStrList[] =
{
    "next",
    "prev"
};
ST_DisplacedByCustomXml* ST_DisplacedByCustomXml::default_instance_ = NULL;

// ST_AnnotationVMerge
ST_AnnotationVMerge::ST_AnnotationVMerge()
    :m_has_type(false)
{
}
ST_AnnotationVMerge::ST_AnnotationVMerge(const ST_AnnotationVMerge::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_AnnotationVMerge::~ST_AnnotationVMerge()
{
    clear();
}
bool ST_AnnotationVMerge::has_type() const
{
    return m_has_type;
}

void ST_AnnotationVMerge::set_type(const ST_AnnotationVMerge::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_AnnotationVMerge::Type& ST_AnnotationVMerge::get_type() const
{
    return m_type;
}

std::string ST_AnnotationVMerge::toString() const
{
    return ST_AnnotationVMerge::TypeStrList[m_type];
}

void ST_AnnotationVMerge::clear()
{
    m_has_type = false;
}

void ST_AnnotationVMerge::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_AnnotationVMerge& ST_AnnotationVMerge::default_instance()
{
    if (!ST_AnnotationVMerge::default_instance_)
    {
        ST_AnnotationVMerge::default_instance_ = new ST_AnnotationVMerge();
    }
    return *ST_AnnotationVMerge::default_instance_;
}

const std::string ST_AnnotationVMerge::TypeStrList[] =
{
    "cont",
    "rest"
};
ST_AnnotationVMerge* ST_AnnotationVMerge::default_instance_ = NULL;

// ST_TextboxTightWrap
ST_TextboxTightWrap::ST_TextboxTightWrap()
    :m_has_type(false)
{
}
ST_TextboxTightWrap::ST_TextboxTightWrap(const ST_TextboxTightWrap::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_TextboxTightWrap::~ST_TextboxTightWrap()
{
    clear();
}
bool ST_TextboxTightWrap::has_type() const
{
    return m_has_type;
}

void ST_TextboxTightWrap::set_type(const ST_TextboxTightWrap::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_TextboxTightWrap::Type& ST_TextboxTightWrap::get_type() const
{
    return m_type;
}

std::string ST_TextboxTightWrap::toString() const
{
    return ST_TextboxTightWrap::TypeStrList[m_type];
}

void ST_TextboxTightWrap::clear()
{
    m_has_type = false;
}

void ST_TextboxTightWrap::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_TextboxTightWrap& ST_TextboxTightWrap::default_instance()
{
    if (!ST_TextboxTightWrap::default_instance_)
    {
        ST_TextboxTightWrap::default_instance_ = new ST_TextboxTightWrap();
    }
    return *ST_TextboxTightWrap::default_instance_;
}

const std::string ST_TextboxTightWrap::TypeStrList[] =
{
    "none",
    "allLines",
    "firstAndLastLine",
    "firstLineOnly",
    "lastLineOnly"
};
ST_TextboxTightWrap* ST_TextboxTightWrap::default_instance_ = NULL;

// ST_ObjectDrawAspect
ST_ObjectDrawAspect::ST_ObjectDrawAspect()
    :m_has_type(false)
{
}
ST_ObjectDrawAspect::ST_ObjectDrawAspect(const ST_ObjectDrawAspect::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_ObjectDrawAspect::~ST_ObjectDrawAspect()
{
    clear();
}
bool ST_ObjectDrawAspect::has_type() const
{
    return m_has_type;
}

void ST_ObjectDrawAspect::set_type(const ST_ObjectDrawAspect::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_ObjectDrawAspect::Type& ST_ObjectDrawAspect::get_type() const
{
    return m_type;
}

std::string ST_ObjectDrawAspect::toString() const
{
    return ST_ObjectDrawAspect::TypeStrList[m_type];
}

void ST_ObjectDrawAspect::clear()
{
    m_has_type = false;
}

void ST_ObjectDrawAspect::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_ObjectDrawAspect& ST_ObjectDrawAspect::default_instance()
{
    if (!ST_ObjectDrawAspect::default_instance_)
    {
        ST_ObjectDrawAspect::default_instance_ = new ST_ObjectDrawAspect();
    }
    return *ST_ObjectDrawAspect::default_instance_;
}

const std::string ST_ObjectDrawAspect::TypeStrList[] =
{
    "content",
    "icon"
};
ST_ObjectDrawAspect* ST_ObjectDrawAspect::default_instance_ = NULL;

// ST_ObjectUpdateMode
ST_ObjectUpdateMode::ST_ObjectUpdateMode()
    :m_has_type(false)
{
}
ST_ObjectUpdateMode::ST_ObjectUpdateMode(const ST_ObjectUpdateMode::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_ObjectUpdateMode::~ST_ObjectUpdateMode()
{
    clear();
}
bool ST_ObjectUpdateMode::has_type() const
{
    return m_has_type;
}

void ST_ObjectUpdateMode::set_type(const ST_ObjectUpdateMode::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_ObjectUpdateMode::Type& ST_ObjectUpdateMode::get_type() const
{
    return m_type;
}

std::string ST_ObjectUpdateMode::toString() const
{
    return ST_ObjectUpdateMode::TypeStrList[m_type];
}

void ST_ObjectUpdateMode::clear()
{
    m_has_type = false;
}

void ST_ObjectUpdateMode::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_ObjectUpdateMode& ST_ObjectUpdateMode::default_instance()
{
    if (!ST_ObjectUpdateMode::default_instance_)
    {
        ST_ObjectUpdateMode::default_instance_ = new ST_ObjectUpdateMode();
    }
    return *ST_ObjectUpdateMode::default_instance_;
}

const std::string ST_ObjectUpdateMode::TypeStrList[] =
{
    "always",
    "onCall"
};
ST_ObjectUpdateMode* ST_ObjectUpdateMode::default_instance_ = NULL;

// ST_FldCharType
ST_FldCharType::ST_FldCharType()
    :m_has_type(false)
{
}
ST_FldCharType::ST_FldCharType(const ST_FldCharType::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_FldCharType::~ST_FldCharType()
{
    clear();
}
bool ST_FldCharType::has_type() const
{
    return m_has_type;
}

void ST_FldCharType::set_type(const ST_FldCharType::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_FldCharType::Type& ST_FldCharType::get_type() const
{
    return m_type;
}

std::string ST_FldCharType::toString() const
{
    return ST_FldCharType::TypeStrList[m_type];
}

void ST_FldCharType::clear()
{
    m_has_type = false;
}

void ST_FldCharType::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_FldCharType& ST_FldCharType::default_instance()
{
    if (!ST_FldCharType::default_instance_)
    {
        ST_FldCharType::default_instance_ = new ST_FldCharType();
    }
    return *ST_FldCharType::default_instance_;
}

const std::string ST_FldCharType::TypeStrList[] =
{
    "begin",
    "separate",
    "end"
};
ST_FldCharType* ST_FldCharType::default_instance_ = NULL;

// ST_InfoTextType
ST_InfoTextType::ST_InfoTextType()
    :m_has_type(false)
{
}
ST_InfoTextType::ST_InfoTextType(const ST_InfoTextType::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_InfoTextType::~ST_InfoTextType()
{
    clear();
}
bool ST_InfoTextType::has_type() const
{
    return m_has_type;
}

void ST_InfoTextType::set_type(const ST_InfoTextType::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_InfoTextType::Type& ST_InfoTextType::get_type() const
{
    return m_type;
}

std::string ST_InfoTextType::toString() const
{
    return ST_InfoTextType::TypeStrList[m_type];
}

void ST_InfoTextType::clear()
{
    m_has_type = false;
}

void ST_InfoTextType::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_InfoTextType& ST_InfoTextType::default_instance()
{
    if (!ST_InfoTextType::default_instance_)
    {
        ST_InfoTextType::default_instance_ = new ST_InfoTextType();
    }
    return *ST_InfoTextType::default_instance_;
}

const std::string ST_InfoTextType::TypeStrList[] =
{
    "text",
    "autoText"
};
ST_InfoTextType* ST_InfoTextType::default_instance_ = NULL;

// ST_FFHelpTextVal
ST_FFHelpTextVal::ST_FFHelpTextVal()
    :m_has_string(false),
     m_string("")
{
}
ST_FFHelpTextVal::ST_FFHelpTextVal(const XSD::string_& _string)
    :m_has_string(true)
{

    set_string(_string);
}
ST_FFHelpTextVal::~ST_FFHelpTextVal()
{
    clear();
}
bool ST_FFHelpTextVal::has_string() const
{
    return m_has_string;
}

void ST_FFHelpTextVal::set_string(const XSD::string_& _string)
{   assert(_string.size() <= 256);

    m_has_string = true;
    m_string = _string;
}

const XSD::string_& ST_FFHelpTextVal::get_string() const
{
    return m_string;
}

void ST_FFHelpTextVal::clear()
{
    m_has_string = false;
    m_string.clear();;
}

void ST_FFHelpTextVal::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_string)
    {
        _outStream << " " << _attrName << "=\"" << m_string << "\"";;
    }
}

const ST_FFHelpTextVal& ST_FFHelpTextVal::default_instance()
{
    if (!ST_FFHelpTextVal::default_instance_)
    {
        ST_FFHelpTextVal::default_instance_ = new ST_FFHelpTextVal();
    }
    return *ST_FFHelpTextVal::default_instance_;
}

std::string ST_FFHelpTextVal::toString() const
{
    std::stringstream strStream;
    strStream << get_string();
    return strStream.str();
}

ST_FFHelpTextVal* ST_FFHelpTextVal::default_instance_ = NULL;

// ST_FFStatusTextVal
ST_FFStatusTextVal::ST_FFStatusTextVal()
    :m_has_string(false),
     m_string("")
{
}
ST_FFStatusTextVal::ST_FFStatusTextVal(const XSD::string_& _string)
    :m_has_string(true)
{

    set_string(_string);
}
ST_FFStatusTextVal::~ST_FFStatusTextVal()
{
    clear();
}
bool ST_FFStatusTextVal::has_string() const
{
    return m_has_string;
}

void ST_FFStatusTextVal::set_string(const XSD::string_& _string)
{   assert(_string.size() <= 140);

    m_has_string = true;
    m_string = _string;
}

const XSD::string_& ST_FFStatusTextVal::get_string() const
{
    return m_string;
}

void ST_FFStatusTextVal::clear()
{
    m_has_string = false;
    m_string.clear();;
}

void ST_FFStatusTextVal::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_string)
    {
        _outStream << " " << _attrName << "=\"" << m_string << "\"";;
    }
}

const ST_FFStatusTextVal& ST_FFStatusTextVal::default_instance()
{
    if (!ST_FFStatusTextVal::default_instance_)
    {
        ST_FFStatusTextVal::default_instance_ = new ST_FFStatusTextVal();
    }
    return *ST_FFStatusTextVal::default_instance_;
}

std::string ST_FFStatusTextVal::toString() const
{
    std::stringstream strStream;
    strStream << get_string();
    return strStream.str();
}

ST_FFStatusTextVal* ST_FFStatusTextVal::default_instance_ = NULL;

// ST_FFName
ST_FFName::ST_FFName()
    :m_has_string(false),
     m_string("")
{
}
ST_FFName::ST_FFName(const XSD::string_& _string)
    :m_has_string(true)
{

    set_string(_string);
}
ST_FFName::~ST_FFName()
{
    clear();
}
bool ST_FFName::has_string() const
{
    return m_has_string;
}

void ST_FFName::set_string(const XSD::string_& _string)
{   assert(_string.size() <= 65);

    m_has_string = true;
    m_string = _string;
}

const XSD::string_& ST_FFName::get_string() const
{
    return m_string;
}

void ST_FFName::clear()
{
    m_has_string = false;
    m_string.clear();;
}

void ST_FFName::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_string)
    {
        _outStream << " " << _attrName << "=\"" << m_string << "\"";;
    }
}

const ST_FFName& ST_FFName::default_instance()
{
    if (!ST_FFName::default_instance_)
    {
        ST_FFName::default_instance_ = new ST_FFName();
    }
    return *ST_FFName::default_instance_;
}

std::string ST_FFName::toString() const
{
    std::stringstream strStream;
    strStream << get_string();
    return strStream.str();
}

ST_FFName* ST_FFName::default_instance_ = NULL;

// ST_FFTextType
ST_FFTextType::ST_FFTextType()
    :m_has_type(false)
{
}
ST_FFTextType::ST_FFTextType(const ST_FFTextType::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_FFTextType::~ST_FFTextType()
{
    clear();
}
bool ST_FFTextType::has_type() const
{
    return m_has_type;
}

void ST_FFTextType::set_type(const ST_FFTextType::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_FFTextType::Type& ST_FFTextType::get_type() const
{
    return m_type;
}

std::string ST_FFTextType::toString() const
{
    return ST_FFTextType::TypeStrList[m_type];
}

void ST_FFTextType::clear()
{
    m_has_type = false;
}

void ST_FFTextType::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_FFTextType& ST_FFTextType::default_instance()
{
    if (!ST_FFTextType::default_instance_)
    {
        ST_FFTextType::default_instance_ = new ST_FFTextType();
    }
    return *ST_FFTextType::default_instance_;
}

const std::string ST_FFTextType::TypeStrList[] =
{
    "regular",
    "number",
    "date",
    "currentTime",
    "currentDate",
    "calculated"
};
ST_FFTextType* ST_FFTextType::default_instance_ = NULL;

// ST_SectionMark
ST_SectionMark::ST_SectionMark()
    :m_has_type(false)
{
}
ST_SectionMark::ST_SectionMark(const ST_SectionMark::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_SectionMark::~ST_SectionMark()
{
    clear();
}
bool ST_SectionMark::has_type() const
{
    return m_has_type;
}

void ST_SectionMark::set_type(const ST_SectionMark::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_SectionMark::Type& ST_SectionMark::get_type() const
{
    return m_type;
}

std::string ST_SectionMark::toString() const
{
    return ST_SectionMark::TypeStrList[m_type];
}

void ST_SectionMark::clear()
{
    m_has_type = false;
}

void ST_SectionMark::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_SectionMark& ST_SectionMark::default_instance()
{
    if (!ST_SectionMark::default_instance_)
    {
        ST_SectionMark::default_instance_ = new ST_SectionMark();
    }
    return *ST_SectionMark::default_instance_;
}

const std::string ST_SectionMark::TypeStrList[] =
{
    "nextPage",
    "nextColumn",
    "continuous",
    "evenPage",
    "oddPage"
};
ST_SectionMark* ST_SectionMark::default_instance_ = NULL;

// ST_NumberFormat
ST_NumberFormat::ST_NumberFormat()
    :m_has_type(false)
{
}
ST_NumberFormat::ST_NumberFormat(const ST_NumberFormat::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_NumberFormat::~ST_NumberFormat()
{
    clear();
}
bool ST_NumberFormat::has_type() const
{
    return m_has_type;
}

void ST_NumberFormat::set_type(const ST_NumberFormat::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_NumberFormat::Type& ST_NumberFormat::get_type() const
{
    return m_type;
}

std::string ST_NumberFormat::toString() const
{
    return ST_NumberFormat::TypeStrList[m_type];
}

void ST_NumberFormat::clear()
{
    m_has_type = false;
}

void ST_NumberFormat::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_NumberFormat& ST_NumberFormat::default_instance()
{
    if (!ST_NumberFormat::default_instance_)
    {
        ST_NumberFormat::default_instance_ = new ST_NumberFormat();
    }
    return *ST_NumberFormat::default_instance_;
}

const std::string ST_NumberFormat::TypeStrList[] =
{
    "decimal",
    "upperRoman",
    "lowerRoman",
    "upperLetter",
    "lowerLetter",
    "ordinal",
    "cardinalText",
    "ordinalText",
    "hex",
    "chicago",
    "ideographDigital",
    "japaneseCounting",
    "aiueo",
    "iroha",
    "decimalFullWidth",
    "decimalHalfWidth",
    "japaneseLegal",
    "japaneseDigitalTenThousand",
    "decimalEnclosedCircle",
    "decimalFullWidth2",
    "aiueoFullWidth",
    "irohaFullWidth",
    "decimalZero",
    "bullet",
    "ganada",
    "chosung",
    "decimalEnclosedFullstop",
    "decimalEnclosedParen",
    "decimalEnclosedCircleChinese",
    "ideographEnclosedCircle",
    "ideographTraditional",
    "ideographZodiac",
    "ideographZodiacTraditional",
    "taiwaneseCounting",
    "ideographLegalTraditional",
    "taiwaneseCountingThousand",
    "taiwaneseDigital",
    "chineseCounting",
    "chineseLegalSimplified",
    "chineseCountingThousand",
    "koreanDigital",
    "koreanCounting",
    "koreanLegal",
    "koreanDigital2",
    "vietnameseCounting",
    "russianLower",
    "russianUpper",
    "none",
    "numberInDash",
    "hebrew1",
    "hebrew2",
    "arabicAlpha",
    "arabicAbjad",
    "hindiVowels",
    "hindiConsonants",
    "hindiNumbers",
    "hindiCounting",
    "thaiLetters",
    "thaiNumbers",
    "thaiCounting",
    "bahtText",
    "dollarText",
    "custom"
};
ST_NumberFormat* ST_NumberFormat::default_instance_ = NULL;

// ST_PageOrientation
ST_PageOrientation::ST_PageOrientation()
    :m_has_type(false)
{
}
ST_PageOrientation::ST_PageOrientation(const ST_PageOrientation::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_PageOrientation::~ST_PageOrientation()
{
    clear();
}
bool ST_PageOrientation::has_type() const
{
    return m_has_type;
}

void ST_PageOrientation::set_type(const ST_PageOrientation::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_PageOrientation::Type& ST_PageOrientation::get_type() const
{
    return m_type;
}

std::string ST_PageOrientation::toString() const
{
    return ST_PageOrientation::TypeStrList[m_type];
}

void ST_PageOrientation::clear()
{
    m_has_type = false;
}

void ST_PageOrientation::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_PageOrientation& ST_PageOrientation::default_instance()
{
    if (!ST_PageOrientation::default_instance_)
    {
        ST_PageOrientation::default_instance_ = new ST_PageOrientation();
    }
    return *ST_PageOrientation::default_instance_;
}

const std::string ST_PageOrientation::TypeStrList[] =
{
    "portrait",
    "landscape"
};
ST_PageOrientation* ST_PageOrientation::default_instance_ = NULL;

// ST_PageBorderZOrder
ST_PageBorderZOrder::ST_PageBorderZOrder()
    :m_has_type(false)
{
}
ST_PageBorderZOrder::ST_PageBorderZOrder(const ST_PageBorderZOrder::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_PageBorderZOrder::~ST_PageBorderZOrder()
{
    clear();
}
bool ST_PageBorderZOrder::has_type() const
{
    return m_has_type;
}

void ST_PageBorderZOrder::set_type(const ST_PageBorderZOrder::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_PageBorderZOrder::Type& ST_PageBorderZOrder::get_type() const
{
    return m_type;
}

std::string ST_PageBorderZOrder::toString() const
{
    return ST_PageBorderZOrder::TypeStrList[m_type];
}

void ST_PageBorderZOrder::clear()
{
    m_has_type = false;
}

void ST_PageBorderZOrder::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_PageBorderZOrder& ST_PageBorderZOrder::default_instance()
{
    if (!ST_PageBorderZOrder::default_instance_)
    {
        ST_PageBorderZOrder::default_instance_ = new ST_PageBorderZOrder();
    }
    return *ST_PageBorderZOrder::default_instance_;
}

const std::string ST_PageBorderZOrder::TypeStrList[] =
{
    "front",
    "back"
};
ST_PageBorderZOrder* ST_PageBorderZOrder::default_instance_ = NULL;

// ST_PageBorderDisplay
ST_PageBorderDisplay::ST_PageBorderDisplay()
    :m_has_type(false)
{
}
ST_PageBorderDisplay::ST_PageBorderDisplay(const ST_PageBorderDisplay::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_PageBorderDisplay::~ST_PageBorderDisplay()
{
    clear();
}
bool ST_PageBorderDisplay::has_type() const
{
    return m_has_type;
}

void ST_PageBorderDisplay::set_type(const ST_PageBorderDisplay::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_PageBorderDisplay::Type& ST_PageBorderDisplay::get_type() const
{
    return m_type;
}

std::string ST_PageBorderDisplay::toString() const
{
    return ST_PageBorderDisplay::TypeStrList[m_type];
}

void ST_PageBorderDisplay::clear()
{
    m_has_type = false;
}

void ST_PageBorderDisplay::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_PageBorderDisplay& ST_PageBorderDisplay::default_instance()
{
    if (!ST_PageBorderDisplay::default_instance_)
    {
        ST_PageBorderDisplay::default_instance_ = new ST_PageBorderDisplay();
    }
    return *ST_PageBorderDisplay::default_instance_;
}

const std::string ST_PageBorderDisplay::TypeStrList[] =
{
    "allPages",
    "firstPage",
    "notFirstPage"
};
ST_PageBorderDisplay* ST_PageBorderDisplay::default_instance_ = NULL;

// ST_PageBorderOffset
ST_PageBorderOffset::ST_PageBorderOffset()
    :m_has_type(false)
{
}
ST_PageBorderOffset::ST_PageBorderOffset(const ST_PageBorderOffset::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_PageBorderOffset::~ST_PageBorderOffset()
{
    clear();
}
bool ST_PageBorderOffset::has_type() const
{
    return m_has_type;
}

void ST_PageBorderOffset::set_type(const ST_PageBorderOffset::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_PageBorderOffset::Type& ST_PageBorderOffset::get_type() const
{
    return m_type;
}

std::string ST_PageBorderOffset::toString() const
{
    return ST_PageBorderOffset::TypeStrList[m_type];
}

void ST_PageBorderOffset::clear()
{
    m_has_type = false;
}

void ST_PageBorderOffset::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_PageBorderOffset& ST_PageBorderOffset::default_instance()
{
    if (!ST_PageBorderOffset::default_instance_)
    {
        ST_PageBorderOffset::default_instance_ = new ST_PageBorderOffset();
    }
    return *ST_PageBorderOffset::default_instance_;
}

const std::string ST_PageBorderOffset::TypeStrList[] =
{
    "page",
    "text"
};
ST_PageBorderOffset* ST_PageBorderOffset::default_instance_ = NULL;

// ST_ChapterSep
ST_ChapterSep::ST_ChapterSep()
    :m_has_type(false)
{
}
ST_ChapterSep::ST_ChapterSep(const ST_ChapterSep::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_ChapterSep::~ST_ChapterSep()
{
    clear();
}
bool ST_ChapterSep::has_type() const
{
    return m_has_type;
}

void ST_ChapterSep::set_type(const ST_ChapterSep::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_ChapterSep::Type& ST_ChapterSep::get_type() const
{
    return m_type;
}

std::string ST_ChapterSep::toString() const
{
    return ST_ChapterSep::TypeStrList[m_type];
}

void ST_ChapterSep::clear()
{
    m_has_type = false;
}

void ST_ChapterSep::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_ChapterSep& ST_ChapterSep::default_instance()
{
    if (!ST_ChapterSep::default_instance_)
    {
        ST_ChapterSep::default_instance_ = new ST_ChapterSep();
    }
    return *ST_ChapterSep::default_instance_;
}

const std::string ST_ChapterSep::TypeStrList[] =
{
    "hyphen",
    "period",
    "colon",
    "emDash",
    "enDash"
};
ST_ChapterSep* ST_ChapterSep::default_instance_ = NULL;

// ST_LineNumberRestart
ST_LineNumberRestart::ST_LineNumberRestart()
    :m_has_type(false)
{
}
ST_LineNumberRestart::ST_LineNumberRestart(const ST_LineNumberRestart::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_LineNumberRestart::~ST_LineNumberRestart()
{
    clear();
}
bool ST_LineNumberRestart::has_type() const
{
    return m_has_type;
}

void ST_LineNumberRestart::set_type(const ST_LineNumberRestart::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_LineNumberRestart::Type& ST_LineNumberRestart::get_type() const
{
    return m_type;
}

std::string ST_LineNumberRestart::toString() const
{
    return ST_LineNumberRestart::TypeStrList[m_type];
}

void ST_LineNumberRestart::clear()
{
    m_has_type = false;
}

void ST_LineNumberRestart::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_LineNumberRestart& ST_LineNumberRestart::default_instance()
{
    if (!ST_LineNumberRestart::default_instance_)
    {
        ST_LineNumberRestart::default_instance_ = new ST_LineNumberRestart();
    }
    return *ST_LineNumberRestart::default_instance_;
}

const std::string ST_LineNumberRestart::TypeStrList[] =
{
    "newPage",
    "newSection",
    "continuous"
};
ST_LineNumberRestart* ST_LineNumberRestart::default_instance_ = NULL;

// ST_VerticalJc
ST_VerticalJc::ST_VerticalJc()
    :m_has_type(false)
{
}
ST_VerticalJc::ST_VerticalJc(const ST_VerticalJc::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_VerticalJc::~ST_VerticalJc()
{
    clear();
}
bool ST_VerticalJc::has_type() const
{
    return m_has_type;
}

void ST_VerticalJc::set_type(const ST_VerticalJc::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_VerticalJc::Type& ST_VerticalJc::get_type() const
{
    return m_type;
}

std::string ST_VerticalJc::toString() const
{
    return ST_VerticalJc::TypeStrList[m_type];
}

void ST_VerticalJc::clear()
{
    m_has_type = false;
}

void ST_VerticalJc::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_VerticalJc& ST_VerticalJc::default_instance()
{
    if (!ST_VerticalJc::default_instance_)
    {
        ST_VerticalJc::default_instance_ = new ST_VerticalJc();
    }
    return *ST_VerticalJc::default_instance_;
}

const std::string ST_VerticalJc::TypeStrList[] =
{
    "top",
    "center",
    "both",
    "bottom"
};
ST_VerticalJc* ST_VerticalJc::default_instance_ = NULL;

// ST_DocGrid
ST_DocGrid::ST_DocGrid()
    :m_has_type(false)
{
}
ST_DocGrid::ST_DocGrid(const ST_DocGrid::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_DocGrid::~ST_DocGrid()
{
    clear();
}
bool ST_DocGrid::has_type() const
{
    return m_has_type;
}

void ST_DocGrid::set_type(const ST_DocGrid::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_DocGrid::Type& ST_DocGrid::get_type() const
{
    return m_type;
}

std::string ST_DocGrid::toString() const
{
    return ST_DocGrid::TypeStrList[m_type];
}

void ST_DocGrid::clear()
{
    m_has_type = false;
}

void ST_DocGrid::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_DocGrid& ST_DocGrid::default_instance()
{
    if (!ST_DocGrid::default_instance_)
    {
        ST_DocGrid::default_instance_ = new ST_DocGrid();
    }
    return *ST_DocGrid::default_instance_;
}

const std::string ST_DocGrid::TypeStrList[] =
{
    "default",
    "lines",
    "linesAndChars",
    "snapToChars"
};
ST_DocGrid* ST_DocGrid::default_instance_ = NULL;

// ST_HdrFtr
ST_HdrFtr::ST_HdrFtr()
    :m_has_type(false)
{
}
ST_HdrFtr::ST_HdrFtr(const ST_HdrFtr::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_HdrFtr::~ST_HdrFtr()
{
    clear();
}
bool ST_HdrFtr::has_type() const
{
    return m_has_type;
}

void ST_HdrFtr::set_type(const ST_HdrFtr::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_HdrFtr::Type& ST_HdrFtr::get_type() const
{
    return m_type;
}

std::string ST_HdrFtr::toString() const
{
    return ST_HdrFtr::TypeStrList[m_type];
}

void ST_HdrFtr::clear()
{
    m_has_type = false;
}

void ST_HdrFtr::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_HdrFtr& ST_HdrFtr::default_instance()
{
    if (!ST_HdrFtr::default_instance_)
    {
        ST_HdrFtr::default_instance_ = new ST_HdrFtr();
    }
    return *ST_HdrFtr::default_instance_;
}

const std::string ST_HdrFtr::TypeStrList[] =
{
    "even",
    "default",
    "first"
};
ST_HdrFtr* ST_HdrFtr::default_instance_ = NULL;

// ST_FtnEdn
ST_FtnEdn::ST_FtnEdn()
    :m_has_type(false)
{
}
ST_FtnEdn::ST_FtnEdn(const ST_FtnEdn::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_FtnEdn::~ST_FtnEdn()
{
    clear();
}
bool ST_FtnEdn::has_type() const
{
    return m_has_type;
}

void ST_FtnEdn::set_type(const ST_FtnEdn::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_FtnEdn::Type& ST_FtnEdn::get_type() const
{
    return m_type;
}

std::string ST_FtnEdn::toString() const
{
    return ST_FtnEdn::TypeStrList[m_type];
}

void ST_FtnEdn::clear()
{
    m_has_type = false;
}

void ST_FtnEdn::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_FtnEdn& ST_FtnEdn::default_instance()
{
    if (!ST_FtnEdn::default_instance_)
    {
        ST_FtnEdn::default_instance_ = new ST_FtnEdn();
    }
    return *ST_FtnEdn::default_instance_;
}

const std::string ST_FtnEdn::TypeStrList[] =
{
    "normal",
    "separator",
    "continuationSeparator",
    "continuationNotice"
};
ST_FtnEdn* ST_FtnEdn::default_instance_ = NULL;

// ST_BrType
ST_BrType::ST_BrType()
    :m_has_type(false)
{
}
ST_BrType::ST_BrType(const ST_BrType::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_BrType::~ST_BrType()
{
    clear();
}
bool ST_BrType::has_type() const
{
    return m_has_type;
}

void ST_BrType::set_type(const ST_BrType::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_BrType::Type& ST_BrType::get_type() const
{
    return m_type;
}

std::string ST_BrType::toString() const
{
    return ST_BrType::TypeStrList[m_type];
}

void ST_BrType::clear()
{
    m_has_type = false;
}

void ST_BrType::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_BrType& ST_BrType::default_instance()
{
    if (!ST_BrType::default_instance_)
    {
        ST_BrType::default_instance_ = new ST_BrType();
    }
    return *ST_BrType::default_instance_;
}

const std::string ST_BrType::TypeStrList[] =
{
    "page",
    "column",
    "textWrapping"
};
ST_BrType* ST_BrType::default_instance_ = NULL;

// ST_BrClear
ST_BrClear::ST_BrClear()
    :m_has_type(false)
{
}
ST_BrClear::ST_BrClear(const ST_BrClear::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_BrClear::~ST_BrClear()
{
    clear();
}
bool ST_BrClear::has_type() const
{
    return m_has_type;
}

void ST_BrClear::set_type(const ST_BrClear::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_BrClear::Type& ST_BrClear::get_type() const
{
    return m_type;
}

std::string ST_BrClear::toString() const
{
    return ST_BrClear::TypeStrList[m_type];
}

void ST_BrClear::clear()
{
    m_has_type = false;
}

void ST_BrClear::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_BrClear& ST_BrClear::default_instance()
{
    if (!ST_BrClear::default_instance_)
    {
        ST_BrClear::default_instance_ = new ST_BrClear();
    }
    return *ST_BrClear::default_instance_;
}

const std::string ST_BrClear::TypeStrList[] =
{
    "none",
    "left",
    "right",
    "all"
};
ST_BrClear* ST_BrClear::default_instance_ = NULL;

// ST_PTabAlignment
ST_PTabAlignment::ST_PTabAlignment()
    :m_has_type(false)
{
}
ST_PTabAlignment::ST_PTabAlignment(const ST_PTabAlignment::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_PTabAlignment::~ST_PTabAlignment()
{
    clear();
}
bool ST_PTabAlignment::has_type() const
{
    return m_has_type;
}

void ST_PTabAlignment::set_type(const ST_PTabAlignment::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_PTabAlignment::Type& ST_PTabAlignment::get_type() const
{
    return m_type;
}

std::string ST_PTabAlignment::toString() const
{
    return ST_PTabAlignment::TypeStrList[m_type];
}

void ST_PTabAlignment::clear()
{
    m_has_type = false;
}

void ST_PTabAlignment::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_PTabAlignment& ST_PTabAlignment::default_instance()
{
    if (!ST_PTabAlignment::default_instance_)
    {
        ST_PTabAlignment::default_instance_ = new ST_PTabAlignment();
    }
    return *ST_PTabAlignment::default_instance_;
}

const std::string ST_PTabAlignment::TypeStrList[] =
{
    "left",
    "center",
    "right"
};
ST_PTabAlignment* ST_PTabAlignment::default_instance_ = NULL;

// ST_PTabRelativeTo
ST_PTabRelativeTo::ST_PTabRelativeTo()
    :m_has_type(false)
{
}
ST_PTabRelativeTo::ST_PTabRelativeTo(const ST_PTabRelativeTo::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_PTabRelativeTo::~ST_PTabRelativeTo()
{
    clear();
}
bool ST_PTabRelativeTo::has_type() const
{
    return m_has_type;
}

void ST_PTabRelativeTo::set_type(const ST_PTabRelativeTo::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_PTabRelativeTo::Type& ST_PTabRelativeTo::get_type() const
{
    return m_type;
}

std::string ST_PTabRelativeTo::toString() const
{
    return ST_PTabRelativeTo::TypeStrList[m_type];
}

void ST_PTabRelativeTo::clear()
{
    m_has_type = false;
}

void ST_PTabRelativeTo::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_PTabRelativeTo& ST_PTabRelativeTo::default_instance()
{
    if (!ST_PTabRelativeTo::default_instance_)
    {
        ST_PTabRelativeTo::default_instance_ = new ST_PTabRelativeTo();
    }
    return *ST_PTabRelativeTo::default_instance_;
}

const std::string ST_PTabRelativeTo::TypeStrList[] =
{
    "margin",
    "indent"
};
ST_PTabRelativeTo* ST_PTabRelativeTo::default_instance_ = NULL;

// ST_PTabLeader
ST_PTabLeader::ST_PTabLeader()
    :m_has_type(false)
{
}
ST_PTabLeader::ST_PTabLeader(const ST_PTabLeader::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_PTabLeader::~ST_PTabLeader()
{
    clear();
}
bool ST_PTabLeader::has_type() const
{
    return m_has_type;
}

void ST_PTabLeader::set_type(const ST_PTabLeader::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_PTabLeader::Type& ST_PTabLeader::get_type() const
{
    return m_type;
}

std::string ST_PTabLeader::toString() const
{
    return ST_PTabLeader::TypeStrList[m_type];
}

void ST_PTabLeader::clear()
{
    m_has_type = false;
}

void ST_PTabLeader::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_PTabLeader& ST_PTabLeader::default_instance()
{
    if (!ST_PTabLeader::default_instance_)
    {
        ST_PTabLeader::default_instance_ = new ST_PTabLeader();
    }
    return *ST_PTabLeader::default_instance_;
}

const std::string ST_PTabLeader::TypeStrList[] =
{
    "none",
    "dot",
    "hyphen",
    "underscore",
    "middleDot"
};
ST_PTabLeader* ST_PTabLeader::default_instance_ = NULL;

// ST_ProofErr
ST_ProofErr::ST_ProofErr()
    :m_has_type(false)
{
}
ST_ProofErr::ST_ProofErr(const ST_ProofErr::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_ProofErr::~ST_ProofErr()
{
    clear();
}
bool ST_ProofErr::has_type() const
{
    return m_has_type;
}

void ST_ProofErr::set_type(const ST_ProofErr::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_ProofErr::Type& ST_ProofErr::get_type() const
{
    return m_type;
}

std::string ST_ProofErr::toString() const
{
    return ST_ProofErr::TypeStrList[m_type];
}

void ST_ProofErr::clear()
{
    m_has_type = false;
}

void ST_ProofErr::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_ProofErr& ST_ProofErr::default_instance()
{
    if (!ST_ProofErr::default_instance_)
    {
        ST_ProofErr::default_instance_ = new ST_ProofErr();
    }
    return *ST_ProofErr::default_instance_;
}

const std::string ST_ProofErr::TypeStrList[] =
{
    "spellStart",
    "spellEnd",
    "gramStart",
    "gramEnd"
};
ST_ProofErr* ST_ProofErr::default_instance_ = NULL;

// ST_EdGrp
ST_EdGrp::ST_EdGrp()
    :m_has_type(false)
{
}
ST_EdGrp::ST_EdGrp(const ST_EdGrp::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_EdGrp::~ST_EdGrp()
{
    clear();
}
bool ST_EdGrp::has_type() const
{
    return m_has_type;
}

void ST_EdGrp::set_type(const ST_EdGrp::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_EdGrp::Type& ST_EdGrp::get_type() const
{
    return m_type;
}

std::string ST_EdGrp::toString() const
{
    return ST_EdGrp::TypeStrList[m_type];
}

void ST_EdGrp::clear()
{
    m_has_type = false;
}

void ST_EdGrp::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_EdGrp& ST_EdGrp::default_instance()
{
    if (!ST_EdGrp::default_instance_)
    {
        ST_EdGrp::default_instance_ = new ST_EdGrp();
    }
    return *ST_EdGrp::default_instance_;
}

const std::string ST_EdGrp::TypeStrList[] =
{
    "none",
    "everyone",
    "administrators",
    "contributors",
    "editors",
    "owners",
    "current"
};
ST_EdGrp* ST_EdGrp::default_instance_ = NULL;

// ST_Hint
ST_Hint::ST_Hint()
    :m_has_type(false)
{
}
ST_Hint::ST_Hint(const ST_Hint::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_Hint::~ST_Hint()
{
    clear();
}
bool ST_Hint::has_type() const
{
    return m_has_type;
}

void ST_Hint::set_type(const ST_Hint::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_Hint::Type& ST_Hint::get_type() const
{
    return m_type;
}

std::string ST_Hint::toString() const
{
    return ST_Hint::TypeStrList[m_type];
}

void ST_Hint::clear()
{
    m_has_type = false;
}

void ST_Hint::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_Hint& ST_Hint::default_instance()
{
    if (!ST_Hint::default_instance_)
    {
        ST_Hint::default_instance_ = new ST_Hint();
    }
    return *ST_Hint::default_instance_;
}

const std::string ST_Hint::TypeStrList[] =
{
    "default",
    "eastAsia",
    "cs"
};
ST_Hint* ST_Hint::default_instance_ = NULL;

// ST_Theme
ST_Theme::ST_Theme()
    :m_has_type(false)
{
}
ST_Theme::ST_Theme(const ST_Theme::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_Theme::~ST_Theme()
{
    clear();
}
bool ST_Theme::has_type() const
{
    return m_has_type;
}

void ST_Theme::set_type(const ST_Theme::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_Theme::Type& ST_Theme::get_type() const
{
    return m_type;
}

std::string ST_Theme::toString() const
{
    return ST_Theme::TypeStrList[m_type];
}

void ST_Theme::clear()
{
    m_has_type = false;
}

void ST_Theme::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_Theme& ST_Theme::default_instance()
{
    if (!ST_Theme::default_instance_)
    {
        ST_Theme::default_instance_ = new ST_Theme();
    }
    return *ST_Theme::default_instance_;
}

const std::string ST_Theme::TypeStrList[] =
{
    "majorEastAsia",
    "majorBidi",
    "majorAscii",
    "majorHAnsi",
    "minorEastAsia",
    "minorBidi",
    "minorAscii",
    "minorHAnsi"
};
ST_Theme* ST_Theme::default_instance_ = NULL;

// ST_RubyAlign
ST_RubyAlign::ST_RubyAlign()
    :m_has_type(false)
{
}
ST_RubyAlign::ST_RubyAlign(const ST_RubyAlign::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_RubyAlign::~ST_RubyAlign()
{
    clear();
}
bool ST_RubyAlign::has_type() const
{
    return m_has_type;
}

void ST_RubyAlign::set_type(const ST_RubyAlign::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_RubyAlign::Type& ST_RubyAlign::get_type() const
{
    return m_type;
}

std::string ST_RubyAlign::toString() const
{
    return ST_RubyAlign::TypeStrList[m_type];
}

void ST_RubyAlign::clear()
{
    m_has_type = false;
}

void ST_RubyAlign::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_RubyAlign& ST_RubyAlign::default_instance()
{
    if (!ST_RubyAlign::default_instance_)
    {
        ST_RubyAlign::default_instance_ = new ST_RubyAlign();
    }
    return *ST_RubyAlign::default_instance_;
}

const std::string ST_RubyAlign::TypeStrList[] =
{
    "center",
    "distributeLetter",
    "distributeSpace",
    "left",
    "right",
    "rightVertical"
};
ST_RubyAlign* ST_RubyAlign::default_instance_ = NULL;

// ST_Lock
ST_Lock::ST_Lock()
    :m_has_type(false)
{
}
ST_Lock::ST_Lock(const ST_Lock::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_Lock::~ST_Lock()
{
    clear();
}
bool ST_Lock::has_type() const
{
    return m_has_type;
}

void ST_Lock::set_type(const ST_Lock::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_Lock::Type& ST_Lock::get_type() const
{
    return m_type;
}

std::string ST_Lock::toString() const
{
    return ST_Lock::TypeStrList[m_type];
}

void ST_Lock::clear()
{
    m_has_type = false;
}

void ST_Lock::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_Lock& ST_Lock::default_instance()
{
    if (!ST_Lock::default_instance_)
    {
        ST_Lock::default_instance_ = new ST_Lock();
    }
    return *ST_Lock::default_instance_;
}

const std::string ST_Lock::TypeStrList[] =
{
    "sdtLocked",
    "contentLocked",
    "unlocked",
    "sdtContentLocked"
};
ST_Lock* ST_Lock::default_instance_ = NULL;

// ST_SdtDateMappingType
ST_SdtDateMappingType::ST_SdtDateMappingType()
    :m_has_type(false)
{
}
ST_SdtDateMappingType::ST_SdtDateMappingType(const ST_SdtDateMappingType::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_SdtDateMappingType::~ST_SdtDateMappingType()
{
    clear();
}
bool ST_SdtDateMappingType::has_type() const
{
    return m_has_type;
}

void ST_SdtDateMappingType::set_type(const ST_SdtDateMappingType::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_SdtDateMappingType::Type& ST_SdtDateMappingType::get_type() const
{
    return m_type;
}

std::string ST_SdtDateMappingType::toString() const
{
    return ST_SdtDateMappingType::TypeStrList[m_type];
}

void ST_SdtDateMappingType::clear()
{
    m_has_type = false;
}

void ST_SdtDateMappingType::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_SdtDateMappingType& ST_SdtDateMappingType::default_instance()
{
    if (!ST_SdtDateMappingType::default_instance_)
    {
        ST_SdtDateMappingType::default_instance_ = new ST_SdtDateMappingType();
    }
    return *ST_SdtDateMappingType::default_instance_;
}

const std::string ST_SdtDateMappingType::TypeStrList[] =
{
    "text",
    "date",
    "dateTime"
};
ST_SdtDateMappingType* ST_SdtDateMappingType::default_instance_ = NULL;

// ST_Direction
ST_Direction::ST_Direction()
    :m_has_type(false)
{
}
ST_Direction::ST_Direction(const ST_Direction::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_Direction::~ST_Direction()
{
    clear();
}
bool ST_Direction::has_type() const
{
    return m_has_type;
}

void ST_Direction::set_type(const ST_Direction::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_Direction::Type& ST_Direction::get_type() const
{
    return m_type;
}

std::string ST_Direction::toString() const
{
    return ST_Direction::TypeStrList[m_type];
}

void ST_Direction::clear()
{
    m_has_type = false;
}

void ST_Direction::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_Direction& ST_Direction::default_instance()
{
    if (!ST_Direction::default_instance_)
    {
        ST_Direction::default_instance_ = new ST_Direction();
    }
    return *ST_Direction::default_instance_;
}

const std::string ST_Direction::TypeStrList[] =
{
    "ltr",
    "rtl"
};
ST_Direction* ST_Direction::default_instance_ = NULL;

// ST_TblWidth
ST_TblWidth::ST_TblWidth()
    :m_has_type(false)
{
}
ST_TblWidth::ST_TblWidth(const ST_TblWidth::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_TblWidth::~ST_TblWidth()
{
    clear();
}
bool ST_TblWidth::has_type() const
{
    return m_has_type;
}

void ST_TblWidth::set_type(const ST_TblWidth::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_TblWidth::Type& ST_TblWidth::get_type() const
{
    return m_type;
}

std::string ST_TblWidth::toString() const
{
    return ST_TblWidth::TypeStrList[m_type];
}

void ST_TblWidth::clear()
{
    m_has_type = false;
}

void ST_TblWidth::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_TblWidth& ST_TblWidth::default_instance()
{
    if (!ST_TblWidth::default_instance_)
    {
        ST_TblWidth::default_instance_ = new ST_TblWidth();
    }
    return *ST_TblWidth::default_instance_;
}

const std::string ST_TblWidth::TypeStrList[] =
{
    "nil",
    "pct",
    "dxa",
    "auto"
};
ST_TblWidth* ST_TblWidth::default_instance_ = NULL;

// ST_MeasurementOrPercent
ST_MeasurementOrPercent::ST_MeasurementOrPercent()
    :m_has_ST_DecimalNumberOrPercent(false),
     m_ST_DecimalNumberOrPercent(NULL),
     m_has_ST_UniversalMeasure(false),
     m_ST_UniversalMeasure(NULL)
{
}
ST_MeasurementOrPercent::ST_MeasurementOrPercent(const ST_MeasurementOrPercent& _ST_MeasurementOrPercent)
    :m_has_ST_DecimalNumberOrPercent(false),
     m_ST_DecimalNumberOrPercent(NULL),
     m_has_ST_UniversalMeasure(false),
     m_ST_UniversalMeasure(NULL)
{

    m_has_ST_DecimalNumberOrPercent = _ST_MeasurementOrPercent.has_ST_DecimalNumberOrPercent();
    if (_ST_MeasurementOrPercent.has_ST_DecimalNumberOrPercent())
    {
        m_ST_DecimalNumberOrPercent = new ST_DecimalNumberOrPercent(_ST_MeasurementOrPercent.get_ST_DecimalNumberOrPercent());
    }


    m_has_ST_UniversalMeasure = _ST_MeasurementOrPercent.has_ST_UniversalMeasure();
    if (_ST_MeasurementOrPercent.has_ST_UniversalMeasure())
    {
        m_ST_UniversalMeasure = new ns_s::ST_UniversalMeasure(_ST_MeasurementOrPercent.get_ST_UniversalMeasure());
    }
}
ST_MeasurementOrPercent::~ST_MeasurementOrPercent()
{
    clear();
}
bool ST_MeasurementOrPercent::has_ST_DecimalNumberOrPercent() const
{
    return m_has_ST_DecimalNumberOrPercent;
}

ST_DecimalNumberOrPercent* ST_MeasurementOrPercent::mutable_ST_DecimalNumberOrPercent()
{
    clear_ST_UniversalMeasure();
    m_has_ST_DecimalNumberOrPercent = true;
    if (!m_ST_DecimalNumberOrPercent)
    {
        m_ST_DecimalNumberOrPercent = new ST_DecimalNumberOrPercent();
    }
    return m_ST_DecimalNumberOrPercent;
}

const ST_DecimalNumberOrPercent& ST_MeasurementOrPercent::get_ST_DecimalNumberOrPercent() const
{
    if (m_ST_DecimalNumberOrPercent)
    {
        return *m_ST_DecimalNumberOrPercent;
    }
    return ST_DecimalNumberOrPercent::default_instance();
}

void ST_MeasurementOrPercent::clear_ST_DecimalNumberOrPercent()
{
    m_has_ST_DecimalNumberOrPercent = false;
    if (m_ST_DecimalNumberOrPercent)
    {
        delete m_ST_DecimalNumberOrPercent;
        m_ST_DecimalNumberOrPercent = NULL;
    }
}

bool ST_MeasurementOrPercent::has_ST_UniversalMeasure() const
{
    return m_has_ST_UniversalMeasure;
}

ns_s::ST_UniversalMeasure* ST_MeasurementOrPercent::mutable_ST_UniversalMeasure()
{
    clear_ST_DecimalNumberOrPercent();
    m_has_ST_UniversalMeasure = true;
    if (!m_ST_UniversalMeasure)
    {
        m_ST_UniversalMeasure = new ns_s::ST_UniversalMeasure();
    }
    return m_ST_UniversalMeasure;
}

const ns_s::ST_UniversalMeasure& ST_MeasurementOrPercent::get_ST_UniversalMeasure() const
{
    if (m_ST_UniversalMeasure)
    {
        return *m_ST_UniversalMeasure;
    }
    return ns_s::ST_UniversalMeasure::default_instance();
}

void ST_MeasurementOrPercent::clear_ST_UniversalMeasure()
{
    m_has_ST_UniversalMeasure = false;
    if (m_ST_UniversalMeasure)
    {
        delete m_ST_UniversalMeasure;
        m_ST_UniversalMeasure = NULL;
    }
}

std::string ST_MeasurementOrPercent::toString() const
{
    if (m_has_ST_DecimalNumberOrPercent)
    {
        return m_ST_DecimalNumberOrPercent->toString();
    }

    if (m_has_ST_UniversalMeasure)
    {
        return m_ST_UniversalMeasure->toString();
    }

    return string();
}

void ST_MeasurementOrPercent::clear()
{   clear_ST_DecimalNumberOrPercent();
    clear_ST_UniversalMeasure();
}

void ST_MeasurementOrPercent::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_ST_DecimalNumberOrPercent)
    {
        m_ST_DecimalNumberOrPercent->toXmlAttr(_attrName, _outStream);
        return;
    }

    if (m_has_ST_UniversalMeasure)
    {
        m_ST_UniversalMeasure->toXmlAttr(_attrName, _outStream);
        return;
    }
}

const ST_MeasurementOrPercent& ST_MeasurementOrPercent::default_instance()
{
    if (!ST_MeasurementOrPercent::default_instance_)
    {
        ST_MeasurementOrPercent::default_instance_ = new ST_MeasurementOrPercent();
    }
    return *ST_MeasurementOrPercent::default_instance_;
}

ST_MeasurementOrPercent* ST_MeasurementOrPercent::default_instance_ = NULL;

// ST_Merge
ST_Merge::ST_Merge()
    :m_has_type(false)
{
}
ST_Merge::ST_Merge(const ST_Merge::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_Merge::~ST_Merge()
{
    clear();
}
bool ST_Merge::has_type() const
{
    return m_has_type;
}

void ST_Merge::set_type(const ST_Merge::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_Merge::Type& ST_Merge::get_type() const
{
    return m_type;
}

std::string ST_Merge::toString() const
{
    return ST_Merge::TypeStrList[m_type];
}

void ST_Merge::clear()
{
    m_has_type = false;
}

void ST_Merge::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_Merge& ST_Merge::default_instance()
{
    if (!ST_Merge::default_instance_)
    {
        ST_Merge::default_instance_ = new ST_Merge();
    }
    return *ST_Merge::default_instance_;
}

const std::string ST_Merge::TypeStrList[] =
{
    "continue",
    "restart"
};
ST_Merge* ST_Merge::default_instance_ = NULL;

// ST_Cnf
ST_Cnf::ST_Cnf()
    :m_has_string(false),
     m_string("")
{
}
ST_Cnf::ST_Cnf(const XSD::string_& _string)
    :m_has_string(true)
{

    set_string(_string);
}
ST_Cnf::~ST_Cnf()
{
    clear();
}
bool ST_Cnf::has_string() const
{
    return m_has_string;
}

void ST_Cnf::set_string(const XSD::string_& _string)
{   assert(_string.size() == 12);

    m_has_string = true;
    m_string = _string;
}

const XSD::string_& ST_Cnf::get_string() const
{
    return m_string;
}

void ST_Cnf::clear()
{
    m_has_string = false;
    m_string.clear();;
}

void ST_Cnf::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_string)
    {
        _outStream << " " << _attrName << "=\"" << m_string << "\"";;
    }
}

const ST_Cnf& ST_Cnf::default_instance()
{
    if (!ST_Cnf::default_instance_)
    {
        ST_Cnf::default_instance_ = new ST_Cnf();
    }
    return *ST_Cnf::default_instance_;
}

std::string ST_Cnf::toString() const
{
    std::stringstream strStream;
    strStream << get_string();
    return strStream.str();
}

ST_Cnf* ST_Cnf::default_instance_ = NULL;

// ST_TblLayoutType
ST_TblLayoutType::ST_TblLayoutType()
    :m_has_type(false)
{
}
ST_TblLayoutType::ST_TblLayoutType(const ST_TblLayoutType::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_TblLayoutType::~ST_TblLayoutType()
{
    clear();
}
bool ST_TblLayoutType::has_type() const
{
    return m_has_type;
}

void ST_TblLayoutType::set_type(const ST_TblLayoutType::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_TblLayoutType::Type& ST_TblLayoutType::get_type() const
{
    return m_type;
}

std::string ST_TblLayoutType::toString() const
{
    return ST_TblLayoutType::TypeStrList[m_type];
}

void ST_TblLayoutType::clear()
{
    m_has_type = false;
}

void ST_TblLayoutType::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_TblLayoutType& ST_TblLayoutType::default_instance()
{
    if (!ST_TblLayoutType::default_instance_)
    {
        ST_TblLayoutType::default_instance_ = new ST_TblLayoutType();
    }
    return *ST_TblLayoutType::default_instance_;
}

const std::string ST_TblLayoutType::TypeStrList[] =
{
    "fixed",
    "autofit"
};
ST_TblLayoutType* ST_TblLayoutType::default_instance_ = NULL;

// ST_TblOverlap
ST_TblOverlap::ST_TblOverlap()
    :m_has_type(false)
{
}
ST_TblOverlap::ST_TblOverlap(const ST_TblOverlap::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_TblOverlap::~ST_TblOverlap()
{
    clear();
}
bool ST_TblOverlap::has_type() const
{
    return m_has_type;
}

void ST_TblOverlap::set_type(const ST_TblOverlap::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_TblOverlap::Type& ST_TblOverlap::get_type() const
{
    return m_type;
}

std::string ST_TblOverlap::toString() const
{
    return ST_TblOverlap::TypeStrList[m_type];
}

void ST_TblOverlap::clear()
{
    m_has_type = false;
}

void ST_TblOverlap::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_TblOverlap& ST_TblOverlap::default_instance()
{
    if (!ST_TblOverlap::default_instance_)
    {
        ST_TblOverlap::default_instance_ = new ST_TblOverlap();
    }
    return *ST_TblOverlap::default_instance_;
}

const std::string ST_TblOverlap::TypeStrList[] =
{
    "never",
    "overlap"
};
ST_TblOverlap* ST_TblOverlap::default_instance_ = NULL;

// ST_FtnPos
ST_FtnPos::ST_FtnPos()
    :m_has_type(false)
{
}
ST_FtnPos::ST_FtnPos(const ST_FtnPos::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_FtnPos::~ST_FtnPos()
{
    clear();
}
bool ST_FtnPos::has_type() const
{
    return m_has_type;
}

void ST_FtnPos::set_type(const ST_FtnPos::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_FtnPos::Type& ST_FtnPos::get_type() const
{
    return m_type;
}

std::string ST_FtnPos::toString() const
{
    return ST_FtnPos::TypeStrList[m_type];
}

void ST_FtnPos::clear()
{
    m_has_type = false;
}

void ST_FtnPos::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_FtnPos& ST_FtnPos::default_instance()
{
    if (!ST_FtnPos::default_instance_)
    {
        ST_FtnPos::default_instance_ = new ST_FtnPos();
    }
    return *ST_FtnPos::default_instance_;
}

const std::string ST_FtnPos::TypeStrList[] =
{
    "pageBottom",
    "beneathText",
    "sectEnd",
    "docEnd"
};
ST_FtnPos* ST_FtnPos::default_instance_ = NULL;

// ST_EdnPos
ST_EdnPos::ST_EdnPos()
    :m_has_type(false)
{
}
ST_EdnPos::ST_EdnPos(const ST_EdnPos::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_EdnPos::~ST_EdnPos()
{
    clear();
}
bool ST_EdnPos::has_type() const
{
    return m_has_type;
}

void ST_EdnPos::set_type(const ST_EdnPos::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_EdnPos::Type& ST_EdnPos::get_type() const
{
    return m_type;
}

std::string ST_EdnPos::toString() const
{
    return ST_EdnPos::TypeStrList[m_type];
}

void ST_EdnPos::clear()
{
    m_has_type = false;
}

void ST_EdnPos::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_EdnPos& ST_EdnPos::default_instance()
{
    if (!ST_EdnPos::default_instance_)
    {
        ST_EdnPos::default_instance_ = new ST_EdnPos();
    }
    return *ST_EdnPos::default_instance_;
}

const std::string ST_EdnPos::TypeStrList[] =
{
    "sectEnd",
    "docEnd"
};
ST_EdnPos* ST_EdnPos::default_instance_ = NULL;

// ST_RestartNumber
ST_RestartNumber::ST_RestartNumber()
    :m_has_type(false)
{
}
ST_RestartNumber::ST_RestartNumber(const ST_RestartNumber::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_RestartNumber::~ST_RestartNumber()
{
    clear();
}
bool ST_RestartNumber::has_type() const
{
    return m_has_type;
}

void ST_RestartNumber::set_type(const ST_RestartNumber::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_RestartNumber::Type& ST_RestartNumber::get_type() const
{
    return m_type;
}

std::string ST_RestartNumber::toString() const
{
    return ST_RestartNumber::TypeStrList[m_type];
}

void ST_RestartNumber::clear()
{
    m_has_type = false;
}

void ST_RestartNumber::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_RestartNumber& ST_RestartNumber::default_instance()
{
    if (!ST_RestartNumber::default_instance_)
    {
        ST_RestartNumber::default_instance_ = new ST_RestartNumber();
    }
    return *ST_RestartNumber::default_instance_;
}

const std::string ST_RestartNumber::TypeStrList[] =
{
    "continuous",
    "eachSect",
    "eachPage"
};
ST_RestartNumber* ST_RestartNumber::default_instance_ = NULL;

// ST_MailMergeSourceType
ST_MailMergeSourceType::ST_MailMergeSourceType()
    :m_has_type(false)
{
}
ST_MailMergeSourceType::ST_MailMergeSourceType(const ST_MailMergeSourceType::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_MailMergeSourceType::~ST_MailMergeSourceType()
{
    clear();
}
bool ST_MailMergeSourceType::has_type() const
{
    return m_has_type;
}

void ST_MailMergeSourceType::set_type(const ST_MailMergeSourceType::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_MailMergeSourceType::Type& ST_MailMergeSourceType::get_type() const
{
    return m_type;
}

std::string ST_MailMergeSourceType::toString() const
{
    return ST_MailMergeSourceType::TypeStrList[m_type];
}

void ST_MailMergeSourceType::clear()
{
    m_has_type = false;
}

void ST_MailMergeSourceType::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_MailMergeSourceType& ST_MailMergeSourceType::default_instance()
{
    if (!ST_MailMergeSourceType::default_instance_)
    {
        ST_MailMergeSourceType::default_instance_ = new ST_MailMergeSourceType();
    }
    return *ST_MailMergeSourceType::default_instance_;
}

const std::string ST_MailMergeSourceType::TypeStrList[] =
{
    "database",
    "addressBook",
    "document1",
    "document2",
    "text",
    "email",
    "native",
    "legacy",
    "master"
};
ST_MailMergeSourceType* ST_MailMergeSourceType::default_instance_ = NULL;

// ST_TargetScreenSz
ST_TargetScreenSz::ST_TargetScreenSz()
    :m_has_type(false)
{
}
ST_TargetScreenSz::ST_TargetScreenSz(const ST_TargetScreenSz::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_TargetScreenSz::~ST_TargetScreenSz()
{
    clear();
}
bool ST_TargetScreenSz::has_type() const
{
    return m_has_type;
}

void ST_TargetScreenSz::set_type(const ST_TargetScreenSz::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_TargetScreenSz::Type& ST_TargetScreenSz::get_type() const
{
    return m_type;
}

std::string ST_TargetScreenSz::toString() const
{
    return ST_TargetScreenSz::TypeStrList[m_type];
}

void ST_TargetScreenSz::clear()
{
    m_has_type = false;
}

void ST_TargetScreenSz::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_TargetScreenSz& ST_TargetScreenSz::default_instance()
{
    if (!ST_TargetScreenSz::default_instance_)
    {
        ST_TargetScreenSz::default_instance_ = new ST_TargetScreenSz();
    }
    return *ST_TargetScreenSz::default_instance_;
}

const std::string ST_TargetScreenSz::TypeStrList[] =
{
    "544x376",
    "640x480",
    "720x512",
    "800x600",
    "1024x768",
    "1152x882",
    "1152x900",
    "1280x1024",
    "1600x1200",
    "1800x1440",
    "1920x1200"
};
ST_TargetScreenSz* ST_TargetScreenSz::default_instance_ = NULL;

// ST_CharacterSpacing
ST_CharacterSpacing::ST_CharacterSpacing()
    :m_has_type(false)
{
}
ST_CharacterSpacing::ST_CharacterSpacing(const ST_CharacterSpacing::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_CharacterSpacing::~ST_CharacterSpacing()
{
    clear();
}
bool ST_CharacterSpacing::has_type() const
{
    return m_has_type;
}

void ST_CharacterSpacing::set_type(const ST_CharacterSpacing::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_CharacterSpacing::Type& ST_CharacterSpacing::get_type() const
{
    return m_type;
}

std::string ST_CharacterSpacing::toString() const
{
    return ST_CharacterSpacing::TypeStrList[m_type];
}

void ST_CharacterSpacing::clear()
{
    m_has_type = false;
}

void ST_CharacterSpacing::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_CharacterSpacing& ST_CharacterSpacing::default_instance()
{
    if (!ST_CharacterSpacing::default_instance_)
    {
        ST_CharacterSpacing::default_instance_ = new ST_CharacterSpacing();
    }
    return *ST_CharacterSpacing::default_instance_;
}

const std::string ST_CharacterSpacing::TypeStrList[] =
{
    "doNotCompress",
    "compressPunctuation",
    "compressPunctuationAndJapaneseKana"
};
ST_CharacterSpacing* ST_CharacterSpacing::default_instance_ = NULL;

// ST_WmlColorSchemeIndex
ST_WmlColorSchemeIndex::ST_WmlColorSchemeIndex()
    :m_has_type(false)
{
}
ST_WmlColorSchemeIndex::ST_WmlColorSchemeIndex(const ST_WmlColorSchemeIndex::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_WmlColorSchemeIndex::~ST_WmlColorSchemeIndex()
{
    clear();
}
bool ST_WmlColorSchemeIndex::has_type() const
{
    return m_has_type;
}

void ST_WmlColorSchemeIndex::set_type(const ST_WmlColorSchemeIndex::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_WmlColorSchemeIndex::Type& ST_WmlColorSchemeIndex::get_type() const
{
    return m_type;
}

std::string ST_WmlColorSchemeIndex::toString() const
{
    return ST_WmlColorSchemeIndex::TypeStrList[m_type];
}

void ST_WmlColorSchemeIndex::clear()
{
    m_has_type = false;
}

void ST_WmlColorSchemeIndex::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_WmlColorSchemeIndex& ST_WmlColorSchemeIndex::default_instance()
{
    if (!ST_WmlColorSchemeIndex::default_instance_)
    {
        ST_WmlColorSchemeIndex::default_instance_ = new ST_WmlColorSchemeIndex();
    }
    return *ST_WmlColorSchemeIndex::default_instance_;
}

const std::string ST_WmlColorSchemeIndex::TypeStrList[] =
{
    "dark1",
    "light1",
    "dark2",
    "light2",
    "accent1",
    "accent2",
    "accent3",
    "accent4",
    "accent5",
    "accent6",
    "hyperlink",
    "followedHyperlink"
};
ST_WmlColorSchemeIndex* ST_WmlColorSchemeIndex::default_instance_ = NULL;

// ST_StyleSort
ST_StyleSort::ST_StyleSort()
    :m_has_type(false)
{
}
ST_StyleSort::ST_StyleSort(const ST_StyleSort::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_StyleSort::~ST_StyleSort()
{
    clear();
}
bool ST_StyleSort::has_type() const
{
    return m_has_type;
}

void ST_StyleSort::set_type(const ST_StyleSort::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_StyleSort::Type& ST_StyleSort::get_type() const
{
    return m_type;
}

std::string ST_StyleSort::toString() const
{
    return ST_StyleSort::TypeStrList[m_type];
}

void ST_StyleSort::clear()
{
    m_has_type = false;
}

void ST_StyleSort::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_StyleSort& ST_StyleSort::default_instance()
{
    if (!ST_StyleSort::default_instance_)
    {
        ST_StyleSort::default_instance_ = new ST_StyleSort();
    }
    return *ST_StyleSort::default_instance_;
}

const std::string ST_StyleSort::TypeStrList[] =
{
    "name",
    "priority",
    "default",
    "font",
    "basedOn",
    "type",
    "0000",
    "0001",
    "0002",
    "0003",
    "0004",
    "0005"
};
ST_StyleSort* ST_StyleSort::default_instance_ = NULL;

// ST_FrameScrollbar
ST_FrameScrollbar::ST_FrameScrollbar()
    :m_has_type(false)
{
}
ST_FrameScrollbar::ST_FrameScrollbar(const ST_FrameScrollbar::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_FrameScrollbar::~ST_FrameScrollbar()
{
    clear();
}
bool ST_FrameScrollbar::has_type() const
{
    return m_has_type;
}

void ST_FrameScrollbar::set_type(const ST_FrameScrollbar::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_FrameScrollbar::Type& ST_FrameScrollbar::get_type() const
{
    return m_type;
}

std::string ST_FrameScrollbar::toString() const
{
    return ST_FrameScrollbar::TypeStrList[m_type];
}

void ST_FrameScrollbar::clear()
{
    m_has_type = false;
}

void ST_FrameScrollbar::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_FrameScrollbar& ST_FrameScrollbar::default_instance()
{
    if (!ST_FrameScrollbar::default_instance_)
    {
        ST_FrameScrollbar::default_instance_ = new ST_FrameScrollbar();
    }
    return *ST_FrameScrollbar::default_instance_;
}

const std::string ST_FrameScrollbar::TypeStrList[] =
{
    "on",
    "off",
    "auto"
};
ST_FrameScrollbar* ST_FrameScrollbar::default_instance_ = NULL;

// ST_FrameLayout
ST_FrameLayout::ST_FrameLayout()
    :m_has_type(false)
{
}
ST_FrameLayout::ST_FrameLayout(const ST_FrameLayout::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_FrameLayout::~ST_FrameLayout()
{
    clear();
}
bool ST_FrameLayout::has_type() const
{
    return m_has_type;
}

void ST_FrameLayout::set_type(const ST_FrameLayout::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_FrameLayout::Type& ST_FrameLayout::get_type() const
{
    return m_type;
}

std::string ST_FrameLayout::toString() const
{
    return ST_FrameLayout::TypeStrList[m_type];
}

void ST_FrameLayout::clear()
{
    m_has_type = false;
}

void ST_FrameLayout::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_FrameLayout& ST_FrameLayout::default_instance()
{
    if (!ST_FrameLayout::default_instance_)
    {
        ST_FrameLayout::default_instance_ = new ST_FrameLayout();
    }
    return *ST_FrameLayout::default_instance_;
}

const std::string ST_FrameLayout::TypeStrList[] =
{
    "rows",
    "cols",
    "none"
};
ST_FrameLayout* ST_FrameLayout::default_instance_ = NULL;

// ST_LevelSuffix
ST_LevelSuffix::ST_LevelSuffix()
    :m_has_type(false)
{
}
ST_LevelSuffix::ST_LevelSuffix(const ST_LevelSuffix::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_LevelSuffix::~ST_LevelSuffix()
{
    clear();
}
bool ST_LevelSuffix::has_type() const
{
    return m_has_type;
}

void ST_LevelSuffix::set_type(const ST_LevelSuffix::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_LevelSuffix::Type& ST_LevelSuffix::get_type() const
{
    return m_type;
}

std::string ST_LevelSuffix::toString() const
{
    return ST_LevelSuffix::TypeStrList[m_type];
}

void ST_LevelSuffix::clear()
{
    m_has_type = false;
}

void ST_LevelSuffix::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_LevelSuffix& ST_LevelSuffix::default_instance()
{
    if (!ST_LevelSuffix::default_instance_)
    {
        ST_LevelSuffix::default_instance_ = new ST_LevelSuffix();
    }
    return *ST_LevelSuffix::default_instance_;
}

const std::string ST_LevelSuffix::TypeStrList[] =
{
    "tab",
    "space",
    "nothing"
};
ST_LevelSuffix* ST_LevelSuffix::default_instance_ = NULL;

// ST_MultiLevelType
ST_MultiLevelType::ST_MultiLevelType()
    :m_has_type(false)
{
}
ST_MultiLevelType::ST_MultiLevelType(const ST_MultiLevelType::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_MultiLevelType::~ST_MultiLevelType()
{
    clear();
}
bool ST_MultiLevelType::has_type() const
{
    return m_has_type;
}

void ST_MultiLevelType::set_type(const ST_MultiLevelType::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_MultiLevelType::Type& ST_MultiLevelType::get_type() const
{
    return m_type;
}

std::string ST_MultiLevelType::toString() const
{
    return ST_MultiLevelType::TypeStrList[m_type];
}

void ST_MultiLevelType::clear()
{
    m_has_type = false;
}

void ST_MultiLevelType::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_MultiLevelType& ST_MultiLevelType::default_instance()
{
    if (!ST_MultiLevelType::default_instance_)
    {
        ST_MultiLevelType::default_instance_ = new ST_MultiLevelType();
    }
    return *ST_MultiLevelType::default_instance_;
}

const std::string ST_MultiLevelType::TypeStrList[] =
{
    "singleLevel",
    "multilevel",
    "hybridMultilevel"
};
ST_MultiLevelType* ST_MultiLevelType::default_instance_ = NULL;

// ST_TblStyleOverrideType
ST_TblStyleOverrideType::ST_TblStyleOverrideType()
    :m_has_type(false)
{
}
ST_TblStyleOverrideType::ST_TblStyleOverrideType(const ST_TblStyleOverrideType::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_TblStyleOverrideType::~ST_TblStyleOverrideType()
{
    clear();
}
bool ST_TblStyleOverrideType::has_type() const
{
    return m_has_type;
}

void ST_TblStyleOverrideType::set_type(const ST_TblStyleOverrideType::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_TblStyleOverrideType::Type& ST_TblStyleOverrideType::get_type() const
{
    return m_type;
}

std::string ST_TblStyleOverrideType::toString() const
{
    return ST_TblStyleOverrideType::TypeStrList[m_type];
}

void ST_TblStyleOverrideType::clear()
{
    m_has_type = false;
}

void ST_TblStyleOverrideType::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_TblStyleOverrideType& ST_TblStyleOverrideType::default_instance()
{
    if (!ST_TblStyleOverrideType::default_instance_)
    {
        ST_TblStyleOverrideType::default_instance_ = new ST_TblStyleOverrideType();
    }
    return *ST_TblStyleOverrideType::default_instance_;
}

const std::string ST_TblStyleOverrideType::TypeStrList[] =
{
    "wholeTable",
    "firstRow",
    "lastRow",
    "firstCol",
    "lastCol",
    "band1Vert",
    "band2Vert",
    "band1Horz",
    "band2Horz",
    "neCell",
    "nwCell",
    "seCell",
    "swCell"
};
ST_TblStyleOverrideType* ST_TblStyleOverrideType::default_instance_ = NULL;

// ST_StyleType
ST_StyleType::ST_StyleType()
    :m_has_type(false)
{
}
ST_StyleType::ST_StyleType(const ST_StyleType::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_StyleType::~ST_StyleType()
{
    clear();
}
bool ST_StyleType::has_type() const
{
    return m_has_type;
}

void ST_StyleType::set_type(const ST_StyleType::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_StyleType::Type& ST_StyleType::get_type() const
{
    return m_type;
}

std::string ST_StyleType::toString() const
{
    return ST_StyleType::TypeStrList[m_type];
}

void ST_StyleType::clear()
{
    m_has_type = false;
}

void ST_StyleType::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_StyleType& ST_StyleType::default_instance()
{
    if (!ST_StyleType::default_instance_)
    {
        ST_StyleType::default_instance_ = new ST_StyleType();
    }
    return *ST_StyleType::default_instance_;
}

const std::string ST_StyleType::TypeStrList[] =
{
    "paragraph",
    "character",
    "table",
    "numbering"
};
ST_StyleType* ST_StyleType::default_instance_ = NULL;

// ST_FontFamily
ST_FontFamily::ST_FontFamily()
    :m_has_type(false)
{
}
ST_FontFamily::ST_FontFamily(const ST_FontFamily::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_FontFamily::~ST_FontFamily()
{
    clear();
}
bool ST_FontFamily::has_type() const
{
    return m_has_type;
}

void ST_FontFamily::set_type(const ST_FontFamily::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_FontFamily::Type& ST_FontFamily::get_type() const
{
    return m_type;
}

std::string ST_FontFamily::toString() const
{
    return ST_FontFamily::TypeStrList[m_type];
}

void ST_FontFamily::clear()
{
    m_has_type = false;
}

void ST_FontFamily::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_FontFamily& ST_FontFamily::default_instance()
{
    if (!ST_FontFamily::default_instance_)
    {
        ST_FontFamily::default_instance_ = new ST_FontFamily();
    }
    return *ST_FontFamily::default_instance_;
}

const std::string ST_FontFamily::TypeStrList[] =
{
    "decorative",
    "modern",
    "roman",
    "script",
    "swiss",
    "auto"
};
ST_FontFamily* ST_FontFamily::default_instance_ = NULL;

// ST_Pitch
ST_Pitch::ST_Pitch()
    :m_has_type(false)
{
}
ST_Pitch::ST_Pitch(const ST_Pitch::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_Pitch::~ST_Pitch()
{
    clear();
}
bool ST_Pitch::has_type() const
{
    return m_has_type;
}

void ST_Pitch::set_type(const ST_Pitch::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_Pitch::Type& ST_Pitch::get_type() const
{
    return m_type;
}

std::string ST_Pitch::toString() const
{
    return ST_Pitch::TypeStrList[m_type];
}

void ST_Pitch::clear()
{
    m_has_type = false;
}

void ST_Pitch::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_Pitch& ST_Pitch::default_instance()
{
    if (!ST_Pitch::default_instance_)
    {
        ST_Pitch::default_instance_ = new ST_Pitch();
    }
    return *ST_Pitch::default_instance_;
}

const std::string ST_Pitch::TypeStrList[] =
{
    "fixed",
    "variable",
    "default"
};
ST_Pitch* ST_Pitch::default_instance_ = NULL;

// ST_ThemeColor
ST_ThemeColor::ST_ThemeColor()
    :m_has_type(false)
{
}
ST_ThemeColor::ST_ThemeColor(const ST_ThemeColor::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_ThemeColor::~ST_ThemeColor()
{
    clear();
}
bool ST_ThemeColor::has_type() const
{
    return m_has_type;
}

void ST_ThemeColor::set_type(const ST_ThemeColor::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_ThemeColor::Type& ST_ThemeColor::get_type() const
{
    return m_type;
}

std::string ST_ThemeColor::toString() const
{
    return ST_ThemeColor::TypeStrList[m_type];
}

void ST_ThemeColor::clear()
{
    m_has_type = false;
}

void ST_ThemeColor::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_ThemeColor& ST_ThemeColor::default_instance()
{
    if (!ST_ThemeColor::default_instance_)
    {
        ST_ThemeColor::default_instance_ = new ST_ThemeColor();
    }
    return *ST_ThemeColor::default_instance_;
}

const std::string ST_ThemeColor::TypeStrList[] =
{
    "dark1",
    "light1",
    "dark2",
    "light2",
    "accent1",
    "accent2",
    "accent3",
    "accent4",
    "accent5",
    "accent6",
    "hyperlink",
    "followedHyperlink",
    "none",
    "background1",
    "text1",
    "background2",
    "text2"
};
ST_ThemeColor* ST_ThemeColor::default_instance_ = NULL;

// ST_DocPartBehavior
ST_DocPartBehavior::ST_DocPartBehavior()
    :m_has_type(false)
{
}
ST_DocPartBehavior::ST_DocPartBehavior(const ST_DocPartBehavior::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_DocPartBehavior::~ST_DocPartBehavior()
{
    clear();
}
bool ST_DocPartBehavior::has_type() const
{
    return m_has_type;
}

void ST_DocPartBehavior::set_type(const ST_DocPartBehavior::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_DocPartBehavior::Type& ST_DocPartBehavior::get_type() const
{
    return m_type;
}

std::string ST_DocPartBehavior::toString() const
{
    return ST_DocPartBehavior::TypeStrList[m_type];
}

void ST_DocPartBehavior::clear()
{
    m_has_type = false;
}

void ST_DocPartBehavior::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_DocPartBehavior& ST_DocPartBehavior::default_instance()
{
    if (!ST_DocPartBehavior::default_instance_)
    {
        ST_DocPartBehavior::default_instance_ = new ST_DocPartBehavior();
    }
    return *ST_DocPartBehavior::default_instance_;
}

const std::string ST_DocPartBehavior::TypeStrList[] =
{
    "content",
    "p",
    "pg"
};
ST_DocPartBehavior* ST_DocPartBehavior::default_instance_ = NULL;

// ST_DocPartType
ST_DocPartType::ST_DocPartType()
    :m_has_type(false)
{
}
ST_DocPartType::ST_DocPartType(const ST_DocPartType::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_DocPartType::~ST_DocPartType()
{
    clear();
}
bool ST_DocPartType::has_type() const
{
    return m_has_type;
}

void ST_DocPartType::set_type(const ST_DocPartType::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_DocPartType::Type& ST_DocPartType::get_type() const
{
    return m_type;
}

std::string ST_DocPartType::toString() const
{
    return ST_DocPartType::TypeStrList[m_type];
}

void ST_DocPartType::clear()
{
    m_has_type = false;
}

void ST_DocPartType::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_DocPartType& ST_DocPartType::default_instance()
{
    if (!ST_DocPartType::default_instance_)
    {
        ST_DocPartType::default_instance_ = new ST_DocPartType();
    }
    return *ST_DocPartType::default_instance_;
}

const std::string ST_DocPartType::TypeStrList[] =
{
    "none",
    "normal",
    "autoExp",
    "toolbar",
    "speller",
    "formFld",
    "bbPlcHdr"
};
ST_DocPartType* ST_DocPartType::default_instance_ = NULL;

// ST_DocPartGallery
ST_DocPartGallery::ST_DocPartGallery()
    :m_has_type(false)
{
}
ST_DocPartGallery::ST_DocPartGallery(const ST_DocPartGallery::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_DocPartGallery::~ST_DocPartGallery()
{
    clear();
}
bool ST_DocPartGallery::has_type() const
{
    return m_has_type;
}

void ST_DocPartGallery::set_type(const ST_DocPartGallery::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_DocPartGallery::Type& ST_DocPartGallery::get_type() const
{
    return m_type;
}

std::string ST_DocPartGallery::toString() const
{
    return ST_DocPartGallery::TypeStrList[m_type];
}

void ST_DocPartGallery::clear()
{
    m_has_type = false;
}

void ST_DocPartGallery::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_DocPartGallery& ST_DocPartGallery::default_instance()
{
    if (!ST_DocPartGallery::default_instance_)
    {
        ST_DocPartGallery::default_instance_ = new ST_DocPartGallery();
    }
    return *ST_DocPartGallery::default_instance_;
}

const std::string ST_DocPartGallery::TypeStrList[] =
{
    "placeholder",
    "any",
    "default",
    "docParts",
    "coverPg",
    "eq",
    "ftrs",
    "hdrs",
    "pgNum",
    "tbls",
    "watermarks",
    "autoTxt",
    "txtBox",
    "pgNumT",
    "pgNumB",
    "pgNumMargins",
    "tblOfContents",
    "bib",
    "custQuickParts",
    "custCoverPg",
    "custEq",
    "custFtrs",
    "custHdrs",
    "custPgNum",
    "custTbls",
    "custWatermarks",
    "custAutoTxt",
    "custTxtBox",
    "custPgNumT",
    "custPgNumB",
    "custPgNumMargins",
    "custTblOfContents",
    "custBib",
    "custom1",
    "custom2",
    "custom3",
    "custom4",
    "custom5"
};
ST_DocPartGallery* ST_DocPartGallery::default_instance_ = NULL;

// ST_CaptionPos
ST_CaptionPos::ST_CaptionPos()
    :m_has_type(false)
{
}
ST_CaptionPos::ST_CaptionPos(const ST_CaptionPos::Type& _type)
    :m_has_type(true),
     m_type(_type)
{
}
ST_CaptionPos::~ST_CaptionPos()
{
    clear();
}
bool ST_CaptionPos::has_type() const
{
    return m_has_type;
}

void ST_CaptionPos::set_type(const ST_CaptionPos::Type& _type)
{
    m_has_type = true;
    m_type = _type;
}

const ST_CaptionPos::Type& ST_CaptionPos::get_type() const
{
    return m_type;
}

std::string ST_CaptionPos::toString() const
{
    return ST_CaptionPos::TypeStrList[m_type];
}

void ST_CaptionPos::clear()
{
    m_has_type = false;
}

void ST_CaptionPos::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
{
    if (m_has_type)
    {
        _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
}

const ST_CaptionPos& ST_CaptionPos::default_instance()
{
    if (!ST_CaptionPos::default_instance_)
    {
        ST_CaptionPos::default_instance_ = new ST_CaptionPos();
    }
    return *ST_CaptionPos::default_instance_;
}

const std::string ST_CaptionPos::TypeStrList[] =
{
    "above",
    "below",
    "left",
    "right"
};
ST_CaptionPos* ST_CaptionPos::default_instance_ = NULL;

// CT_Empty
CT_Empty::CT_Empty()

{
}
CT_Empty::~CT_Empty()
{
    clear();
}
void CT_Empty::clear()
{    }

void CT_Empty::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_Empty& CT_Empty::default_instance()
{
    if (!CT_Empty::default_instance_)
    {
        CT_Empty::default_instance_ = new CT_Empty();
    }
    return *CT_Empty::default_instance_;
}

CT_Empty* CT_Empty::default_instance_ = NULL;

// CT_OnOff
CT_OnOff::CT_OnOff()
    :m_has_val_attr(false),
     m_val_attr(NULL)
{
}
CT_OnOff::~CT_OnOff()
{
    clear();
}
void CT_OnOff::clear()
{
    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }

}

void CT_OnOff::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_OnOff& CT_OnOff::default_instance()
{
    if (!CT_OnOff::default_instance_)
    {
        CT_OnOff::default_instance_ = new CT_OnOff();
    }
    return *CT_OnOff::default_instance_;
}

bool CT_OnOff::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_OnOff::set_val_attr(const ns_s::ST_OnOff& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ns_s::ST_OnOff(_val_attr);
}

const ns_s::ST_OnOff& CT_OnOff::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

CT_OnOff* CT_OnOff::default_instance_ = NULL;

// CT_LongHexNumber
CT_LongHexNumber::CT_LongHexNumber()
    :m_has_val_attr(false),
     m_val_attr(NULL)
{
}
CT_LongHexNumber::~CT_LongHexNumber()
{
    clear();
}
void CT_LongHexNumber::clear()
{
    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }

}

void CT_LongHexNumber::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_val_attr);
    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_LongHexNumber& CT_LongHexNumber::default_instance()
{
    if (!CT_LongHexNumber::default_instance_)
    {
        CT_LongHexNumber::default_instance_ = new CT_LongHexNumber();
    }
    return *CT_LongHexNumber::default_instance_;
}

bool CT_LongHexNumber::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_LongHexNumber::set_val_attr(const ST_LongHexNumber& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ST_LongHexNumber(_val_attr);
}

const ST_LongHexNumber& CT_LongHexNumber::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ST_LongHexNumber::default_instance();
}

CT_LongHexNumber* CT_LongHexNumber::default_instance_ = NULL;

// CT_Charset
CT_Charset::CT_Charset()
    :m_has_val_attr(false),
     m_val_attr(NULL),
     m_has_characterSet_attr(false),
     m_characterSet_attr(NULL)
{
}
CT_Charset::~CT_Charset()
{
    clear();
}
void CT_Charset::clear()
{
    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }


    m_has_characterSet_attr = false;

    if (m_characterSet_attr)
    {
        delete m_characterSet_attr;
        m_characterSet_attr = NULL;
    }

}

void CT_Charset::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }



    if (m_has_characterSet_attr)
    {
        m_characterSet_attr->toXmlAttr("w:characterSet", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_Charset& CT_Charset::default_instance()
{
    if (!CT_Charset::default_instance_)
    {
        CT_Charset::default_instance_ = new CT_Charset();
    }
    return *CT_Charset::default_instance_;
}

bool CT_Charset::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_Charset::set_val_attr(const ST_UcharHexNumber& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ST_UcharHexNumber(_val_attr);
}

const ST_UcharHexNumber& CT_Charset::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ST_UcharHexNumber::default_instance();
}

bool CT_Charset::has_characterSet_attr() const
{
    return m_has_characterSet_attr;
}

void CT_Charset::set_characterSet_attr(const ns_s::ST_String& _characterSet_attr)
{
    m_has_characterSet_attr = true;
    m_characterSet_attr = new ns_s::ST_String(_characterSet_attr);
}

const ns_s::ST_String& CT_Charset::get_characterSet_attr() const
{
    if (m_characterSet_attr)
    {
        return *m_characterSet_attr;
    }
    return ns_s::ST_String::default_instance();
}

CT_Charset* CT_Charset::default_instance_ = NULL;

// CT_DecimalNumber
CT_DecimalNumber::CT_DecimalNumber()
    :m_has_val_attr(false),
     m_val_attr(NULL)
{
}
CT_DecimalNumber::~CT_DecimalNumber()
{
    clear();
}
void CT_DecimalNumber::clear()
{
    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }

}

void CT_DecimalNumber::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_val_attr);
    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_DecimalNumber& CT_DecimalNumber::default_instance()
{
    if (!CT_DecimalNumber::default_instance_)
    {
        CT_DecimalNumber::default_instance_ = new CT_DecimalNumber();
    }
    return *CT_DecimalNumber::default_instance_;
}

bool CT_DecimalNumber::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_DecimalNumber::set_val_attr(const ST_DecimalNumber& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ST_DecimalNumber(_val_attr);
}

const ST_DecimalNumber& CT_DecimalNumber::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ST_DecimalNumber::default_instance();
}

CT_DecimalNumber* CT_DecimalNumber::default_instance_ = NULL;

// CT_UnsignedDecimalNumber
CT_UnsignedDecimalNumber::CT_UnsignedDecimalNumber()
    :m_has_val_attr(false),
     m_val_attr(NULL)
{
}
CT_UnsignedDecimalNumber::~CT_UnsignedDecimalNumber()
{
    clear();
}
void CT_UnsignedDecimalNumber::clear()
{
    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }

}

void CT_UnsignedDecimalNumber::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_val_attr);
    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_UnsignedDecimalNumber& CT_UnsignedDecimalNumber::default_instance()
{
    if (!CT_UnsignedDecimalNumber::default_instance_)
    {
        CT_UnsignedDecimalNumber::default_instance_ = new CT_UnsignedDecimalNumber();
    }
    return *CT_UnsignedDecimalNumber::default_instance_;
}

bool CT_UnsignedDecimalNumber::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_UnsignedDecimalNumber::set_val_attr(const ns_s::ST_UnsignedDecimalNumber& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ns_s::ST_UnsignedDecimalNumber(_val_attr);
}

const ns_s::ST_UnsignedDecimalNumber& CT_UnsignedDecimalNumber::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ns_s::ST_UnsignedDecimalNumber::default_instance();
}

CT_UnsignedDecimalNumber* CT_UnsignedDecimalNumber::default_instance_ = NULL;

// CT_DecimalNumberOrPrecent
CT_DecimalNumberOrPrecent::CT_DecimalNumberOrPrecent()
    :m_has_val_attr(false),
     m_val_attr(NULL)
{
}
CT_DecimalNumberOrPrecent::~CT_DecimalNumberOrPrecent()
{
    clear();
}
void CT_DecimalNumberOrPrecent::clear()
{
    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }

}

void CT_DecimalNumberOrPrecent::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_val_attr);
    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_DecimalNumberOrPrecent& CT_DecimalNumberOrPrecent::default_instance()
{
    if (!CT_DecimalNumberOrPrecent::default_instance_)
    {
        CT_DecimalNumberOrPrecent::default_instance_ = new CT_DecimalNumberOrPrecent();
    }
    return *CT_DecimalNumberOrPrecent::default_instance_;
}

bool CT_DecimalNumberOrPrecent::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_DecimalNumberOrPrecent::set_val_attr(const ST_DecimalNumberOrPercent& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ST_DecimalNumberOrPercent(_val_attr);
}

const ST_DecimalNumberOrPercent& CT_DecimalNumberOrPrecent::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ST_DecimalNumberOrPercent::default_instance();
}

CT_DecimalNumberOrPrecent* CT_DecimalNumberOrPrecent::default_instance_ = NULL;

// CT_TwipsMeasure
CT_TwipsMeasure::CT_TwipsMeasure()
    :m_has_val_attr(false),
     m_val_attr(NULL)
{
}
CT_TwipsMeasure::~CT_TwipsMeasure()
{
    clear();
}
void CT_TwipsMeasure::clear()
{
    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }

}

void CT_TwipsMeasure::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_val_attr);
    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_TwipsMeasure& CT_TwipsMeasure::default_instance()
{
    if (!CT_TwipsMeasure::default_instance_)
    {
        CT_TwipsMeasure::default_instance_ = new CT_TwipsMeasure();
    }
    return *CT_TwipsMeasure::default_instance_;
}

bool CT_TwipsMeasure::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_TwipsMeasure::set_val_attr(const ns_s::ST_TwipsMeasure& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ns_s::ST_TwipsMeasure(_val_attr);
}

const ns_s::ST_TwipsMeasure& CT_TwipsMeasure::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ns_s::ST_TwipsMeasure::default_instance();
}

CT_TwipsMeasure* CT_TwipsMeasure::default_instance_ = NULL;

// CT_SignedTwipsMeasure
CT_SignedTwipsMeasure::CT_SignedTwipsMeasure()
    :m_has_val_attr(false),
     m_val_attr(NULL)
{
}
CT_SignedTwipsMeasure::~CT_SignedTwipsMeasure()
{
    clear();
}
void CT_SignedTwipsMeasure::clear()
{
    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }

}

void CT_SignedTwipsMeasure::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_val_attr);
    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_SignedTwipsMeasure& CT_SignedTwipsMeasure::default_instance()
{
    if (!CT_SignedTwipsMeasure::default_instance_)
    {
        CT_SignedTwipsMeasure::default_instance_ = new CT_SignedTwipsMeasure();
    }
    return *CT_SignedTwipsMeasure::default_instance_;
}

bool CT_SignedTwipsMeasure::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_SignedTwipsMeasure::set_val_attr(const ST_SignedTwipsMeasure& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ST_SignedTwipsMeasure(_val_attr);
}

const ST_SignedTwipsMeasure& CT_SignedTwipsMeasure::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ST_SignedTwipsMeasure::default_instance();
}

CT_SignedTwipsMeasure* CT_SignedTwipsMeasure::default_instance_ = NULL;

// CT_PixelsMeasure
CT_PixelsMeasure::CT_PixelsMeasure()
    :m_has_val_attr(false),
     m_val_attr(NULL)
{
}
CT_PixelsMeasure::~CT_PixelsMeasure()
{
    clear();
}
void CT_PixelsMeasure::clear()
{
    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }

}

void CT_PixelsMeasure::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_val_attr);
    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_PixelsMeasure& CT_PixelsMeasure::default_instance()
{
    if (!CT_PixelsMeasure::default_instance_)
    {
        CT_PixelsMeasure::default_instance_ = new CT_PixelsMeasure();
    }
    return *CT_PixelsMeasure::default_instance_;
}

bool CT_PixelsMeasure::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_PixelsMeasure::set_val_attr(const ST_PixelsMeasure& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ST_PixelsMeasure(_val_attr);
}

const ST_PixelsMeasure& CT_PixelsMeasure::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ST_PixelsMeasure::default_instance();
}

CT_PixelsMeasure* CT_PixelsMeasure::default_instance_ = NULL;

// CT_HpsMeasure
CT_HpsMeasure::CT_HpsMeasure()
    :m_has_val_attr(false),
     m_val_attr(NULL)
{
}
CT_HpsMeasure::~CT_HpsMeasure()
{
    clear();
}
void CT_HpsMeasure::clear()
{
    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }

}

void CT_HpsMeasure::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_val_attr);
    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_HpsMeasure& CT_HpsMeasure::default_instance()
{
    if (!CT_HpsMeasure::default_instance_)
    {
        CT_HpsMeasure::default_instance_ = new CT_HpsMeasure();
    }
    return *CT_HpsMeasure::default_instance_;
}

bool CT_HpsMeasure::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_HpsMeasure::set_val_attr(const ST_HpsMeasure& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ST_HpsMeasure(_val_attr);
}

const ST_HpsMeasure& CT_HpsMeasure::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ST_HpsMeasure::default_instance();
}

CT_HpsMeasure* CT_HpsMeasure::default_instance_ = NULL;

// CT_SignedHpsMeasure
CT_SignedHpsMeasure::CT_SignedHpsMeasure()
    :m_has_val_attr(false),
     m_val_attr(NULL)
{
}
CT_SignedHpsMeasure::~CT_SignedHpsMeasure()
{
    clear();
}
void CT_SignedHpsMeasure::clear()
{
    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }

}

void CT_SignedHpsMeasure::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_val_attr);
    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_SignedHpsMeasure& CT_SignedHpsMeasure::default_instance()
{
    if (!CT_SignedHpsMeasure::default_instance_)
    {
        CT_SignedHpsMeasure::default_instance_ = new CT_SignedHpsMeasure();
    }
    return *CT_SignedHpsMeasure::default_instance_;
}

bool CT_SignedHpsMeasure::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_SignedHpsMeasure::set_val_attr(const ST_SignedHpsMeasure& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ST_SignedHpsMeasure(_val_attr);
}

const ST_SignedHpsMeasure& CT_SignedHpsMeasure::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ST_SignedHpsMeasure::default_instance();
}

CT_SignedHpsMeasure* CT_SignedHpsMeasure::default_instance_ = NULL;

// CT_MacroName
CT_MacroName::CT_MacroName()
    :m_has_val_attr(false),
     m_val_attr(NULL)
{
}
CT_MacroName::~CT_MacroName()
{
    clear();
}
void CT_MacroName::clear()
{
    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }

}

void CT_MacroName::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_val_attr);
    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_MacroName& CT_MacroName::default_instance()
{
    if (!CT_MacroName::default_instance_)
    {
        CT_MacroName::default_instance_ = new CT_MacroName();
    }
    return *CT_MacroName::default_instance_;
}

bool CT_MacroName::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_MacroName::set_val_attr(const ST_MacroName& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ST_MacroName(_val_attr);
}

const ST_MacroName& CT_MacroName::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ST_MacroName::default_instance();
}

CT_MacroName* CT_MacroName::default_instance_ = NULL;

// CT_String
CT_String::CT_String()
    :m_has_val_attr(false),
     m_val_attr(NULL)
{
}
CT_String::~CT_String()
{
    clear();
}
void CT_String::clear()
{
    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }

}

void CT_String::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_val_attr);
    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_String& CT_String::default_instance()
{
    if (!CT_String::default_instance_)
    {
        CT_String::default_instance_ = new CT_String();
    }
    return *CT_String::default_instance_;
}

bool CT_String::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_String::set_val_attr(const ns_s::ST_String& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ns_s::ST_String(_val_attr);
}

const ns_s::ST_String& CT_String::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ns_s::ST_String::default_instance();
}

CT_String* CT_String::default_instance_ = NULL;

// CT_TextScale
CT_TextScale::CT_TextScale()
    :m_has_val_attr(false),
     m_val_attr(NULL)
{
}
CT_TextScale::~CT_TextScale()
{
    clear();
}
void CT_TextScale::clear()
{
    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }

}

void CT_TextScale::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_TextScale& CT_TextScale::default_instance()
{
    if (!CT_TextScale::default_instance_)
    {
        CT_TextScale::default_instance_ = new CT_TextScale();
    }
    return *CT_TextScale::default_instance_;
}

bool CT_TextScale::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_TextScale::set_val_attr(const ST_TextScale& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ST_TextScale(_val_attr);
}

const ST_TextScale& CT_TextScale::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ST_TextScale::default_instance();
}

CT_TextScale* CT_TextScale::default_instance_ = NULL;

// CT_Highlight
CT_Highlight::CT_Highlight()
    :m_has_val_attr(false),
     m_val_attr(NULL)
{
}
CT_Highlight::~CT_Highlight()
{
    clear();
}
void CT_Highlight::clear()
{
    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }

}

void CT_Highlight::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_val_attr);
    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_Highlight& CT_Highlight::default_instance()
{
    if (!CT_Highlight::default_instance_)
    {
        CT_Highlight::default_instance_ = new CT_Highlight();
    }
    return *CT_Highlight::default_instance_;
}

bool CT_Highlight::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_Highlight::set_val_attr(const ST_HighlightColor& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ST_HighlightColor(_val_attr);
}

const ST_HighlightColor& CT_Highlight::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ST_HighlightColor::default_instance();
}

CT_Highlight* CT_Highlight::default_instance_ = NULL;

// CT_Color
CT_Color::CT_Color()
    :m_has_val_attr(false),
     m_val_attr(NULL),
     m_has_themeColor_attr(false),
     m_themeColor_attr(NULL),
     m_has_themeTint_attr(false),
     m_themeTint_attr(NULL),
     m_has_themeShade_attr(false),
     m_themeShade_attr(NULL)
{
}
CT_Color::~CT_Color()
{
    clear();
}
void CT_Color::clear()
{
    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }


    m_has_themeColor_attr = false;

    if (m_themeColor_attr)
    {
        delete m_themeColor_attr;
        m_themeColor_attr = NULL;
    }


    m_has_themeTint_attr = false;

    if (m_themeTint_attr)
    {
        delete m_themeTint_attr;
        m_themeTint_attr = NULL;
    }


    m_has_themeShade_attr = false;

    if (m_themeShade_attr)
    {
        delete m_themeShade_attr;
        m_themeShade_attr = NULL;
    }

}

void CT_Color::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_val_attr);
    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }



    if (m_has_themeColor_attr)
    {
        m_themeColor_attr->toXmlAttr("w:themeColor", _outStream);
    }



    if (m_has_themeTint_attr)
    {
        m_themeTint_attr->toXmlAttr("w:themeTint", _outStream);
    }



    if (m_has_themeShade_attr)
    {
        m_themeShade_attr->toXmlAttr("w:themeShade", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_Color& CT_Color::default_instance()
{
    if (!CT_Color::default_instance_)
    {
        CT_Color::default_instance_ = new CT_Color();
    }
    return *CT_Color::default_instance_;
}

bool CT_Color::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_Color::set_val_attr(const ST_HexColor& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ST_HexColor(_val_attr);
}

const ST_HexColor& CT_Color::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ST_HexColor::default_instance();
}

bool CT_Color::has_themeColor_attr() const
{
    return m_has_themeColor_attr;
}

void CT_Color::set_themeColor_attr(const ST_ThemeColor& _themeColor_attr)
{
    m_has_themeColor_attr = true;
    m_themeColor_attr = new ST_ThemeColor(_themeColor_attr);
}

const ST_ThemeColor& CT_Color::get_themeColor_attr() const
{
    if (m_themeColor_attr)
    {
        return *m_themeColor_attr;
    }
    return ST_ThemeColor::default_instance();
}

bool CT_Color::has_themeTint_attr() const
{
    return m_has_themeTint_attr;
}

void CT_Color::set_themeTint_attr(const ST_UcharHexNumber& _themeTint_attr)
{
    m_has_themeTint_attr = true;
    m_themeTint_attr = new ST_UcharHexNumber(_themeTint_attr);
}

const ST_UcharHexNumber& CT_Color::get_themeTint_attr() const
{
    if (m_themeTint_attr)
    {
        return *m_themeTint_attr;
    }
    return ST_UcharHexNumber::default_instance();
}

bool CT_Color::has_themeShade_attr() const
{
    return m_has_themeShade_attr;
}

void CT_Color::set_themeShade_attr(const ST_UcharHexNumber& _themeShade_attr)
{
    m_has_themeShade_attr = true;
    m_themeShade_attr = new ST_UcharHexNumber(_themeShade_attr);
}

const ST_UcharHexNumber& CT_Color::get_themeShade_attr() const
{
    if (m_themeShade_attr)
    {
        return *m_themeShade_attr;
    }
    return ST_UcharHexNumber::default_instance();
}

CT_Color* CT_Color::default_instance_ = NULL;

// CT_Lang
CT_Lang::CT_Lang()
    :m_has_val_attr(false),
     m_val_attr(NULL)
{
}
CT_Lang::~CT_Lang()
{
    clear();
}
void CT_Lang::clear()
{
    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }

}

void CT_Lang::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_val_attr);
    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_Lang& CT_Lang::default_instance()
{
    if (!CT_Lang::default_instance_)
    {
        CT_Lang::default_instance_ = new CT_Lang();
    }
    return *CT_Lang::default_instance_;
}

bool CT_Lang::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_Lang::set_val_attr(const ns_s::ST_Lang& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ns_s::ST_Lang(_val_attr);
}

const ns_s::ST_Lang& CT_Lang::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ns_s::ST_Lang::default_instance();
}

CT_Lang* CT_Lang::default_instance_ = NULL;

// CT_Guid
CT_Guid::CT_Guid()
    :m_has_val_attr(false),
     m_val_attr(NULL)
{
}
CT_Guid::~CT_Guid()
{
    clear();
}
void CT_Guid::clear()
{
    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }

}

void CT_Guid::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_Guid& CT_Guid::default_instance()
{
    if (!CT_Guid::default_instance_)
    {
        CT_Guid::default_instance_ = new CT_Guid();
    }
    return *CT_Guid::default_instance_;
}

bool CT_Guid::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_Guid::set_val_attr(const ns_s::ST_Guid& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ns_s::ST_Guid(_val_attr);
}

const ns_s::ST_Guid& CT_Guid::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ns_s::ST_Guid::default_instance();
}

CT_Guid* CT_Guid::default_instance_ = NULL;

// CT_Underline
CT_Underline::CT_Underline()
    :m_has_val_attr(false),
     m_val_attr(NULL),
     m_has_color_attr(false),
     m_color_attr(NULL),
     m_has_themeColor_attr(false),
     m_themeColor_attr(NULL),
     m_has_themeTint_attr(false),
     m_themeTint_attr(NULL),
     m_has_themeShade_attr(false),
     m_themeShade_attr(NULL)
{
}
CT_Underline::~CT_Underline()
{
    clear();
}
void CT_Underline::clear()
{
    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }


    m_has_color_attr = false;

    if (m_color_attr)
    {
        delete m_color_attr;
        m_color_attr = NULL;
    }


    m_has_themeColor_attr = false;

    if (m_themeColor_attr)
    {
        delete m_themeColor_attr;
        m_themeColor_attr = NULL;
    }


    m_has_themeTint_attr = false;

    if (m_themeTint_attr)
    {
        delete m_themeTint_attr;
        m_themeTint_attr = NULL;
    }


    m_has_themeShade_attr = false;

    if (m_themeShade_attr)
    {
        delete m_themeShade_attr;
        m_themeShade_attr = NULL;
    }

}

void CT_Underline::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }



    if (m_has_color_attr)
    {
        m_color_attr->toXmlAttr("w:color", _outStream);
    }



    if (m_has_themeColor_attr)
    {
        m_themeColor_attr->toXmlAttr("w:themeColor", _outStream);
    }



    if (m_has_themeTint_attr)
    {
        m_themeTint_attr->toXmlAttr("w:themeTint", _outStream);
    }



    if (m_has_themeShade_attr)
    {
        m_themeShade_attr->toXmlAttr("w:themeShade", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_Underline& CT_Underline::default_instance()
{
    if (!CT_Underline::default_instance_)
    {
        CT_Underline::default_instance_ = new CT_Underline();
    }
    return *CT_Underline::default_instance_;
}

bool CT_Underline::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_Underline::set_val_attr(const ST_Underline& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ST_Underline(_val_attr);
}

const ST_Underline& CT_Underline::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ST_Underline::default_instance();
}

bool CT_Underline::has_color_attr() const
{
    return m_has_color_attr;
}

void CT_Underline::set_color_attr(const ST_HexColor& _color_attr)
{
    m_has_color_attr = true;
    m_color_attr = new ST_HexColor(_color_attr);
}

const ST_HexColor& CT_Underline::get_color_attr() const
{
    if (m_color_attr)
    {
        return *m_color_attr;
    }
    return ST_HexColor::default_instance();
}

bool CT_Underline::has_themeColor_attr() const
{
    return m_has_themeColor_attr;
}

void CT_Underline::set_themeColor_attr(const ST_ThemeColor& _themeColor_attr)
{
    m_has_themeColor_attr = true;
    m_themeColor_attr = new ST_ThemeColor(_themeColor_attr);
}

const ST_ThemeColor& CT_Underline::get_themeColor_attr() const
{
    if (m_themeColor_attr)
    {
        return *m_themeColor_attr;
    }
    return ST_ThemeColor::default_instance();
}

bool CT_Underline::has_themeTint_attr() const
{
    return m_has_themeTint_attr;
}

void CT_Underline::set_themeTint_attr(const ST_UcharHexNumber& _themeTint_attr)
{
    m_has_themeTint_attr = true;
    m_themeTint_attr = new ST_UcharHexNumber(_themeTint_attr);
}

const ST_UcharHexNumber& CT_Underline::get_themeTint_attr() const
{
    if (m_themeTint_attr)
    {
        return *m_themeTint_attr;
    }
    return ST_UcharHexNumber::default_instance();
}

bool CT_Underline::has_themeShade_attr() const
{
    return m_has_themeShade_attr;
}

void CT_Underline::set_themeShade_attr(const ST_UcharHexNumber& _themeShade_attr)
{
    m_has_themeShade_attr = true;
    m_themeShade_attr = new ST_UcharHexNumber(_themeShade_attr);
}

const ST_UcharHexNumber& CT_Underline::get_themeShade_attr() const
{
    if (m_themeShade_attr)
    {
        return *m_themeShade_attr;
    }
    return ST_UcharHexNumber::default_instance();
}

CT_Underline* CT_Underline::default_instance_ = NULL;

// CT_TextEffect
CT_TextEffect::CT_TextEffect()
    :m_has_val_attr(false),
     m_val_attr(NULL)
{
}
CT_TextEffect::~CT_TextEffect()
{
    clear();
}
void CT_TextEffect::clear()
{
    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }

}

void CT_TextEffect::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_val_attr);
    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_TextEffect& CT_TextEffect::default_instance()
{
    if (!CT_TextEffect::default_instance_)
    {
        CT_TextEffect::default_instance_ = new CT_TextEffect();
    }
    return *CT_TextEffect::default_instance_;
}

bool CT_TextEffect::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_TextEffect::set_val_attr(const ST_TextEffect& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ST_TextEffect(_val_attr);
}

const ST_TextEffect& CT_TextEffect::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ST_TextEffect::default_instance();
}

CT_TextEffect* CT_TextEffect::default_instance_ = NULL;

// CT_Border
CT_Border::CT_Border()
    :m_has_val_attr(false),
     m_val_attr(NULL),
     m_has_color_attr(false),
     m_color_attr(NULL),
     m_has_themeColor_attr(false),
     m_themeColor_attr(NULL),
     m_has_themeTint_attr(false),
     m_themeTint_attr(NULL),
     m_has_themeShade_attr(false),
     m_themeShade_attr(NULL),
     m_has_sz_attr(false),
     m_sz_attr(NULL),
     m_has_space_attr(false),
     m_space_attr(NULL),
     m_has_shadow_attr(false),
     m_shadow_attr(NULL),
     m_has_frame_attr(false),
     m_frame_attr(NULL)
{
}
CT_Border::~CT_Border()
{
    clear();
}
void CT_Border::clear()
{
    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }


    m_has_color_attr = false;

    if (m_color_attr)
    {
        delete m_color_attr;
        m_color_attr = NULL;
    }


    m_has_themeColor_attr = false;

    if (m_themeColor_attr)
    {
        delete m_themeColor_attr;
        m_themeColor_attr = NULL;
    }


    m_has_themeTint_attr = false;

    if (m_themeTint_attr)
    {
        delete m_themeTint_attr;
        m_themeTint_attr = NULL;
    }


    m_has_themeShade_attr = false;

    if (m_themeShade_attr)
    {
        delete m_themeShade_attr;
        m_themeShade_attr = NULL;
    }


    m_has_sz_attr = false;

    if (m_sz_attr)
    {
        delete m_sz_attr;
        m_sz_attr = NULL;
    }


    m_has_space_attr = false;

    if (m_space_attr)
    {
        delete m_space_attr;
        m_space_attr = NULL;
    }


    m_has_shadow_attr = false;

    if (m_shadow_attr)
    {
        delete m_shadow_attr;
        m_shadow_attr = NULL;
    }


    m_has_frame_attr = false;

    if (m_frame_attr)
    {
        delete m_frame_attr;
        m_frame_attr = NULL;
    }

}

void CT_Border::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_val_attr);
    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }



    if (m_has_color_attr)
    {
        m_color_attr->toXmlAttr("w:color", _outStream);
    }



    if (m_has_themeColor_attr)
    {
        m_themeColor_attr->toXmlAttr("w:themeColor", _outStream);
    }



    if (m_has_themeTint_attr)
    {
        m_themeTint_attr->toXmlAttr("w:themeTint", _outStream);
    }



    if (m_has_themeShade_attr)
    {
        m_themeShade_attr->toXmlAttr("w:themeShade", _outStream);
    }



    if (m_has_sz_attr)
    {
        m_sz_attr->toXmlAttr("w:sz", _outStream);
    }



    if (m_has_space_attr)
    {
        m_space_attr->toXmlAttr("w:space", _outStream);
    }



    if (m_has_shadow_attr)
    {
        m_shadow_attr->toXmlAttr("w:shadow", _outStream);
    }



    if (m_has_frame_attr)
    {
        m_frame_attr->toXmlAttr("w:frame", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_Border& CT_Border::default_instance()
{
    if (!CT_Border::default_instance_)
    {
        CT_Border::default_instance_ = new CT_Border();
    }
    return *CT_Border::default_instance_;
}

bool CT_Border::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_Border::set_val_attr(const ST_Border& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ST_Border(_val_attr);
}

const ST_Border& CT_Border::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ST_Border::default_instance();
}

bool CT_Border::has_color_attr() const
{
    return m_has_color_attr;
}

void CT_Border::set_color_attr(const ST_HexColor& _color_attr)
{
    m_has_color_attr = true;
    m_color_attr = new ST_HexColor(_color_attr);
}

const ST_HexColor& CT_Border::get_color_attr() const
{
    if (m_color_attr)
    {
        return *m_color_attr;
    }
    return ST_HexColor::default_instance();
}

bool CT_Border::has_themeColor_attr() const
{
    return m_has_themeColor_attr;
}

void CT_Border::set_themeColor_attr(const ST_ThemeColor& _themeColor_attr)
{
    m_has_themeColor_attr = true;
    m_themeColor_attr = new ST_ThemeColor(_themeColor_attr);
}

const ST_ThemeColor& CT_Border::get_themeColor_attr() const
{
    if (m_themeColor_attr)
    {
        return *m_themeColor_attr;
    }
    return ST_ThemeColor::default_instance();
}

bool CT_Border::has_themeTint_attr() const
{
    return m_has_themeTint_attr;
}

void CT_Border::set_themeTint_attr(const ST_UcharHexNumber& _themeTint_attr)
{
    m_has_themeTint_attr = true;
    m_themeTint_attr = new ST_UcharHexNumber(_themeTint_attr);
}

const ST_UcharHexNumber& CT_Border::get_themeTint_attr() const
{
    if (m_themeTint_attr)
    {
        return *m_themeTint_attr;
    }
    return ST_UcharHexNumber::default_instance();
}

bool CT_Border::has_themeShade_attr() const
{
    return m_has_themeShade_attr;
}

void CT_Border::set_themeShade_attr(const ST_UcharHexNumber& _themeShade_attr)
{
    m_has_themeShade_attr = true;
    m_themeShade_attr = new ST_UcharHexNumber(_themeShade_attr);
}

const ST_UcharHexNumber& CT_Border::get_themeShade_attr() const
{
    if (m_themeShade_attr)
    {
        return *m_themeShade_attr;
    }
    return ST_UcharHexNumber::default_instance();
}

bool CT_Border::has_sz_attr() const
{
    return m_has_sz_attr;
}

void CT_Border::set_sz_attr(const ST_EighthPointMeasure& _sz_attr)
{
    m_has_sz_attr = true;
    m_sz_attr = new ST_EighthPointMeasure(_sz_attr);
}

const ST_EighthPointMeasure& CT_Border::get_sz_attr() const
{
    if (m_sz_attr)
    {
        return *m_sz_attr;
    }
    return ST_EighthPointMeasure::default_instance();
}

bool CT_Border::has_space_attr() const
{
    return m_has_space_attr;
}

void CT_Border::set_space_attr(const ST_PointMeasure& _space_attr)
{
    m_has_space_attr = true;
    m_space_attr = new ST_PointMeasure(_space_attr);
}

const ST_PointMeasure& CT_Border::get_space_attr() const
{
    if (m_space_attr)
    {
        return *m_space_attr;
    }
    return ST_PointMeasure::default_instance();
}

bool CT_Border::has_shadow_attr() const
{
    return m_has_shadow_attr;
}

void CT_Border::set_shadow_attr(const ns_s::ST_OnOff& _shadow_attr)
{
    m_has_shadow_attr = true;
    m_shadow_attr = new ns_s::ST_OnOff(_shadow_attr);
}

const ns_s::ST_OnOff& CT_Border::get_shadow_attr() const
{
    if (m_shadow_attr)
    {
        return *m_shadow_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

bool CT_Border::has_frame_attr() const
{
    return m_has_frame_attr;
}

void CT_Border::set_frame_attr(const ns_s::ST_OnOff& _frame_attr)
{
    m_has_frame_attr = true;
    m_frame_attr = new ns_s::ST_OnOff(_frame_attr);
}

const ns_s::ST_OnOff& CT_Border::get_frame_attr() const
{
    if (m_frame_attr)
    {
        return *m_frame_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

CT_Border* CT_Border::default_instance_ = NULL;

// CT_Shd
CT_Shd::CT_Shd()
    :m_has_val_attr(false),
     m_val_attr(NULL),
     m_has_color_attr(false),
     m_color_attr(NULL),
     m_has_themeColor_attr(false),
     m_themeColor_attr(NULL),
     m_has_themeTint_attr(false),
     m_themeTint_attr(NULL),
     m_has_themeShade_attr(false),
     m_themeShade_attr(NULL),
     m_has_fill_attr(false),
     m_fill_attr(NULL),
     m_has_themeFill_attr(false),
     m_themeFill_attr(NULL),
     m_has_themeFillTint_attr(false),
     m_themeFillTint_attr(NULL),
     m_has_themeFillShade_attr(false),
     m_themeFillShade_attr(NULL)
{
}
CT_Shd::~CT_Shd()
{
    clear();
}
void CT_Shd::clear()
{
    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }


    m_has_color_attr = false;

    if (m_color_attr)
    {
        delete m_color_attr;
        m_color_attr = NULL;
    }


    m_has_themeColor_attr = false;

    if (m_themeColor_attr)
    {
        delete m_themeColor_attr;
        m_themeColor_attr = NULL;
    }


    m_has_themeTint_attr = false;

    if (m_themeTint_attr)
    {
        delete m_themeTint_attr;
        m_themeTint_attr = NULL;
    }


    m_has_themeShade_attr = false;

    if (m_themeShade_attr)
    {
        delete m_themeShade_attr;
        m_themeShade_attr = NULL;
    }


    m_has_fill_attr = false;

    if (m_fill_attr)
    {
        delete m_fill_attr;
        m_fill_attr = NULL;
    }


    m_has_themeFill_attr = false;

    if (m_themeFill_attr)
    {
        delete m_themeFill_attr;
        m_themeFill_attr = NULL;
    }


    m_has_themeFillTint_attr = false;

    if (m_themeFillTint_attr)
    {
        delete m_themeFillTint_attr;
        m_themeFillTint_attr = NULL;
    }


    m_has_themeFillShade_attr = false;

    if (m_themeFillShade_attr)
    {
        delete m_themeFillShade_attr;
        m_themeFillShade_attr = NULL;
    }

}

void CT_Shd::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_val_attr);
    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }



    if (m_has_color_attr)
    {
        m_color_attr->toXmlAttr("w:color", _outStream);
    }



    if (m_has_themeColor_attr)
    {
        m_themeColor_attr->toXmlAttr("w:themeColor", _outStream);
    }



    if (m_has_themeTint_attr)
    {
        m_themeTint_attr->toXmlAttr("w:themeTint", _outStream);
    }



    if (m_has_themeShade_attr)
    {
        m_themeShade_attr->toXmlAttr("w:themeShade", _outStream);
    }



    if (m_has_fill_attr)
    {
        m_fill_attr->toXmlAttr("w:fill", _outStream);
    }



    if (m_has_themeFill_attr)
    {
        m_themeFill_attr->toXmlAttr("w:themeFill", _outStream);
    }



    if (m_has_themeFillTint_attr)
    {
        m_themeFillTint_attr->toXmlAttr("w:themeFillTint", _outStream);
    }



    if (m_has_themeFillShade_attr)
    {
        m_themeFillShade_attr->toXmlAttr("w:themeFillShade", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_Shd& CT_Shd::default_instance()
{
    if (!CT_Shd::default_instance_)
    {
        CT_Shd::default_instance_ = new CT_Shd();
    }
    return *CT_Shd::default_instance_;
}

bool CT_Shd::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_Shd::set_val_attr(const ST_Shd& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ST_Shd(_val_attr);
}

const ST_Shd& CT_Shd::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ST_Shd::default_instance();
}

bool CT_Shd::has_color_attr() const
{
    return m_has_color_attr;
}

void CT_Shd::set_color_attr(const ST_HexColor& _color_attr)
{
    m_has_color_attr = true;
    m_color_attr = new ST_HexColor(_color_attr);
}

const ST_HexColor& CT_Shd::get_color_attr() const
{
    if (m_color_attr)
    {
        return *m_color_attr;
    }
    return ST_HexColor::default_instance();
}

bool CT_Shd::has_themeColor_attr() const
{
    return m_has_themeColor_attr;
}

void CT_Shd::set_themeColor_attr(const ST_ThemeColor& _themeColor_attr)
{
    m_has_themeColor_attr = true;
    m_themeColor_attr = new ST_ThemeColor(_themeColor_attr);
}

const ST_ThemeColor& CT_Shd::get_themeColor_attr() const
{
    if (m_themeColor_attr)
    {
        return *m_themeColor_attr;
    }
    return ST_ThemeColor::default_instance();
}

bool CT_Shd::has_themeTint_attr() const
{
    return m_has_themeTint_attr;
}

void CT_Shd::set_themeTint_attr(const ST_UcharHexNumber& _themeTint_attr)
{
    m_has_themeTint_attr = true;
    m_themeTint_attr = new ST_UcharHexNumber(_themeTint_attr);
}

const ST_UcharHexNumber& CT_Shd::get_themeTint_attr() const
{
    if (m_themeTint_attr)
    {
        return *m_themeTint_attr;
    }
    return ST_UcharHexNumber::default_instance();
}

bool CT_Shd::has_themeShade_attr() const
{
    return m_has_themeShade_attr;
}

void CT_Shd::set_themeShade_attr(const ST_UcharHexNumber& _themeShade_attr)
{
    m_has_themeShade_attr = true;
    m_themeShade_attr = new ST_UcharHexNumber(_themeShade_attr);
}

const ST_UcharHexNumber& CT_Shd::get_themeShade_attr() const
{
    if (m_themeShade_attr)
    {
        return *m_themeShade_attr;
    }
    return ST_UcharHexNumber::default_instance();
}

bool CT_Shd::has_fill_attr() const
{
    return m_has_fill_attr;
}

void CT_Shd::set_fill_attr(const ST_HexColor& _fill_attr)
{
    m_has_fill_attr = true;
    m_fill_attr = new ST_HexColor(_fill_attr);
}

const ST_HexColor& CT_Shd::get_fill_attr() const
{
    if (m_fill_attr)
    {
        return *m_fill_attr;
    }
    return ST_HexColor::default_instance();
}

bool CT_Shd::has_themeFill_attr() const
{
    return m_has_themeFill_attr;
}

void CT_Shd::set_themeFill_attr(const ST_ThemeColor& _themeFill_attr)
{
    m_has_themeFill_attr = true;
    m_themeFill_attr = new ST_ThemeColor(_themeFill_attr);
}

const ST_ThemeColor& CT_Shd::get_themeFill_attr() const
{
    if (m_themeFill_attr)
    {
        return *m_themeFill_attr;
    }
    return ST_ThemeColor::default_instance();
}

bool CT_Shd::has_themeFillTint_attr() const
{
    return m_has_themeFillTint_attr;
}

void CT_Shd::set_themeFillTint_attr(const ST_UcharHexNumber& _themeFillTint_attr)
{
    m_has_themeFillTint_attr = true;
    m_themeFillTint_attr = new ST_UcharHexNumber(_themeFillTint_attr);
}

const ST_UcharHexNumber& CT_Shd::get_themeFillTint_attr() const
{
    if (m_themeFillTint_attr)
    {
        return *m_themeFillTint_attr;
    }
    return ST_UcharHexNumber::default_instance();
}

bool CT_Shd::has_themeFillShade_attr() const
{
    return m_has_themeFillShade_attr;
}

void CT_Shd::set_themeFillShade_attr(const ST_UcharHexNumber& _themeFillShade_attr)
{
    m_has_themeFillShade_attr = true;
    m_themeFillShade_attr = new ST_UcharHexNumber(_themeFillShade_attr);
}

const ST_UcharHexNumber& CT_Shd::get_themeFillShade_attr() const
{
    if (m_themeFillShade_attr)
    {
        return *m_themeFillShade_attr;
    }
    return ST_UcharHexNumber::default_instance();
}

CT_Shd* CT_Shd::default_instance_ = NULL;

// CT_VerticalAlignRun
CT_VerticalAlignRun::CT_VerticalAlignRun()
    :m_has_val_attr(false),
     m_val_attr(NULL)
{
}
CT_VerticalAlignRun::~CT_VerticalAlignRun()
{
    clear();
}
void CT_VerticalAlignRun::clear()
{
    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }

}

void CT_VerticalAlignRun::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_val_attr);
    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_VerticalAlignRun& CT_VerticalAlignRun::default_instance()
{
    if (!CT_VerticalAlignRun::default_instance_)
    {
        CT_VerticalAlignRun::default_instance_ = new CT_VerticalAlignRun();
    }
    return *CT_VerticalAlignRun::default_instance_;
}

bool CT_VerticalAlignRun::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_VerticalAlignRun::set_val_attr(const ns_s::ST_VerticalAlignRun& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ns_s::ST_VerticalAlignRun(_val_attr);
}

const ns_s::ST_VerticalAlignRun& CT_VerticalAlignRun::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ns_s::ST_VerticalAlignRun::default_instance();
}

CT_VerticalAlignRun* CT_VerticalAlignRun::default_instance_ = NULL;

// CT_FitText
CT_FitText::CT_FitText()
    :m_has_val_attr(false),
     m_val_attr(NULL),
     m_has_id_attr(false),
     m_id_attr(NULL)
{
}
CT_FitText::~CT_FitText()
{
    clear();
}
void CT_FitText::clear()
{
    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }


    m_has_id_attr = false;

    if (m_id_attr)
    {
        delete m_id_attr;
        m_id_attr = NULL;
    }

}

void CT_FitText::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_val_attr);
    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }



    if (m_has_id_attr)
    {
        m_id_attr->toXmlAttr("w:id", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_FitText& CT_FitText::default_instance()
{
    if (!CT_FitText::default_instance_)
    {
        CT_FitText::default_instance_ = new CT_FitText();
    }
    return *CT_FitText::default_instance_;
}

bool CT_FitText::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_FitText::set_val_attr(const ns_s::ST_TwipsMeasure& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ns_s::ST_TwipsMeasure(_val_attr);
}

const ns_s::ST_TwipsMeasure& CT_FitText::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ns_s::ST_TwipsMeasure::default_instance();
}

bool CT_FitText::has_id_attr() const
{
    return m_has_id_attr;
}

void CT_FitText::set_id_attr(const ST_DecimalNumber& _id_attr)
{
    m_has_id_attr = true;
    m_id_attr = new ST_DecimalNumber(_id_attr);
}

const ST_DecimalNumber& CT_FitText::get_id_attr() const
{
    if (m_id_attr)
    {
        return *m_id_attr;
    }
    return ST_DecimalNumber::default_instance();
}

CT_FitText* CT_FitText::default_instance_ = NULL;

// CT_Em
CT_Em::CT_Em()
    :m_has_val_attr(false),
     m_val_attr(NULL)
{
}
CT_Em::~CT_Em()
{
    clear();
}
void CT_Em::clear()
{
    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }

}

void CT_Em::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_val_attr);
    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_Em& CT_Em::default_instance()
{
    if (!CT_Em::default_instance_)
    {
        CT_Em::default_instance_ = new CT_Em();
    }
    return *CT_Em::default_instance_;
}

bool CT_Em::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_Em::set_val_attr(const ST_Em& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ST_Em(_val_attr);
}

const ST_Em& CT_Em::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ST_Em::default_instance();
}

CT_Em* CT_Em::default_instance_ = NULL;

// CT_Language
CT_Language::CT_Language()
    :m_has_val_attr(false),
     m_val_attr(NULL),
     m_has_eastAsia_attr(false),
     m_eastAsia_attr(NULL),
     m_has_bidi_attr(false),
     m_bidi_attr(NULL)
{
}
CT_Language::~CT_Language()
{
    clear();
}
void CT_Language::clear()
{
    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }


    m_has_eastAsia_attr = false;

    if (m_eastAsia_attr)
    {
        delete m_eastAsia_attr;
        m_eastAsia_attr = NULL;
    }


    m_has_bidi_attr = false;

    if (m_bidi_attr)
    {
        delete m_bidi_attr;
        m_bidi_attr = NULL;
    }

}

void CT_Language::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }



    if (m_has_eastAsia_attr)
    {
        m_eastAsia_attr->toXmlAttr("w:eastAsia", _outStream);
    }



    if (m_has_bidi_attr)
    {
        m_bidi_attr->toXmlAttr("w:bidi", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_Language& CT_Language::default_instance()
{
    if (!CT_Language::default_instance_)
    {
        CT_Language::default_instance_ = new CT_Language();
    }
    return *CT_Language::default_instance_;
}

bool CT_Language::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_Language::set_val_attr(const ns_s::ST_Lang& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ns_s::ST_Lang(_val_attr);
}

const ns_s::ST_Lang& CT_Language::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ns_s::ST_Lang::default_instance();
}

bool CT_Language::has_eastAsia_attr() const
{
    return m_has_eastAsia_attr;
}

void CT_Language::set_eastAsia_attr(const ns_s::ST_Lang& _eastAsia_attr)
{
    m_has_eastAsia_attr = true;
    m_eastAsia_attr = new ns_s::ST_Lang(_eastAsia_attr);
}

const ns_s::ST_Lang& CT_Language::get_eastAsia_attr() const
{
    if (m_eastAsia_attr)
    {
        return *m_eastAsia_attr;
    }
    return ns_s::ST_Lang::default_instance();
}

bool CT_Language::has_bidi_attr() const
{
    return m_has_bidi_attr;
}

void CT_Language::set_bidi_attr(const ns_s::ST_Lang& _bidi_attr)
{
    m_has_bidi_attr = true;
    m_bidi_attr = new ns_s::ST_Lang(_bidi_attr);
}

const ns_s::ST_Lang& CT_Language::get_bidi_attr() const
{
    if (m_bidi_attr)
    {
        return *m_bidi_attr;
    }
    return ns_s::ST_Lang::default_instance();
}

CT_Language* CT_Language::default_instance_ = NULL;

// CT_EastAsianLayout
CT_EastAsianLayout::CT_EastAsianLayout()
    :m_has_id_attr(false),
     m_id_attr(NULL),
     m_has_combine_attr(false),
     m_combine_attr(NULL),
     m_has_combineBrackets_attr(false),
     m_combineBrackets_attr(NULL),
     m_has_vert_attr(false),
     m_vert_attr(NULL),
     m_has_vertCompress_attr(false),
     m_vertCompress_attr(NULL)
{
}
CT_EastAsianLayout::~CT_EastAsianLayout()
{
    clear();
}
void CT_EastAsianLayout::clear()
{
    m_has_id_attr = false;

    if (m_id_attr)
    {
        delete m_id_attr;
        m_id_attr = NULL;
    }


    m_has_combine_attr = false;

    if (m_combine_attr)
    {
        delete m_combine_attr;
        m_combine_attr = NULL;
    }


    m_has_combineBrackets_attr = false;

    if (m_combineBrackets_attr)
    {
        delete m_combineBrackets_attr;
        m_combineBrackets_attr = NULL;
    }


    m_has_vert_attr = false;

    if (m_vert_attr)
    {
        delete m_vert_attr;
        m_vert_attr = NULL;
    }


    m_has_vertCompress_attr = false;

    if (m_vertCompress_attr)
    {
        delete m_vertCompress_attr;
        m_vertCompress_attr = NULL;
    }

}

void CT_EastAsianLayout::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_id_attr)
    {
        m_id_attr->toXmlAttr("w:id", _outStream);
    }



    if (m_has_combine_attr)
    {
        m_combine_attr->toXmlAttr("w:combine", _outStream);
    }



    if (m_has_combineBrackets_attr)
    {
        m_combineBrackets_attr->toXmlAttr("w:combineBrackets", _outStream);
    }



    if (m_has_vert_attr)
    {
        m_vert_attr->toXmlAttr("w:vert", _outStream);
    }



    if (m_has_vertCompress_attr)
    {
        m_vertCompress_attr->toXmlAttr("w:vertCompress", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_EastAsianLayout& CT_EastAsianLayout::default_instance()
{
    if (!CT_EastAsianLayout::default_instance_)
    {
        CT_EastAsianLayout::default_instance_ = new CT_EastAsianLayout();
    }
    return *CT_EastAsianLayout::default_instance_;
}

bool CT_EastAsianLayout::has_id_attr() const
{
    return m_has_id_attr;
}

void CT_EastAsianLayout::set_id_attr(const ST_DecimalNumber& _id_attr)
{
    m_has_id_attr = true;
    m_id_attr = new ST_DecimalNumber(_id_attr);
}

const ST_DecimalNumber& CT_EastAsianLayout::get_id_attr() const
{
    if (m_id_attr)
    {
        return *m_id_attr;
    }
    return ST_DecimalNumber::default_instance();
}

bool CT_EastAsianLayout::has_combine_attr() const
{
    return m_has_combine_attr;
}

void CT_EastAsianLayout::set_combine_attr(const ns_s::ST_OnOff& _combine_attr)
{
    m_has_combine_attr = true;
    m_combine_attr = new ns_s::ST_OnOff(_combine_attr);
}

const ns_s::ST_OnOff& CT_EastAsianLayout::get_combine_attr() const
{
    if (m_combine_attr)
    {
        return *m_combine_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

bool CT_EastAsianLayout::has_combineBrackets_attr() const
{
    return m_has_combineBrackets_attr;
}

void CT_EastAsianLayout::set_combineBrackets_attr(const ST_CombineBrackets& _combineBrackets_attr)
{
    m_has_combineBrackets_attr = true;
    m_combineBrackets_attr = new ST_CombineBrackets(_combineBrackets_attr);
}

const ST_CombineBrackets& CT_EastAsianLayout::get_combineBrackets_attr() const
{
    if (m_combineBrackets_attr)
    {
        return *m_combineBrackets_attr;
    }
    return ST_CombineBrackets::default_instance();
}

bool CT_EastAsianLayout::has_vert_attr() const
{
    return m_has_vert_attr;
}

void CT_EastAsianLayout::set_vert_attr(const ns_s::ST_OnOff& _vert_attr)
{
    m_has_vert_attr = true;
    m_vert_attr = new ns_s::ST_OnOff(_vert_attr);
}

const ns_s::ST_OnOff& CT_EastAsianLayout::get_vert_attr() const
{
    if (m_vert_attr)
    {
        return *m_vert_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

bool CT_EastAsianLayout::has_vertCompress_attr() const
{
    return m_has_vertCompress_attr;
}

void CT_EastAsianLayout::set_vertCompress_attr(const ns_s::ST_OnOff& _vertCompress_attr)
{
    m_has_vertCompress_attr = true;
    m_vertCompress_attr = new ns_s::ST_OnOff(_vertCompress_attr);
}

const ns_s::ST_OnOff& CT_EastAsianLayout::get_vertCompress_attr() const
{
    if (m_vertCompress_attr)
    {
        return *m_vertCompress_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

CT_EastAsianLayout* CT_EastAsianLayout::default_instance_ = NULL;

// CT_FramePr
CT_FramePr::CT_FramePr()
    :m_has_dropCap_attr(false),
     m_dropCap_attr(NULL),
     m_has_lines_attr(false),
     m_lines_attr(NULL),
     m_has_w_attr(false),
     m_w_attr(NULL),
     m_has_h_attr(false),
     m_h_attr(NULL),
     m_has_vSpace_attr(false),
     m_vSpace_attr(NULL),
     m_has_hSpace_attr(false),
     m_hSpace_attr(NULL),
     m_has_wrap_attr(false),
     m_wrap_attr(NULL),
     m_has_hAnchor_attr(false),
     m_hAnchor_attr(NULL),
     m_has_vAnchor_attr(false),
     m_vAnchor_attr(NULL),
     m_has_x_attr(false),
     m_x_attr(NULL),
     m_has_xAlign_attr(false),
     m_xAlign_attr(NULL),
     m_has_y_attr(false),
     m_y_attr(NULL),
     m_has_yAlign_attr(false),
     m_yAlign_attr(NULL),
     m_has_hRule_attr(false),
     m_hRule_attr(NULL),
     m_has_anchorLock_attr(false),
     m_anchorLock_attr(NULL)
{
}
CT_FramePr::~CT_FramePr()
{
    clear();
}
void CT_FramePr::clear()
{
    m_has_dropCap_attr = false;

    if (m_dropCap_attr)
    {
        delete m_dropCap_attr;
        m_dropCap_attr = NULL;
    }


    m_has_lines_attr = false;

    if (m_lines_attr)
    {
        delete m_lines_attr;
        m_lines_attr = NULL;
    }


    m_has_w_attr = false;

    if (m_w_attr)
    {
        delete m_w_attr;
        m_w_attr = NULL;
    }


    m_has_h_attr = false;

    if (m_h_attr)
    {
        delete m_h_attr;
        m_h_attr = NULL;
    }


    m_has_vSpace_attr = false;

    if (m_vSpace_attr)
    {
        delete m_vSpace_attr;
        m_vSpace_attr = NULL;
    }


    m_has_hSpace_attr = false;

    if (m_hSpace_attr)
    {
        delete m_hSpace_attr;
        m_hSpace_attr = NULL;
    }


    m_has_wrap_attr = false;

    if (m_wrap_attr)
    {
        delete m_wrap_attr;
        m_wrap_attr = NULL;
    }


    m_has_hAnchor_attr = false;

    if (m_hAnchor_attr)
    {
        delete m_hAnchor_attr;
        m_hAnchor_attr = NULL;
    }


    m_has_vAnchor_attr = false;

    if (m_vAnchor_attr)
    {
        delete m_vAnchor_attr;
        m_vAnchor_attr = NULL;
    }


    m_has_x_attr = false;

    if (m_x_attr)
    {
        delete m_x_attr;
        m_x_attr = NULL;
    }


    m_has_xAlign_attr = false;

    if (m_xAlign_attr)
    {
        delete m_xAlign_attr;
        m_xAlign_attr = NULL;
    }


    m_has_y_attr = false;

    if (m_y_attr)
    {
        delete m_y_attr;
        m_y_attr = NULL;
    }


    m_has_yAlign_attr = false;

    if (m_yAlign_attr)
    {
        delete m_yAlign_attr;
        m_yAlign_attr = NULL;
    }


    m_has_hRule_attr = false;

    if (m_hRule_attr)
    {
        delete m_hRule_attr;
        m_hRule_attr = NULL;
    }


    m_has_anchorLock_attr = false;

    if (m_anchorLock_attr)
    {
        delete m_anchorLock_attr;
        m_anchorLock_attr = NULL;
    }

}

void CT_FramePr::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_dropCap_attr)
    {
        m_dropCap_attr->toXmlAttr("w:dropCap", _outStream);
    }



    if (m_has_lines_attr)
    {
        m_lines_attr->toXmlAttr("w:lines", _outStream);
    }



    if (m_has_w_attr)
    {
        m_w_attr->toXmlAttr("w:w", _outStream);
    }



    if (m_has_h_attr)
    {
        m_h_attr->toXmlAttr("w:h", _outStream);
    }



    if (m_has_vSpace_attr)
    {
        m_vSpace_attr->toXmlAttr("w:vSpace", _outStream);
    }



    if (m_has_hSpace_attr)
    {
        m_hSpace_attr->toXmlAttr("w:hSpace", _outStream);
    }



    if (m_has_wrap_attr)
    {
        m_wrap_attr->toXmlAttr("w:wrap", _outStream);
    }



    if (m_has_hAnchor_attr)
    {
        m_hAnchor_attr->toXmlAttr("w:hAnchor", _outStream);
    }



    if (m_has_vAnchor_attr)
    {
        m_vAnchor_attr->toXmlAttr("w:vAnchor", _outStream);
    }



    if (m_has_x_attr)
    {
        m_x_attr->toXmlAttr("w:x", _outStream);
    }



    if (m_has_xAlign_attr)
    {
        m_xAlign_attr->toXmlAttr("w:xAlign", _outStream);
    }



    if (m_has_y_attr)
    {
        m_y_attr->toXmlAttr("w:y", _outStream);
    }



    if (m_has_yAlign_attr)
    {
        m_yAlign_attr->toXmlAttr("w:yAlign", _outStream);
    }



    if (m_has_hRule_attr)
    {
        m_hRule_attr->toXmlAttr("w:hRule", _outStream);
    }



    if (m_has_anchorLock_attr)
    {
        m_anchorLock_attr->toXmlAttr("w:anchorLock", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_FramePr& CT_FramePr::default_instance()
{
    if (!CT_FramePr::default_instance_)
    {
        CT_FramePr::default_instance_ = new CT_FramePr();
    }
    return *CT_FramePr::default_instance_;
}

bool CT_FramePr::has_dropCap_attr() const
{
    return m_has_dropCap_attr;
}

void CT_FramePr::set_dropCap_attr(const ST_DropCap& _dropCap_attr)
{
    m_has_dropCap_attr = true;
    m_dropCap_attr = new ST_DropCap(_dropCap_attr);
}

const ST_DropCap& CT_FramePr::get_dropCap_attr() const
{
    if (m_dropCap_attr)
    {
        return *m_dropCap_attr;
    }
    return ST_DropCap::default_instance();
}

bool CT_FramePr::has_lines_attr() const
{
    return m_has_lines_attr;
}

void CT_FramePr::set_lines_attr(const ST_DecimalNumber& _lines_attr)
{
    m_has_lines_attr = true;
    m_lines_attr = new ST_DecimalNumber(_lines_attr);
}

const ST_DecimalNumber& CT_FramePr::get_lines_attr() const
{
    if (m_lines_attr)
    {
        return *m_lines_attr;
    }
    return ST_DecimalNumber::default_instance();
}

bool CT_FramePr::has_w_attr() const
{
    return m_has_w_attr;
}

void CT_FramePr::set_w_attr(const ns_s::ST_TwipsMeasure& _w_attr)
{
    m_has_w_attr = true;
    m_w_attr = new ns_s::ST_TwipsMeasure(_w_attr);
}

const ns_s::ST_TwipsMeasure& CT_FramePr::get_w_attr() const
{
    if (m_w_attr)
    {
        return *m_w_attr;
    }
    return ns_s::ST_TwipsMeasure::default_instance();
}

bool CT_FramePr::has_h_attr() const
{
    return m_has_h_attr;
}

void CT_FramePr::set_h_attr(const ns_s::ST_TwipsMeasure& _h_attr)
{
    m_has_h_attr = true;
    m_h_attr = new ns_s::ST_TwipsMeasure(_h_attr);
}

const ns_s::ST_TwipsMeasure& CT_FramePr::get_h_attr() const
{
    if (m_h_attr)
    {
        return *m_h_attr;
    }
    return ns_s::ST_TwipsMeasure::default_instance();
}

bool CT_FramePr::has_vSpace_attr() const
{
    return m_has_vSpace_attr;
}

void CT_FramePr::set_vSpace_attr(const ns_s::ST_TwipsMeasure& _vSpace_attr)
{
    m_has_vSpace_attr = true;
    m_vSpace_attr = new ns_s::ST_TwipsMeasure(_vSpace_attr);
}

const ns_s::ST_TwipsMeasure& CT_FramePr::get_vSpace_attr() const
{
    if (m_vSpace_attr)
    {
        return *m_vSpace_attr;
    }
    return ns_s::ST_TwipsMeasure::default_instance();
}

bool CT_FramePr::has_hSpace_attr() const
{
    return m_has_hSpace_attr;
}

void CT_FramePr::set_hSpace_attr(const ns_s::ST_TwipsMeasure& _hSpace_attr)
{
    m_has_hSpace_attr = true;
    m_hSpace_attr = new ns_s::ST_TwipsMeasure(_hSpace_attr);
}

const ns_s::ST_TwipsMeasure& CT_FramePr::get_hSpace_attr() const
{
    if (m_hSpace_attr)
    {
        return *m_hSpace_attr;
    }
    return ns_s::ST_TwipsMeasure::default_instance();
}

bool CT_FramePr::has_wrap_attr() const
{
    return m_has_wrap_attr;
}

void CT_FramePr::set_wrap_attr(const ST_Wrap& _wrap_attr)
{
    m_has_wrap_attr = true;
    m_wrap_attr = new ST_Wrap(_wrap_attr);
}

const ST_Wrap& CT_FramePr::get_wrap_attr() const
{
    if (m_wrap_attr)
    {
        return *m_wrap_attr;
    }
    return ST_Wrap::default_instance();
}

bool CT_FramePr::has_hAnchor_attr() const
{
    return m_has_hAnchor_attr;
}

void CT_FramePr::set_hAnchor_attr(const ST_HAnchor& _hAnchor_attr)
{
    m_has_hAnchor_attr = true;
    m_hAnchor_attr = new ST_HAnchor(_hAnchor_attr);
}

const ST_HAnchor& CT_FramePr::get_hAnchor_attr() const
{
    if (m_hAnchor_attr)
    {
        return *m_hAnchor_attr;
    }
    return ST_HAnchor::default_instance();
}

bool CT_FramePr::has_vAnchor_attr() const
{
    return m_has_vAnchor_attr;
}

void CT_FramePr::set_vAnchor_attr(const ST_VAnchor& _vAnchor_attr)
{
    m_has_vAnchor_attr = true;
    m_vAnchor_attr = new ST_VAnchor(_vAnchor_attr);
}

const ST_VAnchor& CT_FramePr::get_vAnchor_attr() const
{
    if (m_vAnchor_attr)
    {
        return *m_vAnchor_attr;
    }
    return ST_VAnchor::default_instance();
}

bool CT_FramePr::has_x_attr() const
{
    return m_has_x_attr;
}

void CT_FramePr::set_x_attr(const ST_SignedTwipsMeasure& _x_attr)
{
    m_has_x_attr = true;
    m_x_attr = new ST_SignedTwipsMeasure(_x_attr);
}

const ST_SignedTwipsMeasure& CT_FramePr::get_x_attr() const
{
    if (m_x_attr)
    {
        return *m_x_attr;
    }
    return ST_SignedTwipsMeasure::default_instance();
}

bool CT_FramePr::has_xAlign_attr() const
{
    return m_has_xAlign_attr;
}

void CT_FramePr::set_xAlign_attr(const ns_s::ST_XAlign& _xAlign_attr)
{
    m_has_xAlign_attr = true;
    m_xAlign_attr = new ns_s::ST_XAlign(_xAlign_attr);
}

const ns_s::ST_XAlign& CT_FramePr::get_xAlign_attr() const
{
    if (m_xAlign_attr)
    {
        return *m_xAlign_attr;
    }
    return ns_s::ST_XAlign::default_instance();
}

bool CT_FramePr::has_y_attr() const
{
    return m_has_y_attr;
}

void CT_FramePr::set_y_attr(const ST_SignedTwipsMeasure& _y_attr)
{
    m_has_y_attr = true;
    m_y_attr = new ST_SignedTwipsMeasure(_y_attr);
}

const ST_SignedTwipsMeasure& CT_FramePr::get_y_attr() const
{
    if (m_y_attr)
    {
        return *m_y_attr;
    }
    return ST_SignedTwipsMeasure::default_instance();
}

bool CT_FramePr::has_yAlign_attr() const
{
    return m_has_yAlign_attr;
}

void CT_FramePr::set_yAlign_attr(const ns_s::ST_YAlign& _yAlign_attr)
{
    m_has_yAlign_attr = true;
    m_yAlign_attr = new ns_s::ST_YAlign(_yAlign_attr);
}

const ns_s::ST_YAlign& CT_FramePr::get_yAlign_attr() const
{
    if (m_yAlign_attr)
    {
        return *m_yAlign_attr;
    }
    return ns_s::ST_YAlign::default_instance();
}

bool CT_FramePr::has_hRule_attr() const
{
    return m_has_hRule_attr;
}

void CT_FramePr::set_hRule_attr(const ST_HeightRule& _hRule_attr)
{
    m_has_hRule_attr = true;
    m_hRule_attr = new ST_HeightRule(_hRule_attr);
}

const ST_HeightRule& CT_FramePr::get_hRule_attr() const
{
    if (m_hRule_attr)
    {
        return *m_hRule_attr;
    }
    return ST_HeightRule::default_instance();
}

bool CT_FramePr::has_anchorLock_attr() const
{
    return m_has_anchorLock_attr;
}

void CT_FramePr::set_anchorLock_attr(const ns_s::ST_OnOff& _anchorLock_attr)
{
    m_has_anchorLock_attr = true;
    m_anchorLock_attr = new ns_s::ST_OnOff(_anchorLock_attr);
}

const ns_s::ST_OnOff& CT_FramePr::get_anchorLock_attr() const
{
    if (m_anchorLock_attr)
    {
        return *m_anchorLock_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

CT_FramePr* CT_FramePr::default_instance_ = NULL;

// CT_TabStop
CT_TabStop::CT_TabStop()
    :m_has_val_attr(false),
     m_val_attr(NULL),
     m_has_leader_attr(false),
     m_leader_attr(NULL),
     m_has_pos_attr(false),
     m_pos_attr(NULL)
{
}
CT_TabStop::~CT_TabStop()
{
    clear();
}
void CT_TabStop::clear()
{
    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }


    m_has_leader_attr = false;

    if (m_leader_attr)
    {
        delete m_leader_attr;
        m_leader_attr = NULL;
    }


    m_has_pos_attr = false;

    if (m_pos_attr)
    {
        delete m_pos_attr;
        m_pos_attr = NULL;
    }

}

void CT_TabStop::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_val_attr);
    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }



    if (m_has_leader_attr)
    {
        m_leader_attr->toXmlAttr("w:leader", _outStream);
    }


    assert(m_has_pos_attr);
    if (m_has_pos_attr)
    {
        m_pos_attr->toXmlAttr("w:pos", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_TabStop& CT_TabStop::default_instance()
{
    if (!CT_TabStop::default_instance_)
    {
        CT_TabStop::default_instance_ = new CT_TabStop();
    }
    return *CT_TabStop::default_instance_;
}

bool CT_TabStop::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_TabStop::set_val_attr(const ST_TabJc& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ST_TabJc(_val_attr);
}

const ST_TabJc& CT_TabStop::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ST_TabJc::default_instance();
}

bool CT_TabStop::has_leader_attr() const
{
    return m_has_leader_attr;
}

void CT_TabStop::set_leader_attr(const ST_TabTlc& _leader_attr)
{
    m_has_leader_attr = true;
    m_leader_attr = new ST_TabTlc(_leader_attr);
}

const ST_TabTlc& CT_TabStop::get_leader_attr() const
{
    if (m_leader_attr)
    {
        return *m_leader_attr;
    }
    return ST_TabTlc::default_instance();
}

bool CT_TabStop::has_pos_attr() const
{
    return m_has_pos_attr;
}

void CT_TabStop::set_pos_attr(const ST_SignedTwipsMeasure& _pos_attr)
{
    m_has_pos_attr = true;
    m_pos_attr = new ST_SignedTwipsMeasure(_pos_attr);
}

const ST_SignedTwipsMeasure& CT_TabStop::get_pos_attr() const
{
    if (m_pos_attr)
    {
        return *m_pos_attr;
    }
    return ST_SignedTwipsMeasure::default_instance();
}

CT_TabStop* CT_TabStop::default_instance_ = NULL;

// CT_Spacing
CT_Spacing::CT_Spacing()
    :m_has_before_attr(false),
     m_before_attr(NULL),
     m_has_beforeLines_attr(false),
     m_beforeLines_attr(NULL),
     m_has_beforeAutospacing_attr(false),
     m_beforeAutospacing_attr(NULL),
     m_has_after_attr(false),
     m_after_attr(NULL),
     m_has_afterLines_attr(false),
     m_afterLines_attr(NULL),
     m_has_afterAutospacing_attr(false),
     m_afterAutospacing_attr(NULL),
     m_has_line_attr(false),
     m_line_attr(NULL),
     m_has_lineRule_attr(false),
     m_lineRule_attr(NULL)
{
}
CT_Spacing::~CT_Spacing()
{
    clear();
}
void CT_Spacing::clear()
{
    m_has_before_attr = false;

    if (m_before_attr)
    {
        delete m_before_attr;
        m_before_attr = NULL;
    }


    m_has_beforeLines_attr = false;

    if (m_beforeLines_attr)
    {
        delete m_beforeLines_attr;
        m_beforeLines_attr = NULL;
    }


    m_has_beforeAutospacing_attr = false;

    if (m_beforeAutospacing_attr)
    {
        delete m_beforeAutospacing_attr;
        m_beforeAutospacing_attr = NULL;
    }


    m_has_after_attr = false;

    if (m_after_attr)
    {
        delete m_after_attr;
        m_after_attr = NULL;
    }


    m_has_afterLines_attr = false;

    if (m_afterLines_attr)
    {
        delete m_afterLines_attr;
        m_afterLines_attr = NULL;
    }


    m_has_afterAutospacing_attr = false;

    if (m_afterAutospacing_attr)
    {
        delete m_afterAutospacing_attr;
        m_afterAutospacing_attr = NULL;
    }


    m_has_line_attr = false;

    if (m_line_attr)
    {
        delete m_line_attr;
        m_line_attr = NULL;
    }


    m_has_lineRule_attr = false;

    if (m_lineRule_attr)
    {
        delete m_lineRule_attr;
        m_lineRule_attr = NULL;
    }

}

void CT_Spacing::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_before_attr)
    {
        m_before_attr->toXmlAttr("w:before", _outStream);
    }



    if (m_has_beforeLines_attr)
    {
        m_beforeLines_attr->toXmlAttr("w:beforeLines", _outStream);
    }



    if (m_has_beforeAutospacing_attr)
    {
        m_beforeAutospacing_attr->toXmlAttr("w:beforeAutospacing", _outStream);
    }



    if (m_has_after_attr)
    {
        m_after_attr->toXmlAttr("w:after", _outStream);
    }



    if (m_has_afterLines_attr)
    {
        m_afterLines_attr->toXmlAttr("w:afterLines", _outStream);
    }



    if (m_has_afterAutospacing_attr)
    {
        m_afterAutospacing_attr->toXmlAttr("w:afterAutospacing", _outStream);
    }



    if (m_has_line_attr)
    {
        m_line_attr->toXmlAttr("w:line", _outStream);
    }



    if (m_has_lineRule_attr)
    {
        m_lineRule_attr->toXmlAttr("w:lineRule", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_Spacing& CT_Spacing::default_instance()
{
    if (!CT_Spacing::default_instance_)
    {
        CT_Spacing::default_instance_ = new CT_Spacing();
    }
    return *CT_Spacing::default_instance_;
}

bool CT_Spacing::has_before_attr() const
{
    return m_has_before_attr;
}

void CT_Spacing::set_before_attr(const ns_s::ST_TwipsMeasure& _before_attr)
{
    m_has_before_attr = true;
    m_before_attr = new ns_s::ST_TwipsMeasure(_before_attr);
}

const ns_s::ST_TwipsMeasure& CT_Spacing::get_before_attr() const
{
    if (m_before_attr)
    {
        return *m_before_attr;
    }
    return ns_s::ST_TwipsMeasure::default_instance();
}

bool CT_Spacing::has_beforeLines_attr() const
{
    return m_has_beforeLines_attr;
}

void CT_Spacing::set_beforeLines_attr(const ST_DecimalNumber& _beforeLines_attr)
{
    m_has_beforeLines_attr = true;
    m_beforeLines_attr = new ST_DecimalNumber(_beforeLines_attr);
}

const ST_DecimalNumber& CT_Spacing::get_beforeLines_attr() const
{
    if (m_beforeLines_attr)
    {
        return *m_beforeLines_attr;
    }
    return ST_DecimalNumber::default_instance();
}

bool CT_Spacing::has_beforeAutospacing_attr() const
{
    return m_has_beforeAutospacing_attr;
}

void CT_Spacing::set_beforeAutospacing_attr(const ns_s::ST_OnOff& _beforeAutospacing_attr)
{
    m_has_beforeAutospacing_attr = true;
    m_beforeAutospacing_attr = new ns_s::ST_OnOff(_beforeAutospacing_attr);
}

const ns_s::ST_OnOff& CT_Spacing::get_beforeAutospacing_attr() const
{
    if (m_beforeAutospacing_attr)
    {
        return *m_beforeAutospacing_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

bool CT_Spacing::has_after_attr() const
{
    return m_has_after_attr;
}

void CT_Spacing::set_after_attr(const ns_s::ST_TwipsMeasure& _after_attr)
{
    m_has_after_attr = true;
    m_after_attr = new ns_s::ST_TwipsMeasure(_after_attr);
}

const ns_s::ST_TwipsMeasure& CT_Spacing::get_after_attr() const
{
    if (m_after_attr)
    {
        return *m_after_attr;
    }
    return ns_s::ST_TwipsMeasure::default_instance();
}

bool CT_Spacing::has_afterLines_attr() const
{
    return m_has_afterLines_attr;
}

void CT_Spacing::set_afterLines_attr(const ST_DecimalNumber& _afterLines_attr)
{
    m_has_afterLines_attr = true;
    m_afterLines_attr = new ST_DecimalNumber(_afterLines_attr);
}

const ST_DecimalNumber& CT_Spacing::get_afterLines_attr() const
{
    if (m_afterLines_attr)
    {
        return *m_afterLines_attr;
    }
    return ST_DecimalNumber::default_instance();
}

bool CT_Spacing::has_afterAutospacing_attr() const
{
    return m_has_afterAutospacing_attr;
}

void CT_Spacing::set_afterAutospacing_attr(const ns_s::ST_OnOff& _afterAutospacing_attr)
{
    m_has_afterAutospacing_attr = true;
    m_afterAutospacing_attr = new ns_s::ST_OnOff(_afterAutospacing_attr);
}

const ns_s::ST_OnOff& CT_Spacing::get_afterAutospacing_attr() const
{
    if (m_afterAutospacing_attr)
    {
        return *m_afterAutospacing_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

bool CT_Spacing::has_line_attr() const
{
    return m_has_line_attr;
}

void CT_Spacing::set_line_attr(const ST_SignedTwipsMeasure& _line_attr)
{
    m_has_line_attr = true;
    m_line_attr = new ST_SignedTwipsMeasure(_line_attr);
}

const ST_SignedTwipsMeasure& CT_Spacing::get_line_attr() const
{
    if (m_line_attr)
    {
        return *m_line_attr;
    }
    return ST_SignedTwipsMeasure::default_instance();
}

bool CT_Spacing::has_lineRule_attr() const
{
    return m_has_lineRule_attr;
}

void CT_Spacing::set_lineRule_attr(const ST_LineSpacingRule& _lineRule_attr)
{
    m_has_lineRule_attr = true;
    m_lineRule_attr = new ST_LineSpacingRule(_lineRule_attr);
}

const ST_LineSpacingRule& CT_Spacing::get_lineRule_attr() const
{
    if (m_lineRule_attr)
    {
        return *m_lineRule_attr;
    }
    return ST_LineSpacingRule::default_instance();
}

CT_Spacing* CT_Spacing::default_instance_ = NULL;

// CT_Ind
CT_Ind::CT_Ind()
    :m_has_start_attr(false),
     m_start_attr(NULL),
     m_has_startChars_attr(false),
     m_startChars_attr(NULL),
     m_has_end_attr(false),
     m_end_attr(NULL),
     m_has_endChars_attr(false),
     m_endChars_attr(NULL),
     m_has_left_attr(false),
     m_left_attr(NULL),
     m_has_leftChars_attr(false),
     m_leftChars_attr(NULL),
     m_has_right_attr(false),
     m_right_attr(NULL),
     m_has_rightChars_attr(false),
     m_rightChars_attr(NULL),
     m_has_hanging_attr(false),
     m_hanging_attr(NULL),
     m_has_hangingChars_attr(false),
     m_hangingChars_attr(NULL),
     m_has_firstLine_attr(false),
     m_firstLine_attr(NULL),
     m_has_firstLineChars_attr(false),
     m_firstLineChars_attr(NULL)
{
}
CT_Ind::~CT_Ind()
{
    clear();
}
void CT_Ind::clear()
{
    m_has_start_attr = false;

    if (m_start_attr)
    {
        delete m_start_attr;
        m_start_attr = NULL;
    }


    m_has_startChars_attr = false;

    if (m_startChars_attr)
    {
        delete m_startChars_attr;
        m_startChars_attr = NULL;
    }


    m_has_end_attr = false;

    if (m_end_attr)
    {
        delete m_end_attr;
        m_end_attr = NULL;
    }


    m_has_endChars_attr = false;

    if (m_endChars_attr)
    {
        delete m_endChars_attr;
        m_endChars_attr = NULL;
    }


    m_has_left_attr = false;

    if (m_left_attr)
    {
        delete m_left_attr;
        m_left_attr = NULL;
    }


    m_has_leftChars_attr = false;

    if (m_leftChars_attr)
    {
        delete m_leftChars_attr;
        m_leftChars_attr = NULL;
    }


    m_has_right_attr = false;

    if (m_right_attr)
    {
        delete m_right_attr;
        m_right_attr = NULL;
    }


    m_has_rightChars_attr = false;

    if (m_rightChars_attr)
    {
        delete m_rightChars_attr;
        m_rightChars_attr = NULL;
    }


    m_has_hanging_attr = false;

    if (m_hanging_attr)
    {
        delete m_hanging_attr;
        m_hanging_attr = NULL;
    }


    m_has_hangingChars_attr = false;

    if (m_hangingChars_attr)
    {
        delete m_hangingChars_attr;
        m_hangingChars_attr = NULL;
    }


    m_has_firstLine_attr = false;

    if (m_firstLine_attr)
    {
        delete m_firstLine_attr;
        m_firstLine_attr = NULL;
    }


    m_has_firstLineChars_attr = false;

    if (m_firstLineChars_attr)
    {
        delete m_firstLineChars_attr;
        m_firstLineChars_attr = NULL;
    }

}

void CT_Ind::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_start_attr)
    {
        m_start_attr->toXmlAttr("w:start", _outStream);
    }



    if (m_has_startChars_attr)
    {
        m_startChars_attr->toXmlAttr("w:startChars", _outStream);
    }



    if (m_has_end_attr)
    {
        m_end_attr->toXmlAttr("w:end", _outStream);
    }



    if (m_has_endChars_attr)
    {
        m_endChars_attr->toXmlAttr("w:endChars", _outStream);
    }



    if (m_has_left_attr)
    {
        m_left_attr->toXmlAttr("w:left", _outStream);
    }



    if (m_has_leftChars_attr)
    {
        m_leftChars_attr->toXmlAttr("w:leftChars", _outStream);
    }



    if (m_has_right_attr)
    {
        m_right_attr->toXmlAttr("w:right", _outStream);
    }



    if (m_has_rightChars_attr)
    {
        m_rightChars_attr->toXmlAttr("w:rightChars", _outStream);
    }



    if (m_has_hanging_attr)
    {
        m_hanging_attr->toXmlAttr("w:hanging", _outStream);
    }



    if (m_has_hangingChars_attr)
    {
        m_hangingChars_attr->toXmlAttr("w:hangingChars", _outStream);
    }



    if (m_has_firstLine_attr)
    {
        m_firstLine_attr->toXmlAttr("w:firstLine", _outStream);
    }



    if (m_has_firstLineChars_attr)
    {
        m_firstLineChars_attr->toXmlAttr("w:firstLineChars", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_Ind& CT_Ind::default_instance()
{
    if (!CT_Ind::default_instance_)
    {
        CT_Ind::default_instance_ = new CT_Ind();
    }
    return *CT_Ind::default_instance_;
}

bool CT_Ind::has_start_attr() const
{
    return m_has_start_attr;
}

void CT_Ind::set_start_attr(const ST_SignedTwipsMeasure& _start_attr)
{
    m_has_start_attr = true;
    m_start_attr = new ST_SignedTwipsMeasure(_start_attr);
}

const ST_SignedTwipsMeasure& CT_Ind::get_start_attr() const
{
    if (m_start_attr)
    {
        return *m_start_attr;
    }
    return ST_SignedTwipsMeasure::default_instance();
}

bool CT_Ind::has_startChars_attr() const
{
    return m_has_startChars_attr;
}

void CT_Ind::set_startChars_attr(const ST_DecimalNumber& _startChars_attr)
{
    m_has_startChars_attr = true;
    m_startChars_attr = new ST_DecimalNumber(_startChars_attr);
}

const ST_DecimalNumber& CT_Ind::get_startChars_attr() const
{
    if (m_startChars_attr)
    {
        return *m_startChars_attr;
    }
    return ST_DecimalNumber::default_instance();
}

bool CT_Ind::has_end_attr() const
{
    return m_has_end_attr;
}

void CT_Ind::set_end_attr(const ST_SignedTwipsMeasure& _end_attr)
{
    m_has_end_attr = true;
    m_end_attr = new ST_SignedTwipsMeasure(_end_attr);
}

const ST_SignedTwipsMeasure& CT_Ind::get_end_attr() const
{
    if (m_end_attr)
    {
        return *m_end_attr;
    }
    return ST_SignedTwipsMeasure::default_instance();
}

bool CT_Ind::has_endChars_attr() const
{
    return m_has_endChars_attr;
}

void CT_Ind::set_endChars_attr(const ST_DecimalNumber& _endChars_attr)
{
    m_has_endChars_attr = true;
    m_endChars_attr = new ST_DecimalNumber(_endChars_attr);
}

const ST_DecimalNumber& CT_Ind::get_endChars_attr() const
{
    if (m_endChars_attr)
    {
        return *m_endChars_attr;
    }
    return ST_DecimalNumber::default_instance();
}

bool CT_Ind::has_left_attr() const
{
    return m_has_left_attr;
}

void CT_Ind::set_left_attr(const ST_SignedTwipsMeasure& _left_attr)
{
    m_has_left_attr = true;
    m_left_attr = new ST_SignedTwipsMeasure(_left_attr);
}

const ST_SignedTwipsMeasure& CT_Ind::get_left_attr() const
{
    if (m_left_attr)
    {
        return *m_left_attr;
    }
    return ST_SignedTwipsMeasure::default_instance();
}

bool CT_Ind::has_leftChars_attr() const
{
    return m_has_leftChars_attr;
}

void CT_Ind::set_leftChars_attr(const ST_DecimalNumber& _leftChars_attr)
{
    m_has_leftChars_attr = true;
    m_leftChars_attr = new ST_DecimalNumber(_leftChars_attr);
}

const ST_DecimalNumber& CT_Ind::get_leftChars_attr() const
{
    if (m_leftChars_attr)
    {
        return *m_leftChars_attr;
    }
    return ST_DecimalNumber::default_instance();
}

bool CT_Ind::has_right_attr() const
{
    return m_has_right_attr;
}

void CT_Ind::set_right_attr(const ST_SignedTwipsMeasure& _right_attr)
{
    m_has_right_attr = true;
    m_right_attr = new ST_SignedTwipsMeasure(_right_attr);
}

const ST_SignedTwipsMeasure& CT_Ind::get_right_attr() const
{
    if (m_right_attr)
    {
        return *m_right_attr;
    }
    return ST_SignedTwipsMeasure::default_instance();
}

bool CT_Ind::has_rightChars_attr() const
{
    return m_has_rightChars_attr;
}

void CT_Ind::set_rightChars_attr(const ST_DecimalNumber& _rightChars_attr)
{
    m_has_rightChars_attr = true;
    m_rightChars_attr = new ST_DecimalNumber(_rightChars_attr);
}

const ST_DecimalNumber& CT_Ind::get_rightChars_attr() const
{
    if (m_rightChars_attr)
    {
        return *m_rightChars_attr;
    }
    return ST_DecimalNumber::default_instance();
}

bool CT_Ind::has_hanging_attr() const
{
    return m_has_hanging_attr;
}

void CT_Ind::set_hanging_attr(const ns_s::ST_TwipsMeasure& _hanging_attr)
{
    m_has_hanging_attr = true;
    m_hanging_attr = new ns_s::ST_TwipsMeasure(_hanging_attr);
}

const ns_s::ST_TwipsMeasure& CT_Ind::get_hanging_attr() const
{
    if (m_hanging_attr)
    {
        return *m_hanging_attr;
    }
    return ns_s::ST_TwipsMeasure::default_instance();
}

bool CT_Ind::has_hangingChars_attr() const
{
    return m_has_hangingChars_attr;
}

void CT_Ind::set_hangingChars_attr(const ST_DecimalNumber& _hangingChars_attr)
{
    m_has_hangingChars_attr = true;
    m_hangingChars_attr = new ST_DecimalNumber(_hangingChars_attr);
}

const ST_DecimalNumber& CT_Ind::get_hangingChars_attr() const
{
    if (m_hangingChars_attr)
    {
        return *m_hangingChars_attr;
    }
    return ST_DecimalNumber::default_instance();
}

bool CT_Ind::has_firstLine_attr() const
{
    return m_has_firstLine_attr;
}

void CT_Ind::set_firstLine_attr(const ns_s::ST_TwipsMeasure& _firstLine_attr)
{
    m_has_firstLine_attr = true;
    m_firstLine_attr = new ns_s::ST_TwipsMeasure(_firstLine_attr);
}

const ns_s::ST_TwipsMeasure& CT_Ind::get_firstLine_attr() const
{
    if (m_firstLine_attr)
    {
        return *m_firstLine_attr;
    }
    return ns_s::ST_TwipsMeasure::default_instance();
}

bool CT_Ind::has_firstLineChars_attr() const
{
    return m_has_firstLineChars_attr;
}

void CT_Ind::set_firstLineChars_attr(const ST_DecimalNumber& _firstLineChars_attr)
{
    m_has_firstLineChars_attr = true;
    m_firstLineChars_attr = new ST_DecimalNumber(_firstLineChars_attr);
}

const ST_DecimalNumber& CT_Ind::get_firstLineChars_attr() const
{
    if (m_firstLineChars_attr)
    {
        return *m_firstLineChars_attr;
    }
    return ST_DecimalNumber::default_instance();
}

CT_Ind* CT_Ind::default_instance_ = NULL;

// CT_Jc
CT_Jc::CT_Jc()
    :m_has_val_attr(false),
     m_val_attr(NULL)
{
}
CT_Jc::~CT_Jc()
{
    clear();
}
void CT_Jc::clear()
{
    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }

}

void CT_Jc::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_val_attr);
    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_Jc& CT_Jc::default_instance()
{
    if (!CT_Jc::default_instance_)
    {
        CT_Jc::default_instance_ = new CT_Jc();
    }
    return *CT_Jc::default_instance_;
}

bool CT_Jc::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_Jc::set_val_attr(const ST_Jc& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ST_Jc(_val_attr);
}

const ST_Jc& CT_Jc::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ST_Jc::default_instance();
}

CT_Jc* CT_Jc::default_instance_ = NULL;

// CT_JcTable
CT_JcTable::CT_JcTable()
    :m_has_val_attr(false),
     m_val_attr(NULL)
{
}
CT_JcTable::~CT_JcTable()
{
    clear();
}
void CT_JcTable::clear()
{
    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }

}

void CT_JcTable::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_val_attr);
    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_JcTable& CT_JcTable::default_instance()
{
    if (!CT_JcTable::default_instance_)
    {
        CT_JcTable::default_instance_ = new CT_JcTable();
    }
    return *CT_JcTable::default_instance_;
}

bool CT_JcTable::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_JcTable::set_val_attr(const ST_JcTable& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ST_JcTable(_val_attr);
}

const ST_JcTable& CT_JcTable::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ST_JcTable::default_instance();
}

CT_JcTable* CT_JcTable::default_instance_ = NULL;

// CT_View
CT_View::CT_View()
    :m_has_val_attr(false),
     m_val_attr(NULL)
{
}
CT_View::~CT_View()
{
    clear();
}
void CT_View::clear()
{
    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }

}

void CT_View::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_val_attr);
    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_View& CT_View::default_instance()
{
    if (!CT_View::default_instance_)
    {
        CT_View::default_instance_ = new CT_View();
    }
    return *CT_View::default_instance_;
}

bool CT_View::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_View::set_val_attr(const ST_View& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ST_View(_val_attr);
}

const ST_View& CT_View::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ST_View::default_instance();
}

CT_View* CT_View::default_instance_ = NULL;

// CT_Zoom
CT_Zoom::CT_Zoom()
    :m_has_val_attr(false),
     m_val_attr(NULL),
     m_has_percent_attr(false),
     m_percent_attr(NULL)
{
}
CT_Zoom::~CT_Zoom()
{
    clear();
}
void CT_Zoom::clear()
{
    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }


    m_has_percent_attr = false;

    if (m_percent_attr)
    {
        delete m_percent_attr;
        m_percent_attr = NULL;
    }

}

void CT_Zoom::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }


    assert(m_has_percent_attr);
    if (m_has_percent_attr)
    {
        m_percent_attr->toXmlAttr("w:percent", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_Zoom& CT_Zoom::default_instance()
{
    if (!CT_Zoom::default_instance_)
    {
        CT_Zoom::default_instance_ = new CT_Zoom();
    }
    return *CT_Zoom::default_instance_;
}

bool CT_Zoom::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_Zoom::set_val_attr(const ST_Zoom& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ST_Zoom(_val_attr);
}

const ST_Zoom& CT_Zoom::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ST_Zoom::default_instance();
}

bool CT_Zoom::has_percent_attr() const
{
    return m_has_percent_attr;
}

void CT_Zoom::set_percent_attr(const ST_DecimalNumberOrPercent& _percent_attr)
{
    m_has_percent_attr = true;
    m_percent_attr = new ST_DecimalNumberOrPercent(_percent_attr);
}

const ST_DecimalNumberOrPercent& CT_Zoom::get_percent_attr() const
{
    if (m_percent_attr)
    {
        return *m_percent_attr;
    }
    return ST_DecimalNumberOrPercent::default_instance();
}

CT_Zoom* CT_Zoom::default_instance_ = NULL;

// CT_WritingStyle
CT_WritingStyle::CT_WritingStyle()
    :m_has_lang_attr(false),
     m_lang_attr(NULL),
     m_has_vendorID_attr(false),
     m_vendorID_attr(NULL),
     m_has_dllVersion_attr(false),
     m_dllVersion_attr(NULL),
     m_has_nlCheck_attr(false),
     m_nlCheck_attr(NULL),
     m_has_checkStyle_attr(false),
     m_checkStyle_attr(NULL),
     m_has_appName_attr(false),
     m_appName_attr(NULL)
{
}
CT_WritingStyle::~CT_WritingStyle()
{
    clear();
}
void CT_WritingStyle::clear()
{
    m_has_lang_attr = false;

    if (m_lang_attr)
    {
        delete m_lang_attr;
        m_lang_attr = NULL;
    }


    m_has_vendorID_attr = false;

    if (m_vendorID_attr)
    {
        delete m_vendorID_attr;
        m_vendorID_attr = NULL;
    }


    m_has_dllVersion_attr = false;

    if (m_dllVersion_attr)
    {
        delete m_dllVersion_attr;
        m_dllVersion_attr = NULL;
    }


    m_has_nlCheck_attr = false;

    if (m_nlCheck_attr)
    {
        delete m_nlCheck_attr;
        m_nlCheck_attr = NULL;
    }


    m_has_checkStyle_attr = false;

    if (m_checkStyle_attr)
    {
        delete m_checkStyle_attr;
        m_checkStyle_attr = NULL;
    }


    m_has_appName_attr = false;

    if (m_appName_attr)
    {
        delete m_appName_attr;
        m_appName_attr = NULL;
    }

}

void CT_WritingStyle::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_lang_attr);
    if (m_has_lang_attr)
    {
        m_lang_attr->toXmlAttr("w:lang", _outStream);
    }


    assert(m_has_vendorID_attr);
    if (m_has_vendorID_attr)
    {
        m_vendorID_attr->toXmlAttr("w:vendorID", _outStream);
    }


    assert(m_has_dllVersion_attr);
    if (m_has_dllVersion_attr)
    {
        m_dllVersion_attr->toXmlAttr("w:dllVersion", _outStream);
    }



    if (m_has_nlCheck_attr)
    {
        m_nlCheck_attr->toXmlAttr("w:nlCheck", _outStream);
    }


    assert(m_has_checkStyle_attr);
    if (m_has_checkStyle_attr)
    {
        m_checkStyle_attr->toXmlAttr("w:checkStyle", _outStream);
    }


    assert(m_has_appName_attr);
    if (m_has_appName_attr)
    {
        m_appName_attr->toXmlAttr("w:appName", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_WritingStyle& CT_WritingStyle::default_instance()
{
    if (!CT_WritingStyle::default_instance_)
    {
        CT_WritingStyle::default_instance_ = new CT_WritingStyle();
    }
    return *CT_WritingStyle::default_instance_;
}

bool CT_WritingStyle::has_lang_attr() const
{
    return m_has_lang_attr;
}

void CT_WritingStyle::set_lang_attr(const ns_s::ST_Lang& _lang_attr)
{
    m_has_lang_attr = true;
    m_lang_attr = new ns_s::ST_Lang(_lang_attr);
}

const ns_s::ST_Lang& CT_WritingStyle::get_lang_attr() const
{
    if (m_lang_attr)
    {
        return *m_lang_attr;
    }
    return ns_s::ST_Lang::default_instance();
}

bool CT_WritingStyle::has_vendorID_attr() const
{
    return m_has_vendorID_attr;
}

void CT_WritingStyle::set_vendorID_attr(const ns_s::ST_String& _vendorID_attr)
{
    m_has_vendorID_attr = true;
    m_vendorID_attr = new ns_s::ST_String(_vendorID_attr);
}

const ns_s::ST_String& CT_WritingStyle::get_vendorID_attr() const
{
    if (m_vendorID_attr)
    {
        return *m_vendorID_attr;
    }
    return ns_s::ST_String::default_instance();
}

bool CT_WritingStyle::has_dllVersion_attr() const
{
    return m_has_dllVersion_attr;
}

void CT_WritingStyle::set_dllVersion_attr(const ns_s::ST_String& _dllVersion_attr)
{
    m_has_dllVersion_attr = true;
    m_dllVersion_attr = new ns_s::ST_String(_dllVersion_attr);
}

const ns_s::ST_String& CT_WritingStyle::get_dllVersion_attr() const
{
    if (m_dllVersion_attr)
    {
        return *m_dllVersion_attr;
    }
    return ns_s::ST_String::default_instance();
}

bool CT_WritingStyle::has_nlCheck_attr() const
{
    return m_has_nlCheck_attr;
}

void CT_WritingStyle::set_nlCheck_attr(const ns_s::ST_OnOff& _nlCheck_attr)
{
    m_has_nlCheck_attr = true;
    m_nlCheck_attr = new ns_s::ST_OnOff(_nlCheck_attr);
}

const ns_s::ST_OnOff& CT_WritingStyle::get_nlCheck_attr() const
{
    if (m_nlCheck_attr)
    {
        return *m_nlCheck_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

bool CT_WritingStyle::has_checkStyle_attr() const
{
    return m_has_checkStyle_attr;
}

void CT_WritingStyle::set_checkStyle_attr(const ns_s::ST_OnOff& _checkStyle_attr)
{
    m_has_checkStyle_attr = true;
    m_checkStyle_attr = new ns_s::ST_OnOff(_checkStyle_attr);
}

const ns_s::ST_OnOff& CT_WritingStyle::get_checkStyle_attr() const
{
    if (m_checkStyle_attr)
    {
        return *m_checkStyle_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

bool CT_WritingStyle::has_appName_attr() const
{
    return m_has_appName_attr;
}

void CT_WritingStyle::set_appName_attr(const ns_s::ST_String& _appName_attr)
{
    m_has_appName_attr = true;
    m_appName_attr = new ns_s::ST_String(_appName_attr);
}

const ns_s::ST_String& CT_WritingStyle::get_appName_attr() const
{
    if (m_appName_attr)
    {
        return *m_appName_attr;
    }
    return ns_s::ST_String::default_instance();
}

CT_WritingStyle* CT_WritingStyle::default_instance_ = NULL;

// CT_Proof
CT_Proof::CT_Proof()
    :m_has_spelling_attr(false),
     m_spelling_attr(NULL),
     m_has_grammar_attr(false),
     m_grammar_attr(NULL)
{
}
CT_Proof::~CT_Proof()
{
    clear();
}
void CT_Proof::clear()
{
    m_has_spelling_attr = false;

    if (m_spelling_attr)
    {
        delete m_spelling_attr;
        m_spelling_attr = NULL;
    }


    m_has_grammar_attr = false;

    if (m_grammar_attr)
    {
        delete m_grammar_attr;
        m_grammar_attr = NULL;
    }

}

void CT_Proof::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_spelling_attr)
    {
        m_spelling_attr->toXmlAttr("w:spelling", _outStream);
    }



    if (m_has_grammar_attr)
    {
        m_grammar_attr->toXmlAttr("w:grammar", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_Proof& CT_Proof::default_instance()
{
    if (!CT_Proof::default_instance_)
    {
        CT_Proof::default_instance_ = new CT_Proof();
    }
    return *CT_Proof::default_instance_;
}

bool CT_Proof::has_spelling_attr() const
{
    return m_has_spelling_attr;
}

void CT_Proof::set_spelling_attr(const ST_Proof& _spelling_attr)
{
    m_has_spelling_attr = true;
    m_spelling_attr = new ST_Proof(_spelling_attr);
}

const ST_Proof& CT_Proof::get_spelling_attr() const
{
    if (m_spelling_attr)
    {
        return *m_spelling_attr;
    }
    return ST_Proof::default_instance();
}

bool CT_Proof::has_grammar_attr() const
{
    return m_has_grammar_attr;
}

void CT_Proof::set_grammar_attr(const ST_Proof& _grammar_attr)
{
    m_has_grammar_attr = true;
    m_grammar_attr = new ST_Proof(_grammar_attr);
}

const ST_Proof& CT_Proof::get_grammar_attr() const
{
    if (m_grammar_attr)
    {
        return *m_grammar_attr;
    }
    return ST_Proof::default_instance();
}

CT_Proof* CT_Proof::default_instance_ = NULL;

// CT_DocType
CT_DocType::CT_DocType()
    :m_has_val_attr(false),
     m_val_attr(NULL)
{
}
CT_DocType::~CT_DocType()
{
    clear();
}
void CT_DocType::clear()
{
    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }

}

void CT_DocType::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_val_attr);
    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_DocType& CT_DocType::default_instance()
{
    if (!CT_DocType::default_instance_)
    {
        CT_DocType::default_instance_ = new CT_DocType();
    }
    return *CT_DocType::default_instance_;
}

bool CT_DocType::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_DocType::set_val_attr(const ST_DocType& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ST_DocType(_val_attr);
}

const ST_DocType& CT_DocType::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ST_DocType::default_instance();
}

CT_DocType* CT_DocType::default_instance_ = NULL;

// CT_DocProtect
CT_DocProtect::CT_DocProtect()
    :m_has_edit_attr(false),
     m_edit_attr(NULL),
     m_has_formatting_attr(false),
     m_formatting_attr(NULL),
     m_has_enforcement_attr(false),
     m_enforcement_attr(NULL),
     m_has_algorithmName_attr(false),
     m_algorithmName_attr(NULL),
     m_has_hashValue_attr(false),
     m_hashValue_attr(""),
     m_has_saltValue_attr(false),
     m_saltValue_attr(""),
     m_has_spinCount_attr(false),
     m_spinCount_attr(NULL),
     m_has_cryptProviderType_attr(false),
     m_cryptProviderType_attr(NULL),
     m_has_cryptAlgorithmClass_attr(false),
     m_cryptAlgorithmClass_attr(NULL),
     m_has_cryptAlgorithmType_attr(false),
     m_cryptAlgorithmType_attr(NULL),
     m_has_cryptAlgorithmSid_attr(false),
     m_cryptAlgorithmSid_attr(NULL),
     m_has_cryptSpinCount_attr(false),
     m_cryptSpinCount_attr(NULL),
     m_has_cryptProvider_attr(false),
     m_cryptProvider_attr(NULL),
     m_has_algIdExt_attr(false),
     m_algIdExt_attr(NULL),
     m_has_algIdExtSource_attr(false),
     m_algIdExtSource_attr(NULL),
     m_has_cryptProviderTypeExt_attr(false),
     m_cryptProviderTypeExt_attr(NULL),
     m_has_cryptProviderTypeExtSource_attr(false),
     m_cryptProviderTypeExtSource_attr(NULL),
     m_has_hash_attr(false),
     m_hash_attr(""),
     m_has_salt_attr(false),
     m_salt_attr("")
{
}
CT_DocProtect::~CT_DocProtect()
{
    clear();
}
void CT_DocProtect::clear()
{
    m_has_edit_attr = false;

    if (m_edit_attr)
    {
        delete m_edit_attr;
        m_edit_attr = NULL;
    }


    m_has_formatting_attr = false;

    if (m_formatting_attr)
    {
        delete m_formatting_attr;
        m_formatting_attr = NULL;
    }


    m_has_enforcement_attr = false;

    if (m_enforcement_attr)
    {
        delete m_enforcement_attr;
        m_enforcement_attr = NULL;
    }


    m_has_algorithmName_attr = false;

    if (m_algorithmName_attr)
    {
        delete m_algorithmName_attr;
        m_algorithmName_attr = NULL;
    }


    m_has_hashValue_attr = false;
    m_hashValue_attr.clear();

    m_has_saltValue_attr = false;
    m_saltValue_attr.clear();

    m_has_spinCount_attr = false;

    if (m_spinCount_attr)
    {
        delete m_spinCount_attr;
        m_spinCount_attr = NULL;
    }


    m_has_cryptProviderType_attr = false;

    if (m_cryptProviderType_attr)
    {
        delete m_cryptProviderType_attr;
        m_cryptProviderType_attr = NULL;
    }


    m_has_cryptAlgorithmClass_attr = false;

    if (m_cryptAlgorithmClass_attr)
    {
        delete m_cryptAlgorithmClass_attr;
        m_cryptAlgorithmClass_attr = NULL;
    }


    m_has_cryptAlgorithmType_attr = false;

    if (m_cryptAlgorithmType_attr)
    {
        delete m_cryptAlgorithmType_attr;
        m_cryptAlgorithmType_attr = NULL;
    }


    m_has_cryptAlgorithmSid_attr = false;

    if (m_cryptAlgorithmSid_attr)
    {
        delete m_cryptAlgorithmSid_attr;
        m_cryptAlgorithmSid_attr = NULL;
    }


    m_has_cryptSpinCount_attr = false;

    if (m_cryptSpinCount_attr)
    {
        delete m_cryptSpinCount_attr;
        m_cryptSpinCount_attr = NULL;
    }


    m_has_cryptProvider_attr = false;

    if (m_cryptProvider_attr)
    {
        delete m_cryptProvider_attr;
        m_cryptProvider_attr = NULL;
    }


    m_has_algIdExt_attr = false;

    if (m_algIdExt_attr)
    {
        delete m_algIdExt_attr;
        m_algIdExt_attr = NULL;
    }


    m_has_algIdExtSource_attr = false;

    if (m_algIdExtSource_attr)
    {
        delete m_algIdExtSource_attr;
        m_algIdExtSource_attr = NULL;
    }


    m_has_cryptProviderTypeExt_attr = false;

    if (m_cryptProviderTypeExt_attr)
    {
        delete m_cryptProviderTypeExt_attr;
        m_cryptProviderTypeExt_attr = NULL;
    }


    m_has_cryptProviderTypeExtSource_attr = false;

    if (m_cryptProviderTypeExtSource_attr)
    {
        delete m_cryptProviderTypeExtSource_attr;
        m_cryptProviderTypeExtSource_attr = NULL;
    }


    m_has_hash_attr = false;
    m_hash_attr.clear();

    m_has_salt_attr = false;
    m_salt_attr.clear();
}

void CT_DocProtect::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_edit_attr)
    {
        m_edit_attr->toXmlAttr("w:edit", _outStream);
    }



    if (m_has_formatting_attr)
    {
        m_formatting_attr->toXmlAttr("w:formatting", _outStream);
    }



    if (m_has_enforcement_attr)
    {
        m_enforcement_attr->toXmlAttr("w:enforcement", _outStream);
    }



    if (m_has_algorithmName_attr)
    {
        m_algorithmName_attr->toXmlAttr("w:algorithmName", _outStream);
    }



    if (m_has_hashValue_attr)
    {
        _outStream << " " << "w:hashValue" << "=\"" << m_hashValue_attr << "\"";
    }



    if (m_has_saltValue_attr)
    {
        _outStream << " " << "w:saltValue" << "=\"" << m_saltValue_attr << "\"";
    }



    if (m_has_spinCount_attr)
    {
        m_spinCount_attr->toXmlAttr("w:spinCount", _outStream);
    }



    if (m_has_cryptProviderType_attr)
    {
        m_cryptProviderType_attr->toXmlAttr("w:cryptProviderType", _outStream);
    }



    if (m_has_cryptAlgorithmClass_attr)
    {
        m_cryptAlgorithmClass_attr->toXmlAttr("w:cryptAlgorithmClass", _outStream);
    }



    if (m_has_cryptAlgorithmType_attr)
    {
        m_cryptAlgorithmType_attr->toXmlAttr("w:cryptAlgorithmType", _outStream);
    }



    if (m_has_cryptAlgorithmSid_attr)
    {
        m_cryptAlgorithmSid_attr->toXmlAttr("w:cryptAlgorithmSid", _outStream);
    }



    if (m_has_cryptSpinCount_attr)
    {
        m_cryptSpinCount_attr->toXmlAttr("w:cryptSpinCount", _outStream);
    }



    if (m_has_cryptProvider_attr)
    {
        m_cryptProvider_attr->toXmlAttr("w:cryptProvider", _outStream);
    }



    if (m_has_algIdExt_attr)
    {
        m_algIdExt_attr->toXmlAttr("w:algIdExt", _outStream);
    }



    if (m_has_algIdExtSource_attr)
    {
        m_algIdExtSource_attr->toXmlAttr("w:algIdExtSource", _outStream);
    }



    if (m_has_cryptProviderTypeExt_attr)
    {
        m_cryptProviderTypeExt_attr->toXmlAttr("w:cryptProviderTypeExt", _outStream);
    }



    if (m_has_cryptProviderTypeExtSource_attr)
    {
        m_cryptProviderTypeExtSource_attr->toXmlAttr("w:cryptProviderTypeExtSource", _outStream);
    }



    if (m_has_hash_attr)
    {
        _outStream << " " << "w:hash" << "=\"" << m_hash_attr << "\"";
    }



    if (m_has_salt_attr)
    {
        _outStream << " " << "w:salt" << "=\"" << m_salt_attr << "\"";
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_DocProtect& CT_DocProtect::default_instance()
{
    if (!CT_DocProtect::default_instance_)
    {
        CT_DocProtect::default_instance_ = new CT_DocProtect();
    }
    return *CT_DocProtect::default_instance_;
}

bool CT_DocProtect::has_edit_attr() const
{
    return m_has_edit_attr;
}

void CT_DocProtect::set_edit_attr(const ST_DocProtect& _edit_attr)
{
    m_has_edit_attr = true;
    m_edit_attr = new ST_DocProtect(_edit_attr);
}

const ST_DocProtect& CT_DocProtect::get_edit_attr() const
{
    if (m_edit_attr)
    {
        return *m_edit_attr;
    }
    return ST_DocProtect::default_instance();
}

bool CT_DocProtect::has_formatting_attr() const
{
    return m_has_formatting_attr;
}

void CT_DocProtect::set_formatting_attr(const ns_s::ST_OnOff& _formatting_attr)
{
    m_has_formatting_attr = true;
    m_formatting_attr = new ns_s::ST_OnOff(_formatting_attr);
}

const ns_s::ST_OnOff& CT_DocProtect::get_formatting_attr() const
{
    if (m_formatting_attr)
    {
        return *m_formatting_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

bool CT_DocProtect::has_enforcement_attr() const
{
    return m_has_enforcement_attr;
}

void CT_DocProtect::set_enforcement_attr(const ns_s::ST_OnOff& _enforcement_attr)
{
    m_has_enforcement_attr = true;
    m_enforcement_attr = new ns_s::ST_OnOff(_enforcement_attr);
}

const ns_s::ST_OnOff& CT_DocProtect::get_enforcement_attr() const
{
    if (m_enforcement_attr)
    {
        return *m_enforcement_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

bool CT_DocProtect::has_algorithmName_attr() const
{
    return m_has_algorithmName_attr;
}

void CT_DocProtect::set_algorithmName_attr(const ns_s::ST_String& _algorithmName_attr)
{
    m_has_algorithmName_attr = true;
    m_algorithmName_attr = new ns_s::ST_String(_algorithmName_attr);
}

const ns_s::ST_String& CT_DocProtect::get_algorithmName_attr() const
{
    if (m_algorithmName_attr)
    {
        return *m_algorithmName_attr;
    }
    return ns_s::ST_String::default_instance();
}

bool CT_DocProtect::has_hashValue_attr() const
{
    return m_has_hashValue_attr;
}

void CT_DocProtect::set_hashValue_attr(const XSD::base64Binary_& _hashValue_attr)
{
    m_has_hashValue_attr = true;
    m_hashValue_attr = _hashValue_attr;
}

const XSD::base64Binary_& CT_DocProtect::get_hashValue_attr() const
{
    return m_hashValue_attr;
}

bool CT_DocProtect::has_saltValue_attr() const
{
    return m_has_saltValue_attr;
}

void CT_DocProtect::set_saltValue_attr(const XSD::base64Binary_& _saltValue_attr)
{
    m_has_saltValue_attr = true;
    m_saltValue_attr = _saltValue_attr;
}

const XSD::base64Binary_& CT_DocProtect::get_saltValue_attr() const
{
    return m_saltValue_attr;
}

bool CT_DocProtect::has_spinCount_attr() const
{
    return m_has_spinCount_attr;
}

void CT_DocProtect::set_spinCount_attr(const ST_DecimalNumber& _spinCount_attr)
{
    m_has_spinCount_attr = true;
    m_spinCount_attr = new ST_DecimalNumber(_spinCount_attr);
}

const ST_DecimalNumber& CT_DocProtect::get_spinCount_attr() const
{
    if (m_spinCount_attr)
    {
        return *m_spinCount_attr;
    }
    return ST_DecimalNumber::default_instance();
}

bool CT_DocProtect::has_cryptProviderType_attr() const
{
    return m_has_cryptProviderType_attr;
}

void CT_DocProtect::set_cryptProviderType_attr(const ns_s::ST_CryptProv& _cryptProviderType_attr)
{
    m_has_cryptProviderType_attr = true;
    m_cryptProviderType_attr = new ns_s::ST_CryptProv(_cryptProviderType_attr);
}

const ns_s::ST_CryptProv& CT_DocProtect::get_cryptProviderType_attr() const
{
    if (m_cryptProviderType_attr)
    {
        return *m_cryptProviderType_attr;
    }
    return ns_s::ST_CryptProv::default_instance();
}

bool CT_DocProtect::has_cryptAlgorithmClass_attr() const
{
    return m_has_cryptAlgorithmClass_attr;
}

void CT_DocProtect::set_cryptAlgorithmClass_attr(const ns_s::ST_AlgClass& _cryptAlgorithmClass_attr)
{
    m_has_cryptAlgorithmClass_attr = true;
    m_cryptAlgorithmClass_attr = new ns_s::ST_AlgClass(_cryptAlgorithmClass_attr);
}

const ns_s::ST_AlgClass& CT_DocProtect::get_cryptAlgorithmClass_attr() const
{
    if (m_cryptAlgorithmClass_attr)
    {
        return *m_cryptAlgorithmClass_attr;
    }
    return ns_s::ST_AlgClass::default_instance();
}

bool CT_DocProtect::has_cryptAlgorithmType_attr() const
{
    return m_has_cryptAlgorithmType_attr;
}

void CT_DocProtect::set_cryptAlgorithmType_attr(const ns_s::ST_AlgType& _cryptAlgorithmType_attr)
{
    m_has_cryptAlgorithmType_attr = true;
    m_cryptAlgorithmType_attr = new ns_s::ST_AlgType(_cryptAlgorithmType_attr);
}

const ns_s::ST_AlgType& CT_DocProtect::get_cryptAlgorithmType_attr() const
{
    if (m_cryptAlgorithmType_attr)
    {
        return *m_cryptAlgorithmType_attr;
    }
    return ns_s::ST_AlgType::default_instance();
}

bool CT_DocProtect::has_cryptAlgorithmSid_attr() const
{
    return m_has_cryptAlgorithmSid_attr;
}

void CT_DocProtect::set_cryptAlgorithmSid_attr(const ST_DecimalNumber& _cryptAlgorithmSid_attr)
{
    m_has_cryptAlgorithmSid_attr = true;
    m_cryptAlgorithmSid_attr = new ST_DecimalNumber(_cryptAlgorithmSid_attr);
}

const ST_DecimalNumber& CT_DocProtect::get_cryptAlgorithmSid_attr() const
{
    if (m_cryptAlgorithmSid_attr)
    {
        return *m_cryptAlgorithmSid_attr;
    }
    return ST_DecimalNumber::default_instance();
}

bool CT_DocProtect::has_cryptSpinCount_attr() const
{
    return m_has_cryptSpinCount_attr;
}

void CT_DocProtect::set_cryptSpinCount_attr(const ST_DecimalNumber& _cryptSpinCount_attr)
{
    m_has_cryptSpinCount_attr = true;
    m_cryptSpinCount_attr = new ST_DecimalNumber(_cryptSpinCount_attr);
}

const ST_DecimalNumber& CT_DocProtect::get_cryptSpinCount_attr() const
{
    if (m_cryptSpinCount_attr)
    {
        return *m_cryptSpinCount_attr;
    }
    return ST_DecimalNumber::default_instance();
}

bool CT_DocProtect::has_cryptProvider_attr() const
{
    return m_has_cryptProvider_attr;
}

void CT_DocProtect::set_cryptProvider_attr(const ns_s::ST_String& _cryptProvider_attr)
{
    m_has_cryptProvider_attr = true;
    m_cryptProvider_attr = new ns_s::ST_String(_cryptProvider_attr);
}

const ns_s::ST_String& CT_DocProtect::get_cryptProvider_attr() const
{
    if (m_cryptProvider_attr)
    {
        return *m_cryptProvider_attr;
    }
    return ns_s::ST_String::default_instance();
}

bool CT_DocProtect::has_algIdExt_attr() const
{
    return m_has_algIdExt_attr;
}

void CT_DocProtect::set_algIdExt_attr(const ST_LongHexNumber& _algIdExt_attr)
{
    m_has_algIdExt_attr = true;
    m_algIdExt_attr = new ST_LongHexNumber(_algIdExt_attr);
}

const ST_LongHexNumber& CT_DocProtect::get_algIdExt_attr() const
{
    if (m_algIdExt_attr)
    {
        return *m_algIdExt_attr;
    }
    return ST_LongHexNumber::default_instance();
}

bool CT_DocProtect::has_algIdExtSource_attr() const
{
    return m_has_algIdExtSource_attr;
}

void CT_DocProtect::set_algIdExtSource_attr(const ns_s::ST_String& _algIdExtSource_attr)
{
    m_has_algIdExtSource_attr = true;
    m_algIdExtSource_attr = new ns_s::ST_String(_algIdExtSource_attr);
}

const ns_s::ST_String& CT_DocProtect::get_algIdExtSource_attr() const
{
    if (m_algIdExtSource_attr)
    {
        return *m_algIdExtSource_attr;
    }
    return ns_s::ST_String::default_instance();
}

bool CT_DocProtect::has_cryptProviderTypeExt_attr() const
{
    return m_has_cryptProviderTypeExt_attr;
}

void CT_DocProtect::set_cryptProviderTypeExt_attr(const ST_LongHexNumber& _cryptProviderTypeExt_attr)
{
    m_has_cryptProviderTypeExt_attr = true;
    m_cryptProviderTypeExt_attr = new ST_LongHexNumber(_cryptProviderTypeExt_attr);
}

const ST_LongHexNumber& CT_DocProtect::get_cryptProviderTypeExt_attr() const
{
    if (m_cryptProviderTypeExt_attr)
    {
        return *m_cryptProviderTypeExt_attr;
    }
    return ST_LongHexNumber::default_instance();
}

bool CT_DocProtect::has_cryptProviderTypeExtSource_attr() const
{
    return m_has_cryptProviderTypeExtSource_attr;
}

void CT_DocProtect::set_cryptProviderTypeExtSource_attr(const ns_s::ST_String& _cryptProviderTypeExtSource_attr)
{
    m_has_cryptProviderTypeExtSource_attr = true;
    m_cryptProviderTypeExtSource_attr = new ns_s::ST_String(_cryptProviderTypeExtSource_attr);
}

const ns_s::ST_String& CT_DocProtect::get_cryptProviderTypeExtSource_attr() const
{
    if (m_cryptProviderTypeExtSource_attr)
    {
        return *m_cryptProviderTypeExtSource_attr;
    }
    return ns_s::ST_String::default_instance();
}

bool CT_DocProtect::has_hash_attr() const
{
    return m_has_hash_attr;
}

void CT_DocProtect::set_hash_attr(const XSD::base64Binary_& _hash_attr)
{
    m_has_hash_attr = true;
    m_hash_attr = _hash_attr;
}

const XSD::base64Binary_& CT_DocProtect::get_hash_attr() const
{
    return m_hash_attr;
}

bool CT_DocProtect::has_salt_attr() const
{
    return m_has_salt_attr;
}

void CT_DocProtect::set_salt_attr(const XSD::base64Binary_& _salt_attr)
{
    m_has_salt_attr = true;
    m_salt_attr = _salt_attr;
}

const XSD::base64Binary_& CT_DocProtect::get_salt_attr() const
{
    return m_salt_attr;
}

CT_DocProtect* CT_DocProtect::default_instance_ = NULL;

// CT_MailMergeDocType
CT_MailMergeDocType::CT_MailMergeDocType()
    :m_has_val_attr(false),
     m_val_attr(NULL)
{
}
CT_MailMergeDocType::~CT_MailMergeDocType()
{
    clear();
}
void CT_MailMergeDocType::clear()
{
    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }

}

void CT_MailMergeDocType::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_val_attr);
    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_MailMergeDocType& CT_MailMergeDocType::default_instance()
{
    if (!CT_MailMergeDocType::default_instance_)
    {
        CT_MailMergeDocType::default_instance_ = new CT_MailMergeDocType();
    }
    return *CT_MailMergeDocType::default_instance_;
}

bool CT_MailMergeDocType::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_MailMergeDocType::set_val_attr(const ST_MailMergeDocType& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ST_MailMergeDocType(_val_attr);
}

const ST_MailMergeDocType& CT_MailMergeDocType::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ST_MailMergeDocType::default_instance();
}

CT_MailMergeDocType* CT_MailMergeDocType::default_instance_ = NULL;

// CT_MailMergeDataType
CT_MailMergeDataType::CT_MailMergeDataType()
    :m_has_val_attr(false),
     m_val_attr(NULL)
{
}
CT_MailMergeDataType::~CT_MailMergeDataType()
{
    clear();
}
void CT_MailMergeDataType::clear()
{
    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }

}

void CT_MailMergeDataType::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_val_attr);
    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_MailMergeDataType& CT_MailMergeDataType::default_instance()
{
    if (!CT_MailMergeDataType::default_instance_)
    {
        CT_MailMergeDataType::default_instance_ = new CT_MailMergeDataType();
    }
    return *CT_MailMergeDataType::default_instance_;
}

bool CT_MailMergeDataType::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_MailMergeDataType::set_val_attr(const ST_MailMergeDataType& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ST_MailMergeDataType(_val_attr);
}

const ST_MailMergeDataType& CT_MailMergeDataType::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ST_MailMergeDataType::default_instance();
}

CT_MailMergeDataType* CT_MailMergeDataType::default_instance_ = NULL;

// CT_MailMergeDest
CT_MailMergeDest::CT_MailMergeDest()
    :m_has_val_attr(false),
     m_val_attr(NULL)
{
}
CT_MailMergeDest::~CT_MailMergeDest()
{
    clear();
}
void CT_MailMergeDest::clear()
{
    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }

}

void CT_MailMergeDest::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_val_attr);
    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_MailMergeDest& CT_MailMergeDest::default_instance()
{
    if (!CT_MailMergeDest::default_instance_)
    {
        CT_MailMergeDest::default_instance_ = new CT_MailMergeDest();
    }
    return *CT_MailMergeDest::default_instance_;
}

bool CT_MailMergeDest::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_MailMergeDest::set_val_attr(const ST_MailMergeDest& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ST_MailMergeDest(_val_attr);
}

const ST_MailMergeDest& CT_MailMergeDest::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ST_MailMergeDest::default_instance();
}

CT_MailMergeDest* CT_MailMergeDest::default_instance_ = NULL;

// CT_MailMergeOdsoFMDFieldType
CT_MailMergeOdsoFMDFieldType::CT_MailMergeOdsoFMDFieldType()
    :m_has_val_attr(false),
     m_val_attr(NULL)
{
}
CT_MailMergeOdsoFMDFieldType::~CT_MailMergeOdsoFMDFieldType()
{
    clear();
}
void CT_MailMergeOdsoFMDFieldType::clear()
{
    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }

}

void CT_MailMergeOdsoFMDFieldType::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_val_attr);
    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_MailMergeOdsoFMDFieldType& CT_MailMergeOdsoFMDFieldType::default_instance()
{
    if (!CT_MailMergeOdsoFMDFieldType::default_instance_)
    {
        CT_MailMergeOdsoFMDFieldType::default_instance_ = new CT_MailMergeOdsoFMDFieldType();
    }
    return *CT_MailMergeOdsoFMDFieldType::default_instance_;
}

bool CT_MailMergeOdsoFMDFieldType::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_MailMergeOdsoFMDFieldType::set_val_attr(const ST_MailMergeOdsoFMDFieldType& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ST_MailMergeOdsoFMDFieldType(_val_attr);
}

const ST_MailMergeOdsoFMDFieldType& CT_MailMergeOdsoFMDFieldType::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ST_MailMergeOdsoFMDFieldType::default_instance();
}

CT_MailMergeOdsoFMDFieldType* CT_MailMergeOdsoFMDFieldType::default_instance_ = NULL;

// CT_TrackChangesView
CT_TrackChangesView::CT_TrackChangesView()
    :m_has_markup_attr(false),
     m_markup_attr(NULL),
     m_has_comments_attr(false),
     m_comments_attr(NULL),
     m_has_insDel_attr(false),
     m_insDel_attr(NULL),
     m_has_formatting_attr(false),
     m_formatting_attr(NULL),
     m_has_inkAnnotations_attr(false),
     m_inkAnnotations_attr(NULL)
{
}
CT_TrackChangesView::~CT_TrackChangesView()
{
    clear();
}
void CT_TrackChangesView::clear()
{
    m_has_markup_attr = false;

    if (m_markup_attr)
    {
        delete m_markup_attr;
        m_markup_attr = NULL;
    }


    m_has_comments_attr = false;

    if (m_comments_attr)
    {
        delete m_comments_attr;
        m_comments_attr = NULL;
    }


    m_has_insDel_attr = false;

    if (m_insDel_attr)
    {
        delete m_insDel_attr;
        m_insDel_attr = NULL;
    }


    m_has_formatting_attr = false;

    if (m_formatting_attr)
    {
        delete m_formatting_attr;
        m_formatting_attr = NULL;
    }


    m_has_inkAnnotations_attr = false;

    if (m_inkAnnotations_attr)
    {
        delete m_inkAnnotations_attr;
        m_inkAnnotations_attr = NULL;
    }

}

void CT_TrackChangesView::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_markup_attr)
    {
        m_markup_attr->toXmlAttr("w:markup", _outStream);
    }



    if (m_has_comments_attr)
    {
        m_comments_attr->toXmlAttr("w:comments", _outStream);
    }



    if (m_has_insDel_attr)
    {
        m_insDel_attr->toXmlAttr("w:insDel", _outStream);
    }



    if (m_has_formatting_attr)
    {
        m_formatting_attr->toXmlAttr("w:formatting", _outStream);
    }



    if (m_has_inkAnnotations_attr)
    {
        m_inkAnnotations_attr->toXmlAttr("w:inkAnnotations", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_TrackChangesView& CT_TrackChangesView::default_instance()
{
    if (!CT_TrackChangesView::default_instance_)
    {
        CT_TrackChangesView::default_instance_ = new CT_TrackChangesView();
    }
    return *CT_TrackChangesView::default_instance_;
}

bool CT_TrackChangesView::has_markup_attr() const
{
    return m_has_markup_attr;
}

void CT_TrackChangesView::set_markup_attr(const ns_s::ST_OnOff& _markup_attr)
{
    m_has_markup_attr = true;
    m_markup_attr = new ns_s::ST_OnOff(_markup_attr);
}

const ns_s::ST_OnOff& CT_TrackChangesView::get_markup_attr() const
{
    if (m_markup_attr)
    {
        return *m_markup_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

bool CT_TrackChangesView::has_comments_attr() const
{
    return m_has_comments_attr;
}

void CT_TrackChangesView::set_comments_attr(const ns_s::ST_OnOff& _comments_attr)
{
    m_has_comments_attr = true;
    m_comments_attr = new ns_s::ST_OnOff(_comments_attr);
}

const ns_s::ST_OnOff& CT_TrackChangesView::get_comments_attr() const
{
    if (m_comments_attr)
    {
        return *m_comments_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

bool CT_TrackChangesView::has_insDel_attr() const
{
    return m_has_insDel_attr;
}

void CT_TrackChangesView::set_insDel_attr(const ns_s::ST_OnOff& _insDel_attr)
{
    m_has_insDel_attr = true;
    m_insDel_attr = new ns_s::ST_OnOff(_insDel_attr);
}

const ns_s::ST_OnOff& CT_TrackChangesView::get_insDel_attr() const
{
    if (m_insDel_attr)
    {
        return *m_insDel_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

bool CT_TrackChangesView::has_formatting_attr() const
{
    return m_has_formatting_attr;
}

void CT_TrackChangesView::set_formatting_attr(const ns_s::ST_OnOff& _formatting_attr)
{
    m_has_formatting_attr = true;
    m_formatting_attr = new ns_s::ST_OnOff(_formatting_attr);
}

const ns_s::ST_OnOff& CT_TrackChangesView::get_formatting_attr() const
{
    if (m_formatting_attr)
    {
        return *m_formatting_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

bool CT_TrackChangesView::has_inkAnnotations_attr() const
{
    return m_has_inkAnnotations_attr;
}

void CT_TrackChangesView::set_inkAnnotations_attr(const ns_s::ST_OnOff& _inkAnnotations_attr)
{
    m_has_inkAnnotations_attr = true;
    m_inkAnnotations_attr = new ns_s::ST_OnOff(_inkAnnotations_attr);
}

const ns_s::ST_OnOff& CT_TrackChangesView::get_inkAnnotations_attr() const
{
    if (m_inkAnnotations_attr)
    {
        return *m_inkAnnotations_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

CT_TrackChangesView* CT_TrackChangesView::default_instance_ = NULL;

// CT_Kinsoku
CT_Kinsoku::CT_Kinsoku()
    :m_has_lang_attr(false),
     m_lang_attr(NULL),
     m_has_val_attr(false),
     m_val_attr(NULL)
{
}
CT_Kinsoku::~CT_Kinsoku()
{
    clear();
}
void CT_Kinsoku::clear()
{
    m_has_lang_attr = false;

    if (m_lang_attr)
    {
        delete m_lang_attr;
        m_lang_attr = NULL;
    }


    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }

}

void CT_Kinsoku::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_lang_attr);
    if (m_has_lang_attr)
    {
        m_lang_attr->toXmlAttr("w:lang", _outStream);
    }


    assert(m_has_val_attr);
    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_Kinsoku& CT_Kinsoku::default_instance()
{
    if (!CT_Kinsoku::default_instance_)
    {
        CT_Kinsoku::default_instance_ = new CT_Kinsoku();
    }
    return *CT_Kinsoku::default_instance_;
}

bool CT_Kinsoku::has_lang_attr() const
{
    return m_has_lang_attr;
}

void CT_Kinsoku::set_lang_attr(const ns_s::ST_Lang& _lang_attr)
{
    m_has_lang_attr = true;
    m_lang_attr = new ns_s::ST_Lang(_lang_attr);
}

const ns_s::ST_Lang& CT_Kinsoku::get_lang_attr() const
{
    if (m_lang_attr)
    {
        return *m_lang_attr;
    }
    return ns_s::ST_Lang::default_instance();
}

bool CT_Kinsoku::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_Kinsoku::set_val_attr(const ns_s::ST_String& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ns_s::ST_String(_val_attr);
}

const ns_s::ST_String& CT_Kinsoku::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ns_s::ST_String::default_instance();
}

CT_Kinsoku* CT_Kinsoku::default_instance_ = NULL;

// CT_TextDirection
CT_TextDirection::CT_TextDirection()
    :m_has_val_attr(false),
     m_val_attr(NULL)
{
}
CT_TextDirection::~CT_TextDirection()
{
    clear();
}
void CT_TextDirection::clear()
{
    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }

}

void CT_TextDirection::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_val_attr);
    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_TextDirection& CT_TextDirection::default_instance()
{
    if (!CT_TextDirection::default_instance_)
    {
        CT_TextDirection::default_instance_ = new CT_TextDirection();
    }
    return *CT_TextDirection::default_instance_;
}

bool CT_TextDirection::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_TextDirection::set_val_attr(const ST_TextDirection& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ST_TextDirection(_val_attr);
}

const ST_TextDirection& CT_TextDirection::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ST_TextDirection::default_instance();
}

CT_TextDirection* CT_TextDirection::default_instance_ = NULL;

// CT_TextAlignment
CT_TextAlignment::CT_TextAlignment()
    :m_has_val_attr(false),
     m_val_attr(NULL)
{
}
CT_TextAlignment::~CT_TextAlignment()
{
    clear();
}
void CT_TextAlignment::clear()
{
    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }

}

void CT_TextAlignment::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_val_attr);
    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_TextAlignment& CT_TextAlignment::default_instance()
{
    if (!CT_TextAlignment::default_instance_)
    {
        CT_TextAlignment::default_instance_ = new CT_TextAlignment();
    }
    return *CT_TextAlignment::default_instance_;
}

bool CT_TextAlignment::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_TextAlignment::set_val_attr(const ST_TextAlignment& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ST_TextAlignment(_val_attr);
}

const ST_TextAlignment& CT_TextAlignment::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ST_TextAlignment::default_instance();
}

CT_TextAlignment* CT_TextAlignment::default_instance_ = NULL;

// CT_Markup
CT_Markup::CT_Markup()
    :m_has_id_attr(false),
     m_id_attr(NULL)
{
}
CT_Markup::~CT_Markup()
{
    clear();
}
void CT_Markup::clear()
{
    m_has_id_attr = false;

    if (m_id_attr)
    {
        delete m_id_attr;
        m_id_attr = NULL;
    }

}

void CT_Markup::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_id_attr);
    if (m_has_id_attr)
    {
        m_id_attr->toXmlAttr("w:id", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_Markup& CT_Markup::default_instance()
{
    if (!CT_Markup::default_instance_)
    {
        CT_Markup::default_instance_ = new CT_Markup();
    }
    return *CT_Markup::default_instance_;
}

bool CT_Markup::has_id_attr() const
{
    return m_has_id_attr;
}

void CT_Markup::set_id_attr(const ST_DecimalNumber& _id_attr)
{
    m_has_id_attr = true;
    m_id_attr = new ST_DecimalNumber(_id_attr);
}

const ST_DecimalNumber& CT_Markup::get_id_attr() const
{
    if (m_id_attr)
    {
        return *m_id_attr;
    }
    return ST_DecimalNumber::default_instance();
}

CT_Markup* CT_Markup::default_instance_ = NULL;

// CT_TrackChange
CT_TrackChange::CT_TrackChange()
    :m_has_id_attr(false),
     m_id_attr(NULL),
     m_has_author_attr(false),
     m_author_attr(NULL),
     m_has_date_attr(false),
     m_date_attr(NULL)
{
}
CT_TrackChange::~CT_TrackChange()
{
    clear();
}
void CT_TrackChange::clear()
{
    m_has_id_attr = false;

    if (m_id_attr)
    {
        delete m_id_attr;
        m_id_attr = NULL;
    }


    m_has_author_attr = false;

    if (m_author_attr)
    {
        delete m_author_attr;
        m_author_attr = NULL;
    }


    m_has_date_attr = false;

    if (m_date_attr)
    {
        delete m_date_attr;
        m_date_attr = NULL;
    }

}

void CT_TrackChange::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_id_attr);
    if (m_has_id_attr)
    {
        m_id_attr->toXmlAttr("w:id", _outStream);
    }


    assert(m_has_author_attr);
    if (m_has_author_attr)
    {
        m_author_attr->toXmlAttr("w:author", _outStream);
    }



    if (m_has_date_attr)
    {
        m_date_attr->toXmlAttr("w:date", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_TrackChange& CT_TrackChange::default_instance()
{
    if (!CT_TrackChange::default_instance_)
    {
        CT_TrackChange::default_instance_ = new CT_TrackChange();
    }
    return *CT_TrackChange::default_instance_;
}

bool CT_TrackChange::has_id_attr() const
{
    return m_has_id_attr;
}

void CT_TrackChange::set_id_attr(const ST_DecimalNumber& _id_attr)
{
    m_has_id_attr = true;
    m_id_attr = new ST_DecimalNumber(_id_attr);
}

const ST_DecimalNumber& CT_TrackChange::get_id_attr() const
{
    if (m_id_attr)
    {
        return *m_id_attr;
    }
    return ST_DecimalNumber::default_instance();
}

bool CT_TrackChange::has_author_attr() const
{
    return m_has_author_attr;
}

void CT_TrackChange::set_author_attr(const ns_s::ST_String& _author_attr)
{
    m_has_author_attr = true;
    m_author_attr = new ns_s::ST_String(_author_attr);
}

const ns_s::ST_String& CT_TrackChange::get_author_attr() const
{
    if (m_author_attr)
    {
        return *m_author_attr;
    }
    return ns_s::ST_String::default_instance();
}

bool CT_TrackChange::has_date_attr() const
{
    return m_has_date_attr;
}

void CT_TrackChange::set_date_attr(const ST_DateTime& _date_attr)
{
    m_has_date_attr = true;
    m_date_attr = new ST_DateTime(_date_attr);
}

const ST_DateTime& CT_TrackChange::get_date_attr() const
{
    if (m_date_attr)
    {
        return *m_date_attr;
    }
    return ST_DateTime::default_instance();
}

CT_TrackChange* CT_TrackChange::default_instance_ = NULL;

// CT_CellMergeTrackChange
CT_CellMergeTrackChange::CT_CellMergeTrackChange()
    :m_has_id_attr(false),
     m_id_attr(NULL),
     m_has_author_attr(false),
     m_author_attr(NULL),
     m_has_date_attr(false),
     m_date_attr(NULL),
     m_has_vMerge_attr(false),
     m_vMerge_attr(NULL),
     m_has_vMergeOrig_attr(false),
     m_vMergeOrig_attr(NULL)
{
}
CT_CellMergeTrackChange::~CT_CellMergeTrackChange()
{
    clear();
}
void CT_CellMergeTrackChange::clear()
{
    m_has_id_attr = false;

    if (m_id_attr)
    {
        delete m_id_attr;
        m_id_attr = NULL;
    }


    m_has_author_attr = false;

    if (m_author_attr)
    {
        delete m_author_attr;
        m_author_attr = NULL;
    }


    m_has_date_attr = false;

    if (m_date_attr)
    {
        delete m_date_attr;
        m_date_attr = NULL;
    }


    m_has_vMerge_attr = false;

    if (m_vMerge_attr)
    {
        delete m_vMerge_attr;
        m_vMerge_attr = NULL;
    }


    m_has_vMergeOrig_attr = false;

    if (m_vMergeOrig_attr)
    {
        delete m_vMergeOrig_attr;
        m_vMergeOrig_attr = NULL;
    }

}

void CT_CellMergeTrackChange::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_id_attr);
    if (m_has_id_attr)
    {
        m_id_attr->toXmlAttr("w:id", _outStream);
    }


    assert(m_has_author_attr);
    if (m_has_author_attr)
    {
        m_author_attr->toXmlAttr("w:author", _outStream);
    }



    if (m_has_date_attr)
    {
        m_date_attr->toXmlAttr("w:date", _outStream);
    }



    if (m_has_vMerge_attr)
    {
        m_vMerge_attr->toXmlAttr("w:vMerge", _outStream);
    }



    if (m_has_vMergeOrig_attr)
    {
        m_vMergeOrig_attr->toXmlAttr("w:vMergeOrig", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_CellMergeTrackChange& CT_CellMergeTrackChange::default_instance()
{
    if (!CT_CellMergeTrackChange::default_instance_)
    {
        CT_CellMergeTrackChange::default_instance_ = new CT_CellMergeTrackChange();
    }
    return *CT_CellMergeTrackChange::default_instance_;
}

bool CT_CellMergeTrackChange::has_id_attr() const
{
    return m_has_id_attr;
}

void CT_CellMergeTrackChange::set_id_attr(const ST_DecimalNumber& _id_attr)
{
    m_has_id_attr = true;
    m_id_attr = new ST_DecimalNumber(_id_attr);
}

const ST_DecimalNumber& CT_CellMergeTrackChange::get_id_attr() const
{
    if (m_id_attr)
    {
        return *m_id_attr;
    }
    return ST_DecimalNumber::default_instance();
}

bool CT_CellMergeTrackChange::has_author_attr() const
{
    return m_has_author_attr;
}

void CT_CellMergeTrackChange::set_author_attr(const ns_s::ST_String& _author_attr)
{
    m_has_author_attr = true;
    m_author_attr = new ns_s::ST_String(_author_attr);
}

const ns_s::ST_String& CT_CellMergeTrackChange::get_author_attr() const
{
    if (m_author_attr)
    {
        return *m_author_attr;
    }
    return ns_s::ST_String::default_instance();
}

bool CT_CellMergeTrackChange::has_date_attr() const
{
    return m_has_date_attr;
}

void CT_CellMergeTrackChange::set_date_attr(const ST_DateTime& _date_attr)
{
    m_has_date_attr = true;
    m_date_attr = new ST_DateTime(_date_attr);
}

const ST_DateTime& CT_CellMergeTrackChange::get_date_attr() const
{
    if (m_date_attr)
    {
        return *m_date_attr;
    }
    return ST_DateTime::default_instance();
}

bool CT_CellMergeTrackChange::has_vMerge_attr() const
{
    return m_has_vMerge_attr;
}

void CT_CellMergeTrackChange::set_vMerge_attr(const ST_AnnotationVMerge& _vMerge_attr)
{
    m_has_vMerge_attr = true;
    m_vMerge_attr = new ST_AnnotationVMerge(_vMerge_attr);
}

const ST_AnnotationVMerge& CT_CellMergeTrackChange::get_vMerge_attr() const
{
    if (m_vMerge_attr)
    {
        return *m_vMerge_attr;
    }
    return ST_AnnotationVMerge::default_instance();
}

bool CT_CellMergeTrackChange::has_vMergeOrig_attr() const
{
    return m_has_vMergeOrig_attr;
}

void CT_CellMergeTrackChange::set_vMergeOrig_attr(const ST_AnnotationVMerge& _vMergeOrig_attr)
{
    m_has_vMergeOrig_attr = true;
    m_vMergeOrig_attr = new ST_AnnotationVMerge(_vMergeOrig_attr);
}

const ST_AnnotationVMerge& CT_CellMergeTrackChange::get_vMergeOrig_attr() const
{
    if (m_vMergeOrig_attr)
    {
        return *m_vMergeOrig_attr;
    }
    return ST_AnnotationVMerge::default_instance();
}

CT_CellMergeTrackChange* CT_CellMergeTrackChange::default_instance_ = NULL;

// CT_TrackChangeRange
CT_TrackChangeRange::CT_TrackChangeRange()
    :m_has_id_attr(false),
     m_id_attr(NULL),
     m_has_author_attr(false),
     m_author_attr(NULL),
     m_has_date_attr(false),
     m_date_attr(NULL),
     m_has_displacedByCustomXml_attr(false),
     m_displacedByCustomXml_attr(NULL)
{
}
CT_TrackChangeRange::~CT_TrackChangeRange()
{
    clear();
}
void CT_TrackChangeRange::clear()
{
    m_has_id_attr = false;

    if (m_id_attr)
    {
        delete m_id_attr;
        m_id_attr = NULL;
    }


    m_has_author_attr = false;

    if (m_author_attr)
    {
        delete m_author_attr;
        m_author_attr = NULL;
    }


    m_has_date_attr = false;

    if (m_date_attr)
    {
        delete m_date_attr;
        m_date_attr = NULL;
    }


    m_has_displacedByCustomXml_attr = false;

    if (m_displacedByCustomXml_attr)
    {
        delete m_displacedByCustomXml_attr;
        m_displacedByCustomXml_attr = NULL;
    }

}

void CT_TrackChangeRange::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_id_attr);
    if (m_has_id_attr)
    {
        m_id_attr->toXmlAttr("w:id", _outStream);
    }


    assert(m_has_author_attr);
    if (m_has_author_attr)
    {
        m_author_attr->toXmlAttr("w:author", _outStream);
    }



    if (m_has_date_attr)
    {
        m_date_attr->toXmlAttr("w:date", _outStream);
    }



    if (m_has_displacedByCustomXml_attr)
    {
        m_displacedByCustomXml_attr->toXmlAttr("w:displacedByCustomXml", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_TrackChangeRange& CT_TrackChangeRange::default_instance()
{
    if (!CT_TrackChangeRange::default_instance_)
    {
        CT_TrackChangeRange::default_instance_ = new CT_TrackChangeRange();
    }
    return *CT_TrackChangeRange::default_instance_;
}

bool CT_TrackChangeRange::has_id_attr() const
{
    return m_has_id_attr;
}

void CT_TrackChangeRange::set_id_attr(const ST_DecimalNumber& _id_attr)
{
    m_has_id_attr = true;
    m_id_attr = new ST_DecimalNumber(_id_attr);
}

const ST_DecimalNumber& CT_TrackChangeRange::get_id_attr() const
{
    if (m_id_attr)
    {
        return *m_id_attr;
    }
    return ST_DecimalNumber::default_instance();
}

bool CT_TrackChangeRange::has_author_attr() const
{
    return m_has_author_attr;
}

void CT_TrackChangeRange::set_author_attr(const ns_s::ST_String& _author_attr)
{
    m_has_author_attr = true;
    m_author_attr = new ns_s::ST_String(_author_attr);
}

const ns_s::ST_String& CT_TrackChangeRange::get_author_attr() const
{
    if (m_author_attr)
    {
        return *m_author_attr;
    }
    return ns_s::ST_String::default_instance();
}

bool CT_TrackChangeRange::has_date_attr() const
{
    return m_has_date_attr;
}

void CT_TrackChangeRange::set_date_attr(const ST_DateTime& _date_attr)
{
    m_has_date_attr = true;
    m_date_attr = new ST_DateTime(_date_attr);
}

const ST_DateTime& CT_TrackChangeRange::get_date_attr() const
{
    if (m_date_attr)
    {
        return *m_date_attr;
    }
    return ST_DateTime::default_instance();
}

bool CT_TrackChangeRange::has_displacedByCustomXml_attr() const
{
    return m_has_displacedByCustomXml_attr;
}

void CT_TrackChangeRange::set_displacedByCustomXml_attr(const ST_DisplacedByCustomXml& _displacedByCustomXml_attr)
{
    m_has_displacedByCustomXml_attr = true;
    m_displacedByCustomXml_attr = new ST_DisplacedByCustomXml(_displacedByCustomXml_attr);
}

const ST_DisplacedByCustomXml& CT_TrackChangeRange::get_displacedByCustomXml_attr() const
{
    if (m_displacedByCustomXml_attr)
    {
        return *m_displacedByCustomXml_attr;
    }
    return ST_DisplacedByCustomXml::default_instance();
}

CT_TrackChangeRange* CT_TrackChangeRange::default_instance_ = NULL;

// CT_MarkupRange
CT_MarkupRange::CT_MarkupRange()
    :m_has_id_attr(false),
     m_id_attr(NULL),
     m_has_displacedByCustomXml_attr(false),
     m_displacedByCustomXml_attr(NULL)
{
}
CT_MarkupRange::~CT_MarkupRange()
{
    clear();
}
void CT_MarkupRange::clear()
{
    m_has_id_attr = false;

    if (m_id_attr)
    {
        delete m_id_attr;
        m_id_attr = NULL;
    }


    m_has_displacedByCustomXml_attr = false;

    if (m_displacedByCustomXml_attr)
    {
        delete m_displacedByCustomXml_attr;
        m_displacedByCustomXml_attr = NULL;
    }

}

void CT_MarkupRange::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_id_attr);
    if (m_has_id_attr)
    {
        m_id_attr->toXmlAttr("w:id", _outStream);
    }



    if (m_has_displacedByCustomXml_attr)
    {
        m_displacedByCustomXml_attr->toXmlAttr("w:displacedByCustomXml", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_MarkupRange& CT_MarkupRange::default_instance()
{
    if (!CT_MarkupRange::default_instance_)
    {
        CT_MarkupRange::default_instance_ = new CT_MarkupRange();
    }
    return *CT_MarkupRange::default_instance_;
}

bool CT_MarkupRange::has_id_attr() const
{
    return m_has_id_attr;
}

void CT_MarkupRange::set_id_attr(const ST_DecimalNumber& _id_attr)
{
    m_has_id_attr = true;
    m_id_attr = new ST_DecimalNumber(_id_attr);
}

const ST_DecimalNumber& CT_MarkupRange::get_id_attr() const
{
    if (m_id_attr)
    {
        return *m_id_attr;
    }
    return ST_DecimalNumber::default_instance();
}

bool CT_MarkupRange::has_displacedByCustomXml_attr() const
{
    return m_has_displacedByCustomXml_attr;
}

void CT_MarkupRange::set_displacedByCustomXml_attr(const ST_DisplacedByCustomXml& _displacedByCustomXml_attr)
{
    m_has_displacedByCustomXml_attr = true;
    m_displacedByCustomXml_attr = new ST_DisplacedByCustomXml(_displacedByCustomXml_attr);
}

const ST_DisplacedByCustomXml& CT_MarkupRange::get_displacedByCustomXml_attr() const
{
    if (m_displacedByCustomXml_attr)
    {
        return *m_displacedByCustomXml_attr;
    }
    return ST_DisplacedByCustomXml::default_instance();
}

CT_MarkupRange* CT_MarkupRange::default_instance_ = NULL;

// CT_BookmarkRange
CT_BookmarkRange::CT_BookmarkRange()
    :m_has_id_attr(false),
     m_id_attr(NULL),
     m_has_displacedByCustomXml_attr(false),
     m_displacedByCustomXml_attr(NULL),
     m_has_colFirst_attr(false),
     m_colFirst_attr(NULL),
     m_has_colLast_attr(false),
     m_colLast_attr(NULL)
{
}
CT_BookmarkRange::~CT_BookmarkRange()
{
    clear();
}
void CT_BookmarkRange::clear()
{
    m_has_id_attr = false;

    if (m_id_attr)
    {
        delete m_id_attr;
        m_id_attr = NULL;
    }


    m_has_displacedByCustomXml_attr = false;

    if (m_displacedByCustomXml_attr)
    {
        delete m_displacedByCustomXml_attr;
        m_displacedByCustomXml_attr = NULL;
    }


    m_has_colFirst_attr = false;

    if (m_colFirst_attr)
    {
        delete m_colFirst_attr;
        m_colFirst_attr = NULL;
    }


    m_has_colLast_attr = false;

    if (m_colLast_attr)
    {
        delete m_colLast_attr;
        m_colLast_attr = NULL;
    }

}

void CT_BookmarkRange::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_id_attr);
    if (m_has_id_attr)
    {
        m_id_attr->toXmlAttr("w:id", _outStream);
    }



    if (m_has_displacedByCustomXml_attr)
    {
        m_displacedByCustomXml_attr->toXmlAttr("w:displacedByCustomXml", _outStream);
    }



    if (m_has_colFirst_attr)
    {
        m_colFirst_attr->toXmlAttr("w:colFirst", _outStream);
    }



    if (m_has_colLast_attr)
    {
        m_colLast_attr->toXmlAttr("w:colLast", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_BookmarkRange& CT_BookmarkRange::default_instance()
{
    if (!CT_BookmarkRange::default_instance_)
    {
        CT_BookmarkRange::default_instance_ = new CT_BookmarkRange();
    }
    return *CT_BookmarkRange::default_instance_;
}

bool CT_BookmarkRange::has_id_attr() const
{
    return m_has_id_attr;
}

void CT_BookmarkRange::set_id_attr(const ST_DecimalNumber& _id_attr)
{
    m_has_id_attr = true;
    m_id_attr = new ST_DecimalNumber(_id_attr);
}

const ST_DecimalNumber& CT_BookmarkRange::get_id_attr() const
{
    if (m_id_attr)
    {
        return *m_id_attr;
    }
    return ST_DecimalNumber::default_instance();
}

bool CT_BookmarkRange::has_displacedByCustomXml_attr() const
{
    return m_has_displacedByCustomXml_attr;
}

void CT_BookmarkRange::set_displacedByCustomXml_attr(const ST_DisplacedByCustomXml& _displacedByCustomXml_attr)
{
    m_has_displacedByCustomXml_attr = true;
    m_displacedByCustomXml_attr = new ST_DisplacedByCustomXml(_displacedByCustomXml_attr);
}

const ST_DisplacedByCustomXml& CT_BookmarkRange::get_displacedByCustomXml_attr() const
{
    if (m_displacedByCustomXml_attr)
    {
        return *m_displacedByCustomXml_attr;
    }
    return ST_DisplacedByCustomXml::default_instance();
}

bool CT_BookmarkRange::has_colFirst_attr() const
{
    return m_has_colFirst_attr;
}

void CT_BookmarkRange::set_colFirst_attr(const ST_DecimalNumber& _colFirst_attr)
{
    m_has_colFirst_attr = true;
    m_colFirst_attr = new ST_DecimalNumber(_colFirst_attr);
}

const ST_DecimalNumber& CT_BookmarkRange::get_colFirst_attr() const
{
    if (m_colFirst_attr)
    {
        return *m_colFirst_attr;
    }
    return ST_DecimalNumber::default_instance();
}

bool CT_BookmarkRange::has_colLast_attr() const
{
    return m_has_colLast_attr;
}

void CT_BookmarkRange::set_colLast_attr(const ST_DecimalNumber& _colLast_attr)
{
    m_has_colLast_attr = true;
    m_colLast_attr = new ST_DecimalNumber(_colLast_attr);
}

const ST_DecimalNumber& CT_BookmarkRange::get_colLast_attr() const
{
    if (m_colLast_attr)
    {
        return *m_colLast_attr;
    }
    return ST_DecimalNumber::default_instance();
}

CT_BookmarkRange* CT_BookmarkRange::default_instance_ = NULL;

// CT_Bookmark
CT_Bookmark::CT_Bookmark()
    :m_has_id_attr(false),
     m_id_attr(NULL),
     m_has_displacedByCustomXml_attr(false),
     m_displacedByCustomXml_attr(NULL),
     m_has_colFirst_attr(false),
     m_colFirst_attr(NULL),
     m_has_colLast_attr(false),
     m_colLast_attr(NULL),
     m_has_name_attr(false),
     m_name_attr(NULL)
{
}
CT_Bookmark::~CT_Bookmark()
{
    clear();
}
void CT_Bookmark::clear()
{
    m_has_id_attr = false;

    if (m_id_attr)
    {
        delete m_id_attr;
        m_id_attr = NULL;
    }


    m_has_displacedByCustomXml_attr = false;

    if (m_displacedByCustomXml_attr)
    {
        delete m_displacedByCustomXml_attr;
        m_displacedByCustomXml_attr = NULL;
    }


    m_has_colFirst_attr = false;

    if (m_colFirst_attr)
    {
        delete m_colFirst_attr;
        m_colFirst_attr = NULL;
    }


    m_has_colLast_attr = false;

    if (m_colLast_attr)
    {
        delete m_colLast_attr;
        m_colLast_attr = NULL;
    }


    m_has_name_attr = false;

    if (m_name_attr)
    {
        delete m_name_attr;
        m_name_attr = NULL;
    }

}

void CT_Bookmark::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_id_attr);
    if (m_has_id_attr)
    {
        m_id_attr->toXmlAttr("w:id", _outStream);
    }



    if (m_has_displacedByCustomXml_attr)
    {
        m_displacedByCustomXml_attr->toXmlAttr("w:displacedByCustomXml", _outStream);
    }



    if (m_has_colFirst_attr)
    {
        m_colFirst_attr->toXmlAttr("w:colFirst", _outStream);
    }



    if (m_has_colLast_attr)
    {
        m_colLast_attr->toXmlAttr("w:colLast", _outStream);
    }


    assert(m_has_name_attr);
    if (m_has_name_attr)
    {
        m_name_attr->toXmlAttr("w:name", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_Bookmark& CT_Bookmark::default_instance()
{
    if (!CT_Bookmark::default_instance_)
    {
        CT_Bookmark::default_instance_ = new CT_Bookmark();
    }
    return *CT_Bookmark::default_instance_;
}

bool CT_Bookmark::has_id_attr() const
{
    return m_has_id_attr;
}

void CT_Bookmark::set_id_attr(const ST_DecimalNumber& _id_attr)
{
    m_has_id_attr = true;
    m_id_attr = new ST_DecimalNumber(_id_attr);
}

const ST_DecimalNumber& CT_Bookmark::get_id_attr() const
{
    if (m_id_attr)
    {
        return *m_id_attr;
    }
    return ST_DecimalNumber::default_instance();
}

bool CT_Bookmark::has_displacedByCustomXml_attr() const
{
    return m_has_displacedByCustomXml_attr;
}

void CT_Bookmark::set_displacedByCustomXml_attr(const ST_DisplacedByCustomXml& _displacedByCustomXml_attr)
{
    m_has_displacedByCustomXml_attr = true;
    m_displacedByCustomXml_attr = new ST_DisplacedByCustomXml(_displacedByCustomXml_attr);
}

const ST_DisplacedByCustomXml& CT_Bookmark::get_displacedByCustomXml_attr() const
{
    if (m_displacedByCustomXml_attr)
    {
        return *m_displacedByCustomXml_attr;
    }
    return ST_DisplacedByCustomXml::default_instance();
}

bool CT_Bookmark::has_colFirst_attr() const
{
    return m_has_colFirst_attr;
}

void CT_Bookmark::set_colFirst_attr(const ST_DecimalNumber& _colFirst_attr)
{
    m_has_colFirst_attr = true;
    m_colFirst_attr = new ST_DecimalNumber(_colFirst_attr);
}

const ST_DecimalNumber& CT_Bookmark::get_colFirst_attr() const
{
    if (m_colFirst_attr)
    {
        return *m_colFirst_attr;
    }
    return ST_DecimalNumber::default_instance();
}

bool CT_Bookmark::has_colLast_attr() const
{
    return m_has_colLast_attr;
}

void CT_Bookmark::set_colLast_attr(const ST_DecimalNumber& _colLast_attr)
{
    m_has_colLast_attr = true;
    m_colLast_attr = new ST_DecimalNumber(_colLast_attr);
}

const ST_DecimalNumber& CT_Bookmark::get_colLast_attr() const
{
    if (m_colLast_attr)
    {
        return *m_colLast_attr;
    }
    return ST_DecimalNumber::default_instance();
}

bool CT_Bookmark::has_name_attr() const
{
    return m_has_name_attr;
}

void CT_Bookmark::set_name_attr(const ns_s::ST_String& _name_attr)
{
    m_has_name_attr = true;
    m_name_attr = new ns_s::ST_String(_name_attr);
}

const ns_s::ST_String& CT_Bookmark::get_name_attr() const
{
    if (m_name_attr)
    {
        return *m_name_attr;
    }
    return ns_s::ST_String::default_instance();
}

CT_Bookmark* CT_Bookmark::default_instance_ = NULL;

// CT_MoveBookmark
CT_MoveBookmark::CT_MoveBookmark()
    :m_has_id_attr(false),
     m_id_attr(NULL),
     m_has_displacedByCustomXml_attr(false),
     m_displacedByCustomXml_attr(NULL),
     m_has_colFirst_attr(false),
     m_colFirst_attr(NULL),
     m_has_colLast_attr(false),
     m_colLast_attr(NULL),
     m_has_name_attr(false),
     m_name_attr(NULL),
     m_has_author_attr(false),
     m_author_attr(NULL),
     m_has_date_attr(false),
     m_date_attr(NULL)
{
}
CT_MoveBookmark::~CT_MoveBookmark()
{
    clear();
}
void CT_MoveBookmark::clear()
{
    m_has_id_attr = false;

    if (m_id_attr)
    {
        delete m_id_attr;
        m_id_attr = NULL;
    }


    m_has_displacedByCustomXml_attr = false;

    if (m_displacedByCustomXml_attr)
    {
        delete m_displacedByCustomXml_attr;
        m_displacedByCustomXml_attr = NULL;
    }


    m_has_colFirst_attr = false;

    if (m_colFirst_attr)
    {
        delete m_colFirst_attr;
        m_colFirst_attr = NULL;
    }


    m_has_colLast_attr = false;

    if (m_colLast_attr)
    {
        delete m_colLast_attr;
        m_colLast_attr = NULL;
    }


    m_has_name_attr = false;

    if (m_name_attr)
    {
        delete m_name_attr;
        m_name_attr = NULL;
    }


    m_has_author_attr = false;

    if (m_author_attr)
    {
        delete m_author_attr;
        m_author_attr = NULL;
    }


    m_has_date_attr = false;

    if (m_date_attr)
    {
        delete m_date_attr;
        m_date_attr = NULL;
    }

}

void CT_MoveBookmark::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_id_attr);
    if (m_has_id_attr)
    {
        m_id_attr->toXmlAttr("w:id", _outStream);
    }



    if (m_has_displacedByCustomXml_attr)
    {
        m_displacedByCustomXml_attr->toXmlAttr("w:displacedByCustomXml", _outStream);
    }



    if (m_has_colFirst_attr)
    {
        m_colFirst_attr->toXmlAttr("w:colFirst", _outStream);
    }



    if (m_has_colLast_attr)
    {
        m_colLast_attr->toXmlAttr("w:colLast", _outStream);
    }


    assert(m_has_name_attr);
    if (m_has_name_attr)
    {
        m_name_attr->toXmlAttr("w:name", _outStream);
    }


    assert(m_has_author_attr);
    if (m_has_author_attr)
    {
        m_author_attr->toXmlAttr("w:author", _outStream);
    }


    assert(m_has_date_attr);
    if (m_has_date_attr)
    {
        m_date_attr->toXmlAttr("w:date", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_MoveBookmark& CT_MoveBookmark::default_instance()
{
    if (!CT_MoveBookmark::default_instance_)
    {
        CT_MoveBookmark::default_instance_ = new CT_MoveBookmark();
    }
    return *CT_MoveBookmark::default_instance_;
}

bool CT_MoveBookmark::has_id_attr() const
{
    return m_has_id_attr;
}

void CT_MoveBookmark::set_id_attr(const ST_DecimalNumber& _id_attr)
{
    m_has_id_attr = true;
    m_id_attr = new ST_DecimalNumber(_id_attr);
}

const ST_DecimalNumber& CT_MoveBookmark::get_id_attr() const
{
    if (m_id_attr)
    {
        return *m_id_attr;
    }
    return ST_DecimalNumber::default_instance();
}

bool CT_MoveBookmark::has_displacedByCustomXml_attr() const
{
    return m_has_displacedByCustomXml_attr;
}

void CT_MoveBookmark::set_displacedByCustomXml_attr(const ST_DisplacedByCustomXml& _displacedByCustomXml_attr)
{
    m_has_displacedByCustomXml_attr = true;
    m_displacedByCustomXml_attr = new ST_DisplacedByCustomXml(_displacedByCustomXml_attr);
}

const ST_DisplacedByCustomXml& CT_MoveBookmark::get_displacedByCustomXml_attr() const
{
    if (m_displacedByCustomXml_attr)
    {
        return *m_displacedByCustomXml_attr;
    }
    return ST_DisplacedByCustomXml::default_instance();
}

bool CT_MoveBookmark::has_colFirst_attr() const
{
    return m_has_colFirst_attr;
}

void CT_MoveBookmark::set_colFirst_attr(const ST_DecimalNumber& _colFirst_attr)
{
    m_has_colFirst_attr = true;
    m_colFirst_attr = new ST_DecimalNumber(_colFirst_attr);
}

const ST_DecimalNumber& CT_MoveBookmark::get_colFirst_attr() const
{
    if (m_colFirst_attr)
    {
        return *m_colFirst_attr;
    }
    return ST_DecimalNumber::default_instance();
}

bool CT_MoveBookmark::has_colLast_attr() const
{
    return m_has_colLast_attr;
}

void CT_MoveBookmark::set_colLast_attr(const ST_DecimalNumber& _colLast_attr)
{
    m_has_colLast_attr = true;
    m_colLast_attr = new ST_DecimalNumber(_colLast_attr);
}

const ST_DecimalNumber& CT_MoveBookmark::get_colLast_attr() const
{
    if (m_colLast_attr)
    {
        return *m_colLast_attr;
    }
    return ST_DecimalNumber::default_instance();
}

bool CT_MoveBookmark::has_name_attr() const
{
    return m_has_name_attr;
}

void CT_MoveBookmark::set_name_attr(const ns_s::ST_String& _name_attr)
{
    m_has_name_attr = true;
    m_name_attr = new ns_s::ST_String(_name_attr);
}

const ns_s::ST_String& CT_MoveBookmark::get_name_attr() const
{
    if (m_name_attr)
    {
        return *m_name_attr;
    }
    return ns_s::ST_String::default_instance();
}

bool CT_MoveBookmark::has_author_attr() const
{
    return m_has_author_attr;
}

void CT_MoveBookmark::set_author_attr(const ns_s::ST_String& _author_attr)
{
    m_has_author_attr = true;
    m_author_attr = new ns_s::ST_String(_author_attr);
}

const ns_s::ST_String& CT_MoveBookmark::get_author_attr() const
{
    if (m_author_attr)
    {
        return *m_author_attr;
    }
    return ns_s::ST_String::default_instance();
}

bool CT_MoveBookmark::has_date_attr() const
{
    return m_has_date_attr;
}

void CT_MoveBookmark::set_date_attr(const ST_DateTime& _date_attr)
{
    m_has_date_attr = true;
    m_date_attr = new ST_DateTime(_date_attr);
}

const ST_DateTime& CT_MoveBookmark::get_date_attr() const
{
    if (m_date_attr)
    {
        return *m_date_attr;
    }
    return ST_DateTime::default_instance();
}

CT_MoveBookmark* CT_MoveBookmark::default_instance_ = NULL;

// CT_Comment
CT_Comment::CT_Comment()
    :m_has_id_attr(false),
     m_id_attr(NULL),
     m_has_author_attr(false),
     m_author_attr(NULL),
     m_has_date_attr(false),
     m_date_attr(NULL),
     m_has_initials_attr(false),
     m_initials_attr(NULL)
{
}
CT_Comment::~CT_Comment()
{
    clear();
}
CT_CustomXmlBlock* CT_Comment::add_customXml()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_CustomXmlBlock* pNewChild = pChildGroup->mutable_customXml();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_SdtBlock* CT_Comment::add_sdt()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_SdtBlock* pNewChild = pChildGroup->mutable_sdt();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_P* CT_Comment::add_p()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_P* pNewChild = pChildGroup->mutable_p();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_Tbl* CT_Comment::add_tbl()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Tbl* pNewChild = pChildGroup->mutable_tbl();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_ProofErr* CT_Comment::add_proofErr()
{
    ChildGroup_2 *pChildGroup = new ChildGroup_2();
    CT_ProofErr* pNewChild = pChildGroup->mutable_proofErr();
    m_childGroupList_2.push_back(pChildGroup);
    return pNewChild;
}

CT_PermStart* CT_Comment::add_permStart()
{
    ChildGroup_2 *pChildGroup = new ChildGroup_2();
    CT_PermStart* pNewChild = pChildGroup->mutable_permStart();
    m_childGroupList_2.push_back(pChildGroup);
    return pNewChild;
}

CT_Perm* CT_Comment::add_permEnd()
{
    ChildGroup_2 *pChildGroup = new ChildGroup_2();
    CT_Perm* pNewChild = pChildGroup->mutable_permEnd();
    m_childGroupList_2.push_back(pChildGroup);
    return pNewChild;
}

CT_Bookmark* CT_Comment::add_bookmarkStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_Bookmark* pNewChild = pChildGroup->mutable_bookmarkStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MarkupRange* CT_Comment::add_bookmarkEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MarkupRange* pNewChild = pChildGroup->mutable_bookmarkEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MoveBookmark* CT_Comment::add_moveFromRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MoveBookmark* pNewChild = pChildGroup->mutable_moveFromRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MarkupRange* CT_Comment::add_moveFromRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MarkupRange* pNewChild = pChildGroup->mutable_moveFromRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MoveBookmark* CT_Comment::add_moveToRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MoveBookmark* pNewChild = pChildGroup->mutable_moveToRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MarkupRange* CT_Comment::add_moveToRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MarkupRange* pNewChild = pChildGroup->mutable_moveToRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MarkupRange* CT_Comment::add_commentRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MarkupRange* pNewChild = pChildGroup->mutable_commentRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MarkupRange* CT_Comment::add_commentRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MarkupRange* pNewChild = pChildGroup->mutable_commentRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_TrackChange* CT_Comment::add_customXmlInsRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_TrackChange* pNewChild = pChildGroup->mutable_customXmlInsRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_Markup* CT_Comment::add_customXmlInsRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_Markup* pNewChild = pChildGroup->mutable_customXmlInsRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_TrackChange* CT_Comment::add_customXmlDelRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_TrackChange* pNewChild = pChildGroup->mutable_customXmlDelRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_Markup* CT_Comment::add_customXmlDelRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_Markup* pNewChild = pChildGroup->mutable_customXmlDelRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_TrackChange* CT_Comment::add_customXmlMoveFromRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_TrackChange* pNewChild = pChildGroup->mutable_customXmlMoveFromRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_Markup* CT_Comment::add_customXmlMoveFromRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_Markup* pNewChild = pChildGroup->mutable_customXmlMoveFromRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_TrackChange* CT_Comment::add_customXmlMoveToRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_TrackChange* pNewChild = pChildGroup->mutable_customXmlMoveToRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_Markup* CT_Comment::add_customXmlMoveToRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_Markup* pNewChild = pChildGroup->mutable_customXmlMoveToRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_RunTrackChange* CT_Comment::add_ins()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_RunTrackChange* pNewChild = pChildGroup->mutable_ins();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_RunTrackChange* CT_Comment::add_del()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_RunTrackChange* pNewChild = pChildGroup->mutable_del();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_RunTrackChange* CT_Comment::add_moveFrom()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_RunTrackChange* pNewChild = pChildGroup->mutable_moveFrom();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_RunTrackChange* CT_Comment::add_moveTo()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_RunTrackChange* pNewChild = pChildGroup->mutable_moveTo();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

ns_m::CT_OMathPara* CT_Comment::add_m_oMathPara()
{
    ChildGroup_4 *pChildGroup = new ChildGroup_4();
    ns_m::CT_OMathPara* pNewChild = pChildGroup->mutable_m_oMathPara();
    m_childGroupList_4.push_back(pChildGroup);
    return pNewChild;
}

ns_m::CT_OMath* CT_Comment::add_m_oMath()
{
    ChildGroup_4 *pChildGroup = new ChildGroup_4();
    ns_m::CT_OMath* pNewChild = pChildGroup->mutable_m_oMath();
    m_childGroupList_4.push_back(pChildGroup);
    return pNewChild;
}

CT_AltChunk* CT_Comment::add_altChunk()
{
    ChildGroup_4 *pChildGroup = new ChildGroup_4();
    CT_AltChunk* pNewChild = pChildGroup->mutable_altChunk();
    m_childGroupList_4.push_back(pChildGroup);
    return pNewChild;
}

void CT_Comment::clear()
{
    m_has_id_attr = false;

    if (m_id_attr)
    {
        delete m_id_attr;
        m_id_attr = NULL;
    }


    m_has_author_attr = false;

    if (m_author_attr)
    {
        delete m_author_attr;
        m_author_attr = NULL;
    }


    m_has_date_attr = false;

    if (m_date_attr)
    {
        delete m_date_attr;
        m_date_attr = NULL;
    }


    m_has_initials_attr = false;

    if (m_initials_attr)
    {
        delete m_initials_attr;
        m_initials_attr = NULL;
    }


    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }

    {
        vector<ChildGroup_2*>::iterator iter;
        for (iter = m_childGroupList_2.begin(); iter != m_childGroupList_2.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_2.clear();
    }

    {
        vector<ChildGroup_3*>::iterator iter;
        for (iter = m_childGroupList_3.begin(); iter != m_childGroupList_3.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_3.clear();
    }

    {
        vector<ChildGroup_4*>::iterator iter;
        for (iter = m_childGroupList_4.begin(); iter != m_childGroupList_4.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_4.clear();
    }
}

void CT_Comment::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_id_attr);
    if (m_has_id_attr)
    {
        m_id_attr->toXmlAttr("w:id", _outStream);
    }


    assert(m_has_author_attr);
    if (m_has_author_attr)
    {
        m_author_attr->toXmlAttr("w:author", _outStream);
    }



    if (m_has_date_attr)
    {
        m_date_attr->toXmlAttr("w:date", _outStream);
    }



    if (m_has_initials_attr)
    {
        m_initials_attr->toXmlAttr("w:initials", _outStream);
    }

    _outStream << ">";

    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_customXml())
            {
                (*iter)->get_customXml().toXmlElem("w:customXml", "", _outStream);
            }


            else if ((*iter)->has_sdt())
            {
                (*iter)->get_sdt().toXmlElem("w:sdt", "", _outStream);
            }


            else if ((*iter)->has_p())
            {
                (*iter)->get_p().toXmlElem("w:p", "", _outStream);
            }


            else if ((*iter)->has_tbl())
            {
                (*iter)->get_tbl().toXmlElem("w:tbl", "", _outStream);
            }


        }
    }

    {
        vector<ChildGroup_2*>::const_iterator iter;
        for (iter = m_childGroupList_2.begin(); iter != m_childGroupList_2.end(); ++iter)
        {
            if ((*iter)->has_proofErr())
            {
                (*iter)->get_proofErr().toXmlElem("w:proofErr", "", _outStream);
            }


            else if ((*iter)->has_permStart())
            {
                (*iter)->get_permStart().toXmlElem("w:permStart", "", _outStream);
            }


            else if ((*iter)->has_permEnd())
            {
                (*iter)->get_permEnd().toXmlElem("w:permEnd", "", _outStream);
            }


        }
    }

    {
        vector<ChildGroup_3*>::const_iterator iter;
        for (iter = m_childGroupList_3.begin(); iter != m_childGroupList_3.end(); ++iter)
        {
            if ((*iter)->has_bookmarkStart())
            {
                (*iter)->get_bookmarkStart().toXmlElem("w:bookmarkStart", "", _outStream);
            }


            else if ((*iter)->has_bookmarkEnd())
            {
                (*iter)->get_bookmarkEnd().toXmlElem("w:bookmarkEnd", "", _outStream);
            }


            else if ((*iter)->has_moveFromRangeStart())
            {
                (*iter)->get_moveFromRangeStart().toXmlElem("w:moveFromRangeStart", "", _outStream);
            }


            else if ((*iter)->has_moveFromRangeEnd())
            {
                (*iter)->get_moveFromRangeEnd().toXmlElem("w:moveFromRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_moveToRangeStart())
            {
                (*iter)->get_moveToRangeStart().toXmlElem("w:moveToRangeStart", "", _outStream);
            }


            else if ((*iter)->has_moveToRangeEnd())
            {
                (*iter)->get_moveToRangeEnd().toXmlElem("w:moveToRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_commentRangeStart())
            {
                (*iter)->get_commentRangeStart().toXmlElem("w:commentRangeStart", "", _outStream);
            }


            else if ((*iter)->has_commentRangeEnd())
            {
                (*iter)->get_commentRangeEnd().toXmlElem("w:commentRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_customXmlInsRangeStart())
            {
                (*iter)->get_customXmlInsRangeStart().toXmlElem("w:customXmlInsRangeStart", "", _outStream);
            }


            else if ((*iter)->has_customXmlInsRangeEnd())
            {
                (*iter)->get_customXmlInsRangeEnd().toXmlElem("w:customXmlInsRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_customXmlDelRangeStart())
            {
                (*iter)->get_customXmlDelRangeStart().toXmlElem("w:customXmlDelRangeStart", "", _outStream);
            }


            else if ((*iter)->has_customXmlDelRangeEnd())
            {
                (*iter)->get_customXmlDelRangeEnd().toXmlElem("w:customXmlDelRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_customXmlMoveFromRangeStart())
            {
                (*iter)->get_customXmlMoveFromRangeStart().toXmlElem("w:customXmlMoveFromRangeStart", "", _outStream);
            }


            else if ((*iter)->has_customXmlMoveFromRangeEnd())
            {
                (*iter)->get_customXmlMoveFromRangeEnd().toXmlElem("w:customXmlMoveFromRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_customXmlMoveToRangeStart())
            {
                (*iter)->get_customXmlMoveToRangeStart().toXmlElem("w:customXmlMoveToRangeStart", "", _outStream);
            }


            else if ((*iter)->has_customXmlMoveToRangeEnd())
            {
                (*iter)->get_customXmlMoveToRangeEnd().toXmlElem("w:customXmlMoveToRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_ins())
            {
                (*iter)->get_ins().toXmlElem("w:ins", "", _outStream);
            }


            else if ((*iter)->has_del())
            {
                (*iter)->get_del().toXmlElem("w:del", "", _outStream);
            }


            else if ((*iter)->has_moveFrom())
            {
                (*iter)->get_moveFrom().toXmlElem("w:moveFrom", "", _outStream);
            }


            else if ((*iter)->has_moveTo())
            {
                (*iter)->get_moveTo().toXmlElem("w:moveTo", "", _outStream);
            }


        }
    }

    {
        vector<ChildGroup_4*>::const_iterator iter;
        for (iter = m_childGroupList_4.begin(); iter != m_childGroupList_4.end(); ++iter)
        {
            if ((*iter)->has_m_oMathPara())
            {
                (*iter)->get_m_oMathPara().toXmlElem("m:oMathPara", "", _outStream);
            }


            else if ((*iter)->has_m_oMath())
            {
                (*iter)->get_m_oMath().toXmlElem("m:oMath", "", _outStream);
            }


            else if ((*iter)->has_altChunk())
            {
                (*iter)->get_altChunk().toXmlElem("w:altChunk", "", _outStream);
            }


        }
    }

    _outStream << "</" << _elemName << ">";
}

const CT_Comment& CT_Comment::default_instance()
{
    if (!CT_Comment::default_instance_)
    {
        CT_Comment::default_instance_ = new CT_Comment();
    }
    return *CT_Comment::default_instance_;
}

bool CT_Comment::has_id_attr() const
{
    return m_has_id_attr;
}

void CT_Comment::set_id_attr(const ST_DecimalNumber& _id_attr)
{
    m_has_id_attr = true;
    m_id_attr = new ST_DecimalNumber(_id_attr);
}

const ST_DecimalNumber& CT_Comment::get_id_attr() const
{
    if (m_id_attr)
    {
        return *m_id_attr;
    }
    return ST_DecimalNumber::default_instance();
}

bool CT_Comment::has_author_attr() const
{
    return m_has_author_attr;
}

void CT_Comment::set_author_attr(const ns_s::ST_String& _author_attr)
{
    m_has_author_attr = true;
    m_author_attr = new ns_s::ST_String(_author_attr);
}

const ns_s::ST_String& CT_Comment::get_author_attr() const
{
    if (m_author_attr)
    {
        return *m_author_attr;
    }
    return ns_s::ST_String::default_instance();
}

bool CT_Comment::has_date_attr() const
{
    return m_has_date_attr;
}

void CT_Comment::set_date_attr(const ST_DateTime& _date_attr)
{
    m_has_date_attr = true;
    m_date_attr = new ST_DateTime(_date_attr);
}

const ST_DateTime& CT_Comment::get_date_attr() const
{
    if (m_date_attr)
    {
        return *m_date_attr;
    }
    return ST_DateTime::default_instance();
}

bool CT_Comment::has_initials_attr() const
{
    return m_has_initials_attr;
}

void CT_Comment::set_initials_attr(const ns_s::ST_String& _initials_attr)
{
    m_has_initials_attr = true;
    m_initials_attr = new ns_s::ST_String(_initials_attr);
}

const ns_s::ST_String& CT_Comment::get_initials_attr() const
{
    if (m_initials_attr)
    {
        return *m_initials_attr;
    }
    return ns_s::ST_String::default_instance();
}


// CT_Comment::ChildGroup_1
CT_Comment::ChildGroup_1::ChildGroup_1()
    :m_has_customXml(false),
     m_customXml(NULL),
     m_has_sdt(false),
     m_sdt(NULL),
     m_has_p(false),
     m_p(NULL),
     m_has_tbl(false),
     m_tbl(NULL)
{
}
bool CT_Comment::ChildGroup_1::has_customXml() const
{
    return m_has_customXml;
}

CT_CustomXmlBlock* CT_Comment::ChildGroup_1::mutable_customXml()
{

    m_has_sdt = false;

    if (m_sdt)
    {
        delete m_sdt;
        m_sdt = NULL;
    }
    ;

    m_has_p = false;

    if (m_p)
    {
        delete m_p;
        m_p = NULL;
    }
    ;

    m_has_tbl = false;

    if (m_tbl)
    {
        delete m_tbl;
        m_tbl = NULL;
    }
    ;

    m_has_customXml = true;
    if (!m_customXml)
    {
        m_customXml = new CT_CustomXmlBlock();
    }
    return m_customXml;
}

const CT_CustomXmlBlock& CT_Comment::ChildGroup_1::get_customXml() const
{
    if (m_customXml)
    {
        return *m_customXml;
    }
    return CT_CustomXmlBlock::default_instance();
}

bool CT_Comment::ChildGroup_1::has_sdt() const
{
    return m_has_sdt;
}

CT_SdtBlock* CT_Comment::ChildGroup_1::mutable_sdt()
{

    m_has_customXml = false;

    if (m_customXml)
    {
        delete m_customXml;
        m_customXml = NULL;
    }
    ;

    m_has_p = false;

    if (m_p)
    {
        delete m_p;
        m_p = NULL;
    }
    ;

    m_has_tbl = false;

    if (m_tbl)
    {
        delete m_tbl;
        m_tbl = NULL;
    }
    ;

    m_has_sdt = true;
    if (!m_sdt)
    {
        m_sdt = new CT_SdtBlock();
    }
    return m_sdt;
}

const CT_SdtBlock& CT_Comment::ChildGroup_1::get_sdt() const
{
    if (m_sdt)
    {
        return *m_sdt;
    }
    return CT_SdtBlock::default_instance();
}

bool CT_Comment::ChildGroup_1::has_p() const
{
    return m_has_p;
}

CT_P* CT_Comment::ChildGroup_1::mutable_p()
{

    m_has_customXml = false;

    if (m_customXml)
    {
        delete m_customXml;
        m_customXml = NULL;
    }
    ;

    m_has_sdt = false;

    if (m_sdt)
    {
        delete m_sdt;
        m_sdt = NULL;
    }
    ;

    m_has_tbl = false;

    if (m_tbl)
    {
        delete m_tbl;
        m_tbl = NULL;
    }
    ;

    m_has_p = true;
    if (!m_p)
    {
        m_p = new CT_P();
    }
    return m_p;
}

const CT_P& CT_Comment::ChildGroup_1::get_p() const
{
    if (m_p)
    {
        return *m_p;
    }
    return CT_P::default_instance();
}

bool CT_Comment::ChildGroup_1::has_tbl() const
{
    return m_has_tbl;
}

CT_Tbl* CT_Comment::ChildGroup_1::mutable_tbl()
{

    m_has_customXml = false;

    if (m_customXml)
    {
        delete m_customXml;
        m_customXml = NULL;
    }
    ;

    m_has_sdt = false;

    if (m_sdt)
    {
        delete m_sdt;
        m_sdt = NULL;
    }
    ;

    m_has_p = false;

    if (m_p)
    {
        delete m_p;
        m_p = NULL;
    }
    ;

    m_has_tbl = true;
    if (!m_tbl)
    {
        m_tbl = new CT_Tbl();
    }
    return m_tbl;
}

const CT_Tbl& CT_Comment::ChildGroup_1::get_tbl() const
{
    if (m_tbl)
    {
        return *m_tbl;
    }
    return CT_Tbl::default_instance();
}


// CT_Comment::ChildGroup_2
CT_Comment::ChildGroup_2::ChildGroup_2()
    :m_has_proofErr(false),
     m_proofErr(NULL),
     m_has_permStart(false),
     m_permStart(NULL),
     m_has_permEnd(false),
     m_permEnd(NULL)
{
}
bool CT_Comment::ChildGroup_2::has_proofErr() const
{
    return m_has_proofErr;
}

CT_ProofErr* CT_Comment::ChildGroup_2::mutable_proofErr()
{

    m_has_permStart = false;

    if (m_permStart)
    {
        delete m_permStart;
        m_permStart = NULL;
    }
    ;

    m_has_permEnd = false;

    if (m_permEnd)
    {
        delete m_permEnd;
        m_permEnd = NULL;
    }
    ;

    m_has_proofErr = true;
    if (!m_proofErr)
    {
        m_proofErr = new CT_ProofErr();
    }
    return m_proofErr;
}

const CT_ProofErr& CT_Comment::ChildGroup_2::get_proofErr() const
{
    if (m_proofErr)
    {
        return *m_proofErr;
    }
    return CT_ProofErr::default_instance();
}

bool CT_Comment::ChildGroup_2::has_permStart() const
{
    return m_has_permStart;
}

CT_PermStart* CT_Comment::ChildGroup_2::mutable_permStart()
{

    m_has_proofErr = false;

    if (m_proofErr)
    {
        delete m_proofErr;
        m_proofErr = NULL;
    }
    ;

    m_has_permEnd = false;

    if (m_permEnd)
    {
        delete m_permEnd;
        m_permEnd = NULL;
    }
    ;

    m_has_permStart = true;
    if (!m_permStart)
    {
        m_permStart = new CT_PermStart();
    }
    return m_permStart;
}

const CT_PermStart& CT_Comment::ChildGroup_2::get_permStart() const
{
    if (m_permStart)
    {
        return *m_permStart;
    }
    return CT_PermStart::default_instance();
}

bool CT_Comment::ChildGroup_2::has_permEnd() const
{
    return m_has_permEnd;
}

CT_Perm* CT_Comment::ChildGroup_2::mutable_permEnd()
{

    m_has_proofErr = false;

    if (m_proofErr)
    {
        delete m_proofErr;
        m_proofErr = NULL;
    }
    ;

    m_has_permStart = false;

    if (m_permStart)
    {
        delete m_permStart;
        m_permStart = NULL;
    }
    ;

    m_has_permEnd = true;
    if (!m_permEnd)
    {
        m_permEnd = new CT_Perm();
    }
    return m_permEnd;
}

const CT_Perm& CT_Comment::ChildGroup_2::get_permEnd() const
{
    if (m_permEnd)
    {
        return *m_permEnd;
    }
    return CT_Perm::default_instance();
}


// CT_Comment::ChildGroup_3
CT_Comment::ChildGroup_3::ChildGroup_3()
    :m_has_bookmarkStart(false),
     m_bookmarkStart(NULL),
     m_has_bookmarkEnd(false),
     m_bookmarkEnd(NULL),
     m_has_moveFromRangeStart(false),
     m_moveFromRangeStart(NULL),
     m_has_moveFromRangeEnd(false),
     m_moveFromRangeEnd(NULL),
     m_has_moveToRangeStart(false),
     m_moveToRangeStart(NULL),
     m_has_moveToRangeEnd(false),
     m_moveToRangeEnd(NULL),
     m_has_commentRangeStart(false),
     m_commentRangeStart(NULL),
     m_has_commentRangeEnd(false),
     m_commentRangeEnd(NULL),
     m_has_customXmlInsRangeStart(false),
     m_customXmlInsRangeStart(NULL),
     m_has_customXmlInsRangeEnd(false),
     m_customXmlInsRangeEnd(NULL),
     m_has_customXmlDelRangeStart(false),
     m_customXmlDelRangeStart(NULL),
     m_has_customXmlDelRangeEnd(false),
     m_customXmlDelRangeEnd(NULL),
     m_has_customXmlMoveFromRangeStart(false),
     m_customXmlMoveFromRangeStart(NULL),
     m_has_customXmlMoveFromRangeEnd(false),
     m_customXmlMoveFromRangeEnd(NULL),
     m_has_customXmlMoveToRangeStart(false),
     m_customXmlMoveToRangeStart(NULL),
     m_has_customXmlMoveToRangeEnd(false),
     m_customXmlMoveToRangeEnd(NULL),
     m_has_ins(false),
     m_ins(NULL),
     m_has_del(false),
     m_del(NULL),
     m_has_moveFrom(false),
     m_moveFrom(NULL),
     m_has_moveTo(false),
     m_moveTo(NULL)
{
}
bool CT_Comment::ChildGroup_3::has_bookmarkStart() const
{
    return m_has_bookmarkStart;
}

CT_Bookmark* CT_Comment::ChildGroup_3::mutable_bookmarkStart()
{

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_bookmarkStart = true;
    if (!m_bookmarkStart)
    {
        m_bookmarkStart = new CT_Bookmark();
    }
    return m_bookmarkStart;
}

const CT_Bookmark& CT_Comment::ChildGroup_3::get_bookmarkStart() const
{
    if (m_bookmarkStart)
    {
        return *m_bookmarkStart;
    }
    return CT_Bookmark::default_instance();
}

bool CT_Comment::ChildGroup_3::has_bookmarkEnd() const
{
    return m_has_bookmarkEnd;
}

CT_MarkupRange* CT_Comment::ChildGroup_3::mutable_bookmarkEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_bookmarkEnd = true;
    if (!m_bookmarkEnd)
    {
        m_bookmarkEnd = new CT_MarkupRange();
    }
    return m_bookmarkEnd;
}

const CT_MarkupRange& CT_Comment::ChildGroup_3::get_bookmarkEnd() const
{
    if (m_bookmarkEnd)
    {
        return *m_bookmarkEnd;
    }
    return CT_MarkupRange::default_instance();
}

bool CT_Comment::ChildGroup_3::has_moveFromRangeStart() const
{
    return m_has_moveFromRangeStart;
}

CT_MoveBookmark* CT_Comment::ChildGroup_3::mutable_moveFromRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_moveFromRangeStart = true;
    if (!m_moveFromRangeStart)
    {
        m_moveFromRangeStart = new CT_MoveBookmark();
    }
    return m_moveFromRangeStart;
}

const CT_MoveBookmark& CT_Comment::ChildGroup_3::get_moveFromRangeStart() const
{
    if (m_moveFromRangeStart)
    {
        return *m_moveFromRangeStart;
    }
    return CT_MoveBookmark::default_instance();
}

bool CT_Comment::ChildGroup_3::has_moveFromRangeEnd() const
{
    return m_has_moveFromRangeEnd;
}

CT_MarkupRange* CT_Comment::ChildGroup_3::mutable_moveFromRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_moveFromRangeEnd = true;
    if (!m_moveFromRangeEnd)
    {
        m_moveFromRangeEnd = new CT_MarkupRange();
    }
    return m_moveFromRangeEnd;
}

const CT_MarkupRange& CT_Comment::ChildGroup_3::get_moveFromRangeEnd() const
{
    if (m_moveFromRangeEnd)
    {
        return *m_moveFromRangeEnd;
    }
    return CT_MarkupRange::default_instance();
}

bool CT_Comment::ChildGroup_3::has_moveToRangeStart() const
{
    return m_has_moveToRangeStart;
}

CT_MoveBookmark* CT_Comment::ChildGroup_3::mutable_moveToRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_moveToRangeStart = true;
    if (!m_moveToRangeStart)
    {
        m_moveToRangeStart = new CT_MoveBookmark();
    }
    return m_moveToRangeStart;
}

const CT_MoveBookmark& CT_Comment::ChildGroup_3::get_moveToRangeStart() const
{
    if (m_moveToRangeStart)
    {
        return *m_moveToRangeStart;
    }
    return CT_MoveBookmark::default_instance();
}

bool CT_Comment::ChildGroup_3::has_moveToRangeEnd() const
{
    return m_has_moveToRangeEnd;
}

CT_MarkupRange* CT_Comment::ChildGroup_3::mutable_moveToRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_moveToRangeEnd = true;
    if (!m_moveToRangeEnd)
    {
        m_moveToRangeEnd = new CT_MarkupRange();
    }
    return m_moveToRangeEnd;
}

const CT_MarkupRange& CT_Comment::ChildGroup_3::get_moveToRangeEnd() const
{
    if (m_moveToRangeEnd)
    {
        return *m_moveToRangeEnd;
    }
    return CT_MarkupRange::default_instance();
}

bool CT_Comment::ChildGroup_3::has_commentRangeStart() const
{
    return m_has_commentRangeStart;
}

CT_MarkupRange* CT_Comment::ChildGroup_3::mutable_commentRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_commentRangeStart = true;
    if (!m_commentRangeStart)
    {
        m_commentRangeStart = new CT_MarkupRange();
    }
    return m_commentRangeStart;
}

const CT_MarkupRange& CT_Comment::ChildGroup_3::get_commentRangeStart() const
{
    if (m_commentRangeStart)
    {
        return *m_commentRangeStart;
    }
    return CT_MarkupRange::default_instance();
}

bool CT_Comment::ChildGroup_3::has_commentRangeEnd() const
{
    return m_has_commentRangeEnd;
}

CT_MarkupRange* CT_Comment::ChildGroup_3::mutable_commentRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_commentRangeEnd = true;
    if (!m_commentRangeEnd)
    {
        m_commentRangeEnd = new CT_MarkupRange();
    }
    return m_commentRangeEnd;
}

const CT_MarkupRange& CT_Comment::ChildGroup_3::get_commentRangeEnd() const
{
    if (m_commentRangeEnd)
    {
        return *m_commentRangeEnd;
    }
    return CT_MarkupRange::default_instance();
}

bool CT_Comment::ChildGroup_3::has_customXmlInsRangeStart() const
{
    return m_has_customXmlInsRangeStart;
}

CT_TrackChange* CT_Comment::ChildGroup_3::mutable_customXmlInsRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = true;
    if (!m_customXmlInsRangeStart)
    {
        m_customXmlInsRangeStart = new CT_TrackChange();
    }
    return m_customXmlInsRangeStart;
}

const CT_TrackChange& CT_Comment::ChildGroup_3::get_customXmlInsRangeStart() const
{
    if (m_customXmlInsRangeStart)
    {
        return *m_customXmlInsRangeStart;
    }
    return CT_TrackChange::default_instance();
}

bool CT_Comment::ChildGroup_3::has_customXmlInsRangeEnd() const
{
    return m_has_customXmlInsRangeEnd;
}

CT_Markup* CT_Comment::ChildGroup_3::mutable_customXmlInsRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = true;
    if (!m_customXmlInsRangeEnd)
    {
        m_customXmlInsRangeEnd = new CT_Markup();
    }
    return m_customXmlInsRangeEnd;
}

const CT_Markup& CT_Comment::ChildGroup_3::get_customXmlInsRangeEnd() const
{
    if (m_customXmlInsRangeEnd)
    {
        return *m_customXmlInsRangeEnd;
    }
    return CT_Markup::default_instance();
}

bool CT_Comment::ChildGroup_3::has_customXmlDelRangeStart() const
{
    return m_has_customXmlDelRangeStart;
}

CT_TrackChange* CT_Comment::ChildGroup_3::mutable_customXmlDelRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = true;
    if (!m_customXmlDelRangeStart)
    {
        m_customXmlDelRangeStart = new CT_TrackChange();
    }
    return m_customXmlDelRangeStart;
}

const CT_TrackChange& CT_Comment::ChildGroup_3::get_customXmlDelRangeStart() const
{
    if (m_customXmlDelRangeStart)
    {
        return *m_customXmlDelRangeStart;
    }
    return CT_TrackChange::default_instance();
}

bool CT_Comment::ChildGroup_3::has_customXmlDelRangeEnd() const
{
    return m_has_customXmlDelRangeEnd;
}

CT_Markup* CT_Comment::ChildGroup_3::mutable_customXmlDelRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = true;
    if (!m_customXmlDelRangeEnd)
    {
        m_customXmlDelRangeEnd = new CT_Markup();
    }
    return m_customXmlDelRangeEnd;
}

const CT_Markup& CT_Comment::ChildGroup_3::get_customXmlDelRangeEnd() const
{
    if (m_customXmlDelRangeEnd)
    {
        return *m_customXmlDelRangeEnd;
    }
    return CT_Markup::default_instance();
}

bool CT_Comment::ChildGroup_3::has_customXmlMoveFromRangeStart() const
{
    return m_has_customXmlMoveFromRangeStart;
}

CT_TrackChange* CT_Comment::ChildGroup_3::mutable_customXmlMoveFromRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = true;
    if (!m_customXmlMoveFromRangeStart)
    {
        m_customXmlMoveFromRangeStart = new CT_TrackChange();
    }
    return m_customXmlMoveFromRangeStart;
}

const CT_TrackChange& CT_Comment::ChildGroup_3::get_customXmlMoveFromRangeStart() const
{
    if (m_customXmlMoveFromRangeStart)
    {
        return *m_customXmlMoveFromRangeStart;
    }
    return CT_TrackChange::default_instance();
}

bool CT_Comment::ChildGroup_3::has_customXmlMoveFromRangeEnd() const
{
    return m_has_customXmlMoveFromRangeEnd;
}

CT_Markup* CT_Comment::ChildGroup_3::mutable_customXmlMoveFromRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = true;
    if (!m_customXmlMoveFromRangeEnd)
    {
        m_customXmlMoveFromRangeEnd = new CT_Markup();
    }
    return m_customXmlMoveFromRangeEnd;
}

const CT_Markup& CT_Comment::ChildGroup_3::get_customXmlMoveFromRangeEnd() const
{
    if (m_customXmlMoveFromRangeEnd)
    {
        return *m_customXmlMoveFromRangeEnd;
    }
    return CT_Markup::default_instance();
}

bool CT_Comment::ChildGroup_3::has_customXmlMoveToRangeStart() const
{
    return m_has_customXmlMoveToRangeStart;
}

CT_TrackChange* CT_Comment::ChildGroup_3::mutable_customXmlMoveToRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = true;
    if (!m_customXmlMoveToRangeStart)
    {
        m_customXmlMoveToRangeStart = new CT_TrackChange();
    }
    return m_customXmlMoveToRangeStart;
}

const CT_TrackChange& CT_Comment::ChildGroup_3::get_customXmlMoveToRangeStart() const
{
    if (m_customXmlMoveToRangeStart)
    {
        return *m_customXmlMoveToRangeStart;
    }
    return CT_TrackChange::default_instance();
}

bool CT_Comment::ChildGroup_3::has_customXmlMoveToRangeEnd() const
{
    return m_has_customXmlMoveToRangeEnd;
}

CT_Markup* CT_Comment::ChildGroup_3::mutable_customXmlMoveToRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = true;
    if (!m_customXmlMoveToRangeEnd)
    {
        m_customXmlMoveToRangeEnd = new CT_Markup();
    }
    return m_customXmlMoveToRangeEnd;
}

const CT_Markup& CT_Comment::ChildGroup_3::get_customXmlMoveToRangeEnd() const
{
    if (m_customXmlMoveToRangeEnd)
    {
        return *m_customXmlMoveToRangeEnd;
    }
    return CT_Markup::default_instance();
}

bool CT_Comment::ChildGroup_3::has_ins() const
{
    return m_has_ins;
}

CT_RunTrackChange* CT_Comment::ChildGroup_3::mutable_ins()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_ins = true;
    if (!m_ins)
    {
        m_ins = new CT_RunTrackChange();
    }
    return m_ins;
}

const CT_RunTrackChange& CT_Comment::ChildGroup_3::get_ins() const
{
    if (m_ins)
    {
        return *m_ins;
    }
    return CT_RunTrackChange::default_instance();
}

bool CT_Comment::ChildGroup_3::has_del() const
{
    return m_has_del;
}

CT_RunTrackChange* CT_Comment::ChildGroup_3::mutable_del()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_del = true;
    if (!m_del)
    {
        m_del = new CT_RunTrackChange();
    }
    return m_del;
}

const CT_RunTrackChange& CT_Comment::ChildGroup_3::get_del() const
{
    if (m_del)
    {
        return *m_del;
    }
    return CT_RunTrackChange::default_instance();
}

bool CT_Comment::ChildGroup_3::has_moveFrom() const
{
    return m_has_moveFrom;
}

CT_RunTrackChange* CT_Comment::ChildGroup_3::mutable_moveFrom()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_moveFrom = true;
    if (!m_moveFrom)
    {
        m_moveFrom = new CT_RunTrackChange();
    }
    return m_moveFrom;
}

const CT_RunTrackChange& CT_Comment::ChildGroup_3::get_moveFrom() const
{
    if (m_moveFrom)
    {
        return *m_moveFrom;
    }
    return CT_RunTrackChange::default_instance();
}

bool CT_Comment::ChildGroup_3::has_moveTo() const
{
    return m_has_moveTo;
}

CT_RunTrackChange* CT_Comment::ChildGroup_3::mutable_moveTo()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = true;
    if (!m_moveTo)
    {
        m_moveTo = new CT_RunTrackChange();
    }
    return m_moveTo;
}

const CT_RunTrackChange& CT_Comment::ChildGroup_3::get_moveTo() const
{
    if (m_moveTo)
    {
        return *m_moveTo;
    }
    return CT_RunTrackChange::default_instance();
}


// CT_Comment::ChildGroup_4
CT_Comment::ChildGroup_4::ChildGroup_4()
    :m_has_m_oMathPara(false),
     m_m_oMathPara(NULL),
     m_has_m_oMath(false),
     m_m_oMath(NULL),
     m_has_altChunk(false),
     m_altChunk(NULL)
{
}
bool CT_Comment::ChildGroup_4::has_m_oMathPara() const
{
    return m_has_m_oMathPara;
}

ns_m::CT_OMathPara* CT_Comment::ChildGroup_4::mutable_m_oMathPara()
{

    m_has_m_oMath = false;

    if (m_m_oMath)
    {
        delete m_m_oMath;
        m_m_oMath = NULL;
    }
    ;

    m_has_altChunk = false;

    if (m_altChunk)
    {
        delete m_altChunk;
        m_altChunk = NULL;
    }
    ;

    m_has_m_oMathPara = true;
    if (!m_m_oMathPara)
    {
        m_m_oMathPara = new ns_m::CT_OMathPara();
    }
    return m_m_oMathPara;
}

const ns_m::CT_OMathPara& CT_Comment::ChildGroup_4::get_m_oMathPara() const
{
    if (m_m_oMathPara)
    {
        return *m_m_oMathPara;
    }
    return ns_m::CT_OMathPara::default_instance();
}

bool CT_Comment::ChildGroup_4::has_m_oMath() const
{
    return m_has_m_oMath;
}

ns_m::CT_OMath* CT_Comment::ChildGroup_4::mutable_m_oMath()
{

    m_has_m_oMathPara = false;

    if (m_m_oMathPara)
    {
        delete m_m_oMathPara;
        m_m_oMathPara = NULL;
    }
    ;

    m_has_altChunk = false;

    if (m_altChunk)
    {
        delete m_altChunk;
        m_altChunk = NULL;
    }
    ;

    m_has_m_oMath = true;
    if (!m_m_oMath)
    {
        m_m_oMath = new ns_m::CT_OMath();
    }
    return m_m_oMath;
}

const ns_m::CT_OMath& CT_Comment::ChildGroup_4::get_m_oMath() const
{
    if (m_m_oMath)
    {
        return *m_m_oMath;
    }
    return ns_m::CT_OMath::default_instance();
}

bool CT_Comment::ChildGroup_4::has_altChunk() const
{
    return m_has_altChunk;
}

CT_AltChunk* CT_Comment::ChildGroup_4::mutable_altChunk()
{

    m_has_m_oMathPara = false;

    if (m_m_oMathPara)
    {
        delete m_m_oMathPara;
        m_m_oMathPara = NULL;
    }
    ;

    m_has_m_oMath = false;

    if (m_m_oMath)
    {
        delete m_m_oMath;
        m_m_oMath = NULL;
    }
    ;

    m_has_altChunk = true;
    if (!m_altChunk)
    {
        m_altChunk = new CT_AltChunk();
    }
    return m_altChunk;
}

const CT_AltChunk& CT_Comment::ChildGroup_4::get_altChunk() const
{
    if (m_altChunk)
    {
        return *m_altChunk;
    }
    return CT_AltChunk::default_instance();
}

CT_Comment* CT_Comment::default_instance_ = NULL;

// CT_TrackChangeNumbering
CT_TrackChangeNumbering::CT_TrackChangeNumbering()
    :m_has_id_attr(false),
     m_id_attr(NULL),
     m_has_author_attr(false),
     m_author_attr(NULL),
     m_has_date_attr(false),
     m_date_attr(NULL),
     m_has_original_attr(false),
     m_original_attr(NULL)
{
}
CT_TrackChangeNumbering::~CT_TrackChangeNumbering()
{
    clear();
}
void CT_TrackChangeNumbering::clear()
{
    m_has_id_attr = false;

    if (m_id_attr)
    {
        delete m_id_attr;
        m_id_attr = NULL;
    }


    m_has_author_attr = false;

    if (m_author_attr)
    {
        delete m_author_attr;
        m_author_attr = NULL;
    }


    m_has_date_attr = false;

    if (m_date_attr)
    {
        delete m_date_attr;
        m_date_attr = NULL;
    }


    m_has_original_attr = false;

    if (m_original_attr)
    {
        delete m_original_attr;
        m_original_attr = NULL;
    }

}

void CT_TrackChangeNumbering::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_id_attr);
    if (m_has_id_attr)
    {
        m_id_attr->toXmlAttr("w:id", _outStream);
    }


    assert(m_has_author_attr);
    if (m_has_author_attr)
    {
        m_author_attr->toXmlAttr("w:author", _outStream);
    }



    if (m_has_date_attr)
    {
        m_date_attr->toXmlAttr("w:date", _outStream);
    }



    if (m_has_original_attr)
    {
        m_original_attr->toXmlAttr("w:original", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_TrackChangeNumbering& CT_TrackChangeNumbering::default_instance()
{
    if (!CT_TrackChangeNumbering::default_instance_)
    {
        CT_TrackChangeNumbering::default_instance_ = new CT_TrackChangeNumbering();
    }
    return *CT_TrackChangeNumbering::default_instance_;
}

bool CT_TrackChangeNumbering::has_id_attr() const
{
    return m_has_id_attr;
}

void CT_TrackChangeNumbering::set_id_attr(const ST_DecimalNumber& _id_attr)
{
    m_has_id_attr = true;
    m_id_attr = new ST_DecimalNumber(_id_attr);
}

const ST_DecimalNumber& CT_TrackChangeNumbering::get_id_attr() const
{
    if (m_id_attr)
    {
        return *m_id_attr;
    }
    return ST_DecimalNumber::default_instance();
}

bool CT_TrackChangeNumbering::has_author_attr() const
{
    return m_has_author_attr;
}

void CT_TrackChangeNumbering::set_author_attr(const ns_s::ST_String& _author_attr)
{
    m_has_author_attr = true;
    m_author_attr = new ns_s::ST_String(_author_attr);
}

const ns_s::ST_String& CT_TrackChangeNumbering::get_author_attr() const
{
    if (m_author_attr)
    {
        return *m_author_attr;
    }
    return ns_s::ST_String::default_instance();
}

bool CT_TrackChangeNumbering::has_date_attr() const
{
    return m_has_date_attr;
}

void CT_TrackChangeNumbering::set_date_attr(const ST_DateTime& _date_attr)
{
    m_has_date_attr = true;
    m_date_attr = new ST_DateTime(_date_attr);
}

const ST_DateTime& CT_TrackChangeNumbering::get_date_attr() const
{
    if (m_date_attr)
    {
        return *m_date_attr;
    }
    return ST_DateTime::default_instance();
}

bool CT_TrackChangeNumbering::has_original_attr() const
{
    return m_has_original_attr;
}

void CT_TrackChangeNumbering::set_original_attr(const ns_s::ST_String& _original_attr)
{
    m_has_original_attr = true;
    m_original_attr = new ns_s::ST_String(_original_attr);
}

const ns_s::ST_String& CT_TrackChangeNumbering::get_original_attr() const
{
    if (m_original_attr)
    {
        return *m_original_attr;
    }
    return ns_s::ST_String::default_instance();
}

CT_TrackChangeNumbering* CT_TrackChangeNumbering::default_instance_ = NULL;

// CT_TblPrExChange
CT_TblPrExChange::CT_TblPrExChange()
    :m_has_tblPrEx(false),
     m_tblPrEx(NULL),
     m_has_id_attr(false),
     m_id_attr(NULL),
     m_has_author_attr(false),
     m_author_attr(NULL),
     m_has_date_attr(false),
     m_date_attr(NULL)
{
}
CT_TblPrExChange::~CT_TblPrExChange()
{
    clear();
}
bool CT_TblPrExChange::has_tblPrEx() const
{
    return m_has_tblPrEx;
}

CT_TblPrExBase* CT_TblPrExChange::mutable_tblPrEx()
{
    m_has_tblPrEx = true;
    if (!m_tblPrEx)
    {
        m_tblPrEx = new CT_TblPrExBase();
    }
    return m_tblPrEx;
}

const CT_TblPrExBase& CT_TblPrExChange::get_tblPrEx() const
{
    if (m_tblPrEx)
    {
        return *m_tblPrEx;
    }
    return CT_TblPrExBase::default_instance();
}

void CT_TblPrExChange::clear()
{
    m_has_id_attr = false;

    if (m_id_attr)
    {
        delete m_id_attr;
        m_id_attr = NULL;
    }


    m_has_author_attr = false;

    if (m_author_attr)
    {
        delete m_author_attr;
        m_author_attr = NULL;
    }


    m_has_date_attr = false;

    if (m_date_attr)
    {
        delete m_date_attr;
        m_date_attr = NULL;
    }


    m_has_tblPrEx = false;

    if (m_tblPrEx)
    {
        delete m_tblPrEx;
        m_tblPrEx = NULL;
    }

}

void CT_TblPrExChange::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_id_attr);
    if (m_has_id_attr)
    {
        m_id_attr->toXmlAttr("w:id", _outStream);
    }


    assert(m_has_author_attr);
    if (m_has_author_attr)
    {
        m_author_attr->toXmlAttr("w:author", _outStream);
    }



    if (m_has_date_attr)
    {
        m_date_attr->toXmlAttr("w:date", _outStream);
    }

    _outStream << ">";

    assert(m_has_tblPrEx);


    if (m_has_tblPrEx)
    {
        m_tblPrEx->toXmlElem("w:tblPrEx", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_TblPrExChange& CT_TblPrExChange::default_instance()
{
    if (!CT_TblPrExChange::default_instance_)
    {
        CT_TblPrExChange::default_instance_ = new CT_TblPrExChange();
    }
    return *CT_TblPrExChange::default_instance_;
}

bool CT_TblPrExChange::has_id_attr() const
{
    return m_has_id_attr;
}

void CT_TblPrExChange::set_id_attr(const ST_DecimalNumber& _id_attr)
{
    m_has_id_attr = true;
    m_id_attr = new ST_DecimalNumber(_id_attr);
}

const ST_DecimalNumber& CT_TblPrExChange::get_id_attr() const
{
    if (m_id_attr)
    {
        return *m_id_attr;
    }
    return ST_DecimalNumber::default_instance();
}

bool CT_TblPrExChange::has_author_attr() const
{
    return m_has_author_attr;
}

void CT_TblPrExChange::set_author_attr(const ns_s::ST_String& _author_attr)
{
    m_has_author_attr = true;
    m_author_attr = new ns_s::ST_String(_author_attr);
}

const ns_s::ST_String& CT_TblPrExChange::get_author_attr() const
{
    if (m_author_attr)
    {
        return *m_author_attr;
    }
    return ns_s::ST_String::default_instance();
}

bool CT_TblPrExChange::has_date_attr() const
{
    return m_has_date_attr;
}

void CT_TblPrExChange::set_date_attr(const ST_DateTime& _date_attr)
{
    m_has_date_attr = true;
    m_date_attr = new ST_DateTime(_date_attr);
}

const ST_DateTime& CT_TblPrExChange::get_date_attr() const
{
    if (m_date_attr)
    {
        return *m_date_attr;
    }
    return ST_DateTime::default_instance();
}

CT_TblPrExChange* CT_TblPrExChange::default_instance_ = NULL;

// CT_TcPrChange
CT_TcPrChange::CT_TcPrChange()
    :m_has_tcPr(false),
     m_tcPr(NULL),
     m_has_id_attr(false),
     m_id_attr(NULL),
     m_has_author_attr(false),
     m_author_attr(NULL),
     m_has_date_attr(false),
     m_date_attr(NULL)
{
}
CT_TcPrChange::~CT_TcPrChange()
{
    clear();
}
bool CT_TcPrChange::has_tcPr() const
{
    return m_has_tcPr;
}

CT_TcPrInner* CT_TcPrChange::mutable_tcPr()
{
    m_has_tcPr = true;
    if (!m_tcPr)
    {
        m_tcPr = new CT_TcPrInner();
    }
    return m_tcPr;
}

const CT_TcPrInner& CT_TcPrChange::get_tcPr() const
{
    if (m_tcPr)
    {
        return *m_tcPr;
    }
    return CT_TcPrInner::default_instance();
}

void CT_TcPrChange::clear()
{
    m_has_id_attr = false;

    if (m_id_attr)
    {
        delete m_id_attr;
        m_id_attr = NULL;
    }


    m_has_author_attr = false;

    if (m_author_attr)
    {
        delete m_author_attr;
        m_author_attr = NULL;
    }


    m_has_date_attr = false;

    if (m_date_attr)
    {
        delete m_date_attr;
        m_date_attr = NULL;
    }


    m_has_tcPr = false;

    if (m_tcPr)
    {
        delete m_tcPr;
        m_tcPr = NULL;
    }

}

void CT_TcPrChange::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_id_attr);
    if (m_has_id_attr)
    {
        m_id_attr->toXmlAttr("w:id", _outStream);
    }


    assert(m_has_author_attr);
    if (m_has_author_attr)
    {
        m_author_attr->toXmlAttr("w:author", _outStream);
    }



    if (m_has_date_attr)
    {
        m_date_attr->toXmlAttr("w:date", _outStream);
    }

    _outStream << ">";

    assert(m_has_tcPr);


    if (m_has_tcPr)
    {
        m_tcPr->toXmlElem("w:tcPr", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_TcPrChange& CT_TcPrChange::default_instance()
{
    if (!CT_TcPrChange::default_instance_)
    {
        CT_TcPrChange::default_instance_ = new CT_TcPrChange();
    }
    return *CT_TcPrChange::default_instance_;
}

bool CT_TcPrChange::has_id_attr() const
{
    return m_has_id_attr;
}

void CT_TcPrChange::set_id_attr(const ST_DecimalNumber& _id_attr)
{
    m_has_id_attr = true;
    m_id_attr = new ST_DecimalNumber(_id_attr);
}

const ST_DecimalNumber& CT_TcPrChange::get_id_attr() const
{
    if (m_id_attr)
    {
        return *m_id_attr;
    }
    return ST_DecimalNumber::default_instance();
}

bool CT_TcPrChange::has_author_attr() const
{
    return m_has_author_attr;
}

void CT_TcPrChange::set_author_attr(const ns_s::ST_String& _author_attr)
{
    m_has_author_attr = true;
    m_author_attr = new ns_s::ST_String(_author_attr);
}

const ns_s::ST_String& CT_TcPrChange::get_author_attr() const
{
    if (m_author_attr)
    {
        return *m_author_attr;
    }
    return ns_s::ST_String::default_instance();
}

bool CT_TcPrChange::has_date_attr() const
{
    return m_has_date_attr;
}

void CT_TcPrChange::set_date_attr(const ST_DateTime& _date_attr)
{
    m_has_date_attr = true;
    m_date_attr = new ST_DateTime(_date_attr);
}

const ST_DateTime& CT_TcPrChange::get_date_attr() const
{
    if (m_date_attr)
    {
        return *m_date_attr;
    }
    return ST_DateTime::default_instance();
}

CT_TcPrChange* CT_TcPrChange::default_instance_ = NULL;

// CT_TrPrChange
CT_TrPrChange::CT_TrPrChange()
    :m_has_trPr(false),
     m_trPr(NULL),
     m_has_id_attr(false),
     m_id_attr(NULL),
     m_has_author_attr(false),
     m_author_attr(NULL),
     m_has_date_attr(false),
     m_date_attr(NULL)
{
}
CT_TrPrChange::~CT_TrPrChange()
{
    clear();
}
bool CT_TrPrChange::has_trPr() const
{
    return m_has_trPr;
}

CT_TrPrBase* CT_TrPrChange::mutable_trPr()
{
    m_has_trPr = true;
    if (!m_trPr)
    {
        m_trPr = new CT_TrPrBase();
    }
    return m_trPr;
}

const CT_TrPrBase& CT_TrPrChange::get_trPr() const
{
    if (m_trPr)
    {
        return *m_trPr;
    }
    return CT_TrPrBase::default_instance();
}

void CT_TrPrChange::clear()
{
    m_has_id_attr = false;

    if (m_id_attr)
    {
        delete m_id_attr;
        m_id_attr = NULL;
    }


    m_has_author_attr = false;

    if (m_author_attr)
    {
        delete m_author_attr;
        m_author_attr = NULL;
    }


    m_has_date_attr = false;

    if (m_date_attr)
    {
        delete m_date_attr;
        m_date_attr = NULL;
    }


    m_has_trPr = false;

    if (m_trPr)
    {
        delete m_trPr;
        m_trPr = NULL;
    }

}

void CT_TrPrChange::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_id_attr);
    if (m_has_id_attr)
    {
        m_id_attr->toXmlAttr("w:id", _outStream);
    }


    assert(m_has_author_attr);
    if (m_has_author_attr)
    {
        m_author_attr->toXmlAttr("w:author", _outStream);
    }



    if (m_has_date_attr)
    {
        m_date_attr->toXmlAttr("w:date", _outStream);
    }

    _outStream << ">";

    assert(m_has_trPr);


    if (m_has_trPr)
    {
        m_trPr->toXmlElem("w:trPr", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_TrPrChange& CT_TrPrChange::default_instance()
{
    if (!CT_TrPrChange::default_instance_)
    {
        CT_TrPrChange::default_instance_ = new CT_TrPrChange();
    }
    return *CT_TrPrChange::default_instance_;
}

bool CT_TrPrChange::has_id_attr() const
{
    return m_has_id_attr;
}

void CT_TrPrChange::set_id_attr(const ST_DecimalNumber& _id_attr)
{
    m_has_id_attr = true;
    m_id_attr = new ST_DecimalNumber(_id_attr);
}

const ST_DecimalNumber& CT_TrPrChange::get_id_attr() const
{
    if (m_id_attr)
    {
        return *m_id_attr;
    }
    return ST_DecimalNumber::default_instance();
}

bool CT_TrPrChange::has_author_attr() const
{
    return m_has_author_attr;
}

void CT_TrPrChange::set_author_attr(const ns_s::ST_String& _author_attr)
{
    m_has_author_attr = true;
    m_author_attr = new ns_s::ST_String(_author_attr);
}

const ns_s::ST_String& CT_TrPrChange::get_author_attr() const
{
    if (m_author_attr)
    {
        return *m_author_attr;
    }
    return ns_s::ST_String::default_instance();
}

bool CT_TrPrChange::has_date_attr() const
{
    return m_has_date_attr;
}

void CT_TrPrChange::set_date_attr(const ST_DateTime& _date_attr)
{
    m_has_date_attr = true;
    m_date_attr = new ST_DateTime(_date_attr);
}

const ST_DateTime& CT_TrPrChange::get_date_attr() const
{
    if (m_date_attr)
    {
        return *m_date_attr;
    }
    return ST_DateTime::default_instance();
}

CT_TrPrChange* CT_TrPrChange::default_instance_ = NULL;

// CT_TblGridChange
CT_TblGridChange::CT_TblGridChange()
    :m_has_tblGrid(false),
     m_tblGrid(NULL),
     m_has_id_attr(false),
     m_id_attr(NULL)
{
}
CT_TblGridChange::~CT_TblGridChange()
{
    clear();
}
bool CT_TblGridChange::has_tblGrid() const
{
    return m_has_tblGrid;
}

CT_TblGridBase* CT_TblGridChange::mutable_tblGrid()
{
    m_has_tblGrid = true;
    if (!m_tblGrid)
    {
        m_tblGrid = new CT_TblGridBase();
    }
    return m_tblGrid;
}

const CT_TblGridBase& CT_TblGridChange::get_tblGrid() const
{
    if (m_tblGrid)
    {
        return *m_tblGrid;
    }
    return CT_TblGridBase::default_instance();
}

void CT_TblGridChange::clear()
{
    m_has_id_attr = false;

    if (m_id_attr)
    {
        delete m_id_attr;
        m_id_attr = NULL;
    }


    m_has_tblGrid = false;

    if (m_tblGrid)
    {
        delete m_tblGrid;
        m_tblGrid = NULL;
    }

}

void CT_TblGridChange::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_id_attr);
    if (m_has_id_attr)
    {
        m_id_attr->toXmlAttr("w:id", _outStream);
    }

    _outStream << ">";

    assert(m_has_tblGrid);


    if (m_has_tblGrid)
    {
        m_tblGrid->toXmlElem("w:tblGrid", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_TblGridChange& CT_TblGridChange::default_instance()
{
    if (!CT_TblGridChange::default_instance_)
    {
        CT_TblGridChange::default_instance_ = new CT_TblGridChange();
    }
    return *CT_TblGridChange::default_instance_;
}

bool CT_TblGridChange::has_id_attr() const
{
    return m_has_id_attr;
}

void CT_TblGridChange::set_id_attr(const ST_DecimalNumber& _id_attr)
{
    m_has_id_attr = true;
    m_id_attr = new ST_DecimalNumber(_id_attr);
}

const ST_DecimalNumber& CT_TblGridChange::get_id_attr() const
{
    if (m_id_attr)
    {
        return *m_id_attr;
    }
    return ST_DecimalNumber::default_instance();
}

CT_TblGridChange* CT_TblGridChange::default_instance_ = NULL;

// CT_TblPrChange
CT_TblPrChange::CT_TblPrChange()
    :m_has_tblPr(false),
     m_tblPr(NULL),
     m_has_id_attr(false),
     m_id_attr(NULL),
     m_has_author_attr(false),
     m_author_attr(NULL),
     m_has_date_attr(false),
     m_date_attr(NULL)
{
}
CT_TblPrChange::~CT_TblPrChange()
{
    clear();
}
bool CT_TblPrChange::has_tblPr() const
{
    return m_has_tblPr;
}

CT_TblPrBase* CT_TblPrChange::mutable_tblPr()
{
    m_has_tblPr = true;
    if (!m_tblPr)
    {
        m_tblPr = new CT_TblPrBase();
    }
    return m_tblPr;
}

const CT_TblPrBase& CT_TblPrChange::get_tblPr() const
{
    if (m_tblPr)
    {
        return *m_tblPr;
    }
    return CT_TblPrBase::default_instance();
}

void CT_TblPrChange::clear()
{
    m_has_id_attr = false;

    if (m_id_attr)
    {
        delete m_id_attr;
        m_id_attr = NULL;
    }


    m_has_author_attr = false;

    if (m_author_attr)
    {
        delete m_author_attr;
        m_author_attr = NULL;
    }


    m_has_date_attr = false;

    if (m_date_attr)
    {
        delete m_date_attr;
        m_date_attr = NULL;
    }


    m_has_tblPr = false;

    if (m_tblPr)
    {
        delete m_tblPr;
        m_tblPr = NULL;
    }

}

void CT_TblPrChange::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_id_attr);
    if (m_has_id_attr)
    {
        m_id_attr->toXmlAttr("w:id", _outStream);
    }


    assert(m_has_author_attr);
    if (m_has_author_attr)
    {
        m_author_attr->toXmlAttr("w:author", _outStream);
    }



    if (m_has_date_attr)
    {
        m_date_attr->toXmlAttr("w:date", _outStream);
    }

    _outStream << ">";

    assert(m_has_tblPr);


    if (m_has_tblPr)
    {
        m_tblPr->toXmlElem("w:tblPr", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_TblPrChange& CT_TblPrChange::default_instance()
{
    if (!CT_TblPrChange::default_instance_)
    {
        CT_TblPrChange::default_instance_ = new CT_TblPrChange();
    }
    return *CT_TblPrChange::default_instance_;
}

bool CT_TblPrChange::has_id_attr() const
{
    return m_has_id_attr;
}

void CT_TblPrChange::set_id_attr(const ST_DecimalNumber& _id_attr)
{
    m_has_id_attr = true;
    m_id_attr = new ST_DecimalNumber(_id_attr);
}

const ST_DecimalNumber& CT_TblPrChange::get_id_attr() const
{
    if (m_id_attr)
    {
        return *m_id_attr;
    }
    return ST_DecimalNumber::default_instance();
}

bool CT_TblPrChange::has_author_attr() const
{
    return m_has_author_attr;
}

void CT_TblPrChange::set_author_attr(const ns_s::ST_String& _author_attr)
{
    m_has_author_attr = true;
    m_author_attr = new ns_s::ST_String(_author_attr);
}

const ns_s::ST_String& CT_TblPrChange::get_author_attr() const
{
    if (m_author_attr)
    {
        return *m_author_attr;
    }
    return ns_s::ST_String::default_instance();
}

bool CT_TblPrChange::has_date_attr() const
{
    return m_has_date_attr;
}

void CT_TblPrChange::set_date_attr(const ST_DateTime& _date_attr)
{
    m_has_date_attr = true;
    m_date_attr = new ST_DateTime(_date_attr);
}

const ST_DateTime& CT_TblPrChange::get_date_attr() const
{
    if (m_date_attr)
    {
        return *m_date_attr;
    }
    return ST_DateTime::default_instance();
}

CT_TblPrChange* CT_TblPrChange::default_instance_ = NULL;

// CT_SectPrChange
CT_SectPrChange::CT_SectPrChange()
    :m_has_sectPr(false),
     m_sectPr(NULL),
     m_has_id_attr(false),
     m_id_attr(NULL),
     m_has_author_attr(false),
     m_author_attr(NULL),
     m_has_date_attr(false),
     m_date_attr(NULL)
{
}
CT_SectPrChange::~CT_SectPrChange()
{
    clear();
}
bool CT_SectPrChange::has_sectPr() const
{
    return m_has_sectPr;
}

CT_SectPrBase* CT_SectPrChange::mutable_sectPr()
{
    m_has_sectPr = true;
    if (!m_sectPr)
    {
        m_sectPr = new CT_SectPrBase();
    }
    return m_sectPr;
}

const CT_SectPrBase& CT_SectPrChange::get_sectPr() const
{
    if (m_sectPr)
    {
        return *m_sectPr;
    }
    return CT_SectPrBase::default_instance();
}

void CT_SectPrChange::clear()
{
    m_has_id_attr = false;

    if (m_id_attr)
    {
        delete m_id_attr;
        m_id_attr = NULL;
    }


    m_has_author_attr = false;

    if (m_author_attr)
    {
        delete m_author_attr;
        m_author_attr = NULL;
    }


    m_has_date_attr = false;

    if (m_date_attr)
    {
        delete m_date_attr;
        m_date_attr = NULL;
    }


    m_has_sectPr = false;

    if (m_sectPr)
    {
        delete m_sectPr;
        m_sectPr = NULL;
    }

}

void CT_SectPrChange::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_id_attr);
    if (m_has_id_attr)
    {
        m_id_attr->toXmlAttr("w:id", _outStream);
    }


    assert(m_has_author_attr);
    if (m_has_author_attr)
    {
        m_author_attr->toXmlAttr("w:author", _outStream);
    }



    if (m_has_date_attr)
    {
        m_date_attr->toXmlAttr("w:date", _outStream);
    }

    _outStream << ">";


    if (m_has_sectPr)
    {
        m_sectPr->toXmlElem("w:sectPr", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_SectPrChange& CT_SectPrChange::default_instance()
{
    if (!CT_SectPrChange::default_instance_)
    {
        CT_SectPrChange::default_instance_ = new CT_SectPrChange();
    }
    return *CT_SectPrChange::default_instance_;
}

bool CT_SectPrChange::has_id_attr() const
{
    return m_has_id_attr;
}

void CT_SectPrChange::set_id_attr(const ST_DecimalNumber& _id_attr)
{
    m_has_id_attr = true;
    m_id_attr = new ST_DecimalNumber(_id_attr);
}

const ST_DecimalNumber& CT_SectPrChange::get_id_attr() const
{
    if (m_id_attr)
    {
        return *m_id_attr;
    }
    return ST_DecimalNumber::default_instance();
}

bool CT_SectPrChange::has_author_attr() const
{
    return m_has_author_attr;
}

void CT_SectPrChange::set_author_attr(const ns_s::ST_String& _author_attr)
{
    m_has_author_attr = true;
    m_author_attr = new ns_s::ST_String(_author_attr);
}

const ns_s::ST_String& CT_SectPrChange::get_author_attr() const
{
    if (m_author_attr)
    {
        return *m_author_attr;
    }
    return ns_s::ST_String::default_instance();
}

bool CT_SectPrChange::has_date_attr() const
{
    return m_has_date_attr;
}

void CT_SectPrChange::set_date_attr(const ST_DateTime& _date_attr)
{
    m_has_date_attr = true;
    m_date_attr = new ST_DateTime(_date_attr);
}

const ST_DateTime& CT_SectPrChange::get_date_attr() const
{
    if (m_date_attr)
    {
        return *m_date_attr;
    }
    return ST_DateTime::default_instance();
}

CT_SectPrChange* CT_SectPrChange::default_instance_ = NULL;

// CT_PPrChange
CT_PPrChange::CT_PPrChange()
    :m_has_pPr(false),
     m_pPr(NULL),
     m_has_id_attr(false),
     m_id_attr(NULL),
     m_has_author_attr(false),
     m_author_attr(NULL),
     m_has_date_attr(false),
     m_date_attr(NULL)
{
}
CT_PPrChange::~CT_PPrChange()
{
    clear();
}
bool CT_PPrChange::has_pPr() const
{
    return m_has_pPr;
}

CT_PPrBase* CT_PPrChange::mutable_pPr()
{
    m_has_pPr = true;
    if (!m_pPr)
    {
        m_pPr = new CT_PPrBase();
    }
    return m_pPr;
}

const CT_PPrBase& CT_PPrChange::get_pPr() const
{
    if (m_pPr)
    {
        return *m_pPr;
    }
    return CT_PPrBase::default_instance();
}

void CT_PPrChange::clear()
{
    m_has_id_attr = false;

    if (m_id_attr)
    {
        delete m_id_attr;
        m_id_attr = NULL;
    }


    m_has_author_attr = false;

    if (m_author_attr)
    {
        delete m_author_attr;
        m_author_attr = NULL;
    }


    m_has_date_attr = false;

    if (m_date_attr)
    {
        delete m_date_attr;
        m_date_attr = NULL;
    }


    m_has_pPr = false;

    if (m_pPr)
    {
        delete m_pPr;
        m_pPr = NULL;
    }

}

void CT_PPrChange::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_id_attr);
    if (m_has_id_attr)
    {
        m_id_attr->toXmlAttr("w:id", _outStream);
    }


    assert(m_has_author_attr);
    if (m_has_author_attr)
    {
        m_author_attr->toXmlAttr("w:author", _outStream);
    }



    if (m_has_date_attr)
    {
        m_date_attr->toXmlAttr("w:date", _outStream);
    }

    _outStream << ">";

    assert(m_has_pPr);


    if (m_has_pPr)
    {
        m_pPr->toXmlElem("w:pPr", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_PPrChange& CT_PPrChange::default_instance()
{
    if (!CT_PPrChange::default_instance_)
    {
        CT_PPrChange::default_instance_ = new CT_PPrChange();
    }
    return *CT_PPrChange::default_instance_;
}

bool CT_PPrChange::has_id_attr() const
{
    return m_has_id_attr;
}

void CT_PPrChange::set_id_attr(const ST_DecimalNumber& _id_attr)
{
    m_has_id_attr = true;
    m_id_attr = new ST_DecimalNumber(_id_attr);
}

const ST_DecimalNumber& CT_PPrChange::get_id_attr() const
{
    if (m_id_attr)
    {
        return *m_id_attr;
    }
    return ST_DecimalNumber::default_instance();
}

bool CT_PPrChange::has_author_attr() const
{
    return m_has_author_attr;
}

void CT_PPrChange::set_author_attr(const ns_s::ST_String& _author_attr)
{
    m_has_author_attr = true;
    m_author_attr = new ns_s::ST_String(_author_attr);
}

const ns_s::ST_String& CT_PPrChange::get_author_attr() const
{
    if (m_author_attr)
    {
        return *m_author_attr;
    }
    return ns_s::ST_String::default_instance();
}

bool CT_PPrChange::has_date_attr() const
{
    return m_has_date_attr;
}

void CT_PPrChange::set_date_attr(const ST_DateTime& _date_attr)
{
    m_has_date_attr = true;
    m_date_attr = new ST_DateTime(_date_attr);
}

const ST_DateTime& CT_PPrChange::get_date_attr() const
{
    if (m_date_attr)
    {
        return *m_date_attr;
    }
    return ST_DateTime::default_instance();
}

CT_PPrChange* CT_PPrChange::default_instance_ = NULL;

// CT_RPrChange
CT_RPrChange::CT_RPrChange()
    :m_has_rPr(false),
     m_rPr(NULL),
     m_has_id_attr(false),
     m_id_attr(NULL),
     m_has_author_attr(false),
     m_author_attr(NULL),
     m_has_date_attr(false),
     m_date_attr(NULL)
{
}
CT_RPrChange::~CT_RPrChange()
{
    clear();
}
bool CT_RPrChange::has_rPr() const
{
    return m_has_rPr;
}

CT_RPrOriginal* CT_RPrChange::mutable_rPr()
{
    m_has_rPr = true;
    if (!m_rPr)
    {
        m_rPr = new CT_RPrOriginal();
    }
    return m_rPr;
}

const CT_RPrOriginal& CT_RPrChange::get_rPr() const
{
    if (m_rPr)
    {
        return *m_rPr;
    }
    return CT_RPrOriginal::default_instance();
}

void CT_RPrChange::clear()
{
    m_has_id_attr = false;

    if (m_id_attr)
    {
        delete m_id_attr;
        m_id_attr = NULL;
    }


    m_has_author_attr = false;

    if (m_author_attr)
    {
        delete m_author_attr;
        m_author_attr = NULL;
    }


    m_has_date_attr = false;

    if (m_date_attr)
    {
        delete m_date_attr;
        m_date_attr = NULL;
    }


    m_has_rPr = false;

    if (m_rPr)
    {
        delete m_rPr;
        m_rPr = NULL;
    }

}

void CT_RPrChange::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_id_attr);
    if (m_has_id_attr)
    {
        m_id_attr->toXmlAttr("w:id", _outStream);
    }


    assert(m_has_author_attr);
    if (m_has_author_attr)
    {
        m_author_attr->toXmlAttr("w:author", _outStream);
    }



    if (m_has_date_attr)
    {
        m_date_attr->toXmlAttr("w:date", _outStream);
    }

    _outStream << ">";

    assert(m_has_rPr);


    if (m_has_rPr)
    {
        m_rPr->toXmlElem("w:rPr", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_RPrChange& CT_RPrChange::default_instance()
{
    if (!CT_RPrChange::default_instance_)
    {
        CT_RPrChange::default_instance_ = new CT_RPrChange();
    }
    return *CT_RPrChange::default_instance_;
}

bool CT_RPrChange::has_id_attr() const
{
    return m_has_id_attr;
}

void CT_RPrChange::set_id_attr(const ST_DecimalNumber& _id_attr)
{
    m_has_id_attr = true;
    m_id_attr = new ST_DecimalNumber(_id_attr);
}

const ST_DecimalNumber& CT_RPrChange::get_id_attr() const
{
    if (m_id_attr)
    {
        return *m_id_attr;
    }
    return ST_DecimalNumber::default_instance();
}

bool CT_RPrChange::has_author_attr() const
{
    return m_has_author_attr;
}

void CT_RPrChange::set_author_attr(const ns_s::ST_String& _author_attr)
{
    m_has_author_attr = true;
    m_author_attr = new ns_s::ST_String(_author_attr);
}

const ns_s::ST_String& CT_RPrChange::get_author_attr() const
{
    if (m_author_attr)
    {
        return *m_author_attr;
    }
    return ns_s::ST_String::default_instance();
}

bool CT_RPrChange::has_date_attr() const
{
    return m_has_date_attr;
}

void CT_RPrChange::set_date_attr(const ST_DateTime& _date_attr)
{
    m_has_date_attr = true;
    m_date_attr = new ST_DateTime(_date_attr);
}

const ST_DateTime& CT_RPrChange::get_date_attr() const
{
    if (m_date_attr)
    {
        return *m_date_attr;
    }
    return ST_DateTime::default_instance();
}

CT_RPrChange* CT_RPrChange::default_instance_ = NULL;

// CT_ParaRPrChange
CT_ParaRPrChange::CT_ParaRPrChange()
    :m_has_rPr(false),
     m_rPr(NULL),
     m_has_id_attr(false),
     m_id_attr(NULL),
     m_has_author_attr(false),
     m_author_attr(NULL),
     m_has_date_attr(false),
     m_date_attr(NULL)
{
}
CT_ParaRPrChange::~CT_ParaRPrChange()
{
    clear();
}
bool CT_ParaRPrChange::has_rPr() const
{
    return m_has_rPr;
}

CT_ParaRPrOriginal* CT_ParaRPrChange::mutable_rPr()
{
    m_has_rPr = true;
    if (!m_rPr)
    {
        m_rPr = new CT_ParaRPrOriginal();
    }
    return m_rPr;
}

const CT_ParaRPrOriginal& CT_ParaRPrChange::get_rPr() const
{
    if (m_rPr)
    {
        return *m_rPr;
    }
    return CT_ParaRPrOriginal::default_instance();
}

void CT_ParaRPrChange::clear()
{
    m_has_id_attr = false;

    if (m_id_attr)
    {
        delete m_id_attr;
        m_id_attr = NULL;
    }


    m_has_author_attr = false;

    if (m_author_attr)
    {
        delete m_author_attr;
        m_author_attr = NULL;
    }


    m_has_date_attr = false;

    if (m_date_attr)
    {
        delete m_date_attr;
        m_date_attr = NULL;
    }


    m_has_rPr = false;

    if (m_rPr)
    {
        delete m_rPr;
        m_rPr = NULL;
    }

}

void CT_ParaRPrChange::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_id_attr);
    if (m_has_id_attr)
    {
        m_id_attr->toXmlAttr("w:id", _outStream);
    }


    assert(m_has_author_attr);
    if (m_has_author_attr)
    {
        m_author_attr->toXmlAttr("w:author", _outStream);
    }



    if (m_has_date_attr)
    {
        m_date_attr->toXmlAttr("w:date", _outStream);
    }

    _outStream << ">";

    assert(m_has_rPr);


    if (m_has_rPr)
    {
        m_rPr->toXmlElem("w:rPr", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_ParaRPrChange& CT_ParaRPrChange::default_instance()
{
    if (!CT_ParaRPrChange::default_instance_)
    {
        CT_ParaRPrChange::default_instance_ = new CT_ParaRPrChange();
    }
    return *CT_ParaRPrChange::default_instance_;
}

bool CT_ParaRPrChange::has_id_attr() const
{
    return m_has_id_attr;
}

void CT_ParaRPrChange::set_id_attr(const ST_DecimalNumber& _id_attr)
{
    m_has_id_attr = true;
    m_id_attr = new ST_DecimalNumber(_id_attr);
}

const ST_DecimalNumber& CT_ParaRPrChange::get_id_attr() const
{
    if (m_id_attr)
    {
        return *m_id_attr;
    }
    return ST_DecimalNumber::default_instance();
}

bool CT_ParaRPrChange::has_author_attr() const
{
    return m_has_author_attr;
}

void CT_ParaRPrChange::set_author_attr(const ns_s::ST_String& _author_attr)
{
    m_has_author_attr = true;
    m_author_attr = new ns_s::ST_String(_author_attr);
}

const ns_s::ST_String& CT_ParaRPrChange::get_author_attr() const
{
    if (m_author_attr)
    {
        return *m_author_attr;
    }
    return ns_s::ST_String::default_instance();
}

bool CT_ParaRPrChange::has_date_attr() const
{
    return m_has_date_attr;
}

void CT_ParaRPrChange::set_date_attr(const ST_DateTime& _date_attr)
{
    m_has_date_attr = true;
    m_date_attr = new ST_DateTime(_date_attr);
}

const ST_DateTime& CT_ParaRPrChange::get_date_attr() const
{
    if (m_date_attr)
    {
        return *m_date_attr;
    }
    return ST_DateTime::default_instance();
}

CT_ParaRPrChange* CT_ParaRPrChange::default_instance_ = NULL;

// CT_RunTrackChange
CT_RunTrackChange::CT_RunTrackChange()
    :m_has_id_attr(false),
     m_id_attr(NULL),
     m_has_author_attr(false),
     m_author_attr(NULL),
     m_has_date_attr(false),
     m_date_attr(NULL)
{
}
CT_RunTrackChange::~CT_RunTrackChange()
{
    clear();
}
CT_CustomXmlRun* CT_RunTrackChange::add_customXml()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_CustomXmlRun* pNewChild = pChildGroup->mutable_customXml();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_SmartTagRun* CT_RunTrackChange::add_smartTag()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_SmartTagRun* pNewChild = pChildGroup->mutable_smartTag();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_SdtRun* CT_RunTrackChange::add_sdt()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_SdtRun* pNewChild = pChildGroup->mutable_sdt();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_DirContentRun* CT_RunTrackChange::add_dir()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_DirContentRun* pNewChild = pChildGroup->mutable_dir();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_BdoContentRun* CT_RunTrackChange::add_bdo()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_BdoContentRun* pNewChild = pChildGroup->mutable_bdo();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_R* CT_RunTrackChange::add_r()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_R* pNewChild = pChildGroup->mutable_r();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_ProofErr* CT_RunTrackChange::add_proofErr()
{
    ChildGroup_2 *pChildGroup = new ChildGroup_2();
    CT_ProofErr* pNewChild = pChildGroup->mutable_proofErr();
    m_childGroupList_2.push_back(pChildGroup);
    return pNewChild;
}

CT_PermStart* CT_RunTrackChange::add_permStart()
{
    ChildGroup_2 *pChildGroup = new ChildGroup_2();
    CT_PermStart* pNewChild = pChildGroup->mutable_permStart();
    m_childGroupList_2.push_back(pChildGroup);
    return pNewChild;
}

CT_Perm* CT_RunTrackChange::add_permEnd()
{
    ChildGroup_2 *pChildGroup = new ChildGroup_2();
    CT_Perm* pNewChild = pChildGroup->mutable_permEnd();
    m_childGroupList_2.push_back(pChildGroup);
    return pNewChild;
}

CT_Bookmark* CT_RunTrackChange::add_bookmarkStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_Bookmark* pNewChild = pChildGroup->mutable_bookmarkStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MarkupRange* CT_RunTrackChange::add_bookmarkEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MarkupRange* pNewChild = pChildGroup->mutable_bookmarkEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MoveBookmark* CT_RunTrackChange::add_moveFromRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MoveBookmark* pNewChild = pChildGroup->mutable_moveFromRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MarkupRange* CT_RunTrackChange::add_moveFromRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MarkupRange* pNewChild = pChildGroup->mutable_moveFromRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MoveBookmark* CT_RunTrackChange::add_moveToRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MoveBookmark* pNewChild = pChildGroup->mutable_moveToRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MarkupRange* CT_RunTrackChange::add_moveToRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MarkupRange* pNewChild = pChildGroup->mutable_moveToRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MarkupRange* CT_RunTrackChange::add_commentRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MarkupRange* pNewChild = pChildGroup->mutable_commentRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MarkupRange* CT_RunTrackChange::add_commentRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MarkupRange* pNewChild = pChildGroup->mutable_commentRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_TrackChange* CT_RunTrackChange::add_customXmlInsRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_TrackChange* pNewChild = pChildGroup->mutable_customXmlInsRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_Markup* CT_RunTrackChange::add_customXmlInsRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_Markup* pNewChild = pChildGroup->mutable_customXmlInsRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_TrackChange* CT_RunTrackChange::add_customXmlDelRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_TrackChange* pNewChild = pChildGroup->mutable_customXmlDelRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_Markup* CT_RunTrackChange::add_customXmlDelRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_Markup* pNewChild = pChildGroup->mutable_customXmlDelRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_TrackChange* CT_RunTrackChange::add_customXmlMoveFromRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_TrackChange* pNewChild = pChildGroup->mutable_customXmlMoveFromRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_Markup* CT_RunTrackChange::add_customXmlMoveFromRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_Markup* pNewChild = pChildGroup->mutable_customXmlMoveFromRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_TrackChange* CT_RunTrackChange::add_customXmlMoveToRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_TrackChange* pNewChild = pChildGroup->mutable_customXmlMoveToRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_Markup* CT_RunTrackChange::add_customXmlMoveToRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_Markup* pNewChild = pChildGroup->mutable_customXmlMoveToRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_RunTrackChange* CT_RunTrackChange::add_ins()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_RunTrackChange* pNewChild = pChildGroup->mutable_ins();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_RunTrackChange* CT_RunTrackChange::add_del()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_RunTrackChange* pNewChild = pChildGroup->mutable_del();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_RunTrackChange* CT_RunTrackChange::add_moveFrom()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_RunTrackChange* pNewChild = pChildGroup->mutable_moveFrom();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_RunTrackChange* CT_RunTrackChange::add_moveTo()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_RunTrackChange* pNewChild = pChildGroup->mutable_moveTo();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

ns_m::CT_OMathPara* CT_RunTrackChange::add_m_oMathPara()
{
    ChildGroup_4 *pChildGroup = new ChildGroup_4();
    ns_m::CT_OMathPara* pNewChild = pChildGroup->mutable_m_oMathPara();
    m_childGroupList_4.push_back(pChildGroup);
    return pNewChild;
}

ns_m::CT_OMath* CT_RunTrackChange::add_m_oMath()
{
    ChildGroup_4 *pChildGroup = new ChildGroup_4();
    ns_m::CT_OMath* pNewChild = pChildGroup->mutable_m_oMath();
    m_childGroupList_4.push_back(pChildGroup);
    return pNewChild;
}

ns_m::CT_Acc* CT_RunTrackChange::add_m_acc()
{
    ChildGroup_5 *pChildGroup = new ChildGroup_5();
    ns_m::CT_Acc* pNewChild = pChildGroup->mutable_m_acc();
    m_childGroupList_5.push_back(pChildGroup);
    return pNewChild;
}

ns_m::CT_Bar* CT_RunTrackChange::add_m_bar()
{
    ChildGroup_5 *pChildGroup = new ChildGroup_5();
    ns_m::CT_Bar* pNewChild = pChildGroup->mutable_m_bar();
    m_childGroupList_5.push_back(pChildGroup);
    return pNewChild;
}

ns_m::CT_Box* CT_RunTrackChange::add_m_box()
{
    ChildGroup_5 *pChildGroup = new ChildGroup_5();
    ns_m::CT_Box* pNewChild = pChildGroup->mutable_m_box();
    m_childGroupList_5.push_back(pChildGroup);
    return pNewChild;
}

ns_m::CT_BorderBox* CT_RunTrackChange::add_m_borderBox()
{
    ChildGroup_5 *pChildGroup = new ChildGroup_5();
    ns_m::CT_BorderBox* pNewChild = pChildGroup->mutable_m_borderBox();
    m_childGroupList_5.push_back(pChildGroup);
    return pNewChild;
}

ns_m::CT_D* CT_RunTrackChange::add_m_d()
{
    ChildGroup_5 *pChildGroup = new ChildGroup_5();
    ns_m::CT_D* pNewChild = pChildGroup->mutable_m_d();
    m_childGroupList_5.push_back(pChildGroup);
    return pNewChild;
}

ns_m::CT_EqArr* CT_RunTrackChange::add_m_eqArr()
{
    ChildGroup_5 *pChildGroup = new ChildGroup_5();
    ns_m::CT_EqArr* pNewChild = pChildGroup->mutable_m_eqArr();
    m_childGroupList_5.push_back(pChildGroup);
    return pNewChild;
}

ns_m::CT_F* CT_RunTrackChange::add_m_f()
{
    ChildGroup_5 *pChildGroup = new ChildGroup_5();
    ns_m::CT_F* pNewChild = pChildGroup->mutable_m_f();
    m_childGroupList_5.push_back(pChildGroup);
    return pNewChild;
}

ns_m::CT_Func* CT_RunTrackChange::add_m_func()
{
    ChildGroup_5 *pChildGroup = new ChildGroup_5();
    ns_m::CT_Func* pNewChild = pChildGroup->mutable_m_func();
    m_childGroupList_5.push_back(pChildGroup);
    return pNewChild;
}

ns_m::CT_GroupChr* CT_RunTrackChange::add_m_groupChr()
{
    ChildGroup_5 *pChildGroup = new ChildGroup_5();
    ns_m::CT_GroupChr* pNewChild = pChildGroup->mutable_m_groupChr();
    m_childGroupList_5.push_back(pChildGroup);
    return pNewChild;
}

ns_m::CT_LimLow* CT_RunTrackChange::add_m_limLow()
{
    ChildGroup_5 *pChildGroup = new ChildGroup_5();
    ns_m::CT_LimLow* pNewChild = pChildGroup->mutable_m_limLow();
    m_childGroupList_5.push_back(pChildGroup);
    return pNewChild;
}

ns_m::CT_LimUpp* CT_RunTrackChange::add_m_limUpp()
{
    ChildGroup_5 *pChildGroup = new ChildGroup_5();
    ns_m::CT_LimUpp* pNewChild = pChildGroup->mutable_m_limUpp();
    m_childGroupList_5.push_back(pChildGroup);
    return pNewChild;
}

ns_m::CT_M* CT_RunTrackChange::add_m_m()
{
    ChildGroup_5 *pChildGroup = new ChildGroup_5();
    ns_m::CT_M* pNewChild = pChildGroup->mutable_m_m();
    m_childGroupList_5.push_back(pChildGroup);
    return pNewChild;
}

ns_m::CT_Nary* CT_RunTrackChange::add_m_nary()
{
    ChildGroup_5 *pChildGroup = new ChildGroup_5();
    ns_m::CT_Nary* pNewChild = pChildGroup->mutable_m_nary();
    m_childGroupList_5.push_back(pChildGroup);
    return pNewChild;
}

ns_m::CT_Phant* CT_RunTrackChange::add_m_phant()
{
    ChildGroup_5 *pChildGroup = new ChildGroup_5();
    ns_m::CT_Phant* pNewChild = pChildGroup->mutable_m_phant();
    m_childGroupList_5.push_back(pChildGroup);
    return pNewChild;
}

ns_m::CT_Rad* CT_RunTrackChange::add_m_rad()
{
    ChildGroup_5 *pChildGroup = new ChildGroup_5();
    ns_m::CT_Rad* pNewChild = pChildGroup->mutable_m_rad();
    m_childGroupList_5.push_back(pChildGroup);
    return pNewChild;
}

ns_m::CT_SPre* CT_RunTrackChange::add_m_sPre()
{
    ChildGroup_5 *pChildGroup = new ChildGroup_5();
    ns_m::CT_SPre* pNewChild = pChildGroup->mutable_m_sPre();
    m_childGroupList_5.push_back(pChildGroup);
    return pNewChild;
}

ns_m::CT_SSub* CT_RunTrackChange::add_m_sSub()
{
    ChildGroup_5 *pChildGroup = new ChildGroup_5();
    ns_m::CT_SSub* pNewChild = pChildGroup->mutable_m_sSub();
    m_childGroupList_5.push_back(pChildGroup);
    return pNewChild;
}

ns_m::CT_SSubSup* CT_RunTrackChange::add_m_sSubSup()
{
    ChildGroup_5 *pChildGroup = new ChildGroup_5();
    ns_m::CT_SSubSup* pNewChild = pChildGroup->mutable_m_sSubSup();
    m_childGroupList_5.push_back(pChildGroup);
    return pNewChild;
}

ns_m::CT_SSup* CT_RunTrackChange::add_m_sSup()
{
    ChildGroup_5 *pChildGroup = new ChildGroup_5();
    ns_m::CT_SSup* pNewChild = pChildGroup->mutable_m_sSup();
    m_childGroupList_5.push_back(pChildGroup);
    return pNewChild;
}

ns_m::CT_R* CT_RunTrackChange::add_m_r()
{
    ChildGroup_5 *pChildGroup = new ChildGroup_5();
    ns_m::CT_R* pNewChild = pChildGroup->mutable_m_r();
    m_childGroupList_5.push_back(pChildGroup);
    return pNewChild;
}

void CT_RunTrackChange::clear()
{
    m_has_id_attr = false;

    if (m_id_attr)
    {
        delete m_id_attr;
        m_id_attr = NULL;
    }


    m_has_author_attr = false;

    if (m_author_attr)
    {
        delete m_author_attr;
        m_author_attr = NULL;
    }


    m_has_date_attr = false;

    if (m_date_attr)
    {
        delete m_date_attr;
        m_date_attr = NULL;
    }


    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }

    {
        vector<ChildGroup_2*>::iterator iter;
        for (iter = m_childGroupList_2.begin(); iter != m_childGroupList_2.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_2.clear();
    }

    {
        vector<ChildGroup_3*>::iterator iter;
        for (iter = m_childGroupList_3.begin(); iter != m_childGroupList_3.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_3.clear();
    }

    {
        vector<ChildGroup_4*>::iterator iter;
        for (iter = m_childGroupList_4.begin(); iter != m_childGroupList_4.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_4.clear();
    }

    {
        vector<ChildGroup_5*>::iterator iter;
        for (iter = m_childGroupList_5.begin(); iter != m_childGroupList_5.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_5.clear();
    }
}

void CT_RunTrackChange::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_id_attr);
    if (m_has_id_attr)
    {
        m_id_attr->toXmlAttr("w:id", _outStream);
    }


    assert(m_has_author_attr);
    if (m_has_author_attr)
    {
        m_author_attr->toXmlAttr("w:author", _outStream);
    }



    if (m_has_date_attr)
    {
        m_date_attr->toXmlAttr("w:date", _outStream);
    }

    _outStream << ">";

    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_customXml())
            {
                (*iter)->get_customXml().toXmlElem("w:customXml", "", _outStream);
            }


            else if ((*iter)->has_smartTag())
            {
                (*iter)->get_smartTag().toXmlElem("w:smartTag", "", _outStream);
            }


            else if ((*iter)->has_sdt())
            {
                (*iter)->get_sdt().toXmlElem("w:sdt", "", _outStream);
            }


            else if ((*iter)->has_dir())
            {
                (*iter)->get_dir().toXmlElem("w:dir", "", _outStream);
            }


            else if ((*iter)->has_bdo())
            {
                (*iter)->get_bdo().toXmlElem("w:bdo", "", _outStream);
            }


            else if ((*iter)->has_r())
            {
                (*iter)->get_r().toXmlElem("w:r", "", _outStream);
            }


        }
    }

    {
        vector<ChildGroup_2*>::const_iterator iter;
        for (iter = m_childGroupList_2.begin(); iter != m_childGroupList_2.end(); ++iter)
        {
            if ((*iter)->has_proofErr())
            {
                (*iter)->get_proofErr().toXmlElem("w:proofErr", "", _outStream);
            }


            else if ((*iter)->has_permStart())
            {
                (*iter)->get_permStart().toXmlElem("w:permStart", "", _outStream);
            }


            else if ((*iter)->has_permEnd())
            {
                (*iter)->get_permEnd().toXmlElem("w:permEnd", "", _outStream);
            }


        }
    }

    {
        vector<ChildGroup_3*>::const_iterator iter;
        for (iter = m_childGroupList_3.begin(); iter != m_childGroupList_3.end(); ++iter)
        {
            if ((*iter)->has_bookmarkStart())
            {
                (*iter)->get_bookmarkStart().toXmlElem("w:bookmarkStart", "", _outStream);
            }


            else if ((*iter)->has_bookmarkEnd())
            {
                (*iter)->get_bookmarkEnd().toXmlElem("w:bookmarkEnd", "", _outStream);
            }


            else if ((*iter)->has_moveFromRangeStart())
            {
                (*iter)->get_moveFromRangeStart().toXmlElem("w:moveFromRangeStart", "", _outStream);
            }


            else if ((*iter)->has_moveFromRangeEnd())
            {
                (*iter)->get_moveFromRangeEnd().toXmlElem("w:moveFromRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_moveToRangeStart())
            {
                (*iter)->get_moveToRangeStart().toXmlElem("w:moveToRangeStart", "", _outStream);
            }


            else if ((*iter)->has_moveToRangeEnd())
            {
                (*iter)->get_moveToRangeEnd().toXmlElem("w:moveToRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_commentRangeStart())
            {
                (*iter)->get_commentRangeStart().toXmlElem("w:commentRangeStart", "", _outStream);
            }


            else if ((*iter)->has_commentRangeEnd())
            {
                (*iter)->get_commentRangeEnd().toXmlElem("w:commentRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_customXmlInsRangeStart())
            {
                (*iter)->get_customXmlInsRangeStart().toXmlElem("w:customXmlInsRangeStart", "", _outStream);
            }


            else if ((*iter)->has_customXmlInsRangeEnd())
            {
                (*iter)->get_customXmlInsRangeEnd().toXmlElem("w:customXmlInsRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_customXmlDelRangeStart())
            {
                (*iter)->get_customXmlDelRangeStart().toXmlElem("w:customXmlDelRangeStart", "", _outStream);
            }


            else if ((*iter)->has_customXmlDelRangeEnd())
            {
                (*iter)->get_customXmlDelRangeEnd().toXmlElem("w:customXmlDelRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_customXmlMoveFromRangeStart())
            {
                (*iter)->get_customXmlMoveFromRangeStart().toXmlElem("w:customXmlMoveFromRangeStart", "", _outStream);
            }


            else if ((*iter)->has_customXmlMoveFromRangeEnd())
            {
                (*iter)->get_customXmlMoveFromRangeEnd().toXmlElem("w:customXmlMoveFromRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_customXmlMoveToRangeStart())
            {
                (*iter)->get_customXmlMoveToRangeStart().toXmlElem("w:customXmlMoveToRangeStart", "", _outStream);
            }


            else if ((*iter)->has_customXmlMoveToRangeEnd())
            {
                (*iter)->get_customXmlMoveToRangeEnd().toXmlElem("w:customXmlMoveToRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_ins())
            {
                (*iter)->get_ins().toXmlElem("w:ins", "", _outStream);
            }


            else if ((*iter)->has_del())
            {
                (*iter)->get_del().toXmlElem("w:del", "", _outStream);
            }


            else if ((*iter)->has_moveFrom())
            {
                (*iter)->get_moveFrom().toXmlElem("w:moveFrom", "", _outStream);
            }


            else if ((*iter)->has_moveTo())
            {
                (*iter)->get_moveTo().toXmlElem("w:moveTo", "", _outStream);
            }


        }
    }

    {
        vector<ChildGroup_4*>::const_iterator iter;
        for (iter = m_childGroupList_4.begin(); iter != m_childGroupList_4.end(); ++iter)
        {
            if ((*iter)->has_m_oMathPara())
            {
                (*iter)->get_m_oMathPara().toXmlElem("m:oMathPara", "", _outStream);
            }


            else if ((*iter)->has_m_oMath())
            {
                (*iter)->get_m_oMath().toXmlElem("m:oMath", "", _outStream);
            }


        }
    }

    {
        vector<ChildGroup_5*>::const_iterator iter;
        for (iter = m_childGroupList_5.begin(); iter != m_childGroupList_5.end(); ++iter)
        {
            if ((*iter)->has_m_acc())
            {
                (*iter)->get_m_acc().toXmlElem("m:acc", "", _outStream);
            }


            else if ((*iter)->has_m_bar())
            {
                (*iter)->get_m_bar().toXmlElem("m:bar", "", _outStream);
            }


            else if ((*iter)->has_m_box())
            {
                (*iter)->get_m_box().toXmlElem("m:box", "", _outStream);
            }


            else if ((*iter)->has_m_borderBox())
            {
                (*iter)->get_m_borderBox().toXmlElem("m:borderBox", "", _outStream);
            }


            else if ((*iter)->has_m_d())
            {
                (*iter)->get_m_d().toXmlElem("m:d", "", _outStream);
            }


            else if ((*iter)->has_m_eqArr())
            {
                (*iter)->get_m_eqArr().toXmlElem("m:eqArr", "", _outStream);
            }


            else if ((*iter)->has_m_f())
            {
                (*iter)->get_m_f().toXmlElem("m:f", "", _outStream);
            }


            else if ((*iter)->has_m_func())
            {
                (*iter)->get_m_func().toXmlElem("m:func", "", _outStream);
            }


            else if ((*iter)->has_m_groupChr())
            {
                (*iter)->get_m_groupChr().toXmlElem("m:groupChr", "", _outStream);
            }


            else if ((*iter)->has_m_limLow())
            {
                (*iter)->get_m_limLow().toXmlElem("m:limLow", "", _outStream);
            }


            else if ((*iter)->has_m_limUpp())
            {
                (*iter)->get_m_limUpp().toXmlElem("m:limUpp", "", _outStream);
            }


            else if ((*iter)->has_m_m())
            {
                (*iter)->get_m_m().toXmlElem("m:m", "", _outStream);
            }


            else if ((*iter)->has_m_nary())
            {
                (*iter)->get_m_nary().toXmlElem("m:nary", "", _outStream);
            }


            else if ((*iter)->has_m_phant())
            {
                (*iter)->get_m_phant().toXmlElem("m:phant", "", _outStream);
            }


            else if ((*iter)->has_m_rad())
            {
                (*iter)->get_m_rad().toXmlElem("m:rad", "", _outStream);
            }


            else if ((*iter)->has_m_sPre())
            {
                (*iter)->get_m_sPre().toXmlElem("m:sPre", "", _outStream);
            }


            else if ((*iter)->has_m_sSub())
            {
                (*iter)->get_m_sSub().toXmlElem("m:sSub", "", _outStream);
            }


            else if ((*iter)->has_m_sSubSup())
            {
                (*iter)->get_m_sSubSup().toXmlElem("m:sSubSup", "", _outStream);
            }


            else if ((*iter)->has_m_sSup())
            {
                (*iter)->get_m_sSup().toXmlElem("m:sSup", "", _outStream);
            }


            else if ((*iter)->has_m_r())
            {
                (*iter)->get_m_r().toXmlElem("m:r", "", _outStream);
            }


        }
    }

    _outStream << "</" << _elemName << ">";
}

const CT_RunTrackChange& CT_RunTrackChange::default_instance()
{
    if (!CT_RunTrackChange::default_instance_)
    {
        CT_RunTrackChange::default_instance_ = new CT_RunTrackChange();
    }
    return *CT_RunTrackChange::default_instance_;
}

bool CT_RunTrackChange::has_id_attr() const
{
    return m_has_id_attr;
}

void CT_RunTrackChange::set_id_attr(const ST_DecimalNumber& _id_attr)
{
    m_has_id_attr = true;
    m_id_attr = new ST_DecimalNumber(_id_attr);
}

const ST_DecimalNumber& CT_RunTrackChange::get_id_attr() const
{
    if (m_id_attr)
    {
        return *m_id_attr;
    }
    return ST_DecimalNumber::default_instance();
}

bool CT_RunTrackChange::has_author_attr() const
{
    return m_has_author_attr;
}

void CT_RunTrackChange::set_author_attr(const ns_s::ST_String& _author_attr)
{
    m_has_author_attr = true;
    m_author_attr = new ns_s::ST_String(_author_attr);
}

const ns_s::ST_String& CT_RunTrackChange::get_author_attr() const
{
    if (m_author_attr)
    {
        return *m_author_attr;
    }
    return ns_s::ST_String::default_instance();
}

bool CT_RunTrackChange::has_date_attr() const
{
    return m_has_date_attr;
}

void CT_RunTrackChange::set_date_attr(const ST_DateTime& _date_attr)
{
    m_has_date_attr = true;
    m_date_attr = new ST_DateTime(_date_attr);
}

const ST_DateTime& CT_RunTrackChange::get_date_attr() const
{
    if (m_date_attr)
    {
        return *m_date_attr;
    }
    return ST_DateTime::default_instance();
}


// CT_RunTrackChange::ChildGroup_1
CT_RunTrackChange::ChildGroup_1::ChildGroup_1()
    :m_has_customXml(false),
     m_customXml(NULL),
     m_has_smartTag(false),
     m_smartTag(NULL),
     m_has_sdt(false),
     m_sdt(NULL),
     m_has_dir(false),
     m_dir(NULL),
     m_has_bdo(false),
     m_bdo(NULL),
     m_has_r(false),
     m_r(NULL)
{
}
bool CT_RunTrackChange::ChildGroup_1::has_customXml() const
{
    return m_has_customXml;
}

CT_CustomXmlRun* CT_RunTrackChange::ChildGroup_1::mutable_customXml()
{

    m_has_smartTag = false;

    if (m_smartTag)
    {
        delete m_smartTag;
        m_smartTag = NULL;
    }
    ;

    m_has_sdt = false;

    if (m_sdt)
    {
        delete m_sdt;
        m_sdt = NULL;
    }
    ;

    m_has_dir = false;

    if (m_dir)
    {
        delete m_dir;
        m_dir = NULL;
    }
    ;

    m_has_bdo = false;

    if (m_bdo)
    {
        delete m_bdo;
        m_bdo = NULL;
    }
    ;

    m_has_r = false;

    if (m_r)
    {
        delete m_r;
        m_r = NULL;
    }
    ;

    m_has_customXml = true;
    if (!m_customXml)
    {
        m_customXml = new CT_CustomXmlRun();
    }
    return m_customXml;
}

const CT_CustomXmlRun& CT_RunTrackChange::ChildGroup_1::get_customXml() const
{
    if (m_customXml)
    {
        return *m_customXml;
    }
    return CT_CustomXmlRun::default_instance();
}

bool CT_RunTrackChange::ChildGroup_1::has_smartTag() const
{
    return m_has_smartTag;
}

CT_SmartTagRun* CT_RunTrackChange::ChildGroup_1::mutable_smartTag()
{

    m_has_customXml = false;

    if (m_customXml)
    {
        delete m_customXml;
        m_customXml = NULL;
    }
    ;

    m_has_sdt = false;

    if (m_sdt)
    {
        delete m_sdt;
        m_sdt = NULL;
    }
    ;

    m_has_dir = false;

    if (m_dir)
    {
        delete m_dir;
        m_dir = NULL;
    }
    ;

    m_has_bdo = false;

    if (m_bdo)
    {
        delete m_bdo;
        m_bdo = NULL;
    }
    ;

    m_has_r = false;

    if (m_r)
    {
        delete m_r;
        m_r = NULL;
    }
    ;

    m_has_smartTag = true;
    if (!m_smartTag)
    {
        m_smartTag = new CT_SmartTagRun();
    }
    return m_smartTag;
}

const CT_SmartTagRun& CT_RunTrackChange::ChildGroup_1::get_smartTag() const
{
    if (m_smartTag)
    {
        return *m_smartTag;
    }
    return CT_SmartTagRun::default_instance();
}

bool CT_RunTrackChange::ChildGroup_1::has_sdt() const
{
    return m_has_sdt;
}

CT_SdtRun* CT_RunTrackChange::ChildGroup_1::mutable_sdt()
{

    m_has_customXml = false;

    if (m_customXml)
    {
        delete m_customXml;
        m_customXml = NULL;
    }
    ;

    m_has_smartTag = false;

    if (m_smartTag)
    {
        delete m_smartTag;
        m_smartTag = NULL;
    }
    ;

    m_has_dir = false;

    if (m_dir)
    {
        delete m_dir;
        m_dir = NULL;
    }
    ;

    m_has_bdo = false;

    if (m_bdo)
    {
        delete m_bdo;
        m_bdo = NULL;
    }
    ;

    m_has_r = false;

    if (m_r)
    {
        delete m_r;
        m_r = NULL;
    }
    ;

    m_has_sdt = true;
    if (!m_sdt)
    {
        m_sdt = new CT_SdtRun();
    }
    return m_sdt;
}

const CT_SdtRun& CT_RunTrackChange::ChildGroup_1::get_sdt() const
{
    if (m_sdt)
    {
        return *m_sdt;
    }
    return CT_SdtRun::default_instance();
}

bool CT_RunTrackChange::ChildGroup_1::has_dir() const
{
    return m_has_dir;
}

CT_DirContentRun* CT_RunTrackChange::ChildGroup_1::mutable_dir()
{

    m_has_customXml = false;

    if (m_customXml)
    {
        delete m_customXml;
        m_customXml = NULL;
    }
    ;

    m_has_smartTag = false;

    if (m_smartTag)
    {
        delete m_smartTag;
        m_smartTag = NULL;
    }
    ;

    m_has_sdt = false;

    if (m_sdt)
    {
        delete m_sdt;
        m_sdt = NULL;
    }
    ;

    m_has_bdo = false;

    if (m_bdo)
    {
        delete m_bdo;
        m_bdo = NULL;
    }
    ;

    m_has_r = false;

    if (m_r)
    {
        delete m_r;
        m_r = NULL;
    }
    ;

    m_has_dir = true;
    if (!m_dir)
    {
        m_dir = new CT_DirContentRun();
    }
    return m_dir;
}

const CT_DirContentRun& CT_RunTrackChange::ChildGroup_1::get_dir() const
{
    if (m_dir)
    {
        return *m_dir;
    }
    return CT_DirContentRun::default_instance();
}

bool CT_RunTrackChange::ChildGroup_1::has_bdo() const
{
    return m_has_bdo;
}

CT_BdoContentRun* CT_RunTrackChange::ChildGroup_1::mutable_bdo()
{

    m_has_customXml = false;

    if (m_customXml)
    {
        delete m_customXml;
        m_customXml = NULL;
    }
    ;

    m_has_smartTag = false;

    if (m_smartTag)
    {
        delete m_smartTag;
        m_smartTag = NULL;
    }
    ;

    m_has_sdt = false;

    if (m_sdt)
    {
        delete m_sdt;
        m_sdt = NULL;
    }
    ;

    m_has_dir = false;

    if (m_dir)
    {
        delete m_dir;
        m_dir = NULL;
    }
    ;

    m_has_r = false;

    if (m_r)
    {
        delete m_r;
        m_r = NULL;
    }
    ;

    m_has_bdo = true;
    if (!m_bdo)
    {
        m_bdo = new CT_BdoContentRun();
    }
    return m_bdo;
}

const CT_BdoContentRun& CT_RunTrackChange::ChildGroup_1::get_bdo() const
{
    if (m_bdo)
    {
        return *m_bdo;
    }
    return CT_BdoContentRun::default_instance();
}

bool CT_RunTrackChange::ChildGroup_1::has_r() const
{
    return m_has_r;
}

CT_R* CT_RunTrackChange::ChildGroup_1::mutable_r()
{

    m_has_customXml = false;

    if (m_customXml)
    {
        delete m_customXml;
        m_customXml = NULL;
    }
    ;

    m_has_smartTag = false;

    if (m_smartTag)
    {
        delete m_smartTag;
        m_smartTag = NULL;
    }
    ;

    m_has_sdt = false;

    if (m_sdt)
    {
        delete m_sdt;
        m_sdt = NULL;
    }
    ;

    m_has_dir = false;

    if (m_dir)
    {
        delete m_dir;
        m_dir = NULL;
    }
    ;

    m_has_bdo = false;

    if (m_bdo)
    {
        delete m_bdo;
        m_bdo = NULL;
    }
    ;

    m_has_r = true;
    if (!m_r)
    {
        m_r = new CT_R();
    }
    return m_r;
}

const CT_R& CT_RunTrackChange::ChildGroup_1::get_r() const
{
    if (m_r)
    {
        return *m_r;
    }
    return CT_R::default_instance();
}


// CT_RunTrackChange::ChildGroup_2
CT_RunTrackChange::ChildGroup_2::ChildGroup_2()
    :m_has_proofErr(false),
     m_proofErr(NULL),
     m_has_permStart(false),
     m_permStart(NULL),
     m_has_permEnd(false),
     m_permEnd(NULL)
{
}
bool CT_RunTrackChange::ChildGroup_2::has_proofErr() const
{
    return m_has_proofErr;
}

CT_ProofErr* CT_RunTrackChange::ChildGroup_2::mutable_proofErr()
{

    m_has_permStart = false;

    if (m_permStart)
    {
        delete m_permStart;
        m_permStart = NULL;
    }
    ;

    m_has_permEnd = false;

    if (m_permEnd)
    {
        delete m_permEnd;
        m_permEnd = NULL;
    }
    ;

    m_has_proofErr = true;
    if (!m_proofErr)
    {
        m_proofErr = new CT_ProofErr();
    }
    return m_proofErr;
}

const CT_ProofErr& CT_RunTrackChange::ChildGroup_2::get_proofErr() const
{
    if (m_proofErr)
    {
        return *m_proofErr;
    }
    return CT_ProofErr::default_instance();
}

bool CT_RunTrackChange::ChildGroup_2::has_permStart() const
{
    return m_has_permStart;
}

CT_PermStart* CT_RunTrackChange::ChildGroup_2::mutable_permStart()
{

    m_has_proofErr = false;

    if (m_proofErr)
    {
        delete m_proofErr;
        m_proofErr = NULL;
    }
    ;

    m_has_permEnd = false;

    if (m_permEnd)
    {
        delete m_permEnd;
        m_permEnd = NULL;
    }
    ;

    m_has_permStart = true;
    if (!m_permStart)
    {
        m_permStart = new CT_PermStart();
    }
    return m_permStart;
}

const CT_PermStart& CT_RunTrackChange::ChildGroup_2::get_permStart() const
{
    if (m_permStart)
    {
        return *m_permStart;
    }
    return CT_PermStart::default_instance();
}

bool CT_RunTrackChange::ChildGroup_2::has_permEnd() const
{
    return m_has_permEnd;
}

CT_Perm* CT_RunTrackChange::ChildGroup_2::mutable_permEnd()
{

    m_has_proofErr = false;

    if (m_proofErr)
    {
        delete m_proofErr;
        m_proofErr = NULL;
    }
    ;

    m_has_permStart = false;

    if (m_permStart)
    {
        delete m_permStart;
        m_permStart = NULL;
    }
    ;

    m_has_permEnd = true;
    if (!m_permEnd)
    {
        m_permEnd = new CT_Perm();
    }
    return m_permEnd;
}

const CT_Perm& CT_RunTrackChange::ChildGroup_2::get_permEnd() const
{
    if (m_permEnd)
    {
        return *m_permEnd;
    }
    return CT_Perm::default_instance();
}


// CT_RunTrackChange::ChildGroup_3
CT_RunTrackChange::ChildGroup_3::ChildGroup_3()
    :m_has_bookmarkStart(false),
     m_bookmarkStart(NULL),
     m_has_bookmarkEnd(false),
     m_bookmarkEnd(NULL),
     m_has_moveFromRangeStart(false),
     m_moveFromRangeStart(NULL),
     m_has_moveFromRangeEnd(false),
     m_moveFromRangeEnd(NULL),
     m_has_moveToRangeStart(false),
     m_moveToRangeStart(NULL),
     m_has_moveToRangeEnd(false),
     m_moveToRangeEnd(NULL),
     m_has_commentRangeStart(false),
     m_commentRangeStart(NULL),
     m_has_commentRangeEnd(false),
     m_commentRangeEnd(NULL),
     m_has_customXmlInsRangeStart(false),
     m_customXmlInsRangeStart(NULL),
     m_has_customXmlInsRangeEnd(false),
     m_customXmlInsRangeEnd(NULL),
     m_has_customXmlDelRangeStart(false),
     m_customXmlDelRangeStart(NULL),
     m_has_customXmlDelRangeEnd(false),
     m_customXmlDelRangeEnd(NULL),
     m_has_customXmlMoveFromRangeStart(false),
     m_customXmlMoveFromRangeStart(NULL),
     m_has_customXmlMoveFromRangeEnd(false),
     m_customXmlMoveFromRangeEnd(NULL),
     m_has_customXmlMoveToRangeStart(false),
     m_customXmlMoveToRangeStart(NULL),
     m_has_customXmlMoveToRangeEnd(false),
     m_customXmlMoveToRangeEnd(NULL),
     m_has_ins(false),
     m_ins(NULL),
     m_has_del(false),
     m_del(NULL),
     m_has_moveFrom(false),
     m_moveFrom(NULL),
     m_has_moveTo(false),
     m_moveTo(NULL)
{
}
bool CT_RunTrackChange::ChildGroup_3::has_bookmarkStart() const
{
    return m_has_bookmarkStart;
}

CT_Bookmark* CT_RunTrackChange::ChildGroup_3::mutable_bookmarkStart()
{

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_bookmarkStart = true;
    if (!m_bookmarkStart)
    {
        m_bookmarkStart = new CT_Bookmark();
    }
    return m_bookmarkStart;
}

const CT_Bookmark& CT_RunTrackChange::ChildGroup_3::get_bookmarkStart() const
{
    if (m_bookmarkStart)
    {
        return *m_bookmarkStart;
    }
    return CT_Bookmark::default_instance();
}

bool CT_RunTrackChange::ChildGroup_3::has_bookmarkEnd() const
{
    return m_has_bookmarkEnd;
}

CT_MarkupRange* CT_RunTrackChange::ChildGroup_3::mutable_bookmarkEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_bookmarkEnd = true;
    if (!m_bookmarkEnd)
    {
        m_bookmarkEnd = new CT_MarkupRange();
    }
    return m_bookmarkEnd;
}

const CT_MarkupRange& CT_RunTrackChange::ChildGroup_3::get_bookmarkEnd() const
{
    if (m_bookmarkEnd)
    {
        return *m_bookmarkEnd;
    }
    return CT_MarkupRange::default_instance();
}

bool CT_RunTrackChange::ChildGroup_3::has_moveFromRangeStart() const
{
    return m_has_moveFromRangeStart;
}

CT_MoveBookmark* CT_RunTrackChange::ChildGroup_3::mutable_moveFromRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_moveFromRangeStart = true;
    if (!m_moveFromRangeStart)
    {
        m_moveFromRangeStart = new CT_MoveBookmark();
    }
    return m_moveFromRangeStart;
}

const CT_MoveBookmark& CT_RunTrackChange::ChildGroup_3::get_moveFromRangeStart() const
{
    if (m_moveFromRangeStart)
    {
        return *m_moveFromRangeStart;
    }
    return CT_MoveBookmark::default_instance();
}

bool CT_RunTrackChange::ChildGroup_3::has_moveFromRangeEnd() const
{
    return m_has_moveFromRangeEnd;
}

CT_MarkupRange* CT_RunTrackChange::ChildGroup_3::mutable_moveFromRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_moveFromRangeEnd = true;
    if (!m_moveFromRangeEnd)
    {
        m_moveFromRangeEnd = new CT_MarkupRange();
    }
    return m_moveFromRangeEnd;
}

const CT_MarkupRange& CT_RunTrackChange::ChildGroup_3::get_moveFromRangeEnd() const
{
    if (m_moveFromRangeEnd)
    {
        return *m_moveFromRangeEnd;
    }
    return CT_MarkupRange::default_instance();
}

bool CT_RunTrackChange::ChildGroup_3::has_moveToRangeStart() const
{
    return m_has_moveToRangeStart;
}

CT_MoveBookmark* CT_RunTrackChange::ChildGroup_3::mutable_moveToRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_moveToRangeStart = true;
    if (!m_moveToRangeStart)
    {
        m_moveToRangeStart = new CT_MoveBookmark();
    }
    return m_moveToRangeStart;
}

const CT_MoveBookmark& CT_RunTrackChange::ChildGroup_3::get_moveToRangeStart() const
{
    if (m_moveToRangeStart)
    {
        return *m_moveToRangeStart;
    }
    return CT_MoveBookmark::default_instance();
}

bool CT_RunTrackChange::ChildGroup_3::has_moveToRangeEnd() const
{
    return m_has_moveToRangeEnd;
}

CT_MarkupRange* CT_RunTrackChange::ChildGroup_3::mutable_moveToRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_moveToRangeEnd = true;
    if (!m_moveToRangeEnd)
    {
        m_moveToRangeEnd = new CT_MarkupRange();
    }
    return m_moveToRangeEnd;
}

const CT_MarkupRange& CT_RunTrackChange::ChildGroup_3::get_moveToRangeEnd() const
{
    if (m_moveToRangeEnd)
    {
        return *m_moveToRangeEnd;
    }
    return CT_MarkupRange::default_instance();
}

bool CT_RunTrackChange::ChildGroup_3::has_commentRangeStart() const
{
    return m_has_commentRangeStart;
}

CT_MarkupRange* CT_RunTrackChange::ChildGroup_3::mutable_commentRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_commentRangeStart = true;
    if (!m_commentRangeStart)
    {
        m_commentRangeStart = new CT_MarkupRange();
    }
    return m_commentRangeStart;
}

const CT_MarkupRange& CT_RunTrackChange::ChildGroup_3::get_commentRangeStart() const
{
    if (m_commentRangeStart)
    {
        return *m_commentRangeStart;
    }
    return CT_MarkupRange::default_instance();
}

bool CT_RunTrackChange::ChildGroup_3::has_commentRangeEnd() const
{
    return m_has_commentRangeEnd;
}

CT_MarkupRange* CT_RunTrackChange::ChildGroup_3::mutable_commentRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_commentRangeEnd = true;
    if (!m_commentRangeEnd)
    {
        m_commentRangeEnd = new CT_MarkupRange();
    }
    return m_commentRangeEnd;
}

const CT_MarkupRange& CT_RunTrackChange::ChildGroup_3::get_commentRangeEnd() const
{
    if (m_commentRangeEnd)
    {
        return *m_commentRangeEnd;
    }
    return CT_MarkupRange::default_instance();
}

bool CT_RunTrackChange::ChildGroup_3::has_customXmlInsRangeStart() const
{
    return m_has_customXmlInsRangeStart;
}

CT_TrackChange* CT_RunTrackChange::ChildGroup_3::mutable_customXmlInsRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = true;
    if (!m_customXmlInsRangeStart)
    {
        m_customXmlInsRangeStart = new CT_TrackChange();
    }
    return m_customXmlInsRangeStart;
}

const CT_TrackChange& CT_RunTrackChange::ChildGroup_3::get_customXmlInsRangeStart() const
{
    if (m_customXmlInsRangeStart)
    {
        return *m_customXmlInsRangeStart;
    }
    return CT_TrackChange::default_instance();
}

bool CT_RunTrackChange::ChildGroup_3::has_customXmlInsRangeEnd() const
{
    return m_has_customXmlInsRangeEnd;
}

CT_Markup* CT_RunTrackChange::ChildGroup_3::mutable_customXmlInsRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = true;
    if (!m_customXmlInsRangeEnd)
    {
        m_customXmlInsRangeEnd = new CT_Markup();
    }
    return m_customXmlInsRangeEnd;
}

const CT_Markup& CT_RunTrackChange::ChildGroup_3::get_customXmlInsRangeEnd() const
{
    if (m_customXmlInsRangeEnd)
    {
        return *m_customXmlInsRangeEnd;
    }
    return CT_Markup::default_instance();
}

bool CT_RunTrackChange::ChildGroup_3::has_customXmlDelRangeStart() const
{
    return m_has_customXmlDelRangeStart;
}

CT_TrackChange* CT_RunTrackChange::ChildGroup_3::mutable_customXmlDelRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = true;
    if (!m_customXmlDelRangeStart)
    {
        m_customXmlDelRangeStart = new CT_TrackChange();
    }
    return m_customXmlDelRangeStart;
}

const CT_TrackChange& CT_RunTrackChange::ChildGroup_3::get_customXmlDelRangeStart() const
{
    if (m_customXmlDelRangeStart)
    {
        return *m_customXmlDelRangeStart;
    }
    return CT_TrackChange::default_instance();
}

bool CT_RunTrackChange::ChildGroup_3::has_customXmlDelRangeEnd() const
{
    return m_has_customXmlDelRangeEnd;
}

CT_Markup* CT_RunTrackChange::ChildGroup_3::mutable_customXmlDelRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = true;
    if (!m_customXmlDelRangeEnd)
    {
        m_customXmlDelRangeEnd = new CT_Markup();
    }
    return m_customXmlDelRangeEnd;
}

const CT_Markup& CT_RunTrackChange::ChildGroup_3::get_customXmlDelRangeEnd() const
{
    if (m_customXmlDelRangeEnd)
    {
        return *m_customXmlDelRangeEnd;
    }
    return CT_Markup::default_instance();
}

bool CT_RunTrackChange::ChildGroup_3::has_customXmlMoveFromRangeStart() const
{
    return m_has_customXmlMoveFromRangeStart;
}

CT_TrackChange* CT_RunTrackChange::ChildGroup_3::mutable_customXmlMoveFromRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = true;
    if (!m_customXmlMoveFromRangeStart)
    {
        m_customXmlMoveFromRangeStart = new CT_TrackChange();
    }
    return m_customXmlMoveFromRangeStart;
}

const CT_TrackChange& CT_RunTrackChange::ChildGroup_3::get_customXmlMoveFromRangeStart() const
{
    if (m_customXmlMoveFromRangeStart)
    {
        return *m_customXmlMoveFromRangeStart;
    }
    return CT_TrackChange::default_instance();
}

bool CT_RunTrackChange::ChildGroup_3::has_customXmlMoveFromRangeEnd() const
{
    return m_has_customXmlMoveFromRangeEnd;
}

CT_Markup* CT_RunTrackChange::ChildGroup_3::mutable_customXmlMoveFromRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = true;
    if (!m_customXmlMoveFromRangeEnd)
    {
        m_customXmlMoveFromRangeEnd = new CT_Markup();
    }
    return m_customXmlMoveFromRangeEnd;
}

const CT_Markup& CT_RunTrackChange::ChildGroup_3::get_customXmlMoveFromRangeEnd() const
{
    if (m_customXmlMoveFromRangeEnd)
    {
        return *m_customXmlMoveFromRangeEnd;
    }
    return CT_Markup::default_instance();
}

bool CT_RunTrackChange::ChildGroup_3::has_customXmlMoveToRangeStart() const
{
    return m_has_customXmlMoveToRangeStart;
}

CT_TrackChange* CT_RunTrackChange::ChildGroup_3::mutable_customXmlMoveToRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = true;
    if (!m_customXmlMoveToRangeStart)
    {
        m_customXmlMoveToRangeStart = new CT_TrackChange();
    }
    return m_customXmlMoveToRangeStart;
}

const CT_TrackChange& CT_RunTrackChange::ChildGroup_3::get_customXmlMoveToRangeStart() const
{
    if (m_customXmlMoveToRangeStart)
    {
        return *m_customXmlMoveToRangeStart;
    }
    return CT_TrackChange::default_instance();
}

bool CT_RunTrackChange::ChildGroup_3::has_customXmlMoveToRangeEnd() const
{
    return m_has_customXmlMoveToRangeEnd;
}

CT_Markup* CT_RunTrackChange::ChildGroup_3::mutable_customXmlMoveToRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = true;
    if (!m_customXmlMoveToRangeEnd)
    {
        m_customXmlMoveToRangeEnd = new CT_Markup();
    }
    return m_customXmlMoveToRangeEnd;
}

const CT_Markup& CT_RunTrackChange::ChildGroup_3::get_customXmlMoveToRangeEnd() const
{
    if (m_customXmlMoveToRangeEnd)
    {
        return *m_customXmlMoveToRangeEnd;
    }
    return CT_Markup::default_instance();
}

bool CT_RunTrackChange::ChildGroup_3::has_ins() const
{
    return m_has_ins;
}

CT_RunTrackChange* CT_RunTrackChange::ChildGroup_3::mutable_ins()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_ins = true;
    if (!m_ins)
    {
        m_ins = new CT_RunTrackChange();
    }
    return m_ins;
}

const CT_RunTrackChange& CT_RunTrackChange::ChildGroup_3::get_ins() const
{
    if (m_ins)
    {
        return *m_ins;
    }
    return CT_RunTrackChange::default_instance();
}

bool CT_RunTrackChange::ChildGroup_3::has_del() const
{
    return m_has_del;
}

CT_RunTrackChange* CT_RunTrackChange::ChildGroup_3::mutable_del()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_del = true;
    if (!m_del)
    {
        m_del = new CT_RunTrackChange();
    }
    return m_del;
}

const CT_RunTrackChange& CT_RunTrackChange::ChildGroup_3::get_del() const
{
    if (m_del)
    {
        return *m_del;
    }
    return CT_RunTrackChange::default_instance();
}

bool CT_RunTrackChange::ChildGroup_3::has_moveFrom() const
{
    return m_has_moveFrom;
}

CT_RunTrackChange* CT_RunTrackChange::ChildGroup_3::mutable_moveFrom()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_moveFrom = true;
    if (!m_moveFrom)
    {
        m_moveFrom = new CT_RunTrackChange();
    }
    return m_moveFrom;
}

const CT_RunTrackChange& CT_RunTrackChange::ChildGroup_3::get_moveFrom() const
{
    if (m_moveFrom)
    {
        return *m_moveFrom;
    }
    return CT_RunTrackChange::default_instance();
}

bool CT_RunTrackChange::ChildGroup_3::has_moveTo() const
{
    return m_has_moveTo;
}

CT_RunTrackChange* CT_RunTrackChange::ChildGroup_3::mutable_moveTo()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = true;
    if (!m_moveTo)
    {
        m_moveTo = new CT_RunTrackChange();
    }
    return m_moveTo;
}

const CT_RunTrackChange& CT_RunTrackChange::ChildGroup_3::get_moveTo() const
{
    if (m_moveTo)
    {
        return *m_moveTo;
    }
    return CT_RunTrackChange::default_instance();
}


// CT_RunTrackChange::ChildGroup_4
CT_RunTrackChange::ChildGroup_4::ChildGroup_4()
    :m_has_m_oMathPara(false),
     m_m_oMathPara(NULL),
     m_has_m_oMath(false),
     m_m_oMath(NULL)
{
}
bool CT_RunTrackChange::ChildGroup_4::has_m_oMathPara() const
{
    return m_has_m_oMathPara;
}

ns_m::CT_OMathPara* CT_RunTrackChange::ChildGroup_4::mutable_m_oMathPara()
{

    m_has_m_oMath = false;

    if (m_m_oMath)
    {
        delete m_m_oMath;
        m_m_oMath = NULL;
    }
    ;

    m_has_m_oMathPara = true;
    if (!m_m_oMathPara)
    {
        m_m_oMathPara = new ns_m::CT_OMathPara();
    }
    return m_m_oMathPara;
}

const ns_m::CT_OMathPara& CT_RunTrackChange::ChildGroup_4::get_m_oMathPara() const
{
    if (m_m_oMathPara)
    {
        return *m_m_oMathPara;
    }
    return ns_m::CT_OMathPara::default_instance();
}

bool CT_RunTrackChange::ChildGroup_4::has_m_oMath() const
{
    return m_has_m_oMath;
}

ns_m::CT_OMath* CT_RunTrackChange::ChildGroup_4::mutable_m_oMath()
{

    m_has_m_oMathPara = false;

    if (m_m_oMathPara)
    {
        delete m_m_oMathPara;
        m_m_oMathPara = NULL;
    }
    ;

    m_has_m_oMath = true;
    if (!m_m_oMath)
    {
        m_m_oMath = new ns_m::CT_OMath();
    }
    return m_m_oMath;
}

const ns_m::CT_OMath& CT_RunTrackChange::ChildGroup_4::get_m_oMath() const
{
    if (m_m_oMath)
    {
        return *m_m_oMath;
    }
    return ns_m::CT_OMath::default_instance();
}


// CT_RunTrackChange::ChildGroup_5
CT_RunTrackChange::ChildGroup_5::ChildGroup_5()
    :m_has_m_acc(false),
     m_m_acc(NULL),
     m_has_m_bar(false),
     m_m_bar(NULL),
     m_has_m_box(false),
     m_m_box(NULL),
     m_has_m_borderBox(false),
     m_m_borderBox(NULL),
     m_has_m_d(false),
     m_m_d(NULL),
     m_has_m_eqArr(false),
     m_m_eqArr(NULL),
     m_has_m_f(false),
     m_m_f(NULL),
     m_has_m_func(false),
     m_m_func(NULL),
     m_has_m_groupChr(false),
     m_m_groupChr(NULL),
     m_has_m_limLow(false),
     m_m_limLow(NULL),
     m_has_m_limUpp(false),
     m_m_limUpp(NULL),
     m_has_m_m(false),
     m_m_m(NULL),
     m_has_m_nary(false),
     m_m_nary(NULL),
     m_has_m_phant(false),
     m_m_phant(NULL),
     m_has_m_rad(false),
     m_m_rad(NULL),
     m_has_m_sPre(false),
     m_m_sPre(NULL),
     m_has_m_sSub(false),
     m_m_sSub(NULL),
     m_has_m_sSubSup(false),
     m_m_sSubSup(NULL),
     m_has_m_sSup(false),
     m_m_sSup(NULL),
     m_has_m_r(false),
     m_m_r(NULL)
{
}
bool CT_RunTrackChange::ChildGroup_5::has_m_acc() const
{
    return m_has_m_acc;
}

ns_m::CT_Acc* CT_RunTrackChange::ChildGroup_5::mutable_m_acc()
{

    m_has_m_bar = false;

    if (m_m_bar)
    {
        delete m_m_bar;
        m_m_bar = NULL;
    }
    ;

    m_has_m_box = false;

    if (m_m_box)
    {
        delete m_m_box;
        m_m_box = NULL;
    }
    ;

    m_has_m_borderBox = false;

    if (m_m_borderBox)
    {
        delete m_m_borderBox;
        m_m_borderBox = NULL;
    }
    ;

    m_has_m_d = false;

    if (m_m_d)
    {
        delete m_m_d;
        m_m_d = NULL;
    }
    ;

    m_has_m_eqArr = false;

    if (m_m_eqArr)
    {
        delete m_m_eqArr;
        m_m_eqArr = NULL;
    }
    ;

    m_has_m_f = false;

    if (m_m_f)
    {
        delete m_m_f;
        m_m_f = NULL;
    }
    ;

    m_has_m_func = false;

    if (m_m_func)
    {
        delete m_m_func;
        m_m_func = NULL;
    }
    ;

    m_has_m_groupChr = false;

    if (m_m_groupChr)
    {
        delete m_m_groupChr;
        m_m_groupChr = NULL;
    }
    ;

    m_has_m_limLow = false;

    if (m_m_limLow)
    {
        delete m_m_limLow;
        m_m_limLow = NULL;
    }
    ;

    m_has_m_limUpp = false;

    if (m_m_limUpp)
    {
        delete m_m_limUpp;
        m_m_limUpp = NULL;
    }
    ;

    m_has_m_m = false;

    if (m_m_m)
    {
        delete m_m_m;
        m_m_m = NULL;
    }
    ;

    m_has_m_nary = false;

    if (m_m_nary)
    {
        delete m_m_nary;
        m_m_nary = NULL;
    }
    ;

    m_has_m_phant = false;

    if (m_m_phant)
    {
        delete m_m_phant;
        m_m_phant = NULL;
    }
    ;

    m_has_m_rad = false;

    if (m_m_rad)
    {
        delete m_m_rad;
        m_m_rad = NULL;
    }
    ;

    m_has_m_sPre = false;

    if (m_m_sPre)
    {
        delete m_m_sPre;
        m_m_sPre = NULL;
    }
    ;

    m_has_m_sSub = false;

    if (m_m_sSub)
    {
        delete m_m_sSub;
        m_m_sSub = NULL;
    }
    ;

    m_has_m_sSubSup = false;

    if (m_m_sSubSup)
    {
        delete m_m_sSubSup;
        m_m_sSubSup = NULL;
    }
    ;

    m_has_m_sSup = false;

    if (m_m_sSup)
    {
        delete m_m_sSup;
        m_m_sSup = NULL;
    }
    ;

    m_has_m_r = false;

    if (m_m_r)
    {
        delete m_m_r;
        m_m_r = NULL;
    }
    ;

    m_has_m_acc = true;
    if (!m_m_acc)
    {
        m_m_acc = new ns_m::CT_Acc();
    }
    return m_m_acc;
}

const ns_m::CT_Acc& CT_RunTrackChange::ChildGroup_5::get_m_acc() const
{
    if (m_m_acc)
    {
        return *m_m_acc;
    }
    return ns_m::CT_Acc::default_instance();
}

bool CT_RunTrackChange::ChildGroup_5::has_m_bar() const
{
    return m_has_m_bar;
}

ns_m::CT_Bar* CT_RunTrackChange::ChildGroup_5::mutable_m_bar()
{

    m_has_m_acc = false;

    if (m_m_acc)
    {
        delete m_m_acc;
        m_m_acc = NULL;
    }
    ;

    m_has_m_box = false;

    if (m_m_box)
    {
        delete m_m_box;
        m_m_box = NULL;
    }
    ;

    m_has_m_borderBox = false;

    if (m_m_borderBox)
    {
        delete m_m_borderBox;
        m_m_borderBox = NULL;
    }
    ;

    m_has_m_d = false;

    if (m_m_d)
    {
        delete m_m_d;
        m_m_d = NULL;
    }
    ;

    m_has_m_eqArr = false;

    if (m_m_eqArr)
    {
        delete m_m_eqArr;
        m_m_eqArr = NULL;
    }
    ;

    m_has_m_f = false;

    if (m_m_f)
    {
        delete m_m_f;
        m_m_f = NULL;
    }
    ;

    m_has_m_func = false;

    if (m_m_func)
    {
        delete m_m_func;
        m_m_func = NULL;
    }
    ;

    m_has_m_groupChr = false;

    if (m_m_groupChr)
    {
        delete m_m_groupChr;
        m_m_groupChr = NULL;
    }
    ;

    m_has_m_limLow = false;

    if (m_m_limLow)
    {
        delete m_m_limLow;
        m_m_limLow = NULL;
    }
    ;

    m_has_m_limUpp = false;

    if (m_m_limUpp)
    {
        delete m_m_limUpp;
        m_m_limUpp = NULL;
    }
    ;

    m_has_m_m = false;

    if (m_m_m)
    {
        delete m_m_m;
        m_m_m = NULL;
    }
    ;

    m_has_m_nary = false;

    if (m_m_nary)
    {
        delete m_m_nary;
        m_m_nary = NULL;
    }
    ;

    m_has_m_phant = false;

    if (m_m_phant)
    {
        delete m_m_phant;
        m_m_phant = NULL;
    }
    ;

    m_has_m_rad = false;

    if (m_m_rad)
    {
        delete m_m_rad;
        m_m_rad = NULL;
    }
    ;

    m_has_m_sPre = false;

    if (m_m_sPre)
    {
        delete m_m_sPre;
        m_m_sPre = NULL;
    }
    ;

    m_has_m_sSub = false;

    if (m_m_sSub)
    {
        delete m_m_sSub;
        m_m_sSub = NULL;
    }
    ;

    m_has_m_sSubSup = false;

    if (m_m_sSubSup)
    {
        delete m_m_sSubSup;
        m_m_sSubSup = NULL;
    }
    ;

    m_has_m_sSup = false;

    if (m_m_sSup)
    {
        delete m_m_sSup;
        m_m_sSup = NULL;
    }
    ;

    m_has_m_r = false;

    if (m_m_r)
    {
        delete m_m_r;
        m_m_r = NULL;
    }
    ;

    m_has_m_bar = true;
    if (!m_m_bar)
    {
        m_m_bar = new ns_m::CT_Bar();
    }
    return m_m_bar;
}

const ns_m::CT_Bar& CT_RunTrackChange::ChildGroup_5::get_m_bar() const
{
    if (m_m_bar)
    {
        return *m_m_bar;
    }
    return ns_m::CT_Bar::default_instance();
}

bool CT_RunTrackChange::ChildGroup_5::has_m_box() const
{
    return m_has_m_box;
}

ns_m::CT_Box* CT_RunTrackChange::ChildGroup_5::mutable_m_box()
{

    m_has_m_acc = false;

    if (m_m_acc)
    {
        delete m_m_acc;
        m_m_acc = NULL;
    }
    ;

    m_has_m_bar = false;

    if (m_m_bar)
    {
        delete m_m_bar;
        m_m_bar = NULL;
    }
    ;

    m_has_m_borderBox = false;

    if (m_m_borderBox)
    {
        delete m_m_borderBox;
        m_m_borderBox = NULL;
    }
    ;

    m_has_m_d = false;

    if (m_m_d)
    {
        delete m_m_d;
        m_m_d = NULL;
    }
    ;

    m_has_m_eqArr = false;

    if (m_m_eqArr)
    {
        delete m_m_eqArr;
        m_m_eqArr = NULL;
    }
    ;

    m_has_m_f = false;

    if (m_m_f)
    {
        delete m_m_f;
        m_m_f = NULL;
    }
    ;

    m_has_m_func = false;

    if (m_m_func)
    {
        delete m_m_func;
        m_m_func = NULL;
    }
    ;

    m_has_m_groupChr = false;

    if (m_m_groupChr)
    {
        delete m_m_groupChr;
        m_m_groupChr = NULL;
    }
    ;

    m_has_m_limLow = false;

    if (m_m_limLow)
    {
        delete m_m_limLow;
        m_m_limLow = NULL;
    }
    ;

    m_has_m_limUpp = false;

    if (m_m_limUpp)
    {
        delete m_m_limUpp;
        m_m_limUpp = NULL;
    }
    ;

    m_has_m_m = false;

    if (m_m_m)
    {
        delete m_m_m;
        m_m_m = NULL;
    }
    ;

    m_has_m_nary = false;

    if (m_m_nary)
    {
        delete m_m_nary;
        m_m_nary = NULL;
    }
    ;

    m_has_m_phant = false;

    if (m_m_phant)
    {
        delete m_m_phant;
        m_m_phant = NULL;
    }
    ;

    m_has_m_rad = false;

    if (m_m_rad)
    {
        delete m_m_rad;
        m_m_rad = NULL;
    }
    ;

    m_has_m_sPre = false;

    if (m_m_sPre)
    {
        delete m_m_sPre;
        m_m_sPre = NULL;
    }
    ;

    m_has_m_sSub = false;

    if (m_m_sSub)
    {
        delete m_m_sSub;
        m_m_sSub = NULL;
    }
    ;

    m_has_m_sSubSup = false;

    if (m_m_sSubSup)
    {
        delete m_m_sSubSup;
        m_m_sSubSup = NULL;
    }
    ;

    m_has_m_sSup = false;

    if (m_m_sSup)
    {
        delete m_m_sSup;
        m_m_sSup = NULL;
    }
    ;

    m_has_m_r = false;

    if (m_m_r)
    {
        delete m_m_r;
        m_m_r = NULL;
    }
    ;

    m_has_m_box = true;
    if (!m_m_box)
    {
        m_m_box = new ns_m::CT_Box();
    }
    return m_m_box;
}

const ns_m::CT_Box& CT_RunTrackChange::ChildGroup_5::get_m_box() const
{
    if (m_m_box)
    {
        return *m_m_box;
    }
    return ns_m::CT_Box::default_instance();
}

bool CT_RunTrackChange::ChildGroup_5::has_m_borderBox() const
{
    return m_has_m_borderBox;
}

ns_m::CT_BorderBox* CT_RunTrackChange::ChildGroup_5::mutable_m_borderBox()
{

    m_has_m_acc = false;

    if (m_m_acc)
    {
        delete m_m_acc;
        m_m_acc = NULL;
    }
    ;

    m_has_m_bar = false;

    if (m_m_bar)
    {
        delete m_m_bar;
        m_m_bar = NULL;
    }
    ;

    m_has_m_box = false;

    if (m_m_box)
    {
        delete m_m_box;
        m_m_box = NULL;
    }
    ;

    m_has_m_d = false;

    if (m_m_d)
    {
        delete m_m_d;
        m_m_d = NULL;
    }
    ;

    m_has_m_eqArr = false;

    if (m_m_eqArr)
    {
        delete m_m_eqArr;
        m_m_eqArr = NULL;
    }
    ;

    m_has_m_f = false;

    if (m_m_f)
    {
        delete m_m_f;
        m_m_f = NULL;
    }
    ;

    m_has_m_func = false;

    if (m_m_func)
    {
        delete m_m_func;
        m_m_func = NULL;
    }
    ;

    m_has_m_groupChr = false;

    if (m_m_groupChr)
    {
        delete m_m_groupChr;
        m_m_groupChr = NULL;
    }
    ;

    m_has_m_limLow = false;

    if (m_m_limLow)
    {
        delete m_m_limLow;
        m_m_limLow = NULL;
    }
    ;

    m_has_m_limUpp = false;

    if (m_m_limUpp)
    {
        delete m_m_limUpp;
        m_m_limUpp = NULL;
    }
    ;

    m_has_m_m = false;

    if (m_m_m)
    {
        delete m_m_m;
        m_m_m = NULL;
    }
    ;

    m_has_m_nary = false;

    if (m_m_nary)
    {
        delete m_m_nary;
        m_m_nary = NULL;
    }
    ;

    m_has_m_phant = false;

    if (m_m_phant)
    {
        delete m_m_phant;
        m_m_phant = NULL;
    }
    ;

    m_has_m_rad = false;

    if (m_m_rad)
    {
        delete m_m_rad;
        m_m_rad = NULL;
    }
    ;

    m_has_m_sPre = false;

    if (m_m_sPre)
    {
        delete m_m_sPre;
        m_m_sPre = NULL;
    }
    ;

    m_has_m_sSub = false;

    if (m_m_sSub)
    {
        delete m_m_sSub;
        m_m_sSub = NULL;
    }
    ;

    m_has_m_sSubSup = false;

    if (m_m_sSubSup)
    {
        delete m_m_sSubSup;
        m_m_sSubSup = NULL;
    }
    ;

    m_has_m_sSup = false;

    if (m_m_sSup)
    {
        delete m_m_sSup;
        m_m_sSup = NULL;
    }
    ;

    m_has_m_r = false;

    if (m_m_r)
    {
        delete m_m_r;
        m_m_r = NULL;
    }
    ;

    m_has_m_borderBox = true;
    if (!m_m_borderBox)
    {
        m_m_borderBox = new ns_m::CT_BorderBox();
    }
    return m_m_borderBox;
}

const ns_m::CT_BorderBox& CT_RunTrackChange::ChildGroup_5::get_m_borderBox() const
{
    if (m_m_borderBox)
    {
        return *m_m_borderBox;
    }
    return ns_m::CT_BorderBox::default_instance();
}

bool CT_RunTrackChange::ChildGroup_5::has_m_d() const
{
    return m_has_m_d;
}

ns_m::CT_D* CT_RunTrackChange::ChildGroup_5::mutable_m_d()
{

    m_has_m_acc = false;

    if (m_m_acc)
    {
        delete m_m_acc;
        m_m_acc = NULL;
    }
    ;

    m_has_m_bar = false;

    if (m_m_bar)
    {
        delete m_m_bar;
        m_m_bar = NULL;
    }
    ;

    m_has_m_box = false;

    if (m_m_box)
    {
        delete m_m_box;
        m_m_box = NULL;
    }
    ;

    m_has_m_borderBox = false;

    if (m_m_borderBox)
    {
        delete m_m_borderBox;
        m_m_borderBox = NULL;
    }
    ;

    m_has_m_eqArr = false;

    if (m_m_eqArr)
    {
        delete m_m_eqArr;
        m_m_eqArr = NULL;
    }
    ;

    m_has_m_f = false;

    if (m_m_f)
    {
        delete m_m_f;
        m_m_f = NULL;
    }
    ;

    m_has_m_func = false;

    if (m_m_func)
    {
        delete m_m_func;
        m_m_func = NULL;
    }
    ;

    m_has_m_groupChr = false;

    if (m_m_groupChr)
    {
        delete m_m_groupChr;
        m_m_groupChr = NULL;
    }
    ;

    m_has_m_limLow = false;

    if (m_m_limLow)
    {
        delete m_m_limLow;
        m_m_limLow = NULL;
    }
    ;

    m_has_m_limUpp = false;

    if (m_m_limUpp)
    {
        delete m_m_limUpp;
        m_m_limUpp = NULL;
    }
    ;

    m_has_m_m = false;

    if (m_m_m)
    {
        delete m_m_m;
        m_m_m = NULL;
    }
    ;

    m_has_m_nary = false;

    if (m_m_nary)
    {
        delete m_m_nary;
        m_m_nary = NULL;
    }
    ;

    m_has_m_phant = false;

    if (m_m_phant)
    {
        delete m_m_phant;
        m_m_phant = NULL;
    }
    ;

    m_has_m_rad = false;

    if (m_m_rad)
    {
        delete m_m_rad;
        m_m_rad = NULL;
    }
    ;

    m_has_m_sPre = false;

    if (m_m_sPre)
    {
        delete m_m_sPre;
        m_m_sPre = NULL;
    }
    ;

    m_has_m_sSub = false;

    if (m_m_sSub)
    {
        delete m_m_sSub;
        m_m_sSub = NULL;
    }
    ;

    m_has_m_sSubSup = false;

    if (m_m_sSubSup)
    {
        delete m_m_sSubSup;
        m_m_sSubSup = NULL;
    }
    ;

    m_has_m_sSup = false;

    if (m_m_sSup)
    {
        delete m_m_sSup;
        m_m_sSup = NULL;
    }
    ;

    m_has_m_r = false;

    if (m_m_r)
    {
        delete m_m_r;
        m_m_r = NULL;
    }
    ;

    m_has_m_d = true;
    if (!m_m_d)
    {
        m_m_d = new ns_m::CT_D();
    }
    return m_m_d;
}

const ns_m::CT_D& CT_RunTrackChange::ChildGroup_5::get_m_d() const
{
    if (m_m_d)
    {
        return *m_m_d;
    }
    return ns_m::CT_D::default_instance();
}

bool CT_RunTrackChange::ChildGroup_5::has_m_eqArr() const
{
    return m_has_m_eqArr;
}

ns_m::CT_EqArr* CT_RunTrackChange::ChildGroup_5::mutable_m_eqArr()
{

    m_has_m_acc = false;

    if (m_m_acc)
    {
        delete m_m_acc;
        m_m_acc = NULL;
    }
    ;

    m_has_m_bar = false;

    if (m_m_bar)
    {
        delete m_m_bar;
        m_m_bar = NULL;
    }
    ;

    m_has_m_box = false;

    if (m_m_box)
    {
        delete m_m_box;
        m_m_box = NULL;
    }
    ;

    m_has_m_borderBox = false;

    if (m_m_borderBox)
    {
        delete m_m_borderBox;
        m_m_borderBox = NULL;
    }
    ;

    m_has_m_d = false;

    if (m_m_d)
    {
        delete m_m_d;
        m_m_d = NULL;
    }
    ;

    m_has_m_f = false;

    if (m_m_f)
    {
        delete m_m_f;
        m_m_f = NULL;
    }
    ;

    m_has_m_func = false;

    if (m_m_func)
    {
        delete m_m_func;
        m_m_func = NULL;
    }
    ;

    m_has_m_groupChr = false;

    if (m_m_groupChr)
    {
        delete m_m_groupChr;
        m_m_groupChr = NULL;
    }
    ;

    m_has_m_limLow = false;

    if (m_m_limLow)
    {
        delete m_m_limLow;
        m_m_limLow = NULL;
    }
    ;

    m_has_m_limUpp = false;

    if (m_m_limUpp)
    {
        delete m_m_limUpp;
        m_m_limUpp = NULL;
    }
    ;

    m_has_m_m = false;

    if (m_m_m)
    {
        delete m_m_m;
        m_m_m = NULL;
    }
    ;

    m_has_m_nary = false;

    if (m_m_nary)
    {
        delete m_m_nary;
        m_m_nary = NULL;
    }
    ;

    m_has_m_phant = false;

    if (m_m_phant)
    {
        delete m_m_phant;
        m_m_phant = NULL;
    }
    ;

    m_has_m_rad = false;

    if (m_m_rad)
    {
        delete m_m_rad;
        m_m_rad = NULL;
    }
    ;

    m_has_m_sPre = false;

    if (m_m_sPre)
    {
        delete m_m_sPre;
        m_m_sPre = NULL;
    }
    ;

    m_has_m_sSub = false;

    if (m_m_sSub)
    {
        delete m_m_sSub;
        m_m_sSub = NULL;
    }
    ;

    m_has_m_sSubSup = false;

    if (m_m_sSubSup)
    {
        delete m_m_sSubSup;
        m_m_sSubSup = NULL;
    }
    ;

    m_has_m_sSup = false;

    if (m_m_sSup)
    {
        delete m_m_sSup;
        m_m_sSup = NULL;
    }
    ;

    m_has_m_r = false;

    if (m_m_r)
    {
        delete m_m_r;
        m_m_r = NULL;
    }
    ;

    m_has_m_eqArr = true;
    if (!m_m_eqArr)
    {
        m_m_eqArr = new ns_m::CT_EqArr();
    }
    return m_m_eqArr;
}

const ns_m::CT_EqArr& CT_RunTrackChange::ChildGroup_5::get_m_eqArr() const
{
    if (m_m_eqArr)
    {
        return *m_m_eqArr;
    }
    return ns_m::CT_EqArr::default_instance();
}

bool CT_RunTrackChange::ChildGroup_5::has_m_f() const
{
    return m_has_m_f;
}

ns_m::CT_F* CT_RunTrackChange::ChildGroup_5::mutable_m_f()
{

    m_has_m_acc = false;

    if (m_m_acc)
    {
        delete m_m_acc;
        m_m_acc = NULL;
    }
    ;

    m_has_m_bar = false;

    if (m_m_bar)
    {
        delete m_m_bar;
        m_m_bar = NULL;
    }
    ;

    m_has_m_box = false;

    if (m_m_box)
    {
        delete m_m_box;
        m_m_box = NULL;
    }
    ;

    m_has_m_borderBox = false;

    if (m_m_borderBox)
    {
        delete m_m_borderBox;
        m_m_borderBox = NULL;
    }
    ;

    m_has_m_d = false;

    if (m_m_d)
    {
        delete m_m_d;
        m_m_d = NULL;
    }
    ;

    m_has_m_eqArr = false;

    if (m_m_eqArr)
    {
        delete m_m_eqArr;
        m_m_eqArr = NULL;
    }
    ;

    m_has_m_func = false;

    if (m_m_func)
    {
        delete m_m_func;
        m_m_func = NULL;
    }
    ;

    m_has_m_groupChr = false;

    if (m_m_groupChr)
    {
        delete m_m_groupChr;
        m_m_groupChr = NULL;
    }
    ;

    m_has_m_limLow = false;

    if (m_m_limLow)
    {
        delete m_m_limLow;
        m_m_limLow = NULL;
    }
    ;

    m_has_m_limUpp = false;

    if (m_m_limUpp)
    {
        delete m_m_limUpp;
        m_m_limUpp = NULL;
    }
    ;

    m_has_m_m = false;

    if (m_m_m)
    {
        delete m_m_m;
        m_m_m = NULL;
    }
    ;

    m_has_m_nary = false;

    if (m_m_nary)
    {
        delete m_m_nary;
        m_m_nary = NULL;
    }
    ;

    m_has_m_phant = false;

    if (m_m_phant)
    {
        delete m_m_phant;
        m_m_phant = NULL;
    }
    ;

    m_has_m_rad = false;

    if (m_m_rad)
    {
        delete m_m_rad;
        m_m_rad = NULL;
    }
    ;

    m_has_m_sPre = false;

    if (m_m_sPre)
    {
        delete m_m_sPre;
        m_m_sPre = NULL;
    }
    ;

    m_has_m_sSub = false;

    if (m_m_sSub)
    {
        delete m_m_sSub;
        m_m_sSub = NULL;
    }
    ;

    m_has_m_sSubSup = false;

    if (m_m_sSubSup)
    {
        delete m_m_sSubSup;
        m_m_sSubSup = NULL;
    }
    ;

    m_has_m_sSup = false;

    if (m_m_sSup)
    {
        delete m_m_sSup;
        m_m_sSup = NULL;
    }
    ;

    m_has_m_r = false;

    if (m_m_r)
    {
        delete m_m_r;
        m_m_r = NULL;
    }
    ;

    m_has_m_f = true;
    if (!m_m_f)
    {
        m_m_f = new ns_m::CT_F();
    }
    return m_m_f;
}

const ns_m::CT_F& CT_RunTrackChange::ChildGroup_5::get_m_f() const
{
    if (m_m_f)
    {
        return *m_m_f;
    }
    return ns_m::CT_F::default_instance();
}

bool CT_RunTrackChange::ChildGroup_5::has_m_func() const
{
    return m_has_m_func;
}

ns_m::CT_Func* CT_RunTrackChange::ChildGroup_5::mutable_m_func()
{

    m_has_m_acc = false;

    if (m_m_acc)
    {
        delete m_m_acc;
        m_m_acc = NULL;
    }
    ;

    m_has_m_bar = false;

    if (m_m_bar)
    {
        delete m_m_bar;
        m_m_bar = NULL;
    }
    ;

    m_has_m_box = false;

    if (m_m_box)
    {
        delete m_m_box;
        m_m_box = NULL;
    }
    ;

    m_has_m_borderBox = false;

    if (m_m_borderBox)
    {
        delete m_m_borderBox;
        m_m_borderBox = NULL;
    }
    ;

    m_has_m_d = false;

    if (m_m_d)
    {
        delete m_m_d;
        m_m_d = NULL;
    }
    ;

    m_has_m_eqArr = false;

    if (m_m_eqArr)
    {
        delete m_m_eqArr;
        m_m_eqArr = NULL;
    }
    ;

    m_has_m_f = false;

    if (m_m_f)
    {
        delete m_m_f;
        m_m_f = NULL;
    }
    ;

    m_has_m_groupChr = false;

    if (m_m_groupChr)
    {
        delete m_m_groupChr;
        m_m_groupChr = NULL;
    }
    ;

    m_has_m_limLow = false;

    if (m_m_limLow)
    {
        delete m_m_limLow;
        m_m_limLow = NULL;
    }
    ;

    m_has_m_limUpp = false;

    if (m_m_limUpp)
    {
        delete m_m_limUpp;
        m_m_limUpp = NULL;
    }
    ;

    m_has_m_m = false;

    if (m_m_m)
    {
        delete m_m_m;
        m_m_m = NULL;
    }
    ;

    m_has_m_nary = false;

    if (m_m_nary)
    {
        delete m_m_nary;
        m_m_nary = NULL;
    }
    ;

    m_has_m_phant = false;

    if (m_m_phant)
    {
        delete m_m_phant;
        m_m_phant = NULL;
    }
    ;

    m_has_m_rad = false;

    if (m_m_rad)
    {
        delete m_m_rad;
        m_m_rad = NULL;
    }
    ;

    m_has_m_sPre = false;

    if (m_m_sPre)
    {
        delete m_m_sPre;
        m_m_sPre = NULL;
    }
    ;

    m_has_m_sSub = false;

    if (m_m_sSub)
    {
        delete m_m_sSub;
        m_m_sSub = NULL;
    }
    ;

    m_has_m_sSubSup = false;

    if (m_m_sSubSup)
    {
        delete m_m_sSubSup;
        m_m_sSubSup = NULL;
    }
    ;

    m_has_m_sSup = false;

    if (m_m_sSup)
    {
        delete m_m_sSup;
        m_m_sSup = NULL;
    }
    ;

    m_has_m_r = false;

    if (m_m_r)
    {
        delete m_m_r;
        m_m_r = NULL;
    }
    ;

    m_has_m_func = true;
    if (!m_m_func)
    {
        m_m_func = new ns_m::CT_Func();
    }
    return m_m_func;
}

const ns_m::CT_Func& CT_RunTrackChange::ChildGroup_5::get_m_func() const
{
    if (m_m_func)
    {
        return *m_m_func;
    }
    return ns_m::CT_Func::default_instance();
}

bool CT_RunTrackChange::ChildGroup_5::has_m_groupChr() const
{
    return m_has_m_groupChr;
}

ns_m::CT_GroupChr* CT_RunTrackChange::ChildGroup_5::mutable_m_groupChr()
{

    m_has_m_acc = false;

    if (m_m_acc)
    {
        delete m_m_acc;
        m_m_acc = NULL;
    }
    ;

    m_has_m_bar = false;

    if (m_m_bar)
    {
        delete m_m_bar;
        m_m_bar = NULL;
    }
    ;

    m_has_m_box = false;

    if (m_m_box)
    {
        delete m_m_box;
        m_m_box = NULL;
    }
    ;

    m_has_m_borderBox = false;

    if (m_m_borderBox)
    {
        delete m_m_borderBox;
        m_m_borderBox = NULL;
    }
    ;

    m_has_m_d = false;

    if (m_m_d)
    {
        delete m_m_d;
        m_m_d = NULL;
    }
    ;

    m_has_m_eqArr = false;

    if (m_m_eqArr)
    {
        delete m_m_eqArr;
        m_m_eqArr = NULL;
    }
    ;

    m_has_m_f = false;

    if (m_m_f)
    {
        delete m_m_f;
        m_m_f = NULL;
    }
    ;

    m_has_m_func = false;

    if (m_m_func)
    {
        delete m_m_func;
        m_m_func = NULL;
    }
    ;

    m_has_m_limLow = false;

    if (m_m_limLow)
    {
        delete m_m_limLow;
        m_m_limLow = NULL;
    }
    ;

    m_has_m_limUpp = false;

    if (m_m_limUpp)
    {
        delete m_m_limUpp;
        m_m_limUpp = NULL;
    }
    ;

    m_has_m_m = false;

    if (m_m_m)
    {
        delete m_m_m;
        m_m_m = NULL;
    }
    ;

    m_has_m_nary = false;

    if (m_m_nary)
    {
        delete m_m_nary;
        m_m_nary = NULL;
    }
    ;

    m_has_m_phant = false;

    if (m_m_phant)
    {
        delete m_m_phant;
        m_m_phant = NULL;
    }
    ;

    m_has_m_rad = false;

    if (m_m_rad)
    {
        delete m_m_rad;
        m_m_rad = NULL;
    }
    ;

    m_has_m_sPre = false;

    if (m_m_sPre)
    {
        delete m_m_sPre;
        m_m_sPre = NULL;
    }
    ;

    m_has_m_sSub = false;

    if (m_m_sSub)
    {
        delete m_m_sSub;
        m_m_sSub = NULL;
    }
    ;

    m_has_m_sSubSup = false;

    if (m_m_sSubSup)
    {
        delete m_m_sSubSup;
        m_m_sSubSup = NULL;
    }
    ;

    m_has_m_sSup = false;

    if (m_m_sSup)
    {
        delete m_m_sSup;
        m_m_sSup = NULL;
    }
    ;

    m_has_m_r = false;

    if (m_m_r)
    {
        delete m_m_r;
        m_m_r = NULL;
    }
    ;

    m_has_m_groupChr = true;
    if (!m_m_groupChr)
    {
        m_m_groupChr = new ns_m::CT_GroupChr();
    }
    return m_m_groupChr;
}

const ns_m::CT_GroupChr& CT_RunTrackChange::ChildGroup_5::get_m_groupChr() const
{
    if (m_m_groupChr)
    {
        return *m_m_groupChr;
    }
    return ns_m::CT_GroupChr::default_instance();
}

bool CT_RunTrackChange::ChildGroup_5::has_m_limLow() const
{
    return m_has_m_limLow;
}

ns_m::CT_LimLow* CT_RunTrackChange::ChildGroup_5::mutable_m_limLow()
{

    m_has_m_acc = false;

    if (m_m_acc)
    {
        delete m_m_acc;
        m_m_acc = NULL;
    }
    ;

    m_has_m_bar = false;

    if (m_m_bar)
    {
        delete m_m_bar;
        m_m_bar = NULL;
    }
    ;

    m_has_m_box = false;

    if (m_m_box)
    {
        delete m_m_box;
        m_m_box = NULL;
    }
    ;

    m_has_m_borderBox = false;

    if (m_m_borderBox)
    {
        delete m_m_borderBox;
        m_m_borderBox = NULL;
    }
    ;

    m_has_m_d = false;

    if (m_m_d)
    {
        delete m_m_d;
        m_m_d = NULL;
    }
    ;

    m_has_m_eqArr = false;

    if (m_m_eqArr)
    {
        delete m_m_eqArr;
        m_m_eqArr = NULL;
    }
    ;

    m_has_m_f = false;

    if (m_m_f)
    {
        delete m_m_f;
        m_m_f = NULL;
    }
    ;

    m_has_m_func = false;

    if (m_m_func)
    {
        delete m_m_func;
        m_m_func = NULL;
    }
    ;

    m_has_m_groupChr = false;

    if (m_m_groupChr)
    {
        delete m_m_groupChr;
        m_m_groupChr = NULL;
    }
    ;

    m_has_m_limUpp = false;

    if (m_m_limUpp)
    {
        delete m_m_limUpp;
        m_m_limUpp = NULL;
    }
    ;

    m_has_m_m = false;

    if (m_m_m)
    {
        delete m_m_m;
        m_m_m = NULL;
    }
    ;

    m_has_m_nary = false;

    if (m_m_nary)
    {
        delete m_m_nary;
        m_m_nary = NULL;
    }
    ;

    m_has_m_phant = false;

    if (m_m_phant)
    {
        delete m_m_phant;
        m_m_phant = NULL;
    }
    ;

    m_has_m_rad = false;

    if (m_m_rad)
    {
        delete m_m_rad;
        m_m_rad = NULL;
    }
    ;

    m_has_m_sPre = false;

    if (m_m_sPre)
    {
        delete m_m_sPre;
        m_m_sPre = NULL;
    }
    ;

    m_has_m_sSub = false;

    if (m_m_sSub)
    {
        delete m_m_sSub;
        m_m_sSub = NULL;
    }
    ;

    m_has_m_sSubSup = false;

    if (m_m_sSubSup)
    {
        delete m_m_sSubSup;
        m_m_sSubSup = NULL;
    }
    ;

    m_has_m_sSup = false;

    if (m_m_sSup)
    {
        delete m_m_sSup;
        m_m_sSup = NULL;
    }
    ;

    m_has_m_r = false;

    if (m_m_r)
    {
        delete m_m_r;
        m_m_r = NULL;
    }
    ;

    m_has_m_limLow = true;
    if (!m_m_limLow)
    {
        m_m_limLow = new ns_m::CT_LimLow();
    }
    return m_m_limLow;
}

const ns_m::CT_LimLow& CT_RunTrackChange::ChildGroup_5::get_m_limLow() const
{
    if (m_m_limLow)
    {
        return *m_m_limLow;
    }
    return ns_m::CT_LimLow::default_instance();
}

bool CT_RunTrackChange::ChildGroup_5::has_m_limUpp() const
{
    return m_has_m_limUpp;
}

ns_m::CT_LimUpp* CT_RunTrackChange::ChildGroup_5::mutable_m_limUpp()
{

    m_has_m_acc = false;

    if (m_m_acc)
    {
        delete m_m_acc;
        m_m_acc = NULL;
    }
    ;

    m_has_m_bar = false;

    if (m_m_bar)
    {
        delete m_m_bar;
        m_m_bar = NULL;
    }
    ;

    m_has_m_box = false;

    if (m_m_box)
    {
        delete m_m_box;
        m_m_box = NULL;
    }
    ;

    m_has_m_borderBox = false;

    if (m_m_borderBox)
    {
        delete m_m_borderBox;
        m_m_borderBox = NULL;
    }
    ;

    m_has_m_d = false;

    if (m_m_d)
    {
        delete m_m_d;
        m_m_d = NULL;
    }
    ;

    m_has_m_eqArr = false;

    if (m_m_eqArr)
    {
        delete m_m_eqArr;
        m_m_eqArr = NULL;
    }
    ;

    m_has_m_f = false;

    if (m_m_f)
    {
        delete m_m_f;
        m_m_f = NULL;
    }
    ;

    m_has_m_func = false;

    if (m_m_func)
    {
        delete m_m_func;
        m_m_func = NULL;
    }
    ;

    m_has_m_groupChr = false;

    if (m_m_groupChr)
    {
        delete m_m_groupChr;
        m_m_groupChr = NULL;
    }
    ;

    m_has_m_limLow = false;

    if (m_m_limLow)
    {
        delete m_m_limLow;
        m_m_limLow = NULL;
    }
    ;

    m_has_m_m = false;

    if (m_m_m)
    {
        delete m_m_m;
        m_m_m = NULL;
    }
    ;

    m_has_m_nary = false;

    if (m_m_nary)
    {
        delete m_m_nary;
        m_m_nary = NULL;
    }
    ;

    m_has_m_phant = false;

    if (m_m_phant)
    {
        delete m_m_phant;
        m_m_phant = NULL;
    }
    ;

    m_has_m_rad = false;

    if (m_m_rad)
    {
        delete m_m_rad;
        m_m_rad = NULL;
    }
    ;

    m_has_m_sPre = false;

    if (m_m_sPre)
    {
        delete m_m_sPre;
        m_m_sPre = NULL;
    }
    ;

    m_has_m_sSub = false;

    if (m_m_sSub)
    {
        delete m_m_sSub;
        m_m_sSub = NULL;
    }
    ;

    m_has_m_sSubSup = false;

    if (m_m_sSubSup)
    {
        delete m_m_sSubSup;
        m_m_sSubSup = NULL;
    }
    ;

    m_has_m_sSup = false;

    if (m_m_sSup)
    {
        delete m_m_sSup;
        m_m_sSup = NULL;
    }
    ;

    m_has_m_r = false;

    if (m_m_r)
    {
        delete m_m_r;
        m_m_r = NULL;
    }
    ;

    m_has_m_limUpp = true;
    if (!m_m_limUpp)
    {
        m_m_limUpp = new ns_m::CT_LimUpp();
    }
    return m_m_limUpp;
}

const ns_m::CT_LimUpp& CT_RunTrackChange::ChildGroup_5::get_m_limUpp() const
{
    if (m_m_limUpp)
    {
        return *m_m_limUpp;
    }
    return ns_m::CT_LimUpp::default_instance();
}

bool CT_RunTrackChange::ChildGroup_5::has_m_m() const
{
    return m_has_m_m;
}

ns_m::CT_M* CT_RunTrackChange::ChildGroup_5::mutable_m_m()
{

    m_has_m_acc = false;

    if (m_m_acc)
    {
        delete m_m_acc;
        m_m_acc = NULL;
    }
    ;

    m_has_m_bar = false;

    if (m_m_bar)
    {
        delete m_m_bar;
        m_m_bar = NULL;
    }
    ;

    m_has_m_box = false;

    if (m_m_box)
    {
        delete m_m_box;
        m_m_box = NULL;
    }
    ;

    m_has_m_borderBox = false;

    if (m_m_borderBox)
    {
        delete m_m_borderBox;
        m_m_borderBox = NULL;
    }
    ;

    m_has_m_d = false;

    if (m_m_d)
    {
        delete m_m_d;
        m_m_d = NULL;
    }
    ;

    m_has_m_eqArr = false;

    if (m_m_eqArr)
    {
        delete m_m_eqArr;
        m_m_eqArr = NULL;
    }
    ;

    m_has_m_f = false;

    if (m_m_f)
    {
        delete m_m_f;
        m_m_f = NULL;
    }
    ;

    m_has_m_func = false;

    if (m_m_func)
    {
        delete m_m_func;
        m_m_func = NULL;
    }
    ;

    m_has_m_groupChr = false;

    if (m_m_groupChr)
    {
        delete m_m_groupChr;
        m_m_groupChr = NULL;
    }
    ;

    m_has_m_limLow = false;

    if (m_m_limLow)
    {
        delete m_m_limLow;
        m_m_limLow = NULL;
    }
    ;

    m_has_m_limUpp = false;

    if (m_m_limUpp)
    {
        delete m_m_limUpp;
        m_m_limUpp = NULL;
    }
    ;

    m_has_m_nary = false;

    if (m_m_nary)
    {
        delete m_m_nary;
        m_m_nary = NULL;
    }
    ;

    m_has_m_phant = false;

    if (m_m_phant)
    {
        delete m_m_phant;
        m_m_phant = NULL;
    }
    ;

    m_has_m_rad = false;

    if (m_m_rad)
    {
        delete m_m_rad;
        m_m_rad = NULL;
    }
    ;

    m_has_m_sPre = false;

    if (m_m_sPre)
    {
        delete m_m_sPre;
        m_m_sPre = NULL;
    }
    ;

    m_has_m_sSub = false;

    if (m_m_sSub)
    {
        delete m_m_sSub;
        m_m_sSub = NULL;
    }
    ;

    m_has_m_sSubSup = false;

    if (m_m_sSubSup)
    {
        delete m_m_sSubSup;
        m_m_sSubSup = NULL;
    }
    ;

    m_has_m_sSup = false;

    if (m_m_sSup)
    {
        delete m_m_sSup;
        m_m_sSup = NULL;
    }
    ;

    m_has_m_r = false;

    if (m_m_r)
    {
        delete m_m_r;
        m_m_r = NULL;
    }
    ;

    m_has_m_m = true;
    if (!m_m_m)
    {
        m_m_m = new ns_m::CT_M();
    }
    return m_m_m;
}

const ns_m::CT_M& CT_RunTrackChange::ChildGroup_5::get_m_m() const
{
    if (m_m_m)
    {
        return *m_m_m;
    }
    return ns_m::CT_M::default_instance();
}

bool CT_RunTrackChange::ChildGroup_5::has_m_nary() const
{
    return m_has_m_nary;
}

ns_m::CT_Nary* CT_RunTrackChange::ChildGroup_5::mutable_m_nary()
{

    m_has_m_acc = false;

    if (m_m_acc)
    {
        delete m_m_acc;
        m_m_acc = NULL;
    }
    ;

    m_has_m_bar = false;

    if (m_m_bar)
    {
        delete m_m_bar;
        m_m_bar = NULL;
    }
    ;

    m_has_m_box = false;

    if (m_m_box)
    {
        delete m_m_box;
        m_m_box = NULL;
    }
    ;

    m_has_m_borderBox = false;

    if (m_m_borderBox)
    {
        delete m_m_borderBox;
        m_m_borderBox = NULL;
    }
    ;

    m_has_m_d = false;

    if (m_m_d)
    {
        delete m_m_d;
        m_m_d = NULL;
    }
    ;

    m_has_m_eqArr = false;

    if (m_m_eqArr)
    {
        delete m_m_eqArr;
        m_m_eqArr = NULL;
    }
    ;

    m_has_m_f = false;

    if (m_m_f)
    {
        delete m_m_f;
        m_m_f = NULL;
    }
    ;

    m_has_m_func = false;

    if (m_m_func)
    {
        delete m_m_func;
        m_m_func = NULL;
    }
    ;

    m_has_m_groupChr = false;

    if (m_m_groupChr)
    {
        delete m_m_groupChr;
        m_m_groupChr = NULL;
    }
    ;

    m_has_m_limLow = false;

    if (m_m_limLow)
    {
        delete m_m_limLow;
        m_m_limLow = NULL;
    }
    ;

    m_has_m_limUpp = false;

    if (m_m_limUpp)
    {
        delete m_m_limUpp;
        m_m_limUpp = NULL;
    }
    ;

    m_has_m_m = false;

    if (m_m_m)
    {
        delete m_m_m;
        m_m_m = NULL;
    }
    ;

    m_has_m_phant = false;

    if (m_m_phant)
    {
        delete m_m_phant;
        m_m_phant = NULL;
    }
    ;

    m_has_m_rad = false;

    if (m_m_rad)
    {
        delete m_m_rad;
        m_m_rad = NULL;
    }
    ;

    m_has_m_sPre = false;

    if (m_m_sPre)
    {
        delete m_m_sPre;
        m_m_sPre = NULL;
    }
    ;

    m_has_m_sSub = false;

    if (m_m_sSub)
    {
        delete m_m_sSub;
        m_m_sSub = NULL;
    }
    ;

    m_has_m_sSubSup = false;

    if (m_m_sSubSup)
    {
        delete m_m_sSubSup;
        m_m_sSubSup = NULL;
    }
    ;

    m_has_m_sSup = false;

    if (m_m_sSup)
    {
        delete m_m_sSup;
        m_m_sSup = NULL;
    }
    ;

    m_has_m_r = false;

    if (m_m_r)
    {
        delete m_m_r;
        m_m_r = NULL;
    }
    ;

    m_has_m_nary = true;
    if (!m_m_nary)
    {
        m_m_nary = new ns_m::CT_Nary();
    }
    return m_m_nary;
}

const ns_m::CT_Nary& CT_RunTrackChange::ChildGroup_5::get_m_nary() const
{
    if (m_m_nary)
    {
        return *m_m_nary;
    }
    return ns_m::CT_Nary::default_instance();
}

bool CT_RunTrackChange::ChildGroup_5::has_m_phant() const
{
    return m_has_m_phant;
}

ns_m::CT_Phant* CT_RunTrackChange::ChildGroup_5::mutable_m_phant()
{

    m_has_m_acc = false;

    if (m_m_acc)
    {
        delete m_m_acc;
        m_m_acc = NULL;
    }
    ;

    m_has_m_bar = false;

    if (m_m_bar)
    {
        delete m_m_bar;
        m_m_bar = NULL;
    }
    ;

    m_has_m_box = false;

    if (m_m_box)
    {
        delete m_m_box;
        m_m_box = NULL;
    }
    ;

    m_has_m_borderBox = false;

    if (m_m_borderBox)
    {
        delete m_m_borderBox;
        m_m_borderBox = NULL;
    }
    ;

    m_has_m_d = false;

    if (m_m_d)
    {
        delete m_m_d;
        m_m_d = NULL;
    }
    ;

    m_has_m_eqArr = false;

    if (m_m_eqArr)
    {
        delete m_m_eqArr;
        m_m_eqArr = NULL;
    }
    ;

    m_has_m_f = false;

    if (m_m_f)
    {
        delete m_m_f;
        m_m_f = NULL;
    }
    ;

    m_has_m_func = false;

    if (m_m_func)
    {
        delete m_m_func;
        m_m_func = NULL;
    }
    ;

    m_has_m_groupChr = false;

    if (m_m_groupChr)
    {
        delete m_m_groupChr;
        m_m_groupChr = NULL;
    }
    ;

    m_has_m_limLow = false;

    if (m_m_limLow)
    {
        delete m_m_limLow;
        m_m_limLow = NULL;
    }
    ;

    m_has_m_limUpp = false;

    if (m_m_limUpp)
    {
        delete m_m_limUpp;
        m_m_limUpp = NULL;
    }
    ;

    m_has_m_m = false;

    if (m_m_m)
    {
        delete m_m_m;
        m_m_m = NULL;
    }
    ;

    m_has_m_nary = false;

    if (m_m_nary)
    {
        delete m_m_nary;
        m_m_nary = NULL;
    }
    ;

    m_has_m_rad = false;

    if (m_m_rad)
    {
        delete m_m_rad;
        m_m_rad = NULL;
    }
    ;

    m_has_m_sPre = false;

    if (m_m_sPre)
    {
        delete m_m_sPre;
        m_m_sPre = NULL;
    }
    ;

    m_has_m_sSub = false;

    if (m_m_sSub)
    {
        delete m_m_sSub;
        m_m_sSub = NULL;
    }
    ;

    m_has_m_sSubSup = false;

    if (m_m_sSubSup)
    {
        delete m_m_sSubSup;
        m_m_sSubSup = NULL;
    }
    ;

    m_has_m_sSup = false;

    if (m_m_sSup)
    {
        delete m_m_sSup;
        m_m_sSup = NULL;
    }
    ;

    m_has_m_r = false;

    if (m_m_r)
    {
        delete m_m_r;
        m_m_r = NULL;
    }
    ;

    m_has_m_phant = true;
    if (!m_m_phant)
    {
        m_m_phant = new ns_m::CT_Phant();
    }
    return m_m_phant;
}

const ns_m::CT_Phant& CT_RunTrackChange::ChildGroup_5::get_m_phant() const
{
    if (m_m_phant)
    {
        return *m_m_phant;
    }
    return ns_m::CT_Phant::default_instance();
}

bool CT_RunTrackChange::ChildGroup_5::has_m_rad() const
{
    return m_has_m_rad;
}

ns_m::CT_Rad* CT_RunTrackChange::ChildGroup_5::mutable_m_rad()
{

    m_has_m_acc = false;

    if (m_m_acc)
    {
        delete m_m_acc;
        m_m_acc = NULL;
    }
    ;

    m_has_m_bar = false;

    if (m_m_bar)
    {
        delete m_m_bar;
        m_m_bar = NULL;
    }
    ;

    m_has_m_box = false;

    if (m_m_box)
    {
        delete m_m_box;
        m_m_box = NULL;
    }
    ;

    m_has_m_borderBox = false;

    if (m_m_borderBox)
    {
        delete m_m_borderBox;
        m_m_borderBox = NULL;
    }
    ;

    m_has_m_d = false;

    if (m_m_d)
    {
        delete m_m_d;
        m_m_d = NULL;
    }
    ;

    m_has_m_eqArr = false;

    if (m_m_eqArr)
    {
        delete m_m_eqArr;
        m_m_eqArr = NULL;
    }
    ;

    m_has_m_f = false;

    if (m_m_f)
    {
        delete m_m_f;
        m_m_f = NULL;
    }
    ;

    m_has_m_func = false;

    if (m_m_func)
    {
        delete m_m_func;
        m_m_func = NULL;
    }
    ;

    m_has_m_groupChr = false;

    if (m_m_groupChr)
    {
        delete m_m_groupChr;
        m_m_groupChr = NULL;
    }
    ;

    m_has_m_limLow = false;

    if (m_m_limLow)
    {
        delete m_m_limLow;
        m_m_limLow = NULL;
    }
    ;

    m_has_m_limUpp = false;

    if (m_m_limUpp)
    {
        delete m_m_limUpp;
        m_m_limUpp = NULL;
    }
    ;

    m_has_m_m = false;

    if (m_m_m)
    {
        delete m_m_m;
        m_m_m = NULL;
    }
    ;

    m_has_m_nary = false;

    if (m_m_nary)
    {
        delete m_m_nary;
        m_m_nary = NULL;
    }
    ;

    m_has_m_phant = false;

    if (m_m_phant)
    {
        delete m_m_phant;
        m_m_phant = NULL;
    }
    ;

    m_has_m_sPre = false;

    if (m_m_sPre)
    {
        delete m_m_sPre;
        m_m_sPre = NULL;
    }
    ;

    m_has_m_sSub = false;

    if (m_m_sSub)
    {
        delete m_m_sSub;
        m_m_sSub = NULL;
    }
    ;

    m_has_m_sSubSup = false;

    if (m_m_sSubSup)
    {
        delete m_m_sSubSup;
        m_m_sSubSup = NULL;
    }
    ;

    m_has_m_sSup = false;

    if (m_m_sSup)
    {
        delete m_m_sSup;
        m_m_sSup = NULL;
    }
    ;

    m_has_m_r = false;

    if (m_m_r)
    {
        delete m_m_r;
        m_m_r = NULL;
    }
    ;

    m_has_m_rad = true;
    if (!m_m_rad)
    {
        m_m_rad = new ns_m::CT_Rad();
    }
    return m_m_rad;
}

const ns_m::CT_Rad& CT_RunTrackChange::ChildGroup_5::get_m_rad() const
{
    if (m_m_rad)
    {
        return *m_m_rad;
    }
    return ns_m::CT_Rad::default_instance();
}

bool CT_RunTrackChange::ChildGroup_5::has_m_sPre() const
{
    return m_has_m_sPre;
}

ns_m::CT_SPre* CT_RunTrackChange::ChildGroup_5::mutable_m_sPre()
{

    m_has_m_acc = false;

    if (m_m_acc)
    {
        delete m_m_acc;
        m_m_acc = NULL;
    }
    ;

    m_has_m_bar = false;

    if (m_m_bar)
    {
        delete m_m_bar;
        m_m_bar = NULL;
    }
    ;

    m_has_m_box = false;

    if (m_m_box)
    {
        delete m_m_box;
        m_m_box = NULL;
    }
    ;

    m_has_m_borderBox = false;

    if (m_m_borderBox)
    {
        delete m_m_borderBox;
        m_m_borderBox = NULL;
    }
    ;

    m_has_m_d = false;

    if (m_m_d)
    {
        delete m_m_d;
        m_m_d = NULL;
    }
    ;

    m_has_m_eqArr = false;

    if (m_m_eqArr)
    {
        delete m_m_eqArr;
        m_m_eqArr = NULL;
    }
    ;

    m_has_m_f = false;

    if (m_m_f)
    {
        delete m_m_f;
        m_m_f = NULL;
    }
    ;

    m_has_m_func = false;

    if (m_m_func)
    {
        delete m_m_func;
        m_m_func = NULL;
    }
    ;

    m_has_m_groupChr = false;

    if (m_m_groupChr)
    {
        delete m_m_groupChr;
        m_m_groupChr = NULL;
    }
    ;

    m_has_m_limLow = false;

    if (m_m_limLow)
    {
        delete m_m_limLow;
        m_m_limLow = NULL;
    }
    ;

    m_has_m_limUpp = false;

    if (m_m_limUpp)
    {
        delete m_m_limUpp;
        m_m_limUpp = NULL;
    }
    ;

    m_has_m_m = false;

    if (m_m_m)
    {
        delete m_m_m;
        m_m_m = NULL;
    }
    ;

    m_has_m_nary = false;

    if (m_m_nary)
    {
        delete m_m_nary;
        m_m_nary = NULL;
    }
    ;

    m_has_m_phant = false;

    if (m_m_phant)
    {
        delete m_m_phant;
        m_m_phant = NULL;
    }
    ;

    m_has_m_rad = false;

    if (m_m_rad)
    {
        delete m_m_rad;
        m_m_rad = NULL;
    }
    ;

    m_has_m_sSub = false;

    if (m_m_sSub)
    {
        delete m_m_sSub;
        m_m_sSub = NULL;
    }
    ;

    m_has_m_sSubSup = false;

    if (m_m_sSubSup)
    {
        delete m_m_sSubSup;
        m_m_sSubSup = NULL;
    }
    ;

    m_has_m_sSup = false;

    if (m_m_sSup)
    {
        delete m_m_sSup;
        m_m_sSup = NULL;
    }
    ;

    m_has_m_r = false;

    if (m_m_r)
    {
        delete m_m_r;
        m_m_r = NULL;
    }
    ;

    m_has_m_sPre = true;
    if (!m_m_sPre)
    {
        m_m_sPre = new ns_m::CT_SPre();
    }
    return m_m_sPre;
}

const ns_m::CT_SPre& CT_RunTrackChange::ChildGroup_5::get_m_sPre() const
{
    if (m_m_sPre)
    {
        return *m_m_sPre;
    }
    return ns_m::CT_SPre::default_instance();
}

bool CT_RunTrackChange::ChildGroup_5::has_m_sSub() const
{
    return m_has_m_sSub;
}

ns_m::CT_SSub* CT_RunTrackChange::ChildGroup_5::mutable_m_sSub()
{

    m_has_m_acc = false;

    if (m_m_acc)
    {
        delete m_m_acc;
        m_m_acc = NULL;
    }
    ;

    m_has_m_bar = false;

    if (m_m_bar)
    {
        delete m_m_bar;
        m_m_bar = NULL;
    }
    ;

    m_has_m_box = false;

    if (m_m_box)
    {
        delete m_m_box;
        m_m_box = NULL;
    }
    ;

    m_has_m_borderBox = false;

    if (m_m_borderBox)
    {
        delete m_m_borderBox;
        m_m_borderBox = NULL;
    }
    ;

    m_has_m_d = false;

    if (m_m_d)
    {
        delete m_m_d;
        m_m_d = NULL;
    }
    ;

    m_has_m_eqArr = false;

    if (m_m_eqArr)
    {
        delete m_m_eqArr;
        m_m_eqArr = NULL;
    }
    ;

    m_has_m_f = false;

    if (m_m_f)
    {
        delete m_m_f;
        m_m_f = NULL;
    }
    ;

    m_has_m_func = false;

    if (m_m_func)
    {
        delete m_m_func;
        m_m_func = NULL;
    }
    ;

    m_has_m_groupChr = false;

    if (m_m_groupChr)
    {
        delete m_m_groupChr;
        m_m_groupChr = NULL;
    }
    ;

    m_has_m_limLow = false;

    if (m_m_limLow)
    {
        delete m_m_limLow;
        m_m_limLow = NULL;
    }
    ;

    m_has_m_limUpp = false;

    if (m_m_limUpp)
    {
        delete m_m_limUpp;
        m_m_limUpp = NULL;
    }
    ;

    m_has_m_m = false;

    if (m_m_m)
    {
        delete m_m_m;
        m_m_m = NULL;
    }
    ;

    m_has_m_nary = false;

    if (m_m_nary)
    {
        delete m_m_nary;
        m_m_nary = NULL;
    }
    ;

    m_has_m_phant = false;

    if (m_m_phant)
    {
        delete m_m_phant;
        m_m_phant = NULL;
    }
    ;

    m_has_m_rad = false;

    if (m_m_rad)
    {
        delete m_m_rad;
        m_m_rad = NULL;
    }
    ;

    m_has_m_sPre = false;

    if (m_m_sPre)
    {
        delete m_m_sPre;
        m_m_sPre = NULL;
    }
    ;

    m_has_m_sSubSup = false;

    if (m_m_sSubSup)
    {
        delete m_m_sSubSup;
        m_m_sSubSup = NULL;
    }
    ;

    m_has_m_sSup = false;

    if (m_m_sSup)
    {
        delete m_m_sSup;
        m_m_sSup = NULL;
    }
    ;

    m_has_m_r = false;

    if (m_m_r)
    {
        delete m_m_r;
        m_m_r = NULL;
    }
    ;

    m_has_m_sSub = true;
    if (!m_m_sSub)
    {
        m_m_sSub = new ns_m::CT_SSub();
    }
    return m_m_sSub;
}

const ns_m::CT_SSub& CT_RunTrackChange::ChildGroup_5::get_m_sSub() const
{
    if (m_m_sSub)
    {
        return *m_m_sSub;
    }
    return ns_m::CT_SSub::default_instance();
}

bool CT_RunTrackChange::ChildGroup_5::has_m_sSubSup() const
{
    return m_has_m_sSubSup;
}

ns_m::CT_SSubSup* CT_RunTrackChange::ChildGroup_5::mutable_m_sSubSup()
{

    m_has_m_acc = false;

    if (m_m_acc)
    {
        delete m_m_acc;
        m_m_acc = NULL;
    }
    ;

    m_has_m_bar = false;

    if (m_m_bar)
    {
        delete m_m_bar;
        m_m_bar = NULL;
    }
    ;

    m_has_m_box = false;

    if (m_m_box)
    {
        delete m_m_box;
        m_m_box = NULL;
    }
    ;

    m_has_m_borderBox = false;

    if (m_m_borderBox)
    {
        delete m_m_borderBox;
        m_m_borderBox = NULL;
    }
    ;

    m_has_m_d = false;

    if (m_m_d)
    {
        delete m_m_d;
        m_m_d = NULL;
    }
    ;

    m_has_m_eqArr = false;

    if (m_m_eqArr)
    {
        delete m_m_eqArr;
        m_m_eqArr = NULL;
    }
    ;

    m_has_m_f = false;

    if (m_m_f)
    {
        delete m_m_f;
        m_m_f = NULL;
    }
    ;

    m_has_m_func = false;

    if (m_m_func)
    {
        delete m_m_func;
        m_m_func = NULL;
    }
    ;

    m_has_m_groupChr = false;

    if (m_m_groupChr)
    {
        delete m_m_groupChr;
        m_m_groupChr = NULL;
    }
    ;

    m_has_m_limLow = false;

    if (m_m_limLow)
    {
        delete m_m_limLow;
        m_m_limLow = NULL;
    }
    ;

    m_has_m_limUpp = false;

    if (m_m_limUpp)
    {
        delete m_m_limUpp;
        m_m_limUpp = NULL;
    }
    ;

    m_has_m_m = false;

    if (m_m_m)
    {
        delete m_m_m;
        m_m_m = NULL;
    }
    ;

    m_has_m_nary = false;

    if (m_m_nary)
    {
        delete m_m_nary;
        m_m_nary = NULL;
    }
    ;

    m_has_m_phant = false;

    if (m_m_phant)
    {
        delete m_m_phant;
        m_m_phant = NULL;
    }
    ;

    m_has_m_rad = false;

    if (m_m_rad)
    {
        delete m_m_rad;
        m_m_rad = NULL;
    }
    ;

    m_has_m_sPre = false;

    if (m_m_sPre)
    {
        delete m_m_sPre;
        m_m_sPre = NULL;
    }
    ;

    m_has_m_sSub = false;

    if (m_m_sSub)
    {
        delete m_m_sSub;
        m_m_sSub = NULL;
    }
    ;

    m_has_m_sSup = false;

    if (m_m_sSup)
    {
        delete m_m_sSup;
        m_m_sSup = NULL;
    }
    ;

    m_has_m_r = false;

    if (m_m_r)
    {
        delete m_m_r;
        m_m_r = NULL;
    }
    ;

    m_has_m_sSubSup = true;
    if (!m_m_sSubSup)
    {
        m_m_sSubSup = new ns_m::CT_SSubSup();
    }
    return m_m_sSubSup;
}

const ns_m::CT_SSubSup& CT_RunTrackChange::ChildGroup_5::get_m_sSubSup() const
{
    if (m_m_sSubSup)
    {
        return *m_m_sSubSup;
    }
    return ns_m::CT_SSubSup::default_instance();
}

bool CT_RunTrackChange::ChildGroup_5::has_m_sSup() const
{
    return m_has_m_sSup;
}

ns_m::CT_SSup* CT_RunTrackChange::ChildGroup_5::mutable_m_sSup()
{

    m_has_m_acc = false;

    if (m_m_acc)
    {
        delete m_m_acc;
        m_m_acc = NULL;
    }
    ;

    m_has_m_bar = false;

    if (m_m_bar)
    {
        delete m_m_bar;
        m_m_bar = NULL;
    }
    ;

    m_has_m_box = false;

    if (m_m_box)
    {
        delete m_m_box;
        m_m_box = NULL;
    }
    ;

    m_has_m_borderBox = false;

    if (m_m_borderBox)
    {
        delete m_m_borderBox;
        m_m_borderBox = NULL;
    }
    ;

    m_has_m_d = false;

    if (m_m_d)
    {
        delete m_m_d;
        m_m_d = NULL;
    }
    ;

    m_has_m_eqArr = false;

    if (m_m_eqArr)
    {
        delete m_m_eqArr;
        m_m_eqArr = NULL;
    }
    ;

    m_has_m_f = false;

    if (m_m_f)
    {
        delete m_m_f;
        m_m_f = NULL;
    }
    ;

    m_has_m_func = false;

    if (m_m_func)
    {
        delete m_m_func;
        m_m_func = NULL;
    }
    ;

    m_has_m_groupChr = false;

    if (m_m_groupChr)
    {
        delete m_m_groupChr;
        m_m_groupChr = NULL;
    }
    ;

    m_has_m_limLow = false;

    if (m_m_limLow)
    {
        delete m_m_limLow;
        m_m_limLow = NULL;
    }
    ;

    m_has_m_limUpp = false;

    if (m_m_limUpp)
    {
        delete m_m_limUpp;
        m_m_limUpp = NULL;
    }
    ;

    m_has_m_m = false;

    if (m_m_m)
    {
        delete m_m_m;
        m_m_m = NULL;
    }
    ;

    m_has_m_nary = false;

    if (m_m_nary)
    {
        delete m_m_nary;
        m_m_nary = NULL;
    }
    ;

    m_has_m_phant = false;

    if (m_m_phant)
    {
        delete m_m_phant;
        m_m_phant = NULL;
    }
    ;

    m_has_m_rad = false;

    if (m_m_rad)
    {
        delete m_m_rad;
        m_m_rad = NULL;
    }
    ;

    m_has_m_sPre = false;

    if (m_m_sPre)
    {
        delete m_m_sPre;
        m_m_sPre = NULL;
    }
    ;

    m_has_m_sSub = false;

    if (m_m_sSub)
    {
        delete m_m_sSub;
        m_m_sSub = NULL;
    }
    ;

    m_has_m_sSubSup = false;

    if (m_m_sSubSup)
    {
        delete m_m_sSubSup;
        m_m_sSubSup = NULL;
    }
    ;

    m_has_m_r = false;

    if (m_m_r)
    {
        delete m_m_r;
        m_m_r = NULL;
    }
    ;

    m_has_m_sSup = true;
    if (!m_m_sSup)
    {
        m_m_sSup = new ns_m::CT_SSup();
    }
    return m_m_sSup;
}

const ns_m::CT_SSup& CT_RunTrackChange::ChildGroup_5::get_m_sSup() const
{
    if (m_m_sSup)
    {
        return *m_m_sSup;
    }
    return ns_m::CT_SSup::default_instance();
}

bool CT_RunTrackChange::ChildGroup_5::has_m_r() const
{
    return m_has_m_r;
}

ns_m::CT_R* CT_RunTrackChange::ChildGroup_5::mutable_m_r()
{

    m_has_m_acc = false;

    if (m_m_acc)
    {
        delete m_m_acc;
        m_m_acc = NULL;
    }
    ;

    m_has_m_bar = false;

    if (m_m_bar)
    {
        delete m_m_bar;
        m_m_bar = NULL;
    }
    ;

    m_has_m_box = false;

    if (m_m_box)
    {
        delete m_m_box;
        m_m_box = NULL;
    }
    ;

    m_has_m_borderBox = false;

    if (m_m_borderBox)
    {
        delete m_m_borderBox;
        m_m_borderBox = NULL;
    }
    ;

    m_has_m_d = false;

    if (m_m_d)
    {
        delete m_m_d;
        m_m_d = NULL;
    }
    ;

    m_has_m_eqArr = false;

    if (m_m_eqArr)
    {
        delete m_m_eqArr;
        m_m_eqArr = NULL;
    }
    ;

    m_has_m_f = false;

    if (m_m_f)
    {
        delete m_m_f;
        m_m_f = NULL;
    }
    ;

    m_has_m_func = false;

    if (m_m_func)
    {
        delete m_m_func;
        m_m_func = NULL;
    }
    ;

    m_has_m_groupChr = false;

    if (m_m_groupChr)
    {
        delete m_m_groupChr;
        m_m_groupChr = NULL;
    }
    ;

    m_has_m_limLow = false;

    if (m_m_limLow)
    {
        delete m_m_limLow;
        m_m_limLow = NULL;
    }
    ;

    m_has_m_limUpp = false;

    if (m_m_limUpp)
    {
        delete m_m_limUpp;
        m_m_limUpp = NULL;
    }
    ;

    m_has_m_m = false;

    if (m_m_m)
    {
        delete m_m_m;
        m_m_m = NULL;
    }
    ;

    m_has_m_nary = false;

    if (m_m_nary)
    {
        delete m_m_nary;
        m_m_nary = NULL;
    }
    ;

    m_has_m_phant = false;

    if (m_m_phant)
    {
        delete m_m_phant;
        m_m_phant = NULL;
    }
    ;

    m_has_m_rad = false;

    if (m_m_rad)
    {
        delete m_m_rad;
        m_m_rad = NULL;
    }
    ;

    m_has_m_sPre = false;

    if (m_m_sPre)
    {
        delete m_m_sPre;
        m_m_sPre = NULL;
    }
    ;

    m_has_m_sSub = false;

    if (m_m_sSub)
    {
        delete m_m_sSub;
        m_m_sSub = NULL;
    }
    ;

    m_has_m_sSubSup = false;

    if (m_m_sSubSup)
    {
        delete m_m_sSubSup;
        m_m_sSubSup = NULL;
    }
    ;

    m_has_m_sSup = false;

    if (m_m_sSup)
    {
        delete m_m_sSup;
        m_m_sSup = NULL;
    }
    ;

    m_has_m_r = true;
    if (!m_m_r)
    {
        m_m_r = new ns_m::CT_R();
    }
    return m_m_r;
}

const ns_m::CT_R& CT_RunTrackChange::ChildGroup_5::get_m_r() const
{
    if (m_m_r)
    {
        return *m_m_r;
    }
    return ns_m::CT_R::default_instance();
}

CT_RunTrackChange* CT_RunTrackChange::default_instance_ = NULL;

// CT_NumPr
CT_NumPr::CT_NumPr()
    :m_has_ilvl(false),
     m_ilvl(NULL),
     m_has_numId(false),
     m_numId(NULL),
     m_has_numberingChange(false),
     m_numberingChange(NULL),
     m_has_ins(false),
     m_ins(NULL)
{
}
CT_NumPr::~CT_NumPr()
{
    clear();
}
bool CT_NumPr::has_ilvl() const
{
    return m_has_ilvl;
}

CT_DecimalNumber* CT_NumPr::mutable_ilvl()
{
    m_has_ilvl = true;
    if (!m_ilvl)
    {
        m_ilvl = new CT_DecimalNumber();
    }
    return m_ilvl;
}

const CT_DecimalNumber& CT_NumPr::get_ilvl() const
{
    if (m_ilvl)
    {
        return *m_ilvl;
    }
    return CT_DecimalNumber::default_instance();
}

bool CT_NumPr::has_numId() const
{
    return m_has_numId;
}

CT_DecimalNumber* CT_NumPr::mutable_numId()
{
    m_has_numId = true;
    if (!m_numId)
    {
        m_numId = new CT_DecimalNumber();
    }
    return m_numId;
}

const CT_DecimalNumber& CT_NumPr::get_numId() const
{
    if (m_numId)
    {
        return *m_numId;
    }
    return CT_DecimalNumber::default_instance();
}

bool CT_NumPr::has_numberingChange() const
{
    return m_has_numberingChange;
}

CT_TrackChangeNumbering* CT_NumPr::mutable_numberingChange()
{
    m_has_numberingChange = true;
    if (!m_numberingChange)
    {
        m_numberingChange = new CT_TrackChangeNumbering();
    }
    return m_numberingChange;
}

const CT_TrackChangeNumbering& CT_NumPr::get_numberingChange() const
{
    if (m_numberingChange)
    {
        return *m_numberingChange;
    }
    return CT_TrackChangeNumbering::default_instance();
}

bool CT_NumPr::has_ins() const
{
    return m_has_ins;
}

CT_TrackChange* CT_NumPr::mutable_ins()
{
    m_has_ins = true;
    if (!m_ins)
    {
        m_ins = new CT_TrackChange();
    }
    return m_ins;
}

const CT_TrackChange& CT_NumPr::get_ins() const
{
    if (m_ins)
    {
        return *m_ins;
    }
    return CT_TrackChange::default_instance();
}

void CT_NumPr::clear()
{
    m_has_ilvl = false;

    if (m_ilvl)
    {
        delete m_ilvl;
        m_ilvl = NULL;
    }


    m_has_numId = false;

    if (m_numId)
    {
        delete m_numId;
        m_numId = NULL;
    }


    m_has_numberingChange = false;

    if (m_numberingChange)
    {
        delete m_numberingChange;
        m_numberingChange = NULL;
    }


    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }

}

void CT_NumPr::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";


    if (m_has_ilvl)
    {
        m_ilvl->toXmlElem("w:ilvl", "", _outStream);
    }


    if (m_has_numId)
    {
        m_numId->toXmlElem("w:numId", "", _outStream);
    }


    if (m_has_numberingChange)
    {
        m_numberingChange->toXmlElem("w:numberingChange", "", _outStream);
    }


    if (m_has_ins)
    {
        m_ins->toXmlElem("w:ins", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_NumPr& CT_NumPr::default_instance()
{
    if (!CT_NumPr::default_instance_)
    {
        CT_NumPr::default_instance_ = new CT_NumPr();
    }
    return *CT_NumPr::default_instance_;
}

CT_NumPr* CT_NumPr::default_instance_ = NULL;

// CT_PBdr
CT_PBdr::CT_PBdr()
    :m_has_top(false),
     m_top(NULL),
     m_has_left(false),
     m_left(NULL),
     m_has_bottom(false),
     m_bottom(NULL),
     m_has_right(false),
     m_right(NULL),
     m_has_between(false),
     m_between(NULL),
     m_has_bar(false),
     m_bar(NULL)
{
}
CT_PBdr::~CT_PBdr()
{
    clear();
}
bool CT_PBdr::has_top() const
{
    return m_has_top;
}

CT_Border* CT_PBdr::mutable_top()
{
    m_has_top = true;
    if (!m_top)
    {
        m_top = new CT_Border();
    }
    return m_top;
}

const CT_Border& CT_PBdr::get_top() const
{
    if (m_top)
    {
        return *m_top;
    }
    return CT_Border::default_instance();
}

bool CT_PBdr::has_left() const
{
    return m_has_left;
}

CT_Border* CT_PBdr::mutable_left()
{
    m_has_left = true;
    if (!m_left)
    {
        m_left = new CT_Border();
    }
    return m_left;
}

const CT_Border& CT_PBdr::get_left() const
{
    if (m_left)
    {
        return *m_left;
    }
    return CT_Border::default_instance();
}

bool CT_PBdr::has_bottom() const
{
    return m_has_bottom;
}

CT_Border* CT_PBdr::mutable_bottom()
{
    m_has_bottom = true;
    if (!m_bottom)
    {
        m_bottom = new CT_Border();
    }
    return m_bottom;
}

const CT_Border& CT_PBdr::get_bottom() const
{
    if (m_bottom)
    {
        return *m_bottom;
    }
    return CT_Border::default_instance();
}

bool CT_PBdr::has_right() const
{
    return m_has_right;
}

CT_Border* CT_PBdr::mutable_right()
{
    m_has_right = true;
    if (!m_right)
    {
        m_right = new CT_Border();
    }
    return m_right;
}

const CT_Border& CT_PBdr::get_right() const
{
    if (m_right)
    {
        return *m_right;
    }
    return CT_Border::default_instance();
}

bool CT_PBdr::has_between() const
{
    return m_has_between;
}

CT_Border* CT_PBdr::mutable_between()
{
    m_has_between = true;
    if (!m_between)
    {
        m_between = new CT_Border();
    }
    return m_between;
}

const CT_Border& CT_PBdr::get_between() const
{
    if (m_between)
    {
        return *m_between;
    }
    return CT_Border::default_instance();
}

bool CT_PBdr::has_bar() const
{
    return m_has_bar;
}

CT_Border* CT_PBdr::mutable_bar()
{
    m_has_bar = true;
    if (!m_bar)
    {
        m_bar = new CT_Border();
    }
    return m_bar;
}

const CT_Border& CT_PBdr::get_bar() const
{
    if (m_bar)
    {
        return *m_bar;
    }
    return CT_Border::default_instance();
}

void CT_PBdr::clear()
{
    m_has_top = false;

    if (m_top)
    {
        delete m_top;
        m_top = NULL;
    }


    m_has_left = false;

    if (m_left)
    {
        delete m_left;
        m_left = NULL;
    }


    m_has_bottom = false;

    if (m_bottom)
    {
        delete m_bottom;
        m_bottom = NULL;
    }


    m_has_right = false;

    if (m_right)
    {
        delete m_right;
        m_right = NULL;
    }


    m_has_between = false;

    if (m_between)
    {
        delete m_between;
        m_between = NULL;
    }


    m_has_bar = false;

    if (m_bar)
    {
        delete m_bar;
        m_bar = NULL;
    }

}

void CT_PBdr::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";


    if (m_has_top)
    {
        m_top->toXmlElem("w:top", "", _outStream);
    }


    if (m_has_left)
    {
        m_left->toXmlElem("w:left", "", _outStream);
    }


    if (m_has_bottom)
    {
        m_bottom->toXmlElem("w:bottom", "", _outStream);
    }


    if (m_has_right)
    {
        m_right->toXmlElem("w:right", "", _outStream);
    }


    if (m_has_between)
    {
        m_between->toXmlElem("w:between", "", _outStream);
    }


    if (m_has_bar)
    {
        m_bar->toXmlElem("w:bar", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_PBdr& CT_PBdr::default_instance()
{
    if (!CT_PBdr::default_instance_)
    {
        CT_PBdr::default_instance_ = new CT_PBdr();
    }
    return *CT_PBdr::default_instance_;
}

CT_PBdr* CT_PBdr::default_instance_ = NULL;

// CT_Tabs
CT_Tabs::CT_Tabs()

{
}
CT_Tabs::~CT_Tabs()
{
    clear();
}
CT_TabStop* CT_Tabs::add_tab()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_TabStop* pNewChild = pChildGroup->mutable_tab();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

void CT_Tabs::clear()
{
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
}

void CT_Tabs::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";

    {
        int elemCnt = count_if(m_childGroupList_1.begin(), m_childGroupList_1.end(), mem_fun(&ChildGroup_1::has_tab));
        assert(1 <= elemCnt);
    }

    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_tab())
            {
                (*iter)->get_tab().toXmlElem("w:tab", "", _outStream);
            }


        }
    }

    _outStream << "</" << _elemName << ">";
}

const CT_Tabs& CT_Tabs::default_instance()
{
    if (!CT_Tabs::default_instance_)
    {
        CT_Tabs::default_instance_ = new CT_Tabs();
    }
    return *CT_Tabs::default_instance_;
}


// CT_Tabs::ChildGroup_1
CT_Tabs::ChildGroup_1::ChildGroup_1()
    :m_has_tab(false),
     m_tab(NULL)
{
}
bool CT_Tabs::ChildGroup_1::has_tab() const
{
    return m_has_tab;
}

CT_TabStop* CT_Tabs::ChildGroup_1::mutable_tab()
{

    m_has_tab = true;
    if (!m_tab)
    {
        m_tab = new CT_TabStop();
    }
    return m_tab;
}

const CT_TabStop& CT_Tabs::ChildGroup_1::get_tab() const
{
    if (m_tab)
    {
        return *m_tab;
    }
    return CT_TabStop::default_instance();
}

CT_Tabs* CT_Tabs::default_instance_ = NULL;

// CT_TextboxTightWrap
CT_TextboxTightWrap::CT_TextboxTightWrap()
    :m_has_val_attr(false),
     m_val_attr(NULL)
{
}
CT_TextboxTightWrap::~CT_TextboxTightWrap()
{
    clear();
}
void CT_TextboxTightWrap::clear()
{
    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }

}

void CT_TextboxTightWrap::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_val_attr);
    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_TextboxTightWrap& CT_TextboxTightWrap::default_instance()
{
    if (!CT_TextboxTightWrap::default_instance_)
    {
        CT_TextboxTightWrap::default_instance_ = new CT_TextboxTightWrap();
    }
    return *CT_TextboxTightWrap::default_instance_;
}

bool CT_TextboxTightWrap::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_TextboxTightWrap::set_val_attr(const ST_TextboxTightWrap& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ST_TextboxTightWrap(_val_attr);
}

const ST_TextboxTightWrap& CT_TextboxTightWrap::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ST_TextboxTightWrap::default_instance();
}

CT_TextboxTightWrap* CT_TextboxTightWrap::default_instance_ = NULL;

// CT_PPr
CT_PPr::CT_PPr()
    :m_has_pStyle(false),
     m_pStyle(NULL),
     m_has_keepNext(false),
     m_keepNext(NULL),
     m_has_keepLines(false),
     m_keepLines(NULL),
     m_has_pageBreakBefore(false),
     m_pageBreakBefore(NULL),
     m_has_framePr(false),
     m_framePr(NULL),
     m_has_widowControl(false),
     m_widowControl(NULL),
     m_has_numPr(false),
     m_numPr(NULL),
     m_has_suppressLineNumbers(false),
     m_suppressLineNumbers(NULL),
     m_has_pBdr(false),
     m_pBdr(NULL),
     m_has_shd(false),
     m_shd(NULL),
     m_has_tabs(false),
     m_tabs(NULL),
     m_has_suppressAutoHyphens(false),
     m_suppressAutoHyphens(NULL),
     m_has_kinsoku(false),
     m_kinsoku(NULL),
     m_has_wordWrap(false),
     m_wordWrap(NULL),
     m_has_overflowPunct(false),
     m_overflowPunct(NULL),
     m_has_topLinePunct(false),
     m_topLinePunct(NULL),
     m_has_autoSpaceDE(false),
     m_autoSpaceDE(NULL),
     m_has_autoSpaceDN(false),
     m_autoSpaceDN(NULL),
     m_has_bidi(false),
     m_bidi(NULL),
     m_has_adjustRightInd(false),
     m_adjustRightInd(NULL),
     m_has_snapToGrid(false),
     m_snapToGrid(NULL),
     m_has_spacing(false),
     m_spacing(NULL),
     m_has_ind(false),
     m_ind(NULL),
     m_has_contextualSpacing(false),
     m_contextualSpacing(NULL),
     m_has_mirrorIndents(false),
     m_mirrorIndents(NULL),
     m_has_suppressOverlap(false),
     m_suppressOverlap(NULL),
     m_has_jc(false),
     m_jc(NULL),
     m_has_textDirection(false),
     m_textDirection(NULL),
     m_has_textAlignment(false),
     m_textAlignment(NULL),
     m_has_textboxTightWrap(false),
     m_textboxTightWrap(NULL),
     m_has_outlineLvl(false),
     m_outlineLvl(NULL),
     m_has_divId(false),
     m_divId(NULL),
     m_has_cnfStyle(false),
     m_cnfStyle(NULL),
     m_has_rPr(false),
     m_rPr(NULL),
     m_has_sectPr(false),
     m_sectPr(NULL),
     m_has_pPrChange(false),
     m_pPrChange(NULL)
{
}
CT_PPr::~CT_PPr()
{
    clear();
}
bool CT_PPr::has_pStyle() const
{
    return m_has_pStyle;
}

CT_String* CT_PPr::mutable_pStyle()
{
    m_has_pStyle = true;
    if (!m_pStyle)
    {
        m_pStyle = new CT_String();
    }
    return m_pStyle;
}

const CT_String& CT_PPr::get_pStyle() const
{
    if (m_pStyle)
    {
        return *m_pStyle;
    }
    return CT_String::default_instance();
}

bool CT_PPr::has_keepNext() const
{
    return m_has_keepNext;
}

CT_OnOff* CT_PPr::mutable_keepNext()
{
    m_has_keepNext = true;
    if (!m_keepNext)
    {
        m_keepNext = new CT_OnOff();
    }
    return m_keepNext;
}

const CT_OnOff& CT_PPr::get_keepNext() const
{
    if (m_keepNext)
    {
        return *m_keepNext;
    }
    return CT_OnOff::default_instance();
}

bool CT_PPr::has_keepLines() const
{
    return m_has_keepLines;
}

CT_OnOff* CT_PPr::mutable_keepLines()
{
    m_has_keepLines = true;
    if (!m_keepLines)
    {
        m_keepLines = new CT_OnOff();
    }
    return m_keepLines;
}

const CT_OnOff& CT_PPr::get_keepLines() const
{
    if (m_keepLines)
    {
        return *m_keepLines;
    }
    return CT_OnOff::default_instance();
}

bool CT_PPr::has_pageBreakBefore() const
{
    return m_has_pageBreakBefore;
}

CT_OnOff* CT_PPr::mutable_pageBreakBefore()
{
    m_has_pageBreakBefore = true;
    if (!m_pageBreakBefore)
    {
        m_pageBreakBefore = new CT_OnOff();
    }
    return m_pageBreakBefore;
}

const CT_OnOff& CT_PPr::get_pageBreakBefore() const
{
    if (m_pageBreakBefore)
    {
        return *m_pageBreakBefore;
    }
    return CT_OnOff::default_instance();
}

bool CT_PPr::has_framePr() const
{
    return m_has_framePr;
}

CT_FramePr* CT_PPr::mutable_framePr()
{
    m_has_framePr = true;
    if (!m_framePr)
    {
        m_framePr = new CT_FramePr();
    }
    return m_framePr;
}

const CT_FramePr& CT_PPr::get_framePr() const
{
    if (m_framePr)
    {
        return *m_framePr;
    }
    return CT_FramePr::default_instance();
}

bool CT_PPr::has_widowControl() const
{
    return m_has_widowControl;
}

CT_OnOff* CT_PPr::mutable_widowControl()
{
    m_has_widowControl = true;
    if (!m_widowControl)
    {
        m_widowControl = new CT_OnOff();
    }
    return m_widowControl;
}

const CT_OnOff& CT_PPr::get_widowControl() const
{
    if (m_widowControl)
    {
        return *m_widowControl;
    }
    return CT_OnOff::default_instance();
}

bool CT_PPr::has_numPr() const
{
    return m_has_numPr;
}

CT_NumPr* CT_PPr::mutable_numPr()
{
    m_has_numPr = true;
    if (!m_numPr)
    {
        m_numPr = new CT_NumPr();
    }
    return m_numPr;
}

const CT_NumPr& CT_PPr::get_numPr() const
{
    if (m_numPr)
    {
        return *m_numPr;
    }
    return CT_NumPr::default_instance();
}

bool CT_PPr::has_suppressLineNumbers() const
{
    return m_has_suppressLineNumbers;
}

CT_OnOff* CT_PPr::mutable_suppressLineNumbers()
{
    m_has_suppressLineNumbers = true;
    if (!m_suppressLineNumbers)
    {
        m_suppressLineNumbers = new CT_OnOff();
    }
    return m_suppressLineNumbers;
}

const CT_OnOff& CT_PPr::get_suppressLineNumbers() const
{
    if (m_suppressLineNumbers)
    {
        return *m_suppressLineNumbers;
    }
    return CT_OnOff::default_instance();
}

bool CT_PPr::has_pBdr() const
{
    return m_has_pBdr;
}

CT_PBdr* CT_PPr::mutable_pBdr()
{
    m_has_pBdr = true;
    if (!m_pBdr)
    {
        m_pBdr = new CT_PBdr();
    }
    return m_pBdr;
}

const CT_PBdr& CT_PPr::get_pBdr() const
{
    if (m_pBdr)
    {
        return *m_pBdr;
    }
    return CT_PBdr::default_instance();
}

bool CT_PPr::has_shd() const
{
    return m_has_shd;
}

CT_Shd* CT_PPr::mutable_shd()
{
    m_has_shd = true;
    if (!m_shd)
    {
        m_shd = new CT_Shd();
    }
    return m_shd;
}

const CT_Shd& CT_PPr::get_shd() const
{
    if (m_shd)
    {
        return *m_shd;
    }
    return CT_Shd::default_instance();
}

bool CT_PPr::has_tabs() const
{
    return m_has_tabs;
}

CT_Tabs* CT_PPr::mutable_tabs()
{
    m_has_tabs = true;
    if (!m_tabs)
    {
        m_tabs = new CT_Tabs();
    }
    return m_tabs;
}

const CT_Tabs& CT_PPr::get_tabs() const
{
    if (m_tabs)
    {
        return *m_tabs;
    }
    return CT_Tabs::default_instance();
}

bool CT_PPr::has_suppressAutoHyphens() const
{
    return m_has_suppressAutoHyphens;
}

CT_OnOff* CT_PPr::mutable_suppressAutoHyphens()
{
    m_has_suppressAutoHyphens = true;
    if (!m_suppressAutoHyphens)
    {
        m_suppressAutoHyphens = new CT_OnOff();
    }
    return m_suppressAutoHyphens;
}

const CT_OnOff& CT_PPr::get_suppressAutoHyphens() const
{
    if (m_suppressAutoHyphens)
    {
        return *m_suppressAutoHyphens;
    }
    return CT_OnOff::default_instance();
}

bool CT_PPr::has_kinsoku() const
{
    return m_has_kinsoku;
}

CT_OnOff* CT_PPr::mutable_kinsoku()
{
    m_has_kinsoku = true;
    if (!m_kinsoku)
    {
        m_kinsoku = new CT_OnOff();
    }
    return m_kinsoku;
}

const CT_OnOff& CT_PPr::get_kinsoku() const
{
    if (m_kinsoku)
    {
        return *m_kinsoku;
    }
    return CT_OnOff::default_instance();
}

bool CT_PPr::has_wordWrap() const
{
    return m_has_wordWrap;
}

CT_OnOff* CT_PPr::mutable_wordWrap()
{
    m_has_wordWrap = true;
    if (!m_wordWrap)
    {
        m_wordWrap = new CT_OnOff();
    }
    return m_wordWrap;
}

const CT_OnOff& CT_PPr::get_wordWrap() const
{
    if (m_wordWrap)
    {
        return *m_wordWrap;
    }
    return CT_OnOff::default_instance();
}

bool CT_PPr::has_overflowPunct() const
{
    return m_has_overflowPunct;
}

CT_OnOff* CT_PPr::mutable_overflowPunct()
{
    m_has_overflowPunct = true;
    if (!m_overflowPunct)
    {
        m_overflowPunct = new CT_OnOff();
    }
    return m_overflowPunct;
}

const CT_OnOff& CT_PPr::get_overflowPunct() const
{
    if (m_overflowPunct)
    {
        return *m_overflowPunct;
    }
    return CT_OnOff::default_instance();
}

bool CT_PPr::has_topLinePunct() const
{
    return m_has_topLinePunct;
}

CT_OnOff* CT_PPr::mutable_topLinePunct()
{
    m_has_topLinePunct = true;
    if (!m_topLinePunct)
    {
        m_topLinePunct = new CT_OnOff();
    }
    return m_topLinePunct;
}

const CT_OnOff& CT_PPr::get_topLinePunct() const
{
    if (m_topLinePunct)
    {
        return *m_topLinePunct;
    }
    return CT_OnOff::default_instance();
}

bool CT_PPr::has_autoSpaceDE() const
{
    return m_has_autoSpaceDE;
}

CT_OnOff* CT_PPr::mutable_autoSpaceDE()
{
    m_has_autoSpaceDE = true;
    if (!m_autoSpaceDE)
    {
        m_autoSpaceDE = new CT_OnOff();
    }
    return m_autoSpaceDE;
}

const CT_OnOff& CT_PPr::get_autoSpaceDE() const
{
    if (m_autoSpaceDE)
    {
        return *m_autoSpaceDE;
    }
    return CT_OnOff::default_instance();
}

bool CT_PPr::has_autoSpaceDN() const
{
    return m_has_autoSpaceDN;
}

CT_OnOff* CT_PPr::mutable_autoSpaceDN()
{
    m_has_autoSpaceDN = true;
    if (!m_autoSpaceDN)
    {
        m_autoSpaceDN = new CT_OnOff();
    }
    return m_autoSpaceDN;
}

const CT_OnOff& CT_PPr::get_autoSpaceDN() const
{
    if (m_autoSpaceDN)
    {
        return *m_autoSpaceDN;
    }
    return CT_OnOff::default_instance();
}

bool CT_PPr::has_bidi() const
{
    return m_has_bidi;
}

CT_OnOff* CT_PPr::mutable_bidi()
{
    m_has_bidi = true;
    if (!m_bidi)
    {
        m_bidi = new CT_OnOff();
    }
    return m_bidi;
}

const CT_OnOff& CT_PPr::get_bidi() const
{
    if (m_bidi)
    {
        return *m_bidi;
    }
    return CT_OnOff::default_instance();
}

bool CT_PPr::has_adjustRightInd() const
{
    return m_has_adjustRightInd;
}

CT_OnOff* CT_PPr::mutable_adjustRightInd()
{
    m_has_adjustRightInd = true;
    if (!m_adjustRightInd)
    {
        m_adjustRightInd = new CT_OnOff();
    }
    return m_adjustRightInd;
}

const CT_OnOff& CT_PPr::get_adjustRightInd() const
{
    if (m_adjustRightInd)
    {
        return *m_adjustRightInd;
    }
    return CT_OnOff::default_instance();
}

bool CT_PPr::has_snapToGrid() const
{
    return m_has_snapToGrid;
}

CT_OnOff* CT_PPr::mutable_snapToGrid()
{
    m_has_snapToGrid = true;
    if (!m_snapToGrid)
    {
        m_snapToGrid = new CT_OnOff();
    }
    return m_snapToGrid;
}

const CT_OnOff& CT_PPr::get_snapToGrid() const
{
    if (m_snapToGrid)
    {
        return *m_snapToGrid;
    }
    return CT_OnOff::default_instance();
}

bool CT_PPr::has_spacing() const
{
    return m_has_spacing;
}

CT_Spacing* CT_PPr::mutable_spacing()
{
    m_has_spacing = true;
    if (!m_spacing)
    {
        m_spacing = new CT_Spacing();
    }
    return m_spacing;
}

const CT_Spacing& CT_PPr::get_spacing() const
{
    if (m_spacing)
    {
        return *m_spacing;
    }
    return CT_Spacing::default_instance();
}

bool CT_PPr::has_ind() const
{
    return m_has_ind;
}

CT_Ind* CT_PPr::mutable_ind()
{
    m_has_ind = true;
    if (!m_ind)
    {
        m_ind = new CT_Ind();
    }
    return m_ind;
}

const CT_Ind& CT_PPr::get_ind() const
{
    if (m_ind)
    {
        return *m_ind;
    }
    return CT_Ind::default_instance();
}

bool CT_PPr::has_contextualSpacing() const
{
    return m_has_contextualSpacing;
}

CT_OnOff* CT_PPr::mutable_contextualSpacing()
{
    m_has_contextualSpacing = true;
    if (!m_contextualSpacing)
    {
        m_contextualSpacing = new CT_OnOff();
    }
    return m_contextualSpacing;
}

const CT_OnOff& CT_PPr::get_contextualSpacing() const
{
    if (m_contextualSpacing)
    {
        return *m_contextualSpacing;
    }
    return CT_OnOff::default_instance();
}

bool CT_PPr::has_mirrorIndents() const
{
    return m_has_mirrorIndents;
}

CT_OnOff* CT_PPr::mutable_mirrorIndents()
{
    m_has_mirrorIndents = true;
    if (!m_mirrorIndents)
    {
        m_mirrorIndents = new CT_OnOff();
    }
    return m_mirrorIndents;
}

const CT_OnOff& CT_PPr::get_mirrorIndents() const
{
    if (m_mirrorIndents)
    {
        return *m_mirrorIndents;
    }
    return CT_OnOff::default_instance();
}

bool CT_PPr::has_suppressOverlap() const
{
    return m_has_suppressOverlap;
}

CT_OnOff* CT_PPr::mutable_suppressOverlap()
{
    m_has_suppressOverlap = true;
    if (!m_suppressOverlap)
    {
        m_suppressOverlap = new CT_OnOff();
    }
    return m_suppressOverlap;
}

const CT_OnOff& CT_PPr::get_suppressOverlap() const
{
    if (m_suppressOverlap)
    {
        return *m_suppressOverlap;
    }
    return CT_OnOff::default_instance();
}

bool CT_PPr::has_jc() const
{
    return m_has_jc;
}

CT_Jc* CT_PPr::mutable_jc()
{
    m_has_jc = true;
    if (!m_jc)
    {
        m_jc = new CT_Jc();
    }
    return m_jc;
}

const CT_Jc& CT_PPr::get_jc() const
{
    if (m_jc)
    {
        return *m_jc;
    }
    return CT_Jc::default_instance();
}

bool CT_PPr::has_textDirection() const
{
    return m_has_textDirection;
}

CT_TextDirection* CT_PPr::mutable_textDirection()
{
    m_has_textDirection = true;
    if (!m_textDirection)
    {
        m_textDirection = new CT_TextDirection();
    }
    return m_textDirection;
}

const CT_TextDirection& CT_PPr::get_textDirection() const
{
    if (m_textDirection)
    {
        return *m_textDirection;
    }
    return CT_TextDirection::default_instance();
}

bool CT_PPr::has_textAlignment() const
{
    return m_has_textAlignment;
}

CT_TextAlignment* CT_PPr::mutable_textAlignment()
{
    m_has_textAlignment = true;
    if (!m_textAlignment)
    {
        m_textAlignment = new CT_TextAlignment();
    }
    return m_textAlignment;
}

const CT_TextAlignment& CT_PPr::get_textAlignment() const
{
    if (m_textAlignment)
    {
        return *m_textAlignment;
    }
    return CT_TextAlignment::default_instance();
}

bool CT_PPr::has_textboxTightWrap() const
{
    return m_has_textboxTightWrap;
}

CT_TextboxTightWrap* CT_PPr::mutable_textboxTightWrap()
{
    m_has_textboxTightWrap = true;
    if (!m_textboxTightWrap)
    {
        m_textboxTightWrap = new CT_TextboxTightWrap();
    }
    return m_textboxTightWrap;
}

const CT_TextboxTightWrap& CT_PPr::get_textboxTightWrap() const
{
    if (m_textboxTightWrap)
    {
        return *m_textboxTightWrap;
    }
    return CT_TextboxTightWrap::default_instance();
}

bool CT_PPr::has_outlineLvl() const
{
    return m_has_outlineLvl;
}

CT_DecimalNumber* CT_PPr::mutable_outlineLvl()
{
    m_has_outlineLvl = true;
    if (!m_outlineLvl)
    {
        m_outlineLvl = new CT_DecimalNumber();
    }
    return m_outlineLvl;
}

const CT_DecimalNumber& CT_PPr::get_outlineLvl() const
{
    if (m_outlineLvl)
    {
        return *m_outlineLvl;
    }
    return CT_DecimalNumber::default_instance();
}

bool CT_PPr::has_divId() const
{
    return m_has_divId;
}

CT_DecimalNumber* CT_PPr::mutable_divId()
{
    m_has_divId = true;
    if (!m_divId)
    {
        m_divId = new CT_DecimalNumber();
    }
    return m_divId;
}

const CT_DecimalNumber& CT_PPr::get_divId() const
{
    if (m_divId)
    {
        return *m_divId;
    }
    return CT_DecimalNumber::default_instance();
}

bool CT_PPr::has_cnfStyle() const
{
    return m_has_cnfStyle;
}

CT_Cnf* CT_PPr::mutable_cnfStyle()
{
    m_has_cnfStyle = true;
    if (!m_cnfStyle)
    {
        m_cnfStyle = new CT_Cnf();
    }
    return m_cnfStyle;
}

const CT_Cnf& CT_PPr::get_cnfStyle() const
{
    if (m_cnfStyle)
    {
        return *m_cnfStyle;
    }
    return CT_Cnf::default_instance();
}

bool CT_PPr::has_rPr() const
{
    return m_has_rPr;
}

CT_ParaRPr* CT_PPr::mutable_rPr()
{
    m_has_rPr = true;
    if (!m_rPr)
    {
        m_rPr = new CT_ParaRPr();
    }
    return m_rPr;
}

const CT_ParaRPr& CT_PPr::get_rPr() const
{
    if (m_rPr)
    {
        return *m_rPr;
    }
    return CT_ParaRPr::default_instance();
}

bool CT_PPr::has_sectPr() const
{
    return m_has_sectPr;
}

CT_SectPr* CT_PPr::mutable_sectPr()
{
    m_has_sectPr = true;
    if (!m_sectPr)
    {
        m_sectPr = new CT_SectPr();
    }
    return m_sectPr;
}

const CT_SectPr& CT_PPr::get_sectPr() const
{
    if (m_sectPr)
    {
        return *m_sectPr;
    }
    return CT_SectPr::default_instance();
}

bool CT_PPr::has_pPrChange() const
{
    return m_has_pPrChange;
}

CT_PPrChange* CT_PPr::mutable_pPrChange()
{
    m_has_pPrChange = true;
    if (!m_pPrChange)
    {
        m_pPrChange = new CT_PPrChange();
    }
    return m_pPrChange;
}

const CT_PPrChange& CT_PPr::get_pPrChange() const
{
    if (m_pPrChange)
    {
        return *m_pPrChange;
    }
    return CT_PPrChange::default_instance();
}

void CT_PPr::clear()
{
    m_has_pStyle = false;

    if (m_pStyle)
    {
        delete m_pStyle;
        m_pStyle = NULL;
    }


    m_has_keepNext = false;

    if (m_keepNext)
    {
        delete m_keepNext;
        m_keepNext = NULL;
    }


    m_has_keepLines = false;

    if (m_keepLines)
    {
        delete m_keepLines;
        m_keepLines = NULL;
    }


    m_has_pageBreakBefore = false;

    if (m_pageBreakBefore)
    {
        delete m_pageBreakBefore;
        m_pageBreakBefore = NULL;
    }


    m_has_framePr = false;

    if (m_framePr)
    {
        delete m_framePr;
        m_framePr = NULL;
    }


    m_has_widowControl = false;

    if (m_widowControl)
    {
        delete m_widowControl;
        m_widowControl = NULL;
    }


    m_has_numPr = false;

    if (m_numPr)
    {
        delete m_numPr;
        m_numPr = NULL;
    }


    m_has_suppressLineNumbers = false;

    if (m_suppressLineNumbers)
    {
        delete m_suppressLineNumbers;
        m_suppressLineNumbers = NULL;
    }


    m_has_pBdr = false;

    if (m_pBdr)
    {
        delete m_pBdr;
        m_pBdr = NULL;
    }


    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }


    m_has_tabs = false;

    if (m_tabs)
    {
        delete m_tabs;
        m_tabs = NULL;
    }


    m_has_suppressAutoHyphens = false;

    if (m_suppressAutoHyphens)
    {
        delete m_suppressAutoHyphens;
        m_suppressAutoHyphens = NULL;
    }


    m_has_kinsoku = false;

    if (m_kinsoku)
    {
        delete m_kinsoku;
        m_kinsoku = NULL;
    }


    m_has_wordWrap = false;

    if (m_wordWrap)
    {
        delete m_wordWrap;
        m_wordWrap = NULL;
    }


    m_has_overflowPunct = false;

    if (m_overflowPunct)
    {
        delete m_overflowPunct;
        m_overflowPunct = NULL;
    }


    m_has_topLinePunct = false;

    if (m_topLinePunct)
    {
        delete m_topLinePunct;
        m_topLinePunct = NULL;
    }


    m_has_autoSpaceDE = false;

    if (m_autoSpaceDE)
    {
        delete m_autoSpaceDE;
        m_autoSpaceDE = NULL;
    }


    m_has_autoSpaceDN = false;

    if (m_autoSpaceDN)
    {
        delete m_autoSpaceDN;
        m_autoSpaceDN = NULL;
    }


    m_has_bidi = false;

    if (m_bidi)
    {
        delete m_bidi;
        m_bidi = NULL;
    }


    m_has_adjustRightInd = false;

    if (m_adjustRightInd)
    {
        delete m_adjustRightInd;
        m_adjustRightInd = NULL;
    }


    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }


    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }


    m_has_ind = false;

    if (m_ind)
    {
        delete m_ind;
        m_ind = NULL;
    }


    m_has_contextualSpacing = false;

    if (m_contextualSpacing)
    {
        delete m_contextualSpacing;
        m_contextualSpacing = NULL;
    }


    m_has_mirrorIndents = false;

    if (m_mirrorIndents)
    {
        delete m_mirrorIndents;
        m_mirrorIndents = NULL;
    }


    m_has_suppressOverlap = false;

    if (m_suppressOverlap)
    {
        delete m_suppressOverlap;
        m_suppressOverlap = NULL;
    }


    m_has_jc = false;

    if (m_jc)
    {
        delete m_jc;
        m_jc = NULL;
    }


    m_has_textDirection = false;

    if (m_textDirection)
    {
        delete m_textDirection;
        m_textDirection = NULL;
    }


    m_has_textAlignment = false;

    if (m_textAlignment)
    {
        delete m_textAlignment;
        m_textAlignment = NULL;
    }


    m_has_textboxTightWrap = false;

    if (m_textboxTightWrap)
    {
        delete m_textboxTightWrap;
        m_textboxTightWrap = NULL;
    }


    m_has_outlineLvl = false;

    if (m_outlineLvl)
    {
        delete m_outlineLvl;
        m_outlineLvl = NULL;
    }


    m_has_divId = false;

    if (m_divId)
    {
        delete m_divId;
        m_divId = NULL;
    }


    m_has_cnfStyle = false;

    if (m_cnfStyle)
    {
        delete m_cnfStyle;
        m_cnfStyle = NULL;
    }


    m_has_rPr = false;

    if (m_rPr)
    {
        delete m_rPr;
        m_rPr = NULL;
    }


    m_has_sectPr = false;

    if (m_sectPr)
    {
        delete m_sectPr;
        m_sectPr = NULL;
    }


    m_has_pPrChange = false;

    if (m_pPrChange)
    {
        delete m_pPrChange;
        m_pPrChange = NULL;
    }

}

void CT_PPr::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";


    if (m_has_pStyle)
    {
        m_pStyle->toXmlElem("w:pStyle", "", _outStream);
    }


    if (m_has_keepNext)
    {
        m_keepNext->toXmlElem("w:keepNext", "", _outStream);
    }


    if (m_has_keepLines)
    {
        m_keepLines->toXmlElem("w:keepLines", "", _outStream);
    }


    if (m_has_pageBreakBefore)
    {
        m_pageBreakBefore->toXmlElem("w:pageBreakBefore", "", _outStream);
    }


    if (m_has_framePr)
    {
        m_framePr->toXmlElem("w:framePr", "", _outStream);
    }


    if (m_has_widowControl)
    {
        m_widowControl->toXmlElem("w:widowControl", "", _outStream);
    }


    if (m_has_numPr)
    {
        m_numPr->toXmlElem("w:numPr", "", _outStream);
    }


    if (m_has_suppressLineNumbers)
    {
        m_suppressLineNumbers->toXmlElem("w:suppressLineNumbers", "", _outStream);
    }


    if (m_has_pBdr)
    {
        m_pBdr->toXmlElem("w:pBdr", "", _outStream);
    }


    if (m_has_shd)
    {
        m_shd->toXmlElem("w:shd", "", _outStream);
    }


    if (m_has_tabs)
    {
        m_tabs->toXmlElem("w:tabs", "", _outStream);
    }


    if (m_has_suppressAutoHyphens)
    {
        m_suppressAutoHyphens->toXmlElem("w:suppressAutoHyphens", "", _outStream);
    }


    if (m_has_kinsoku)
    {
        m_kinsoku->toXmlElem("w:kinsoku", "", _outStream);
    }


    if (m_has_wordWrap)
    {
        m_wordWrap->toXmlElem("w:wordWrap", "", _outStream);
    }


    if (m_has_overflowPunct)
    {
        m_overflowPunct->toXmlElem("w:overflowPunct", "", _outStream);
    }


    if (m_has_topLinePunct)
    {
        m_topLinePunct->toXmlElem("w:topLinePunct", "", _outStream);
    }


    if (m_has_autoSpaceDE)
    {
        m_autoSpaceDE->toXmlElem("w:autoSpaceDE", "", _outStream);
    }


    if (m_has_autoSpaceDN)
    {
        m_autoSpaceDN->toXmlElem("w:autoSpaceDN", "", _outStream);
    }


    if (m_has_bidi)
    {
        m_bidi->toXmlElem("w:bidi", "", _outStream);
    }


    if (m_has_adjustRightInd)
    {
        m_adjustRightInd->toXmlElem("w:adjustRightInd", "", _outStream);
    }


    if (m_has_snapToGrid)
    {
        m_snapToGrid->toXmlElem("w:snapToGrid", "", _outStream);
    }


    if (m_has_spacing)
    {
        m_spacing->toXmlElem("w:spacing", "", _outStream);
    }


    if (m_has_ind)
    {
        m_ind->toXmlElem("w:ind", "", _outStream);
    }


    if (m_has_contextualSpacing)
    {
        m_contextualSpacing->toXmlElem("w:contextualSpacing", "", _outStream);
    }


    if (m_has_mirrorIndents)
    {
        m_mirrorIndents->toXmlElem("w:mirrorIndents", "", _outStream);
    }


    if (m_has_suppressOverlap)
    {
        m_suppressOverlap->toXmlElem("w:suppressOverlap", "", _outStream);
    }


    if (m_has_jc)
    {
        m_jc->toXmlElem("w:jc", "", _outStream);
    }


    if (m_has_textDirection)
    {
        m_textDirection->toXmlElem("w:textDirection", "", _outStream);
    }


    if (m_has_textAlignment)
    {
        m_textAlignment->toXmlElem("w:textAlignment", "", _outStream);
    }


    if (m_has_textboxTightWrap)
    {
        m_textboxTightWrap->toXmlElem("w:textboxTightWrap", "", _outStream);
    }


    if (m_has_outlineLvl)
    {
        m_outlineLvl->toXmlElem("w:outlineLvl", "", _outStream);
    }


    if (m_has_divId)
    {
        m_divId->toXmlElem("w:divId", "", _outStream);
    }


    if (m_has_cnfStyle)
    {
        m_cnfStyle->toXmlElem("w:cnfStyle", "", _outStream);
    }


    if (m_has_rPr)
    {
        m_rPr->toXmlElem("w:rPr", "", _outStream);
    }


    if (m_has_sectPr)
    {
        m_sectPr->toXmlElem("w:sectPr", "", _outStream);
    }


    if (m_has_pPrChange)
    {
        m_pPrChange->toXmlElem("w:pPrChange", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_PPr& CT_PPr::default_instance()
{
    if (!CT_PPr::default_instance_)
    {
        CT_PPr::default_instance_ = new CT_PPr();
    }
    return *CT_PPr::default_instance_;
}

CT_PPr* CT_PPr::default_instance_ = NULL;

// CT_PPrBase
CT_PPrBase::CT_PPrBase()
    :m_has_pStyle(false),
     m_pStyle(NULL),
     m_has_keepNext(false),
     m_keepNext(NULL),
     m_has_keepLines(false),
     m_keepLines(NULL),
     m_has_pageBreakBefore(false),
     m_pageBreakBefore(NULL),
     m_has_framePr(false),
     m_framePr(NULL),
     m_has_widowControl(false),
     m_widowControl(NULL),
     m_has_numPr(false),
     m_numPr(NULL),
     m_has_suppressLineNumbers(false),
     m_suppressLineNumbers(NULL),
     m_has_pBdr(false),
     m_pBdr(NULL),
     m_has_shd(false),
     m_shd(NULL),
     m_has_tabs(false),
     m_tabs(NULL),
     m_has_suppressAutoHyphens(false),
     m_suppressAutoHyphens(NULL),
     m_has_kinsoku(false),
     m_kinsoku(NULL),
     m_has_wordWrap(false),
     m_wordWrap(NULL),
     m_has_overflowPunct(false),
     m_overflowPunct(NULL),
     m_has_topLinePunct(false),
     m_topLinePunct(NULL),
     m_has_autoSpaceDE(false),
     m_autoSpaceDE(NULL),
     m_has_autoSpaceDN(false),
     m_autoSpaceDN(NULL),
     m_has_bidi(false),
     m_bidi(NULL),
     m_has_adjustRightInd(false),
     m_adjustRightInd(NULL),
     m_has_snapToGrid(false),
     m_snapToGrid(NULL),
     m_has_spacing(false),
     m_spacing(NULL),
     m_has_ind(false),
     m_ind(NULL),
     m_has_contextualSpacing(false),
     m_contextualSpacing(NULL),
     m_has_mirrorIndents(false),
     m_mirrorIndents(NULL),
     m_has_suppressOverlap(false),
     m_suppressOverlap(NULL),
     m_has_jc(false),
     m_jc(NULL),
     m_has_textDirection(false),
     m_textDirection(NULL),
     m_has_textAlignment(false),
     m_textAlignment(NULL),
     m_has_textboxTightWrap(false),
     m_textboxTightWrap(NULL),
     m_has_outlineLvl(false),
     m_outlineLvl(NULL),
     m_has_divId(false),
     m_divId(NULL),
     m_has_cnfStyle(false),
     m_cnfStyle(NULL)
{
}
CT_PPrBase::~CT_PPrBase()
{
    clear();
}
bool CT_PPrBase::has_pStyle() const
{
    return m_has_pStyle;
}

CT_String* CT_PPrBase::mutable_pStyle()
{
    m_has_pStyle = true;
    if (!m_pStyle)
    {
        m_pStyle = new CT_String();
    }
    return m_pStyle;
}

const CT_String& CT_PPrBase::get_pStyle() const
{
    if (m_pStyle)
    {
        return *m_pStyle;
    }
    return CT_String::default_instance();
}

bool CT_PPrBase::has_keepNext() const
{
    return m_has_keepNext;
}

CT_OnOff* CT_PPrBase::mutable_keepNext()
{
    m_has_keepNext = true;
    if (!m_keepNext)
    {
        m_keepNext = new CT_OnOff();
    }
    return m_keepNext;
}

const CT_OnOff& CT_PPrBase::get_keepNext() const
{
    if (m_keepNext)
    {
        return *m_keepNext;
    }
    return CT_OnOff::default_instance();
}

bool CT_PPrBase::has_keepLines() const
{
    return m_has_keepLines;
}

CT_OnOff* CT_PPrBase::mutable_keepLines()
{
    m_has_keepLines = true;
    if (!m_keepLines)
    {
        m_keepLines = new CT_OnOff();
    }
    return m_keepLines;
}

const CT_OnOff& CT_PPrBase::get_keepLines() const
{
    if (m_keepLines)
    {
        return *m_keepLines;
    }
    return CT_OnOff::default_instance();
}

bool CT_PPrBase::has_pageBreakBefore() const
{
    return m_has_pageBreakBefore;
}

CT_OnOff* CT_PPrBase::mutable_pageBreakBefore()
{
    m_has_pageBreakBefore = true;
    if (!m_pageBreakBefore)
    {
        m_pageBreakBefore = new CT_OnOff();
    }
    return m_pageBreakBefore;
}

const CT_OnOff& CT_PPrBase::get_pageBreakBefore() const
{
    if (m_pageBreakBefore)
    {
        return *m_pageBreakBefore;
    }
    return CT_OnOff::default_instance();
}

bool CT_PPrBase::has_framePr() const
{
    return m_has_framePr;
}

CT_FramePr* CT_PPrBase::mutable_framePr()
{
    m_has_framePr = true;
    if (!m_framePr)
    {
        m_framePr = new CT_FramePr();
    }
    return m_framePr;
}

const CT_FramePr& CT_PPrBase::get_framePr() const
{
    if (m_framePr)
    {
        return *m_framePr;
    }
    return CT_FramePr::default_instance();
}

bool CT_PPrBase::has_widowControl() const
{
    return m_has_widowControl;
}

CT_OnOff* CT_PPrBase::mutable_widowControl()
{
    m_has_widowControl = true;
    if (!m_widowControl)
    {
        m_widowControl = new CT_OnOff();
    }
    return m_widowControl;
}

const CT_OnOff& CT_PPrBase::get_widowControl() const
{
    if (m_widowControl)
    {
        return *m_widowControl;
    }
    return CT_OnOff::default_instance();
}

bool CT_PPrBase::has_numPr() const
{
    return m_has_numPr;
}

CT_NumPr* CT_PPrBase::mutable_numPr()
{
    m_has_numPr = true;
    if (!m_numPr)
    {
        m_numPr = new CT_NumPr();
    }
    return m_numPr;
}

const CT_NumPr& CT_PPrBase::get_numPr() const
{
    if (m_numPr)
    {
        return *m_numPr;
    }
    return CT_NumPr::default_instance();
}

bool CT_PPrBase::has_suppressLineNumbers() const
{
    return m_has_suppressLineNumbers;
}

CT_OnOff* CT_PPrBase::mutable_suppressLineNumbers()
{
    m_has_suppressLineNumbers = true;
    if (!m_suppressLineNumbers)
    {
        m_suppressLineNumbers = new CT_OnOff();
    }
    return m_suppressLineNumbers;
}

const CT_OnOff& CT_PPrBase::get_suppressLineNumbers() const
{
    if (m_suppressLineNumbers)
    {
        return *m_suppressLineNumbers;
    }
    return CT_OnOff::default_instance();
}

bool CT_PPrBase::has_pBdr() const
{
    return m_has_pBdr;
}

CT_PBdr* CT_PPrBase::mutable_pBdr()
{
    m_has_pBdr = true;
    if (!m_pBdr)
    {
        m_pBdr = new CT_PBdr();
    }
    return m_pBdr;
}

const CT_PBdr& CT_PPrBase::get_pBdr() const
{
    if (m_pBdr)
    {
        return *m_pBdr;
    }
    return CT_PBdr::default_instance();
}

bool CT_PPrBase::has_shd() const
{
    return m_has_shd;
}

CT_Shd* CT_PPrBase::mutable_shd()
{
    m_has_shd = true;
    if (!m_shd)
    {
        m_shd = new CT_Shd();
    }
    return m_shd;
}

const CT_Shd& CT_PPrBase::get_shd() const
{
    if (m_shd)
    {
        return *m_shd;
    }
    return CT_Shd::default_instance();
}

bool CT_PPrBase::has_tabs() const
{
    return m_has_tabs;
}

CT_Tabs* CT_PPrBase::mutable_tabs()
{
    m_has_tabs = true;
    if (!m_tabs)
    {
        m_tabs = new CT_Tabs();
    }
    return m_tabs;
}

const CT_Tabs& CT_PPrBase::get_tabs() const
{
    if (m_tabs)
    {
        return *m_tabs;
    }
    return CT_Tabs::default_instance();
}

bool CT_PPrBase::has_suppressAutoHyphens() const
{
    return m_has_suppressAutoHyphens;
}

CT_OnOff* CT_PPrBase::mutable_suppressAutoHyphens()
{
    m_has_suppressAutoHyphens = true;
    if (!m_suppressAutoHyphens)
    {
        m_suppressAutoHyphens = new CT_OnOff();
    }
    return m_suppressAutoHyphens;
}

const CT_OnOff& CT_PPrBase::get_suppressAutoHyphens() const
{
    if (m_suppressAutoHyphens)
    {
        return *m_suppressAutoHyphens;
    }
    return CT_OnOff::default_instance();
}

bool CT_PPrBase::has_kinsoku() const
{
    return m_has_kinsoku;
}

CT_OnOff* CT_PPrBase::mutable_kinsoku()
{
    m_has_kinsoku = true;
    if (!m_kinsoku)
    {
        m_kinsoku = new CT_OnOff();
    }
    return m_kinsoku;
}

const CT_OnOff& CT_PPrBase::get_kinsoku() const
{
    if (m_kinsoku)
    {
        return *m_kinsoku;
    }
    return CT_OnOff::default_instance();
}

bool CT_PPrBase::has_wordWrap() const
{
    return m_has_wordWrap;
}

CT_OnOff* CT_PPrBase::mutable_wordWrap()
{
    m_has_wordWrap = true;
    if (!m_wordWrap)
    {
        m_wordWrap = new CT_OnOff();
    }
    return m_wordWrap;
}

const CT_OnOff& CT_PPrBase::get_wordWrap() const
{
    if (m_wordWrap)
    {
        return *m_wordWrap;
    }
    return CT_OnOff::default_instance();
}

bool CT_PPrBase::has_overflowPunct() const
{
    return m_has_overflowPunct;
}

CT_OnOff* CT_PPrBase::mutable_overflowPunct()
{
    m_has_overflowPunct = true;
    if (!m_overflowPunct)
    {
        m_overflowPunct = new CT_OnOff();
    }
    return m_overflowPunct;
}

const CT_OnOff& CT_PPrBase::get_overflowPunct() const
{
    if (m_overflowPunct)
    {
        return *m_overflowPunct;
    }
    return CT_OnOff::default_instance();
}

bool CT_PPrBase::has_topLinePunct() const
{
    return m_has_topLinePunct;
}

CT_OnOff* CT_PPrBase::mutable_topLinePunct()
{
    m_has_topLinePunct = true;
    if (!m_topLinePunct)
    {
        m_topLinePunct = new CT_OnOff();
    }
    return m_topLinePunct;
}

const CT_OnOff& CT_PPrBase::get_topLinePunct() const
{
    if (m_topLinePunct)
    {
        return *m_topLinePunct;
    }
    return CT_OnOff::default_instance();
}

bool CT_PPrBase::has_autoSpaceDE() const
{
    return m_has_autoSpaceDE;
}

CT_OnOff* CT_PPrBase::mutable_autoSpaceDE()
{
    m_has_autoSpaceDE = true;
    if (!m_autoSpaceDE)
    {
        m_autoSpaceDE = new CT_OnOff();
    }
    return m_autoSpaceDE;
}

const CT_OnOff& CT_PPrBase::get_autoSpaceDE() const
{
    if (m_autoSpaceDE)
    {
        return *m_autoSpaceDE;
    }
    return CT_OnOff::default_instance();
}

bool CT_PPrBase::has_autoSpaceDN() const
{
    return m_has_autoSpaceDN;
}

CT_OnOff* CT_PPrBase::mutable_autoSpaceDN()
{
    m_has_autoSpaceDN = true;
    if (!m_autoSpaceDN)
    {
        m_autoSpaceDN = new CT_OnOff();
    }
    return m_autoSpaceDN;
}

const CT_OnOff& CT_PPrBase::get_autoSpaceDN() const
{
    if (m_autoSpaceDN)
    {
        return *m_autoSpaceDN;
    }
    return CT_OnOff::default_instance();
}

bool CT_PPrBase::has_bidi() const
{
    return m_has_bidi;
}

CT_OnOff* CT_PPrBase::mutable_bidi()
{
    m_has_bidi = true;
    if (!m_bidi)
    {
        m_bidi = new CT_OnOff();
    }
    return m_bidi;
}

const CT_OnOff& CT_PPrBase::get_bidi() const
{
    if (m_bidi)
    {
        return *m_bidi;
    }
    return CT_OnOff::default_instance();
}

bool CT_PPrBase::has_adjustRightInd() const
{
    return m_has_adjustRightInd;
}

CT_OnOff* CT_PPrBase::mutable_adjustRightInd()
{
    m_has_adjustRightInd = true;
    if (!m_adjustRightInd)
    {
        m_adjustRightInd = new CT_OnOff();
    }
    return m_adjustRightInd;
}

const CT_OnOff& CT_PPrBase::get_adjustRightInd() const
{
    if (m_adjustRightInd)
    {
        return *m_adjustRightInd;
    }
    return CT_OnOff::default_instance();
}

bool CT_PPrBase::has_snapToGrid() const
{
    return m_has_snapToGrid;
}

CT_OnOff* CT_PPrBase::mutable_snapToGrid()
{
    m_has_snapToGrid = true;
    if (!m_snapToGrid)
    {
        m_snapToGrid = new CT_OnOff();
    }
    return m_snapToGrid;
}

const CT_OnOff& CT_PPrBase::get_snapToGrid() const
{
    if (m_snapToGrid)
    {
        return *m_snapToGrid;
    }
    return CT_OnOff::default_instance();
}

bool CT_PPrBase::has_spacing() const
{
    return m_has_spacing;
}

CT_Spacing* CT_PPrBase::mutable_spacing()
{
    m_has_spacing = true;
    if (!m_spacing)
    {
        m_spacing = new CT_Spacing();
    }
    return m_spacing;
}

const CT_Spacing& CT_PPrBase::get_spacing() const
{
    if (m_spacing)
    {
        return *m_spacing;
    }
    return CT_Spacing::default_instance();
}

bool CT_PPrBase::has_ind() const
{
    return m_has_ind;
}

CT_Ind* CT_PPrBase::mutable_ind()
{
    m_has_ind = true;
    if (!m_ind)
    {
        m_ind = new CT_Ind();
    }
    return m_ind;
}

const CT_Ind& CT_PPrBase::get_ind() const
{
    if (m_ind)
    {
        return *m_ind;
    }
    return CT_Ind::default_instance();
}

bool CT_PPrBase::has_contextualSpacing() const
{
    return m_has_contextualSpacing;
}

CT_OnOff* CT_PPrBase::mutable_contextualSpacing()
{
    m_has_contextualSpacing = true;
    if (!m_contextualSpacing)
    {
        m_contextualSpacing = new CT_OnOff();
    }
    return m_contextualSpacing;
}

const CT_OnOff& CT_PPrBase::get_contextualSpacing() const
{
    if (m_contextualSpacing)
    {
        return *m_contextualSpacing;
    }
    return CT_OnOff::default_instance();
}

bool CT_PPrBase::has_mirrorIndents() const
{
    return m_has_mirrorIndents;
}

CT_OnOff* CT_PPrBase::mutable_mirrorIndents()
{
    m_has_mirrorIndents = true;
    if (!m_mirrorIndents)
    {
        m_mirrorIndents = new CT_OnOff();
    }
    return m_mirrorIndents;
}

const CT_OnOff& CT_PPrBase::get_mirrorIndents() const
{
    if (m_mirrorIndents)
    {
        return *m_mirrorIndents;
    }
    return CT_OnOff::default_instance();
}

bool CT_PPrBase::has_suppressOverlap() const
{
    return m_has_suppressOverlap;
}

CT_OnOff* CT_PPrBase::mutable_suppressOverlap()
{
    m_has_suppressOverlap = true;
    if (!m_suppressOverlap)
    {
        m_suppressOverlap = new CT_OnOff();
    }
    return m_suppressOverlap;
}

const CT_OnOff& CT_PPrBase::get_suppressOverlap() const
{
    if (m_suppressOverlap)
    {
        return *m_suppressOverlap;
    }
    return CT_OnOff::default_instance();
}

bool CT_PPrBase::has_jc() const
{
    return m_has_jc;
}

CT_Jc* CT_PPrBase::mutable_jc()
{
    m_has_jc = true;
    if (!m_jc)
    {
        m_jc = new CT_Jc();
    }
    return m_jc;
}

const CT_Jc& CT_PPrBase::get_jc() const
{
    if (m_jc)
    {
        return *m_jc;
    }
    return CT_Jc::default_instance();
}

bool CT_PPrBase::has_textDirection() const
{
    return m_has_textDirection;
}

CT_TextDirection* CT_PPrBase::mutable_textDirection()
{
    m_has_textDirection = true;
    if (!m_textDirection)
    {
        m_textDirection = new CT_TextDirection();
    }
    return m_textDirection;
}

const CT_TextDirection& CT_PPrBase::get_textDirection() const
{
    if (m_textDirection)
    {
        return *m_textDirection;
    }
    return CT_TextDirection::default_instance();
}

bool CT_PPrBase::has_textAlignment() const
{
    return m_has_textAlignment;
}

CT_TextAlignment* CT_PPrBase::mutable_textAlignment()
{
    m_has_textAlignment = true;
    if (!m_textAlignment)
    {
        m_textAlignment = new CT_TextAlignment();
    }
    return m_textAlignment;
}

const CT_TextAlignment& CT_PPrBase::get_textAlignment() const
{
    if (m_textAlignment)
    {
        return *m_textAlignment;
    }
    return CT_TextAlignment::default_instance();
}

bool CT_PPrBase::has_textboxTightWrap() const
{
    return m_has_textboxTightWrap;
}

CT_TextboxTightWrap* CT_PPrBase::mutable_textboxTightWrap()
{
    m_has_textboxTightWrap = true;
    if (!m_textboxTightWrap)
    {
        m_textboxTightWrap = new CT_TextboxTightWrap();
    }
    return m_textboxTightWrap;
}

const CT_TextboxTightWrap& CT_PPrBase::get_textboxTightWrap() const
{
    if (m_textboxTightWrap)
    {
        return *m_textboxTightWrap;
    }
    return CT_TextboxTightWrap::default_instance();
}

bool CT_PPrBase::has_outlineLvl() const
{
    return m_has_outlineLvl;
}

CT_DecimalNumber* CT_PPrBase::mutable_outlineLvl()
{
    m_has_outlineLvl = true;
    if (!m_outlineLvl)
    {
        m_outlineLvl = new CT_DecimalNumber();
    }
    return m_outlineLvl;
}

const CT_DecimalNumber& CT_PPrBase::get_outlineLvl() const
{
    if (m_outlineLvl)
    {
        return *m_outlineLvl;
    }
    return CT_DecimalNumber::default_instance();
}

bool CT_PPrBase::has_divId() const
{
    return m_has_divId;
}

CT_DecimalNumber* CT_PPrBase::mutable_divId()
{
    m_has_divId = true;
    if (!m_divId)
    {
        m_divId = new CT_DecimalNumber();
    }
    return m_divId;
}

const CT_DecimalNumber& CT_PPrBase::get_divId() const
{
    if (m_divId)
    {
        return *m_divId;
    }
    return CT_DecimalNumber::default_instance();
}

bool CT_PPrBase::has_cnfStyle() const
{
    return m_has_cnfStyle;
}

CT_Cnf* CT_PPrBase::mutable_cnfStyle()
{
    m_has_cnfStyle = true;
    if (!m_cnfStyle)
    {
        m_cnfStyle = new CT_Cnf();
    }
    return m_cnfStyle;
}

const CT_Cnf& CT_PPrBase::get_cnfStyle() const
{
    if (m_cnfStyle)
    {
        return *m_cnfStyle;
    }
    return CT_Cnf::default_instance();
}

void CT_PPrBase::clear()
{
    m_has_pStyle = false;

    if (m_pStyle)
    {
        delete m_pStyle;
        m_pStyle = NULL;
    }


    m_has_keepNext = false;

    if (m_keepNext)
    {
        delete m_keepNext;
        m_keepNext = NULL;
    }


    m_has_keepLines = false;

    if (m_keepLines)
    {
        delete m_keepLines;
        m_keepLines = NULL;
    }


    m_has_pageBreakBefore = false;

    if (m_pageBreakBefore)
    {
        delete m_pageBreakBefore;
        m_pageBreakBefore = NULL;
    }


    m_has_framePr = false;

    if (m_framePr)
    {
        delete m_framePr;
        m_framePr = NULL;
    }


    m_has_widowControl = false;

    if (m_widowControl)
    {
        delete m_widowControl;
        m_widowControl = NULL;
    }


    m_has_numPr = false;

    if (m_numPr)
    {
        delete m_numPr;
        m_numPr = NULL;
    }


    m_has_suppressLineNumbers = false;

    if (m_suppressLineNumbers)
    {
        delete m_suppressLineNumbers;
        m_suppressLineNumbers = NULL;
    }


    m_has_pBdr = false;

    if (m_pBdr)
    {
        delete m_pBdr;
        m_pBdr = NULL;
    }


    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }


    m_has_tabs = false;

    if (m_tabs)
    {
        delete m_tabs;
        m_tabs = NULL;
    }


    m_has_suppressAutoHyphens = false;

    if (m_suppressAutoHyphens)
    {
        delete m_suppressAutoHyphens;
        m_suppressAutoHyphens = NULL;
    }


    m_has_kinsoku = false;

    if (m_kinsoku)
    {
        delete m_kinsoku;
        m_kinsoku = NULL;
    }


    m_has_wordWrap = false;

    if (m_wordWrap)
    {
        delete m_wordWrap;
        m_wordWrap = NULL;
    }


    m_has_overflowPunct = false;

    if (m_overflowPunct)
    {
        delete m_overflowPunct;
        m_overflowPunct = NULL;
    }


    m_has_topLinePunct = false;

    if (m_topLinePunct)
    {
        delete m_topLinePunct;
        m_topLinePunct = NULL;
    }


    m_has_autoSpaceDE = false;

    if (m_autoSpaceDE)
    {
        delete m_autoSpaceDE;
        m_autoSpaceDE = NULL;
    }


    m_has_autoSpaceDN = false;

    if (m_autoSpaceDN)
    {
        delete m_autoSpaceDN;
        m_autoSpaceDN = NULL;
    }


    m_has_bidi = false;

    if (m_bidi)
    {
        delete m_bidi;
        m_bidi = NULL;
    }


    m_has_adjustRightInd = false;

    if (m_adjustRightInd)
    {
        delete m_adjustRightInd;
        m_adjustRightInd = NULL;
    }


    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }


    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }


    m_has_ind = false;

    if (m_ind)
    {
        delete m_ind;
        m_ind = NULL;
    }


    m_has_contextualSpacing = false;

    if (m_contextualSpacing)
    {
        delete m_contextualSpacing;
        m_contextualSpacing = NULL;
    }


    m_has_mirrorIndents = false;

    if (m_mirrorIndents)
    {
        delete m_mirrorIndents;
        m_mirrorIndents = NULL;
    }


    m_has_suppressOverlap = false;

    if (m_suppressOverlap)
    {
        delete m_suppressOverlap;
        m_suppressOverlap = NULL;
    }


    m_has_jc = false;

    if (m_jc)
    {
        delete m_jc;
        m_jc = NULL;
    }


    m_has_textDirection = false;

    if (m_textDirection)
    {
        delete m_textDirection;
        m_textDirection = NULL;
    }


    m_has_textAlignment = false;

    if (m_textAlignment)
    {
        delete m_textAlignment;
        m_textAlignment = NULL;
    }


    m_has_textboxTightWrap = false;

    if (m_textboxTightWrap)
    {
        delete m_textboxTightWrap;
        m_textboxTightWrap = NULL;
    }


    m_has_outlineLvl = false;

    if (m_outlineLvl)
    {
        delete m_outlineLvl;
        m_outlineLvl = NULL;
    }


    m_has_divId = false;

    if (m_divId)
    {
        delete m_divId;
        m_divId = NULL;
    }


    m_has_cnfStyle = false;

    if (m_cnfStyle)
    {
        delete m_cnfStyle;
        m_cnfStyle = NULL;
    }

}

void CT_PPrBase::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";


    if (m_has_pStyle)
    {
        m_pStyle->toXmlElem("w:pStyle", "", _outStream);
    }


    if (m_has_keepNext)
    {
        m_keepNext->toXmlElem("w:keepNext", "", _outStream);
    }


    if (m_has_keepLines)
    {
        m_keepLines->toXmlElem("w:keepLines", "", _outStream);
    }


    if (m_has_pageBreakBefore)
    {
        m_pageBreakBefore->toXmlElem("w:pageBreakBefore", "", _outStream);
    }


    if (m_has_framePr)
    {
        m_framePr->toXmlElem("w:framePr", "", _outStream);
    }


    if (m_has_widowControl)
    {
        m_widowControl->toXmlElem("w:widowControl", "", _outStream);
    }


    if (m_has_numPr)
    {
        m_numPr->toXmlElem("w:numPr", "", _outStream);
    }


    if (m_has_suppressLineNumbers)
    {
        m_suppressLineNumbers->toXmlElem("w:suppressLineNumbers", "", _outStream);
    }


    if (m_has_pBdr)
    {
        m_pBdr->toXmlElem("w:pBdr", "", _outStream);
    }


    if (m_has_shd)
    {
        m_shd->toXmlElem("w:shd", "", _outStream);
    }


    if (m_has_tabs)
    {
        m_tabs->toXmlElem("w:tabs", "", _outStream);
    }


    if (m_has_suppressAutoHyphens)
    {
        m_suppressAutoHyphens->toXmlElem("w:suppressAutoHyphens", "", _outStream);
    }


    if (m_has_kinsoku)
    {
        m_kinsoku->toXmlElem("w:kinsoku", "", _outStream);
    }


    if (m_has_wordWrap)
    {
        m_wordWrap->toXmlElem("w:wordWrap", "", _outStream);
    }


    if (m_has_overflowPunct)
    {
        m_overflowPunct->toXmlElem("w:overflowPunct", "", _outStream);
    }


    if (m_has_topLinePunct)
    {
        m_topLinePunct->toXmlElem("w:topLinePunct", "", _outStream);
    }


    if (m_has_autoSpaceDE)
    {
        m_autoSpaceDE->toXmlElem("w:autoSpaceDE", "", _outStream);
    }


    if (m_has_autoSpaceDN)
    {
        m_autoSpaceDN->toXmlElem("w:autoSpaceDN", "", _outStream);
    }


    if (m_has_bidi)
    {
        m_bidi->toXmlElem("w:bidi", "", _outStream);
    }


    if (m_has_adjustRightInd)
    {
        m_adjustRightInd->toXmlElem("w:adjustRightInd", "", _outStream);
    }


    if (m_has_snapToGrid)
    {
        m_snapToGrid->toXmlElem("w:snapToGrid", "", _outStream);
    }


    if (m_has_spacing)
    {
        m_spacing->toXmlElem("w:spacing", "", _outStream);
    }


    if (m_has_ind)
    {
        m_ind->toXmlElem("w:ind", "", _outStream);
    }


    if (m_has_contextualSpacing)
    {
        m_contextualSpacing->toXmlElem("w:contextualSpacing", "", _outStream);
    }


    if (m_has_mirrorIndents)
    {
        m_mirrorIndents->toXmlElem("w:mirrorIndents", "", _outStream);
    }


    if (m_has_suppressOverlap)
    {
        m_suppressOverlap->toXmlElem("w:suppressOverlap", "", _outStream);
    }


    if (m_has_jc)
    {
        m_jc->toXmlElem("w:jc", "", _outStream);
    }


    if (m_has_textDirection)
    {
        m_textDirection->toXmlElem("w:textDirection", "", _outStream);
    }


    if (m_has_textAlignment)
    {
        m_textAlignment->toXmlElem("w:textAlignment", "", _outStream);
    }


    if (m_has_textboxTightWrap)
    {
        m_textboxTightWrap->toXmlElem("w:textboxTightWrap", "", _outStream);
    }


    if (m_has_outlineLvl)
    {
        m_outlineLvl->toXmlElem("w:outlineLvl", "", _outStream);
    }


    if (m_has_divId)
    {
        m_divId->toXmlElem("w:divId", "", _outStream);
    }


    if (m_has_cnfStyle)
    {
        m_cnfStyle->toXmlElem("w:cnfStyle", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_PPrBase& CT_PPrBase::default_instance()
{
    if (!CT_PPrBase::default_instance_)
    {
        CT_PPrBase::default_instance_ = new CT_PPrBase();
    }
    return *CT_PPrBase::default_instance_;
}

CT_PPrBase* CT_PPrBase::default_instance_ = NULL;

// CT_PPrGeneral
CT_PPrGeneral::CT_PPrGeneral()
    :m_has_pStyle(false),
     m_pStyle(NULL),
     m_has_keepNext(false),
     m_keepNext(NULL),
     m_has_keepLines(false),
     m_keepLines(NULL),
     m_has_pageBreakBefore(false),
     m_pageBreakBefore(NULL),
     m_has_framePr(false),
     m_framePr(NULL),
     m_has_widowControl(false),
     m_widowControl(NULL),
     m_has_numPr(false),
     m_numPr(NULL),
     m_has_suppressLineNumbers(false),
     m_suppressLineNumbers(NULL),
     m_has_pBdr(false),
     m_pBdr(NULL),
     m_has_shd(false),
     m_shd(NULL),
     m_has_tabs(false),
     m_tabs(NULL),
     m_has_suppressAutoHyphens(false),
     m_suppressAutoHyphens(NULL),
     m_has_kinsoku(false),
     m_kinsoku(NULL),
     m_has_wordWrap(false),
     m_wordWrap(NULL),
     m_has_overflowPunct(false),
     m_overflowPunct(NULL),
     m_has_topLinePunct(false),
     m_topLinePunct(NULL),
     m_has_autoSpaceDE(false),
     m_autoSpaceDE(NULL),
     m_has_autoSpaceDN(false),
     m_autoSpaceDN(NULL),
     m_has_bidi(false),
     m_bidi(NULL),
     m_has_adjustRightInd(false),
     m_adjustRightInd(NULL),
     m_has_snapToGrid(false),
     m_snapToGrid(NULL),
     m_has_spacing(false),
     m_spacing(NULL),
     m_has_ind(false),
     m_ind(NULL),
     m_has_contextualSpacing(false),
     m_contextualSpacing(NULL),
     m_has_mirrorIndents(false),
     m_mirrorIndents(NULL),
     m_has_suppressOverlap(false),
     m_suppressOverlap(NULL),
     m_has_jc(false),
     m_jc(NULL),
     m_has_textDirection(false),
     m_textDirection(NULL),
     m_has_textAlignment(false),
     m_textAlignment(NULL),
     m_has_textboxTightWrap(false),
     m_textboxTightWrap(NULL),
     m_has_outlineLvl(false),
     m_outlineLvl(NULL),
     m_has_divId(false),
     m_divId(NULL),
     m_has_cnfStyle(false),
     m_cnfStyle(NULL),
     m_has_pPrChange(false),
     m_pPrChange(NULL)
{
}
CT_PPrGeneral::~CT_PPrGeneral()
{
    clear();
}
bool CT_PPrGeneral::has_pStyle() const
{
    return m_has_pStyle;
}

CT_String* CT_PPrGeneral::mutable_pStyle()
{
    m_has_pStyle = true;
    if (!m_pStyle)
    {
        m_pStyle = new CT_String();
    }
    return m_pStyle;
}

const CT_String& CT_PPrGeneral::get_pStyle() const
{
    if (m_pStyle)
    {
        return *m_pStyle;
    }
    return CT_String::default_instance();
}

bool CT_PPrGeneral::has_keepNext() const
{
    return m_has_keepNext;
}

CT_OnOff* CT_PPrGeneral::mutable_keepNext()
{
    m_has_keepNext = true;
    if (!m_keepNext)
    {
        m_keepNext = new CT_OnOff();
    }
    return m_keepNext;
}

const CT_OnOff& CT_PPrGeneral::get_keepNext() const
{
    if (m_keepNext)
    {
        return *m_keepNext;
    }
    return CT_OnOff::default_instance();
}

bool CT_PPrGeneral::has_keepLines() const
{
    return m_has_keepLines;
}

CT_OnOff* CT_PPrGeneral::mutable_keepLines()
{
    m_has_keepLines = true;
    if (!m_keepLines)
    {
        m_keepLines = new CT_OnOff();
    }
    return m_keepLines;
}

const CT_OnOff& CT_PPrGeneral::get_keepLines() const
{
    if (m_keepLines)
    {
        return *m_keepLines;
    }
    return CT_OnOff::default_instance();
}

bool CT_PPrGeneral::has_pageBreakBefore() const
{
    return m_has_pageBreakBefore;
}

CT_OnOff* CT_PPrGeneral::mutable_pageBreakBefore()
{
    m_has_pageBreakBefore = true;
    if (!m_pageBreakBefore)
    {
        m_pageBreakBefore = new CT_OnOff();
    }
    return m_pageBreakBefore;
}

const CT_OnOff& CT_PPrGeneral::get_pageBreakBefore() const
{
    if (m_pageBreakBefore)
    {
        return *m_pageBreakBefore;
    }
    return CT_OnOff::default_instance();
}

bool CT_PPrGeneral::has_framePr() const
{
    return m_has_framePr;
}

CT_FramePr* CT_PPrGeneral::mutable_framePr()
{
    m_has_framePr = true;
    if (!m_framePr)
    {
        m_framePr = new CT_FramePr();
    }
    return m_framePr;
}

const CT_FramePr& CT_PPrGeneral::get_framePr() const
{
    if (m_framePr)
    {
        return *m_framePr;
    }
    return CT_FramePr::default_instance();
}

bool CT_PPrGeneral::has_widowControl() const
{
    return m_has_widowControl;
}

CT_OnOff* CT_PPrGeneral::mutable_widowControl()
{
    m_has_widowControl = true;
    if (!m_widowControl)
    {
        m_widowControl = new CT_OnOff();
    }
    return m_widowControl;
}

const CT_OnOff& CT_PPrGeneral::get_widowControl() const
{
    if (m_widowControl)
    {
        return *m_widowControl;
    }
    return CT_OnOff::default_instance();
}

bool CT_PPrGeneral::has_numPr() const
{
    return m_has_numPr;
}

CT_NumPr* CT_PPrGeneral::mutable_numPr()
{
    m_has_numPr = true;
    if (!m_numPr)
    {
        m_numPr = new CT_NumPr();
    }
    return m_numPr;
}

const CT_NumPr& CT_PPrGeneral::get_numPr() const
{
    if (m_numPr)
    {
        return *m_numPr;
    }
    return CT_NumPr::default_instance();
}

bool CT_PPrGeneral::has_suppressLineNumbers() const
{
    return m_has_suppressLineNumbers;
}

CT_OnOff* CT_PPrGeneral::mutable_suppressLineNumbers()
{
    m_has_suppressLineNumbers = true;
    if (!m_suppressLineNumbers)
    {
        m_suppressLineNumbers = new CT_OnOff();
    }
    return m_suppressLineNumbers;
}

const CT_OnOff& CT_PPrGeneral::get_suppressLineNumbers() const
{
    if (m_suppressLineNumbers)
    {
        return *m_suppressLineNumbers;
    }
    return CT_OnOff::default_instance();
}

bool CT_PPrGeneral::has_pBdr() const
{
    return m_has_pBdr;
}

CT_PBdr* CT_PPrGeneral::mutable_pBdr()
{
    m_has_pBdr = true;
    if (!m_pBdr)
    {
        m_pBdr = new CT_PBdr();
    }
    return m_pBdr;
}

const CT_PBdr& CT_PPrGeneral::get_pBdr() const
{
    if (m_pBdr)
    {
        return *m_pBdr;
    }
    return CT_PBdr::default_instance();
}

bool CT_PPrGeneral::has_shd() const
{
    return m_has_shd;
}

CT_Shd* CT_PPrGeneral::mutable_shd()
{
    m_has_shd = true;
    if (!m_shd)
    {
        m_shd = new CT_Shd();
    }
    return m_shd;
}

const CT_Shd& CT_PPrGeneral::get_shd() const
{
    if (m_shd)
    {
        return *m_shd;
    }
    return CT_Shd::default_instance();
}

bool CT_PPrGeneral::has_tabs() const
{
    return m_has_tabs;
}

CT_Tabs* CT_PPrGeneral::mutable_tabs()
{
    m_has_tabs = true;
    if (!m_tabs)
    {
        m_tabs = new CT_Tabs();
    }
    return m_tabs;
}

const CT_Tabs& CT_PPrGeneral::get_tabs() const
{
    if (m_tabs)
    {
        return *m_tabs;
    }
    return CT_Tabs::default_instance();
}

bool CT_PPrGeneral::has_suppressAutoHyphens() const
{
    return m_has_suppressAutoHyphens;
}

CT_OnOff* CT_PPrGeneral::mutable_suppressAutoHyphens()
{
    m_has_suppressAutoHyphens = true;
    if (!m_suppressAutoHyphens)
    {
        m_suppressAutoHyphens = new CT_OnOff();
    }
    return m_suppressAutoHyphens;
}

const CT_OnOff& CT_PPrGeneral::get_suppressAutoHyphens() const
{
    if (m_suppressAutoHyphens)
    {
        return *m_suppressAutoHyphens;
    }
    return CT_OnOff::default_instance();
}

bool CT_PPrGeneral::has_kinsoku() const
{
    return m_has_kinsoku;
}

CT_OnOff* CT_PPrGeneral::mutable_kinsoku()
{
    m_has_kinsoku = true;
    if (!m_kinsoku)
    {
        m_kinsoku = new CT_OnOff();
    }
    return m_kinsoku;
}

const CT_OnOff& CT_PPrGeneral::get_kinsoku() const
{
    if (m_kinsoku)
    {
        return *m_kinsoku;
    }
    return CT_OnOff::default_instance();
}

bool CT_PPrGeneral::has_wordWrap() const
{
    return m_has_wordWrap;
}

CT_OnOff* CT_PPrGeneral::mutable_wordWrap()
{
    m_has_wordWrap = true;
    if (!m_wordWrap)
    {
        m_wordWrap = new CT_OnOff();
    }
    return m_wordWrap;
}

const CT_OnOff& CT_PPrGeneral::get_wordWrap() const
{
    if (m_wordWrap)
    {
        return *m_wordWrap;
    }
    return CT_OnOff::default_instance();
}

bool CT_PPrGeneral::has_overflowPunct() const
{
    return m_has_overflowPunct;
}

CT_OnOff* CT_PPrGeneral::mutable_overflowPunct()
{
    m_has_overflowPunct = true;
    if (!m_overflowPunct)
    {
        m_overflowPunct = new CT_OnOff();
    }
    return m_overflowPunct;
}

const CT_OnOff& CT_PPrGeneral::get_overflowPunct() const
{
    if (m_overflowPunct)
    {
        return *m_overflowPunct;
    }
    return CT_OnOff::default_instance();
}

bool CT_PPrGeneral::has_topLinePunct() const
{
    return m_has_topLinePunct;
}

CT_OnOff* CT_PPrGeneral::mutable_topLinePunct()
{
    m_has_topLinePunct = true;
    if (!m_topLinePunct)
    {
        m_topLinePunct = new CT_OnOff();
    }
    return m_topLinePunct;
}

const CT_OnOff& CT_PPrGeneral::get_topLinePunct() const
{
    if (m_topLinePunct)
    {
        return *m_topLinePunct;
    }
    return CT_OnOff::default_instance();
}

bool CT_PPrGeneral::has_autoSpaceDE() const
{
    return m_has_autoSpaceDE;
}

CT_OnOff* CT_PPrGeneral::mutable_autoSpaceDE()
{
    m_has_autoSpaceDE = true;
    if (!m_autoSpaceDE)
    {
        m_autoSpaceDE = new CT_OnOff();
    }
    return m_autoSpaceDE;
}

const CT_OnOff& CT_PPrGeneral::get_autoSpaceDE() const
{
    if (m_autoSpaceDE)
    {
        return *m_autoSpaceDE;
    }
    return CT_OnOff::default_instance();
}

bool CT_PPrGeneral::has_autoSpaceDN() const
{
    return m_has_autoSpaceDN;
}

CT_OnOff* CT_PPrGeneral::mutable_autoSpaceDN()
{
    m_has_autoSpaceDN = true;
    if (!m_autoSpaceDN)
    {
        m_autoSpaceDN = new CT_OnOff();
    }
    return m_autoSpaceDN;
}

const CT_OnOff& CT_PPrGeneral::get_autoSpaceDN() const
{
    if (m_autoSpaceDN)
    {
        return *m_autoSpaceDN;
    }
    return CT_OnOff::default_instance();
}

bool CT_PPrGeneral::has_bidi() const
{
    return m_has_bidi;
}

CT_OnOff* CT_PPrGeneral::mutable_bidi()
{
    m_has_bidi = true;
    if (!m_bidi)
    {
        m_bidi = new CT_OnOff();
    }
    return m_bidi;
}

const CT_OnOff& CT_PPrGeneral::get_bidi() const
{
    if (m_bidi)
    {
        return *m_bidi;
    }
    return CT_OnOff::default_instance();
}

bool CT_PPrGeneral::has_adjustRightInd() const
{
    return m_has_adjustRightInd;
}

CT_OnOff* CT_PPrGeneral::mutable_adjustRightInd()
{
    m_has_adjustRightInd = true;
    if (!m_adjustRightInd)
    {
        m_adjustRightInd = new CT_OnOff();
    }
    return m_adjustRightInd;
}

const CT_OnOff& CT_PPrGeneral::get_adjustRightInd() const
{
    if (m_adjustRightInd)
    {
        return *m_adjustRightInd;
    }
    return CT_OnOff::default_instance();
}

bool CT_PPrGeneral::has_snapToGrid() const
{
    return m_has_snapToGrid;
}

CT_OnOff* CT_PPrGeneral::mutable_snapToGrid()
{
    m_has_snapToGrid = true;
    if (!m_snapToGrid)
    {
        m_snapToGrid = new CT_OnOff();
    }
    return m_snapToGrid;
}

const CT_OnOff& CT_PPrGeneral::get_snapToGrid() const
{
    if (m_snapToGrid)
    {
        return *m_snapToGrid;
    }
    return CT_OnOff::default_instance();
}

bool CT_PPrGeneral::has_spacing() const
{
    return m_has_spacing;
}

CT_Spacing* CT_PPrGeneral::mutable_spacing()
{
    m_has_spacing = true;
    if (!m_spacing)
    {
        m_spacing = new CT_Spacing();
    }
    return m_spacing;
}

const CT_Spacing& CT_PPrGeneral::get_spacing() const
{
    if (m_spacing)
    {
        return *m_spacing;
    }
    return CT_Spacing::default_instance();
}

bool CT_PPrGeneral::has_ind() const
{
    return m_has_ind;
}

CT_Ind* CT_PPrGeneral::mutable_ind()
{
    m_has_ind = true;
    if (!m_ind)
    {
        m_ind = new CT_Ind();
    }
    return m_ind;
}

const CT_Ind& CT_PPrGeneral::get_ind() const
{
    if (m_ind)
    {
        return *m_ind;
    }
    return CT_Ind::default_instance();
}

bool CT_PPrGeneral::has_contextualSpacing() const
{
    return m_has_contextualSpacing;
}

CT_OnOff* CT_PPrGeneral::mutable_contextualSpacing()
{
    m_has_contextualSpacing = true;
    if (!m_contextualSpacing)
    {
        m_contextualSpacing = new CT_OnOff();
    }
    return m_contextualSpacing;
}

const CT_OnOff& CT_PPrGeneral::get_contextualSpacing() const
{
    if (m_contextualSpacing)
    {
        return *m_contextualSpacing;
    }
    return CT_OnOff::default_instance();
}

bool CT_PPrGeneral::has_mirrorIndents() const
{
    return m_has_mirrorIndents;
}

CT_OnOff* CT_PPrGeneral::mutable_mirrorIndents()
{
    m_has_mirrorIndents = true;
    if (!m_mirrorIndents)
    {
        m_mirrorIndents = new CT_OnOff();
    }
    return m_mirrorIndents;
}

const CT_OnOff& CT_PPrGeneral::get_mirrorIndents() const
{
    if (m_mirrorIndents)
    {
        return *m_mirrorIndents;
    }
    return CT_OnOff::default_instance();
}

bool CT_PPrGeneral::has_suppressOverlap() const
{
    return m_has_suppressOverlap;
}

CT_OnOff* CT_PPrGeneral::mutable_suppressOverlap()
{
    m_has_suppressOverlap = true;
    if (!m_suppressOverlap)
    {
        m_suppressOverlap = new CT_OnOff();
    }
    return m_suppressOverlap;
}

const CT_OnOff& CT_PPrGeneral::get_suppressOverlap() const
{
    if (m_suppressOverlap)
    {
        return *m_suppressOverlap;
    }
    return CT_OnOff::default_instance();
}

bool CT_PPrGeneral::has_jc() const
{
    return m_has_jc;
}

CT_Jc* CT_PPrGeneral::mutable_jc()
{
    m_has_jc = true;
    if (!m_jc)
    {
        m_jc = new CT_Jc();
    }
    return m_jc;
}

const CT_Jc& CT_PPrGeneral::get_jc() const
{
    if (m_jc)
    {
        return *m_jc;
    }
    return CT_Jc::default_instance();
}

bool CT_PPrGeneral::has_textDirection() const
{
    return m_has_textDirection;
}

CT_TextDirection* CT_PPrGeneral::mutable_textDirection()
{
    m_has_textDirection = true;
    if (!m_textDirection)
    {
        m_textDirection = new CT_TextDirection();
    }
    return m_textDirection;
}

const CT_TextDirection& CT_PPrGeneral::get_textDirection() const
{
    if (m_textDirection)
    {
        return *m_textDirection;
    }
    return CT_TextDirection::default_instance();
}

bool CT_PPrGeneral::has_textAlignment() const
{
    return m_has_textAlignment;
}

CT_TextAlignment* CT_PPrGeneral::mutable_textAlignment()
{
    m_has_textAlignment = true;
    if (!m_textAlignment)
    {
        m_textAlignment = new CT_TextAlignment();
    }
    return m_textAlignment;
}

const CT_TextAlignment& CT_PPrGeneral::get_textAlignment() const
{
    if (m_textAlignment)
    {
        return *m_textAlignment;
    }
    return CT_TextAlignment::default_instance();
}

bool CT_PPrGeneral::has_textboxTightWrap() const
{
    return m_has_textboxTightWrap;
}

CT_TextboxTightWrap* CT_PPrGeneral::mutable_textboxTightWrap()
{
    m_has_textboxTightWrap = true;
    if (!m_textboxTightWrap)
    {
        m_textboxTightWrap = new CT_TextboxTightWrap();
    }
    return m_textboxTightWrap;
}

const CT_TextboxTightWrap& CT_PPrGeneral::get_textboxTightWrap() const
{
    if (m_textboxTightWrap)
    {
        return *m_textboxTightWrap;
    }
    return CT_TextboxTightWrap::default_instance();
}

bool CT_PPrGeneral::has_outlineLvl() const
{
    return m_has_outlineLvl;
}

CT_DecimalNumber* CT_PPrGeneral::mutable_outlineLvl()
{
    m_has_outlineLvl = true;
    if (!m_outlineLvl)
    {
        m_outlineLvl = new CT_DecimalNumber();
    }
    return m_outlineLvl;
}

const CT_DecimalNumber& CT_PPrGeneral::get_outlineLvl() const
{
    if (m_outlineLvl)
    {
        return *m_outlineLvl;
    }
    return CT_DecimalNumber::default_instance();
}

bool CT_PPrGeneral::has_divId() const
{
    return m_has_divId;
}

CT_DecimalNumber* CT_PPrGeneral::mutable_divId()
{
    m_has_divId = true;
    if (!m_divId)
    {
        m_divId = new CT_DecimalNumber();
    }
    return m_divId;
}

const CT_DecimalNumber& CT_PPrGeneral::get_divId() const
{
    if (m_divId)
    {
        return *m_divId;
    }
    return CT_DecimalNumber::default_instance();
}

bool CT_PPrGeneral::has_cnfStyle() const
{
    return m_has_cnfStyle;
}

CT_Cnf* CT_PPrGeneral::mutable_cnfStyle()
{
    m_has_cnfStyle = true;
    if (!m_cnfStyle)
    {
        m_cnfStyle = new CT_Cnf();
    }
    return m_cnfStyle;
}

const CT_Cnf& CT_PPrGeneral::get_cnfStyle() const
{
    if (m_cnfStyle)
    {
        return *m_cnfStyle;
    }
    return CT_Cnf::default_instance();
}

bool CT_PPrGeneral::has_pPrChange() const
{
    return m_has_pPrChange;
}

CT_PPrChange* CT_PPrGeneral::mutable_pPrChange()
{
    m_has_pPrChange = true;
    if (!m_pPrChange)
    {
        m_pPrChange = new CT_PPrChange();
    }
    return m_pPrChange;
}

const CT_PPrChange& CT_PPrGeneral::get_pPrChange() const
{
    if (m_pPrChange)
    {
        return *m_pPrChange;
    }
    return CT_PPrChange::default_instance();
}

void CT_PPrGeneral::clear()
{
    m_has_pStyle = false;

    if (m_pStyle)
    {
        delete m_pStyle;
        m_pStyle = NULL;
    }


    m_has_keepNext = false;

    if (m_keepNext)
    {
        delete m_keepNext;
        m_keepNext = NULL;
    }


    m_has_keepLines = false;

    if (m_keepLines)
    {
        delete m_keepLines;
        m_keepLines = NULL;
    }


    m_has_pageBreakBefore = false;

    if (m_pageBreakBefore)
    {
        delete m_pageBreakBefore;
        m_pageBreakBefore = NULL;
    }


    m_has_framePr = false;

    if (m_framePr)
    {
        delete m_framePr;
        m_framePr = NULL;
    }


    m_has_widowControl = false;

    if (m_widowControl)
    {
        delete m_widowControl;
        m_widowControl = NULL;
    }


    m_has_numPr = false;

    if (m_numPr)
    {
        delete m_numPr;
        m_numPr = NULL;
    }


    m_has_suppressLineNumbers = false;

    if (m_suppressLineNumbers)
    {
        delete m_suppressLineNumbers;
        m_suppressLineNumbers = NULL;
    }


    m_has_pBdr = false;

    if (m_pBdr)
    {
        delete m_pBdr;
        m_pBdr = NULL;
    }


    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }


    m_has_tabs = false;

    if (m_tabs)
    {
        delete m_tabs;
        m_tabs = NULL;
    }


    m_has_suppressAutoHyphens = false;

    if (m_suppressAutoHyphens)
    {
        delete m_suppressAutoHyphens;
        m_suppressAutoHyphens = NULL;
    }


    m_has_kinsoku = false;

    if (m_kinsoku)
    {
        delete m_kinsoku;
        m_kinsoku = NULL;
    }


    m_has_wordWrap = false;

    if (m_wordWrap)
    {
        delete m_wordWrap;
        m_wordWrap = NULL;
    }


    m_has_overflowPunct = false;

    if (m_overflowPunct)
    {
        delete m_overflowPunct;
        m_overflowPunct = NULL;
    }


    m_has_topLinePunct = false;

    if (m_topLinePunct)
    {
        delete m_topLinePunct;
        m_topLinePunct = NULL;
    }


    m_has_autoSpaceDE = false;

    if (m_autoSpaceDE)
    {
        delete m_autoSpaceDE;
        m_autoSpaceDE = NULL;
    }


    m_has_autoSpaceDN = false;

    if (m_autoSpaceDN)
    {
        delete m_autoSpaceDN;
        m_autoSpaceDN = NULL;
    }


    m_has_bidi = false;

    if (m_bidi)
    {
        delete m_bidi;
        m_bidi = NULL;
    }


    m_has_adjustRightInd = false;

    if (m_adjustRightInd)
    {
        delete m_adjustRightInd;
        m_adjustRightInd = NULL;
    }


    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }


    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }


    m_has_ind = false;

    if (m_ind)
    {
        delete m_ind;
        m_ind = NULL;
    }


    m_has_contextualSpacing = false;

    if (m_contextualSpacing)
    {
        delete m_contextualSpacing;
        m_contextualSpacing = NULL;
    }


    m_has_mirrorIndents = false;

    if (m_mirrorIndents)
    {
        delete m_mirrorIndents;
        m_mirrorIndents = NULL;
    }


    m_has_suppressOverlap = false;

    if (m_suppressOverlap)
    {
        delete m_suppressOverlap;
        m_suppressOverlap = NULL;
    }


    m_has_jc = false;

    if (m_jc)
    {
        delete m_jc;
        m_jc = NULL;
    }


    m_has_textDirection = false;

    if (m_textDirection)
    {
        delete m_textDirection;
        m_textDirection = NULL;
    }


    m_has_textAlignment = false;

    if (m_textAlignment)
    {
        delete m_textAlignment;
        m_textAlignment = NULL;
    }


    m_has_textboxTightWrap = false;

    if (m_textboxTightWrap)
    {
        delete m_textboxTightWrap;
        m_textboxTightWrap = NULL;
    }


    m_has_outlineLvl = false;

    if (m_outlineLvl)
    {
        delete m_outlineLvl;
        m_outlineLvl = NULL;
    }


    m_has_divId = false;

    if (m_divId)
    {
        delete m_divId;
        m_divId = NULL;
    }


    m_has_cnfStyle = false;

    if (m_cnfStyle)
    {
        delete m_cnfStyle;
        m_cnfStyle = NULL;
    }


    m_has_pPrChange = false;

    if (m_pPrChange)
    {
        delete m_pPrChange;
        m_pPrChange = NULL;
    }

}

void CT_PPrGeneral::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";


    if (m_has_pStyle)
    {
        m_pStyle->toXmlElem("w:pStyle", "", _outStream);
    }


    if (m_has_keepNext)
    {
        m_keepNext->toXmlElem("w:keepNext", "", _outStream);
    }


    if (m_has_keepLines)
    {
        m_keepLines->toXmlElem("w:keepLines", "", _outStream);
    }


    if (m_has_pageBreakBefore)
    {
        m_pageBreakBefore->toXmlElem("w:pageBreakBefore", "", _outStream);
    }


    if (m_has_framePr)
    {
        m_framePr->toXmlElem("w:framePr", "", _outStream);
    }


    if (m_has_widowControl)
    {
        m_widowControl->toXmlElem("w:widowControl", "", _outStream);
    }


    if (m_has_numPr)
    {
        m_numPr->toXmlElem("w:numPr", "", _outStream);
    }


    if (m_has_suppressLineNumbers)
    {
        m_suppressLineNumbers->toXmlElem("w:suppressLineNumbers", "", _outStream);
    }


    if (m_has_pBdr)
    {
        m_pBdr->toXmlElem("w:pBdr", "", _outStream);
    }


    if (m_has_shd)
    {
        m_shd->toXmlElem("w:shd", "", _outStream);
    }


    if (m_has_tabs)
    {
        m_tabs->toXmlElem("w:tabs", "", _outStream);
    }


    if (m_has_suppressAutoHyphens)
    {
        m_suppressAutoHyphens->toXmlElem("w:suppressAutoHyphens", "", _outStream);
    }


    if (m_has_kinsoku)
    {
        m_kinsoku->toXmlElem("w:kinsoku", "", _outStream);
    }


    if (m_has_wordWrap)
    {
        m_wordWrap->toXmlElem("w:wordWrap", "", _outStream);
    }


    if (m_has_overflowPunct)
    {
        m_overflowPunct->toXmlElem("w:overflowPunct", "", _outStream);
    }


    if (m_has_topLinePunct)
    {
        m_topLinePunct->toXmlElem("w:topLinePunct", "", _outStream);
    }


    if (m_has_autoSpaceDE)
    {
        m_autoSpaceDE->toXmlElem("w:autoSpaceDE", "", _outStream);
    }


    if (m_has_autoSpaceDN)
    {
        m_autoSpaceDN->toXmlElem("w:autoSpaceDN", "", _outStream);
    }


    if (m_has_bidi)
    {
        m_bidi->toXmlElem("w:bidi", "", _outStream);
    }


    if (m_has_adjustRightInd)
    {
        m_adjustRightInd->toXmlElem("w:adjustRightInd", "", _outStream);
    }


    if (m_has_snapToGrid)
    {
        m_snapToGrid->toXmlElem("w:snapToGrid", "", _outStream);
    }


    if (m_has_spacing)
    {
        m_spacing->toXmlElem("w:spacing", "", _outStream);
    }


    if (m_has_ind)
    {
        m_ind->toXmlElem("w:ind", "", _outStream);
    }


    if (m_has_contextualSpacing)
    {
        m_contextualSpacing->toXmlElem("w:contextualSpacing", "", _outStream);
    }


    if (m_has_mirrorIndents)
    {
        m_mirrorIndents->toXmlElem("w:mirrorIndents", "", _outStream);
    }


    if (m_has_suppressOverlap)
    {
        m_suppressOverlap->toXmlElem("w:suppressOverlap", "", _outStream);
    }


    if (m_has_jc)
    {
        m_jc->toXmlElem("w:jc", "", _outStream);
    }


    if (m_has_textDirection)
    {
        m_textDirection->toXmlElem("w:textDirection", "", _outStream);
    }


    if (m_has_textAlignment)
    {
        m_textAlignment->toXmlElem("w:textAlignment", "", _outStream);
    }


    if (m_has_textboxTightWrap)
    {
        m_textboxTightWrap->toXmlElem("w:textboxTightWrap", "", _outStream);
    }


    if (m_has_outlineLvl)
    {
        m_outlineLvl->toXmlElem("w:outlineLvl", "", _outStream);
    }


    if (m_has_divId)
    {
        m_divId->toXmlElem("w:divId", "", _outStream);
    }


    if (m_has_cnfStyle)
    {
        m_cnfStyle->toXmlElem("w:cnfStyle", "", _outStream);
    }


    if (m_has_pPrChange)
    {
        m_pPrChange->toXmlElem("w:pPrChange", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_PPrGeneral& CT_PPrGeneral::default_instance()
{
    if (!CT_PPrGeneral::default_instance_)
    {
        CT_PPrGeneral::default_instance_ = new CT_PPrGeneral();
    }
    return *CT_PPrGeneral::default_instance_;
}

CT_PPrGeneral* CT_PPrGeneral::default_instance_ = NULL;

// CT_Control
CT_Control::CT_Control()
    :m_has_name_attr(false),
     m_name_attr(NULL),
     m_has_shapeid_attr(false),
     m_shapeid_attr(NULL),
     m_has_r_id_attr(false),
     m_r_id_attr(NULL)
{
}
CT_Control::~CT_Control()
{
    clear();
}
void CT_Control::clear()
{
    m_has_name_attr = false;

    if (m_name_attr)
    {
        delete m_name_attr;
        m_name_attr = NULL;
    }


    m_has_shapeid_attr = false;

    if (m_shapeid_attr)
    {
        delete m_shapeid_attr;
        m_shapeid_attr = NULL;
    }


    m_has_r_id_attr = false;

    if (m_r_id_attr)
    {
        delete m_r_id_attr;
        m_r_id_attr = NULL;
    }

}

void CT_Control::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_name_attr)
    {
        m_name_attr->toXmlAttr("w:name", _outStream);
    }



    if (m_has_shapeid_attr)
    {
        m_shapeid_attr->toXmlAttr("w:shapeid", _outStream);
    }



    if (m_has_r_id_attr)
    {
        m_r_id_attr->toXmlAttr("r:id", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_Control& CT_Control::default_instance()
{
    if (!CT_Control::default_instance_)
    {
        CT_Control::default_instance_ = new CT_Control();
    }
    return *CT_Control::default_instance_;
}

bool CT_Control::has_name_attr() const
{
    return m_has_name_attr;
}

void CT_Control::set_name_attr(const ns_s::ST_String& _name_attr)
{
    m_has_name_attr = true;
    m_name_attr = new ns_s::ST_String(_name_attr);
}

const ns_s::ST_String& CT_Control::get_name_attr() const
{
    if (m_name_attr)
    {
        return *m_name_attr;
    }
    return ns_s::ST_String::default_instance();
}

bool CT_Control::has_shapeid_attr() const
{
    return m_has_shapeid_attr;
}

void CT_Control::set_shapeid_attr(const ns_s::ST_String& _shapeid_attr)
{
    m_has_shapeid_attr = true;
    m_shapeid_attr = new ns_s::ST_String(_shapeid_attr);
}

const ns_s::ST_String& CT_Control::get_shapeid_attr() const
{
    if (m_shapeid_attr)
    {
        return *m_shapeid_attr;
    }
    return ns_s::ST_String::default_instance();
}

bool CT_Control::has_r_id_attr() const
{
    return m_has_r_id_attr;
}

void CT_Control::set_r_id_attr(const ns_r::ST_RelationshipId& _r_id_attr)
{
    m_has_r_id_attr = true;
    m_r_id_attr = new ns_r::ST_RelationshipId(_r_id_attr);
}

const ns_r::ST_RelationshipId& CT_Control::get_r_id_attr() const
{
    if (m_r_id_attr)
    {
        return *m_r_id_attr;
    }
    return ns_r::ST_RelationshipId::default_instance();
}

CT_Control* CT_Control::default_instance_ = NULL;

// CT_Background
CT_Background::CT_Background()
    :m_has_drawing(false),
     m_drawing(NULL),
     m_has_color_attr(false),
     m_color_attr(NULL),
     m_has_themeColor_attr(false),
     m_themeColor_attr(NULL),
     m_has_themeTint_attr(false),
     m_themeTint_attr(NULL),
     m_has_themeShade_attr(false),
     m_themeShade_attr(NULL)
{
}
CT_Background::~CT_Background()
{
    clear();
}
void CT_Background::append_v_any(ns_v::Element* _v_any)
{
    m_v_any_list.push_back(_v_any);
}

void CT_Background::append_o_any(ns_o::Element* _o_any)
{
    m_o_any_list.push_back(_o_any);
}

bool CT_Background::has_drawing() const
{
    return m_has_drawing;
}

CT_Drawing* CT_Background::mutable_drawing()
{
    m_has_drawing = true;
    if (!m_drawing)
    {
        m_drawing = new CT_Drawing();
    }
    return m_drawing;
}

const CT_Drawing& CT_Background::get_drawing() const
{
    if (m_drawing)
    {
        return *m_drawing;
    }
    return CT_Drawing::default_instance();
}

void CT_Background::clear()
{
    m_has_color_attr = false;

    if (m_color_attr)
    {
        delete m_color_attr;
        m_color_attr = NULL;
    }


    m_has_themeColor_attr = false;

    if (m_themeColor_attr)
    {
        delete m_themeColor_attr;
        m_themeColor_attr = NULL;
    }


    m_has_themeTint_attr = false;

    if (m_themeTint_attr)
    {
        delete m_themeTint_attr;
        m_themeTint_attr = NULL;
    }


    m_has_themeShade_attr = false;

    if (m_themeShade_attr)
    {
        delete m_themeShade_attr;
        m_themeShade_attr = NULL;
    }


    m_has_drawing = false;

    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }

}

void CT_Background::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_color_attr)
    {
        m_color_attr->toXmlAttr("w:color", _outStream);
    }



    if (m_has_themeColor_attr)
    {
        m_themeColor_attr->toXmlAttr("w:themeColor", _outStream);
    }



    if (m_has_themeTint_attr)
    {
        m_themeTint_attr->toXmlAttr("w:themeTint", _outStream);
    }



    if (m_has_themeShade_attr)
    {
        m_themeShade_attr->toXmlAttr("w:themeShade", _outStream);
    }

    _outStream << ">";

    {
        vector<ns_v::Element*>::const_iterator iter;
        for (iter = m_v_any_list.begin(); iter != m_v_any_list.end(); ++iter)
        {
            (*iter)->toXml(_outStream);
        }
    }

    {
        vector<ns_o::Element*>::const_iterator iter;
        for (iter = m_o_any_list.begin(); iter != m_o_any_list.end(); ++iter)
        {
            (*iter)->toXml(_outStream);
        }
    }


    if (m_has_drawing)
    {
        m_drawing->toXmlElem("w:drawing", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_Background& CT_Background::default_instance()
{
    if (!CT_Background::default_instance_)
    {
        CT_Background::default_instance_ = new CT_Background();
    }
    return *CT_Background::default_instance_;
}

bool CT_Background::has_color_attr() const
{
    return m_has_color_attr;
}

void CT_Background::set_color_attr(const ST_HexColor& _color_attr)
{
    m_has_color_attr = true;
    m_color_attr = new ST_HexColor(_color_attr);
}

const ST_HexColor& CT_Background::get_color_attr() const
{
    if (m_color_attr)
    {
        return *m_color_attr;
    }
    return ST_HexColor::default_instance();
}

bool CT_Background::has_themeColor_attr() const
{
    return m_has_themeColor_attr;
}

void CT_Background::set_themeColor_attr(const ST_ThemeColor& _themeColor_attr)
{
    m_has_themeColor_attr = true;
    m_themeColor_attr = new ST_ThemeColor(_themeColor_attr);
}

const ST_ThemeColor& CT_Background::get_themeColor_attr() const
{
    if (m_themeColor_attr)
    {
        return *m_themeColor_attr;
    }
    return ST_ThemeColor::default_instance();
}

bool CT_Background::has_themeTint_attr() const
{
    return m_has_themeTint_attr;
}

void CT_Background::set_themeTint_attr(const ST_UcharHexNumber& _themeTint_attr)
{
    m_has_themeTint_attr = true;
    m_themeTint_attr = new ST_UcharHexNumber(_themeTint_attr);
}

const ST_UcharHexNumber& CT_Background::get_themeTint_attr() const
{
    if (m_themeTint_attr)
    {
        return *m_themeTint_attr;
    }
    return ST_UcharHexNumber::default_instance();
}

bool CT_Background::has_themeShade_attr() const
{
    return m_has_themeShade_attr;
}

void CT_Background::set_themeShade_attr(const ST_UcharHexNumber& _themeShade_attr)
{
    m_has_themeShade_attr = true;
    m_themeShade_attr = new ST_UcharHexNumber(_themeShade_attr);
}

const ST_UcharHexNumber& CT_Background::get_themeShade_attr() const
{
    if (m_themeShade_attr)
    {
        return *m_themeShade_attr;
    }
    return ST_UcharHexNumber::default_instance();
}

CT_Background* CT_Background::default_instance_ = NULL;

// CT_Rel
CT_Rel::CT_Rel()
    :m_has_r_id_attr(false),
     m_r_id_attr(NULL)
{
}
CT_Rel::~CT_Rel()
{
    clear();
}
void CT_Rel::clear()
{
    m_has_r_id_attr = false;

    if (m_r_id_attr)
    {
        delete m_r_id_attr;
        m_r_id_attr = NULL;
    }

}

void CT_Rel::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_r_id_attr);
    if (m_has_r_id_attr)
    {
        m_r_id_attr->toXmlAttr("r:id", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_Rel& CT_Rel::default_instance()
{
    if (!CT_Rel::default_instance_)
    {
        CT_Rel::default_instance_ = new CT_Rel();
    }
    return *CT_Rel::default_instance_;
}

bool CT_Rel::has_r_id_attr() const
{
    return m_has_r_id_attr;
}

void CT_Rel::set_r_id_attr(const ns_r::ST_RelationshipId& _r_id_attr)
{
    m_has_r_id_attr = true;
    m_r_id_attr = new ns_r::ST_RelationshipId(_r_id_attr);
}

const ns_r::ST_RelationshipId& CT_Rel::get_r_id_attr() const
{
    if (m_r_id_attr)
    {
        return *m_r_id_attr;
    }
    return ns_r::ST_RelationshipId::default_instance();
}

CT_Rel* CT_Rel::default_instance_ = NULL;

// CT_Object
CT_Object::CT_Object()
    :m_has_drawing(false),
     m_drawing(NULL),
     m_has_control(false),
     m_control(NULL),
     m_has_objectLink(false),
     m_objectLink(NULL),
     m_has_objectEmbed(false),
     m_objectEmbed(NULL),
     m_has_movie(false),
     m_movie(NULL),
     m_has_dxaOrig_attr(false),
     m_dxaOrig_attr(NULL),
     m_has_dyaOrig_attr(false),
     m_dyaOrig_attr(NULL)
{
}
CT_Object::~CT_Object()
{
    clear();
}
void CT_Object::append_v_any(ns_v::Element* _v_any)
{
    m_v_any_list.push_back(_v_any);
}

void CT_Object::append_o_any(ns_o::Element* _o_any)
{
    m_o_any_list.push_back(_o_any);
}

bool CT_Object::has_drawing() const
{
    return m_has_drawing;
}

CT_Drawing* CT_Object::mutable_drawing()
{
    m_has_drawing = true;
    if (!m_drawing)
    {
        m_drawing = new CT_Drawing();
    }
    return m_drawing;
}

const CT_Drawing& CT_Object::get_drawing() const
{
    if (m_drawing)
    {
        return *m_drawing;
    }
    return CT_Drawing::default_instance();
}

bool CT_Object::has_control() const
{
    return m_has_control;
}

CT_Control* CT_Object::mutable_control()
{

    m_has_objectLink = false;

    if (m_objectLink)
    {
        delete m_objectLink;
        m_objectLink = NULL;
    }
    ;

    m_has_objectEmbed = false;

    if (m_objectEmbed)
    {
        delete m_objectEmbed;
        m_objectEmbed = NULL;
    }
    ;

    m_has_movie = false;

    if (m_movie)
    {
        delete m_movie;
        m_movie = NULL;
    }
    ;

    m_has_control = true;
    if (!m_control)
    {
        m_control = new CT_Control();
    }
    return m_control;
}

const CT_Control& CT_Object::get_control() const
{
    if (m_control)
    {
        return *m_control;
    }
    return CT_Control::default_instance();
}

bool CT_Object::has_objectLink() const
{
    return m_has_objectLink;
}

CT_ObjectLink* CT_Object::mutable_objectLink()
{

    m_has_control = false;

    if (m_control)
    {
        delete m_control;
        m_control = NULL;
    }
    ;

    m_has_objectEmbed = false;

    if (m_objectEmbed)
    {
        delete m_objectEmbed;
        m_objectEmbed = NULL;
    }
    ;

    m_has_movie = false;

    if (m_movie)
    {
        delete m_movie;
        m_movie = NULL;
    }
    ;

    m_has_objectLink = true;
    if (!m_objectLink)
    {
        m_objectLink = new CT_ObjectLink();
    }
    return m_objectLink;
}

const CT_ObjectLink& CT_Object::get_objectLink() const
{
    if (m_objectLink)
    {
        return *m_objectLink;
    }
    return CT_ObjectLink::default_instance();
}

bool CT_Object::has_objectEmbed() const
{
    return m_has_objectEmbed;
}

CT_ObjectEmbed* CT_Object::mutable_objectEmbed()
{

    m_has_control = false;

    if (m_control)
    {
        delete m_control;
        m_control = NULL;
    }
    ;

    m_has_objectLink = false;

    if (m_objectLink)
    {
        delete m_objectLink;
        m_objectLink = NULL;
    }
    ;

    m_has_movie = false;

    if (m_movie)
    {
        delete m_movie;
        m_movie = NULL;
    }
    ;

    m_has_objectEmbed = true;
    if (!m_objectEmbed)
    {
        m_objectEmbed = new CT_ObjectEmbed();
    }
    return m_objectEmbed;
}

const CT_ObjectEmbed& CT_Object::get_objectEmbed() const
{
    if (m_objectEmbed)
    {
        return *m_objectEmbed;
    }
    return CT_ObjectEmbed::default_instance();
}

bool CT_Object::has_movie() const
{
    return m_has_movie;
}

CT_Rel* CT_Object::mutable_movie()
{

    m_has_control = false;

    if (m_control)
    {
        delete m_control;
        m_control = NULL;
    }
    ;

    m_has_objectLink = false;

    if (m_objectLink)
    {
        delete m_objectLink;
        m_objectLink = NULL;
    }
    ;

    m_has_objectEmbed = false;

    if (m_objectEmbed)
    {
        delete m_objectEmbed;
        m_objectEmbed = NULL;
    }
    ;

    m_has_movie = true;
    if (!m_movie)
    {
        m_movie = new CT_Rel();
    }
    return m_movie;
}

const CT_Rel& CT_Object::get_movie() const
{
    if (m_movie)
    {
        return *m_movie;
    }
    return CT_Rel::default_instance();
}

void CT_Object::clear()
{
    m_has_dxaOrig_attr = false;

    if (m_dxaOrig_attr)
    {
        delete m_dxaOrig_attr;
        m_dxaOrig_attr = NULL;
    }


    m_has_dyaOrig_attr = false;

    if (m_dyaOrig_attr)
    {
        delete m_dyaOrig_attr;
        m_dyaOrig_attr = NULL;
    }


    m_has_drawing = false;

    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }


    m_has_control = false;

    if (m_control)
    {
        delete m_control;
        m_control = NULL;
    }


    m_has_objectLink = false;

    if (m_objectLink)
    {
        delete m_objectLink;
        m_objectLink = NULL;
    }


    m_has_objectEmbed = false;

    if (m_objectEmbed)
    {
        delete m_objectEmbed;
        m_objectEmbed = NULL;
    }


    m_has_movie = false;

    if (m_movie)
    {
        delete m_movie;
        m_movie = NULL;
    }

}

void CT_Object::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_dxaOrig_attr)
    {
        m_dxaOrig_attr->toXmlAttr("w:dxaOrig", _outStream);
    }



    if (m_has_dyaOrig_attr)
    {
        m_dyaOrig_attr->toXmlAttr("w:dyaOrig", _outStream);
    }

    _outStream << ">";

    {
        vector<ns_v::Element*>::const_iterator iter;
        for (iter = m_v_any_list.begin(); iter != m_v_any_list.end(); ++iter)
        {
            (*iter)->toXml(_outStream);
        }
    }

    {
        vector<ns_o::Element*>::const_iterator iter;
        for (iter = m_o_any_list.begin(); iter != m_o_any_list.end(); ++iter)
        {
            (*iter)->toXml(_outStream);
        }
    }


    if (m_has_drawing)
    {
        m_drawing->toXmlElem("w:drawing", "", _outStream);
    }

    {
        bool elemHasValueList[4] = {m_has_control, m_has_objectLink, m_has_objectEmbed, m_has_movie};
        int cnt = count(elemHasValueList, elemHasValueList + 4, true);
        assert(cnt == 0 || cnt == 1);
    }


    if (m_has_control)
    {
        m_control->toXmlElem("w:control", "", _outStream);
    }


    if (m_has_objectLink)
    {
        m_objectLink->toXmlElem("w:objectLink", "", _outStream);
    }


    if (m_has_objectEmbed)
    {
        m_objectEmbed->toXmlElem("w:objectEmbed", "", _outStream);
    }


    if (m_has_movie)
    {
        m_movie->toXmlElem("w:movie", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_Object& CT_Object::default_instance()
{
    if (!CT_Object::default_instance_)
    {
        CT_Object::default_instance_ = new CT_Object();
    }
    return *CT_Object::default_instance_;
}

bool CT_Object::has_dxaOrig_attr() const
{
    return m_has_dxaOrig_attr;
}

void CT_Object::set_dxaOrig_attr(const ns_s::ST_TwipsMeasure& _dxaOrig_attr)
{
    m_has_dxaOrig_attr = true;
    m_dxaOrig_attr = new ns_s::ST_TwipsMeasure(_dxaOrig_attr);
}

const ns_s::ST_TwipsMeasure& CT_Object::get_dxaOrig_attr() const
{
    if (m_dxaOrig_attr)
    {
        return *m_dxaOrig_attr;
    }
    return ns_s::ST_TwipsMeasure::default_instance();
}

bool CT_Object::has_dyaOrig_attr() const
{
    return m_has_dyaOrig_attr;
}

void CT_Object::set_dyaOrig_attr(const ns_s::ST_TwipsMeasure& _dyaOrig_attr)
{
    m_has_dyaOrig_attr = true;
    m_dyaOrig_attr = new ns_s::ST_TwipsMeasure(_dyaOrig_attr);
}

const ns_s::ST_TwipsMeasure& CT_Object::get_dyaOrig_attr() const
{
    if (m_dyaOrig_attr)
    {
        return *m_dyaOrig_attr;
    }
    return ns_s::ST_TwipsMeasure::default_instance();
}

CT_Object* CT_Object::default_instance_ = NULL;

// CT_Picture
CT_Picture::CT_Picture()
    :m_has_movie(false),
     m_movie(NULL),
     m_has_control(false),
     m_control(NULL)
{
}
CT_Picture::~CT_Picture()
{
    clear();
}
void CT_Picture::append_v_any(ns_v::Element* _v_any)
{
    m_v_any_list.push_back(_v_any);
}

void CT_Picture::append_o_any(ns_o::Element* _o_any)
{
    m_o_any_list.push_back(_o_any);
}

bool CT_Picture::has_movie() const
{
    return m_has_movie;
}

CT_Rel* CT_Picture::mutable_movie()
{
    m_has_movie = true;
    if (!m_movie)
    {
        m_movie = new CT_Rel();
    }
    return m_movie;
}

const CT_Rel& CT_Picture::get_movie() const
{
    if (m_movie)
    {
        return *m_movie;
    }
    return CT_Rel::default_instance();
}

bool CT_Picture::has_control() const
{
    return m_has_control;
}

CT_Control* CT_Picture::mutable_control()
{
    m_has_control = true;
    if (!m_control)
    {
        m_control = new CT_Control();
    }
    return m_control;
}

const CT_Control& CT_Picture::get_control() const
{
    if (m_control)
    {
        return *m_control;
    }
    return CT_Control::default_instance();
}

void CT_Picture::clear()
{
    m_has_movie = false;

    if (m_movie)
    {
        delete m_movie;
        m_movie = NULL;
    }


    m_has_control = false;

    if (m_control)
    {
        delete m_control;
        m_control = NULL;
    }

}

void CT_Picture::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";

    {
        vector<ns_v::Element*>::const_iterator iter;
        for (iter = m_v_any_list.begin(); iter != m_v_any_list.end(); ++iter)
        {
            (*iter)->toXml(_outStream);
        }
    }

    {
        vector<ns_o::Element*>::const_iterator iter;
        for (iter = m_o_any_list.begin(); iter != m_o_any_list.end(); ++iter)
        {
            (*iter)->toXml(_outStream);
        }
    }


    if (m_has_movie)
    {
        m_movie->toXmlElem("w:movie", "", _outStream);
    }


    if (m_has_control)
    {
        m_control->toXmlElem("w:control", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_Picture& CT_Picture::default_instance()
{
    if (!CT_Picture::default_instance_)
    {
        CT_Picture::default_instance_ = new CT_Picture();
    }
    return *CT_Picture::default_instance_;
}

CT_Picture* CT_Picture::default_instance_ = NULL;

// CT_ObjectEmbed
CT_ObjectEmbed::CT_ObjectEmbed()
    :m_has_drawAspect_attr(false),
     m_drawAspect_attr(NULL),
     m_has_r_id_attr(false),
     m_r_id_attr(NULL),
     m_has_progId_attr(false),
     m_progId_attr(NULL),
     m_has_shapeId_attr(false),
     m_shapeId_attr(NULL),
     m_has_fieldCodes_attr(false),
     m_fieldCodes_attr(NULL)
{
}
CT_ObjectEmbed::~CT_ObjectEmbed()
{
    clear();
}
void CT_ObjectEmbed::clear()
{
    m_has_drawAspect_attr = false;

    if (m_drawAspect_attr)
    {
        delete m_drawAspect_attr;
        m_drawAspect_attr = NULL;
    }


    m_has_r_id_attr = false;

    if (m_r_id_attr)
    {
        delete m_r_id_attr;
        m_r_id_attr = NULL;
    }


    m_has_progId_attr = false;

    if (m_progId_attr)
    {
        delete m_progId_attr;
        m_progId_attr = NULL;
    }


    m_has_shapeId_attr = false;

    if (m_shapeId_attr)
    {
        delete m_shapeId_attr;
        m_shapeId_attr = NULL;
    }


    m_has_fieldCodes_attr = false;

    if (m_fieldCodes_attr)
    {
        delete m_fieldCodes_attr;
        m_fieldCodes_attr = NULL;
    }

}

void CT_ObjectEmbed::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_drawAspect_attr)
    {
        m_drawAspect_attr->toXmlAttr("w:drawAspect", _outStream);
    }


    assert(m_has_r_id_attr);
    if (m_has_r_id_attr)
    {
        m_r_id_attr->toXmlAttr("r:id", _outStream);
    }



    if (m_has_progId_attr)
    {
        m_progId_attr->toXmlAttr("w:progId", _outStream);
    }



    if (m_has_shapeId_attr)
    {
        m_shapeId_attr->toXmlAttr("w:shapeId", _outStream);
    }



    if (m_has_fieldCodes_attr)
    {
        m_fieldCodes_attr->toXmlAttr("w:fieldCodes", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_ObjectEmbed& CT_ObjectEmbed::default_instance()
{
    if (!CT_ObjectEmbed::default_instance_)
    {
        CT_ObjectEmbed::default_instance_ = new CT_ObjectEmbed();
    }
    return *CT_ObjectEmbed::default_instance_;
}

bool CT_ObjectEmbed::has_drawAspect_attr() const
{
    return m_has_drawAspect_attr;
}

void CT_ObjectEmbed::set_drawAspect_attr(const ST_ObjectDrawAspect& _drawAspect_attr)
{
    m_has_drawAspect_attr = true;
    m_drawAspect_attr = new ST_ObjectDrawAspect(_drawAspect_attr);
}

const ST_ObjectDrawAspect& CT_ObjectEmbed::get_drawAspect_attr() const
{
    if (m_drawAspect_attr)
    {
        return *m_drawAspect_attr;
    }
    return ST_ObjectDrawAspect::default_instance();
}

bool CT_ObjectEmbed::has_r_id_attr() const
{
    return m_has_r_id_attr;
}

void CT_ObjectEmbed::set_r_id_attr(const ns_r::ST_RelationshipId& _r_id_attr)
{
    m_has_r_id_attr = true;
    m_r_id_attr = new ns_r::ST_RelationshipId(_r_id_attr);
}

const ns_r::ST_RelationshipId& CT_ObjectEmbed::get_r_id_attr() const
{
    if (m_r_id_attr)
    {
        return *m_r_id_attr;
    }
    return ns_r::ST_RelationshipId::default_instance();
}

bool CT_ObjectEmbed::has_progId_attr() const
{
    return m_has_progId_attr;
}

void CT_ObjectEmbed::set_progId_attr(const ns_s::ST_String& _progId_attr)
{
    m_has_progId_attr = true;
    m_progId_attr = new ns_s::ST_String(_progId_attr);
}

const ns_s::ST_String& CT_ObjectEmbed::get_progId_attr() const
{
    if (m_progId_attr)
    {
        return *m_progId_attr;
    }
    return ns_s::ST_String::default_instance();
}

bool CT_ObjectEmbed::has_shapeId_attr() const
{
    return m_has_shapeId_attr;
}

void CT_ObjectEmbed::set_shapeId_attr(const ns_s::ST_String& _shapeId_attr)
{
    m_has_shapeId_attr = true;
    m_shapeId_attr = new ns_s::ST_String(_shapeId_attr);
}

const ns_s::ST_String& CT_ObjectEmbed::get_shapeId_attr() const
{
    if (m_shapeId_attr)
    {
        return *m_shapeId_attr;
    }
    return ns_s::ST_String::default_instance();
}

bool CT_ObjectEmbed::has_fieldCodes_attr() const
{
    return m_has_fieldCodes_attr;
}

void CT_ObjectEmbed::set_fieldCodes_attr(const ns_s::ST_String& _fieldCodes_attr)
{
    m_has_fieldCodes_attr = true;
    m_fieldCodes_attr = new ns_s::ST_String(_fieldCodes_attr);
}

const ns_s::ST_String& CT_ObjectEmbed::get_fieldCodes_attr() const
{
    if (m_fieldCodes_attr)
    {
        return *m_fieldCodes_attr;
    }
    return ns_s::ST_String::default_instance();
}

CT_ObjectEmbed* CT_ObjectEmbed::default_instance_ = NULL;

// CT_ObjectLink
CT_ObjectLink::CT_ObjectLink()
    :m_has_drawAspect_attr(false),
     m_drawAspect_attr(NULL),
     m_has_r_id_attr(false),
     m_r_id_attr(NULL),
     m_has_progId_attr(false),
     m_progId_attr(NULL),
     m_has_shapeId_attr(false),
     m_shapeId_attr(NULL),
     m_has_fieldCodes_attr(false),
     m_fieldCodes_attr(NULL),
     m_has_updateMode_attr(false),
     m_updateMode_attr(NULL),
     m_has_lockedField_attr(false),
     m_lockedField_attr(NULL)
{
}
CT_ObjectLink::~CT_ObjectLink()
{
    clear();
}
void CT_ObjectLink::clear()
{
    m_has_drawAspect_attr = false;

    if (m_drawAspect_attr)
    {
        delete m_drawAspect_attr;
        m_drawAspect_attr = NULL;
    }


    m_has_r_id_attr = false;

    if (m_r_id_attr)
    {
        delete m_r_id_attr;
        m_r_id_attr = NULL;
    }


    m_has_progId_attr = false;

    if (m_progId_attr)
    {
        delete m_progId_attr;
        m_progId_attr = NULL;
    }


    m_has_shapeId_attr = false;

    if (m_shapeId_attr)
    {
        delete m_shapeId_attr;
        m_shapeId_attr = NULL;
    }


    m_has_fieldCodes_attr = false;

    if (m_fieldCodes_attr)
    {
        delete m_fieldCodes_attr;
        m_fieldCodes_attr = NULL;
    }


    m_has_updateMode_attr = false;

    if (m_updateMode_attr)
    {
        delete m_updateMode_attr;
        m_updateMode_attr = NULL;
    }


    m_has_lockedField_attr = false;

    if (m_lockedField_attr)
    {
        delete m_lockedField_attr;
        m_lockedField_attr = NULL;
    }

}

void CT_ObjectLink::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_drawAspect_attr)
    {
        m_drawAspect_attr->toXmlAttr("w:drawAspect", _outStream);
    }


    assert(m_has_r_id_attr);
    if (m_has_r_id_attr)
    {
        m_r_id_attr->toXmlAttr("r:id", _outStream);
    }



    if (m_has_progId_attr)
    {
        m_progId_attr->toXmlAttr("w:progId", _outStream);
    }



    if (m_has_shapeId_attr)
    {
        m_shapeId_attr->toXmlAttr("w:shapeId", _outStream);
    }



    if (m_has_fieldCodes_attr)
    {
        m_fieldCodes_attr->toXmlAttr("w:fieldCodes", _outStream);
    }


    assert(m_has_updateMode_attr);
    if (m_has_updateMode_attr)
    {
        m_updateMode_attr->toXmlAttr("w:updateMode", _outStream);
    }



    if (m_has_lockedField_attr)
    {
        m_lockedField_attr->toXmlAttr("w:lockedField", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_ObjectLink& CT_ObjectLink::default_instance()
{
    if (!CT_ObjectLink::default_instance_)
    {
        CT_ObjectLink::default_instance_ = new CT_ObjectLink();
    }
    return *CT_ObjectLink::default_instance_;
}

bool CT_ObjectLink::has_drawAspect_attr() const
{
    return m_has_drawAspect_attr;
}

void CT_ObjectLink::set_drawAspect_attr(const ST_ObjectDrawAspect& _drawAspect_attr)
{
    m_has_drawAspect_attr = true;
    m_drawAspect_attr = new ST_ObjectDrawAspect(_drawAspect_attr);
}

const ST_ObjectDrawAspect& CT_ObjectLink::get_drawAspect_attr() const
{
    if (m_drawAspect_attr)
    {
        return *m_drawAspect_attr;
    }
    return ST_ObjectDrawAspect::default_instance();
}

bool CT_ObjectLink::has_r_id_attr() const
{
    return m_has_r_id_attr;
}

void CT_ObjectLink::set_r_id_attr(const ns_r::ST_RelationshipId& _r_id_attr)
{
    m_has_r_id_attr = true;
    m_r_id_attr = new ns_r::ST_RelationshipId(_r_id_attr);
}

const ns_r::ST_RelationshipId& CT_ObjectLink::get_r_id_attr() const
{
    if (m_r_id_attr)
    {
        return *m_r_id_attr;
    }
    return ns_r::ST_RelationshipId::default_instance();
}

bool CT_ObjectLink::has_progId_attr() const
{
    return m_has_progId_attr;
}

void CT_ObjectLink::set_progId_attr(const ns_s::ST_String& _progId_attr)
{
    m_has_progId_attr = true;
    m_progId_attr = new ns_s::ST_String(_progId_attr);
}

const ns_s::ST_String& CT_ObjectLink::get_progId_attr() const
{
    if (m_progId_attr)
    {
        return *m_progId_attr;
    }
    return ns_s::ST_String::default_instance();
}

bool CT_ObjectLink::has_shapeId_attr() const
{
    return m_has_shapeId_attr;
}

void CT_ObjectLink::set_shapeId_attr(const ns_s::ST_String& _shapeId_attr)
{
    m_has_shapeId_attr = true;
    m_shapeId_attr = new ns_s::ST_String(_shapeId_attr);
}

const ns_s::ST_String& CT_ObjectLink::get_shapeId_attr() const
{
    if (m_shapeId_attr)
    {
        return *m_shapeId_attr;
    }
    return ns_s::ST_String::default_instance();
}

bool CT_ObjectLink::has_fieldCodes_attr() const
{
    return m_has_fieldCodes_attr;
}

void CT_ObjectLink::set_fieldCodes_attr(const ns_s::ST_String& _fieldCodes_attr)
{
    m_has_fieldCodes_attr = true;
    m_fieldCodes_attr = new ns_s::ST_String(_fieldCodes_attr);
}

const ns_s::ST_String& CT_ObjectLink::get_fieldCodes_attr() const
{
    if (m_fieldCodes_attr)
    {
        return *m_fieldCodes_attr;
    }
    return ns_s::ST_String::default_instance();
}

bool CT_ObjectLink::has_updateMode_attr() const
{
    return m_has_updateMode_attr;
}

void CT_ObjectLink::set_updateMode_attr(const ST_ObjectUpdateMode& _updateMode_attr)
{
    m_has_updateMode_attr = true;
    m_updateMode_attr = new ST_ObjectUpdateMode(_updateMode_attr);
}

const ST_ObjectUpdateMode& CT_ObjectLink::get_updateMode_attr() const
{
    if (m_updateMode_attr)
    {
        return *m_updateMode_attr;
    }
    return ST_ObjectUpdateMode::default_instance();
}

bool CT_ObjectLink::has_lockedField_attr() const
{
    return m_has_lockedField_attr;
}

void CT_ObjectLink::set_lockedField_attr(const ns_s::ST_OnOff& _lockedField_attr)
{
    m_has_lockedField_attr = true;
    m_lockedField_attr = new ns_s::ST_OnOff(_lockedField_attr);
}

const ns_s::ST_OnOff& CT_ObjectLink::get_lockedField_attr() const
{
    if (m_lockedField_attr)
    {
        return *m_lockedField_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

CT_ObjectLink* CT_ObjectLink::default_instance_ = NULL;

// CT_Drawing
CT_Drawing::CT_Drawing()

{
}
CT_Drawing::~CT_Drawing()
{
    clear();
}
ns_wp::CT_Anchor* CT_Drawing::add_wp_anchor()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    ns_wp::CT_Anchor* pNewChild = pChildGroup->mutable_wp_anchor();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

ns_wp::CT_Inline* CT_Drawing::add_wp_inline()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    ns_wp::CT_Inline* pNewChild = pChildGroup->mutable_wp_inline();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

void CT_Drawing::clear()
{
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
}

void CT_Drawing::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";

    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_wp_anchor())
            {
                (*iter)->get_wp_anchor().toXmlElem("wp:anchor", "", _outStream);
            }


            else if ((*iter)->has_wp_inline())
            {
                (*iter)->get_wp_inline().toXmlElem("wp:inline", "", _outStream);
            }


        }
    }

    _outStream << "</" << _elemName << ">";
}

const CT_Drawing& CT_Drawing::default_instance()
{
    if (!CT_Drawing::default_instance_)
    {
        CT_Drawing::default_instance_ = new CT_Drawing();
    }
    return *CT_Drawing::default_instance_;
}


// CT_Drawing::ChildGroup_1
CT_Drawing::ChildGroup_1::ChildGroup_1()
    :m_has_wp_anchor(false),
     m_wp_anchor(NULL),
     m_has_wp_inline(false),
     m_wp_inline(NULL)
{
}
bool CT_Drawing::ChildGroup_1::has_wp_anchor() const
{
    return m_has_wp_anchor;
}

ns_wp::CT_Anchor* CT_Drawing::ChildGroup_1::mutable_wp_anchor()
{

    m_has_wp_inline = false;

    if (m_wp_inline)
    {
        delete m_wp_inline;
        m_wp_inline = NULL;
    }
    ;

    m_has_wp_anchor = true;
    if (!m_wp_anchor)
    {
        m_wp_anchor = new ns_wp::CT_Anchor();
    }
    return m_wp_anchor;
}

const ns_wp::CT_Anchor& CT_Drawing::ChildGroup_1::get_wp_anchor() const
{
    if (m_wp_anchor)
    {
        return *m_wp_anchor;
    }
    return ns_wp::CT_Anchor::default_instance();
}

bool CT_Drawing::ChildGroup_1::has_wp_inline() const
{
    return m_has_wp_inline;
}

ns_wp::CT_Inline* CT_Drawing::ChildGroup_1::mutable_wp_inline()
{

    m_has_wp_anchor = false;

    if (m_wp_anchor)
    {
        delete m_wp_anchor;
        m_wp_anchor = NULL;
    }
    ;

    m_has_wp_inline = true;
    if (!m_wp_inline)
    {
        m_wp_inline = new ns_wp::CT_Inline();
    }
    return m_wp_inline;
}

const ns_wp::CT_Inline& CT_Drawing::ChildGroup_1::get_wp_inline() const
{
    if (m_wp_inline)
    {
        return *m_wp_inline;
    }
    return ns_wp::CT_Inline::default_instance();
}

CT_Drawing* CT_Drawing::default_instance_ = NULL;

// CT_SimpleField
CT_SimpleField::CT_SimpleField()
    :m_has_fldData(false),
     m_fldData(NULL),
     m_has_instr_attr(false),
     m_instr_attr(NULL),
     m_has_fldLock_attr(false),
     m_fldLock_attr(NULL),
     m_has_dirty_attr(false),
     m_dirty_attr(NULL)
{
}
CT_SimpleField::~CT_SimpleField()
{
    clear();
}
bool CT_SimpleField::has_fldData() const
{
    return m_has_fldData;
}

CT_Text* CT_SimpleField::mutable_fldData()
{
    m_has_fldData = true;
    if (!m_fldData)
    {
        m_fldData = new CT_Text();
    }
    return m_fldData;
}

const CT_Text& CT_SimpleField::get_fldData() const
{
    if (m_fldData)
    {
        return *m_fldData;
    }
    return CT_Text::default_instance();
}

CT_CustomXmlRun* CT_SimpleField::add_customXml()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_CustomXmlRun* pNewChild = pChildGroup->mutable_customXml();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_SmartTagRun* CT_SimpleField::add_smartTag()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_SmartTagRun* pNewChild = pChildGroup->mutable_smartTag();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_SdtRun* CT_SimpleField::add_sdt()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_SdtRun* pNewChild = pChildGroup->mutable_sdt();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_DirContentRun* CT_SimpleField::add_dir()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_DirContentRun* pNewChild = pChildGroup->mutable_dir();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_BdoContentRun* CT_SimpleField::add_bdo()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_BdoContentRun* pNewChild = pChildGroup->mutable_bdo();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_R* CT_SimpleField::add_r()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_R* pNewChild = pChildGroup->mutable_r();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_ProofErr* CT_SimpleField::add_proofErr()
{
    ChildGroup_2 *pChildGroup = new ChildGroup_2();
    CT_ProofErr* pNewChild = pChildGroup->mutable_proofErr();
    m_childGroupList_2.push_back(pChildGroup);
    return pNewChild;
}

CT_PermStart* CT_SimpleField::add_permStart()
{
    ChildGroup_2 *pChildGroup = new ChildGroup_2();
    CT_PermStart* pNewChild = pChildGroup->mutable_permStart();
    m_childGroupList_2.push_back(pChildGroup);
    return pNewChild;
}

CT_Perm* CT_SimpleField::add_permEnd()
{
    ChildGroup_2 *pChildGroup = new ChildGroup_2();
    CT_Perm* pNewChild = pChildGroup->mutable_permEnd();
    m_childGroupList_2.push_back(pChildGroup);
    return pNewChild;
}

CT_Bookmark* CT_SimpleField::add_bookmarkStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_Bookmark* pNewChild = pChildGroup->mutable_bookmarkStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MarkupRange* CT_SimpleField::add_bookmarkEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MarkupRange* pNewChild = pChildGroup->mutable_bookmarkEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MoveBookmark* CT_SimpleField::add_moveFromRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MoveBookmark* pNewChild = pChildGroup->mutable_moveFromRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MarkupRange* CT_SimpleField::add_moveFromRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MarkupRange* pNewChild = pChildGroup->mutable_moveFromRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MoveBookmark* CT_SimpleField::add_moveToRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MoveBookmark* pNewChild = pChildGroup->mutable_moveToRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MarkupRange* CT_SimpleField::add_moveToRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MarkupRange* pNewChild = pChildGroup->mutable_moveToRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MarkupRange* CT_SimpleField::add_commentRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MarkupRange* pNewChild = pChildGroup->mutable_commentRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MarkupRange* CT_SimpleField::add_commentRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MarkupRange* pNewChild = pChildGroup->mutable_commentRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_TrackChange* CT_SimpleField::add_customXmlInsRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_TrackChange* pNewChild = pChildGroup->mutable_customXmlInsRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_Markup* CT_SimpleField::add_customXmlInsRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_Markup* pNewChild = pChildGroup->mutable_customXmlInsRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_TrackChange* CT_SimpleField::add_customXmlDelRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_TrackChange* pNewChild = pChildGroup->mutable_customXmlDelRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_Markup* CT_SimpleField::add_customXmlDelRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_Markup* pNewChild = pChildGroup->mutable_customXmlDelRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_TrackChange* CT_SimpleField::add_customXmlMoveFromRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_TrackChange* pNewChild = pChildGroup->mutable_customXmlMoveFromRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_Markup* CT_SimpleField::add_customXmlMoveFromRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_Markup* pNewChild = pChildGroup->mutable_customXmlMoveFromRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_TrackChange* CT_SimpleField::add_customXmlMoveToRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_TrackChange* pNewChild = pChildGroup->mutable_customXmlMoveToRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_Markup* CT_SimpleField::add_customXmlMoveToRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_Markup* pNewChild = pChildGroup->mutable_customXmlMoveToRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_RunTrackChange* CT_SimpleField::add_ins()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_RunTrackChange* pNewChild = pChildGroup->mutable_ins();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_RunTrackChange* CT_SimpleField::add_del()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_RunTrackChange* pNewChild = pChildGroup->mutable_del();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_RunTrackChange* CT_SimpleField::add_moveFrom()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_RunTrackChange* pNewChild = pChildGroup->mutable_moveFrom();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_RunTrackChange* CT_SimpleField::add_moveTo()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_RunTrackChange* pNewChild = pChildGroup->mutable_moveTo();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

ns_m::CT_OMathPara* CT_SimpleField::add_m_oMathPara()
{
    ChildGroup_4 *pChildGroup = new ChildGroup_4();
    ns_m::CT_OMathPara* pNewChild = pChildGroup->mutable_m_oMathPara();
    m_childGroupList_4.push_back(pChildGroup);
    return pNewChild;
}

ns_m::CT_OMath* CT_SimpleField::add_m_oMath()
{
    ChildGroup_4 *pChildGroup = new ChildGroup_4();
    ns_m::CT_OMath* pNewChild = pChildGroup->mutable_m_oMath();
    m_childGroupList_4.push_back(pChildGroup);
    return pNewChild;
}

CT_SimpleField* CT_SimpleField::add_fldSimple()
{
    ChildGroup_4 *pChildGroup = new ChildGroup_4();
    CT_SimpleField* pNewChild = pChildGroup->mutable_fldSimple();
    m_childGroupList_4.push_back(pChildGroup);
    return pNewChild;
}

CT_Hyperlink* CT_SimpleField::add_hyperlink()
{
    ChildGroup_4 *pChildGroup = new ChildGroup_4();
    CT_Hyperlink* pNewChild = pChildGroup->mutable_hyperlink();
    m_childGroupList_4.push_back(pChildGroup);
    return pNewChild;
}

CT_Rel* CT_SimpleField::add_subDoc()
{
    ChildGroup_4 *pChildGroup = new ChildGroup_4();
    CT_Rel* pNewChild = pChildGroup->mutable_subDoc();
    m_childGroupList_4.push_back(pChildGroup);
    return pNewChild;
}

void CT_SimpleField::clear()
{
    m_has_instr_attr = false;

    if (m_instr_attr)
    {
        delete m_instr_attr;
        m_instr_attr = NULL;
    }


    m_has_fldLock_attr = false;

    if (m_fldLock_attr)
    {
        delete m_fldLock_attr;
        m_fldLock_attr = NULL;
    }


    m_has_dirty_attr = false;

    if (m_dirty_attr)
    {
        delete m_dirty_attr;
        m_dirty_attr = NULL;
    }


    m_has_fldData = false;

    if (m_fldData)
    {
        delete m_fldData;
        m_fldData = NULL;
    }


    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }

    {
        vector<ChildGroup_2*>::iterator iter;
        for (iter = m_childGroupList_2.begin(); iter != m_childGroupList_2.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_2.clear();
    }

    {
        vector<ChildGroup_3*>::iterator iter;
        for (iter = m_childGroupList_3.begin(); iter != m_childGroupList_3.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_3.clear();
    }

    {
        vector<ChildGroup_4*>::iterator iter;
        for (iter = m_childGroupList_4.begin(); iter != m_childGroupList_4.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_4.clear();
    }
}

void CT_SimpleField::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_instr_attr);
    if (m_has_instr_attr)
    {
        m_instr_attr->toXmlAttr("w:instr", _outStream);
    }



    if (m_has_fldLock_attr)
    {
        m_fldLock_attr->toXmlAttr("w:fldLock", _outStream);
    }



    if (m_has_dirty_attr)
    {
        m_dirty_attr->toXmlAttr("w:dirty", _outStream);
    }

    _outStream << ">";


    if (m_has_fldData)
    {
        m_fldData->toXmlElem("w:fldData", "", _outStream);
    }

    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_customXml())
            {
                (*iter)->get_customXml().toXmlElem("w:customXml", "", _outStream);
            }


            else if ((*iter)->has_smartTag())
            {
                (*iter)->get_smartTag().toXmlElem("w:smartTag", "", _outStream);
            }


            else if ((*iter)->has_sdt())
            {
                (*iter)->get_sdt().toXmlElem("w:sdt", "", _outStream);
            }


            else if ((*iter)->has_dir())
            {
                (*iter)->get_dir().toXmlElem("w:dir", "", _outStream);
            }


            else if ((*iter)->has_bdo())
            {
                (*iter)->get_bdo().toXmlElem("w:bdo", "", _outStream);
            }


            else if ((*iter)->has_r())
            {
                (*iter)->get_r().toXmlElem("w:r", "", _outStream);
            }


        }
    }

    {
        vector<ChildGroup_2*>::const_iterator iter;
        for (iter = m_childGroupList_2.begin(); iter != m_childGroupList_2.end(); ++iter)
        {
            if ((*iter)->has_proofErr())
            {
                (*iter)->get_proofErr().toXmlElem("w:proofErr", "", _outStream);
            }


            else if ((*iter)->has_permStart())
            {
                (*iter)->get_permStart().toXmlElem("w:permStart", "", _outStream);
            }


            else if ((*iter)->has_permEnd())
            {
                (*iter)->get_permEnd().toXmlElem("w:permEnd", "", _outStream);
            }


        }
    }

    {
        vector<ChildGroup_3*>::const_iterator iter;
        for (iter = m_childGroupList_3.begin(); iter != m_childGroupList_3.end(); ++iter)
        {
            if ((*iter)->has_bookmarkStart())
            {
                (*iter)->get_bookmarkStart().toXmlElem("w:bookmarkStart", "", _outStream);
            }


            else if ((*iter)->has_bookmarkEnd())
            {
                (*iter)->get_bookmarkEnd().toXmlElem("w:bookmarkEnd", "", _outStream);
            }


            else if ((*iter)->has_moveFromRangeStart())
            {
                (*iter)->get_moveFromRangeStart().toXmlElem("w:moveFromRangeStart", "", _outStream);
            }


            else if ((*iter)->has_moveFromRangeEnd())
            {
                (*iter)->get_moveFromRangeEnd().toXmlElem("w:moveFromRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_moveToRangeStart())
            {
                (*iter)->get_moveToRangeStart().toXmlElem("w:moveToRangeStart", "", _outStream);
            }


            else if ((*iter)->has_moveToRangeEnd())
            {
                (*iter)->get_moveToRangeEnd().toXmlElem("w:moveToRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_commentRangeStart())
            {
                (*iter)->get_commentRangeStart().toXmlElem("w:commentRangeStart", "", _outStream);
            }


            else if ((*iter)->has_commentRangeEnd())
            {
                (*iter)->get_commentRangeEnd().toXmlElem("w:commentRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_customXmlInsRangeStart())
            {
                (*iter)->get_customXmlInsRangeStart().toXmlElem("w:customXmlInsRangeStart", "", _outStream);
            }


            else if ((*iter)->has_customXmlInsRangeEnd())
            {
                (*iter)->get_customXmlInsRangeEnd().toXmlElem("w:customXmlInsRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_customXmlDelRangeStart())
            {
                (*iter)->get_customXmlDelRangeStart().toXmlElem("w:customXmlDelRangeStart", "", _outStream);
            }


            else if ((*iter)->has_customXmlDelRangeEnd())
            {
                (*iter)->get_customXmlDelRangeEnd().toXmlElem("w:customXmlDelRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_customXmlMoveFromRangeStart())
            {
                (*iter)->get_customXmlMoveFromRangeStart().toXmlElem("w:customXmlMoveFromRangeStart", "", _outStream);
            }


            else if ((*iter)->has_customXmlMoveFromRangeEnd())
            {
                (*iter)->get_customXmlMoveFromRangeEnd().toXmlElem("w:customXmlMoveFromRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_customXmlMoveToRangeStart())
            {
                (*iter)->get_customXmlMoveToRangeStart().toXmlElem("w:customXmlMoveToRangeStart", "", _outStream);
            }


            else if ((*iter)->has_customXmlMoveToRangeEnd())
            {
                (*iter)->get_customXmlMoveToRangeEnd().toXmlElem("w:customXmlMoveToRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_ins())
            {
                (*iter)->get_ins().toXmlElem("w:ins", "", _outStream);
            }


            else if ((*iter)->has_del())
            {
                (*iter)->get_del().toXmlElem("w:del", "", _outStream);
            }


            else if ((*iter)->has_moveFrom())
            {
                (*iter)->get_moveFrom().toXmlElem("w:moveFrom", "", _outStream);
            }


            else if ((*iter)->has_moveTo())
            {
                (*iter)->get_moveTo().toXmlElem("w:moveTo", "", _outStream);
            }


        }
    }

    {
        vector<ChildGroup_4*>::const_iterator iter;
        for (iter = m_childGroupList_4.begin(); iter != m_childGroupList_4.end(); ++iter)
        {
            if ((*iter)->has_m_oMathPara())
            {
                (*iter)->get_m_oMathPara().toXmlElem("m:oMathPara", "", _outStream);
            }


            else if ((*iter)->has_m_oMath())
            {
                (*iter)->get_m_oMath().toXmlElem("m:oMath", "", _outStream);
            }


            else if ((*iter)->has_fldSimple())
            {
                (*iter)->get_fldSimple().toXmlElem("w:fldSimple", "", _outStream);
            }


            else if ((*iter)->has_hyperlink())
            {
                (*iter)->get_hyperlink().toXmlElem("w:hyperlink", "", _outStream);
            }


            else if ((*iter)->has_subDoc())
            {
                (*iter)->get_subDoc().toXmlElem("w:subDoc", "", _outStream);
            }


        }
    }

    _outStream << "</" << _elemName << ">";
}

const CT_SimpleField& CT_SimpleField::default_instance()
{
    if (!CT_SimpleField::default_instance_)
    {
        CT_SimpleField::default_instance_ = new CT_SimpleField();
    }
    return *CT_SimpleField::default_instance_;
}

bool CT_SimpleField::has_instr_attr() const
{
    return m_has_instr_attr;
}

void CT_SimpleField::set_instr_attr(const ns_s::ST_String& _instr_attr)
{
    m_has_instr_attr = true;
    m_instr_attr = new ns_s::ST_String(_instr_attr);
}

const ns_s::ST_String& CT_SimpleField::get_instr_attr() const
{
    if (m_instr_attr)
    {
        return *m_instr_attr;
    }
    return ns_s::ST_String::default_instance();
}

bool CT_SimpleField::has_fldLock_attr() const
{
    return m_has_fldLock_attr;
}

void CT_SimpleField::set_fldLock_attr(const ns_s::ST_OnOff& _fldLock_attr)
{
    m_has_fldLock_attr = true;
    m_fldLock_attr = new ns_s::ST_OnOff(_fldLock_attr);
}

const ns_s::ST_OnOff& CT_SimpleField::get_fldLock_attr() const
{
    if (m_fldLock_attr)
    {
        return *m_fldLock_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

bool CT_SimpleField::has_dirty_attr() const
{
    return m_has_dirty_attr;
}

void CT_SimpleField::set_dirty_attr(const ns_s::ST_OnOff& _dirty_attr)
{
    m_has_dirty_attr = true;
    m_dirty_attr = new ns_s::ST_OnOff(_dirty_attr);
}

const ns_s::ST_OnOff& CT_SimpleField::get_dirty_attr() const
{
    if (m_dirty_attr)
    {
        return *m_dirty_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}


// CT_SimpleField::ChildGroup_1
CT_SimpleField::ChildGroup_1::ChildGroup_1()
    :m_has_customXml(false),
     m_customXml(NULL),
     m_has_smartTag(false),
     m_smartTag(NULL),
     m_has_sdt(false),
     m_sdt(NULL),
     m_has_dir(false),
     m_dir(NULL),
     m_has_bdo(false),
     m_bdo(NULL),
     m_has_r(false),
     m_r(NULL)
{
}
bool CT_SimpleField::ChildGroup_1::has_customXml() const
{
    return m_has_customXml;
}

CT_CustomXmlRun* CT_SimpleField::ChildGroup_1::mutable_customXml()
{

    m_has_smartTag = false;

    if (m_smartTag)
    {
        delete m_smartTag;
        m_smartTag = NULL;
    }
    ;

    m_has_sdt = false;

    if (m_sdt)
    {
        delete m_sdt;
        m_sdt = NULL;
    }
    ;

    m_has_dir = false;

    if (m_dir)
    {
        delete m_dir;
        m_dir = NULL;
    }
    ;

    m_has_bdo = false;

    if (m_bdo)
    {
        delete m_bdo;
        m_bdo = NULL;
    }
    ;

    m_has_r = false;

    if (m_r)
    {
        delete m_r;
        m_r = NULL;
    }
    ;

    m_has_customXml = true;
    if (!m_customXml)
    {
        m_customXml = new CT_CustomXmlRun();
    }
    return m_customXml;
}

const CT_CustomXmlRun& CT_SimpleField::ChildGroup_1::get_customXml() const
{
    if (m_customXml)
    {
        return *m_customXml;
    }
    return CT_CustomXmlRun::default_instance();
}

bool CT_SimpleField::ChildGroup_1::has_smartTag() const
{
    return m_has_smartTag;
}

CT_SmartTagRun* CT_SimpleField::ChildGroup_1::mutable_smartTag()
{

    m_has_customXml = false;

    if (m_customXml)
    {
        delete m_customXml;
        m_customXml = NULL;
    }
    ;

    m_has_sdt = false;

    if (m_sdt)
    {
        delete m_sdt;
        m_sdt = NULL;
    }
    ;

    m_has_dir = false;

    if (m_dir)
    {
        delete m_dir;
        m_dir = NULL;
    }
    ;

    m_has_bdo = false;

    if (m_bdo)
    {
        delete m_bdo;
        m_bdo = NULL;
    }
    ;

    m_has_r = false;

    if (m_r)
    {
        delete m_r;
        m_r = NULL;
    }
    ;

    m_has_smartTag = true;
    if (!m_smartTag)
    {
        m_smartTag = new CT_SmartTagRun();
    }
    return m_smartTag;
}

const CT_SmartTagRun& CT_SimpleField::ChildGroup_1::get_smartTag() const
{
    if (m_smartTag)
    {
        return *m_smartTag;
    }
    return CT_SmartTagRun::default_instance();
}

bool CT_SimpleField::ChildGroup_1::has_sdt() const
{
    return m_has_sdt;
}

CT_SdtRun* CT_SimpleField::ChildGroup_1::mutable_sdt()
{

    m_has_customXml = false;

    if (m_customXml)
    {
        delete m_customXml;
        m_customXml = NULL;
    }
    ;

    m_has_smartTag = false;

    if (m_smartTag)
    {
        delete m_smartTag;
        m_smartTag = NULL;
    }
    ;

    m_has_dir = false;

    if (m_dir)
    {
        delete m_dir;
        m_dir = NULL;
    }
    ;

    m_has_bdo = false;

    if (m_bdo)
    {
        delete m_bdo;
        m_bdo = NULL;
    }
    ;

    m_has_r = false;

    if (m_r)
    {
        delete m_r;
        m_r = NULL;
    }
    ;

    m_has_sdt = true;
    if (!m_sdt)
    {
        m_sdt = new CT_SdtRun();
    }
    return m_sdt;
}

const CT_SdtRun& CT_SimpleField::ChildGroup_1::get_sdt() const
{
    if (m_sdt)
    {
        return *m_sdt;
    }
    return CT_SdtRun::default_instance();
}

bool CT_SimpleField::ChildGroup_1::has_dir() const
{
    return m_has_dir;
}

CT_DirContentRun* CT_SimpleField::ChildGroup_1::mutable_dir()
{

    m_has_customXml = false;

    if (m_customXml)
    {
        delete m_customXml;
        m_customXml = NULL;
    }
    ;

    m_has_smartTag = false;

    if (m_smartTag)
    {
        delete m_smartTag;
        m_smartTag = NULL;
    }
    ;

    m_has_sdt = false;

    if (m_sdt)
    {
        delete m_sdt;
        m_sdt = NULL;
    }
    ;

    m_has_bdo = false;

    if (m_bdo)
    {
        delete m_bdo;
        m_bdo = NULL;
    }
    ;

    m_has_r = false;

    if (m_r)
    {
        delete m_r;
        m_r = NULL;
    }
    ;

    m_has_dir = true;
    if (!m_dir)
    {
        m_dir = new CT_DirContentRun();
    }
    return m_dir;
}

const CT_DirContentRun& CT_SimpleField::ChildGroup_1::get_dir() const
{
    if (m_dir)
    {
        return *m_dir;
    }
    return CT_DirContentRun::default_instance();
}

bool CT_SimpleField::ChildGroup_1::has_bdo() const
{
    return m_has_bdo;
}

CT_BdoContentRun* CT_SimpleField::ChildGroup_1::mutable_bdo()
{

    m_has_customXml = false;

    if (m_customXml)
    {
        delete m_customXml;
        m_customXml = NULL;
    }
    ;

    m_has_smartTag = false;

    if (m_smartTag)
    {
        delete m_smartTag;
        m_smartTag = NULL;
    }
    ;

    m_has_sdt = false;

    if (m_sdt)
    {
        delete m_sdt;
        m_sdt = NULL;
    }
    ;

    m_has_dir = false;

    if (m_dir)
    {
        delete m_dir;
        m_dir = NULL;
    }
    ;

    m_has_r = false;

    if (m_r)
    {
        delete m_r;
        m_r = NULL;
    }
    ;

    m_has_bdo = true;
    if (!m_bdo)
    {
        m_bdo = new CT_BdoContentRun();
    }
    return m_bdo;
}

const CT_BdoContentRun& CT_SimpleField::ChildGroup_1::get_bdo() const
{
    if (m_bdo)
    {
        return *m_bdo;
    }
    return CT_BdoContentRun::default_instance();
}

bool CT_SimpleField::ChildGroup_1::has_r() const
{
    return m_has_r;
}

CT_R* CT_SimpleField::ChildGroup_1::mutable_r()
{

    m_has_customXml = false;

    if (m_customXml)
    {
        delete m_customXml;
        m_customXml = NULL;
    }
    ;

    m_has_smartTag = false;

    if (m_smartTag)
    {
        delete m_smartTag;
        m_smartTag = NULL;
    }
    ;

    m_has_sdt = false;

    if (m_sdt)
    {
        delete m_sdt;
        m_sdt = NULL;
    }
    ;

    m_has_dir = false;

    if (m_dir)
    {
        delete m_dir;
        m_dir = NULL;
    }
    ;

    m_has_bdo = false;

    if (m_bdo)
    {
        delete m_bdo;
        m_bdo = NULL;
    }
    ;

    m_has_r = true;
    if (!m_r)
    {
        m_r = new CT_R();
    }
    return m_r;
}

const CT_R& CT_SimpleField::ChildGroup_1::get_r() const
{
    if (m_r)
    {
        return *m_r;
    }
    return CT_R::default_instance();
}


// CT_SimpleField::ChildGroup_2
CT_SimpleField::ChildGroup_2::ChildGroup_2()
    :m_has_proofErr(false),
     m_proofErr(NULL),
     m_has_permStart(false),
     m_permStart(NULL),
     m_has_permEnd(false),
     m_permEnd(NULL)
{
}
bool CT_SimpleField::ChildGroup_2::has_proofErr() const
{
    return m_has_proofErr;
}

CT_ProofErr* CT_SimpleField::ChildGroup_2::mutable_proofErr()
{

    m_has_permStart = false;

    if (m_permStart)
    {
        delete m_permStart;
        m_permStart = NULL;
    }
    ;

    m_has_permEnd = false;

    if (m_permEnd)
    {
        delete m_permEnd;
        m_permEnd = NULL;
    }
    ;

    m_has_proofErr = true;
    if (!m_proofErr)
    {
        m_proofErr = new CT_ProofErr();
    }
    return m_proofErr;
}

const CT_ProofErr& CT_SimpleField::ChildGroup_2::get_proofErr() const
{
    if (m_proofErr)
    {
        return *m_proofErr;
    }
    return CT_ProofErr::default_instance();
}

bool CT_SimpleField::ChildGroup_2::has_permStart() const
{
    return m_has_permStart;
}

CT_PermStart* CT_SimpleField::ChildGroup_2::mutable_permStart()
{

    m_has_proofErr = false;

    if (m_proofErr)
    {
        delete m_proofErr;
        m_proofErr = NULL;
    }
    ;

    m_has_permEnd = false;

    if (m_permEnd)
    {
        delete m_permEnd;
        m_permEnd = NULL;
    }
    ;

    m_has_permStart = true;
    if (!m_permStart)
    {
        m_permStart = new CT_PermStart();
    }
    return m_permStart;
}

const CT_PermStart& CT_SimpleField::ChildGroup_2::get_permStart() const
{
    if (m_permStart)
    {
        return *m_permStart;
    }
    return CT_PermStart::default_instance();
}

bool CT_SimpleField::ChildGroup_2::has_permEnd() const
{
    return m_has_permEnd;
}

CT_Perm* CT_SimpleField::ChildGroup_2::mutable_permEnd()
{

    m_has_proofErr = false;

    if (m_proofErr)
    {
        delete m_proofErr;
        m_proofErr = NULL;
    }
    ;

    m_has_permStart = false;

    if (m_permStart)
    {
        delete m_permStart;
        m_permStart = NULL;
    }
    ;

    m_has_permEnd = true;
    if (!m_permEnd)
    {
        m_permEnd = new CT_Perm();
    }
    return m_permEnd;
}

const CT_Perm& CT_SimpleField::ChildGroup_2::get_permEnd() const
{
    if (m_permEnd)
    {
        return *m_permEnd;
    }
    return CT_Perm::default_instance();
}


// CT_SimpleField::ChildGroup_3
CT_SimpleField::ChildGroup_3::ChildGroup_3()
    :m_has_bookmarkStart(false),
     m_bookmarkStart(NULL),
     m_has_bookmarkEnd(false),
     m_bookmarkEnd(NULL),
     m_has_moveFromRangeStart(false),
     m_moveFromRangeStart(NULL),
     m_has_moveFromRangeEnd(false),
     m_moveFromRangeEnd(NULL),
     m_has_moveToRangeStart(false),
     m_moveToRangeStart(NULL),
     m_has_moveToRangeEnd(false),
     m_moveToRangeEnd(NULL),
     m_has_commentRangeStart(false),
     m_commentRangeStart(NULL),
     m_has_commentRangeEnd(false),
     m_commentRangeEnd(NULL),
     m_has_customXmlInsRangeStart(false),
     m_customXmlInsRangeStart(NULL),
     m_has_customXmlInsRangeEnd(false),
     m_customXmlInsRangeEnd(NULL),
     m_has_customXmlDelRangeStart(false),
     m_customXmlDelRangeStart(NULL),
     m_has_customXmlDelRangeEnd(false),
     m_customXmlDelRangeEnd(NULL),
     m_has_customXmlMoveFromRangeStart(false),
     m_customXmlMoveFromRangeStart(NULL),
     m_has_customXmlMoveFromRangeEnd(false),
     m_customXmlMoveFromRangeEnd(NULL),
     m_has_customXmlMoveToRangeStart(false),
     m_customXmlMoveToRangeStart(NULL),
     m_has_customXmlMoveToRangeEnd(false),
     m_customXmlMoveToRangeEnd(NULL),
     m_has_ins(false),
     m_ins(NULL),
     m_has_del(false),
     m_del(NULL),
     m_has_moveFrom(false),
     m_moveFrom(NULL),
     m_has_moveTo(false),
     m_moveTo(NULL)
{
}
bool CT_SimpleField::ChildGroup_3::has_bookmarkStart() const
{
    return m_has_bookmarkStart;
}

CT_Bookmark* CT_SimpleField::ChildGroup_3::mutable_bookmarkStart()
{

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_bookmarkStart = true;
    if (!m_bookmarkStart)
    {
        m_bookmarkStart = new CT_Bookmark();
    }
    return m_bookmarkStart;
}

const CT_Bookmark& CT_SimpleField::ChildGroup_3::get_bookmarkStart() const
{
    if (m_bookmarkStart)
    {
        return *m_bookmarkStart;
    }
    return CT_Bookmark::default_instance();
}

bool CT_SimpleField::ChildGroup_3::has_bookmarkEnd() const
{
    return m_has_bookmarkEnd;
}

CT_MarkupRange* CT_SimpleField::ChildGroup_3::mutable_bookmarkEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_bookmarkEnd = true;
    if (!m_bookmarkEnd)
    {
        m_bookmarkEnd = new CT_MarkupRange();
    }
    return m_bookmarkEnd;
}

const CT_MarkupRange& CT_SimpleField::ChildGroup_3::get_bookmarkEnd() const
{
    if (m_bookmarkEnd)
    {
        return *m_bookmarkEnd;
    }
    return CT_MarkupRange::default_instance();
}

bool CT_SimpleField::ChildGroup_3::has_moveFromRangeStart() const
{
    return m_has_moveFromRangeStart;
}

CT_MoveBookmark* CT_SimpleField::ChildGroup_3::mutable_moveFromRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_moveFromRangeStart = true;
    if (!m_moveFromRangeStart)
    {
        m_moveFromRangeStart = new CT_MoveBookmark();
    }
    return m_moveFromRangeStart;
}

const CT_MoveBookmark& CT_SimpleField::ChildGroup_3::get_moveFromRangeStart() const
{
    if (m_moveFromRangeStart)
    {
        return *m_moveFromRangeStart;
    }
    return CT_MoveBookmark::default_instance();
}

bool CT_SimpleField::ChildGroup_3::has_moveFromRangeEnd() const
{
    return m_has_moveFromRangeEnd;
}

CT_MarkupRange* CT_SimpleField::ChildGroup_3::mutable_moveFromRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_moveFromRangeEnd = true;
    if (!m_moveFromRangeEnd)
    {
        m_moveFromRangeEnd = new CT_MarkupRange();
    }
    return m_moveFromRangeEnd;
}

const CT_MarkupRange& CT_SimpleField::ChildGroup_3::get_moveFromRangeEnd() const
{
    if (m_moveFromRangeEnd)
    {
        return *m_moveFromRangeEnd;
    }
    return CT_MarkupRange::default_instance();
}

bool CT_SimpleField::ChildGroup_3::has_moveToRangeStart() const
{
    return m_has_moveToRangeStart;
}

CT_MoveBookmark* CT_SimpleField::ChildGroup_3::mutable_moveToRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_moveToRangeStart = true;
    if (!m_moveToRangeStart)
    {
        m_moveToRangeStart = new CT_MoveBookmark();
    }
    return m_moveToRangeStart;
}

const CT_MoveBookmark& CT_SimpleField::ChildGroup_3::get_moveToRangeStart() const
{
    if (m_moveToRangeStart)
    {
        return *m_moveToRangeStart;
    }
    return CT_MoveBookmark::default_instance();
}

bool CT_SimpleField::ChildGroup_3::has_moveToRangeEnd() const
{
    return m_has_moveToRangeEnd;
}

CT_MarkupRange* CT_SimpleField::ChildGroup_3::mutable_moveToRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_moveToRangeEnd = true;
    if (!m_moveToRangeEnd)
    {
        m_moveToRangeEnd = new CT_MarkupRange();
    }
    return m_moveToRangeEnd;
}

const CT_MarkupRange& CT_SimpleField::ChildGroup_3::get_moveToRangeEnd() const
{
    if (m_moveToRangeEnd)
    {
        return *m_moveToRangeEnd;
    }
    return CT_MarkupRange::default_instance();
}

bool CT_SimpleField::ChildGroup_3::has_commentRangeStart() const
{
    return m_has_commentRangeStart;
}

CT_MarkupRange* CT_SimpleField::ChildGroup_3::mutable_commentRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_commentRangeStart = true;
    if (!m_commentRangeStart)
    {
        m_commentRangeStart = new CT_MarkupRange();
    }
    return m_commentRangeStart;
}

const CT_MarkupRange& CT_SimpleField::ChildGroup_3::get_commentRangeStart() const
{
    if (m_commentRangeStart)
    {
        return *m_commentRangeStart;
    }
    return CT_MarkupRange::default_instance();
}

bool CT_SimpleField::ChildGroup_3::has_commentRangeEnd() const
{
    return m_has_commentRangeEnd;
}

CT_MarkupRange* CT_SimpleField::ChildGroup_3::mutable_commentRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_commentRangeEnd = true;
    if (!m_commentRangeEnd)
    {
        m_commentRangeEnd = new CT_MarkupRange();
    }
    return m_commentRangeEnd;
}

const CT_MarkupRange& CT_SimpleField::ChildGroup_3::get_commentRangeEnd() const
{
    if (m_commentRangeEnd)
    {
        return *m_commentRangeEnd;
    }
    return CT_MarkupRange::default_instance();
}

bool CT_SimpleField::ChildGroup_3::has_customXmlInsRangeStart() const
{
    return m_has_customXmlInsRangeStart;
}

CT_TrackChange* CT_SimpleField::ChildGroup_3::mutable_customXmlInsRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = true;
    if (!m_customXmlInsRangeStart)
    {
        m_customXmlInsRangeStart = new CT_TrackChange();
    }
    return m_customXmlInsRangeStart;
}

const CT_TrackChange& CT_SimpleField::ChildGroup_3::get_customXmlInsRangeStart() const
{
    if (m_customXmlInsRangeStart)
    {
        return *m_customXmlInsRangeStart;
    }
    return CT_TrackChange::default_instance();
}

bool CT_SimpleField::ChildGroup_3::has_customXmlInsRangeEnd() const
{
    return m_has_customXmlInsRangeEnd;
}

CT_Markup* CT_SimpleField::ChildGroup_3::mutable_customXmlInsRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = true;
    if (!m_customXmlInsRangeEnd)
    {
        m_customXmlInsRangeEnd = new CT_Markup();
    }
    return m_customXmlInsRangeEnd;
}

const CT_Markup& CT_SimpleField::ChildGroup_3::get_customXmlInsRangeEnd() const
{
    if (m_customXmlInsRangeEnd)
    {
        return *m_customXmlInsRangeEnd;
    }
    return CT_Markup::default_instance();
}

bool CT_SimpleField::ChildGroup_3::has_customXmlDelRangeStart() const
{
    return m_has_customXmlDelRangeStart;
}

CT_TrackChange* CT_SimpleField::ChildGroup_3::mutable_customXmlDelRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = true;
    if (!m_customXmlDelRangeStart)
    {
        m_customXmlDelRangeStart = new CT_TrackChange();
    }
    return m_customXmlDelRangeStart;
}

const CT_TrackChange& CT_SimpleField::ChildGroup_3::get_customXmlDelRangeStart() const
{
    if (m_customXmlDelRangeStart)
    {
        return *m_customXmlDelRangeStart;
    }
    return CT_TrackChange::default_instance();
}

bool CT_SimpleField::ChildGroup_3::has_customXmlDelRangeEnd() const
{
    return m_has_customXmlDelRangeEnd;
}

CT_Markup* CT_SimpleField::ChildGroup_3::mutable_customXmlDelRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = true;
    if (!m_customXmlDelRangeEnd)
    {
        m_customXmlDelRangeEnd = new CT_Markup();
    }
    return m_customXmlDelRangeEnd;
}

const CT_Markup& CT_SimpleField::ChildGroup_3::get_customXmlDelRangeEnd() const
{
    if (m_customXmlDelRangeEnd)
    {
        return *m_customXmlDelRangeEnd;
    }
    return CT_Markup::default_instance();
}

bool CT_SimpleField::ChildGroup_3::has_customXmlMoveFromRangeStart() const
{
    return m_has_customXmlMoveFromRangeStart;
}

CT_TrackChange* CT_SimpleField::ChildGroup_3::mutable_customXmlMoveFromRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = true;
    if (!m_customXmlMoveFromRangeStart)
    {
        m_customXmlMoveFromRangeStart = new CT_TrackChange();
    }
    return m_customXmlMoveFromRangeStart;
}

const CT_TrackChange& CT_SimpleField::ChildGroup_3::get_customXmlMoveFromRangeStart() const
{
    if (m_customXmlMoveFromRangeStart)
    {
        return *m_customXmlMoveFromRangeStart;
    }
    return CT_TrackChange::default_instance();
}

bool CT_SimpleField::ChildGroup_3::has_customXmlMoveFromRangeEnd() const
{
    return m_has_customXmlMoveFromRangeEnd;
}

CT_Markup* CT_SimpleField::ChildGroup_3::mutable_customXmlMoveFromRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = true;
    if (!m_customXmlMoveFromRangeEnd)
    {
        m_customXmlMoveFromRangeEnd = new CT_Markup();
    }
    return m_customXmlMoveFromRangeEnd;
}

const CT_Markup& CT_SimpleField::ChildGroup_3::get_customXmlMoveFromRangeEnd() const
{
    if (m_customXmlMoveFromRangeEnd)
    {
        return *m_customXmlMoveFromRangeEnd;
    }
    return CT_Markup::default_instance();
}

bool CT_SimpleField::ChildGroup_3::has_customXmlMoveToRangeStart() const
{
    return m_has_customXmlMoveToRangeStart;
}

CT_TrackChange* CT_SimpleField::ChildGroup_3::mutable_customXmlMoveToRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = true;
    if (!m_customXmlMoveToRangeStart)
    {
        m_customXmlMoveToRangeStart = new CT_TrackChange();
    }
    return m_customXmlMoveToRangeStart;
}

const CT_TrackChange& CT_SimpleField::ChildGroup_3::get_customXmlMoveToRangeStart() const
{
    if (m_customXmlMoveToRangeStart)
    {
        return *m_customXmlMoveToRangeStart;
    }
    return CT_TrackChange::default_instance();
}

bool CT_SimpleField::ChildGroup_3::has_customXmlMoveToRangeEnd() const
{
    return m_has_customXmlMoveToRangeEnd;
}

CT_Markup* CT_SimpleField::ChildGroup_3::mutable_customXmlMoveToRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = true;
    if (!m_customXmlMoveToRangeEnd)
    {
        m_customXmlMoveToRangeEnd = new CT_Markup();
    }
    return m_customXmlMoveToRangeEnd;
}

const CT_Markup& CT_SimpleField::ChildGroup_3::get_customXmlMoveToRangeEnd() const
{
    if (m_customXmlMoveToRangeEnd)
    {
        return *m_customXmlMoveToRangeEnd;
    }
    return CT_Markup::default_instance();
}

bool CT_SimpleField::ChildGroup_3::has_ins() const
{
    return m_has_ins;
}

CT_RunTrackChange* CT_SimpleField::ChildGroup_3::mutable_ins()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_ins = true;
    if (!m_ins)
    {
        m_ins = new CT_RunTrackChange();
    }
    return m_ins;
}

const CT_RunTrackChange& CT_SimpleField::ChildGroup_3::get_ins() const
{
    if (m_ins)
    {
        return *m_ins;
    }
    return CT_RunTrackChange::default_instance();
}

bool CT_SimpleField::ChildGroup_3::has_del() const
{
    return m_has_del;
}

CT_RunTrackChange* CT_SimpleField::ChildGroup_3::mutable_del()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_del = true;
    if (!m_del)
    {
        m_del = new CT_RunTrackChange();
    }
    return m_del;
}

const CT_RunTrackChange& CT_SimpleField::ChildGroup_3::get_del() const
{
    if (m_del)
    {
        return *m_del;
    }
    return CT_RunTrackChange::default_instance();
}

bool CT_SimpleField::ChildGroup_3::has_moveFrom() const
{
    return m_has_moveFrom;
}

CT_RunTrackChange* CT_SimpleField::ChildGroup_3::mutable_moveFrom()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_moveFrom = true;
    if (!m_moveFrom)
    {
        m_moveFrom = new CT_RunTrackChange();
    }
    return m_moveFrom;
}

const CT_RunTrackChange& CT_SimpleField::ChildGroup_3::get_moveFrom() const
{
    if (m_moveFrom)
    {
        return *m_moveFrom;
    }
    return CT_RunTrackChange::default_instance();
}

bool CT_SimpleField::ChildGroup_3::has_moveTo() const
{
    return m_has_moveTo;
}

CT_RunTrackChange* CT_SimpleField::ChildGroup_3::mutable_moveTo()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = true;
    if (!m_moveTo)
    {
        m_moveTo = new CT_RunTrackChange();
    }
    return m_moveTo;
}

const CT_RunTrackChange& CT_SimpleField::ChildGroup_3::get_moveTo() const
{
    if (m_moveTo)
    {
        return *m_moveTo;
    }
    return CT_RunTrackChange::default_instance();
}


// CT_SimpleField::ChildGroup_4
CT_SimpleField::ChildGroup_4::ChildGroup_4()
    :m_has_m_oMathPara(false),
     m_m_oMathPara(NULL),
     m_has_m_oMath(false),
     m_m_oMath(NULL),
     m_has_fldSimple(false),
     m_fldSimple(NULL),
     m_has_hyperlink(false),
     m_hyperlink(NULL),
     m_has_subDoc(false),
     m_subDoc(NULL)
{
}
bool CT_SimpleField::ChildGroup_4::has_m_oMathPara() const
{
    return m_has_m_oMathPara;
}

ns_m::CT_OMathPara* CT_SimpleField::ChildGroup_4::mutable_m_oMathPara()
{

    m_has_m_oMath = false;

    if (m_m_oMath)
    {
        delete m_m_oMath;
        m_m_oMath = NULL;
    }
    ;

    m_has_fldSimple = false;

    if (m_fldSimple)
    {
        delete m_fldSimple;
        m_fldSimple = NULL;
    }
    ;

    m_has_hyperlink = false;

    if (m_hyperlink)
    {
        delete m_hyperlink;
        m_hyperlink = NULL;
    }
    ;

    m_has_subDoc = false;

    if (m_subDoc)
    {
        delete m_subDoc;
        m_subDoc = NULL;
    }
    ;

    m_has_m_oMathPara = true;
    if (!m_m_oMathPara)
    {
        m_m_oMathPara = new ns_m::CT_OMathPara();
    }
    return m_m_oMathPara;
}

const ns_m::CT_OMathPara& CT_SimpleField::ChildGroup_4::get_m_oMathPara() const
{
    if (m_m_oMathPara)
    {
        return *m_m_oMathPara;
    }
    return ns_m::CT_OMathPara::default_instance();
}

bool CT_SimpleField::ChildGroup_4::has_m_oMath() const
{
    return m_has_m_oMath;
}

ns_m::CT_OMath* CT_SimpleField::ChildGroup_4::mutable_m_oMath()
{

    m_has_m_oMathPara = false;

    if (m_m_oMathPara)
    {
        delete m_m_oMathPara;
        m_m_oMathPara = NULL;
    }
    ;

    m_has_fldSimple = false;

    if (m_fldSimple)
    {
        delete m_fldSimple;
        m_fldSimple = NULL;
    }
    ;

    m_has_hyperlink = false;

    if (m_hyperlink)
    {
        delete m_hyperlink;
        m_hyperlink = NULL;
    }
    ;

    m_has_subDoc = false;

    if (m_subDoc)
    {
        delete m_subDoc;
        m_subDoc = NULL;
    }
    ;

    m_has_m_oMath = true;
    if (!m_m_oMath)
    {
        m_m_oMath = new ns_m::CT_OMath();
    }
    return m_m_oMath;
}

const ns_m::CT_OMath& CT_SimpleField::ChildGroup_4::get_m_oMath() const
{
    if (m_m_oMath)
    {
        return *m_m_oMath;
    }
    return ns_m::CT_OMath::default_instance();
}

bool CT_SimpleField::ChildGroup_4::has_fldSimple() const
{
    return m_has_fldSimple;
}

CT_SimpleField* CT_SimpleField::ChildGroup_4::mutable_fldSimple()
{

    m_has_m_oMathPara = false;

    if (m_m_oMathPara)
    {
        delete m_m_oMathPara;
        m_m_oMathPara = NULL;
    }
    ;

    m_has_m_oMath = false;

    if (m_m_oMath)
    {
        delete m_m_oMath;
        m_m_oMath = NULL;
    }
    ;

    m_has_hyperlink = false;

    if (m_hyperlink)
    {
        delete m_hyperlink;
        m_hyperlink = NULL;
    }
    ;

    m_has_subDoc = false;

    if (m_subDoc)
    {
        delete m_subDoc;
        m_subDoc = NULL;
    }
    ;

    m_has_fldSimple = true;
    if (!m_fldSimple)
    {
        m_fldSimple = new CT_SimpleField();
    }
    return m_fldSimple;
}

const CT_SimpleField& CT_SimpleField::ChildGroup_4::get_fldSimple() const
{
    if (m_fldSimple)
    {
        return *m_fldSimple;
    }
    return CT_SimpleField::default_instance();
}

bool CT_SimpleField::ChildGroup_4::has_hyperlink() const
{
    return m_has_hyperlink;
}

CT_Hyperlink* CT_SimpleField::ChildGroup_4::mutable_hyperlink()
{

    m_has_m_oMathPara = false;

    if (m_m_oMathPara)
    {
        delete m_m_oMathPara;
        m_m_oMathPara = NULL;
    }
    ;

    m_has_m_oMath = false;

    if (m_m_oMath)
    {
        delete m_m_oMath;
        m_m_oMath = NULL;
    }
    ;

    m_has_fldSimple = false;

    if (m_fldSimple)
    {
        delete m_fldSimple;
        m_fldSimple = NULL;
    }
    ;

    m_has_subDoc = false;

    if (m_subDoc)
    {
        delete m_subDoc;
        m_subDoc = NULL;
    }
    ;

    m_has_hyperlink = true;
    if (!m_hyperlink)
    {
        m_hyperlink = new CT_Hyperlink();
    }
    return m_hyperlink;
}

const CT_Hyperlink& CT_SimpleField::ChildGroup_4::get_hyperlink() const
{
    if (m_hyperlink)
    {
        return *m_hyperlink;
    }
    return CT_Hyperlink::default_instance();
}

bool CT_SimpleField::ChildGroup_4::has_subDoc() const
{
    return m_has_subDoc;
}

CT_Rel* CT_SimpleField::ChildGroup_4::mutable_subDoc()
{

    m_has_m_oMathPara = false;

    if (m_m_oMathPara)
    {
        delete m_m_oMathPara;
        m_m_oMathPara = NULL;
    }
    ;

    m_has_m_oMath = false;

    if (m_m_oMath)
    {
        delete m_m_oMath;
        m_m_oMath = NULL;
    }
    ;

    m_has_fldSimple = false;

    if (m_fldSimple)
    {
        delete m_fldSimple;
        m_fldSimple = NULL;
    }
    ;

    m_has_hyperlink = false;

    if (m_hyperlink)
    {
        delete m_hyperlink;
        m_hyperlink = NULL;
    }
    ;

    m_has_subDoc = true;
    if (!m_subDoc)
    {
        m_subDoc = new CT_Rel();
    }
    return m_subDoc;
}

const CT_Rel& CT_SimpleField::ChildGroup_4::get_subDoc() const
{
    if (m_subDoc)
    {
        return *m_subDoc;
    }
    return CT_Rel::default_instance();
}

CT_SimpleField* CT_SimpleField::default_instance_ = NULL;

// CT_FFTextType
CT_FFTextType::CT_FFTextType()
    :m_has_val_attr(false),
     m_val_attr(NULL)
{
}
CT_FFTextType::~CT_FFTextType()
{
    clear();
}
void CT_FFTextType::clear()
{
    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }

}

void CT_FFTextType::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_val_attr);
    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_FFTextType& CT_FFTextType::default_instance()
{
    if (!CT_FFTextType::default_instance_)
    {
        CT_FFTextType::default_instance_ = new CT_FFTextType();
    }
    return *CT_FFTextType::default_instance_;
}

bool CT_FFTextType::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_FFTextType::set_val_attr(const ST_FFTextType& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ST_FFTextType(_val_attr);
}

const ST_FFTextType& CT_FFTextType::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ST_FFTextType::default_instance();
}

CT_FFTextType* CT_FFTextType::default_instance_ = NULL;

// CT_FFName
CT_FFName::CT_FFName()
    :m_has_val_attr(false),
     m_val_attr(NULL)
{
}
CT_FFName::~CT_FFName()
{
    clear();
}
void CT_FFName::clear()
{
    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }

}

void CT_FFName::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_FFName& CT_FFName::default_instance()
{
    if (!CT_FFName::default_instance_)
    {
        CT_FFName::default_instance_ = new CT_FFName();
    }
    return *CT_FFName::default_instance_;
}

bool CT_FFName::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_FFName::set_val_attr(const ST_FFName& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ST_FFName(_val_attr);
}

const ST_FFName& CT_FFName::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ST_FFName::default_instance();
}

CT_FFName* CT_FFName::default_instance_ = NULL;

// CT_FldChar
CT_FldChar::CT_FldChar()
    :m_has_fldData(false),
     m_fldData(NULL),
     m_has_ffData(false),
     m_ffData(NULL),
     m_has_numberingChange(false),
     m_numberingChange(NULL),
     m_has_fldCharType_attr(false),
     m_fldCharType_attr(NULL),
     m_has_fldLock_attr(false),
     m_fldLock_attr(NULL),
     m_has_dirty_attr(false),
     m_dirty_attr(NULL)
{
}
CT_FldChar::~CT_FldChar()
{
    clear();
}
bool CT_FldChar::has_fldData() const
{
    return m_has_fldData;
}

CT_Text* CT_FldChar::mutable_fldData()
{

    m_has_ffData = false;

    if (m_ffData)
    {
        delete m_ffData;
        m_ffData = NULL;
    }
    ;

    m_has_numberingChange = false;

    if (m_numberingChange)
    {
        delete m_numberingChange;
        m_numberingChange = NULL;
    }
    ;

    m_has_fldData = true;
    if (!m_fldData)
    {
        m_fldData = new CT_Text();
    }
    return m_fldData;
}

const CT_Text& CT_FldChar::get_fldData() const
{
    if (m_fldData)
    {
        return *m_fldData;
    }
    return CT_Text::default_instance();
}

bool CT_FldChar::has_ffData() const
{
    return m_has_ffData;
}

CT_FFData* CT_FldChar::mutable_ffData()
{

    m_has_fldData = false;

    if (m_fldData)
    {
        delete m_fldData;
        m_fldData = NULL;
    }
    ;

    m_has_numberingChange = false;

    if (m_numberingChange)
    {
        delete m_numberingChange;
        m_numberingChange = NULL;
    }
    ;

    m_has_ffData = true;
    if (!m_ffData)
    {
        m_ffData = new CT_FFData();
    }
    return m_ffData;
}

const CT_FFData& CT_FldChar::get_ffData() const
{
    if (m_ffData)
    {
        return *m_ffData;
    }
    return CT_FFData::default_instance();
}

bool CT_FldChar::has_numberingChange() const
{
    return m_has_numberingChange;
}

CT_TrackChangeNumbering* CT_FldChar::mutable_numberingChange()
{

    m_has_fldData = false;

    if (m_fldData)
    {
        delete m_fldData;
        m_fldData = NULL;
    }
    ;

    m_has_ffData = false;

    if (m_ffData)
    {
        delete m_ffData;
        m_ffData = NULL;
    }
    ;

    m_has_numberingChange = true;
    if (!m_numberingChange)
    {
        m_numberingChange = new CT_TrackChangeNumbering();
    }
    return m_numberingChange;
}

const CT_TrackChangeNumbering& CT_FldChar::get_numberingChange() const
{
    if (m_numberingChange)
    {
        return *m_numberingChange;
    }
    return CT_TrackChangeNumbering::default_instance();
}

void CT_FldChar::clear()
{
    m_has_fldCharType_attr = false;

    if (m_fldCharType_attr)
    {
        delete m_fldCharType_attr;
        m_fldCharType_attr = NULL;
    }


    m_has_fldLock_attr = false;

    if (m_fldLock_attr)
    {
        delete m_fldLock_attr;
        m_fldLock_attr = NULL;
    }


    m_has_dirty_attr = false;

    if (m_dirty_attr)
    {
        delete m_dirty_attr;
        m_dirty_attr = NULL;
    }


    m_has_fldData = false;

    if (m_fldData)
    {
        delete m_fldData;
        m_fldData = NULL;
    }


    m_has_ffData = false;

    if (m_ffData)
    {
        delete m_ffData;
        m_ffData = NULL;
    }


    m_has_numberingChange = false;

    if (m_numberingChange)
    {
        delete m_numberingChange;
        m_numberingChange = NULL;
    }

}

void CT_FldChar::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_fldCharType_attr);
    if (m_has_fldCharType_attr)
    {
        m_fldCharType_attr->toXmlAttr("w:fldCharType", _outStream);
    }



    if (m_has_fldLock_attr)
    {
        m_fldLock_attr->toXmlAttr("w:fldLock", _outStream);
    }



    if (m_has_dirty_attr)
    {
        m_dirty_attr->toXmlAttr("w:dirty", _outStream);
    }

    _outStream << ">";

    {
        bool elemHasValueList[3] = {m_has_fldData, m_has_ffData, m_has_numberingChange};
        int cnt = count(elemHasValueList, elemHasValueList + 3, true);
        assert(cnt == 1);
    }


    if (m_has_fldData)
    {
        m_fldData->toXmlElem("w:fldData", "", _outStream);
    }


    if (m_has_ffData)
    {
        m_ffData->toXmlElem("w:ffData", "", _outStream);
    }


    if (m_has_numberingChange)
    {
        m_numberingChange->toXmlElem("w:numberingChange", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_FldChar& CT_FldChar::default_instance()
{
    if (!CT_FldChar::default_instance_)
    {
        CT_FldChar::default_instance_ = new CT_FldChar();
    }
    return *CT_FldChar::default_instance_;
}

bool CT_FldChar::has_fldCharType_attr() const
{
    return m_has_fldCharType_attr;
}

void CT_FldChar::set_fldCharType_attr(const ST_FldCharType& _fldCharType_attr)
{
    m_has_fldCharType_attr = true;
    m_fldCharType_attr = new ST_FldCharType(_fldCharType_attr);
}

const ST_FldCharType& CT_FldChar::get_fldCharType_attr() const
{
    if (m_fldCharType_attr)
    {
        return *m_fldCharType_attr;
    }
    return ST_FldCharType::default_instance();
}

bool CT_FldChar::has_fldLock_attr() const
{
    return m_has_fldLock_attr;
}

void CT_FldChar::set_fldLock_attr(const ns_s::ST_OnOff& _fldLock_attr)
{
    m_has_fldLock_attr = true;
    m_fldLock_attr = new ns_s::ST_OnOff(_fldLock_attr);
}

const ns_s::ST_OnOff& CT_FldChar::get_fldLock_attr() const
{
    if (m_fldLock_attr)
    {
        return *m_fldLock_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

bool CT_FldChar::has_dirty_attr() const
{
    return m_has_dirty_attr;
}

void CT_FldChar::set_dirty_attr(const ns_s::ST_OnOff& _dirty_attr)
{
    m_has_dirty_attr = true;
    m_dirty_attr = new ns_s::ST_OnOff(_dirty_attr);
}

const ns_s::ST_OnOff& CT_FldChar::get_dirty_attr() const
{
    if (m_dirty_attr)
    {
        return *m_dirty_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

CT_FldChar* CT_FldChar::default_instance_ = NULL;

// CT_Hyperlink
CT_Hyperlink::CT_Hyperlink()
    :m_has_tgtFrame_attr(false),
     m_tgtFrame_attr(NULL),
     m_has_tooltip_attr(false),
     m_tooltip_attr(NULL),
     m_has_docLocation_attr(false),
     m_docLocation_attr(NULL),
     m_has_history_attr(false),
     m_history_attr(NULL),
     m_has_anchor_attr(false),
     m_anchor_attr(NULL),
     m_has_r_id_attr(false),
     m_r_id_attr(NULL)
{
}
CT_Hyperlink::~CT_Hyperlink()
{
    clear();
}
void CT_Hyperlink::clear()
{
    m_has_tgtFrame_attr = false;

    if (m_tgtFrame_attr)
    {
        delete m_tgtFrame_attr;
        m_tgtFrame_attr = NULL;
    }


    m_has_tooltip_attr = false;

    if (m_tooltip_attr)
    {
        delete m_tooltip_attr;
        m_tooltip_attr = NULL;
    }


    m_has_docLocation_attr = false;

    if (m_docLocation_attr)
    {
        delete m_docLocation_attr;
        m_docLocation_attr = NULL;
    }


    m_has_history_attr = false;

    if (m_history_attr)
    {
        delete m_history_attr;
        m_history_attr = NULL;
    }


    m_has_anchor_attr = false;

    if (m_anchor_attr)
    {
        delete m_anchor_attr;
        m_anchor_attr = NULL;
    }


    m_has_r_id_attr = false;

    if (m_r_id_attr)
    {
        delete m_r_id_attr;
        m_r_id_attr = NULL;
    }

}

void CT_Hyperlink::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_tgtFrame_attr)
    {
        m_tgtFrame_attr->toXmlAttr("w:tgtFrame", _outStream);
    }



    if (m_has_tooltip_attr)
    {
        m_tooltip_attr->toXmlAttr("w:tooltip", _outStream);
    }



    if (m_has_docLocation_attr)
    {
        m_docLocation_attr->toXmlAttr("w:docLocation", _outStream);
    }



    if (m_has_history_attr)
    {
        m_history_attr->toXmlAttr("w:history", _outStream);
    }



    if (m_has_anchor_attr)
    {
        m_anchor_attr->toXmlAttr("w:anchor", _outStream);
    }



    if (m_has_r_id_attr)
    {
        m_r_id_attr->toXmlAttr("r:id", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_Hyperlink& CT_Hyperlink::default_instance()
{
    if (!CT_Hyperlink::default_instance_)
    {
        CT_Hyperlink::default_instance_ = new CT_Hyperlink();
    }
    return *CT_Hyperlink::default_instance_;
}

bool CT_Hyperlink::has_tgtFrame_attr() const
{
    return m_has_tgtFrame_attr;
}

void CT_Hyperlink::set_tgtFrame_attr(const ns_s::ST_String& _tgtFrame_attr)
{
    m_has_tgtFrame_attr = true;
    m_tgtFrame_attr = new ns_s::ST_String(_tgtFrame_attr);
}

const ns_s::ST_String& CT_Hyperlink::get_tgtFrame_attr() const
{
    if (m_tgtFrame_attr)
    {
        return *m_tgtFrame_attr;
    }
    return ns_s::ST_String::default_instance();
}

bool CT_Hyperlink::has_tooltip_attr() const
{
    return m_has_tooltip_attr;
}

void CT_Hyperlink::set_tooltip_attr(const ns_s::ST_String& _tooltip_attr)
{
    m_has_tooltip_attr = true;
    m_tooltip_attr = new ns_s::ST_String(_tooltip_attr);
}

const ns_s::ST_String& CT_Hyperlink::get_tooltip_attr() const
{
    if (m_tooltip_attr)
    {
        return *m_tooltip_attr;
    }
    return ns_s::ST_String::default_instance();
}

bool CT_Hyperlink::has_docLocation_attr() const
{
    return m_has_docLocation_attr;
}

void CT_Hyperlink::set_docLocation_attr(const ns_s::ST_String& _docLocation_attr)
{
    m_has_docLocation_attr = true;
    m_docLocation_attr = new ns_s::ST_String(_docLocation_attr);
}

const ns_s::ST_String& CT_Hyperlink::get_docLocation_attr() const
{
    if (m_docLocation_attr)
    {
        return *m_docLocation_attr;
    }
    return ns_s::ST_String::default_instance();
}

bool CT_Hyperlink::has_history_attr() const
{
    return m_has_history_attr;
}

void CT_Hyperlink::set_history_attr(const ns_s::ST_OnOff& _history_attr)
{
    m_has_history_attr = true;
    m_history_attr = new ns_s::ST_OnOff(_history_attr);
}

const ns_s::ST_OnOff& CT_Hyperlink::get_history_attr() const
{
    if (m_history_attr)
    {
        return *m_history_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

bool CT_Hyperlink::has_anchor_attr() const
{
    return m_has_anchor_attr;
}

void CT_Hyperlink::set_anchor_attr(const ns_s::ST_String& _anchor_attr)
{
    m_has_anchor_attr = true;
    m_anchor_attr = new ns_s::ST_String(_anchor_attr);
}

const ns_s::ST_String& CT_Hyperlink::get_anchor_attr() const
{
    if (m_anchor_attr)
    {
        return *m_anchor_attr;
    }
    return ns_s::ST_String::default_instance();
}

bool CT_Hyperlink::has_r_id_attr() const
{
    return m_has_r_id_attr;
}

void CT_Hyperlink::set_r_id_attr(const ns_r::ST_RelationshipId& _r_id_attr)
{
    m_has_r_id_attr = true;
    m_r_id_attr = new ns_r::ST_RelationshipId(_r_id_attr);
}

const ns_r::ST_RelationshipId& CT_Hyperlink::get_r_id_attr() const
{
    if (m_r_id_attr)
    {
        return *m_r_id_attr;
    }
    return ns_r::ST_RelationshipId::default_instance();
}

CT_Hyperlink* CT_Hyperlink::default_instance_ = NULL;

// CT_FFData
CT_FFData::CT_FFData()

{
}
CT_FFData::~CT_FFData()
{
    clear();
}
CT_FFName* CT_FFData::add_name()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_FFName* pNewChild = pChildGroup->mutable_name();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_DecimalNumber* CT_FFData::add_label()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_DecimalNumber* pNewChild = pChildGroup->mutable_label();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_UnsignedDecimalNumber* CT_FFData::add_tabIndex()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_UnsignedDecimalNumber* pNewChild = pChildGroup->mutable_tabIndex();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_FFData::add_enabled()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_enabled();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_FFData::add_calcOnExit()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_calcOnExit();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_MacroName* CT_FFData::add_entryMacro()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_MacroName* pNewChild = pChildGroup->mutable_entryMacro();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_MacroName* CT_FFData::add_exitMacro()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_MacroName* pNewChild = pChildGroup->mutable_exitMacro();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_FFHelpText* CT_FFData::add_helpText()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_FFHelpText* pNewChild = pChildGroup->mutable_helpText();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_FFStatusText* CT_FFData::add_statusText()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_FFStatusText* pNewChild = pChildGroup->mutable_statusText();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_FFCheckBox* CT_FFData::add_checkBox()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_FFCheckBox* pNewChild = pChildGroup->mutable_checkBox();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_FFDDList* CT_FFData::add_ddList()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_FFDDList* pNewChild = pChildGroup->mutable_ddList();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_FFTextInput* CT_FFData::add_textInput()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_FFTextInput* pNewChild = pChildGroup->mutable_textInput();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

void CT_FFData::clear()
{
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
}

void CT_FFData::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";

    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_name())
            {
                (*iter)->get_name().toXmlElem("w:name", "", _outStream);
            }


            else if ((*iter)->has_label())
            {
                (*iter)->get_label().toXmlElem("w:label", "", _outStream);
            }


            else if ((*iter)->has_tabIndex())
            {
                (*iter)->get_tabIndex().toXmlElem("w:tabIndex", "", _outStream);
            }


            else if ((*iter)->has_enabled())
            {
                (*iter)->get_enabled().toXmlElem("w:enabled", "", _outStream);
            }


            else if ((*iter)->has_calcOnExit())
            {
                (*iter)->get_calcOnExit().toXmlElem("w:calcOnExit", "", _outStream);
            }


            else if ((*iter)->has_entryMacro())
            {
                (*iter)->get_entryMacro().toXmlElem("w:entryMacro", "", _outStream);
            }


            else if ((*iter)->has_exitMacro())
            {
                (*iter)->get_exitMacro().toXmlElem("w:exitMacro", "", _outStream);
            }


            else if ((*iter)->has_helpText())
            {
                (*iter)->get_helpText().toXmlElem("w:helpText", "", _outStream);
            }


            else if ((*iter)->has_statusText())
            {
                (*iter)->get_statusText().toXmlElem("w:statusText", "", _outStream);
            }


            else if ((*iter)->has_checkBox())
            {
                (*iter)->get_checkBox().toXmlElem("w:checkBox", "", _outStream);
            }


            else if ((*iter)->has_ddList())
            {
                (*iter)->get_ddList().toXmlElem("w:ddList", "", _outStream);
            }


            else if ((*iter)->has_textInput())
            {
                (*iter)->get_textInput().toXmlElem("w:textInput", "", _outStream);
            }


        }
    }

    _outStream << "</" << _elemName << ">";
}

const CT_FFData& CT_FFData::default_instance()
{
    if (!CT_FFData::default_instance_)
    {
        CT_FFData::default_instance_ = new CT_FFData();
    }
    return *CT_FFData::default_instance_;
}


// CT_FFData::ChildGroup_1
CT_FFData::ChildGroup_1::ChildGroup_1()
    :m_has_name(false),
     m_name(NULL),
     m_has_label(false),
     m_label(NULL),
     m_has_tabIndex(false),
     m_tabIndex(NULL),
     m_has_enabled(false),
     m_enabled(NULL),
     m_has_calcOnExit(false),
     m_calcOnExit(NULL),
     m_has_entryMacro(false),
     m_entryMacro(NULL),
     m_has_exitMacro(false),
     m_exitMacro(NULL),
     m_has_helpText(false),
     m_helpText(NULL),
     m_has_statusText(false),
     m_statusText(NULL),
     m_has_checkBox(false),
     m_checkBox(NULL),
     m_has_ddList(false),
     m_ddList(NULL),
     m_has_textInput(false),
     m_textInput(NULL)
{
}
bool CT_FFData::ChildGroup_1::has_name() const
{
    return m_has_name;
}

CT_FFName* CT_FFData::ChildGroup_1::mutable_name()
{

    m_has_label = false;

    if (m_label)
    {
        delete m_label;
        m_label = NULL;
    }
    ;

    m_has_tabIndex = false;

    if (m_tabIndex)
    {
        delete m_tabIndex;
        m_tabIndex = NULL;
    }
    ;

    m_has_enabled = false;

    if (m_enabled)
    {
        delete m_enabled;
        m_enabled = NULL;
    }
    ;

    m_has_calcOnExit = false;

    if (m_calcOnExit)
    {
        delete m_calcOnExit;
        m_calcOnExit = NULL;
    }
    ;

    m_has_entryMacro = false;

    if (m_entryMacro)
    {
        delete m_entryMacro;
        m_entryMacro = NULL;
    }
    ;

    m_has_exitMacro = false;

    if (m_exitMacro)
    {
        delete m_exitMacro;
        m_exitMacro = NULL;
    }
    ;

    m_has_helpText = false;

    if (m_helpText)
    {
        delete m_helpText;
        m_helpText = NULL;
    }
    ;

    m_has_statusText = false;

    if (m_statusText)
    {
        delete m_statusText;
        m_statusText = NULL;
    }
    ;

    m_has_checkBox = false;

    if (m_checkBox)
    {
        delete m_checkBox;
        m_checkBox = NULL;
    }
    ;

    m_has_ddList = false;

    if (m_ddList)
    {
        delete m_ddList;
        m_ddList = NULL;
    }
    ;

    m_has_textInput = false;

    if (m_textInput)
    {
        delete m_textInput;
        m_textInput = NULL;
    }
    ;

    m_has_name = true;
    if (!m_name)
    {
        m_name = new CT_FFName();
    }
    return m_name;
}

const CT_FFName& CT_FFData::ChildGroup_1::get_name() const
{
    if (m_name)
    {
        return *m_name;
    }
    return CT_FFName::default_instance();
}

bool CT_FFData::ChildGroup_1::has_label() const
{
    return m_has_label;
}

CT_DecimalNumber* CT_FFData::ChildGroup_1::mutable_label()
{

    m_has_name = false;

    if (m_name)
    {
        delete m_name;
        m_name = NULL;
    }
    ;

    m_has_tabIndex = false;

    if (m_tabIndex)
    {
        delete m_tabIndex;
        m_tabIndex = NULL;
    }
    ;

    m_has_enabled = false;

    if (m_enabled)
    {
        delete m_enabled;
        m_enabled = NULL;
    }
    ;

    m_has_calcOnExit = false;

    if (m_calcOnExit)
    {
        delete m_calcOnExit;
        m_calcOnExit = NULL;
    }
    ;

    m_has_entryMacro = false;

    if (m_entryMacro)
    {
        delete m_entryMacro;
        m_entryMacro = NULL;
    }
    ;

    m_has_exitMacro = false;

    if (m_exitMacro)
    {
        delete m_exitMacro;
        m_exitMacro = NULL;
    }
    ;

    m_has_helpText = false;

    if (m_helpText)
    {
        delete m_helpText;
        m_helpText = NULL;
    }
    ;

    m_has_statusText = false;

    if (m_statusText)
    {
        delete m_statusText;
        m_statusText = NULL;
    }
    ;

    m_has_checkBox = false;

    if (m_checkBox)
    {
        delete m_checkBox;
        m_checkBox = NULL;
    }
    ;

    m_has_ddList = false;

    if (m_ddList)
    {
        delete m_ddList;
        m_ddList = NULL;
    }
    ;

    m_has_textInput = false;

    if (m_textInput)
    {
        delete m_textInput;
        m_textInput = NULL;
    }
    ;

    m_has_label = true;
    if (!m_label)
    {
        m_label = new CT_DecimalNumber();
    }
    return m_label;
}

const CT_DecimalNumber& CT_FFData::ChildGroup_1::get_label() const
{
    if (m_label)
    {
        return *m_label;
    }
    return CT_DecimalNumber::default_instance();
}

bool CT_FFData::ChildGroup_1::has_tabIndex() const
{
    return m_has_tabIndex;
}

CT_UnsignedDecimalNumber* CT_FFData::ChildGroup_1::mutable_tabIndex()
{

    m_has_name = false;

    if (m_name)
    {
        delete m_name;
        m_name = NULL;
    }
    ;

    m_has_label = false;

    if (m_label)
    {
        delete m_label;
        m_label = NULL;
    }
    ;

    m_has_enabled = false;

    if (m_enabled)
    {
        delete m_enabled;
        m_enabled = NULL;
    }
    ;

    m_has_calcOnExit = false;

    if (m_calcOnExit)
    {
        delete m_calcOnExit;
        m_calcOnExit = NULL;
    }
    ;

    m_has_entryMacro = false;

    if (m_entryMacro)
    {
        delete m_entryMacro;
        m_entryMacro = NULL;
    }
    ;

    m_has_exitMacro = false;

    if (m_exitMacro)
    {
        delete m_exitMacro;
        m_exitMacro = NULL;
    }
    ;

    m_has_helpText = false;

    if (m_helpText)
    {
        delete m_helpText;
        m_helpText = NULL;
    }
    ;

    m_has_statusText = false;

    if (m_statusText)
    {
        delete m_statusText;
        m_statusText = NULL;
    }
    ;

    m_has_checkBox = false;

    if (m_checkBox)
    {
        delete m_checkBox;
        m_checkBox = NULL;
    }
    ;

    m_has_ddList = false;

    if (m_ddList)
    {
        delete m_ddList;
        m_ddList = NULL;
    }
    ;

    m_has_textInput = false;

    if (m_textInput)
    {
        delete m_textInput;
        m_textInput = NULL;
    }
    ;

    m_has_tabIndex = true;
    if (!m_tabIndex)
    {
        m_tabIndex = new CT_UnsignedDecimalNumber();
    }
    return m_tabIndex;
}

const CT_UnsignedDecimalNumber& CT_FFData::ChildGroup_1::get_tabIndex() const
{
    if (m_tabIndex)
    {
        return *m_tabIndex;
    }
    return CT_UnsignedDecimalNumber::default_instance();
}

bool CT_FFData::ChildGroup_1::has_enabled() const
{
    return m_has_enabled;
}

CT_OnOff* CT_FFData::ChildGroup_1::mutable_enabled()
{

    m_has_name = false;

    if (m_name)
    {
        delete m_name;
        m_name = NULL;
    }
    ;

    m_has_label = false;

    if (m_label)
    {
        delete m_label;
        m_label = NULL;
    }
    ;

    m_has_tabIndex = false;

    if (m_tabIndex)
    {
        delete m_tabIndex;
        m_tabIndex = NULL;
    }
    ;

    m_has_calcOnExit = false;

    if (m_calcOnExit)
    {
        delete m_calcOnExit;
        m_calcOnExit = NULL;
    }
    ;

    m_has_entryMacro = false;

    if (m_entryMacro)
    {
        delete m_entryMacro;
        m_entryMacro = NULL;
    }
    ;

    m_has_exitMacro = false;

    if (m_exitMacro)
    {
        delete m_exitMacro;
        m_exitMacro = NULL;
    }
    ;

    m_has_helpText = false;

    if (m_helpText)
    {
        delete m_helpText;
        m_helpText = NULL;
    }
    ;

    m_has_statusText = false;

    if (m_statusText)
    {
        delete m_statusText;
        m_statusText = NULL;
    }
    ;

    m_has_checkBox = false;

    if (m_checkBox)
    {
        delete m_checkBox;
        m_checkBox = NULL;
    }
    ;

    m_has_ddList = false;

    if (m_ddList)
    {
        delete m_ddList;
        m_ddList = NULL;
    }
    ;

    m_has_textInput = false;

    if (m_textInput)
    {
        delete m_textInput;
        m_textInput = NULL;
    }
    ;

    m_has_enabled = true;
    if (!m_enabled)
    {
        m_enabled = new CT_OnOff();
    }
    return m_enabled;
}

const CT_OnOff& CT_FFData::ChildGroup_1::get_enabled() const
{
    if (m_enabled)
    {
        return *m_enabled;
    }
    return CT_OnOff::default_instance();
}

bool CT_FFData::ChildGroup_1::has_calcOnExit() const
{
    return m_has_calcOnExit;
}

CT_OnOff* CT_FFData::ChildGroup_1::mutable_calcOnExit()
{

    m_has_name = false;

    if (m_name)
    {
        delete m_name;
        m_name = NULL;
    }
    ;

    m_has_label = false;

    if (m_label)
    {
        delete m_label;
        m_label = NULL;
    }
    ;

    m_has_tabIndex = false;

    if (m_tabIndex)
    {
        delete m_tabIndex;
        m_tabIndex = NULL;
    }
    ;

    m_has_enabled = false;

    if (m_enabled)
    {
        delete m_enabled;
        m_enabled = NULL;
    }
    ;

    m_has_entryMacro = false;

    if (m_entryMacro)
    {
        delete m_entryMacro;
        m_entryMacro = NULL;
    }
    ;

    m_has_exitMacro = false;

    if (m_exitMacro)
    {
        delete m_exitMacro;
        m_exitMacro = NULL;
    }
    ;

    m_has_helpText = false;

    if (m_helpText)
    {
        delete m_helpText;
        m_helpText = NULL;
    }
    ;

    m_has_statusText = false;

    if (m_statusText)
    {
        delete m_statusText;
        m_statusText = NULL;
    }
    ;

    m_has_checkBox = false;

    if (m_checkBox)
    {
        delete m_checkBox;
        m_checkBox = NULL;
    }
    ;

    m_has_ddList = false;

    if (m_ddList)
    {
        delete m_ddList;
        m_ddList = NULL;
    }
    ;

    m_has_textInput = false;

    if (m_textInput)
    {
        delete m_textInput;
        m_textInput = NULL;
    }
    ;

    m_has_calcOnExit = true;
    if (!m_calcOnExit)
    {
        m_calcOnExit = new CT_OnOff();
    }
    return m_calcOnExit;
}

const CT_OnOff& CT_FFData::ChildGroup_1::get_calcOnExit() const
{
    if (m_calcOnExit)
    {
        return *m_calcOnExit;
    }
    return CT_OnOff::default_instance();
}

bool CT_FFData::ChildGroup_1::has_entryMacro() const
{
    return m_has_entryMacro;
}

CT_MacroName* CT_FFData::ChildGroup_1::mutable_entryMacro()
{

    m_has_name = false;

    if (m_name)
    {
        delete m_name;
        m_name = NULL;
    }
    ;

    m_has_label = false;

    if (m_label)
    {
        delete m_label;
        m_label = NULL;
    }
    ;

    m_has_tabIndex = false;

    if (m_tabIndex)
    {
        delete m_tabIndex;
        m_tabIndex = NULL;
    }
    ;

    m_has_enabled = false;

    if (m_enabled)
    {
        delete m_enabled;
        m_enabled = NULL;
    }
    ;

    m_has_calcOnExit = false;

    if (m_calcOnExit)
    {
        delete m_calcOnExit;
        m_calcOnExit = NULL;
    }
    ;

    m_has_exitMacro = false;

    if (m_exitMacro)
    {
        delete m_exitMacro;
        m_exitMacro = NULL;
    }
    ;

    m_has_helpText = false;

    if (m_helpText)
    {
        delete m_helpText;
        m_helpText = NULL;
    }
    ;

    m_has_statusText = false;

    if (m_statusText)
    {
        delete m_statusText;
        m_statusText = NULL;
    }
    ;

    m_has_checkBox = false;

    if (m_checkBox)
    {
        delete m_checkBox;
        m_checkBox = NULL;
    }
    ;

    m_has_ddList = false;

    if (m_ddList)
    {
        delete m_ddList;
        m_ddList = NULL;
    }
    ;

    m_has_textInput = false;

    if (m_textInput)
    {
        delete m_textInput;
        m_textInput = NULL;
    }
    ;

    m_has_entryMacro = true;
    if (!m_entryMacro)
    {
        m_entryMacro = new CT_MacroName();
    }
    return m_entryMacro;
}

const CT_MacroName& CT_FFData::ChildGroup_1::get_entryMacro() const
{
    if (m_entryMacro)
    {
        return *m_entryMacro;
    }
    return CT_MacroName::default_instance();
}

bool CT_FFData::ChildGroup_1::has_exitMacro() const
{
    return m_has_exitMacro;
}

CT_MacroName* CT_FFData::ChildGroup_1::mutable_exitMacro()
{

    m_has_name = false;

    if (m_name)
    {
        delete m_name;
        m_name = NULL;
    }
    ;

    m_has_label = false;

    if (m_label)
    {
        delete m_label;
        m_label = NULL;
    }
    ;

    m_has_tabIndex = false;

    if (m_tabIndex)
    {
        delete m_tabIndex;
        m_tabIndex = NULL;
    }
    ;

    m_has_enabled = false;

    if (m_enabled)
    {
        delete m_enabled;
        m_enabled = NULL;
    }
    ;

    m_has_calcOnExit = false;

    if (m_calcOnExit)
    {
        delete m_calcOnExit;
        m_calcOnExit = NULL;
    }
    ;

    m_has_entryMacro = false;

    if (m_entryMacro)
    {
        delete m_entryMacro;
        m_entryMacro = NULL;
    }
    ;

    m_has_helpText = false;

    if (m_helpText)
    {
        delete m_helpText;
        m_helpText = NULL;
    }
    ;

    m_has_statusText = false;

    if (m_statusText)
    {
        delete m_statusText;
        m_statusText = NULL;
    }
    ;

    m_has_checkBox = false;

    if (m_checkBox)
    {
        delete m_checkBox;
        m_checkBox = NULL;
    }
    ;

    m_has_ddList = false;

    if (m_ddList)
    {
        delete m_ddList;
        m_ddList = NULL;
    }
    ;

    m_has_textInput = false;

    if (m_textInput)
    {
        delete m_textInput;
        m_textInput = NULL;
    }
    ;

    m_has_exitMacro = true;
    if (!m_exitMacro)
    {
        m_exitMacro = new CT_MacroName();
    }
    return m_exitMacro;
}

const CT_MacroName& CT_FFData::ChildGroup_1::get_exitMacro() const
{
    if (m_exitMacro)
    {
        return *m_exitMacro;
    }
    return CT_MacroName::default_instance();
}

bool CT_FFData::ChildGroup_1::has_helpText() const
{
    return m_has_helpText;
}

CT_FFHelpText* CT_FFData::ChildGroup_1::mutable_helpText()
{

    m_has_name = false;

    if (m_name)
    {
        delete m_name;
        m_name = NULL;
    }
    ;

    m_has_label = false;

    if (m_label)
    {
        delete m_label;
        m_label = NULL;
    }
    ;

    m_has_tabIndex = false;

    if (m_tabIndex)
    {
        delete m_tabIndex;
        m_tabIndex = NULL;
    }
    ;

    m_has_enabled = false;

    if (m_enabled)
    {
        delete m_enabled;
        m_enabled = NULL;
    }
    ;

    m_has_calcOnExit = false;

    if (m_calcOnExit)
    {
        delete m_calcOnExit;
        m_calcOnExit = NULL;
    }
    ;

    m_has_entryMacro = false;

    if (m_entryMacro)
    {
        delete m_entryMacro;
        m_entryMacro = NULL;
    }
    ;

    m_has_exitMacro = false;

    if (m_exitMacro)
    {
        delete m_exitMacro;
        m_exitMacro = NULL;
    }
    ;

    m_has_statusText = false;

    if (m_statusText)
    {
        delete m_statusText;
        m_statusText = NULL;
    }
    ;

    m_has_checkBox = false;

    if (m_checkBox)
    {
        delete m_checkBox;
        m_checkBox = NULL;
    }
    ;

    m_has_ddList = false;

    if (m_ddList)
    {
        delete m_ddList;
        m_ddList = NULL;
    }
    ;

    m_has_textInput = false;

    if (m_textInput)
    {
        delete m_textInput;
        m_textInput = NULL;
    }
    ;

    m_has_helpText = true;
    if (!m_helpText)
    {
        m_helpText = new CT_FFHelpText();
    }
    return m_helpText;
}

const CT_FFHelpText& CT_FFData::ChildGroup_1::get_helpText() const
{
    if (m_helpText)
    {
        return *m_helpText;
    }
    return CT_FFHelpText::default_instance();
}

bool CT_FFData::ChildGroup_1::has_statusText() const
{
    return m_has_statusText;
}

CT_FFStatusText* CT_FFData::ChildGroup_1::mutable_statusText()
{

    m_has_name = false;

    if (m_name)
    {
        delete m_name;
        m_name = NULL;
    }
    ;

    m_has_label = false;

    if (m_label)
    {
        delete m_label;
        m_label = NULL;
    }
    ;

    m_has_tabIndex = false;

    if (m_tabIndex)
    {
        delete m_tabIndex;
        m_tabIndex = NULL;
    }
    ;

    m_has_enabled = false;

    if (m_enabled)
    {
        delete m_enabled;
        m_enabled = NULL;
    }
    ;

    m_has_calcOnExit = false;

    if (m_calcOnExit)
    {
        delete m_calcOnExit;
        m_calcOnExit = NULL;
    }
    ;

    m_has_entryMacro = false;

    if (m_entryMacro)
    {
        delete m_entryMacro;
        m_entryMacro = NULL;
    }
    ;

    m_has_exitMacro = false;

    if (m_exitMacro)
    {
        delete m_exitMacro;
        m_exitMacro = NULL;
    }
    ;

    m_has_helpText = false;

    if (m_helpText)
    {
        delete m_helpText;
        m_helpText = NULL;
    }
    ;

    m_has_checkBox = false;

    if (m_checkBox)
    {
        delete m_checkBox;
        m_checkBox = NULL;
    }
    ;

    m_has_ddList = false;

    if (m_ddList)
    {
        delete m_ddList;
        m_ddList = NULL;
    }
    ;

    m_has_textInput = false;

    if (m_textInput)
    {
        delete m_textInput;
        m_textInput = NULL;
    }
    ;

    m_has_statusText = true;
    if (!m_statusText)
    {
        m_statusText = new CT_FFStatusText();
    }
    return m_statusText;
}

const CT_FFStatusText& CT_FFData::ChildGroup_1::get_statusText() const
{
    if (m_statusText)
    {
        return *m_statusText;
    }
    return CT_FFStatusText::default_instance();
}

bool CT_FFData::ChildGroup_1::has_checkBox() const
{
    return m_has_checkBox;
}

CT_FFCheckBox* CT_FFData::ChildGroup_1::mutable_checkBox()
{

    m_has_name = false;

    if (m_name)
    {
        delete m_name;
        m_name = NULL;
    }
    ;

    m_has_label = false;

    if (m_label)
    {
        delete m_label;
        m_label = NULL;
    }
    ;

    m_has_tabIndex = false;

    if (m_tabIndex)
    {
        delete m_tabIndex;
        m_tabIndex = NULL;
    }
    ;

    m_has_enabled = false;

    if (m_enabled)
    {
        delete m_enabled;
        m_enabled = NULL;
    }
    ;

    m_has_calcOnExit = false;

    if (m_calcOnExit)
    {
        delete m_calcOnExit;
        m_calcOnExit = NULL;
    }
    ;

    m_has_entryMacro = false;

    if (m_entryMacro)
    {
        delete m_entryMacro;
        m_entryMacro = NULL;
    }
    ;

    m_has_exitMacro = false;

    if (m_exitMacro)
    {
        delete m_exitMacro;
        m_exitMacro = NULL;
    }
    ;

    m_has_helpText = false;

    if (m_helpText)
    {
        delete m_helpText;
        m_helpText = NULL;
    }
    ;

    m_has_statusText = false;

    if (m_statusText)
    {
        delete m_statusText;
        m_statusText = NULL;
    }
    ;

    m_has_ddList = false;

    if (m_ddList)
    {
        delete m_ddList;
        m_ddList = NULL;
    }
    ;

    m_has_textInput = false;

    if (m_textInput)
    {
        delete m_textInput;
        m_textInput = NULL;
    }
    ;

    m_has_checkBox = true;
    if (!m_checkBox)
    {
        m_checkBox = new CT_FFCheckBox();
    }
    return m_checkBox;
}

const CT_FFCheckBox& CT_FFData::ChildGroup_1::get_checkBox() const
{
    if (m_checkBox)
    {
        return *m_checkBox;
    }
    return CT_FFCheckBox::default_instance();
}

bool CT_FFData::ChildGroup_1::has_ddList() const
{
    return m_has_ddList;
}

CT_FFDDList* CT_FFData::ChildGroup_1::mutable_ddList()
{

    m_has_name = false;

    if (m_name)
    {
        delete m_name;
        m_name = NULL;
    }
    ;

    m_has_label = false;

    if (m_label)
    {
        delete m_label;
        m_label = NULL;
    }
    ;

    m_has_tabIndex = false;

    if (m_tabIndex)
    {
        delete m_tabIndex;
        m_tabIndex = NULL;
    }
    ;

    m_has_enabled = false;

    if (m_enabled)
    {
        delete m_enabled;
        m_enabled = NULL;
    }
    ;

    m_has_calcOnExit = false;

    if (m_calcOnExit)
    {
        delete m_calcOnExit;
        m_calcOnExit = NULL;
    }
    ;

    m_has_entryMacro = false;

    if (m_entryMacro)
    {
        delete m_entryMacro;
        m_entryMacro = NULL;
    }
    ;

    m_has_exitMacro = false;

    if (m_exitMacro)
    {
        delete m_exitMacro;
        m_exitMacro = NULL;
    }
    ;

    m_has_helpText = false;

    if (m_helpText)
    {
        delete m_helpText;
        m_helpText = NULL;
    }
    ;

    m_has_statusText = false;

    if (m_statusText)
    {
        delete m_statusText;
        m_statusText = NULL;
    }
    ;

    m_has_checkBox = false;

    if (m_checkBox)
    {
        delete m_checkBox;
        m_checkBox = NULL;
    }
    ;

    m_has_textInput = false;

    if (m_textInput)
    {
        delete m_textInput;
        m_textInput = NULL;
    }
    ;

    m_has_ddList = true;
    if (!m_ddList)
    {
        m_ddList = new CT_FFDDList();
    }
    return m_ddList;
}

const CT_FFDDList& CT_FFData::ChildGroup_1::get_ddList() const
{
    if (m_ddList)
    {
        return *m_ddList;
    }
    return CT_FFDDList::default_instance();
}

bool CT_FFData::ChildGroup_1::has_textInput() const
{
    return m_has_textInput;
}

CT_FFTextInput* CT_FFData::ChildGroup_1::mutable_textInput()
{

    m_has_name = false;

    if (m_name)
    {
        delete m_name;
        m_name = NULL;
    }
    ;

    m_has_label = false;

    if (m_label)
    {
        delete m_label;
        m_label = NULL;
    }
    ;

    m_has_tabIndex = false;

    if (m_tabIndex)
    {
        delete m_tabIndex;
        m_tabIndex = NULL;
    }
    ;

    m_has_enabled = false;

    if (m_enabled)
    {
        delete m_enabled;
        m_enabled = NULL;
    }
    ;

    m_has_calcOnExit = false;

    if (m_calcOnExit)
    {
        delete m_calcOnExit;
        m_calcOnExit = NULL;
    }
    ;

    m_has_entryMacro = false;

    if (m_entryMacro)
    {
        delete m_entryMacro;
        m_entryMacro = NULL;
    }
    ;

    m_has_exitMacro = false;

    if (m_exitMacro)
    {
        delete m_exitMacro;
        m_exitMacro = NULL;
    }
    ;

    m_has_helpText = false;

    if (m_helpText)
    {
        delete m_helpText;
        m_helpText = NULL;
    }
    ;

    m_has_statusText = false;

    if (m_statusText)
    {
        delete m_statusText;
        m_statusText = NULL;
    }
    ;

    m_has_checkBox = false;

    if (m_checkBox)
    {
        delete m_checkBox;
        m_checkBox = NULL;
    }
    ;

    m_has_ddList = false;

    if (m_ddList)
    {
        delete m_ddList;
        m_ddList = NULL;
    }
    ;

    m_has_textInput = true;
    if (!m_textInput)
    {
        m_textInput = new CT_FFTextInput();
    }
    return m_textInput;
}

const CT_FFTextInput& CT_FFData::ChildGroup_1::get_textInput() const
{
    if (m_textInput)
    {
        return *m_textInput;
    }
    return CT_FFTextInput::default_instance();
}

CT_FFData* CT_FFData::default_instance_ = NULL;

// CT_FFHelpText
CT_FFHelpText::CT_FFHelpText()
    :m_has_type_attr(false),
     m_type_attr(NULL),
     m_has_val_attr(false),
     m_val_attr(NULL)
{
}
CT_FFHelpText::~CT_FFHelpText()
{
    clear();
}
void CT_FFHelpText::clear()
{
    m_has_type_attr = false;

    if (m_type_attr)
    {
        delete m_type_attr;
        m_type_attr = NULL;
    }


    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }

}

void CT_FFHelpText::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_type_attr)
    {
        m_type_attr->toXmlAttr("w:type", _outStream);
    }



    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_FFHelpText& CT_FFHelpText::default_instance()
{
    if (!CT_FFHelpText::default_instance_)
    {
        CT_FFHelpText::default_instance_ = new CT_FFHelpText();
    }
    return *CT_FFHelpText::default_instance_;
}

bool CT_FFHelpText::has_type_attr() const
{
    return m_has_type_attr;
}

void CT_FFHelpText::set_type_attr(const ST_InfoTextType& _type_attr)
{
    m_has_type_attr = true;
    m_type_attr = new ST_InfoTextType(_type_attr);
}

const ST_InfoTextType& CT_FFHelpText::get_type_attr() const
{
    if (m_type_attr)
    {
        return *m_type_attr;
    }
    return ST_InfoTextType::default_instance();
}

bool CT_FFHelpText::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_FFHelpText::set_val_attr(const ST_FFHelpTextVal& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ST_FFHelpTextVal(_val_attr);
}

const ST_FFHelpTextVal& CT_FFHelpText::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ST_FFHelpTextVal::default_instance();
}

CT_FFHelpText* CT_FFHelpText::default_instance_ = NULL;

// CT_FFStatusText
CT_FFStatusText::CT_FFStatusText()
    :m_has_type_attr(false),
     m_type_attr(NULL),
     m_has_val_attr(false),
     m_val_attr(NULL)
{
}
CT_FFStatusText::~CT_FFStatusText()
{
    clear();
}
void CT_FFStatusText::clear()
{
    m_has_type_attr = false;

    if (m_type_attr)
    {
        delete m_type_attr;
        m_type_attr = NULL;
    }


    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }

}

void CT_FFStatusText::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_type_attr)
    {
        m_type_attr->toXmlAttr("w:type", _outStream);
    }



    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_FFStatusText& CT_FFStatusText::default_instance()
{
    if (!CT_FFStatusText::default_instance_)
    {
        CT_FFStatusText::default_instance_ = new CT_FFStatusText();
    }
    return *CT_FFStatusText::default_instance_;
}

bool CT_FFStatusText::has_type_attr() const
{
    return m_has_type_attr;
}

void CT_FFStatusText::set_type_attr(const ST_InfoTextType& _type_attr)
{
    m_has_type_attr = true;
    m_type_attr = new ST_InfoTextType(_type_attr);
}

const ST_InfoTextType& CT_FFStatusText::get_type_attr() const
{
    if (m_type_attr)
    {
        return *m_type_attr;
    }
    return ST_InfoTextType::default_instance();
}

bool CT_FFStatusText::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_FFStatusText::set_val_attr(const ST_FFStatusTextVal& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ST_FFStatusTextVal(_val_attr);
}

const ST_FFStatusTextVal& CT_FFStatusText::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ST_FFStatusTextVal::default_instance();
}

CT_FFStatusText* CT_FFStatusText::default_instance_ = NULL;

// CT_FFCheckBox
CT_FFCheckBox::CT_FFCheckBox()
    :m_has_size(false),
     m_size(NULL),
     m_has_sizeAuto(false),
     m_sizeAuto(NULL),
     m_has_default(false),
     m_default(NULL),
     m_has_checked(false),
     m_checked(NULL)
{
}
CT_FFCheckBox::~CT_FFCheckBox()
{
    clear();
}
bool CT_FFCheckBox::has_size() const
{
    return m_has_size;
}

CT_HpsMeasure* CT_FFCheckBox::mutable_size()
{

    m_has_sizeAuto = false;

    if (m_sizeAuto)
    {
        delete m_sizeAuto;
        m_sizeAuto = NULL;
    }
    ;

    m_has_size = true;
    if (!m_size)
    {
        m_size = new CT_HpsMeasure();
    }
    return m_size;
}

const CT_HpsMeasure& CT_FFCheckBox::get_size() const
{
    if (m_size)
    {
        return *m_size;
    }
    return CT_HpsMeasure::default_instance();
}

bool CT_FFCheckBox::has_sizeAuto() const
{
    return m_has_sizeAuto;
}

CT_OnOff* CT_FFCheckBox::mutable_sizeAuto()
{

    m_has_size = false;

    if (m_size)
    {
        delete m_size;
        m_size = NULL;
    }
    ;

    m_has_sizeAuto = true;
    if (!m_sizeAuto)
    {
        m_sizeAuto = new CT_OnOff();
    }
    return m_sizeAuto;
}

const CT_OnOff& CT_FFCheckBox::get_sizeAuto() const
{
    if (m_sizeAuto)
    {
        return *m_sizeAuto;
    }
    return CT_OnOff::default_instance();
}

bool CT_FFCheckBox::has_default() const
{
    return m_has_default;
}

CT_OnOff* CT_FFCheckBox::mutable_default()
{
    m_has_default = true;
    if (!m_default)
    {
        m_default = new CT_OnOff();
    }
    return m_default;
}

const CT_OnOff& CT_FFCheckBox::get_default() const
{
    if (m_default)
    {
        return *m_default;
    }
    return CT_OnOff::default_instance();
}

bool CT_FFCheckBox::has_checked() const
{
    return m_has_checked;
}

CT_OnOff* CT_FFCheckBox::mutable_checked()
{
    m_has_checked = true;
    if (!m_checked)
    {
        m_checked = new CT_OnOff();
    }
    return m_checked;
}

const CT_OnOff& CT_FFCheckBox::get_checked() const
{
    if (m_checked)
    {
        return *m_checked;
    }
    return CT_OnOff::default_instance();
}

void CT_FFCheckBox::clear()
{
    m_has_size = false;

    if (m_size)
    {
        delete m_size;
        m_size = NULL;
    }


    m_has_sizeAuto = false;

    if (m_sizeAuto)
    {
        delete m_sizeAuto;
        m_sizeAuto = NULL;
    }


    m_has_default = false;

    if (m_default)
    {
        delete m_default;
        m_default = NULL;
    }


    m_has_checked = false;

    if (m_checked)
    {
        delete m_checked;
        m_checked = NULL;
    }

}

void CT_FFCheckBox::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";

    {
        bool elemHasValueList[2] = {m_has_size, m_has_sizeAuto};
        int cnt = count(elemHasValueList, elemHasValueList + 2, true);
        assert(cnt == 1);
    }


    if (m_has_size)
    {
        m_size->toXmlElem("w:size", "", _outStream);
    }


    if (m_has_sizeAuto)
    {
        m_sizeAuto->toXmlElem("w:sizeAuto", "", _outStream);
    }


    if (m_has_default)
    {
        m_default->toXmlElem("w:default", "", _outStream);
    }


    if (m_has_checked)
    {
        m_checked->toXmlElem("w:checked", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_FFCheckBox& CT_FFCheckBox::default_instance()
{
    if (!CT_FFCheckBox::default_instance_)
    {
        CT_FFCheckBox::default_instance_ = new CT_FFCheckBox();
    }
    return *CT_FFCheckBox::default_instance_;
}

CT_FFCheckBox* CT_FFCheckBox::default_instance_ = NULL;

// CT_FFDDList
CT_FFDDList::CT_FFDDList()
    :m_has_result(false),
     m_result(NULL),
     m_has_default(false),
     m_default(NULL)
{
}
CT_FFDDList::~CT_FFDDList()
{
    clear();
}
bool CT_FFDDList::has_result() const
{
    return m_has_result;
}

CT_DecimalNumber* CT_FFDDList::mutable_result()
{
    m_has_result = true;
    if (!m_result)
    {
        m_result = new CT_DecimalNumber();
    }
    return m_result;
}

const CT_DecimalNumber& CT_FFDDList::get_result() const
{
    if (m_result)
    {
        return *m_result;
    }
    return CT_DecimalNumber::default_instance();
}

bool CT_FFDDList::has_default() const
{
    return m_has_default;
}

CT_DecimalNumber* CT_FFDDList::mutable_default()
{
    m_has_default = true;
    if (!m_default)
    {
        m_default = new CT_DecimalNumber();
    }
    return m_default;
}

const CT_DecimalNumber& CT_FFDDList::get_default() const
{
    if (m_default)
    {
        return *m_default;
    }
    return CT_DecimalNumber::default_instance();
}

CT_String* CT_FFDDList::add_listEntry()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_String* pNewChild = pChildGroup->mutable_listEntry();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

void CT_FFDDList::clear()
{
    m_has_result = false;

    if (m_result)
    {
        delete m_result;
        m_result = NULL;
    }


    m_has_default = false;

    if (m_default)
    {
        delete m_default;
        m_default = NULL;
    }


    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
}

void CT_FFDDList::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";


    if (m_has_result)
    {
        m_result->toXmlElem("w:result", "", _outStream);
    }


    if (m_has_default)
    {
        m_default->toXmlElem("w:default", "", _outStream);
    }

    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_listEntry())
            {
                (*iter)->get_listEntry().toXmlElem("w:listEntry", "", _outStream);
            }


        }
    }

    _outStream << "</" << _elemName << ">";
}

const CT_FFDDList& CT_FFDDList::default_instance()
{
    if (!CT_FFDDList::default_instance_)
    {
        CT_FFDDList::default_instance_ = new CT_FFDDList();
    }
    return *CT_FFDDList::default_instance_;
}


// CT_FFDDList::ChildGroup_1
CT_FFDDList::ChildGroup_1::ChildGroup_1()
    :m_has_listEntry(false),
     m_listEntry(NULL)
{
}
bool CT_FFDDList::ChildGroup_1::has_listEntry() const
{
    return m_has_listEntry;
}

CT_String* CT_FFDDList::ChildGroup_1::mutable_listEntry()
{

    m_has_listEntry = true;
    if (!m_listEntry)
    {
        m_listEntry = new CT_String();
    }
    return m_listEntry;
}

const CT_String& CT_FFDDList::ChildGroup_1::get_listEntry() const
{
    if (m_listEntry)
    {
        return *m_listEntry;
    }
    return CT_String::default_instance();
}

CT_FFDDList* CT_FFDDList::default_instance_ = NULL;

// CT_FFTextInput
CT_FFTextInput::CT_FFTextInput()
    :m_has_type(false),
     m_type(NULL),
     m_has_default(false),
     m_default(NULL),
     m_has_maxLength(false),
     m_maxLength(NULL),
     m_has_format(false),
     m_format(NULL)
{
}
CT_FFTextInput::~CT_FFTextInput()
{
    clear();
}
bool CT_FFTextInput::has_type() const
{
    return m_has_type;
}

CT_FFTextType* CT_FFTextInput::mutable_type()
{
    m_has_type = true;
    if (!m_type)
    {
        m_type = new CT_FFTextType();
    }
    return m_type;
}

const CT_FFTextType& CT_FFTextInput::get_type() const
{
    if (m_type)
    {
        return *m_type;
    }
    return CT_FFTextType::default_instance();
}

bool CT_FFTextInput::has_default() const
{
    return m_has_default;
}

CT_String* CT_FFTextInput::mutable_default()
{
    m_has_default = true;
    if (!m_default)
    {
        m_default = new CT_String();
    }
    return m_default;
}

const CT_String& CT_FFTextInput::get_default() const
{
    if (m_default)
    {
        return *m_default;
    }
    return CT_String::default_instance();
}

bool CT_FFTextInput::has_maxLength() const
{
    return m_has_maxLength;
}

CT_DecimalNumber* CT_FFTextInput::mutable_maxLength()
{
    m_has_maxLength = true;
    if (!m_maxLength)
    {
        m_maxLength = new CT_DecimalNumber();
    }
    return m_maxLength;
}

const CT_DecimalNumber& CT_FFTextInput::get_maxLength() const
{
    if (m_maxLength)
    {
        return *m_maxLength;
    }
    return CT_DecimalNumber::default_instance();
}

bool CT_FFTextInput::has_format() const
{
    return m_has_format;
}

CT_String* CT_FFTextInput::mutable_format()
{
    m_has_format = true;
    if (!m_format)
    {
        m_format = new CT_String();
    }
    return m_format;
}

const CT_String& CT_FFTextInput::get_format() const
{
    if (m_format)
    {
        return *m_format;
    }
    return CT_String::default_instance();
}

void CT_FFTextInput::clear()
{
    m_has_type = false;

    if (m_type)
    {
        delete m_type;
        m_type = NULL;
    }


    m_has_default = false;

    if (m_default)
    {
        delete m_default;
        m_default = NULL;
    }


    m_has_maxLength = false;

    if (m_maxLength)
    {
        delete m_maxLength;
        m_maxLength = NULL;
    }


    m_has_format = false;

    if (m_format)
    {
        delete m_format;
        m_format = NULL;
    }

}

void CT_FFTextInput::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";


    if (m_has_type)
    {
        m_type->toXmlElem("w:type", "", _outStream);
    }


    if (m_has_default)
    {
        m_default->toXmlElem("w:default", "", _outStream);
    }


    if (m_has_maxLength)
    {
        m_maxLength->toXmlElem("w:maxLength", "", _outStream);
    }


    if (m_has_format)
    {
        m_format->toXmlElem("w:format", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_FFTextInput& CT_FFTextInput::default_instance()
{
    if (!CT_FFTextInput::default_instance_)
    {
        CT_FFTextInput::default_instance_ = new CT_FFTextInput();
    }
    return *CT_FFTextInput::default_instance_;
}

CT_FFTextInput* CT_FFTextInput::default_instance_ = NULL;

// CT_SectType
CT_SectType::CT_SectType()
    :m_has_val_attr(false),
     m_val_attr(NULL)
{
}
CT_SectType::~CT_SectType()
{
    clear();
}
void CT_SectType::clear()
{
    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }

}

void CT_SectType::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_SectType& CT_SectType::default_instance()
{
    if (!CT_SectType::default_instance_)
    {
        CT_SectType::default_instance_ = new CT_SectType();
    }
    return *CT_SectType::default_instance_;
}

bool CT_SectType::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_SectType::set_val_attr(const ST_SectionMark& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ST_SectionMark(_val_attr);
}

const ST_SectionMark& CT_SectType::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ST_SectionMark::default_instance();
}

CT_SectType* CT_SectType::default_instance_ = NULL;

// CT_PaperSource
CT_PaperSource::CT_PaperSource()
    :m_has_first_attr(false),
     m_first_attr(NULL),
     m_has_other_attr(false),
     m_other_attr(NULL)
{
}
CT_PaperSource::~CT_PaperSource()
{
    clear();
}
void CT_PaperSource::clear()
{
    m_has_first_attr = false;

    if (m_first_attr)
    {
        delete m_first_attr;
        m_first_attr = NULL;
    }


    m_has_other_attr = false;

    if (m_other_attr)
    {
        delete m_other_attr;
        m_other_attr = NULL;
    }

}

void CT_PaperSource::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_first_attr)
    {
        m_first_attr->toXmlAttr("w:first", _outStream);
    }



    if (m_has_other_attr)
    {
        m_other_attr->toXmlAttr("w:other", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_PaperSource& CT_PaperSource::default_instance()
{
    if (!CT_PaperSource::default_instance_)
    {
        CT_PaperSource::default_instance_ = new CT_PaperSource();
    }
    return *CT_PaperSource::default_instance_;
}

bool CT_PaperSource::has_first_attr() const
{
    return m_has_first_attr;
}

void CT_PaperSource::set_first_attr(const ST_DecimalNumber& _first_attr)
{
    m_has_first_attr = true;
    m_first_attr = new ST_DecimalNumber(_first_attr);
}

const ST_DecimalNumber& CT_PaperSource::get_first_attr() const
{
    if (m_first_attr)
    {
        return *m_first_attr;
    }
    return ST_DecimalNumber::default_instance();
}

bool CT_PaperSource::has_other_attr() const
{
    return m_has_other_attr;
}

void CT_PaperSource::set_other_attr(const ST_DecimalNumber& _other_attr)
{
    m_has_other_attr = true;
    m_other_attr = new ST_DecimalNumber(_other_attr);
}

const ST_DecimalNumber& CT_PaperSource::get_other_attr() const
{
    if (m_other_attr)
    {
        return *m_other_attr;
    }
    return ST_DecimalNumber::default_instance();
}

CT_PaperSource* CT_PaperSource::default_instance_ = NULL;

// CT_PageSz
CT_PageSz::CT_PageSz()
    :m_has_w_attr(false),
     m_w_attr(NULL),
     m_has_h_attr(false),
     m_h_attr(NULL),
     m_has_orient_attr(false),
     m_orient_attr(NULL),
     m_has_code_attr(false),
     m_code_attr(NULL)
{
}
CT_PageSz::~CT_PageSz()
{
    clear();
}
void CT_PageSz::clear()
{
    m_has_w_attr = false;

    if (m_w_attr)
    {
        delete m_w_attr;
        m_w_attr = NULL;
    }


    m_has_h_attr = false;

    if (m_h_attr)
    {
        delete m_h_attr;
        m_h_attr = NULL;
    }


    m_has_orient_attr = false;

    if (m_orient_attr)
    {
        delete m_orient_attr;
        m_orient_attr = NULL;
    }


    m_has_code_attr = false;

    if (m_code_attr)
    {
        delete m_code_attr;
        m_code_attr = NULL;
    }

}

void CT_PageSz::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_w_attr)
    {
        m_w_attr->toXmlAttr("w:w", _outStream);
    }



    if (m_has_h_attr)
    {
        m_h_attr->toXmlAttr("w:h", _outStream);
    }



    if (m_has_orient_attr)
    {
        m_orient_attr->toXmlAttr("w:orient", _outStream);
    }



    if (m_has_code_attr)
    {
        m_code_attr->toXmlAttr("w:code", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_PageSz& CT_PageSz::default_instance()
{
    if (!CT_PageSz::default_instance_)
    {
        CT_PageSz::default_instance_ = new CT_PageSz();
    }
    return *CT_PageSz::default_instance_;
}

bool CT_PageSz::has_w_attr() const
{
    return m_has_w_attr;
}

void CT_PageSz::set_w_attr(const ns_s::ST_TwipsMeasure& _w_attr)
{
    m_has_w_attr = true;
    m_w_attr = new ns_s::ST_TwipsMeasure(_w_attr);
}

const ns_s::ST_TwipsMeasure& CT_PageSz::get_w_attr() const
{
    if (m_w_attr)
    {
        return *m_w_attr;
    }
    return ns_s::ST_TwipsMeasure::default_instance();
}

bool CT_PageSz::has_h_attr() const
{
    return m_has_h_attr;
}

void CT_PageSz::set_h_attr(const ns_s::ST_TwipsMeasure& _h_attr)
{
    m_has_h_attr = true;
    m_h_attr = new ns_s::ST_TwipsMeasure(_h_attr);
}

const ns_s::ST_TwipsMeasure& CT_PageSz::get_h_attr() const
{
    if (m_h_attr)
    {
        return *m_h_attr;
    }
    return ns_s::ST_TwipsMeasure::default_instance();
}

bool CT_PageSz::has_orient_attr() const
{
    return m_has_orient_attr;
}

void CT_PageSz::set_orient_attr(const ST_PageOrientation& _orient_attr)
{
    m_has_orient_attr = true;
    m_orient_attr = new ST_PageOrientation(_orient_attr);
}

const ST_PageOrientation& CT_PageSz::get_orient_attr() const
{
    if (m_orient_attr)
    {
        return *m_orient_attr;
    }
    return ST_PageOrientation::default_instance();
}

bool CT_PageSz::has_code_attr() const
{
    return m_has_code_attr;
}

void CT_PageSz::set_code_attr(const ST_DecimalNumber& _code_attr)
{
    m_has_code_attr = true;
    m_code_attr = new ST_DecimalNumber(_code_attr);
}

const ST_DecimalNumber& CT_PageSz::get_code_attr() const
{
    if (m_code_attr)
    {
        return *m_code_attr;
    }
    return ST_DecimalNumber::default_instance();
}

CT_PageSz* CT_PageSz::default_instance_ = NULL;

// CT_PageMar
CT_PageMar::CT_PageMar()
    :m_has_top_attr(false),
     m_top_attr(NULL),
     m_has_right_attr(false),
     m_right_attr(NULL),
     m_has_bottom_attr(false),
     m_bottom_attr(NULL),
     m_has_left_attr(false),
     m_left_attr(NULL),
     m_has_header_attr(false),
     m_header_attr(NULL),
     m_has_footer_attr(false),
     m_footer_attr(NULL),
     m_has_gutter_attr(false),
     m_gutter_attr(NULL)
{
}
CT_PageMar::~CT_PageMar()
{
    clear();
}
void CT_PageMar::clear()
{
    m_has_top_attr = false;

    if (m_top_attr)
    {
        delete m_top_attr;
        m_top_attr = NULL;
    }


    m_has_right_attr = false;

    if (m_right_attr)
    {
        delete m_right_attr;
        m_right_attr = NULL;
    }


    m_has_bottom_attr = false;

    if (m_bottom_attr)
    {
        delete m_bottom_attr;
        m_bottom_attr = NULL;
    }


    m_has_left_attr = false;

    if (m_left_attr)
    {
        delete m_left_attr;
        m_left_attr = NULL;
    }


    m_has_header_attr = false;

    if (m_header_attr)
    {
        delete m_header_attr;
        m_header_attr = NULL;
    }


    m_has_footer_attr = false;

    if (m_footer_attr)
    {
        delete m_footer_attr;
        m_footer_attr = NULL;
    }


    m_has_gutter_attr = false;

    if (m_gutter_attr)
    {
        delete m_gutter_attr;
        m_gutter_attr = NULL;
    }

}

void CT_PageMar::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_top_attr);
    if (m_has_top_attr)
    {
        m_top_attr->toXmlAttr("w:top", _outStream);
    }


    assert(m_has_right_attr);
    if (m_has_right_attr)
    {
        m_right_attr->toXmlAttr("w:right", _outStream);
    }


    assert(m_has_bottom_attr);
    if (m_has_bottom_attr)
    {
        m_bottom_attr->toXmlAttr("w:bottom", _outStream);
    }


    assert(m_has_left_attr);
    if (m_has_left_attr)
    {
        m_left_attr->toXmlAttr("w:left", _outStream);
    }


    assert(m_has_header_attr);
    if (m_has_header_attr)
    {
        m_header_attr->toXmlAttr("w:header", _outStream);
    }


    assert(m_has_footer_attr);
    if (m_has_footer_attr)
    {
        m_footer_attr->toXmlAttr("w:footer", _outStream);
    }


    assert(m_has_gutter_attr);
    if (m_has_gutter_attr)
    {
        m_gutter_attr->toXmlAttr("w:gutter", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_PageMar& CT_PageMar::default_instance()
{
    if (!CT_PageMar::default_instance_)
    {
        CT_PageMar::default_instance_ = new CT_PageMar();
    }
    return *CT_PageMar::default_instance_;
}

bool CT_PageMar::has_top_attr() const
{
    return m_has_top_attr;
}

void CT_PageMar::set_top_attr(const ST_SignedTwipsMeasure& _top_attr)
{
    m_has_top_attr = true;
    m_top_attr = new ST_SignedTwipsMeasure(_top_attr);
}

const ST_SignedTwipsMeasure& CT_PageMar::get_top_attr() const
{
    if (m_top_attr)
    {
        return *m_top_attr;
    }
    return ST_SignedTwipsMeasure::default_instance();
}

bool CT_PageMar::has_right_attr() const
{
    return m_has_right_attr;
}

void CT_PageMar::set_right_attr(const ns_s::ST_TwipsMeasure& _right_attr)
{
    m_has_right_attr = true;
    m_right_attr = new ns_s::ST_TwipsMeasure(_right_attr);
}

const ns_s::ST_TwipsMeasure& CT_PageMar::get_right_attr() const
{
    if (m_right_attr)
    {
        return *m_right_attr;
    }
    return ns_s::ST_TwipsMeasure::default_instance();
}

bool CT_PageMar::has_bottom_attr() const
{
    return m_has_bottom_attr;
}

void CT_PageMar::set_bottom_attr(const ST_SignedTwipsMeasure& _bottom_attr)
{
    m_has_bottom_attr = true;
    m_bottom_attr = new ST_SignedTwipsMeasure(_bottom_attr);
}

const ST_SignedTwipsMeasure& CT_PageMar::get_bottom_attr() const
{
    if (m_bottom_attr)
    {
        return *m_bottom_attr;
    }
    return ST_SignedTwipsMeasure::default_instance();
}

bool CT_PageMar::has_left_attr() const
{
    return m_has_left_attr;
}

void CT_PageMar::set_left_attr(const ns_s::ST_TwipsMeasure& _left_attr)
{
    m_has_left_attr = true;
    m_left_attr = new ns_s::ST_TwipsMeasure(_left_attr);
}

const ns_s::ST_TwipsMeasure& CT_PageMar::get_left_attr() const
{
    if (m_left_attr)
    {
        return *m_left_attr;
    }
    return ns_s::ST_TwipsMeasure::default_instance();
}

bool CT_PageMar::has_header_attr() const
{
    return m_has_header_attr;
}

void CT_PageMar::set_header_attr(const ns_s::ST_TwipsMeasure& _header_attr)
{
    m_has_header_attr = true;
    m_header_attr = new ns_s::ST_TwipsMeasure(_header_attr);
}

const ns_s::ST_TwipsMeasure& CT_PageMar::get_header_attr() const
{
    if (m_header_attr)
    {
        return *m_header_attr;
    }
    return ns_s::ST_TwipsMeasure::default_instance();
}

bool CT_PageMar::has_footer_attr() const
{
    return m_has_footer_attr;
}

void CT_PageMar::set_footer_attr(const ns_s::ST_TwipsMeasure& _footer_attr)
{
    m_has_footer_attr = true;
    m_footer_attr = new ns_s::ST_TwipsMeasure(_footer_attr);
}

const ns_s::ST_TwipsMeasure& CT_PageMar::get_footer_attr() const
{
    if (m_footer_attr)
    {
        return *m_footer_attr;
    }
    return ns_s::ST_TwipsMeasure::default_instance();
}

bool CT_PageMar::has_gutter_attr() const
{
    return m_has_gutter_attr;
}

void CT_PageMar::set_gutter_attr(const ns_s::ST_TwipsMeasure& _gutter_attr)
{
    m_has_gutter_attr = true;
    m_gutter_attr = new ns_s::ST_TwipsMeasure(_gutter_attr);
}

const ns_s::ST_TwipsMeasure& CT_PageMar::get_gutter_attr() const
{
    if (m_gutter_attr)
    {
        return *m_gutter_attr;
    }
    return ns_s::ST_TwipsMeasure::default_instance();
}

CT_PageMar* CT_PageMar::default_instance_ = NULL;

// CT_PageBorders
CT_PageBorders::CT_PageBorders()
    :m_has_top(false),
     m_top(NULL),
     m_has_left(false),
     m_left(NULL),
     m_has_bottom(false),
     m_bottom(NULL),
     m_has_right(false),
     m_right(NULL),
     m_has_zOrder_attr(false),
     m_zOrder_attr(NULL),
     m_has_display_attr(false),
     m_display_attr(NULL),
     m_has_offsetFrom_attr(false),
     m_offsetFrom_attr(NULL)
{
}
CT_PageBorders::~CT_PageBorders()
{
    clear();
}
bool CT_PageBorders::has_top() const
{
    return m_has_top;
}

CT_TopPageBorder* CT_PageBorders::mutable_top()
{
    m_has_top = true;
    if (!m_top)
    {
        m_top = new CT_TopPageBorder();
    }
    return m_top;
}

const CT_TopPageBorder& CT_PageBorders::get_top() const
{
    if (m_top)
    {
        return *m_top;
    }
    return CT_TopPageBorder::default_instance();
}

bool CT_PageBorders::has_left() const
{
    return m_has_left;
}

CT_PageBorder* CT_PageBorders::mutable_left()
{
    m_has_left = true;
    if (!m_left)
    {
        m_left = new CT_PageBorder();
    }
    return m_left;
}

const CT_PageBorder& CT_PageBorders::get_left() const
{
    if (m_left)
    {
        return *m_left;
    }
    return CT_PageBorder::default_instance();
}

bool CT_PageBorders::has_bottom() const
{
    return m_has_bottom;
}

CT_BottomPageBorder* CT_PageBorders::mutable_bottom()
{
    m_has_bottom = true;
    if (!m_bottom)
    {
        m_bottom = new CT_BottomPageBorder();
    }
    return m_bottom;
}

const CT_BottomPageBorder& CT_PageBorders::get_bottom() const
{
    if (m_bottom)
    {
        return *m_bottom;
    }
    return CT_BottomPageBorder::default_instance();
}

bool CT_PageBorders::has_right() const
{
    return m_has_right;
}

CT_PageBorder* CT_PageBorders::mutable_right()
{
    m_has_right = true;
    if (!m_right)
    {
        m_right = new CT_PageBorder();
    }
    return m_right;
}

const CT_PageBorder& CT_PageBorders::get_right() const
{
    if (m_right)
    {
        return *m_right;
    }
    return CT_PageBorder::default_instance();
}

void CT_PageBorders::clear()
{
    m_has_zOrder_attr = false;

    if (m_zOrder_attr)
    {
        delete m_zOrder_attr;
        m_zOrder_attr = NULL;
    }


    m_has_display_attr = false;

    if (m_display_attr)
    {
        delete m_display_attr;
        m_display_attr = NULL;
    }


    m_has_offsetFrom_attr = false;

    if (m_offsetFrom_attr)
    {
        delete m_offsetFrom_attr;
        m_offsetFrom_attr = NULL;
    }


    m_has_top = false;

    if (m_top)
    {
        delete m_top;
        m_top = NULL;
    }


    m_has_left = false;

    if (m_left)
    {
        delete m_left;
        m_left = NULL;
    }


    m_has_bottom = false;

    if (m_bottom)
    {
        delete m_bottom;
        m_bottom = NULL;
    }


    m_has_right = false;

    if (m_right)
    {
        delete m_right;
        m_right = NULL;
    }

}

void CT_PageBorders::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_zOrder_attr)
    {
        m_zOrder_attr->toXmlAttr("w:zOrder", _outStream);
    }



    if (m_has_display_attr)
    {
        m_display_attr->toXmlAttr("w:display", _outStream);
    }



    if (m_has_offsetFrom_attr)
    {
        m_offsetFrom_attr->toXmlAttr("w:offsetFrom", _outStream);
    }

    _outStream << ">";


    if (m_has_top)
    {
        m_top->toXmlElem("w:top", "", _outStream);
    }


    if (m_has_left)
    {
        m_left->toXmlElem("w:left", "", _outStream);
    }


    if (m_has_bottom)
    {
        m_bottom->toXmlElem("w:bottom", "", _outStream);
    }


    if (m_has_right)
    {
        m_right->toXmlElem("w:right", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_PageBorders& CT_PageBorders::default_instance()
{
    if (!CT_PageBorders::default_instance_)
    {
        CT_PageBorders::default_instance_ = new CT_PageBorders();
    }
    return *CT_PageBorders::default_instance_;
}

bool CT_PageBorders::has_zOrder_attr() const
{
    return m_has_zOrder_attr;
}

void CT_PageBorders::set_zOrder_attr(const ST_PageBorderZOrder& _zOrder_attr)
{
    m_has_zOrder_attr = true;
    m_zOrder_attr = new ST_PageBorderZOrder(_zOrder_attr);
}

const ST_PageBorderZOrder& CT_PageBorders::get_zOrder_attr() const
{
    if (m_zOrder_attr)
    {
        return *m_zOrder_attr;
    }
    return ST_PageBorderZOrder::default_instance();
}

bool CT_PageBorders::has_display_attr() const
{
    return m_has_display_attr;
}

void CT_PageBorders::set_display_attr(const ST_PageBorderDisplay& _display_attr)
{
    m_has_display_attr = true;
    m_display_attr = new ST_PageBorderDisplay(_display_attr);
}

const ST_PageBorderDisplay& CT_PageBorders::get_display_attr() const
{
    if (m_display_attr)
    {
        return *m_display_attr;
    }
    return ST_PageBorderDisplay::default_instance();
}

bool CT_PageBorders::has_offsetFrom_attr() const
{
    return m_has_offsetFrom_attr;
}

void CT_PageBorders::set_offsetFrom_attr(const ST_PageBorderOffset& _offsetFrom_attr)
{
    m_has_offsetFrom_attr = true;
    m_offsetFrom_attr = new ST_PageBorderOffset(_offsetFrom_attr);
}

const ST_PageBorderOffset& CT_PageBorders::get_offsetFrom_attr() const
{
    if (m_offsetFrom_attr)
    {
        return *m_offsetFrom_attr;
    }
    return ST_PageBorderOffset::default_instance();
}

CT_PageBorders* CT_PageBorders::default_instance_ = NULL;

// CT_PageBorder
CT_PageBorder::CT_PageBorder()
    :m_has_val_attr(false),
     m_val_attr(NULL),
     m_has_color_attr(false),
     m_color_attr(NULL),
     m_has_themeColor_attr(false),
     m_themeColor_attr(NULL),
     m_has_themeTint_attr(false),
     m_themeTint_attr(NULL),
     m_has_themeShade_attr(false),
     m_themeShade_attr(NULL),
     m_has_sz_attr(false),
     m_sz_attr(NULL),
     m_has_space_attr(false),
     m_space_attr(NULL),
     m_has_shadow_attr(false),
     m_shadow_attr(NULL),
     m_has_frame_attr(false),
     m_frame_attr(NULL),
     m_has_r_id_attr(false),
     m_r_id_attr(NULL)
{
}
CT_PageBorder::~CT_PageBorder()
{
    clear();
}
void CT_PageBorder::clear()
{
    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }


    m_has_color_attr = false;

    if (m_color_attr)
    {
        delete m_color_attr;
        m_color_attr = NULL;
    }


    m_has_themeColor_attr = false;

    if (m_themeColor_attr)
    {
        delete m_themeColor_attr;
        m_themeColor_attr = NULL;
    }


    m_has_themeTint_attr = false;

    if (m_themeTint_attr)
    {
        delete m_themeTint_attr;
        m_themeTint_attr = NULL;
    }


    m_has_themeShade_attr = false;

    if (m_themeShade_attr)
    {
        delete m_themeShade_attr;
        m_themeShade_attr = NULL;
    }


    m_has_sz_attr = false;

    if (m_sz_attr)
    {
        delete m_sz_attr;
        m_sz_attr = NULL;
    }


    m_has_space_attr = false;

    if (m_space_attr)
    {
        delete m_space_attr;
        m_space_attr = NULL;
    }


    m_has_shadow_attr = false;

    if (m_shadow_attr)
    {
        delete m_shadow_attr;
        m_shadow_attr = NULL;
    }


    m_has_frame_attr = false;

    if (m_frame_attr)
    {
        delete m_frame_attr;
        m_frame_attr = NULL;
    }


    m_has_r_id_attr = false;

    if (m_r_id_attr)
    {
        delete m_r_id_attr;
        m_r_id_attr = NULL;
    }

}

void CT_PageBorder::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_val_attr);
    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }



    if (m_has_color_attr)
    {
        m_color_attr->toXmlAttr("w:color", _outStream);
    }



    if (m_has_themeColor_attr)
    {
        m_themeColor_attr->toXmlAttr("w:themeColor", _outStream);
    }



    if (m_has_themeTint_attr)
    {
        m_themeTint_attr->toXmlAttr("w:themeTint", _outStream);
    }



    if (m_has_themeShade_attr)
    {
        m_themeShade_attr->toXmlAttr("w:themeShade", _outStream);
    }



    if (m_has_sz_attr)
    {
        m_sz_attr->toXmlAttr("w:sz", _outStream);
    }



    if (m_has_space_attr)
    {
        m_space_attr->toXmlAttr("w:space", _outStream);
    }



    if (m_has_shadow_attr)
    {
        m_shadow_attr->toXmlAttr("w:shadow", _outStream);
    }



    if (m_has_frame_attr)
    {
        m_frame_attr->toXmlAttr("w:frame", _outStream);
    }



    if (m_has_r_id_attr)
    {
        m_r_id_attr->toXmlAttr("r:id", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_PageBorder& CT_PageBorder::default_instance()
{
    if (!CT_PageBorder::default_instance_)
    {
        CT_PageBorder::default_instance_ = new CT_PageBorder();
    }
    return *CT_PageBorder::default_instance_;
}

bool CT_PageBorder::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_PageBorder::set_val_attr(const ST_Border& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ST_Border(_val_attr);
}

const ST_Border& CT_PageBorder::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ST_Border::default_instance();
}

bool CT_PageBorder::has_color_attr() const
{
    return m_has_color_attr;
}

void CT_PageBorder::set_color_attr(const ST_HexColor& _color_attr)
{
    m_has_color_attr = true;
    m_color_attr = new ST_HexColor(_color_attr);
}

const ST_HexColor& CT_PageBorder::get_color_attr() const
{
    if (m_color_attr)
    {
        return *m_color_attr;
    }
    return ST_HexColor::default_instance();
}

bool CT_PageBorder::has_themeColor_attr() const
{
    return m_has_themeColor_attr;
}

void CT_PageBorder::set_themeColor_attr(const ST_ThemeColor& _themeColor_attr)
{
    m_has_themeColor_attr = true;
    m_themeColor_attr = new ST_ThemeColor(_themeColor_attr);
}

const ST_ThemeColor& CT_PageBorder::get_themeColor_attr() const
{
    if (m_themeColor_attr)
    {
        return *m_themeColor_attr;
    }
    return ST_ThemeColor::default_instance();
}

bool CT_PageBorder::has_themeTint_attr() const
{
    return m_has_themeTint_attr;
}

void CT_PageBorder::set_themeTint_attr(const ST_UcharHexNumber& _themeTint_attr)
{
    m_has_themeTint_attr = true;
    m_themeTint_attr = new ST_UcharHexNumber(_themeTint_attr);
}

const ST_UcharHexNumber& CT_PageBorder::get_themeTint_attr() const
{
    if (m_themeTint_attr)
    {
        return *m_themeTint_attr;
    }
    return ST_UcharHexNumber::default_instance();
}

bool CT_PageBorder::has_themeShade_attr() const
{
    return m_has_themeShade_attr;
}

void CT_PageBorder::set_themeShade_attr(const ST_UcharHexNumber& _themeShade_attr)
{
    m_has_themeShade_attr = true;
    m_themeShade_attr = new ST_UcharHexNumber(_themeShade_attr);
}

const ST_UcharHexNumber& CT_PageBorder::get_themeShade_attr() const
{
    if (m_themeShade_attr)
    {
        return *m_themeShade_attr;
    }
    return ST_UcharHexNumber::default_instance();
}

bool CT_PageBorder::has_sz_attr() const
{
    return m_has_sz_attr;
}

void CT_PageBorder::set_sz_attr(const ST_EighthPointMeasure& _sz_attr)
{
    m_has_sz_attr = true;
    m_sz_attr = new ST_EighthPointMeasure(_sz_attr);
}

const ST_EighthPointMeasure& CT_PageBorder::get_sz_attr() const
{
    if (m_sz_attr)
    {
        return *m_sz_attr;
    }
    return ST_EighthPointMeasure::default_instance();
}

bool CT_PageBorder::has_space_attr() const
{
    return m_has_space_attr;
}

void CT_PageBorder::set_space_attr(const ST_PointMeasure& _space_attr)
{
    m_has_space_attr = true;
    m_space_attr = new ST_PointMeasure(_space_attr);
}

const ST_PointMeasure& CT_PageBorder::get_space_attr() const
{
    if (m_space_attr)
    {
        return *m_space_attr;
    }
    return ST_PointMeasure::default_instance();
}

bool CT_PageBorder::has_shadow_attr() const
{
    return m_has_shadow_attr;
}

void CT_PageBorder::set_shadow_attr(const ns_s::ST_OnOff& _shadow_attr)
{
    m_has_shadow_attr = true;
    m_shadow_attr = new ns_s::ST_OnOff(_shadow_attr);
}

const ns_s::ST_OnOff& CT_PageBorder::get_shadow_attr() const
{
    if (m_shadow_attr)
    {
        return *m_shadow_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

bool CT_PageBorder::has_frame_attr() const
{
    return m_has_frame_attr;
}

void CT_PageBorder::set_frame_attr(const ns_s::ST_OnOff& _frame_attr)
{
    m_has_frame_attr = true;
    m_frame_attr = new ns_s::ST_OnOff(_frame_attr);
}

const ns_s::ST_OnOff& CT_PageBorder::get_frame_attr() const
{
    if (m_frame_attr)
    {
        return *m_frame_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

bool CT_PageBorder::has_r_id_attr() const
{
    return m_has_r_id_attr;
}

void CT_PageBorder::set_r_id_attr(const ns_r::ST_RelationshipId& _r_id_attr)
{
    m_has_r_id_attr = true;
    m_r_id_attr = new ns_r::ST_RelationshipId(_r_id_attr);
}

const ns_r::ST_RelationshipId& CT_PageBorder::get_r_id_attr() const
{
    if (m_r_id_attr)
    {
        return *m_r_id_attr;
    }
    return ns_r::ST_RelationshipId::default_instance();
}

CT_PageBorder* CT_PageBorder::default_instance_ = NULL;

// CT_BottomPageBorder
CT_BottomPageBorder::CT_BottomPageBorder()
    :m_has_val_attr(false),
     m_val_attr(NULL),
     m_has_color_attr(false),
     m_color_attr(NULL),
     m_has_themeColor_attr(false),
     m_themeColor_attr(NULL),
     m_has_themeTint_attr(false),
     m_themeTint_attr(NULL),
     m_has_themeShade_attr(false),
     m_themeShade_attr(NULL),
     m_has_sz_attr(false),
     m_sz_attr(NULL),
     m_has_space_attr(false),
     m_space_attr(NULL),
     m_has_shadow_attr(false),
     m_shadow_attr(NULL),
     m_has_frame_attr(false),
     m_frame_attr(NULL),
     m_has_r_id_attr(false),
     m_r_id_attr(NULL),
     m_has_r_bottomLeft_attr(false),
     m_r_bottomLeft_attr(NULL),
     m_has_r_bottomRight_attr(false),
     m_r_bottomRight_attr(NULL)
{
}
CT_BottomPageBorder::~CT_BottomPageBorder()
{
    clear();
}
void CT_BottomPageBorder::clear()
{
    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }


    m_has_color_attr = false;

    if (m_color_attr)
    {
        delete m_color_attr;
        m_color_attr = NULL;
    }


    m_has_themeColor_attr = false;

    if (m_themeColor_attr)
    {
        delete m_themeColor_attr;
        m_themeColor_attr = NULL;
    }


    m_has_themeTint_attr = false;

    if (m_themeTint_attr)
    {
        delete m_themeTint_attr;
        m_themeTint_attr = NULL;
    }


    m_has_themeShade_attr = false;

    if (m_themeShade_attr)
    {
        delete m_themeShade_attr;
        m_themeShade_attr = NULL;
    }


    m_has_sz_attr = false;

    if (m_sz_attr)
    {
        delete m_sz_attr;
        m_sz_attr = NULL;
    }


    m_has_space_attr = false;

    if (m_space_attr)
    {
        delete m_space_attr;
        m_space_attr = NULL;
    }


    m_has_shadow_attr = false;

    if (m_shadow_attr)
    {
        delete m_shadow_attr;
        m_shadow_attr = NULL;
    }


    m_has_frame_attr = false;

    if (m_frame_attr)
    {
        delete m_frame_attr;
        m_frame_attr = NULL;
    }


    m_has_r_id_attr = false;

    if (m_r_id_attr)
    {
        delete m_r_id_attr;
        m_r_id_attr = NULL;
    }


    m_has_r_bottomLeft_attr = false;

    if (m_r_bottomLeft_attr)
    {
        delete m_r_bottomLeft_attr;
        m_r_bottomLeft_attr = NULL;
    }


    m_has_r_bottomRight_attr = false;

    if (m_r_bottomRight_attr)
    {
        delete m_r_bottomRight_attr;
        m_r_bottomRight_attr = NULL;
    }

}

void CT_BottomPageBorder::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_val_attr);
    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }



    if (m_has_color_attr)
    {
        m_color_attr->toXmlAttr("w:color", _outStream);
    }



    if (m_has_themeColor_attr)
    {
        m_themeColor_attr->toXmlAttr("w:themeColor", _outStream);
    }



    if (m_has_themeTint_attr)
    {
        m_themeTint_attr->toXmlAttr("w:themeTint", _outStream);
    }



    if (m_has_themeShade_attr)
    {
        m_themeShade_attr->toXmlAttr("w:themeShade", _outStream);
    }



    if (m_has_sz_attr)
    {
        m_sz_attr->toXmlAttr("w:sz", _outStream);
    }



    if (m_has_space_attr)
    {
        m_space_attr->toXmlAttr("w:space", _outStream);
    }



    if (m_has_shadow_attr)
    {
        m_shadow_attr->toXmlAttr("w:shadow", _outStream);
    }



    if (m_has_frame_attr)
    {
        m_frame_attr->toXmlAttr("w:frame", _outStream);
    }



    if (m_has_r_id_attr)
    {
        m_r_id_attr->toXmlAttr("r:id", _outStream);
    }



    if (m_has_r_bottomLeft_attr)
    {
        m_r_bottomLeft_attr->toXmlAttr("r:bottomLeft", _outStream);
    }



    if (m_has_r_bottomRight_attr)
    {
        m_r_bottomRight_attr->toXmlAttr("r:bottomRight", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_BottomPageBorder& CT_BottomPageBorder::default_instance()
{
    if (!CT_BottomPageBorder::default_instance_)
    {
        CT_BottomPageBorder::default_instance_ = new CT_BottomPageBorder();
    }
    return *CT_BottomPageBorder::default_instance_;
}

bool CT_BottomPageBorder::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_BottomPageBorder::set_val_attr(const ST_Border& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ST_Border(_val_attr);
}

const ST_Border& CT_BottomPageBorder::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ST_Border::default_instance();
}

bool CT_BottomPageBorder::has_color_attr() const
{
    return m_has_color_attr;
}

void CT_BottomPageBorder::set_color_attr(const ST_HexColor& _color_attr)
{
    m_has_color_attr = true;
    m_color_attr = new ST_HexColor(_color_attr);
}

const ST_HexColor& CT_BottomPageBorder::get_color_attr() const
{
    if (m_color_attr)
    {
        return *m_color_attr;
    }
    return ST_HexColor::default_instance();
}

bool CT_BottomPageBorder::has_themeColor_attr() const
{
    return m_has_themeColor_attr;
}

void CT_BottomPageBorder::set_themeColor_attr(const ST_ThemeColor& _themeColor_attr)
{
    m_has_themeColor_attr = true;
    m_themeColor_attr = new ST_ThemeColor(_themeColor_attr);
}

const ST_ThemeColor& CT_BottomPageBorder::get_themeColor_attr() const
{
    if (m_themeColor_attr)
    {
        return *m_themeColor_attr;
    }
    return ST_ThemeColor::default_instance();
}

bool CT_BottomPageBorder::has_themeTint_attr() const
{
    return m_has_themeTint_attr;
}

void CT_BottomPageBorder::set_themeTint_attr(const ST_UcharHexNumber& _themeTint_attr)
{
    m_has_themeTint_attr = true;
    m_themeTint_attr = new ST_UcharHexNumber(_themeTint_attr);
}

const ST_UcharHexNumber& CT_BottomPageBorder::get_themeTint_attr() const
{
    if (m_themeTint_attr)
    {
        return *m_themeTint_attr;
    }
    return ST_UcharHexNumber::default_instance();
}

bool CT_BottomPageBorder::has_themeShade_attr() const
{
    return m_has_themeShade_attr;
}

void CT_BottomPageBorder::set_themeShade_attr(const ST_UcharHexNumber& _themeShade_attr)
{
    m_has_themeShade_attr = true;
    m_themeShade_attr = new ST_UcharHexNumber(_themeShade_attr);
}

const ST_UcharHexNumber& CT_BottomPageBorder::get_themeShade_attr() const
{
    if (m_themeShade_attr)
    {
        return *m_themeShade_attr;
    }
    return ST_UcharHexNumber::default_instance();
}

bool CT_BottomPageBorder::has_sz_attr() const
{
    return m_has_sz_attr;
}

void CT_BottomPageBorder::set_sz_attr(const ST_EighthPointMeasure& _sz_attr)
{
    m_has_sz_attr = true;
    m_sz_attr = new ST_EighthPointMeasure(_sz_attr);
}

const ST_EighthPointMeasure& CT_BottomPageBorder::get_sz_attr() const
{
    if (m_sz_attr)
    {
        return *m_sz_attr;
    }
    return ST_EighthPointMeasure::default_instance();
}

bool CT_BottomPageBorder::has_space_attr() const
{
    return m_has_space_attr;
}

void CT_BottomPageBorder::set_space_attr(const ST_PointMeasure& _space_attr)
{
    m_has_space_attr = true;
    m_space_attr = new ST_PointMeasure(_space_attr);
}

const ST_PointMeasure& CT_BottomPageBorder::get_space_attr() const
{
    if (m_space_attr)
    {
        return *m_space_attr;
    }
    return ST_PointMeasure::default_instance();
}

bool CT_BottomPageBorder::has_shadow_attr() const
{
    return m_has_shadow_attr;
}

void CT_BottomPageBorder::set_shadow_attr(const ns_s::ST_OnOff& _shadow_attr)
{
    m_has_shadow_attr = true;
    m_shadow_attr = new ns_s::ST_OnOff(_shadow_attr);
}

const ns_s::ST_OnOff& CT_BottomPageBorder::get_shadow_attr() const
{
    if (m_shadow_attr)
    {
        return *m_shadow_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

bool CT_BottomPageBorder::has_frame_attr() const
{
    return m_has_frame_attr;
}

void CT_BottomPageBorder::set_frame_attr(const ns_s::ST_OnOff& _frame_attr)
{
    m_has_frame_attr = true;
    m_frame_attr = new ns_s::ST_OnOff(_frame_attr);
}

const ns_s::ST_OnOff& CT_BottomPageBorder::get_frame_attr() const
{
    if (m_frame_attr)
    {
        return *m_frame_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

bool CT_BottomPageBorder::has_r_id_attr() const
{
    return m_has_r_id_attr;
}

void CT_BottomPageBorder::set_r_id_attr(const ns_r::ST_RelationshipId& _r_id_attr)
{
    m_has_r_id_attr = true;
    m_r_id_attr = new ns_r::ST_RelationshipId(_r_id_attr);
}

const ns_r::ST_RelationshipId& CT_BottomPageBorder::get_r_id_attr() const
{
    if (m_r_id_attr)
    {
        return *m_r_id_attr;
    }
    return ns_r::ST_RelationshipId::default_instance();
}

bool CT_BottomPageBorder::has_r_bottomLeft_attr() const
{
    return m_has_r_bottomLeft_attr;
}

void CT_BottomPageBorder::set_r_bottomLeft_attr(const ns_r::ST_RelationshipId& _r_bottomLeft_attr)
{
    m_has_r_bottomLeft_attr = true;
    m_r_bottomLeft_attr = new ns_r::ST_RelationshipId(_r_bottomLeft_attr);
}

const ns_r::ST_RelationshipId& CT_BottomPageBorder::get_r_bottomLeft_attr() const
{
    if (m_r_bottomLeft_attr)
    {
        return *m_r_bottomLeft_attr;
    }
    return ns_r::ST_RelationshipId::default_instance();
}

bool CT_BottomPageBorder::has_r_bottomRight_attr() const
{
    return m_has_r_bottomRight_attr;
}

void CT_BottomPageBorder::set_r_bottomRight_attr(const ns_r::ST_RelationshipId& _r_bottomRight_attr)
{
    m_has_r_bottomRight_attr = true;
    m_r_bottomRight_attr = new ns_r::ST_RelationshipId(_r_bottomRight_attr);
}

const ns_r::ST_RelationshipId& CT_BottomPageBorder::get_r_bottomRight_attr() const
{
    if (m_r_bottomRight_attr)
    {
        return *m_r_bottomRight_attr;
    }
    return ns_r::ST_RelationshipId::default_instance();
}

CT_BottomPageBorder* CT_BottomPageBorder::default_instance_ = NULL;

// CT_TopPageBorder
CT_TopPageBorder::CT_TopPageBorder()
    :m_has_val_attr(false),
     m_val_attr(NULL),
     m_has_color_attr(false),
     m_color_attr(NULL),
     m_has_themeColor_attr(false),
     m_themeColor_attr(NULL),
     m_has_themeTint_attr(false),
     m_themeTint_attr(NULL),
     m_has_themeShade_attr(false),
     m_themeShade_attr(NULL),
     m_has_sz_attr(false),
     m_sz_attr(NULL),
     m_has_space_attr(false),
     m_space_attr(NULL),
     m_has_shadow_attr(false),
     m_shadow_attr(NULL),
     m_has_frame_attr(false),
     m_frame_attr(NULL),
     m_has_r_id_attr(false),
     m_r_id_attr(NULL),
     m_has_r_topLeft_attr(false),
     m_r_topLeft_attr(NULL),
     m_has_r_topRight_attr(false),
     m_r_topRight_attr(NULL)
{
}
CT_TopPageBorder::~CT_TopPageBorder()
{
    clear();
}
void CT_TopPageBorder::clear()
{
    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }


    m_has_color_attr = false;

    if (m_color_attr)
    {
        delete m_color_attr;
        m_color_attr = NULL;
    }


    m_has_themeColor_attr = false;

    if (m_themeColor_attr)
    {
        delete m_themeColor_attr;
        m_themeColor_attr = NULL;
    }


    m_has_themeTint_attr = false;

    if (m_themeTint_attr)
    {
        delete m_themeTint_attr;
        m_themeTint_attr = NULL;
    }


    m_has_themeShade_attr = false;

    if (m_themeShade_attr)
    {
        delete m_themeShade_attr;
        m_themeShade_attr = NULL;
    }


    m_has_sz_attr = false;

    if (m_sz_attr)
    {
        delete m_sz_attr;
        m_sz_attr = NULL;
    }


    m_has_space_attr = false;

    if (m_space_attr)
    {
        delete m_space_attr;
        m_space_attr = NULL;
    }


    m_has_shadow_attr = false;

    if (m_shadow_attr)
    {
        delete m_shadow_attr;
        m_shadow_attr = NULL;
    }


    m_has_frame_attr = false;

    if (m_frame_attr)
    {
        delete m_frame_attr;
        m_frame_attr = NULL;
    }


    m_has_r_id_attr = false;

    if (m_r_id_attr)
    {
        delete m_r_id_attr;
        m_r_id_attr = NULL;
    }


    m_has_r_topLeft_attr = false;

    if (m_r_topLeft_attr)
    {
        delete m_r_topLeft_attr;
        m_r_topLeft_attr = NULL;
    }


    m_has_r_topRight_attr = false;

    if (m_r_topRight_attr)
    {
        delete m_r_topRight_attr;
        m_r_topRight_attr = NULL;
    }

}

void CT_TopPageBorder::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_val_attr);
    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }



    if (m_has_color_attr)
    {
        m_color_attr->toXmlAttr("w:color", _outStream);
    }



    if (m_has_themeColor_attr)
    {
        m_themeColor_attr->toXmlAttr("w:themeColor", _outStream);
    }



    if (m_has_themeTint_attr)
    {
        m_themeTint_attr->toXmlAttr("w:themeTint", _outStream);
    }



    if (m_has_themeShade_attr)
    {
        m_themeShade_attr->toXmlAttr("w:themeShade", _outStream);
    }



    if (m_has_sz_attr)
    {
        m_sz_attr->toXmlAttr("w:sz", _outStream);
    }



    if (m_has_space_attr)
    {
        m_space_attr->toXmlAttr("w:space", _outStream);
    }



    if (m_has_shadow_attr)
    {
        m_shadow_attr->toXmlAttr("w:shadow", _outStream);
    }



    if (m_has_frame_attr)
    {
        m_frame_attr->toXmlAttr("w:frame", _outStream);
    }



    if (m_has_r_id_attr)
    {
        m_r_id_attr->toXmlAttr("r:id", _outStream);
    }



    if (m_has_r_topLeft_attr)
    {
        m_r_topLeft_attr->toXmlAttr("r:topLeft", _outStream);
    }



    if (m_has_r_topRight_attr)
    {
        m_r_topRight_attr->toXmlAttr("r:topRight", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_TopPageBorder& CT_TopPageBorder::default_instance()
{
    if (!CT_TopPageBorder::default_instance_)
    {
        CT_TopPageBorder::default_instance_ = new CT_TopPageBorder();
    }
    return *CT_TopPageBorder::default_instance_;
}

bool CT_TopPageBorder::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_TopPageBorder::set_val_attr(const ST_Border& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ST_Border(_val_attr);
}

const ST_Border& CT_TopPageBorder::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ST_Border::default_instance();
}

bool CT_TopPageBorder::has_color_attr() const
{
    return m_has_color_attr;
}

void CT_TopPageBorder::set_color_attr(const ST_HexColor& _color_attr)
{
    m_has_color_attr = true;
    m_color_attr = new ST_HexColor(_color_attr);
}

const ST_HexColor& CT_TopPageBorder::get_color_attr() const
{
    if (m_color_attr)
    {
        return *m_color_attr;
    }
    return ST_HexColor::default_instance();
}

bool CT_TopPageBorder::has_themeColor_attr() const
{
    return m_has_themeColor_attr;
}

void CT_TopPageBorder::set_themeColor_attr(const ST_ThemeColor& _themeColor_attr)
{
    m_has_themeColor_attr = true;
    m_themeColor_attr = new ST_ThemeColor(_themeColor_attr);
}

const ST_ThemeColor& CT_TopPageBorder::get_themeColor_attr() const
{
    if (m_themeColor_attr)
    {
        return *m_themeColor_attr;
    }
    return ST_ThemeColor::default_instance();
}

bool CT_TopPageBorder::has_themeTint_attr() const
{
    return m_has_themeTint_attr;
}

void CT_TopPageBorder::set_themeTint_attr(const ST_UcharHexNumber& _themeTint_attr)
{
    m_has_themeTint_attr = true;
    m_themeTint_attr = new ST_UcharHexNumber(_themeTint_attr);
}

const ST_UcharHexNumber& CT_TopPageBorder::get_themeTint_attr() const
{
    if (m_themeTint_attr)
    {
        return *m_themeTint_attr;
    }
    return ST_UcharHexNumber::default_instance();
}

bool CT_TopPageBorder::has_themeShade_attr() const
{
    return m_has_themeShade_attr;
}

void CT_TopPageBorder::set_themeShade_attr(const ST_UcharHexNumber& _themeShade_attr)
{
    m_has_themeShade_attr = true;
    m_themeShade_attr = new ST_UcharHexNumber(_themeShade_attr);
}

const ST_UcharHexNumber& CT_TopPageBorder::get_themeShade_attr() const
{
    if (m_themeShade_attr)
    {
        return *m_themeShade_attr;
    }
    return ST_UcharHexNumber::default_instance();
}

bool CT_TopPageBorder::has_sz_attr() const
{
    return m_has_sz_attr;
}

void CT_TopPageBorder::set_sz_attr(const ST_EighthPointMeasure& _sz_attr)
{
    m_has_sz_attr = true;
    m_sz_attr = new ST_EighthPointMeasure(_sz_attr);
}

const ST_EighthPointMeasure& CT_TopPageBorder::get_sz_attr() const
{
    if (m_sz_attr)
    {
        return *m_sz_attr;
    }
    return ST_EighthPointMeasure::default_instance();
}

bool CT_TopPageBorder::has_space_attr() const
{
    return m_has_space_attr;
}

void CT_TopPageBorder::set_space_attr(const ST_PointMeasure& _space_attr)
{
    m_has_space_attr = true;
    m_space_attr = new ST_PointMeasure(_space_attr);
}

const ST_PointMeasure& CT_TopPageBorder::get_space_attr() const
{
    if (m_space_attr)
    {
        return *m_space_attr;
    }
    return ST_PointMeasure::default_instance();
}

bool CT_TopPageBorder::has_shadow_attr() const
{
    return m_has_shadow_attr;
}

void CT_TopPageBorder::set_shadow_attr(const ns_s::ST_OnOff& _shadow_attr)
{
    m_has_shadow_attr = true;
    m_shadow_attr = new ns_s::ST_OnOff(_shadow_attr);
}

const ns_s::ST_OnOff& CT_TopPageBorder::get_shadow_attr() const
{
    if (m_shadow_attr)
    {
        return *m_shadow_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

bool CT_TopPageBorder::has_frame_attr() const
{
    return m_has_frame_attr;
}

void CT_TopPageBorder::set_frame_attr(const ns_s::ST_OnOff& _frame_attr)
{
    m_has_frame_attr = true;
    m_frame_attr = new ns_s::ST_OnOff(_frame_attr);
}

const ns_s::ST_OnOff& CT_TopPageBorder::get_frame_attr() const
{
    if (m_frame_attr)
    {
        return *m_frame_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

bool CT_TopPageBorder::has_r_id_attr() const
{
    return m_has_r_id_attr;
}

void CT_TopPageBorder::set_r_id_attr(const ns_r::ST_RelationshipId& _r_id_attr)
{
    m_has_r_id_attr = true;
    m_r_id_attr = new ns_r::ST_RelationshipId(_r_id_attr);
}

const ns_r::ST_RelationshipId& CT_TopPageBorder::get_r_id_attr() const
{
    if (m_r_id_attr)
    {
        return *m_r_id_attr;
    }
    return ns_r::ST_RelationshipId::default_instance();
}

bool CT_TopPageBorder::has_r_topLeft_attr() const
{
    return m_has_r_topLeft_attr;
}

void CT_TopPageBorder::set_r_topLeft_attr(const ns_r::ST_RelationshipId& _r_topLeft_attr)
{
    m_has_r_topLeft_attr = true;
    m_r_topLeft_attr = new ns_r::ST_RelationshipId(_r_topLeft_attr);
}

const ns_r::ST_RelationshipId& CT_TopPageBorder::get_r_topLeft_attr() const
{
    if (m_r_topLeft_attr)
    {
        return *m_r_topLeft_attr;
    }
    return ns_r::ST_RelationshipId::default_instance();
}

bool CT_TopPageBorder::has_r_topRight_attr() const
{
    return m_has_r_topRight_attr;
}

void CT_TopPageBorder::set_r_topRight_attr(const ns_r::ST_RelationshipId& _r_topRight_attr)
{
    m_has_r_topRight_attr = true;
    m_r_topRight_attr = new ns_r::ST_RelationshipId(_r_topRight_attr);
}

const ns_r::ST_RelationshipId& CT_TopPageBorder::get_r_topRight_attr() const
{
    if (m_r_topRight_attr)
    {
        return *m_r_topRight_attr;
    }
    return ns_r::ST_RelationshipId::default_instance();
}

CT_TopPageBorder* CT_TopPageBorder::default_instance_ = NULL;

// CT_LineNumber
CT_LineNumber::CT_LineNumber()
    :m_has_countBy_attr(false),
     m_countBy_attr(NULL),
     m_has_start_attr(false),
     m_start_attr(NULL),
     m_has_distance_attr(false),
     m_distance_attr(NULL),
     m_has_restart_attr(false),
     m_restart_attr(NULL)
{
}
CT_LineNumber::~CT_LineNumber()
{
    clear();
}
void CT_LineNumber::clear()
{
    m_has_countBy_attr = false;

    if (m_countBy_attr)
    {
        delete m_countBy_attr;
        m_countBy_attr = NULL;
    }


    m_has_start_attr = false;

    if (m_start_attr)
    {
        delete m_start_attr;
        m_start_attr = NULL;
    }


    m_has_distance_attr = false;

    if (m_distance_attr)
    {
        delete m_distance_attr;
        m_distance_attr = NULL;
    }


    m_has_restart_attr = false;

    if (m_restart_attr)
    {
        delete m_restart_attr;
        m_restart_attr = NULL;
    }

}

void CT_LineNumber::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_countBy_attr)
    {
        m_countBy_attr->toXmlAttr("w:countBy", _outStream);
    }



    if (m_has_start_attr)
    {
        m_start_attr->toXmlAttr("w:start", _outStream);
    }



    if (m_has_distance_attr)
    {
        m_distance_attr->toXmlAttr("w:distance", _outStream);
    }



    if (m_has_restart_attr)
    {
        m_restart_attr->toXmlAttr("w:restart", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_LineNumber& CT_LineNumber::default_instance()
{
    if (!CT_LineNumber::default_instance_)
    {
        CT_LineNumber::default_instance_ = new CT_LineNumber();
    }
    return *CT_LineNumber::default_instance_;
}

bool CT_LineNumber::has_countBy_attr() const
{
    return m_has_countBy_attr;
}

void CT_LineNumber::set_countBy_attr(const ST_DecimalNumber& _countBy_attr)
{
    m_has_countBy_attr = true;
    m_countBy_attr = new ST_DecimalNumber(_countBy_attr);
}

const ST_DecimalNumber& CT_LineNumber::get_countBy_attr() const
{
    if (m_countBy_attr)
    {
        return *m_countBy_attr;
    }
    return ST_DecimalNumber::default_instance();
}

bool CT_LineNumber::has_start_attr() const
{
    return m_has_start_attr;
}

void CT_LineNumber::set_start_attr(const ST_DecimalNumber& _start_attr)
{
    m_has_start_attr = true;
    m_start_attr = new ST_DecimalNumber(_start_attr);
}

const ST_DecimalNumber& CT_LineNumber::get_start_attr() const
{
    if (m_start_attr)
    {
        return *m_start_attr;
    }
    return ST_DecimalNumber::default_instance();
}

bool CT_LineNumber::has_distance_attr() const
{
    return m_has_distance_attr;
}

void CT_LineNumber::set_distance_attr(const ns_s::ST_TwipsMeasure& _distance_attr)
{
    m_has_distance_attr = true;
    m_distance_attr = new ns_s::ST_TwipsMeasure(_distance_attr);
}

const ns_s::ST_TwipsMeasure& CT_LineNumber::get_distance_attr() const
{
    if (m_distance_attr)
    {
        return *m_distance_attr;
    }
    return ns_s::ST_TwipsMeasure::default_instance();
}

bool CT_LineNumber::has_restart_attr() const
{
    return m_has_restart_attr;
}

void CT_LineNumber::set_restart_attr(const ST_LineNumberRestart& _restart_attr)
{
    m_has_restart_attr = true;
    m_restart_attr = new ST_LineNumberRestart(_restart_attr);
}

const ST_LineNumberRestart& CT_LineNumber::get_restart_attr() const
{
    if (m_restart_attr)
    {
        return *m_restart_attr;
    }
    return ST_LineNumberRestart::default_instance();
}

CT_LineNumber* CT_LineNumber::default_instance_ = NULL;

// CT_PageNumber
CT_PageNumber::CT_PageNumber()
    :m_has_fmt_attr(false),
     m_fmt_attr(NULL),
     m_has_start_attr(false),
     m_start_attr(NULL),
     m_has_chapStyle_attr(false),
     m_chapStyle_attr(NULL),
     m_has_chapSep_attr(false),
     m_chapSep_attr(NULL)
{
}
CT_PageNumber::~CT_PageNumber()
{
    clear();
}
void CT_PageNumber::clear()
{
    m_has_fmt_attr = false;

    if (m_fmt_attr)
    {
        delete m_fmt_attr;
        m_fmt_attr = NULL;
    }


    m_has_start_attr = false;

    if (m_start_attr)
    {
        delete m_start_attr;
        m_start_attr = NULL;
    }


    m_has_chapStyle_attr = false;

    if (m_chapStyle_attr)
    {
        delete m_chapStyle_attr;
        m_chapStyle_attr = NULL;
    }


    m_has_chapSep_attr = false;

    if (m_chapSep_attr)
    {
        delete m_chapSep_attr;
        m_chapSep_attr = NULL;
    }

}

void CT_PageNumber::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_fmt_attr)
    {
        m_fmt_attr->toXmlAttr("w:fmt", _outStream);
    }



    if (m_has_start_attr)
    {
        m_start_attr->toXmlAttr("w:start", _outStream);
    }



    if (m_has_chapStyle_attr)
    {
        m_chapStyle_attr->toXmlAttr("w:chapStyle", _outStream);
    }



    if (m_has_chapSep_attr)
    {
        m_chapSep_attr->toXmlAttr("w:chapSep", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_PageNumber& CT_PageNumber::default_instance()
{
    if (!CT_PageNumber::default_instance_)
    {
        CT_PageNumber::default_instance_ = new CT_PageNumber();
    }
    return *CT_PageNumber::default_instance_;
}

bool CT_PageNumber::has_fmt_attr() const
{
    return m_has_fmt_attr;
}

void CT_PageNumber::set_fmt_attr(const ST_NumberFormat& _fmt_attr)
{
    m_has_fmt_attr = true;
    m_fmt_attr = new ST_NumberFormat(_fmt_attr);
}

const ST_NumberFormat& CT_PageNumber::get_fmt_attr() const
{
    if (m_fmt_attr)
    {
        return *m_fmt_attr;
    }
    return ST_NumberFormat::default_instance();
}

bool CT_PageNumber::has_start_attr() const
{
    return m_has_start_attr;
}

void CT_PageNumber::set_start_attr(const ST_DecimalNumber& _start_attr)
{
    m_has_start_attr = true;
    m_start_attr = new ST_DecimalNumber(_start_attr);
}

const ST_DecimalNumber& CT_PageNumber::get_start_attr() const
{
    if (m_start_attr)
    {
        return *m_start_attr;
    }
    return ST_DecimalNumber::default_instance();
}

bool CT_PageNumber::has_chapStyle_attr() const
{
    return m_has_chapStyle_attr;
}

void CT_PageNumber::set_chapStyle_attr(const ST_DecimalNumber& _chapStyle_attr)
{
    m_has_chapStyle_attr = true;
    m_chapStyle_attr = new ST_DecimalNumber(_chapStyle_attr);
}

const ST_DecimalNumber& CT_PageNumber::get_chapStyle_attr() const
{
    if (m_chapStyle_attr)
    {
        return *m_chapStyle_attr;
    }
    return ST_DecimalNumber::default_instance();
}

bool CT_PageNumber::has_chapSep_attr() const
{
    return m_has_chapSep_attr;
}

void CT_PageNumber::set_chapSep_attr(const ST_ChapterSep& _chapSep_attr)
{
    m_has_chapSep_attr = true;
    m_chapSep_attr = new ST_ChapterSep(_chapSep_attr);
}

const ST_ChapterSep& CT_PageNumber::get_chapSep_attr() const
{
    if (m_chapSep_attr)
    {
        return *m_chapSep_attr;
    }
    return ST_ChapterSep::default_instance();
}

CT_PageNumber* CT_PageNumber::default_instance_ = NULL;

// CT_Column
CT_Column::CT_Column()
    :m_has_w_attr(false),
     m_w_attr(NULL),
     m_has_space_attr(false),
     m_space_attr(NULL)
{
}
CT_Column::~CT_Column()
{
    clear();
}
void CT_Column::clear()
{
    m_has_w_attr = false;

    if (m_w_attr)
    {
        delete m_w_attr;
        m_w_attr = NULL;
    }


    m_has_space_attr = false;

    if (m_space_attr)
    {
        delete m_space_attr;
        m_space_attr = NULL;
    }

}

void CT_Column::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_w_attr)
    {
        m_w_attr->toXmlAttr("w:w", _outStream);
    }



    if (m_has_space_attr)
    {
        m_space_attr->toXmlAttr("w:space", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_Column& CT_Column::default_instance()
{
    if (!CT_Column::default_instance_)
    {
        CT_Column::default_instance_ = new CT_Column();
    }
    return *CT_Column::default_instance_;
}

bool CT_Column::has_w_attr() const
{
    return m_has_w_attr;
}

void CT_Column::set_w_attr(const ns_s::ST_TwipsMeasure& _w_attr)
{
    m_has_w_attr = true;
    m_w_attr = new ns_s::ST_TwipsMeasure(_w_attr);
}

const ns_s::ST_TwipsMeasure& CT_Column::get_w_attr() const
{
    if (m_w_attr)
    {
        return *m_w_attr;
    }
    return ns_s::ST_TwipsMeasure::default_instance();
}

bool CT_Column::has_space_attr() const
{
    return m_has_space_attr;
}

void CT_Column::set_space_attr(const ns_s::ST_TwipsMeasure& _space_attr)
{
    m_has_space_attr = true;
    m_space_attr = new ns_s::ST_TwipsMeasure(_space_attr);
}

const ns_s::ST_TwipsMeasure& CT_Column::get_space_attr() const
{
    if (m_space_attr)
    {
        return *m_space_attr;
    }
    return ns_s::ST_TwipsMeasure::default_instance();
}

CT_Column* CT_Column::default_instance_ = NULL;

// CT_Columns
CT_Columns::CT_Columns()
    :m_has_equalWidth_attr(false),
     m_equalWidth_attr(NULL),
     m_has_space_attr(false),
     m_space_attr(NULL),
     m_has_num_attr(false),
     m_num_attr(NULL),
     m_has_sep_attr(false),
     m_sep_attr(NULL)
{
}
CT_Columns::~CT_Columns()
{
    clear();
}
CT_Column* CT_Columns::add_col()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Column* pNewChild = pChildGroup->mutable_col();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

void CT_Columns::clear()
{
    m_has_equalWidth_attr = false;

    if (m_equalWidth_attr)
    {
        delete m_equalWidth_attr;
        m_equalWidth_attr = NULL;
    }


    m_has_space_attr = false;

    if (m_space_attr)
    {
        delete m_space_attr;
        m_space_attr = NULL;
    }


    m_has_num_attr = false;

    if (m_num_attr)
    {
        delete m_num_attr;
        m_num_attr = NULL;
    }


    m_has_sep_attr = false;

    if (m_sep_attr)
    {
        delete m_sep_attr;
        m_sep_attr = NULL;
    }


    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
}

void CT_Columns::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_equalWidth_attr)
    {
        m_equalWidth_attr->toXmlAttr("w:equalWidth", _outStream);
    }



    if (m_has_space_attr)
    {
        m_space_attr->toXmlAttr("w:space", _outStream);
    }



    if (m_has_num_attr)
    {
        m_num_attr->toXmlAttr("w:num", _outStream);
    }



    if (m_has_sep_attr)
    {
        m_sep_attr->toXmlAttr("w:sep", _outStream);
    }

    _outStream << ">";

    {
        int elemCnt = count_if(m_childGroupList_1.begin(), m_childGroupList_1.end(), mem_fun(&ChildGroup_1::has_col));
        assert(1 <= elemCnt && elemCnt <= 45);
    }

    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_col())
            {
                (*iter)->get_col().toXmlElem("w:col", "", _outStream);
            }


        }
    }

    _outStream << "</" << _elemName << ">";
}

const CT_Columns& CT_Columns::default_instance()
{
    if (!CT_Columns::default_instance_)
    {
        CT_Columns::default_instance_ = new CT_Columns();
    }
    return *CT_Columns::default_instance_;
}

bool CT_Columns::has_equalWidth_attr() const
{
    return m_has_equalWidth_attr;
}

void CT_Columns::set_equalWidth_attr(const ns_s::ST_OnOff& _equalWidth_attr)
{
    m_has_equalWidth_attr = true;
    m_equalWidth_attr = new ns_s::ST_OnOff(_equalWidth_attr);
}

const ns_s::ST_OnOff& CT_Columns::get_equalWidth_attr() const
{
    if (m_equalWidth_attr)
    {
        return *m_equalWidth_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

bool CT_Columns::has_space_attr() const
{
    return m_has_space_attr;
}

void CT_Columns::set_space_attr(const ns_s::ST_TwipsMeasure& _space_attr)
{
    m_has_space_attr = true;
    m_space_attr = new ns_s::ST_TwipsMeasure(_space_attr);
}

const ns_s::ST_TwipsMeasure& CT_Columns::get_space_attr() const
{
    if (m_space_attr)
    {
        return *m_space_attr;
    }
    return ns_s::ST_TwipsMeasure::default_instance();
}

bool CT_Columns::has_num_attr() const
{
    return m_has_num_attr;
}

void CT_Columns::set_num_attr(const ST_DecimalNumber& _num_attr)
{
    m_has_num_attr = true;
    m_num_attr = new ST_DecimalNumber(_num_attr);
}

const ST_DecimalNumber& CT_Columns::get_num_attr() const
{
    if (m_num_attr)
    {
        return *m_num_attr;
    }
    return ST_DecimalNumber::default_instance();
}

bool CT_Columns::has_sep_attr() const
{
    return m_has_sep_attr;
}

void CT_Columns::set_sep_attr(const ns_s::ST_OnOff& _sep_attr)
{
    m_has_sep_attr = true;
    m_sep_attr = new ns_s::ST_OnOff(_sep_attr);
}

const ns_s::ST_OnOff& CT_Columns::get_sep_attr() const
{
    if (m_sep_attr)
    {
        return *m_sep_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}


// CT_Columns::ChildGroup_1
CT_Columns::ChildGroup_1::ChildGroup_1()
    :m_has_col(false),
     m_col(NULL)
{
}
bool CT_Columns::ChildGroup_1::has_col() const
{
    return m_has_col;
}

CT_Column* CT_Columns::ChildGroup_1::mutable_col()
{

    m_has_col = true;
    if (!m_col)
    {
        m_col = new CT_Column();
    }
    return m_col;
}

const CT_Column& CT_Columns::ChildGroup_1::get_col() const
{
    if (m_col)
    {
        return *m_col;
    }
    return CT_Column::default_instance();
}

CT_Columns* CT_Columns::default_instance_ = NULL;

// CT_VerticalJc
CT_VerticalJc::CT_VerticalJc()
    :m_has_val_attr(false),
     m_val_attr(NULL)
{
}
CT_VerticalJc::~CT_VerticalJc()
{
    clear();
}
void CT_VerticalJc::clear()
{
    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }

}

void CT_VerticalJc::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_val_attr);
    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_VerticalJc& CT_VerticalJc::default_instance()
{
    if (!CT_VerticalJc::default_instance_)
    {
        CT_VerticalJc::default_instance_ = new CT_VerticalJc();
    }
    return *CT_VerticalJc::default_instance_;
}

bool CT_VerticalJc::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_VerticalJc::set_val_attr(const ST_VerticalJc& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ST_VerticalJc(_val_attr);
}

const ST_VerticalJc& CT_VerticalJc::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ST_VerticalJc::default_instance();
}

CT_VerticalJc* CT_VerticalJc::default_instance_ = NULL;

// CT_DocGrid
CT_DocGrid::CT_DocGrid()
    :m_has_type_attr(false),
     m_type_attr(NULL),
     m_has_linePitch_attr(false),
     m_linePitch_attr(NULL),
     m_has_charSpace_attr(false),
     m_charSpace_attr(NULL)
{
}
CT_DocGrid::~CT_DocGrid()
{
    clear();
}
void CT_DocGrid::clear()
{
    m_has_type_attr = false;

    if (m_type_attr)
    {
        delete m_type_attr;
        m_type_attr = NULL;
    }


    m_has_linePitch_attr = false;

    if (m_linePitch_attr)
    {
        delete m_linePitch_attr;
        m_linePitch_attr = NULL;
    }


    m_has_charSpace_attr = false;

    if (m_charSpace_attr)
    {
        delete m_charSpace_attr;
        m_charSpace_attr = NULL;
    }

}

void CT_DocGrid::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_type_attr)
    {
        m_type_attr->toXmlAttr("w:type", _outStream);
    }



    if (m_has_linePitch_attr)
    {
        m_linePitch_attr->toXmlAttr("w:linePitch", _outStream);
    }



    if (m_has_charSpace_attr)
    {
        m_charSpace_attr->toXmlAttr("w:charSpace", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_DocGrid& CT_DocGrid::default_instance()
{
    if (!CT_DocGrid::default_instance_)
    {
        CT_DocGrid::default_instance_ = new CT_DocGrid();
    }
    return *CT_DocGrid::default_instance_;
}

bool CT_DocGrid::has_type_attr() const
{
    return m_has_type_attr;
}

void CT_DocGrid::set_type_attr(const ST_DocGrid& _type_attr)
{
    m_has_type_attr = true;
    m_type_attr = new ST_DocGrid(_type_attr);
}

const ST_DocGrid& CT_DocGrid::get_type_attr() const
{
    if (m_type_attr)
    {
        return *m_type_attr;
    }
    return ST_DocGrid::default_instance();
}

bool CT_DocGrid::has_linePitch_attr() const
{
    return m_has_linePitch_attr;
}

void CT_DocGrid::set_linePitch_attr(const ST_DecimalNumber& _linePitch_attr)
{
    m_has_linePitch_attr = true;
    m_linePitch_attr = new ST_DecimalNumber(_linePitch_attr);
}

const ST_DecimalNumber& CT_DocGrid::get_linePitch_attr() const
{
    if (m_linePitch_attr)
    {
        return *m_linePitch_attr;
    }
    return ST_DecimalNumber::default_instance();
}

bool CT_DocGrid::has_charSpace_attr() const
{
    return m_has_charSpace_attr;
}

void CT_DocGrid::set_charSpace_attr(const ST_DecimalNumber& _charSpace_attr)
{
    m_has_charSpace_attr = true;
    m_charSpace_attr = new ST_DecimalNumber(_charSpace_attr);
}

const ST_DecimalNumber& CT_DocGrid::get_charSpace_attr() const
{
    if (m_charSpace_attr)
    {
        return *m_charSpace_attr;
    }
    return ST_DecimalNumber::default_instance();
}

CT_DocGrid* CT_DocGrid::default_instance_ = NULL;

// CT_HdrFtrRef
CT_HdrFtrRef::CT_HdrFtrRef()
    :m_has_r_id_attr(false),
     m_r_id_attr(NULL),
     m_has_type_attr(false),
     m_type_attr(NULL)
{
}
CT_HdrFtrRef::~CT_HdrFtrRef()
{
    clear();
}
void CT_HdrFtrRef::clear()
{
    m_has_r_id_attr = false;

    if (m_r_id_attr)
    {
        delete m_r_id_attr;
        m_r_id_attr = NULL;
    }


    m_has_type_attr = false;

    if (m_type_attr)
    {
        delete m_type_attr;
        m_type_attr = NULL;
    }

}

void CT_HdrFtrRef::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_r_id_attr);
    if (m_has_r_id_attr)
    {
        m_r_id_attr->toXmlAttr("r:id", _outStream);
    }


    assert(m_has_type_attr);
    if (m_has_type_attr)
    {
        m_type_attr->toXmlAttr("w:type", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_HdrFtrRef& CT_HdrFtrRef::default_instance()
{
    if (!CT_HdrFtrRef::default_instance_)
    {
        CT_HdrFtrRef::default_instance_ = new CT_HdrFtrRef();
    }
    return *CT_HdrFtrRef::default_instance_;
}

bool CT_HdrFtrRef::has_r_id_attr() const
{
    return m_has_r_id_attr;
}

void CT_HdrFtrRef::set_r_id_attr(const ns_r::ST_RelationshipId& _r_id_attr)
{
    m_has_r_id_attr = true;
    m_r_id_attr = new ns_r::ST_RelationshipId(_r_id_attr);
}

const ns_r::ST_RelationshipId& CT_HdrFtrRef::get_r_id_attr() const
{
    if (m_r_id_attr)
    {
        return *m_r_id_attr;
    }
    return ns_r::ST_RelationshipId::default_instance();
}

bool CT_HdrFtrRef::has_type_attr() const
{
    return m_has_type_attr;
}

void CT_HdrFtrRef::set_type_attr(const ST_HdrFtr& _type_attr)
{
    m_has_type_attr = true;
    m_type_attr = new ST_HdrFtr(_type_attr);
}

const ST_HdrFtr& CT_HdrFtrRef::get_type_attr() const
{
    if (m_type_attr)
    {
        return *m_type_attr;
    }
    return ST_HdrFtr::default_instance();
}

CT_HdrFtrRef* CT_HdrFtrRef::default_instance_ = NULL;

// CT_HdrFtr
CT_HdrFtr::CT_HdrFtr()

{
}
CT_HdrFtr::~CT_HdrFtr()
{
    clear();
}
void CT_HdrFtr::clear()
{    }

void CT_HdrFtr::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_HdrFtr& CT_HdrFtr::default_instance()
{
    if (!CT_HdrFtr::default_instance_)
    {
        CT_HdrFtr::default_instance_ = new CT_HdrFtr();
    }
    return *CT_HdrFtr::default_instance_;
}

CT_HdrFtr* CT_HdrFtr::default_instance_ = NULL;

// CT_SectPrBase
CT_SectPrBase::CT_SectPrBase()
    :m_has_footnotePr(false),
     m_footnotePr(NULL),
     m_has_endnotePr(false),
     m_endnotePr(NULL),
     m_has_type(false),
     m_type(NULL),
     m_has_pgSz(false),
     m_pgSz(NULL),
     m_has_pgMar(false),
     m_pgMar(NULL),
     m_has_paperSrc(false),
     m_paperSrc(NULL),
     m_has_pgBorders(false),
     m_pgBorders(NULL),
     m_has_lnNumType(false),
     m_lnNumType(NULL),
     m_has_pgNumType(false),
     m_pgNumType(NULL),
     m_has_cols(false),
     m_cols(NULL),
     m_has_formProt(false),
     m_formProt(NULL),
     m_has_vAlign(false),
     m_vAlign(NULL),
     m_has_noEndnote(false),
     m_noEndnote(NULL),
     m_has_titlePg(false),
     m_titlePg(NULL),
     m_has_textDirection(false),
     m_textDirection(NULL),
     m_has_bidi(false),
     m_bidi(NULL),
     m_has_rtlGutter(false),
     m_rtlGutter(NULL),
     m_has_docGrid(false),
     m_docGrid(NULL),
     m_has_printerSettings(false),
     m_printerSettings(NULL),
     m_has_rsidRPr_attr(false),
     m_rsidRPr_attr(NULL),
     m_has_rsidDel_attr(false),
     m_rsidDel_attr(NULL),
     m_has_rsidR_attr(false),
     m_rsidR_attr(NULL),
     m_has_rsidSect_attr(false),
     m_rsidSect_attr(NULL)
{
}
CT_SectPrBase::~CT_SectPrBase()
{
    clear();
}
bool CT_SectPrBase::has_footnotePr() const
{
    return m_has_footnotePr;
}

CT_FtnProps* CT_SectPrBase::mutable_footnotePr()
{
    m_has_footnotePr = true;
    if (!m_footnotePr)
    {
        m_footnotePr = new CT_FtnProps();
    }
    return m_footnotePr;
}

const CT_FtnProps& CT_SectPrBase::get_footnotePr() const
{
    if (m_footnotePr)
    {
        return *m_footnotePr;
    }
    return CT_FtnProps::default_instance();
}

bool CT_SectPrBase::has_endnotePr() const
{
    return m_has_endnotePr;
}

CT_EdnProps* CT_SectPrBase::mutable_endnotePr()
{
    m_has_endnotePr = true;
    if (!m_endnotePr)
    {
        m_endnotePr = new CT_EdnProps();
    }
    return m_endnotePr;
}

const CT_EdnProps& CT_SectPrBase::get_endnotePr() const
{
    if (m_endnotePr)
    {
        return *m_endnotePr;
    }
    return CT_EdnProps::default_instance();
}

bool CT_SectPrBase::has_type() const
{
    return m_has_type;
}

CT_SectType* CT_SectPrBase::mutable_type()
{
    m_has_type = true;
    if (!m_type)
    {
        m_type = new CT_SectType();
    }
    return m_type;
}

const CT_SectType& CT_SectPrBase::get_type() const
{
    if (m_type)
    {
        return *m_type;
    }
    return CT_SectType::default_instance();
}

bool CT_SectPrBase::has_pgSz() const
{
    return m_has_pgSz;
}

CT_PageSz* CT_SectPrBase::mutable_pgSz()
{
    m_has_pgSz = true;
    if (!m_pgSz)
    {
        m_pgSz = new CT_PageSz();
    }
    return m_pgSz;
}

const CT_PageSz& CT_SectPrBase::get_pgSz() const
{
    if (m_pgSz)
    {
        return *m_pgSz;
    }
    return CT_PageSz::default_instance();
}

bool CT_SectPrBase::has_pgMar() const
{
    return m_has_pgMar;
}

CT_PageMar* CT_SectPrBase::mutable_pgMar()
{
    m_has_pgMar = true;
    if (!m_pgMar)
    {
        m_pgMar = new CT_PageMar();
    }
    return m_pgMar;
}

const CT_PageMar& CT_SectPrBase::get_pgMar() const
{
    if (m_pgMar)
    {
        return *m_pgMar;
    }
    return CT_PageMar::default_instance();
}

bool CT_SectPrBase::has_paperSrc() const
{
    return m_has_paperSrc;
}

CT_PaperSource* CT_SectPrBase::mutable_paperSrc()
{
    m_has_paperSrc = true;
    if (!m_paperSrc)
    {
        m_paperSrc = new CT_PaperSource();
    }
    return m_paperSrc;
}

const CT_PaperSource& CT_SectPrBase::get_paperSrc() const
{
    if (m_paperSrc)
    {
        return *m_paperSrc;
    }
    return CT_PaperSource::default_instance();
}

bool CT_SectPrBase::has_pgBorders() const
{
    return m_has_pgBorders;
}

CT_PageBorders* CT_SectPrBase::mutable_pgBorders()
{
    m_has_pgBorders = true;
    if (!m_pgBorders)
    {
        m_pgBorders = new CT_PageBorders();
    }
    return m_pgBorders;
}

const CT_PageBorders& CT_SectPrBase::get_pgBorders() const
{
    if (m_pgBorders)
    {
        return *m_pgBorders;
    }
    return CT_PageBorders::default_instance();
}

bool CT_SectPrBase::has_lnNumType() const
{
    return m_has_lnNumType;
}

CT_LineNumber* CT_SectPrBase::mutable_lnNumType()
{
    m_has_lnNumType = true;
    if (!m_lnNumType)
    {
        m_lnNumType = new CT_LineNumber();
    }
    return m_lnNumType;
}

const CT_LineNumber& CT_SectPrBase::get_lnNumType() const
{
    if (m_lnNumType)
    {
        return *m_lnNumType;
    }
    return CT_LineNumber::default_instance();
}

bool CT_SectPrBase::has_pgNumType() const
{
    return m_has_pgNumType;
}

CT_PageNumber* CT_SectPrBase::mutable_pgNumType()
{
    m_has_pgNumType = true;
    if (!m_pgNumType)
    {
        m_pgNumType = new CT_PageNumber();
    }
    return m_pgNumType;
}

const CT_PageNumber& CT_SectPrBase::get_pgNumType() const
{
    if (m_pgNumType)
    {
        return *m_pgNumType;
    }
    return CT_PageNumber::default_instance();
}

bool CT_SectPrBase::has_cols() const
{
    return m_has_cols;
}

CT_Columns* CT_SectPrBase::mutable_cols()
{
    m_has_cols = true;
    if (!m_cols)
    {
        m_cols = new CT_Columns();
    }
    return m_cols;
}

const CT_Columns& CT_SectPrBase::get_cols() const
{
    if (m_cols)
    {
        return *m_cols;
    }
    return CT_Columns::default_instance();
}

bool CT_SectPrBase::has_formProt() const
{
    return m_has_formProt;
}

CT_OnOff* CT_SectPrBase::mutable_formProt()
{
    m_has_formProt = true;
    if (!m_formProt)
    {
        m_formProt = new CT_OnOff();
    }
    return m_formProt;
}

const CT_OnOff& CT_SectPrBase::get_formProt() const
{
    if (m_formProt)
    {
        return *m_formProt;
    }
    return CT_OnOff::default_instance();
}

bool CT_SectPrBase::has_vAlign() const
{
    return m_has_vAlign;
}

CT_VerticalJc* CT_SectPrBase::mutable_vAlign()
{
    m_has_vAlign = true;
    if (!m_vAlign)
    {
        m_vAlign = new CT_VerticalJc();
    }
    return m_vAlign;
}

const CT_VerticalJc& CT_SectPrBase::get_vAlign() const
{
    if (m_vAlign)
    {
        return *m_vAlign;
    }
    return CT_VerticalJc::default_instance();
}

bool CT_SectPrBase::has_noEndnote() const
{
    return m_has_noEndnote;
}

CT_OnOff* CT_SectPrBase::mutable_noEndnote()
{
    m_has_noEndnote = true;
    if (!m_noEndnote)
    {
        m_noEndnote = new CT_OnOff();
    }
    return m_noEndnote;
}

const CT_OnOff& CT_SectPrBase::get_noEndnote() const
{
    if (m_noEndnote)
    {
        return *m_noEndnote;
    }
    return CT_OnOff::default_instance();
}

bool CT_SectPrBase::has_titlePg() const
{
    return m_has_titlePg;
}

CT_OnOff* CT_SectPrBase::mutable_titlePg()
{
    m_has_titlePg = true;
    if (!m_titlePg)
    {
        m_titlePg = new CT_OnOff();
    }
    return m_titlePg;
}

const CT_OnOff& CT_SectPrBase::get_titlePg() const
{
    if (m_titlePg)
    {
        return *m_titlePg;
    }
    return CT_OnOff::default_instance();
}

bool CT_SectPrBase::has_textDirection() const
{
    return m_has_textDirection;
}

CT_TextDirection* CT_SectPrBase::mutable_textDirection()
{
    m_has_textDirection = true;
    if (!m_textDirection)
    {
        m_textDirection = new CT_TextDirection();
    }
    return m_textDirection;
}

const CT_TextDirection& CT_SectPrBase::get_textDirection() const
{
    if (m_textDirection)
    {
        return *m_textDirection;
    }
    return CT_TextDirection::default_instance();
}

bool CT_SectPrBase::has_bidi() const
{
    return m_has_bidi;
}

CT_OnOff* CT_SectPrBase::mutable_bidi()
{
    m_has_bidi = true;
    if (!m_bidi)
    {
        m_bidi = new CT_OnOff();
    }
    return m_bidi;
}

const CT_OnOff& CT_SectPrBase::get_bidi() const
{
    if (m_bidi)
    {
        return *m_bidi;
    }
    return CT_OnOff::default_instance();
}

bool CT_SectPrBase::has_rtlGutter() const
{
    return m_has_rtlGutter;
}

CT_OnOff* CT_SectPrBase::mutable_rtlGutter()
{
    m_has_rtlGutter = true;
    if (!m_rtlGutter)
    {
        m_rtlGutter = new CT_OnOff();
    }
    return m_rtlGutter;
}

const CT_OnOff& CT_SectPrBase::get_rtlGutter() const
{
    if (m_rtlGutter)
    {
        return *m_rtlGutter;
    }
    return CT_OnOff::default_instance();
}

bool CT_SectPrBase::has_docGrid() const
{
    return m_has_docGrid;
}

CT_DocGrid* CT_SectPrBase::mutable_docGrid()
{
    m_has_docGrid = true;
    if (!m_docGrid)
    {
        m_docGrid = new CT_DocGrid();
    }
    return m_docGrid;
}

const CT_DocGrid& CT_SectPrBase::get_docGrid() const
{
    if (m_docGrid)
    {
        return *m_docGrid;
    }
    return CT_DocGrid::default_instance();
}

bool CT_SectPrBase::has_printerSettings() const
{
    return m_has_printerSettings;
}

CT_Rel* CT_SectPrBase::mutable_printerSettings()
{
    m_has_printerSettings = true;
    if (!m_printerSettings)
    {
        m_printerSettings = new CT_Rel();
    }
    return m_printerSettings;
}

const CT_Rel& CT_SectPrBase::get_printerSettings() const
{
    if (m_printerSettings)
    {
        return *m_printerSettings;
    }
    return CT_Rel::default_instance();
}

void CT_SectPrBase::clear()
{
    m_has_rsidRPr_attr = false;

    if (m_rsidRPr_attr)
    {
        delete m_rsidRPr_attr;
        m_rsidRPr_attr = NULL;
    }


    m_has_rsidDel_attr = false;

    if (m_rsidDel_attr)
    {
        delete m_rsidDel_attr;
        m_rsidDel_attr = NULL;
    }


    m_has_rsidR_attr = false;

    if (m_rsidR_attr)
    {
        delete m_rsidR_attr;
        m_rsidR_attr = NULL;
    }


    m_has_rsidSect_attr = false;

    if (m_rsidSect_attr)
    {
        delete m_rsidSect_attr;
        m_rsidSect_attr = NULL;
    }


    m_has_footnotePr = false;

    if (m_footnotePr)
    {
        delete m_footnotePr;
        m_footnotePr = NULL;
    }


    m_has_endnotePr = false;

    if (m_endnotePr)
    {
        delete m_endnotePr;
        m_endnotePr = NULL;
    }


    m_has_type = false;

    if (m_type)
    {
        delete m_type;
        m_type = NULL;
    }


    m_has_pgSz = false;

    if (m_pgSz)
    {
        delete m_pgSz;
        m_pgSz = NULL;
    }


    m_has_pgMar = false;

    if (m_pgMar)
    {
        delete m_pgMar;
        m_pgMar = NULL;
    }


    m_has_paperSrc = false;

    if (m_paperSrc)
    {
        delete m_paperSrc;
        m_paperSrc = NULL;
    }


    m_has_pgBorders = false;

    if (m_pgBorders)
    {
        delete m_pgBorders;
        m_pgBorders = NULL;
    }


    m_has_lnNumType = false;

    if (m_lnNumType)
    {
        delete m_lnNumType;
        m_lnNumType = NULL;
    }


    m_has_pgNumType = false;

    if (m_pgNumType)
    {
        delete m_pgNumType;
        m_pgNumType = NULL;
    }


    m_has_cols = false;

    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }


    m_has_formProt = false;

    if (m_formProt)
    {
        delete m_formProt;
        m_formProt = NULL;
    }


    m_has_vAlign = false;

    if (m_vAlign)
    {
        delete m_vAlign;
        m_vAlign = NULL;
    }


    m_has_noEndnote = false;

    if (m_noEndnote)
    {
        delete m_noEndnote;
        m_noEndnote = NULL;
    }


    m_has_titlePg = false;

    if (m_titlePg)
    {
        delete m_titlePg;
        m_titlePg = NULL;
    }


    m_has_textDirection = false;

    if (m_textDirection)
    {
        delete m_textDirection;
        m_textDirection = NULL;
    }


    m_has_bidi = false;

    if (m_bidi)
    {
        delete m_bidi;
        m_bidi = NULL;
    }


    m_has_rtlGutter = false;

    if (m_rtlGutter)
    {
        delete m_rtlGutter;
        m_rtlGutter = NULL;
    }


    m_has_docGrid = false;

    if (m_docGrid)
    {
        delete m_docGrid;
        m_docGrid = NULL;
    }


    m_has_printerSettings = false;

    if (m_printerSettings)
    {
        delete m_printerSettings;
        m_printerSettings = NULL;
    }

}

void CT_SectPrBase::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_rsidRPr_attr)
    {
        m_rsidRPr_attr->toXmlAttr("w:rsidRPr", _outStream);
    }



    if (m_has_rsidDel_attr)
    {
        m_rsidDel_attr->toXmlAttr("w:rsidDel", _outStream);
    }



    if (m_has_rsidR_attr)
    {
        m_rsidR_attr->toXmlAttr("w:rsidR", _outStream);
    }



    if (m_has_rsidSect_attr)
    {
        m_rsidSect_attr->toXmlAttr("w:rsidSect", _outStream);
    }

    _outStream << ">";


    if (m_has_footnotePr)
    {
        m_footnotePr->toXmlElem("w:footnotePr", "", _outStream);
    }


    if (m_has_endnotePr)
    {
        m_endnotePr->toXmlElem("w:endnotePr", "", _outStream);
    }


    if (m_has_type)
    {
        m_type->toXmlElem("w:type", "", _outStream);
    }


    if (m_has_pgSz)
    {
        m_pgSz->toXmlElem("w:pgSz", "", _outStream);
    }


    if (m_has_pgMar)
    {
        m_pgMar->toXmlElem("w:pgMar", "", _outStream);
    }


    if (m_has_paperSrc)
    {
        m_paperSrc->toXmlElem("w:paperSrc", "", _outStream);
    }


    if (m_has_pgBorders)
    {
        m_pgBorders->toXmlElem("w:pgBorders", "", _outStream);
    }


    if (m_has_lnNumType)
    {
        m_lnNumType->toXmlElem("w:lnNumType", "", _outStream);
    }


    if (m_has_pgNumType)
    {
        m_pgNumType->toXmlElem("w:pgNumType", "", _outStream);
    }


    if (m_has_cols)
    {
        m_cols->toXmlElem("w:cols", "", _outStream);
    }


    if (m_has_formProt)
    {
        m_formProt->toXmlElem("w:formProt", "", _outStream);
    }


    if (m_has_vAlign)
    {
        m_vAlign->toXmlElem("w:vAlign", "", _outStream);
    }


    if (m_has_noEndnote)
    {
        m_noEndnote->toXmlElem("w:noEndnote", "", _outStream);
    }


    if (m_has_titlePg)
    {
        m_titlePg->toXmlElem("w:titlePg", "", _outStream);
    }


    if (m_has_textDirection)
    {
        m_textDirection->toXmlElem("w:textDirection", "", _outStream);
    }


    if (m_has_bidi)
    {
        m_bidi->toXmlElem("w:bidi", "", _outStream);
    }


    if (m_has_rtlGutter)
    {
        m_rtlGutter->toXmlElem("w:rtlGutter", "", _outStream);
    }


    if (m_has_docGrid)
    {
        m_docGrid->toXmlElem("w:docGrid", "", _outStream);
    }


    if (m_has_printerSettings)
    {
        m_printerSettings->toXmlElem("w:printerSettings", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_SectPrBase& CT_SectPrBase::default_instance()
{
    if (!CT_SectPrBase::default_instance_)
    {
        CT_SectPrBase::default_instance_ = new CT_SectPrBase();
    }
    return *CT_SectPrBase::default_instance_;
}

bool CT_SectPrBase::has_rsidRPr_attr() const
{
    return m_has_rsidRPr_attr;
}

void CT_SectPrBase::set_rsidRPr_attr(const ST_LongHexNumber& _rsidRPr_attr)
{
    m_has_rsidRPr_attr = true;
    m_rsidRPr_attr = new ST_LongHexNumber(_rsidRPr_attr);
}

const ST_LongHexNumber& CT_SectPrBase::get_rsidRPr_attr() const
{
    if (m_rsidRPr_attr)
    {
        return *m_rsidRPr_attr;
    }
    return ST_LongHexNumber::default_instance();
}

bool CT_SectPrBase::has_rsidDel_attr() const
{
    return m_has_rsidDel_attr;
}

void CT_SectPrBase::set_rsidDel_attr(const ST_LongHexNumber& _rsidDel_attr)
{
    m_has_rsidDel_attr = true;
    m_rsidDel_attr = new ST_LongHexNumber(_rsidDel_attr);
}

const ST_LongHexNumber& CT_SectPrBase::get_rsidDel_attr() const
{
    if (m_rsidDel_attr)
    {
        return *m_rsidDel_attr;
    }
    return ST_LongHexNumber::default_instance();
}

bool CT_SectPrBase::has_rsidR_attr() const
{
    return m_has_rsidR_attr;
}

void CT_SectPrBase::set_rsidR_attr(const ST_LongHexNumber& _rsidR_attr)
{
    m_has_rsidR_attr = true;
    m_rsidR_attr = new ST_LongHexNumber(_rsidR_attr);
}

const ST_LongHexNumber& CT_SectPrBase::get_rsidR_attr() const
{
    if (m_rsidR_attr)
    {
        return *m_rsidR_attr;
    }
    return ST_LongHexNumber::default_instance();
}

bool CT_SectPrBase::has_rsidSect_attr() const
{
    return m_has_rsidSect_attr;
}

void CT_SectPrBase::set_rsidSect_attr(const ST_LongHexNumber& _rsidSect_attr)
{
    m_has_rsidSect_attr = true;
    m_rsidSect_attr = new ST_LongHexNumber(_rsidSect_attr);
}

const ST_LongHexNumber& CT_SectPrBase::get_rsidSect_attr() const
{
    if (m_rsidSect_attr)
    {
        return *m_rsidSect_attr;
    }
    return ST_LongHexNumber::default_instance();
}

CT_SectPrBase* CT_SectPrBase::default_instance_ = NULL;

// CT_SectPr
CT_SectPr::CT_SectPr()
    :m_has_footnotePr(false),
     m_footnotePr(NULL),
     m_has_endnotePr(false),
     m_endnotePr(NULL),
     m_has_type(false),
     m_type(NULL),
     m_has_pgSz(false),
     m_pgSz(NULL),
     m_has_pgMar(false),
     m_pgMar(NULL),
     m_has_paperSrc(false),
     m_paperSrc(NULL),
     m_has_pgBorders(false),
     m_pgBorders(NULL),
     m_has_lnNumType(false),
     m_lnNumType(NULL),
     m_has_pgNumType(false),
     m_pgNumType(NULL),
     m_has_cols(false),
     m_cols(NULL),
     m_has_formProt(false),
     m_formProt(NULL),
     m_has_vAlign(false),
     m_vAlign(NULL),
     m_has_noEndnote(false),
     m_noEndnote(NULL),
     m_has_titlePg(false),
     m_titlePg(NULL),
     m_has_textDirection(false),
     m_textDirection(NULL),
     m_has_bidi(false),
     m_bidi(NULL),
     m_has_rtlGutter(false),
     m_rtlGutter(NULL),
     m_has_docGrid(false),
     m_docGrid(NULL),
     m_has_printerSettings(false),
     m_printerSettings(NULL),
     m_has_sectPrChange(false),
     m_sectPrChange(NULL),
     m_has_rsidRPr_attr(false),
     m_rsidRPr_attr(NULL),
     m_has_rsidDel_attr(false),
     m_rsidDel_attr(NULL),
     m_has_rsidR_attr(false),
     m_rsidR_attr(NULL),
     m_has_rsidSect_attr(false),
     m_rsidSect_attr(NULL)
{
}
CT_SectPr::~CT_SectPr()
{
    clear();
}
CT_HdrFtrRef* CT_SectPr::add_headerReference()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_HdrFtrRef* pNewChild = pChildGroup->mutable_headerReference();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_HdrFtrRef* CT_SectPr::add_footerReference()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_HdrFtrRef* pNewChild = pChildGroup->mutable_footerReference();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

bool CT_SectPr::has_footnotePr() const
{
    return m_has_footnotePr;
}

CT_FtnProps* CT_SectPr::mutable_footnotePr()
{
    m_has_footnotePr = true;
    if (!m_footnotePr)
    {
        m_footnotePr = new CT_FtnProps();
    }
    return m_footnotePr;
}

const CT_FtnProps& CT_SectPr::get_footnotePr() const
{
    if (m_footnotePr)
    {
        return *m_footnotePr;
    }
    return CT_FtnProps::default_instance();
}

bool CT_SectPr::has_endnotePr() const
{
    return m_has_endnotePr;
}

CT_EdnProps* CT_SectPr::mutable_endnotePr()
{
    m_has_endnotePr = true;
    if (!m_endnotePr)
    {
        m_endnotePr = new CT_EdnProps();
    }
    return m_endnotePr;
}

const CT_EdnProps& CT_SectPr::get_endnotePr() const
{
    if (m_endnotePr)
    {
        return *m_endnotePr;
    }
    return CT_EdnProps::default_instance();
}

bool CT_SectPr::has_type() const
{
    return m_has_type;
}

CT_SectType* CT_SectPr::mutable_type()
{
    m_has_type = true;
    if (!m_type)
    {
        m_type = new CT_SectType();
    }
    return m_type;
}

const CT_SectType& CT_SectPr::get_type() const
{
    if (m_type)
    {
        return *m_type;
    }
    return CT_SectType::default_instance();
}

bool CT_SectPr::has_pgSz() const
{
    return m_has_pgSz;
}

CT_PageSz* CT_SectPr::mutable_pgSz()
{
    m_has_pgSz = true;
    if (!m_pgSz)
    {
        m_pgSz = new CT_PageSz();
    }
    return m_pgSz;
}

const CT_PageSz& CT_SectPr::get_pgSz() const
{
    if (m_pgSz)
    {
        return *m_pgSz;
    }
    return CT_PageSz::default_instance();
}

bool CT_SectPr::has_pgMar() const
{
    return m_has_pgMar;
}

CT_PageMar* CT_SectPr::mutable_pgMar()
{
    m_has_pgMar = true;
    if (!m_pgMar)
    {
        m_pgMar = new CT_PageMar();
    }
    return m_pgMar;
}

const CT_PageMar& CT_SectPr::get_pgMar() const
{
    if (m_pgMar)
    {
        return *m_pgMar;
    }
    return CT_PageMar::default_instance();
}

bool CT_SectPr::has_paperSrc() const
{
    return m_has_paperSrc;
}

CT_PaperSource* CT_SectPr::mutable_paperSrc()
{
    m_has_paperSrc = true;
    if (!m_paperSrc)
    {
        m_paperSrc = new CT_PaperSource();
    }
    return m_paperSrc;
}

const CT_PaperSource& CT_SectPr::get_paperSrc() const
{
    if (m_paperSrc)
    {
        return *m_paperSrc;
    }
    return CT_PaperSource::default_instance();
}

bool CT_SectPr::has_pgBorders() const
{
    return m_has_pgBorders;
}

CT_PageBorders* CT_SectPr::mutable_pgBorders()
{
    m_has_pgBorders = true;
    if (!m_pgBorders)
    {
        m_pgBorders = new CT_PageBorders();
    }
    return m_pgBorders;
}

const CT_PageBorders& CT_SectPr::get_pgBorders() const
{
    if (m_pgBorders)
    {
        return *m_pgBorders;
    }
    return CT_PageBorders::default_instance();
}

bool CT_SectPr::has_lnNumType() const
{
    return m_has_lnNumType;
}

CT_LineNumber* CT_SectPr::mutable_lnNumType()
{
    m_has_lnNumType = true;
    if (!m_lnNumType)
    {
        m_lnNumType = new CT_LineNumber();
    }
    return m_lnNumType;
}

const CT_LineNumber& CT_SectPr::get_lnNumType() const
{
    if (m_lnNumType)
    {
        return *m_lnNumType;
    }
    return CT_LineNumber::default_instance();
}

bool CT_SectPr::has_pgNumType() const
{
    return m_has_pgNumType;
}

CT_PageNumber* CT_SectPr::mutable_pgNumType()
{
    m_has_pgNumType = true;
    if (!m_pgNumType)
    {
        m_pgNumType = new CT_PageNumber();
    }
    return m_pgNumType;
}

const CT_PageNumber& CT_SectPr::get_pgNumType() const
{
    if (m_pgNumType)
    {
        return *m_pgNumType;
    }
    return CT_PageNumber::default_instance();
}

bool CT_SectPr::has_cols() const
{
    return m_has_cols;
}

CT_Columns* CT_SectPr::mutable_cols()
{
    m_has_cols = true;
    if (!m_cols)
    {
        m_cols = new CT_Columns();
    }
    return m_cols;
}

const CT_Columns& CT_SectPr::get_cols() const
{
    if (m_cols)
    {
        return *m_cols;
    }
    return CT_Columns::default_instance();
}

bool CT_SectPr::has_formProt() const
{
    return m_has_formProt;
}

CT_OnOff* CT_SectPr::mutable_formProt()
{
    m_has_formProt = true;
    if (!m_formProt)
    {
        m_formProt = new CT_OnOff();
    }
    return m_formProt;
}

const CT_OnOff& CT_SectPr::get_formProt() const
{
    if (m_formProt)
    {
        return *m_formProt;
    }
    return CT_OnOff::default_instance();
}

bool CT_SectPr::has_vAlign() const
{
    return m_has_vAlign;
}

CT_VerticalJc* CT_SectPr::mutable_vAlign()
{
    m_has_vAlign = true;
    if (!m_vAlign)
    {
        m_vAlign = new CT_VerticalJc();
    }
    return m_vAlign;
}

const CT_VerticalJc& CT_SectPr::get_vAlign() const
{
    if (m_vAlign)
    {
        return *m_vAlign;
    }
    return CT_VerticalJc::default_instance();
}

bool CT_SectPr::has_noEndnote() const
{
    return m_has_noEndnote;
}

CT_OnOff* CT_SectPr::mutable_noEndnote()
{
    m_has_noEndnote = true;
    if (!m_noEndnote)
    {
        m_noEndnote = new CT_OnOff();
    }
    return m_noEndnote;
}

const CT_OnOff& CT_SectPr::get_noEndnote() const
{
    if (m_noEndnote)
    {
        return *m_noEndnote;
    }
    return CT_OnOff::default_instance();
}

bool CT_SectPr::has_titlePg() const
{
    return m_has_titlePg;
}

CT_OnOff* CT_SectPr::mutable_titlePg()
{
    m_has_titlePg = true;
    if (!m_titlePg)
    {
        m_titlePg = new CT_OnOff();
    }
    return m_titlePg;
}

const CT_OnOff& CT_SectPr::get_titlePg() const
{
    if (m_titlePg)
    {
        return *m_titlePg;
    }
    return CT_OnOff::default_instance();
}

bool CT_SectPr::has_textDirection() const
{
    return m_has_textDirection;
}

CT_TextDirection* CT_SectPr::mutable_textDirection()
{
    m_has_textDirection = true;
    if (!m_textDirection)
    {
        m_textDirection = new CT_TextDirection();
    }
    return m_textDirection;
}

const CT_TextDirection& CT_SectPr::get_textDirection() const
{
    if (m_textDirection)
    {
        return *m_textDirection;
    }
    return CT_TextDirection::default_instance();
}

bool CT_SectPr::has_bidi() const
{
    return m_has_bidi;
}

CT_OnOff* CT_SectPr::mutable_bidi()
{
    m_has_bidi = true;
    if (!m_bidi)
    {
        m_bidi = new CT_OnOff();
    }
    return m_bidi;
}

const CT_OnOff& CT_SectPr::get_bidi() const
{
    if (m_bidi)
    {
        return *m_bidi;
    }
    return CT_OnOff::default_instance();
}

bool CT_SectPr::has_rtlGutter() const
{
    return m_has_rtlGutter;
}

CT_OnOff* CT_SectPr::mutable_rtlGutter()
{
    m_has_rtlGutter = true;
    if (!m_rtlGutter)
    {
        m_rtlGutter = new CT_OnOff();
    }
    return m_rtlGutter;
}

const CT_OnOff& CT_SectPr::get_rtlGutter() const
{
    if (m_rtlGutter)
    {
        return *m_rtlGutter;
    }
    return CT_OnOff::default_instance();
}

bool CT_SectPr::has_docGrid() const
{
    return m_has_docGrid;
}

CT_DocGrid* CT_SectPr::mutable_docGrid()
{
    m_has_docGrid = true;
    if (!m_docGrid)
    {
        m_docGrid = new CT_DocGrid();
    }
    return m_docGrid;
}

const CT_DocGrid& CT_SectPr::get_docGrid() const
{
    if (m_docGrid)
    {
        return *m_docGrid;
    }
    return CT_DocGrid::default_instance();
}

bool CT_SectPr::has_printerSettings() const
{
    return m_has_printerSettings;
}

CT_Rel* CT_SectPr::mutable_printerSettings()
{
    m_has_printerSettings = true;
    if (!m_printerSettings)
    {
        m_printerSettings = new CT_Rel();
    }
    return m_printerSettings;
}

const CT_Rel& CT_SectPr::get_printerSettings() const
{
    if (m_printerSettings)
    {
        return *m_printerSettings;
    }
    return CT_Rel::default_instance();
}

bool CT_SectPr::has_sectPrChange() const
{
    return m_has_sectPrChange;
}

CT_SectPrChange* CT_SectPr::mutable_sectPrChange()
{
    m_has_sectPrChange = true;
    if (!m_sectPrChange)
    {
        m_sectPrChange = new CT_SectPrChange();
    }
    return m_sectPrChange;
}

const CT_SectPrChange& CT_SectPr::get_sectPrChange() const
{
    if (m_sectPrChange)
    {
        return *m_sectPrChange;
    }
    return CT_SectPrChange::default_instance();
}

void CT_SectPr::clear()
{
    m_has_rsidRPr_attr = false;

    if (m_rsidRPr_attr)
    {
        delete m_rsidRPr_attr;
        m_rsidRPr_attr = NULL;
    }


    m_has_rsidDel_attr = false;

    if (m_rsidDel_attr)
    {
        delete m_rsidDel_attr;
        m_rsidDel_attr = NULL;
    }


    m_has_rsidR_attr = false;

    if (m_rsidR_attr)
    {
        delete m_rsidR_attr;
        m_rsidR_attr = NULL;
    }


    m_has_rsidSect_attr = false;

    if (m_rsidSect_attr)
    {
        delete m_rsidSect_attr;
        m_rsidSect_attr = NULL;
    }


    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }

    m_has_footnotePr = false;

    if (m_footnotePr)
    {
        delete m_footnotePr;
        m_footnotePr = NULL;
    }


    m_has_endnotePr = false;

    if (m_endnotePr)
    {
        delete m_endnotePr;
        m_endnotePr = NULL;
    }


    m_has_type = false;

    if (m_type)
    {
        delete m_type;
        m_type = NULL;
    }


    m_has_pgSz = false;

    if (m_pgSz)
    {
        delete m_pgSz;
        m_pgSz = NULL;
    }


    m_has_pgMar = false;

    if (m_pgMar)
    {
        delete m_pgMar;
        m_pgMar = NULL;
    }


    m_has_paperSrc = false;

    if (m_paperSrc)
    {
        delete m_paperSrc;
        m_paperSrc = NULL;
    }


    m_has_pgBorders = false;

    if (m_pgBorders)
    {
        delete m_pgBorders;
        m_pgBorders = NULL;
    }


    m_has_lnNumType = false;

    if (m_lnNumType)
    {
        delete m_lnNumType;
        m_lnNumType = NULL;
    }


    m_has_pgNumType = false;

    if (m_pgNumType)
    {
        delete m_pgNumType;
        m_pgNumType = NULL;
    }


    m_has_cols = false;

    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }


    m_has_formProt = false;

    if (m_formProt)
    {
        delete m_formProt;
        m_formProt = NULL;
    }


    m_has_vAlign = false;

    if (m_vAlign)
    {
        delete m_vAlign;
        m_vAlign = NULL;
    }


    m_has_noEndnote = false;

    if (m_noEndnote)
    {
        delete m_noEndnote;
        m_noEndnote = NULL;
    }


    m_has_titlePg = false;

    if (m_titlePg)
    {
        delete m_titlePg;
        m_titlePg = NULL;
    }


    m_has_textDirection = false;

    if (m_textDirection)
    {
        delete m_textDirection;
        m_textDirection = NULL;
    }


    m_has_bidi = false;

    if (m_bidi)
    {
        delete m_bidi;
        m_bidi = NULL;
    }


    m_has_rtlGutter = false;

    if (m_rtlGutter)
    {
        delete m_rtlGutter;
        m_rtlGutter = NULL;
    }


    m_has_docGrid = false;

    if (m_docGrid)
    {
        delete m_docGrid;
        m_docGrid = NULL;
    }


    m_has_printerSettings = false;

    if (m_printerSettings)
    {
        delete m_printerSettings;
        m_printerSettings = NULL;
    }


    m_has_sectPrChange = false;

    if (m_sectPrChange)
    {
        delete m_sectPrChange;
        m_sectPrChange = NULL;
    }

}

void CT_SectPr::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_rsidRPr_attr)
    {
        m_rsidRPr_attr->toXmlAttr("w:rsidRPr", _outStream);
    }



    if (m_has_rsidDel_attr)
    {
        m_rsidDel_attr->toXmlAttr("w:rsidDel", _outStream);
    }



    if (m_has_rsidR_attr)
    {
        m_rsidR_attr->toXmlAttr("w:rsidR", _outStream);
    }



    if (m_has_rsidSect_attr)
    {
        m_rsidSect_attr->toXmlAttr("w:rsidSect", _outStream);
    }

    _outStream << ">";

    {
        int elemCnt = count_if(m_childGroupList_1.begin(), m_childGroupList_1.end(), mem_fun(&ChildGroup_1::has_headerReference));
        assert(0 <= elemCnt && elemCnt <= 1);
    }


    {
        int elemCnt = count_if(m_childGroupList_1.begin(), m_childGroupList_1.end(), mem_fun(&ChildGroup_1::has_footerReference));
        assert(0 <= elemCnt && elemCnt <= 1);
    }

    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_headerReference())
            {
                (*iter)->get_headerReference().toXmlElem("w:headerReference", "", _outStream);
            }


            else if ((*iter)->has_footerReference())
            {
                (*iter)->get_footerReference().toXmlElem("w:footerReference", "", _outStream);
            }


        }
    }


    if (m_has_footnotePr)
    {
        m_footnotePr->toXmlElem("w:footnotePr", "", _outStream);
    }


    if (m_has_endnotePr)
    {
        m_endnotePr->toXmlElem("w:endnotePr", "", _outStream);
    }


    if (m_has_type)
    {
        m_type->toXmlElem("w:type", "", _outStream);
    }


    if (m_has_pgSz)
    {
        m_pgSz->toXmlElem("w:pgSz", "", _outStream);
    }


    if (m_has_pgMar)
    {
        m_pgMar->toXmlElem("w:pgMar", "", _outStream);
    }


    if (m_has_paperSrc)
    {
        m_paperSrc->toXmlElem("w:paperSrc", "", _outStream);
    }


    if (m_has_pgBorders)
    {
        m_pgBorders->toXmlElem("w:pgBorders", "", _outStream);
    }


    if (m_has_lnNumType)
    {
        m_lnNumType->toXmlElem("w:lnNumType", "", _outStream);
    }


    if (m_has_pgNumType)
    {
        m_pgNumType->toXmlElem("w:pgNumType", "", _outStream);
    }


    if (m_has_cols)
    {
        m_cols->toXmlElem("w:cols", "", _outStream);
    }


    if (m_has_formProt)
    {
        m_formProt->toXmlElem("w:formProt", "", _outStream);
    }


    if (m_has_vAlign)
    {
        m_vAlign->toXmlElem("w:vAlign", "", _outStream);
    }


    if (m_has_noEndnote)
    {
        m_noEndnote->toXmlElem("w:noEndnote", "", _outStream);
    }


    if (m_has_titlePg)
    {
        m_titlePg->toXmlElem("w:titlePg", "", _outStream);
    }


    if (m_has_textDirection)
    {
        m_textDirection->toXmlElem("w:textDirection", "", _outStream);
    }


    if (m_has_bidi)
    {
        m_bidi->toXmlElem("w:bidi", "", _outStream);
    }


    if (m_has_rtlGutter)
    {
        m_rtlGutter->toXmlElem("w:rtlGutter", "", _outStream);
    }


    if (m_has_docGrid)
    {
        m_docGrid->toXmlElem("w:docGrid", "", _outStream);
    }


    if (m_has_printerSettings)
    {
        m_printerSettings->toXmlElem("w:printerSettings", "", _outStream);
    }


    if (m_has_sectPrChange)
    {
        m_sectPrChange->toXmlElem("w:sectPrChange", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_SectPr& CT_SectPr::default_instance()
{
    if (!CT_SectPr::default_instance_)
    {
        CT_SectPr::default_instance_ = new CT_SectPr();
    }
    return *CT_SectPr::default_instance_;
}

bool CT_SectPr::has_rsidRPr_attr() const
{
    return m_has_rsidRPr_attr;
}

void CT_SectPr::set_rsidRPr_attr(const ST_LongHexNumber& _rsidRPr_attr)
{
    m_has_rsidRPr_attr = true;
    m_rsidRPr_attr = new ST_LongHexNumber(_rsidRPr_attr);
}

const ST_LongHexNumber& CT_SectPr::get_rsidRPr_attr() const
{
    if (m_rsidRPr_attr)
    {
        return *m_rsidRPr_attr;
    }
    return ST_LongHexNumber::default_instance();
}

bool CT_SectPr::has_rsidDel_attr() const
{
    return m_has_rsidDel_attr;
}

void CT_SectPr::set_rsidDel_attr(const ST_LongHexNumber& _rsidDel_attr)
{
    m_has_rsidDel_attr = true;
    m_rsidDel_attr = new ST_LongHexNumber(_rsidDel_attr);
}

const ST_LongHexNumber& CT_SectPr::get_rsidDel_attr() const
{
    if (m_rsidDel_attr)
    {
        return *m_rsidDel_attr;
    }
    return ST_LongHexNumber::default_instance();
}

bool CT_SectPr::has_rsidR_attr() const
{
    return m_has_rsidR_attr;
}

void CT_SectPr::set_rsidR_attr(const ST_LongHexNumber& _rsidR_attr)
{
    m_has_rsidR_attr = true;
    m_rsidR_attr = new ST_LongHexNumber(_rsidR_attr);
}

const ST_LongHexNumber& CT_SectPr::get_rsidR_attr() const
{
    if (m_rsidR_attr)
    {
        return *m_rsidR_attr;
    }
    return ST_LongHexNumber::default_instance();
}

bool CT_SectPr::has_rsidSect_attr() const
{
    return m_has_rsidSect_attr;
}

void CT_SectPr::set_rsidSect_attr(const ST_LongHexNumber& _rsidSect_attr)
{
    m_has_rsidSect_attr = true;
    m_rsidSect_attr = new ST_LongHexNumber(_rsidSect_attr);
}

const ST_LongHexNumber& CT_SectPr::get_rsidSect_attr() const
{
    if (m_rsidSect_attr)
    {
        return *m_rsidSect_attr;
    }
    return ST_LongHexNumber::default_instance();
}


// CT_SectPr::ChildGroup_1
CT_SectPr::ChildGroup_1::ChildGroup_1()
    :m_has_headerReference(false),
     m_headerReference(NULL),
     m_has_footerReference(false),
     m_footerReference(NULL)
{
}
bool CT_SectPr::ChildGroup_1::has_headerReference() const
{
    return m_has_headerReference;
}

CT_HdrFtrRef* CT_SectPr::ChildGroup_1::mutable_headerReference()
{

    m_has_footerReference = false;

    if (m_footerReference)
    {
        delete m_footerReference;
        m_footerReference = NULL;
    }
    ;

    m_has_headerReference = true;
    if (!m_headerReference)
    {
        m_headerReference = new CT_HdrFtrRef();
    }
    return m_headerReference;
}

const CT_HdrFtrRef& CT_SectPr::ChildGroup_1::get_headerReference() const
{
    if (m_headerReference)
    {
        return *m_headerReference;
    }
    return CT_HdrFtrRef::default_instance();
}

bool CT_SectPr::ChildGroup_1::has_footerReference() const
{
    return m_has_footerReference;
}

CT_HdrFtrRef* CT_SectPr::ChildGroup_1::mutable_footerReference()
{

    m_has_headerReference = false;

    if (m_headerReference)
    {
        delete m_headerReference;
        m_headerReference = NULL;
    }
    ;

    m_has_footerReference = true;
    if (!m_footerReference)
    {
        m_footerReference = new CT_HdrFtrRef();
    }
    return m_footerReference;
}

const CT_HdrFtrRef& CT_SectPr::ChildGroup_1::get_footerReference() const
{
    if (m_footerReference)
    {
        return *m_footerReference;
    }
    return CT_HdrFtrRef::default_instance();
}

CT_SectPr* CT_SectPr::default_instance_ = NULL;

// CT_Br
CT_Br::CT_Br()
    :m_has_type_attr(false),
     m_type_attr(NULL),
     m_has_clear_attr(false),
     m_clear_attr(NULL)
{
}
CT_Br::~CT_Br()
{
    clear();
}
void CT_Br::clear()
{
    m_has_type_attr = false;

    if (m_type_attr)
    {
        delete m_type_attr;
        m_type_attr = NULL;
    }


    m_has_clear_attr = false;

    if (m_clear_attr)
    {
        delete m_clear_attr;
        m_clear_attr = NULL;
    }

}

void CT_Br::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_type_attr)
    {
        m_type_attr->toXmlAttr("w:type", _outStream);
    }



    if (m_has_clear_attr)
    {
        m_clear_attr->toXmlAttr("w:clear", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_Br& CT_Br::default_instance()
{
    if (!CT_Br::default_instance_)
    {
        CT_Br::default_instance_ = new CT_Br();
    }
    return *CT_Br::default_instance_;
}

bool CT_Br::has_type_attr() const
{
    return m_has_type_attr;
}

void CT_Br::set_type_attr(const ST_BrType& _type_attr)
{
    m_has_type_attr = true;
    m_type_attr = new ST_BrType(_type_attr);
}

const ST_BrType& CT_Br::get_type_attr() const
{
    if (m_type_attr)
    {
        return *m_type_attr;
    }
    return ST_BrType::default_instance();
}

bool CT_Br::has_clear_attr() const
{
    return m_has_clear_attr;
}

void CT_Br::set_clear_attr(const ST_BrClear& _clear_attr)
{
    m_has_clear_attr = true;
    m_clear_attr = new ST_BrClear(_clear_attr);
}

const ST_BrClear& CT_Br::get_clear_attr() const
{
    if (m_clear_attr)
    {
        return *m_clear_attr;
    }
    return ST_BrClear::default_instance();
}

CT_Br* CT_Br::default_instance_ = NULL;

// CT_PTab
CT_PTab::CT_PTab()
    :m_has_alignment_attr(false),
     m_alignment_attr(NULL),
     m_has_relativeTo_attr(false),
     m_relativeTo_attr(NULL),
     m_has_leader_attr(false),
     m_leader_attr(NULL)
{
}
CT_PTab::~CT_PTab()
{
    clear();
}
void CT_PTab::clear()
{
    m_has_alignment_attr = false;

    if (m_alignment_attr)
    {
        delete m_alignment_attr;
        m_alignment_attr = NULL;
    }


    m_has_relativeTo_attr = false;

    if (m_relativeTo_attr)
    {
        delete m_relativeTo_attr;
        m_relativeTo_attr = NULL;
    }


    m_has_leader_attr = false;

    if (m_leader_attr)
    {
        delete m_leader_attr;
        m_leader_attr = NULL;
    }

}

void CT_PTab::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_alignment_attr);
    if (m_has_alignment_attr)
    {
        m_alignment_attr->toXmlAttr("w:alignment", _outStream);
    }


    assert(m_has_relativeTo_attr);
    if (m_has_relativeTo_attr)
    {
        m_relativeTo_attr->toXmlAttr("w:relativeTo", _outStream);
    }


    assert(m_has_leader_attr);
    if (m_has_leader_attr)
    {
        m_leader_attr->toXmlAttr("w:leader", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_PTab& CT_PTab::default_instance()
{
    if (!CT_PTab::default_instance_)
    {
        CT_PTab::default_instance_ = new CT_PTab();
    }
    return *CT_PTab::default_instance_;
}

bool CT_PTab::has_alignment_attr() const
{
    return m_has_alignment_attr;
}

void CT_PTab::set_alignment_attr(const ST_PTabAlignment& _alignment_attr)
{
    m_has_alignment_attr = true;
    m_alignment_attr = new ST_PTabAlignment(_alignment_attr);
}

const ST_PTabAlignment& CT_PTab::get_alignment_attr() const
{
    if (m_alignment_attr)
    {
        return *m_alignment_attr;
    }
    return ST_PTabAlignment::default_instance();
}

bool CT_PTab::has_relativeTo_attr() const
{
    return m_has_relativeTo_attr;
}

void CT_PTab::set_relativeTo_attr(const ST_PTabRelativeTo& _relativeTo_attr)
{
    m_has_relativeTo_attr = true;
    m_relativeTo_attr = new ST_PTabRelativeTo(_relativeTo_attr);
}

const ST_PTabRelativeTo& CT_PTab::get_relativeTo_attr() const
{
    if (m_relativeTo_attr)
    {
        return *m_relativeTo_attr;
    }
    return ST_PTabRelativeTo::default_instance();
}

bool CT_PTab::has_leader_attr() const
{
    return m_has_leader_attr;
}

void CT_PTab::set_leader_attr(const ST_PTabLeader& _leader_attr)
{
    m_has_leader_attr = true;
    m_leader_attr = new ST_PTabLeader(_leader_attr);
}

const ST_PTabLeader& CT_PTab::get_leader_attr() const
{
    if (m_leader_attr)
    {
        return *m_leader_attr;
    }
    return ST_PTabLeader::default_instance();
}

CT_PTab* CT_PTab::default_instance_ = NULL;

// CT_Sym
CT_Sym::CT_Sym()
    :m_has_font_attr(false),
     m_font_attr(NULL),
     m_has_char_attr(false),
     m_char_attr(NULL)
{
}
CT_Sym::~CT_Sym()
{
    clear();
}
void CT_Sym::clear()
{
    m_has_font_attr = false;

    if (m_font_attr)
    {
        delete m_font_attr;
        m_font_attr = NULL;
    }


    m_has_char_attr = false;

    if (m_char_attr)
    {
        delete m_char_attr;
        m_char_attr = NULL;
    }

}

void CT_Sym::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_font_attr)
    {
        m_font_attr->toXmlAttr("w:font", _outStream);
    }



    if (m_has_char_attr)
    {
        m_char_attr->toXmlAttr("w:char", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_Sym& CT_Sym::default_instance()
{
    if (!CT_Sym::default_instance_)
    {
        CT_Sym::default_instance_ = new CT_Sym();
    }
    return *CT_Sym::default_instance_;
}

bool CT_Sym::has_font_attr() const
{
    return m_has_font_attr;
}

void CT_Sym::set_font_attr(const ns_s::ST_String& _font_attr)
{
    m_has_font_attr = true;
    m_font_attr = new ns_s::ST_String(_font_attr);
}

const ns_s::ST_String& CT_Sym::get_font_attr() const
{
    if (m_font_attr)
    {
        return *m_font_attr;
    }
    return ns_s::ST_String::default_instance();
}

bool CT_Sym::has_char_attr() const
{
    return m_has_char_attr;
}

void CT_Sym::set_char_attr(const ST_ShortHexNumber& _char_attr)
{
    m_has_char_attr = true;
    m_char_attr = new ST_ShortHexNumber(_char_attr);
}

const ST_ShortHexNumber& CT_Sym::get_char_attr() const
{
    if (m_char_attr)
    {
        return *m_char_attr;
    }
    return ST_ShortHexNumber::default_instance();
}

CT_Sym* CT_Sym::default_instance_ = NULL;

// CT_ProofErr
CT_ProofErr::CT_ProofErr()
    :m_has_type_attr(false),
     m_type_attr(NULL)
{
}
CT_ProofErr::~CT_ProofErr()
{
    clear();
}
void CT_ProofErr::clear()
{
    m_has_type_attr = false;

    if (m_type_attr)
    {
        delete m_type_attr;
        m_type_attr = NULL;
    }

}

void CT_ProofErr::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_type_attr);
    if (m_has_type_attr)
    {
        m_type_attr->toXmlAttr("w:type", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_ProofErr& CT_ProofErr::default_instance()
{
    if (!CT_ProofErr::default_instance_)
    {
        CT_ProofErr::default_instance_ = new CT_ProofErr();
    }
    return *CT_ProofErr::default_instance_;
}

bool CT_ProofErr::has_type_attr() const
{
    return m_has_type_attr;
}

void CT_ProofErr::set_type_attr(const ST_ProofErr& _type_attr)
{
    m_has_type_attr = true;
    m_type_attr = new ST_ProofErr(_type_attr);
}

const ST_ProofErr& CT_ProofErr::get_type_attr() const
{
    if (m_type_attr)
    {
        return *m_type_attr;
    }
    return ST_ProofErr::default_instance();
}

CT_ProofErr* CT_ProofErr::default_instance_ = NULL;

// CT_Perm
CT_Perm::CT_Perm()
    :m_has_id_attr(false),
     m_id_attr(NULL),
     m_has_displacedByCustomXml_attr(false),
     m_displacedByCustomXml_attr(NULL)
{
}
CT_Perm::~CT_Perm()
{
    clear();
}
void CT_Perm::clear()
{
    m_has_id_attr = false;

    if (m_id_attr)
    {
        delete m_id_attr;
        m_id_attr = NULL;
    }


    m_has_displacedByCustomXml_attr = false;

    if (m_displacedByCustomXml_attr)
    {
        delete m_displacedByCustomXml_attr;
        m_displacedByCustomXml_attr = NULL;
    }

}

void CT_Perm::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_id_attr);
    if (m_has_id_attr)
    {
        m_id_attr->toXmlAttr("w:id", _outStream);
    }



    if (m_has_displacedByCustomXml_attr)
    {
        m_displacedByCustomXml_attr->toXmlAttr("w:displacedByCustomXml", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_Perm& CT_Perm::default_instance()
{
    if (!CT_Perm::default_instance_)
    {
        CT_Perm::default_instance_ = new CT_Perm();
    }
    return *CT_Perm::default_instance_;
}

bool CT_Perm::has_id_attr() const
{
    return m_has_id_attr;
}

void CT_Perm::set_id_attr(const ns_s::ST_String& _id_attr)
{
    m_has_id_attr = true;
    m_id_attr = new ns_s::ST_String(_id_attr);
}

const ns_s::ST_String& CT_Perm::get_id_attr() const
{
    if (m_id_attr)
    {
        return *m_id_attr;
    }
    return ns_s::ST_String::default_instance();
}

bool CT_Perm::has_displacedByCustomXml_attr() const
{
    return m_has_displacedByCustomXml_attr;
}

void CT_Perm::set_displacedByCustomXml_attr(const ST_DisplacedByCustomXml& _displacedByCustomXml_attr)
{
    m_has_displacedByCustomXml_attr = true;
    m_displacedByCustomXml_attr = new ST_DisplacedByCustomXml(_displacedByCustomXml_attr);
}

const ST_DisplacedByCustomXml& CT_Perm::get_displacedByCustomXml_attr() const
{
    if (m_displacedByCustomXml_attr)
    {
        return *m_displacedByCustomXml_attr;
    }
    return ST_DisplacedByCustomXml::default_instance();
}

CT_Perm* CT_Perm::default_instance_ = NULL;

// CT_PermStart
CT_PermStart::CT_PermStart()
    :m_has_id_attr(false),
     m_id_attr(NULL),
     m_has_displacedByCustomXml_attr(false),
     m_displacedByCustomXml_attr(NULL),
     m_has_edGrp_attr(false),
     m_edGrp_attr(NULL),
     m_has_ed_attr(false),
     m_ed_attr(NULL),
     m_has_colFirst_attr(false),
     m_colFirst_attr(NULL),
     m_has_colLast_attr(false),
     m_colLast_attr(NULL)
{
}
CT_PermStart::~CT_PermStart()
{
    clear();
}
void CT_PermStart::clear()
{
    m_has_id_attr = false;

    if (m_id_attr)
    {
        delete m_id_attr;
        m_id_attr = NULL;
    }


    m_has_displacedByCustomXml_attr = false;

    if (m_displacedByCustomXml_attr)
    {
        delete m_displacedByCustomXml_attr;
        m_displacedByCustomXml_attr = NULL;
    }


    m_has_edGrp_attr = false;

    if (m_edGrp_attr)
    {
        delete m_edGrp_attr;
        m_edGrp_attr = NULL;
    }


    m_has_ed_attr = false;

    if (m_ed_attr)
    {
        delete m_ed_attr;
        m_ed_attr = NULL;
    }


    m_has_colFirst_attr = false;

    if (m_colFirst_attr)
    {
        delete m_colFirst_attr;
        m_colFirst_attr = NULL;
    }


    m_has_colLast_attr = false;

    if (m_colLast_attr)
    {
        delete m_colLast_attr;
        m_colLast_attr = NULL;
    }

}

void CT_PermStart::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_id_attr);
    if (m_has_id_attr)
    {
        m_id_attr->toXmlAttr("w:id", _outStream);
    }



    if (m_has_displacedByCustomXml_attr)
    {
        m_displacedByCustomXml_attr->toXmlAttr("w:displacedByCustomXml", _outStream);
    }



    if (m_has_edGrp_attr)
    {
        m_edGrp_attr->toXmlAttr("w:edGrp", _outStream);
    }



    if (m_has_ed_attr)
    {
        m_ed_attr->toXmlAttr("w:ed", _outStream);
    }



    if (m_has_colFirst_attr)
    {
        m_colFirst_attr->toXmlAttr("w:colFirst", _outStream);
    }



    if (m_has_colLast_attr)
    {
        m_colLast_attr->toXmlAttr("w:colLast", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_PermStart& CT_PermStart::default_instance()
{
    if (!CT_PermStart::default_instance_)
    {
        CT_PermStart::default_instance_ = new CT_PermStart();
    }
    return *CT_PermStart::default_instance_;
}

bool CT_PermStart::has_id_attr() const
{
    return m_has_id_attr;
}

void CT_PermStart::set_id_attr(const ns_s::ST_String& _id_attr)
{
    m_has_id_attr = true;
    m_id_attr = new ns_s::ST_String(_id_attr);
}

const ns_s::ST_String& CT_PermStart::get_id_attr() const
{
    if (m_id_attr)
    {
        return *m_id_attr;
    }
    return ns_s::ST_String::default_instance();
}

bool CT_PermStart::has_displacedByCustomXml_attr() const
{
    return m_has_displacedByCustomXml_attr;
}

void CT_PermStart::set_displacedByCustomXml_attr(const ST_DisplacedByCustomXml& _displacedByCustomXml_attr)
{
    m_has_displacedByCustomXml_attr = true;
    m_displacedByCustomXml_attr = new ST_DisplacedByCustomXml(_displacedByCustomXml_attr);
}

const ST_DisplacedByCustomXml& CT_PermStart::get_displacedByCustomXml_attr() const
{
    if (m_displacedByCustomXml_attr)
    {
        return *m_displacedByCustomXml_attr;
    }
    return ST_DisplacedByCustomXml::default_instance();
}

bool CT_PermStart::has_edGrp_attr() const
{
    return m_has_edGrp_attr;
}

void CT_PermStart::set_edGrp_attr(const ST_EdGrp& _edGrp_attr)
{
    m_has_edGrp_attr = true;
    m_edGrp_attr = new ST_EdGrp(_edGrp_attr);
}

const ST_EdGrp& CT_PermStart::get_edGrp_attr() const
{
    if (m_edGrp_attr)
    {
        return *m_edGrp_attr;
    }
    return ST_EdGrp::default_instance();
}

bool CT_PermStart::has_ed_attr() const
{
    return m_has_ed_attr;
}

void CT_PermStart::set_ed_attr(const ns_s::ST_String& _ed_attr)
{
    m_has_ed_attr = true;
    m_ed_attr = new ns_s::ST_String(_ed_attr);
}

const ns_s::ST_String& CT_PermStart::get_ed_attr() const
{
    if (m_ed_attr)
    {
        return *m_ed_attr;
    }
    return ns_s::ST_String::default_instance();
}

bool CT_PermStart::has_colFirst_attr() const
{
    return m_has_colFirst_attr;
}

void CT_PermStart::set_colFirst_attr(const ST_DecimalNumber& _colFirst_attr)
{
    m_has_colFirst_attr = true;
    m_colFirst_attr = new ST_DecimalNumber(_colFirst_attr);
}

const ST_DecimalNumber& CT_PermStart::get_colFirst_attr() const
{
    if (m_colFirst_attr)
    {
        return *m_colFirst_attr;
    }
    return ST_DecimalNumber::default_instance();
}

bool CT_PermStart::has_colLast_attr() const
{
    return m_has_colLast_attr;
}

void CT_PermStart::set_colLast_attr(const ST_DecimalNumber& _colLast_attr)
{
    m_has_colLast_attr = true;
    m_colLast_attr = new ST_DecimalNumber(_colLast_attr);
}

const ST_DecimalNumber& CT_PermStart::get_colLast_attr() const
{
    if (m_colLast_attr)
    {
        return *m_colLast_attr;
    }
    return ST_DecimalNumber::default_instance();
}

CT_PermStart* CT_PermStart::default_instance_ = NULL;

// CT_Text
CT_Text::CT_Text()
    :m_has_xml_space_attr(false),
     m_xml_space_attr(NULL)
{
}
CT_Text::~CT_Text()
{
    clear();
}
void CT_Text::clear()
{
    m_has_xml_space_attr = false;

    if (m_xml_space_attr)
    {
        delete m_xml_space_attr;
        m_xml_space_attr = NULL;
    }

    ns_s::ST_String::clear();
}

void CT_Text::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_xml_space_attr)
    {
        m_xml_space_attr->toXmlAttr("xml:space", _outStream);
    }

    _outStream << ">";
    _outStream << toString();
    _outStream << "</" << _elemName << ">";
}

const CT_Text& CT_Text::default_instance()
{
    if (!CT_Text::default_instance_)
    {
        CT_Text::default_instance_ = new CT_Text();
    }
    return *CT_Text::default_instance_;
}

bool CT_Text::has_xml_space_attr() const
{
    return m_has_xml_space_attr;
}

void CT_Text::set_xml_space_attr(const ns_xml::space& _xml_space_attr)
{
    m_has_xml_space_attr = true;
    m_xml_space_attr = new ns_xml::space(_xml_space_attr);
}

const ns_xml::space& CT_Text::get_xml_space_attr() const
{
    if (m_xml_space_attr)
    {
        return *m_xml_space_attr;
    }
    return ns_xml::space::default_instance();
}

CT_Text* CT_Text::default_instance_ = NULL;

// CT_R
CT_R::CT_R()
    :m_has_rPr(false),
     m_rPr(NULL),
     m_has_rsidRPr_attr(false),
     m_rsidRPr_attr(NULL),
     m_has_rsidDel_attr(false),
     m_rsidDel_attr(NULL),
     m_has_rsidR_attr(false),
     m_rsidR_attr(NULL)
{
}
CT_R::~CT_R()
{
    clear();
}
bool CT_R::has_rPr() const
{
    return m_has_rPr;
}

CT_RPr* CT_R::mutable_rPr()
{
    m_has_rPr = true;
    if (!m_rPr)
    {
        m_rPr = new CT_RPr();
    }
    return m_rPr;
}

const CT_RPr& CT_R::get_rPr() const
{
    if (m_rPr)
    {
        return *m_rPr;
    }
    return CT_RPr::default_instance();
}

CT_Br* CT_R::add_br()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Br* pNewChild = pChildGroup->mutable_br();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_Text* CT_R::add_t()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Text* pNewChild = pChildGroup->mutable_t();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_Rel* CT_R::add_contentPart()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Rel* pNewChild = pChildGroup->mutable_contentPart();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_Text* CT_R::add_delText()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Text* pNewChild = pChildGroup->mutable_delText();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_Text* CT_R::add_instrText()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Text* pNewChild = pChildGroup->mutable_instrText();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_Text* CT_R::add_delInstrText()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Text* pNewChild = pChildGroup->mutable_delInstrText();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_Empty* CT_R::add_noBreakHyphen()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Empty* pNewChild = pChildGroup->mutable_noBreakHyphen();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_Empty* CT_R::add_softHyphen()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Empty* pNewChild = pChildGroup->mutable_softHyphen();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_Empty* CT_R::add_dayShort()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Empty* pNewChild = pChildGroup->mutable_dayShort();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_Empty* CT_R::add_monthShort()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Empty* pNewChild = pChildGroup->mutable_monthShort();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_Empty* CT_R::add_yearShort()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Empty* pNewChild = pChildGroup->mutable_yearShort();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_Empty* CT_R::add_dayLong()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Empty* pNewChild = pChildGroup->mutable_dayLong();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_Empty* CT_R::add_monthLong()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Empty* pNewChild = pChildGroup->mutable_monthLong();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_Empty* CT_R::add_yearLong()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Empty* pNewChild = pChildGroup->mutable_yearLong();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_Empty* CT_R::add_annotationRef()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Empty* pNewChild = pChildGroup->mutable_annotationRef();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_Empty* CT_R::add_footnoteRef()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Empty* pNewChild = pChildGroup->mutable_footnoteRef();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_Empty* CT_R::add_endnoteRef()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Empty* pNewChild = pChildGroup->mutable_endnoteRef();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_Empty* CT_R::add_separator()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Empty* pNewChild = pChildGroup->mutable_separator();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_Empty* CT_R::add_continuationSeparator()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Empty* pNewChild = pChildGroup->mutable_continuationSeparator();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_Sym* CT_R::add_sym()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Sym* pNewChild = pChildGroup->mutable_sym();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_Empty* CT_R::add_pgNum()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Empty* pNewChild = pChildGroup->mutable_pgNum();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_Empty* CT_R::add_cr()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Empty* pNewChild = pChildGroup->mutable_cr();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_Empty* CT_R::add_tab()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Empty* pNewChild = pChildGroup->mutable_tab();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_Object* CT_R::add_object()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Object* pNewChild = pChildGroup->mutable_object();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_Picture* CT_R::add_pict()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Picture* pNewChild = pChildGroup->mutable_pict();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_FldChar* CT_R::add_fldChar()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_FldChar* pNewChild = pChildGroup->mutable_fldChar();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_Ruby* CT_R::add_ruby()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Ruby* pNewChild = pChildGroup->mutable_ruby();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_FtnEdnRef* CT_R::add_footnoteReference()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_FtnEdnRef* pNewChild = pChildGroup->mutable_footnoteReference();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_FtnEdnRef* CT_R::add_endnoteReference()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_FtnEdnRef* pNewChild = pChildGroup->mutable_endnoteReference();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_Markup* CT_R::add_commentReference()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Markup* pNewChild = pChildGroup->mutable_commentReference();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_Drawing* CT_R::add_drawing()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Drawing* pNewChild = pChildGroup->mutable_drawing();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_PTab* CT_R::add_ptab()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_PTab* pNewChild = pChildGroup->mutable_ptab();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_Empty* CT_R::add_lastRenderedPageBreak()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Empty* pNewChild = pChildGroup->mutable_lastRenderedPageBreak();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

void CT_R::clear()
{
    m_has_rsidRPr_attr = false;

    if (m_rsidRPr_attr)
    {
        delete m_rsidRPr_attr;
        m_rsidRPr_attr = NULL;
    }


    m_has_rsidDel_attr = false;

    if (m_rsidDel_attr)
    {
        delete m_rsidDel_attr;
        m_rsidDel_attr = NULL;
    }


    m_has_rsidR_attr = false;

    if (m_rsidR_attr)
    {
        delete m_rsidR_attr;
        m_rsidR_attr = NULL;
    }


    m_has_rPr = false;

    if (m_rPr)
    {
        delete m_rPr;
        m_rPr = NULL;
    }


    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
}

void CT_R::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_rsidRPr_attr)
    {
        m_rsidRPr_attr->toXmlAttr("w:rsidRPr", _outStream);
    }



    if (m_has_rsidDel_attr)
    {
        m_rsidDel_attr->toXmlAttr("w:rsidDel", _outStream);
    }



    if (m_has_rsidR_attr)
    {
        m_rsidR_attr->toXmlAttr("w:rsidR", _outStream);
    }

    _outStream << ">";


    if (m_has_rPr)
    {
        m_rPr->toXmlElem("w:rPr", "", _outStream);
    }

    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_br())
            {
                (*iter)->get_br().toXmlElem("w:br", "", _outStream);
            }


            else if ((*iter)->has_t())
            {
                (*iter)->get_t().toXmlElem("w:t", "", _outStream);
            }


            else if ((*iter)->has_contentPart())
            {
                (*iter)->get_contentPart().toXmlElem("w:contentPart", "", _outStream);
            }


            else if ((*iter)->has_delText())
            {
                (*iter)->get_delText().toXmlElem("w:delText", "", _outStream);
            }


            else if ((*iter)->has_instrText())
            {
                (*iter)->get_instrText().toXmlElem("w:instrText", "", _outStream);
            }


            else if ((*iter)->has_delInstrText())
            {
                (*iter)->get_delInstrText().toXmlElem("w:delInstrText", "", _outStream);
            }


            else if ((*iter)->has_noBreakHyphen())
            {
                (*iter)->get_noBreakHyphen().toXmlElem("w:noBreakHyphen", "", _outStream);
            }


            else if ((*iter)->has_softHyphen())
            {
                (*iter)->get_softHyphen().toXmlElem("w:softHyphen", "", _outStream);
            }


            else if ((*iter)->has_dayShort())
            {
                (*iter)->get_dayShort().toXmlElem("w:dayShort", "", _outStream);
            }


            else if ((*iter)->has_monthShort())
            {
                (*iter)->get_monthShort().toXmlElem("w:monthShort", "", _outStream);
            }


            else if ((*iter)->has_yearShort())
            {
                (*iter)->get_yearShort().toXmlElem("w:yearShort", "", _outStream);
            }


            else if ((*iter)->has_dayLong())
            {
                (*iter)->get_dayLong().toXmlElem("w:dayLong", "", _outStream);
            }


            else if ((*iter)->has_monthLong())
            {
                (*iter)->get_monthLong().toXmlElem("w:monthLong", "", _outStream);
            }


            else if ((*iter)->has_yearLong())
            {
                (*iter)->get_yearLong().toXmlElem("w:yearLong", "", _outStream);
            }


            else if ((*iter)->has_annotationRef())
            {
                (*iter)->get_annotationRef().toXmlElem("w:annotationRef", "", _outStream);
            }


            else if ((*iter)->has_footnoteRef())
            {
                (*iter)->get_footnoteRef().toXmlElem("w:footnoteRef", "", _outStream);
            }


            else if ((*iter)->has_endnoteRef())
            {
                (*iter)->get_endnoteRef().toXmlElem("w:endnoteRef", "", _outStream);
            }


            else if ((*iter)->has_separator())
            {
                (*iter)->get_separator().toXmlElem("w:separator", "", _outStream);
            }


            else if ((*iter)->has_continuationSeparator())
            {
                (*iter)->get_continuationSeparator().toXmlElem("w:continuationSeparator", "", _outStream);
            }


            else if ((*iter)->has_sym())
            {
                (*iter)->get_sym().toXmlElem("w:sym", "", _outStream);
            }


            else if ((*iter)->has_pgNum())
            {
                (*iter)->get_pgNum().toXmlElem("w:pgNum", "", _outStream);
            }


            else if ((*iter)->has_cr())
            {
                (*iter)->get_cr().toXmlElem("w:cr", "", _outStream);
            }


            else if ((*iter)->has_tab())
            {
                (*iter)->get_tab().toXmlElem("w:tab", "", _outStream);
            }


            else if ((*iter)->has_object())
            {
                (*iter)->get_object().toXmlElem("w:object", "", _outStream);
            }


            else if ((*iter)->has_pict())
            {
                (*iter)->get_pict().toXmlElem("w:pict", "", _outStream);
            }


            else if ((*iter)->has_fldChar())
            {
                (*iter)->get_fldChar().toXmlElem("w:fldChar", "", _outStream);
            }


            else if ((*iter)->has_ruby())
            {
                (*iter)->get_ruby().toXmlElem("w:ruby", "", _outStream);
            }


            else if ((*iter)->has_footnoteReference())
            {
                (*iter)->get_footnoteReference().toXmlElem("w:footnoteReference", "", _outStream);
            }


            else if ((*iter)->has_endnoteReference())
            {
                (*iter)->get_endnoteReference().toXmlElem("w:endnoteReference", "", _outStream);
            }


            else if ((*iter)->has_commentReference())
            {
                (*iter)->get_commentReference().toXmlElem("w:commentReference", "", _outStream);
            }


            else if ((*iter)->has_drawing())
            {
                (*iter)->get_drawing().toXmlElem("w:drawing", "", _outStream);
            }


            else if ((*iter)->has_ptab())
            {
                (*iter)->get_ptab().toXmlElem("w:ptab", "", _outStream);
            }


            else if ((*iter)->has_lastRenderedPageBreak())
            {
                (*iter)->get_lastRenderedPageBreak().toXmlElem("w:lastRenderedPageBreak", "", _outStream);
            }


        }
    }

    _outStream << "</" << _elemName << ">";
}

const CT_R& CT_R::default_instance()
{
    if (!CT_R::default_instance_)
    {
        CT_R::default_instance_ = new CT_R();
    }
    return *CT_R::default_instance_;
}

bool CT_R::has_rsidRPr_attr() const
{
    return m_has_rsidRPr_attr;
}

void CT_R::set_rsidRPr_attr(const ST_LongHexNumber& _rsidRPr_attr)
{
    m_has_rsidRPr_attr = true;
    m_rsidRPr_attr = new ST_LongHexNumber(_rsidRPr_attr);
}

const ST_LongHexNumber& CT_R::get_rsidRPr_attr() const
{
    if (m_rsidRPr_attr)
    {
        return *m_rsidRPr_attr;
    }
    return ST_LongHexNumber::default_instance();
}

bool CT_R::has_rsidDel_attr() const
{
    return m_has_rsidDel_attr;
}

void CT_R::set_rsidDel_attr(const ST_LongHexNumber& _rsidDel_attr)
{
    m_has_rsidDel_attr = true;
    m_rsidDel_attr = new ST_LongHexNumber(_rsidDel_attr);
}

const ST_LongHexNumber& CT_R::get_rsidDel_attr() const
{
    if (m_rsidDel_attr)
    {
        return *m_rsidDel_attr;
    }
    return ST_LongHexNumber::default_instance();
}

bool CT_R::has_rsidR_attr() const
{
    return m_has_rsidR_attr;
}

void CT_R::set_rsidR_attr(const ST_LongHexNumber& _rsidR_attr)
{
    m_has_rsidR_attr = true;
    m_rsidR_attr = new ST_LongHexNumber(_rsidR_attr);
}

const ST_LongHexNumber& CT_R::get_rsidR_attr() const
{
    if (m_rsidR_attr)
    {
        return *m_rsidR_attr;
    }
    return ST_LongHexNumber::default_instance();
}


// CT_R::ChildGroup_1
CT_R::ChildGroup_1::ChildGroup_1()
    :m_has_br(false),
     m_br(NULL),
     m_has_t(false),
     m_t(NULL),
     m_has_contentPart(false),
     m_contentPart(NULL),
     m_has_delText(false),
     m_delText(NULL),
     m_has_instrText(false),
     m_instrText(NULL),
     m_has_delInstrText(false),
     m_delInstrText(NULL),
     m_has_noBreakHyphen(false),
     m_noBreakHyphen(NULL),
     m_has_softHyphen(false),
     m_softHyphen(NULL),
     m_has_dayShort(false),
     m_dayShort(NULL),
     m_has_monthShort(false),
     m_monthShort(NULL),
     m_has_yearShort(false),
     m_yearShort(NULL),
     m_has_dayLong(false),
     m_dayLong(NULL),
     m_has_monthLong(false),
     m_monthLong(NULL),
     m_has_yearLong(false),
     m_yearLong(NULL),
     m_has_annotationRef(false),
     m_annotationRef(NULL),
     m_has_footnoteRef(false),
     m_footnoteRef(NULL),
     m_has_endnoteRef(false),
     m_endnoteRef(NULL),
     m_has_separator(false),
     m_separator(NULL),
     m_has_continuationSeparator(false),
     m_continuationSeparator(NULL),
     m_has_sym(false),
     m_sym(NULL),
     m_has_pgNum(false),
     m_pgNum(NULL),
     m_has_cr(false),
     m_cr(NULL),
     m_has_tab(false),
     m_tab(NULL),
     m_has_object(false),
     m_object(NULL),
     m_has_pict(false),
     m_pict(NULL),
     m_has_fldChar(false),
     m_fldChar(NULL),
     m_has_ruby(false),
     m_ruby(NULL),
     m_has_footnoteReference(false),
     m_footnoteReference(NULL),
     m_has_endnoteReference(false),
     m_endnoteReference(NULL),
     m_has_commentReference(false),
     m_commentReference(NULL),
     m_has_drawing(false),
     m_drawing(NULL),
     m_has_ptab(false),
     m_ptab(NULL),
     m_has_lastRenderedPageBreak(false),
     m_lastRenderedPageBreak(NULL)
{
}
bool CT_R::ChildGroup_1::has_br() const
{
    return m_has_br;
}

CT_Br* CT_R::ChildGroup_1::mutable_br()
{

    m_has_t = false;

    if (m_t)
    {
        delete m_t;
        m_t = NULL;
    }
    ;

    m_has_contentPart = false;

    if (m_contentPart)
    {
        delete m_contentPart;
        m_contentPart = NULL;
    }
    ;

    m_has_delText = false;

    if (m_delText)
    {
        delete m_delText;
        m_delText = NULL;
    }
    ;

    m_has_instrText = false;

    if (m_instrText)
    {
        delete m_instrText;
        m_instrText = NULL;
    }
    ;

    m_has_delInstrText = false;

    if (m_delInstrText)
    {
        delete m_delInstrText;
        m_delInstrText = NULL;
    }
    ;

    m_has_noBreakHyphen = false;

    if (m_noBreakHyphen)
    {
        delete m_noBreakHyphen;
        m_noBreakHyphen = NULL;
    }
    ;

    m_has_softHyphen = false;

    if (m_softHyphen)
    {
        delete m_softHyphen;
        m_softHyphen = NULL;
    }
    ;

    m_has_dayShort = false;

    if (m_dayShort)
    {
        delete m_dayShort;
        m_dayShort = NULL;
    }
    ;

    m_has_monthShort = false;

    if (m_monthShort)
    {
        delete m_monthShort;
        m_monthShort = NULL;
    }
    ;

    m_has_yearShort = false;

    if (m_yearShort)
    {
        delete m_yearShort;
        m_yearShort = NULL;
    }
    ;

    m_has_dayLong = false;

    if (m_dayLong)
    {
        delete m_dayLong;
        m_dayLong = NULL;
    }
    ;

    m_has_monthLong = false;

    if (m_monthLong)
    {
        delete m_monthLong;
        m_monthLong = NULL;
    }
    ;

    m_has_yearLong = false;

    if (m_yearLong)
    {
        delete m_yearLong;
        m_yearLong = NULL;
    }
    ;

    m_has_annotationRef = false;

    if (m_annotationRef)
    {
        delete m_annotationRef;
        m_annotationRef = NULL;
    }
    ;

    m_has_footnoteRef = false;

    if (m_footnoteRef)
    {
        delete m_footnoteRef;
        m_footnoteRef = NULL;
    }
    ;

    m_has_endnoteRef = false;

    if (m_endnoteRef)
    {
        delete m_endnoteRef;
        m_endnoteRef = NULL;
    }
    ;

    m_has_separator = false;

    if (m_separator)
    {
        delete m_separator;
        m_separator = NULL;
    }
    ;

    m_has_continuationSeparator = false;

    if (m_continuationSeparator)
    {
        delete m_continuationSeparator;
        m_continuationSeparator = NULL;
    }
    ;

    m_has_sym = false;

    if (m_sym)
    {
        delete m_sym;
        m_sym = NULL;
    }
    ;

    m_has_pgNum = false;

    if (m_pgNum)
    {
        delete m_pgNum;
        m_pgNum = NULL;
    }
    ;

    m_has_cr = false;

    if (m_cr)
    {
        delete m_cr;
        m_cr = NULL;
    }
    ;

    m_has_tab = false;

    if (m_tab)
    {
        delete m_tab;
        m_tab = NULL;
    }
    ;

    m_has_object = false;

    if (m_object)
    {
        delete m_object;
        m_object = NULL;
    }
    ;

    m_has_pict = false;

    if (m_pict)
    {
        delete m_pict;
        m_pict = NULL;
    }
    ;

    m_has_fldChar = false;

    if (m_fldChar)
    {
        delete m_fldChar;
        m_fldChar = NULL;
    }
    ;

    m_has_ruby = false;

    if (m_ruby)
    {
        delete m_ruby;
        m_ruby = NULL;
    }
    ;

    m_has_footnoteReference = false;

    if (m_footnoteReference)
    {
        delete m_footnoteReference;
        m_footnoteReference = NULL;
    }
    ;

    m_has_endnoteReference = false;

    if (m_endnoteReference)
    {
        delete m_endnoteReference;
        m_endnoteReference = NULL;
    }
    ;

    m_has_commentReference = false;

    if (m_commentReference)
    {
        delete m_commentReference;
        m_commentReference = NULL;
    }
    ;

    m_has_drawing = false;

    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;

    m_has_ptab = false;

    if (m_ptab)
    {
        delete m_ptab;
        m_ptab = NULL;
    }
    ;

    m_has_lastRenderedPageBreak = false;

    if (m_lastRenderedPageBreak)
    {
        delete m_lastRenderedPageBreak;
        m_lastRenderedPageBreak = NULL;
    }
    ;

    m_has_br = true;
    if (!m_br)
    {
        m_br = new CT_Br();
    }
    return m_br;
}

const CT_Br& CT_R::ChildGroup_1::get_br() const
{
    if (m_br)
    {
        return *m_br;
    }
    return CT_Br::default_instance();
}

bool CT_R::ChildGroup_1::has_t() const
{
    return m_has_t;
}

CT_Text* CT_R::ChildGroup_1::mutable_t()
{

    m_has_br = false;

    if (m_br)
    {
        delete m_br;
        m_br = NULL;
    }
    ;

    m_has_contentPart = false;

    if (m_contentPart)
    {
        delete m_contentPart;
        m_contentPart = NULL;
    }
    ;

    m_has_delText = false;

    if (m_delText)
    {
        delete m_delText;
        m_delText = NULL;
    }
    ;

    m_has_instrText = false;

    if (m_instrText)
    {
        delete m_instrText;
        m_instrText = NULL;
    }
    ;

    m_has_delInstrText = false;

    if (m_delInstrText)
    {
        delete m_delInstrText;
        m_delInstrText = NULL;
    }
    ;

    m_has_noBreakHyphen = false;

    if (m_noBreakHyphen)
    {
        delete m_noBreakHyphen;
        m_noBreakHyphen = NULL;
    }
    ;

    m_has_softHyphen = false;

    if (m_softHyphen)
    {
        delete m_softHyphen;
        m_softHyphen = NULL;
    }
    ;

    m_has_dayShort = false;

    if (m_dayShort)
    {
        delete m_dayShort;
        m_dayShort = NULL;
    }
    ;

    m_has_monthShort = false;

    if (m_monthShort)
    {
        delete m_monthShort;
        m_monthShort = NULL;
    }
    ;

    m_has_yearShort = false;

    if (m_yearShort)
    {
        delete m_yearShort;
        m_yearShort = NULL;
    }
    ;

    m_has_dayLong = false;

    if (m_dayLong)
    {
        delete m_dayLong;
        m_dayLong = NULL;
    }
    ;

    m_has_monthLong = false;

    if (m_monthLong)
    {
        delete m_monthLong;
        m_monthLong = NULL;
    }
    ;

    m_has_yearLong = false;

    if (m_yearLong)
    {
        delete m_yearLong;
        m_yearLong = NULL;
    }
    ;

    m_has_annotationRef = false;

    if (m_annotationRef)
    {
        delete m_annotationRef;
        m_annotationRef = NULL;
    }
    ;

    m_has_footnoteRef = false;

    if (m_footnoteRef)
    {
        delete m_footnoteRef;
        m_footnoteRef = NULL;
    }
    ;

    m_has_endnoteRef = false;

    if (m_endnoteRef)
    {
        delete m_endnoteRef;
        m_endnoteRef = NULL;
    }
    ;

    m_has_separator = false;

    if (m_separator)
    {
        delete m_separator;
        m_separator = NULL;
    }
    ;

    m_has_continuationSeparator = false;

    if (m_continuationSeparator)
    {
        delete m_continuationSeparator;
        m_continuationSeparator = NULL;
    }
    ;

    m_has_sym = false;

    if (m_sym)
    {
        delete m_sym;
        m_sym = NULL;
    }
    ;

    m_has_pgNum = false;

    if (m_pgNum)
    {
        delete m_pgNum;
        m_pgNum = NULL;
    }
    ;

    m_has_cr = false;

    if (m_cr)
    {
        delete m_cr;
        m_cr = NULL;
    }
    ;

    m_has_tab = false;

    if (m_tab)
    {
        delete m_tab;
        m_tab = NULL;
    }
    ;

    m_has_object = false;

    if (m_object)
    {
        delete m_object;
        m_object = NULL;
    }
    ;

    m_has_pict = false;

    if (m_pict)
    {
        delete m_pict;
        m_pict = NULL;
    }
    ;

    m_has_fldChar = false;

    if (m_fldChar)
    {
        delete m_fldChar;
        m_fldChar = NULL;
    }
    ;

    m_has_ruby = false;

    if (m_ruby)
    {
        delete m_ruby;
        m_ruby = NULL;
    }
    ;

    m_has_footnoteReference = false;

    if (m_footnoteReference)
    {
        delete m_footnoteReference;
        m_footnoteReference = NULL;
    }
    ;

    m_has_endnoteReference = false;

    if (m_endnoteReference)
    {
        delete m_endnoteReference;
        m_endnoteReference = NULL;
    }
    ;

    m_has_commentReference = false;

    if (m_commentReference)
    {
        delete m_commentReference;
        m_commentReference = NULL;
    }
    ;

    m_has_drawing = false;

    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;

    m_has_ptab = false;

    if (m_ptab)
    {
        delete m_ptab;
        m_ptab = NULL;
    }
    ;

    m_has_lastRenderedPageBreak = false;

    if (m_lastRenderedPageBreak)
    {
        delete m_lastRenderedPageBreak;
        m_lastRenderedPageBreak = NULL;
    }
    ;

    m_has_t = true;
    if (!m_t)
    {
        m_t = new CT_Text();
    }
    return m_t;
}

const CT_Text& CT_R::ChildGroup_1::get_t() const
{
    if (m_t)
    {
        return *m_t;
    }
    return CT_Text::default_instance();
}

bool CT_R::ChildGroup_1::has_contentPart() const
{
    return m_has_contentPart;
}

CT_Rel* CT_R::ChildGroup_1::mutable_contentPart()
{

    m_has_br = false;

    if (m_br)
    {
        delete m_br;
        m_br = NULL;
    }
    ;

    m_has_t = false;

    if (m_t)
    {
        delete m_t;
        m_t = NULL;
    }
    ;

    m_has_delText = false;

    if (m_delText)
    {
        delete m_delText;
        m_delText = NULL;
    }
    ;

    m_has_instrText = false;

    if (m_instrText)
    {
        delete m_instrText;
        m_instrText = NULL;
    }
    ;

    m_has_delInstrText = false;

    if (m_delInstrText)
    {
        delete m_delInstrText;
        m_delInstrText = NULL;
    }
    ;

    m_has_noBreakHyphen = false;

    if (m_noBreakHyphen)
    {
        delete m_noBreakHyphen;
        m_noBreakHyphen = NULL;
    }
    ;

    m_has_softHyphen = false;

    if (m_softHyphen)
    {
        delete m_softHyphen;
        m_softHyphen = NULL;
    }
    ;

    m_has_dayShort = false;

    if (m_dayShort)
    {
        delete m_dayShort;
        m_dayShort = NULL;
    }
    ;

    m_has_monthShort = false;

    if (m_monthShort)
    {
        delete m_monthShort;
        m_monthShort = NULL;
    }
    ;

    m_has_yearShort = false;

    if (m_yearShort)
    {
        delete m_yearShort;
        m_yearShort = NULL;
    }
    ;

    m_has_dayLong = false;

    if (m_dayLong)
    {
        delete m_dayLong;
        m_dayLong = NULL;
    }
    ;

    m_has_monthLong = false;

    if (m_monthLong)
    {
        delete m_monthLong;
        m_monthLong = NULL;
    }
    ;

    m_has_yearLong = false;

    if (m_yearLong)
    {
        delete m_yearLong;
        m_yearLong = NULL;
    }
    ;

    m_has_annotationRef = false;

    if (m_annotationRef)
    {
        delete m_annotationRef;
        m_annotationRef = NULL;
    }
    ;

    m_has_footnoteRef = false;

    if (m_footnoteRef)
    {
        delete m_footnoteRef;
        m_footnoteRef = NULL;
    }
    ;

    m_has_endnoteRef = false;

    if (m_endnoteRef)
    {
        delete m_endnoteRef;
        m_endnoteRef = NULL;
    }
    ;

    m_has_separator = false;

    if (m_separator)
    {
        delete m_separator;
        m_separator = NULL;
    }
    ;

    m_has_continuationSeparator = false;

    if (m_continuationSeparator)
    {
        delete m_continuationSeparator;
        m_continuationSeparator = NULL;
    }
    ;

    m_has_sym = false;

    if (m_sym)
    {
        delete m_sym;
        m_sym = NULL;
    }
    ;

    m_has_pgNum = false;

    if (m_pgNum)
    {
        delete m_pgNum;
        m_pgNum = NULL;
    }
    ;

    m_has_cr = false;

    if (m_cr)
    {
        delete m_cr;
        m_cr = NULL;
    }
    ;

    m_has_tab = false;

    if (m_tab)
    {
        delete m_tab;
        m_tab = NULL;
    }
    ;

    m_has_object = false;

    if (m_object)
    {
        delete m_object;
        m_object = NULL;
    }
    ;

    m_has_pict = false;

    if (m_pict)
    {
        delete m_pict;
        m_pict = NULL;
    }
    ;

    m_has_fldChar = false;

    if (m_fldChar)
    {
        delete m_fldChar;
        m_fldChar = NULL;
    }
    ;

    m_has_ruby = false;

    if (m_ruby)
    {
        delete m_ruby;
        m_ruby = NULL;
    }
    ;

    m_has_footnoteReference = false;

    if (m_footnoteReference)
    {
        delete m_footnoteReference;
        m_footnoteReference = NULL;
    }
    ;

    m_has_endnoteReference = false;

    if (m_endnoteReference)
    {
        delete m_endnoteReference;
        m_endnoteReference = NULL;
    }
    ;

    m_has_commentReference = false;

    if (m_commentReference)
    {
        delete m_commentReference;
        m_commentReference = NULL;
    }
    ;

    m_has_drawing = false;

    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;

    m_has_ptab = false;

    if (m_ptab)
    {
        delete m_ptab;
        m_ptab = NULL;
    }
    ;

    m_has_lastRenderedPageBreak = false;

    if (m_lastRenderedPageBreak)
    {
        delete m_lastRenderedPageBreak;
        m_lastRenderedPageBreak = NULL;
    }
    ;

    m_has_contentPart = true;
    if (!m_contentPart)
    {
        m_contentPart = new CT_Rel();
    }
    return m_contentPart;
}

const CT_Rel& CT_R::ChildGroup_1::get_contentPart() const
{
    if (m_contentPart)
    {
        return *m_contentPart;
    }
    return CT_Rel::default_instance();
}

bool CT_R::ChildGroup_1::has_delText() const
{
    return m_has_delText;
}

CT_Text* CT_R::ChildGroup_1::mutable_delText()
{

    m_has_br = false;

    if (m_br)
    {
        delete m_br;
        m_br = NULL;
    }
    ;

    m_has_t = false;

    if (m_t)
    {
        delete m_t;
        m_t = NULL;
    }
    ;

    m_has_contentPart = false;

    if (m_contentPart)
    {
        delete m_contentPart;
        m_contentPart = NULL;
    }
    ;

    m_has_instrText = false;

    if (m_instrText)
    {
        delete m_instrText;
        m_instrText = NULL;
    }
    ;

    m_has_delInstrText = false;

    if (m_delInstrText)
    {
        delete m_delInstrText;
        m_delInstrText = NULL;
    }
    ;

    m_has_noBreakHyphen = false;

    if (m_noBreakHyphen)
    {
        delete m_noBreakHyphen;
        m_noBreakHyphen = NULL;
    }
    ;

    m_has_softHyphen = false;

    if (m_softHyphen)
    {
        delete m_softHyphen;
        m_softHyphen = NULL;
    }
    ;

    m_has_dayShort = false;

    if (m_dayShort)
    {
        delete m_dayShort;
        m_dayShort = NULL;
    }
    ;

    m_has_monthShort = false;

    if (m_monthShort)
    {
        delete m_monthShort;
        m_monthShort = NULL;
    }
    ;

    m_has_yearShort = false;

    if (m_yearShort)
    {
        delete m_yearShort;
        m_yearShort = NULL;
    }
    ;

    m_has_dayLong = false;

    if (m_dayLong)
    {
        delete m_dayLong;
        m_dayLong = NULL;
    }
    ;

    m_has_monthLong = false;

    if (m_monthLong)
    {
        delete m_monthLong;
        m_monthLong = NULL;
    }
    ;

    m_has_yearLong = false;

    if (m_yearLong)
    {
        delete m_yearLong;
        m_yearLong = NULL;
    }
    ;

    m_has_annotationRef = false;

    if (m_annotationRef)
    {
        delete m_annotationRef;
        m_annotationRef = NULL;
    }
    ;

    m_has_footnoteRef = false;

    if (m_footnoteRef)
    {
        delete m_footnoteRef;
        m_footnoteRef = NULL;
    }
    ;

    m_has_endnoteRef = false;

    if (m_endnoteRef)
    {
        delete m_endnoteRef;
        m_endnoteRef = NULL;
    }
    ;

    m_has_separator = false;

    if (m_separator)
    {
        delete m_separator;
        m_separator = NULL;
    }
    ;

    m_has_continuationSeparator = false;

    if (m_continuationSeparator)
    {
        delete m_continuationSeparator;
        m_continuationSeparator = NULL;
    }
    ;

    m_has_sym = false;

    if (m_sym)
    {
        delete m_sym;
        m_sym = NULL;
    }
    ;

    m_has_pgNum = false;

    if (m_pgNum)
    {
        delete m_pgNum;
        m_pgNum = NULL;
    }
    ;

    m_has_cr = false;

    if (m_cr)
    {
        delete m_cr;
        m_cr = NULL;
    }
    ;

    m_has_tab = false;

    if (m_tab)
    {
        delete m_tab;
        m_tab = NULL;
    }
    ;

    m_has_object = false;

    if (m_object)
    {
        delete m_object;
        m_object = NULL;
    }
    ;

    m_has_pict = false;

    if (m_pict)
    {
        delete m_pict;
        m_pict = NULL;
    }
    ;

    m_has_fldChar = false;

    if (m_fldChar)
    {
        delete m_fldChar;
        m_fldChar = NULL;
    }
    ;

    m_has_ruby = false;

    if (m_ruby)
    {
        delete m_ruby;
        m_ruby = NULL;
    }
    ;

    m_has_footnoteReference = false;

    if (m_footnoteReference)
    {
        delete m_footnoteReference;
        m_footnoteReference = NULL;
    }
    ;

    m_has_endnoteReference = false;

    if (m_endnoteReference)
    {
        delete m_endnoteReference;
        m_endnoteReference = NULL;
    }
    ;

    m_has_commentReference = false;

    if (m_commentReference)
    {
        delete m_commentReference;
        m_commentReference = NULL;
    }
    ;

    m_has_drawing = false;

    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;

    m_has_ptab = false;

    if (m_ptab)
    {
        delete m_ptab;
        m_ptab = NULL;
    }
    ;

    m_has_lastRenderedPageBreak = false;

    if (m_lastRenderedPageBreak)
    {
        delete m_lastRenderedPageBreak;
        m_lastRenderedPageBreak = NULL;
    }
    ;

    m_has_delText = true;
    if (!m_delText)
    {
        m_delText = new CT_Text();
    }
    return m_delText;
}

const CT_Text& CT_R::ChildGroup_1::get_delText() const
{
    if (m_delText)
    {
        return *m_delText;
    }
    return CT_Text::default_instance();
}

bool CT_R::ChildGroup_1::has_instrText() const
{
    return m_has_instrText;
}

CT_Text* CT_R::ChildGroup_1::mutable_instrText()
{

    m_has_br = false;

    if (m_br)
    {
        delete m_br;
        m_br = NULL;
    }
    ;

    m_has_t = false;

    if (m_t)
    {
        delete m_t;
        m_t = NULL;
    }
    ;

    m_has_contentPart = false;

    if (m_contentPart)
    {
        delete m_contentPart;
        m_contentPart = NULL;
    }
    ;

    m_has_delText = false;

    if (m_delText)
    {
        delete m_delText;
        m_delText = NULL;
    }
    ;

    m_has_delInstrText = false;

    if (m_delInstrText)
    {
        delete m_delInstrText;
        m_delInstrText = NULL;
    }
    ;

    m_has_noBreakHyphen = false;

    if (m_noBreakHyphen)
    {
        delete m_noBreakHyphen;
        m_noBreakHyphen = NULL;
    }
    ;

    m_has_softHyphen = false;

    if (m_softHyphen)
    {
        delete m_softHyphen;
        m_softHyphen = NULL;
    }
    ;

    m_has_dayShort = false;

    if (m_dayShort)
    {
        delete m_dayShort;
        m_dayShort = NULL;
    }
    ;

    m_has_monthShort = false;

    if (m_monthShort)
    {
        delete m_monthShort;
        m_monthShort = NULL;
    }
    ;

    m_has_yearShort = false;

    if (m_yearShort)
    {
        delete m_yearShort;
        m_yearShort = NULL;
    }
    ;

    m_has_dayLong = false;

    if (m_dayLong)
    {
        delete m_dayLong;
        m_dayLong = NULL;
    }
    ;

    m_has_monthLong = false;

    if (m_monthLong)
    {
        delete m_monthLong;
        m_monthLong = NULL;
    }
    ;

    m_has_yearLong = false;

    if (m_yearLong)
    {
        delete m_yearLong;
        m_yearLong = NULL;
    }
    ;

    m_has_annotationRef = false;

    if (m_annotationRef)
    {
        delete m_annotationRef;
        m_annotationRef = NULL;
    }
    ;

    m_has_footnoteRef = false;

    if (m_footnoteRef)
    {
        delete m_footnoteRef;
        m_footnoteRef = NULL;
    }
    ;

    m_has_endnoteRef = false;

    if (m_endnoteRef)
    {
        delete m_endnoteRef;
        m_endnoteRef = NULL;
    }
    ;

    m_has_separator = false;

    if (m_separator)
    {
        delete m_separator;
        m_separator = NULL;
    }
    ;

    m_has_continuationSeparator = false;

    if (m_continuationSeparator)
    {
        delete m_continuationSeparator;
        m_continuationSeparator = NULL;
    }
    ;

    m_has_sym = false;

    if (m_sym)
    {
        delete m_sym;
        m_sym = NULL;
    }
    ;

    m_has_pgNum = false;

    if (m_pgNum)
    {
        delete m_pgNum;
        m_pgNum = NULL;
    }
    ;

    m_has_cr = false;

    if (m_cr)
    {
        delete m_cr;
        m_cr = NULL;
    }
    ;

    m_has_tab = false;

    if (m_tab)
    {
        delete m_tab;
        m_tab = NULL;
    }
    ;

    m_has_object = false;

    if (m_object)
    {
        delete m_object;
        m_object = NULL;
    }
    ;

    m_has_pict = false;

    if (m_pict)
    {
        delete m_pict;
        m_pict = NULL;
    }
    ;

    m_has_fldChar = false;

    if (m_fldChar)
    {
        delete m_fldChar;
        m_fldChar = NULL;
    }
    ;

    m_has_ruby = false;

    if (m_ruby)
    {
        delete m_ruby;
        m_ruby = NULL;
    }
    ;

    m_has_footnoteReference = false;

    if (m_footnoteReference)
    {
        delete m_footnoteReference;
        m_footnoteReference = NULL;
    }
    ;

    m_has_endnoteReference = false;

    if (m_endnoteReference)
    {
        delete m_endnoteReference;
        m_endnoteReference = NULL;
    }
    ;

    m_has_commentReference = false;

    if (m_commentReference)
    {
        delete m_commentReference;
        m_commentReference = NULL;
    }
    ;

    m_has_drawing = false;

    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;

    m_has_ptab = false;

    if (m_ptab)
    {
        delete m_ptab;
        m_ptab = NULL;
    }
    ;

    m_has_lastRenderedPageBreak = false;

    if (m_lastRenderedPageBreak)
    {
        delete m_lastRenderedPageBreak;
        m_lastRenderedPageBreak = NULL;
    }
    ;

    m_has_instrText = true;
    if (!m_instrText)
    {
        m_instrText = new CT_Text();
    }
    return m_instrText;
}

const CT_Text& CT_R::ChildGroup_1::get_instrText() const
{
    if (m_instrText)
    {
        return *m_instrText;
    }
    return CT_Text::default_instance();
}

bool CT_R::ChildGroup_1::has_delInstrText() const
{
    return m_has_delInstrText;
}

CT_Text* CT_R::ChildGroup_1::mutable_delInstrText()
{

    m_has_br = false;

    if (m_br)
    {
        delete m_br;
        m_br = NULL;
    }
    ;

    m_has_t = false;

    if (m_t)
    {
        delete m_t;
        m_t = NULL;
    }
    ;

    m_has_contentPart = false;

    if (m_contentPart)
    {
        delete m_contentPart;
        m_contentPart = NULL;
    }
    ;

    m_has_delText = false;

    if (m_delText)
    {
        delete m_delText;
        m_delText = NULL;
    }
    ;

    m_has_instrText = false;

    if (m_instrText)
    {
        delete m_instrText;
        m_instrText = NULL;
    }
    ;

    m_has_noBreakHyphen = false;

    if (m_noBreakHyphen)
    {
        delete m_noBreakHyphen;
        m_noBreakHyphen = NULL;
    }
    ;

    m_has_softHyphen = false;

    if (m_softHyphen)
    {
        delete m_softHyphen;
        m_softHyphen = NULL;
    }
    ;

    m_has_dayShort = false;

    if (m_dayShort)
    {
        delete m_dayShort;
        m_dayShort = NULL;
    }
    ;

    m_has_monthShort = false;

    if (m_monthShort)
    {
        delete m_monthShort;
        m_monthShort = NULL;
    }
    ;

    m_has_yearShort = false;

    if (m_yearShort)
    {
        delete m_yearShort;
        m_yearShort = NULL;
    }
    ;

    m_has_dayLong = false;

    if (m_dayLong)
    {
        delete m_dayLong;
        m_dayLong = NULL;
    }
    ;

    m_has_monthLong = false;

    if (m_monthLong)
    {
        delete m_monthLong;
        m_monthLong = NULL;
    }
    ;

    m_has_yearLong = false;

    if (m_yearLong)
    {
        delete m_yearLong;
        m_yearLong = NULL;
    }
    ;

    m_has_annotationRef = false;

    if (m_annotationRef)
    {
        delete m_annotationRef;
        m_annotationRef = NULL;
    }
    ;

    m_has_footnoteRef = false;

    if (m_footnoteRef)
    {
        delete m_footnoteRef;
        m_footnoteRef = NULL;
    }
    ;

    m_has_endnoteRef = false;

    if (m_endnoteRef)
    {
        delete m_endnoteRef;
        m_endnoteRef = NULL;
    }
    ;

    m_has_separator = false;

    if (m_separator)
    {
        delete m_separator;
        m_separator = NULL;
    }
    ;

    m_has_continuationSeparator = false;

    if (m_continuationSeparator)
    {
        delete m_continuationSeparator;
        m_continuationSeparator = NULL;
    }
    ;

    m_has_sym = false;

    if (m_sym)
    {
        delete m_sym;
        m_sym = NULL;
    }
    ;

    m_has_pgNum = false;

    if (m_pgNum)
    {
        delete m_pgNum;
        m_pgNum = NULL;
    }
    ;

    m_has_cr = false;

    if (m_cr)
    {
        delete m_cr;
        m_cr = NULL;
    }
    ;

    m_has_tab = false;

    if (m_tab)
    {
        delete m_tab;
        m_tab = NULL;
    }
    ;

    m_has_object = false;

    if (m_object)
    {
        delete m_object;
        m_object = NULL;
    }
    ;

    m_has_pict = false;

    if (m_pict)
    {
        delete m_pict;
        m_pict = NULL;
    }
    ;

    m_has_fldChar = false;

    if (m_fldChar)
    {
        delete m_fldChar;
        m_fldChar = NULL;
    }
    ;

    m_has_ruby = false;

    if (m_ruby)
    {
        delete m_ruby;
        m_ruby = NULL;
    }
    ;

    m_has_footnoteReference = false;

    if (m_footnoteReference)
    {
        delete m_footnoteReference;
        m_footnoteReference = NULL;
    }
    ;

    m_has_endnoteReference = false;

    if (m_endnoteReference)
    {
        delete m_endnoteReference;
        m_endnoteReference = NULL;
    }
    ;

    m_has_commentReference = false;

    if (m_commentReference)
    {
        delete m_commentReference;
        m_commentReference = NULL;
    }
    ;

    m_has_drawing = false;

    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;

    m_has_ptab = false;

    if (m_ptab)
    {
        delete m_ptab;
        m_ptab = NULL;
    }
    ;

    m_has_lastRenderedPageBreak = false;

    if (m_lastRenderedPageBreak)
    {
        delete m_lastRenderedPageBreak;
        m_lastRenderedPageBreak = NULL;
    }
    ;

    m_has_delInstrText = true;
    if (!m_delInstrText)
    {
        m_delInstrText = new CT_Text();
    }
    return m_delInstrText;
}

const CT_Text& CT_R::ChildGroup_1::get_delInstrText() const
{
    if (m_delInstrText)
    {
        return *m_delInstrText;
    }
    return CT_Text::default_instance();
}

bool CT_R::ChildGroup_1::has_noBreakHyphen() const
{
    return m_has_noBreakHyphen;
}

CT_Empty* CT_R::ChildGroup_1::mutable_noBreakHyphen()
{

    m_has_br = false;

    if (m_br)
    {
        delete m_br;
        m_br = NULL;
    }
    ;

    m_has_t = false;

    if (m_t)
    {
        delete m_t;
        m_t = NULL;
    }
    ;

    m_has_contentPart = false;

    if (m_contentPart)
    {
        delete m_contentPart;
        m_contentPart = NULL;
    }
    ;

    m_has_delText = false;

    if (m_delText)
    {
        delete m_delText;
        m_delText = NULL;
    }
    ;

    m_has_instrText = false;

    if (m_instrText)
    {
        delete m_instrText;
        m_instrText = NULL;
    }
    ;

    m_has_delInstrText = false;

    if (m_delInstrText)
    {
        delete m_delInstrText;
        m_delInstrText = NULL;
    }
    ;

    m_has_softHyphen = false;

    if (m_softHyphen)
    {
        delete m_softHyphen;
        m_softHyphen = NULL;
    }
    ;

    m_has_dayShort = false;

    if (m_dayShort)
    {
        delete m_dayShort;
        m_dayShort = NULL;
    }
    ;

    m_has_monthShort = false;

    if (m_monthShort)
    {
        delete m_monthShort;
        m_monthShort = NULL;
    }
    ;

    m_has_yearShort = false;

    if (m_yearShort)
    {
        delete m_yearShort;
        m_yearShort = NULL;
    }
    ;

    m_has_dayLong = false;

    if (m_dayLong)
    {
        delete m_dayLong;
        m_dayLong = NULL;
    }
    ;

    m_has_monthLong = false;

    if (m_monthLong)
    {
        delete m_monthLong;
        m_monthLong = NULL;
    }
    ;

    m_has_yearLong = false;

    if (m_yearLong)
    {
        delete m_yearLong;
        m_yearLong = NULL;
    }
    ;

    m_has_annotationRef = false;

    if (m_annotationRef)
    {
        delete m_annotationRef;
        m_annotationRef = NULL;
    }
    ;

    m_has_footnoteRef = false;

    if (m_footnoteRef)
    {
        delete m_footnoteRef;
        m_footnoteRef = NULL;
    }
    ;

    m_has_endnoteRef = false;

    if (m_endnoteRef)
    {
        delete m_endnoteRef;
        m_endnoteRef = NULL;
    }
    ;

    m_has_separator = false;

    if (m_separator)
    {
        delete m_separator;
        m_separator = NULL;
    }
    ;

    m_has_continuationSeparator = false;

    if (m_continuationSeparator)
    {
        delete m_continuationSeparator;
        m_continuationSeparator = NULL;
    }
    ;

    m_has_sym = false;

    if (m_sym)
    {
        delete m_sym;
        m_sym = NULL;
    }
    ;

    m_has_pgNum = false;

    if (m_pgNum)
    {
        delete m_pgNum;
        m_pgNum = NULL;
    }
    ;

    m_has_cr = false;

    if (m_cr)
    {
        delete m_cr;
        m_cr = NULL;
    }
    ;

    m_has_tab = false;

    if (m_tab)
    {
        delete m_tab;
        m_tab = NULL;
    }
    ;

    m_has_object = false;

    if (m_object)
    {
        delete m_object;
        m_object = NULL;
    }
    ;

    m_has_pict = false;

    if (m_pict)
    {
        delete m_pict;
        m_pict = NULL;
    }
    ;

    m_has_fldChar = false;

    if (m_fldChar)
    {
        delete m_fldChar;
        m_fldChar = NULL;
    }
    ;

    m_has_ruby = false;

    if (m_ruby)
    {
        delete m_ruby;
        m_ruby = NULL;
    }
    ;

    m_has_footnoteReference = false;

    if (m_footnoteReference)
    {
        delete m_footnoteReference;
        m_footnoteReference = NULL;
    }
    ;

    m_has_endnoteReference = false;

    if (m_endnoteReference)
    {
        delete m_endnoteReference;
        m_endnoteReference = NULL;
    }
    ;

    m_has_commentReference = false;

    if (m_commentReference)
    {
        delete m_commentReference;
        m_commentReference = NULL;
    }
    ;

    m_has_drawing = false;

    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;

    m_has_ptab = false;

    if (m_ptab)
    {
        delete m_ptab;
        m_ptab = NULL;
    }
    ;

    m_has_lastRenderedPageBreak = false;

    if (m_lastRenderedPageBreak)
    {
        delete m_lastRenderedPageBreak;
        m_lastRenderedPageBreak = NULL;
    }
    ;

    m_has_noBreakHyphen = true;
    if (!m_noBreakHyphen)
    {
        m_noBreakHyphen = new CT_Empty();
    }
    return m_noBreakHyphen;
}

const CT_Empty& CT_R::ChildGroup_1::get_noBreakHyphen() const
{
    if (m_noBreakHyphen)
    {
        return *m_noBreakHyphen;
    }
    return CT_Empty::default_instance();
}

bool CT_R::ChildGroup_1::has_softHyphen() const
{
    return m_has_softHyphen;
}

CT_Empty* CT_R::ChildGroup_1::mutable_softHyphen()
{

    m_has_br = false;

    if (m_br)
    {
        delete m_br;
        m_br = NULL;
    }
    ;

    m_has_t = false;

    if (m_t)
    {
        delete m_t;
        m_t = NULL;
    }
    ;

    m_has_contentPart = false;

    if (m_contentPart)
    {
        delete m_contentPart;
        m_contentPart = NULL;
    }
    ;

    m_has_delText = false;

    if (m_delText)
    {
        delete m_delText;
        m_delText = NULL;
    }
    ;

    m_has_instrText = false;

    if (m_instrText)
    {
        delete m_instrText;
        m_instrText = NULL;
    }
    ;

    m_has_delInstrText = false;

    if (m_delInstrText)
    {
        delete m_delInstrText;
        m_delInstrText = NULL;
    }
    ;

    m_has_noBreakHyphen = false;

    if (m_noBreakHyphen)
    {
        delete m_noBreakHyphen;
        m_noBreakHyphen = NULL;
    }
    ;

    m_has_dayShort = false;

    if (m_dayShort)
    {
        delete m_dayShort;
        m_dayShort = NULL;
    }
    ;

    m_has_monthShort = false;

    if (m_monthShort)
    {
        delete m_monthShort;
        m_monthShort = NULL;
    }
    ;

    m_has_yearShort = false;

    if (m_yearShort)
    {
        delete m_yearShort;
        m_yearShort = NULL;
    }
    ;

    m_has_dayLong = false;

    if (m_dayLong)
    {
        delete m_dayLong;
        m_dayLong = NULL;
    }
    ;

    m_has_monthLong = false;

    if (m_monthLong)
    {
        delete m_monthLong;
        m_monthLong = NULL;
    }
    ;

    m_has_yearLong = false;

    if (m_yearLong)
    {
        delete m_yearLong;
        m_yearLong = NULL;
    }
    ;

    m_has_annotationRef = false;

    if (m_annotationRef)
    {
        delete m_annotationRef;
        m_annotationRef = NULL;
    }
    ;

    m_has_footnoteRef = false;

    if (m_footnoteRef)
    {
        delete m_footnoteRef;
        m_footnoteRef = NULL;
    }
    ;

    m_has_endnoteRef = false;

    if (m_endnoteRef)
    {
        delete m_endnoteRef;
        m_endnoteRef = NULL;
    }
    ;

    m_has_separator = false;

    if (m_separator)
    {
        delete m_separator;
        m_separator = NULL;
    }
    ;

    m_has_continuationSeparator = false;

    if (m_continuationSeparator)
    {
        delete m_continuationSeparator;
        m_continuationSeparator = NULL;
    }
    ;

    m_has_sym = false;

    if (m_sym)
    {
        delete m_sym;
        m_sym = NULL;
    }
    ;

    m_has_pgNum = false;

    if (m_pgNum)
    {
        delete m_pgNum;
        m_pgNum = NULL;
    }
    ;

    m_has_cr = false;

    if (m_cr)
    {
        delete m_cr;
        m_cr = NULL;
    }
    ;

    m_has_tab = false;

    if (m_tab)
    {
        delete m_tab;
        m_tab = NULL;
    }
    ;

    m_has_object = false;

    if (m_object)
    {
        delete m_object;
        m_object = NULL;
    }
    ;

    m_has_pict = false;

    if (m_pict)
    {
        delete m_pict;
        m_pict = NULL;
    }
    ;

    m_has_fldChar = false;

    if (m_fldChar)
    {
        delete m_fldChar;
        m_fldChar = NULL;
    }
    ;

    m_has_ruby = false;

    if (m_ruby)
    {
        delete m_ruby;
        m_ruby = NULL;
    }
    ;

    m_has_footnoteReference = false;

    if (m_footnoteReference)
    {
        delete m_footnoteReference;
        m_footnoteReference = NULL;
    }
    ;

    m_has_endnoteReference = false;

    if (m_endnoteReference)
    {
        delete m_endnoteReference;
        m_endnoteReference = NULL;
    }
    ;

    m_has_commentReference = false;

    if (m_commentReference)
    {
        delete m_commentReference;
        m_commentReference = NULL;
    }
    ;

    m_has_drawing = false;

    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;

    m_has_ptab = false;

    if (m_ptab)
    {
        delete m_ptab;
        m_ptab = NULL;
    }
    ;

    m_has_lastRenderedPageBreak = false;

    if (m_lastRenderedPageBreak)
    {
        delete m_lastRenderedPageBreak;
        m_lastRenderedPageBreak = NULL;
    }
    ;

    m_has_softHyphen = true;
    if (!m_softHyphen)
    {
        m_softHyphen = new CT_Empty();
    }
    return m_softHyphen;
}

const CT_Empty& CT_R::ChildGroup_1::get_softHyphen() const
{
    if (m_softHyphen)
    {
        return *m_softHyphen;
    }
    return CT_Empty::default_instance();
}

bool CT_R::ChildGroup_1::has_dayShort() const
{
    return m_has_dayShort;
}

CT_Empty* CT_R::ChildGroup_1::mutable_dayShort()
{

    m_has_br = false;

    if (m_br)
    {
        delete m_br;
        m_br = NULL;
    }
    ;

    m_has_t = false;

    if (m_t)
    {
        delete m_t;
        m_t = NULL;
    }
    ;

    m_has_contentPart = false;

    if (m_contentPart)
    {
        delete m_contentPart;
        m_contentPart = NULL;
    }
    ;

    m_has_delText = false;

    if (m_delText)
    {
        delete m_delText;
        m_delText = NULL;
    }
    ;

    m_has_instrText = false;

    if (m_instrText)
    {
        delete m_instrText;
        m_instrText = NULL;
    }
    ;

    m_has_delInstrText = false;

    if (m_delInstrText)
    {
        delete m_delInstrText;
        m_delInstrText = NULL;
    }
    ;

    m_has_noBreakHyphen = false;

    if (m_noBreakHyphen)
    {
        delete m_noBreakHyphen;
        m_noBreakHyphen = NULL;
    }
    ;

    m_has_softHyphen = false;

    if (m_softHyphen)
    {
        delete m_softHyphen;
        m_softHyphen = NULL;
    }
    ;

    m_has_monthShort = false;

    if (m_monthShort)
    {
        delete m_monthShort;
        m_monthShort = NULL;
    }
    ;

    m_has_yearShort = false;

    if (m_yearShort)
    {
        delete m_yearShort;
        m_yearShort = NULL;
    }
    ;

    m_has_dayLong = false;

    if (m_dayLong)
    {
        delete m_dayLong;
        m_dayLong = NULL;
    }
    ;

    m_has_monthLong = false;

    if (m_monthLong)
    {
        delete m_monthLong;
        m_monthLong = NULL;
    }
    ;

    m_has_yearLong = false;

    if (m_yearLong)
    {
        delete m_yearLong;
        m_yearLong = NULL;
    }
    ;

    m_has_annotationRef = false;

    if (m_annotationRef)
    {
        delete m_annotationRef;
        m_annotationRef = NULL;
    }
    ;

    m_has_footnoteRef = false;

    if (m_footnoteRef)
    {
        delete m_footnoteRef;
        m_footnoteRef = NULL;
    }
    ;

    m_has_endnoteRef = false;

    if (m_endnoteRef)
    {
        delete m_endnoteRef;
        m_endnoteRef = NULL;
    }
    ;

    m_has_separator = false;

    if (m_separator)
    {
        delete m_separator;
        m_separator = NULL;
    }
    ;

    m_has_continuationSeparator = false;

    if (m_continuationSeparator)
    {
        delete m_continuationSeparator;
        m_continuationSeparator = NULL;
    }
    ;

    m_has_sym = false;

    if (m_sym)
    {
        delete m_sym;
        m_sym = NULL;
    }
    ;

    m_has_pgNum = false;

    if (m_pgNum)
    {
        delete m_pgNum;
        m_pgNum = NULL;
    }
    ;

    m_has_cr = false;

    if (m_cr)
    {
        delete m_cr;
        m_cr = NULL;
    }
    ;

    m_has_tab = false;

    if (m_tab)
    {
        delete m_tab;
        m_tab = NULL;
    }
    ;

    m_has_object = false;

    if (m_object)
    {
        delete m_object;
        m_object = NULL;
    }
    ;

    m_has_pict = false;

    if (m_pict)
    {
        delete m_pict;
        m_pict = NULL;
    }
    ;

    m_has_fldChar = false;

    if (m_fldChar)
    {
        delete m_fldChar;
        m_fldChar = NULL;
    }
    ;

    m_has_ruby = false;

    if (m_ruby)
    {
        delete m_ruby;
        m_ruby = NULL;
    }
    ;

    m_has_footnoteReference = false;

    if (m_footnoteReference)
    {
        delete m_footnoteReference;
        m_footnoteReference = NULL;
    }
    ;

    m_has_endnoteReference = false;

    if (m_endnoteReference)
    {
        delete m_endnoteReference;
        m_endnoteReference = NULL;
    }
    ;

    m_has_commentReference = false;

    if (m_commentReference)
    {
        delete m_commentReference;
        m_commentReference = NULL;
    }
    ;

    m_has_drawing = false;

    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;

    m_has_ptab = false;

    if (m_ptab)
    {
        delete m_ptab;
        m_ptab = NULL;
    }
    ;

    m_has_lastRenderedPageBreak = false;

    if (m_lastRenderedPageBreak)
    {
        delete m_lastRenderedPageBreak;
        m_lastRenderedPageBreak = NULL;
    }
    ;

    m_has_dayShort = true;
    if (!m_dayShort)
    {
        m_dayShort = new CT_Empty();
    }
    return m_dayShort;
}

const CT_Empty& CT_R::ChildGroup_1::get_dayShort() const
{
    if (m_dayShort)
    {
        return *m_dayShort;
    }
    return CT_Empty::default_instance();
}

bool CT_R::ChildGroup_1::has_monthShort() const
{
    return m_has_monthShort;
}

CT_Empty* CT_R::ChildGroup_1::mutable_monthShort()
{

    m_has_br = false;

    if (m_br)
    {
        delete m_br;
        m_br = NULL;
    }
    ;

    m_has_t = false;

    if (m_t)
    {
        delete m_t;
        m_t = NULL;
    }
    ;

    m_has_contentPart = false;

    if (m_contentPart)
    {
        delete m_contentPart;
        m_contentPart = NULL;
    }
    ;

    m_has_delText = false;

    if (m_delText)
    {
        delete m_delText;
        m_delText = NULL;
    }
    ;

    m_has_instrText = false;

    if (m_instrText)
    {
        delete m_instrText;
        m_instrText = NULL;
    }
    ;

    m_has_delInstrText = false;

    if (m_delInstrText)
    {
        delete m_delInstrText;
        m_delInstrText = NULL;
    }
    ;

    m_has_noBreakHyphen = false;

    if (m_noBreakHyphen)
    {
        delete m_noBreakHyphen;
        m_noBreakHyphen = NULL;
    }
    ;

    m_has_softHyphen = false;

    if (m_softHyphen)
    {
        delete m_softHyphen;
        m_softHyphen = NULL;
    }
    ;

    m_has_dayShort = false;

    if (m_dayShort)
    {
        delete m_dayShort;
        m_dayShort = NULL;
    }
    ;

    m_has_yearShort = false;

    if (m_yearShort)
    {
        delete m_yearShort;
        m_yearShort = NULL;
    }
    ;

    m_has_dayLong = false;

    if (m_dayLong)
    {
        delete m_dayLong;
        m_dayLong = NULL;
    }
    ;

    m_has_monthLong = false;

    if (m_monthLong)
    {
        delete m_monthLong;
        m_monthLong = NULL;
    }
    ;

    m_has_yearLong = false;

    if (m_yearLong)
    {
        delete m_yearLong;
        m_yearLong = NULL;
    }
    ;

    m_has_annotationRef = false;

    if (m_annotationRef)
    {
        delete m_annotationRef;
        m_annotationRef = NULL;
    }
    ;

    m_has_footnoteRef = false;

    if (m_footnoteRef)
    {
        delete m_footnoteRef;
        m_footnoteRef = NULL;
    }
    ;

    m_has_endnoteRef = false;

    if (m_endnoteRef)
    {
        delete m_endnoteRef;
        m_endnoteRef = NULL;
    }
    ;

    m_has_separator = false;

    if (m_separator)
    {
        delete m_separator;
        m_separator = NULL;
    }
    ;

    m_has_continuationSeparator = false;

    if (m_continuationSeparator)
    {
        delete m_continuationSeparator;
        m_continuationSeparator = NULL;
    }
    ;

    m_has_sym = false;

    if (m_sym)
    {
        delete m_sym;
        m_sym = NULL;
    }
    ;

    m_has_pgNum = false;

    if (m_pgNum)
    {
        delete m_pgNum;
        m_pgNum = NULL;
    }
    ;

    m_has_cr = false;

    if (m_cr)
    {
        delete m_cr;
        m_cr = NULL;
    }
    ;

    m_has_tab = false;

    if (m_tab)
    {
        delete m_tab;
        m_tab = NULL;
    }
    ;

    m_has_object = false;

    if (m_object)
    {
        delete m_object;
        m_object = NULL;
    }
    ;

    m_has_pict = false;

    if (m_pict)
    {
        delete m_pict;
        m_pict = NULL;
    }
    ;

    m_has_fldChar = false;

    if (m_fldChar)
    {
        delete m_fldChar;
        m_fldChar = NULL;
    }
    ;

    m_has_ruby = false;

    if (m_ruby)
    {
        delete m_ruby;
        m_ruby = NULL;
    }
    ;

    m_has_footnoteReference = false;

    if (m_footnoteReference)
    {
        delete m_footnoteReference;
        m_footnoteReference = NULL;
    }
    ;

    m_has_endnoteReference = false;

    if (m_endnoteReference)
    {
        delete m_endnoteReference;
        m_endnoteReference = NULL;
    }
    ;

    m_has_commentReference = false;

    if (m_commentReference)
    {
        delete m_commentReference;
        m_commentReference = NULL;
    }
    ;

    m_has_drawing = false;

    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;

    m_has_ptab = false;

    if (m_ptab)
    {
        delete m_ptab;
        m_ptab = NULL;
    }
    ;

    m_has_lastRenderedPageBreak = false;

    if (m_lastRenderedPageBreak)
    {
        delete m_lastRenderedPageBreak;
        m_lastRenderedPageBreak = NULL;
    }
    ;

    m_has_monthShort = true;
    if (!m_monthShort)
    {
        m_monthShort = new CT_Empty();
    }
    return m_monthShort;
}

const CT_Empty& CT_R::ChildGroup_1::get_monthShort() const
{
    if (m_monthShort)
    {
        return *m_monthShort;
    }
    return CT_Empty::default_instance();
}

bool CT_R::ChildGroup_1::has_yearShort() const
{
    return m_has_yearShort;
}

CT_Empty* CT_R::ChildGroup_1::mutable_yearShort()
{

    m_has_br = false;

    if (m_br)
    {
        delete m_br;
        m_br = NULL;
    }
    ;

    m_has_t = false;

    if (m_t)
    {
        delete m_t;
        m_t = NULL;
    }
    ;

    m_has_contentPart = false;

    if (m_contentPart)
    {
        delete m_contentPart;
        m_contentPart = NULL;
    }
    ;

    m_has_delText = false;

    if (m_delText)
    {
        delete m_delText;
        m_delText = NULL;
    }
    ;

    m_has_instrText = false;

    if (m_instrText)
    {
        delete m_instrText;
        m_instrText = NULL;
    }
    ;

    m_has_delInstrText = false;

    if (m_delInstrText)
    {
        delete m_delInstrText;
        m_delInstrText = NULL;
    }
    ;

    m_has_noBreakHyphen = false;

    if (m_noBreakHyphen)
    {
        delete m_noBreakHyphen;
        m_noBreakHyphen = NULL;
    }
    ;

    m_has_softHyphen = false;

    if (m_softHyphen)
    {
        delete m_softHyphen;
        m_softHyphen = NULL;
    }
    ;

    m_has_dayShort = false;

    if (m_dayShort)
    {
        delete m_dayShort;
        m_dayShort = NULL;
    }
    ;

    m_has_monthShort = false;

    if (m_monthShort)
    {
        delete m_monthShort;
        m_monthShort = NULL;
    }
    ;

    m_has_dayLong = false;

    if (m_dayLong)
    {
        delete m_dayLong;
        m_dayLong = NULL;
    }
    ;

    m_has_monthLong = false;

    if (m_monthLong)
    {
        delete m_monthLong;
        m_monthLong = NULL;
    }
    ;

    m_has_yearLong = false;

    if (m_yearLong)
    {
        delete m_yearLong;
        m_yearLong = NULL;
    }
    ;

    m_has_annotationRef = false;

    if (m_annotationRef)
    {
        delete m_annotationRef;
        m_annotationRef = NULL;
    }
    ;

    m_has_footnoteRef = false;

    if (m_footnoteRef)
    {
        delete m_footnoteRef;
        m_footnoteRef = NULL;
    }
    ;

    m_has_endnoteRef = false;

    if (m_endnoteRef)
    {
        delete m_endnoteRef;
        m_endnoteRef = NULL;
    }
    ;

    m_has_separator = false;

    if (m_separator)
    {
        delete m_separator;
        m_separator = NULL;
    }
    ;

    m_has_continuationSeparator = false;

    if (m_continuationSeparator)
    {
        delete m_continuationSeparator;
        m_continuationSeparator = NULL;
    }
    ;

    m_has_sym = false;

    if (m_sym)
    {
        delete m_sym;
        m_sym = NULL;
    }
    ;

    m_has_pgNum = false;

    if (m_pgNum)
    {
        delete m_pgNum;
        m_pgNum = NULL;
    }
    ;

    m_has_cr = false;

    if (m_cr)
    {
        delete m_cr;
        m_cr = NULL;
    }
    ;

    m_has_tab = false;

    if (m_tab)
    {
        delete m_tab;
        m_tab = NULL;
    }
    ;

    m_has_object = false;

    if (m_object)
    {
        delete m_object;
        m_object = NULL;
    }
    ;

    m_has_pict = false;

    if (m_pict)
    {
        delete m_pict;
        m_pict = NULL;
    }
    ;

    m_has_fldChar = false;

    if (m_fldChar)
    {
        delete m_fldChar;
        m_fldChar = NULL;
    }
    ;

    m_has_ruby = false;

    if (m_ruby)
    {
        delete m_ruby;
        m_ruby = NULL;
    }
    ;

    m_has_footnoteReference = false;

    if (m_footnoteReference)
    {
        delete m_footnoteReference;
        m_footnoteReference = NULL;
    }
    ;

    m_has_endnoteReference = false;

    if (m_endnoteReference)
    {
        delete m_endnoteReference;
        m_endnoteReference = NULL;
    }
    ;

    m_has_commentReference = false;

    if (m_commentReference)
    {
        delete m_commentReference;
        m_commentReference = NULL;
    }
    ;

    m_has_drawing = false;

    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;

    m_has_ptab = false;

    if (m_ptab)
    {
        delete m_ptab;
        m_ptab = NULL;
    }
    ;

    m_has_lastRenderedPageBreak = false;

    if (m_lastRenderedPageBreak)
    {
        delete m_lastRenderedPageBreak;
        m_lastRenderedPageBreak = NULL;
    }
    ;

    m_has_yearShort = true;
    if (!m_yearShort)
    {
        m_yearShort = new CT_Empty();
    }
    return m_yearShort;
}

const CT_Empty& CT_R::ChildGroup_1::get_yearShort() const
{
    if (m_yearShort)
    {
        return *m_yearShort;
    }
    return CT_Empty::default_instance();
}

bool CT_R::ChildGroup_1::has_dayLong() const
{
    return m_has_dayLong;
}

CT_Empty* CT_R::ChildGroup_1::mutable_dayLong()
{

    m_has_br = false;

    if (m_br)
    {
        delete m_br;
        m_br = NULL;
    }
    ;

    m_has_t = false;

    if (m_t)
    {
        delete m_t;
        m_t = NULL;
    }
    ;

    m_has_contentPart = false;

    if (m_contentPart)
    {
        delete m_contentPart;
        m_contentPart = NULL;
    }
    ;

    m_has_delText = false;

    if (m_delText)
    {
        delete m_delText;
        m_delText = NULL;
    }
    ;

    m_has_instrText = false;

    if (m_instrText)
    {
        delete m_instrText;
        m_instrText = NULL;
    }
    ;

    m_has_delInstrText = false;

    if (m_delInstrText)
    {
        delete m_delInstrText;
        m_delInstrText = NULL;
    }
    ;

    m_has_noBreakHyphen = false;

    if (m_noBreakHyphen)
    {
        delete m_noBreakHyphen;
        m_noBreakHyphen = NULL;
    }
    ;

    m_has_softHyphen = false;

    if (m_softHyphen)
    {
        delete m_softHyphen;
        m_softHyphen = NULL;
    }
    ;

    m_has_dayShort = false;

    if (m_dayShort)
    {
        delete m_dayShort;
        m_dayShort = NULL;
    }
    ;

    m_has_monthShort = false;

    if (m_monthShort)
    {
        delete m_monthShort;
        m_monthShort = NULL;
    }
    ;

    m_has_yearShort = false;

    if (m_yearShort)
    {
        delete m_yearShort;
        m_yearShort = NULL;
    }
    ;

    m_has_monthLong = false;

    if (m_monthLong)
    {
        delete m_monthLong;
        m_monthLong = NULL;
    }
    ;

    m_has_yearLong = false;

    if (m_yearLong)
    {
        delete m_yearLong;
        m_yearLong = NULL;
    }
    ;

    m_has_annotationRef = false;

    if (m_annotationRef)
    {
        delete m_annotationRef;
        m_annotationRef = NULL;
    }
    ;

    m_has_footnoteRef = false;

    if (m_footnoteRef)
    {
        delete m_footnoteRef;
        m_footnoteRef = NULL;
    }
    ;

    m_has_endnoteRef = false;

    if (m_endnoteRef)
    {
        delete m_endnoteRef;
        m_endnoteRef = NULL;
    }
    ;

    m_has_separator = false;

    if (m_separator)
    {
        delete m_separator;
        m_separator = NULL;
    }
    ;

    m_has_continuationSeparator = false;

    if (m_continuationSeparator)
    {
        delete m_continuationSeparator;
        m_continuationSeparator = NULL;
    }
    ;

    m_has_sym = false;

    if (m_sym)
    {
        delete m_sym;
        m_sym = NULL;
    }
    ;

    m_has_pgNum = false;

    if (m_pgNum)
    {
        delete m_pgNum;
        m_pgNum = NULL;
    }
    ;

    m_has_cr = false;

    if (m_cr)
    {
        delete m_cr;
        m_cr = NULL;
    }
    ;

    m_has_tab = false;

    if (m_tab)
    {
        delete m_tab;
        m_tab = NULL;
    }
    ;

    m_has_object = false;

    if (m_object)
    {
        delete m_object;
        m_object = NULL;
    }
    ;

    m_has_pict = false;

    if (m_pict)
    {
        delete m_pict;
        m_pict = NULL;
    }
    ;

    m_has_fldChar = false;

    if (m_fldChar)
    {
        delete m_fldChar;
        m_fldChar = NULL;
    }
    ;

    m_has_ruby = false;

    if (m_ruby)
    {
        delete m_ruby;
        m_ruby = NULL;
    }
    ;

    m_has_footnoteReference = false;

    if (m_footnoteReference)
    {
        delete m_footnoteReference;
        m_footnoteReference = NULL;
    }
    ;

    m_has_endnoteReference = false;

    if (m_endnoteReference)
    {
        delete m_endnoteReference;
        m_endnoteReference = NULL;
    }
    ;

    m_has_commentReference = false;

    if (m_commentReference)
    {
        delete m_commentReference;
        m_commentReference = NULL;
    }
    ;

    m_has_drawing = false;

    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;

    m_has_ptab = false;

    if (m_ptab)
    {
        delete m_ptab;
        m_ptab = NULL;
    }
    ;

    m_has_lastRenderedPageBreak = false;

    if (m_lastRenderedPageBreak)
    {
        delete m_lastRenderedPageBreak;
        m_lastRenderedPageBreak = NULL;
    }
    ;

    m_has_dayLong = true;
    if (!m_dayLong)
    {
        m_dayLong = new CT_Empty();
    }
    return m_dayLong;
}

const CT_Empty& CT_R::ChildGroup_1::get_dayLong() const
{
    if (m_dayLong)
    {
        return *m_dayLong;
    }
    return CT_Empty::default_instance();
}

bool CT_R::ChildGroup_1::has_monthLong() const
{
    return m_has_monthLong;
}

CT_Empty* CT_R::ChildGroup_1::mutable_monthLong()
{

    m_has_br = false;

    if (m_br)
    {
        delete m_br;
        m_br = NULL;
    }
    ;

    m_has_t = false;

    if (m_t)
    {
        delete m_t;
        m_t = NULL;
    }
    ;

    m_has_contentPart = false;

    if (m_contentPart)
    {
        delete m_contentPart;
        m_contentPart = NULL;
    }
    ;

    m_has_delText = false;

    if (m_delText)
    {
        delete m_delText;
        m_delText = NULL;
    }
    ;

    m_has_instrText = false;

    if (m_instrText)
    {
        delete m_instrText;
        m_instrText = NULL;
    }
    ;

    m_has_delInstrText = false;

    if (m_delInstrText)
    {
        delete m_delInstrText;
        m_delInstrText = NULL;
    }
    ;

    m_has_noBreakHyphen = false;

    if (m_noBreakHyphen)
    {
        delete m_noBreakHyphen;
        m_noBreakHyphen = NULL;
    }
    ;

    m_has_softHyphen = false;

    if (m_softHyphen)
    {
        delete m_softHyphen;
        m_softHyphen = NULL;
    }
    ;

    m_has_dayShort = false;

    if (m_dayShort)
    {
        delete m_dayShort;
        m_dayShort = NULL;
    }
    ;

    m_has_monthShort = false;

    if (m_monthShort)
    {
        delete m_monthShort;
        m_monthShort = NULL;
    }
    ;

    m_has_yearShort = false;

    if (m_yearShort)
    {
        delete m_yearShort;
        m_yearShort = NULL;
    }
    ;

    m_has_dayLong = false;

    if (m_dayLong)
    {
        delete m_dayLong;
        m_dayLong = NULL;
    }
    ;

    m_has_yearLong = false;

    if (m_yearLong)
    {
        delete m_yearLong;
        m_yearLong = NULL;
    }
    ;

    m_has_annotationRef = false;

    if (m_annotationRef)
    {
        delete m_annotationRef;
        m_annotationRef = NULL;
    }
    ;

    m_has_footnoteRef = false;

    if (m_footnoteRef)
    {
        delete m_footnoteRef;
        m_footnoteRef = NULL;
    }
    ;

    m_has_endnoteRef = false;

    if (m_endnoteRef)
    {
        delete m_endnoteRef;
        m_endnoteRef = NULL;
    }
    ;

    m_has_separator = false;

    if (m_separator)
    {
        delete m_separator;
        m_separator = NULL;
    }
    ;

    m_has_continuationSeparator = false;

    if (m_continuationSeparator)
    {
        delete m_continuationSeparator;
        m_continuationSeparator = NULL;
    }
    ;

    m_has_sym = false;

    if (m_sym)
    {
        delete m_sym;
        m_sym = NULL;
    }
    ;

    m_has_pgNum = false;

    if (m_pgNum)
    {
        delete m_pgNum;
        m_pgNum = NULL;
    }
    ;

    m_has_cr = false;

    if (m_cr)
    {
        delete m_cr;
        m_cr = NULL;
    }
    ;

    m_has_tab = false;

    if (m_tab)
    {
        delete m_tab;
        m_tab = NULL;
    }
    ;

    m_has_object = false;

    if (m_object)
    {
        delete m_object;
        m_object = NULL;
    }
    ;

    m_has_pict = false;

    if (m_pict)
    {
        delete m_pict;
        m_pict = NULL;
    }
    ;

    m_has_fldChar = false;

    if (m_fldChar)
    {
        delete m_fldChar;
        m_fldChar = NULL;
    }
    ;

    m_has_ruby = false;

    if (m_ruby)
    {
        delete m_ruby;
        m_ruby = NULL;
    }
    ;

    m_has_footnoteReference = false;

    if (m_footnoteReference)
    {
        delete m_footnoteReference;
        m_footnoteReference = NULL;
    }
    ;

    m_has_endnoteReference = false;

    if (m_endnoteReference)
    {
        delete m_endnoteReference;
        m_endnoteReference = NULL;
    }
    ;

    m_has_commentReference = false;

    if (m_commentReference)
    {
        delete m_commentReference;
        m_commentReference = NULL;
    }
    ;

    m_has_drawing = false;

    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;

    m_has_ptab = false;

    if (m_ptab)
    {
        delete m_ptab;
        m_ptab = NULL;
    }
    ;

    m_has_lastRenderedPageBreak = false;

    if (m_lastRenderedPageBreak)
    {
        delete m_lastRenderedPageBreak;
        m_lastRenderedPageBreak = NULL;
    }
    ;

    m_has_monthLong = true;
    if (!m_monthLong)
    {
        m_monthLong = new CT_Empty();
    }
    return m_monthLong;
}

const CT_Empty& CT_R::ChildGroup_1::get_monthLong() const
{
    if (m_monthLong)
    {
        return *m_monthLong;
    }
    return CT_Empty::default_instance();
}

bool CT_R::ChildGroup_1::has_yearLong() const
{
    return m_has_yearLong;
}

CT_Empty* CT_R::ChildGroup_1::mutable_yearLong()
{

    m_has_br = false;

    if (m_br)
    {
        delete m_br;
        m_br = NULL;
    }
    ;

    m_has_t = false;

    if (m_t)
    {
        delete m_t;
        m_t = NULL;
    }
    ;

    m_has_contentPart = false;

    if (m_contentPart)
    {
        delete m_contentPart;
        m_contentPart = NULL;
    }
    ;

    m_has_delText = false;

    if (m_delText)
    {
        delete m_delText;
        m_delText = NULL;
    }
    ;

    m_has_instrText = false;

    if (m_instrText)
    {
        delete m_instrText;
        m_instrText = NULL;
    }
    ;

    m_has_delInstrText = false;

    if (m_delInstrText)
    {
        delete m_delInstrText;
        m_delInstrText = NULL;
    }
    ;

    m_has_noBreakHyphen = false;

    if (m_noBreakHyphen)
    {
        delete m_noBreakHyphen;
        m_noBreakHyphen = NULL;
    }
    ;

    m_has_softHyphen = false;

    if (m_softHyphen)
    {
        delete m_softHyphen;
        m_softHyphen = NULL;
    }
    ;

    m_has_dayShort = false;

    if (m_dayShort)
    {
        delete m_dayShort;
        m_dayShort = NULL;
    }
    ;

    m_has_monthShort = false;

    if (m_monthShort)
    {
        delete m_monthShort;
        m_monthShort = NULL;
    }
    ;

    m_has_yearShort = false;

    if (m_yearShort)
    {
        delete m_yearShort;
        m_yearShort = NULL;
    }
    ;

    m_has_dayLong = false;

    if (m_dayLong)
    {
        delete m_dayLong;
        m_dayLong = NULL;
    }
    ;

    m_has_monthLong = false;

    if (m_monthLong)
    {
        delete m_monthLong;
        m_monthLong = NULL;
    }
    ;

    m_has_annotationRef = false;

    if (m_annotationRef)
    {
        delete m_annotationRef;
        m_annotationRef = NULL;
    }
    ;

    m_has_footnoteRef = false;

    if (m_footnoteRef)
    {
        delete m_footnoteRef;
        m_footnoteRef = NULL;
    }
    ;

    m_has_endnoteRef = false;

    if (m_endnoteRef)
    {
        delete m_endnoteRef;
        m_endnoteRef = NULL;
    }
    ;

    m_has_separator = false;

    if (m_separator)
    {
        delete m_separator;
        m_separator = NULL;
    }
    ;

    m_has_continuationSeparator = false;

    if (m_continuationSeparator)
    {
        delete m_continuationSeparator;
        m_continuationSeparator = NULL;
    }
    ;

    m_has_sym = false;

    if (m_sym)
    {
        delete m_sym;
        m_sym = NULL;
    }
    ;

    m_has_pgNum = false;

    if (m_pgNum)
    {
        delete m_pgNum;
        m_pgNum = NULL;
    }
    ;

    m_has_cr = false;

    if (m_cr)
    {
        delete m_cr;
        m_cr = NULL;
    }
    ;

    m_has_tab = false;

    if (m_tab)
    {
        delete m_tab;
        m_tab = NULL;
    }
    ;

    m_has_object = false;

    if (m_object)
    {
        delete m_object;
        m_object = NULL;
    }
    ;

    m_has_pict = false;

    if (m_pict)
    {
        delete m_pict;
        m_pict = NULL;
    }
    ;

    m_has_fldChar = false;

    if (m_fldChar)
    {
        delete m_fldChar;
        m_fldChar = NULL;
    }
    ;

    m_has_ruby = false;

    if (m_ruby)
    {
        delete m_ruby;
        m_ruby = NULL;
    }
    ;

    m_has_footnoteReference = false;

    if (m_footnoteReference)
    {
        delete m_footnoteReference;
        m_footnoteReference = NULL;
    }
    ;

    m_has_endnoteReference = false;

    if (m_endnoteReference)
    {
        delete m_endnoteReference;
        m_endnoteReference = NULL;
    }
    ;

    m_has_commentReference = false;

    if (m_commentReference)
    {
        delete m_commentReference;
        m_commentReference = NULL;
    }
    ;

    m_has_drawing = false;

    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;

    m_has_ptab = false;

    if (m_ptab)
    {
        delete m_ptab;
        m_ptab = NULL;
    }
    ;

    m_has_lastRenderedPageBreak = false;

    if (m_lastRenderedPageBreak)
    {
        delete m_lastRenderedPageBreak;
        m_lastRenderedPageBreak = NULL;
    }
    ;

    m_has_yearLong = true;
    if (!m_yearLong)
    {
        m_yearLong = new CT_Empty();
    }
    return m_yearLong;
}

const CT_Empty& CT_R::ChildGroup_1::get_yearLong() const
{
    if (m_yearLong)
    {
        return *m_yearLong;
    }
    return CT_Empty::default_instance();
}

bool CT_R::ChildGroup_1::has_annotationRef() const
{
    return m_has_annotationRef;
}

CT_Empty* CT_R::ChildGroup_1::mutable_annotationRef()
{

    m_has_br = false;

    if (m_br)
    {
        delete m_br;
        m_br = NULL;
    }
    ;

    m_has_t = false;

    if (m_t)
    {
        delete m_t;
        m_t = NULL;
    }
    ;

    m_has_contentPart = false;

    if (m_contentPart)
    {
        delete m_contentPart;
        m_contentPart = NULL;
    }
    ;

    m_has_delText = false;

    if (m_delText)
    {
        delete m_delText;
        m_delText = NULL;
    }
    ;

    m_has_instrText = false;

    if (m_instrText)
    {
        delete m_instrText;
        m_instrText = NULL;
    }
    ;

    m_has_delInstrText = false;

    if (m_delInstrText)
    {
        delete m_delInstrText;
        m_delInstrText = NULL;
    }
    ;

    m_has_noBreakHyphen = false;

    if (m_noBreakHyphen)
    {
        delete m_noBreakHyphen;
        m_noBreakHyphen = NULL;
    }
    ;

    m_has_softHyphen = false;

    if (m_softHyphen)
    {
        delete m_softHyphen;
        m_softHyphen = NULL;
    }
    ;

    m_has_dayShort = false;

    if (m_dayShort)
    {
        delete m_dayShort;
        m_dayShort = NULL;
    }
    ;

    m_has_monthShort = false;

    if (m_monthShort)
    {
        delete m_monthShort;
        m_monthShort = NULL;
    }
    ;

    m_has_yearShort = false;

    if (m_yearShort)
    {
        delete m_yearShort;
        m_yearShort = NULL;
    }
    ;

    m_has_dayLong = false;

    if (m_dayLong)
    {
        delete m_dayLong;
        m_dayLong = NULL;
    }
    ;

    m_has_monthLong = false;

    if (m_monthLong)
    {
        delete m_monthLong;
        m_monthLong = NULL;
    }
    ;

    m_has_yearLong = false;

    if (m_yearLong)
    {
        delete m_yearLong;
        m_yearLong = NULL;
    }
    ;

    m_has_footnoteRef = false;

    if (m_footnoteRef)
    {
        delete m_footnoteRef;
        m_footnoteRef = NULL;
    }
    ;

    m_has_endnoteRef = false;

    if (m_endnoteRef)
    {
        delete m_endnoteRef;
        m_endnoteRef = NULL;
    }
    ;

    m_has_separator = false;

    if (m_separator)
    {
        delete m_separator;
        m_separator = NULL;
    }
    ;

    m_has_continuationSeparator = false;

    if (m_continuationSeparator)
    {
        delete m_continuationSeparator;
        m_continuationSeparator = NULL;
    }
    ;

    m_has_sym = false;

    if (m_sym)
    {
        delete m_sym;
        m_sym = NULL;
    }
    ;

    m_has_pgNum = false;

    if (m_pgNum)
    {
        delete m_pgNum;
        m_pgNum = NULL;
    }
    ;

    m_has_cr = false;

    if (m_cr)
    {
        delete m_cr;
        m_cr = NULL;
    }
    ;

    m_has_tab = false;

    if (m_tab)
    {
        delete m_tab;
        m_tab = NULL;
    }
    ;

    m_has_object = false;

    if (m_object)
    {
        delete m_object;
        m_object = NULL;
    }
    ;

    m_has_pict = false;

    if (m_pict)
    {
        delete m_pict;
        m_pict = NULL;
    }
    ;

    m_has_fldChar = false;

    if (m_fldChar)
    {
        delete m_fldChar;
        m_fldChar = NULL;
    }
    ;

    m_has_ruby = false;

    if (m_ruby)
    {
        delete m_ruby;
        m_ruby = NULL;
    }
    ;

    m_has_footnoteReference = false;

    if (m_footnoteReference)
    {
        delete m_footnoteReference;
        m_footnoteReference = NULL;
    }
    ;

    m_has_endnoteReference = false;

    if (m_endnoteReference)
    {
        delete m_endnoteReference;
        m_endnoteReference = NULL;
    }
    ;

    m_has_commentReference = false;

    if (m_commentReference)
    {
        delete m_commentReference;
        m_commentReference = NULL;
    }
    ;

    m_has_drawing = false;

    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;

    m_has_ptab = false;

    if (m_ptab)
    {
        delete m_ptab;
        m_ptab = NULL;
    }
    ;

    m_has_lastRenderedPageBreak = false;

    if (m_lastRenderedPageBreak)
    {
        delete m_lastRenderedPageBreak;
        m_lastRenderedPageBreak = NULL;
    }
    ;

    m_has_annotationRef = true;
    if (!m_annotationRef)
    {
        m_annotationRef = new CT_Empty();
    }
    return m_annotationRef;
}

const CT_Empty& CT_R::ChildGroup_1::get_annotationRef() const
{
    if (m_annotationRef)
    {
        return *m_annotationRef;
    }
    return CT_Empty::default_instance();
}

bool CT_R::ChildGroup_1::has_footnoteRef() const
{
    return m_has_footnoteRef;
}

CT_Empty* CT_R::ChildGroup_1::mutable_footnoteRef()
{

    m_has_br = false;

    if (m_br)
    {
        delete m_br;
        m_br = NULL;
    }
    ;

    m_has_t = false;

    if (m_t)
    {
        delete m_t;
        m_t = NULL;
    }
    ;

    m_has_contentPart = false;

    if (m_contentPart)
    {
        delete m_contentPart;
        m_contentPart = NULL;
    }
    ;

    m_has_delText = false;

    if (m_delText)
    {
        delete m_delText;
        m_delText = NULL;
    }
    ;

    m_has_instrText = false;

    if (m_instrText)
    {
        delete m_instrText;
        m_instrText = NULL;
    }
    ;

    m_has_delInstrText = false;

    if (m_delInstrText)
    {
        delete m_delInstrText;
        m_delInstrText = NULL;
    }
    ;

    m_has_noBreakHyphen = false;

    if (m_noBreakHyphen)
    {
        delete m_noBreakHyphen;
        m_noBreakHyphen = NULL;
    }
    ;

    m_has_softHyphen = false;

    if (m_softHyphen)
    {
        delete m_softHyphen;
        m_softHyphen = NULL;
    }
    ;

    m_has_dayShort = false;

    if (m_dayShort)
    {
        delete m_dayShort;
        m_dayShort = NULL;
    }
    ;

    m_has_monthShort = false;

    if (m_monthShort)
    {
        delete m_monthShort;
        m_monthShort = NULL;
    }
    ;

    m_has_yearShort = false;

    if (m_yearShort)
    {
        delete m_yearShort;
        m_yearShort = NULL;
    }
    ;

    m_has_dayLong = false;

    if (m_dayLong)
    {
        delete m_dayLong;
        m_dayLong = NULL;
    }
    ;

    m_has_monthLong = false;

    if (m_monthLong)
    {
        delete m_monthLong;
        m_monthLong = NULL;
    }
    ;

    m_has_yearLong = false;

    if (m_yearLong)
    {
        delete m_yearLong;
        m_yearLong = NULL;
    }
    ;

    m_has_annotationRef = false;

    if (m_annotationRef)
    {
        delete m_annotationRef;
        m_annotationRef = NULL;
    }
    ;

    m_has_endnoteRef = false;

    if (m_endnoteRef)
    {
        delete m_endnoteRef;
        m_endnoteRef = NULL;
    }
    ;

    m_has_separator = false;

    if (m_separator)
    {
        delete m_separator;
        m_separator = NULL;
    }
    ;

    m_has_continuationSeparator = false;

    if (m_continuationSeparator)
    {
        delete m_continuationSeparator;
        m_continuationSeparator = NULL;
    }
    ;

    m_has_sym = false;

    if (m_sym)
    {
        delete m_sym;
        m_sym = NULL;
    }
    ;

    m_has_pgNum = false;

    if (m_pgNum)
    {
        delete m_pgNum;
        m_pgNum = NULL;
    }
    ;

    m_has_cr = false;

    if (m_cr)
    {
        delete m_cr;
        m_cr = NULL;
    }
    ;

    m_has_tab = false;

    if (m_tab)
    {
        delete m_tab;
        m_tab = NULL;
    }
    ;

    m_has_object = false;

    if (m_object)
    {
        delete m_object;
        m_object = NULL;
    }
    ;

    m_has_pict = false;

    if (m_pict)
    {
        delete m_pict;
        m_pict = NULL;
    }
    ;

    m_has_fldChar = false;

    if (m_fldChar)
    {
        delete m_fldChar;
        m_fldChar = NULL;
    }
    ;

    m_has_ruby = false;

    if (m_ruby)
    {
        delete m_ruby;
        m_ruby = NULL;
    }
    ;

    m_has_footnoteReference = false;

    if (m_footnoteReference)
    {
        delete m_footnoteReference;
        m_footnoteReference = NULL;
    }
    ;

    m_has_endnoteReference = false;

    if (m_endnoteReference)
    {
        delete m_endnoteReference;
        m_endnoteReference = NULL;
    }
    ;

    m_has_commentReference = false;

    if (m_commentReference)
    {
        delete m_commentReference;
        m_commentReference = NULL;
    }
    ;

    m_has_drawing = false;

    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;

    m_has_ptab = false;

    if (m_ptab)
    {
        delete m_ptab;
        m_ptab = NULL;
    }
    ;

    m_has_lastRenderedPageBreak = false;

    if (m_lastRenderedPageBreak)
    {
        delete m_lastRenderedPageBreak;
        m_lastRenderedPageBreak = NULL;
    }
    ;

    m_has_footnoteRef = true;
    if (!m_footnoteRef)
    {
        m_footnoteRef = new CT_Empty();
    }
    return m_footnoteRef;
}

const CT_Empty& CT_R::ChildGroup_1::get_footnoteRef() const
{
    if (m_footnoteRef)
    {
        return *m_footnoteRef;
    }
    return CT_Empty::default_instance();
}

bool CT_R::ChildGroup_1::has_endnoteRef() const
{
    return m_has_endnoteRef;
}

CT_Empty* CT_R::ChildGroup_1::mutable_endnoteRef()
{

    m_has_br = false;

    if (m_br)
    {
        delete m_br;
        m_br = NULL;
    }
    ;

    m_has_t = false;

    if (m_t)
    {
        delete m_t;
        m_t = NULL;
    }
    ;

    m_has_contentPart = false;

    if (m_contentPart)
    {
        delete m_contentPart;
        m_contentPart = NULL;
    }
    ;

    m_has_delText = false;

    if (m_delText)
    {
        delete m_delText;
        m_delText = NULL;
    }
    ;

    m_has_instrText = false;

    if (m_instrText)
    {
        delete m_instrText;
        m_instrText = NULL;
    }
    ;

    m_has_delInstrText = false;

    if (m_delInstrText)
    {
        delete m_delInstrText;
        m_delInstrText = NULL;
    }
    ;

    m_has_noBreakHyphen = false;

    if (m_noBreakHyphen)
    {
        delete m_noBreakHyphen;
        m_noBreakHyphen = NULL;
    }
    ;

    m_has_softHyphen = false;

    if (m_softHyphen)
    {
        delete m_softHyphen;
        m_softHyphen = NULL;
    }
    ;

    m_has_dayShort = false;

    if (m_dayShort)
    {
        delete m_dayShort;
        m_dayShort = NULL;
    }
    ;

    m_has_monthShort = false;

    if (m_monthShort)
    {
        delete m_monthShort;
        m_monthShort = NULL;
    }
    ;

    m_has_yearShort = false;

    if (m_yearShort)
    {
        delete m_yearShort;
        m_yearShort = NULL;
    }
    ;

    m_has_dayLong = false;

    if (m_dayLong)
    {
        delete m_dayLong;
        m_dayLong = NULL;
    }
    ;

    m_has_monthLong = false;

    if (m_monthLong)
    {
        delete m_monthLong;
        m_monthLong = NULL;
    }
    ;

    m_has_yearLong = false;

    if (m_yearLong)
    {
        delete m_yearLong;
        m_yearLong = NULL;
    }
    ;

    m_has_annotationRef = false;

    if (m_annotationRef)
    {
        delete m_annotationRef;
        m_annotationRef = NULL;
    }
    ;

    m_has_footnoteRef = false;

    if (m_footnoteRef)
    {
        delete m_footnoteRef;
        m_footnoteRef = NULL;
    }
    ;

    m_has_separator = false;

    if (m_separator)
    {
        delete m_separator;
        m_separator = NULL;
    }
    ;

    m_has_continuationSeparator = false;

    if (m_continuationSeparator)
    {
        delete m_continuationSeparator;
        m_continuationSeparator = NULL;
    }
    ;

    m_has_sym = false;

    if (m_sym)
    {
        delete m_sym;
        m_sym = NULL;
    }
    ;

    m_has_pgNum = false;

    if (m_pgNum)
    {
        delete m_pgNum;
        m_pgNum = NULL;
    }
    ;

    m_has_cr = false;

    if (m_cr)
    {
        delete m_cr;
        m_cr = NULL;
    }
    ;

    m_has_tab = false;

    if (m_tab)
    {
        delete m_tab;
        m_tab = NULL;
    }
    ;

    m_has_object = false;

    if (m_object)
    {
        delete m_object;
        m_object = NULL;
    }
    ;

    m_has_pict = false;

    if (m_pict)
    {
        delete m_pict;
        m_pict = NULL;
    }
    ;

    m_has_fldChar = false;

    if (m_fldChar)
    {
        delete m_fldChar;
        m_fldChar = NULL;
    }
    ;

    m_has_ruby = false;

    if (m_ruby)
    {
        delete m_ruby;
        m_ruby = NULL;
    }
    ;

    m_has_footnoteReference = false;

    if (m_footnoteReference)
    {
        delete m_footnoteReference;
        m_footnoteReference = NULL;
    }
    ;

    m_has_endnoteReference = false;

    if (m_endnoteReference)
    {
        delete m_endnoteReference;
        m_endnoteReference = NULL;
    }
    ;

    m_has_commentReference = false;

    if (m_commentReference)
    {
        delete m_commentReference;
        m_commentReference = NULL;
    }
    ;

    m_has_drawing = false;

    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;

    m_has_ptab = false;

    if (m_ptab)
    {
        delete m_ptab;
        m_ptab = NULL;
    }
    ;

    m_has_lastRenderedPageBreak = false;

    if (m_lastRenderedPageBreak)
    {
        delete m_lastRenderedPageBreak;
        m_lastRenderedPageBreak = NULL;
    }
    ;

    m_has_endnoteRef = true;
    if (!m_endnoteRef)
    {
        m_endnoteRef = new CT_Empty();
    }
    return m_endnoteRef;
}

const CT_Empty& CT_R::ChildGroup_1::get_endnoteRef() const
{
    if (m_endnoteRef)
    {
        return *m_endnoteRef;
    }
    return CT_Empty::default_instance();
}

bool CT_R::ChildGroup_1::has_separator() const
{
    return m_has_separator;
}

CT_Empty* CT_R::ChildGroup_1::mutable_separator()
{

    m_has_br = false;

    if (m_br)
    {
        delete m_br;
        m_br = NULL;
    }
    ;

    m_has_t = false;

    if (m_t)
    {
        delete m_t;
        m_t = NULL;
    }
    ;

    m_has_contentPart = false;

    if (m_contentPart)
    {
        delete m_contentPart;
        m_contentPart = NULL;
    }
    ;

    m_has_delText = false;

    if (m_delText)
    {
        delete m_delText;
        m_delText = NULL;
    }
    ;

    m_has_instrText = false;

    if (m_instrText)
    {
        delete m_instrText;
        m_instrText = NULL;
    }
    ;

    m_has_delInstrText = false;

    if (m_delInstrText)
    {
        delete m_delInstrText;
        m_delInstrText = NULL;
    }
    ;

    m_has_noBreakHyphen = false;

    if (m_noBreakHyphen)
    {
        delete m_noBreakHyphen;
        m_noBreakHyphen = NULL;
    }
    ;

    m_has_softHyphen = false;

    if (m_softHyphen)
    {
        delete m_softHyphen;
        m_softHyphen = NULL;
    }
    ;

    m_has_dayShort = false;

    if (m_dayShort)
    {
        delete m_dayShort;
        m_dayShort = NULL;
    }
    ;

    m_has_monthShort = false;

    if (m_monthShort)
    {
        delete m_monthShort;
        m_monthShort = NULL;
    }
    ;

    m_has_yearShort = false;

    if (m_yearShort)
    {
        delete m_yearShort;
        m_yearShort = NULL;
    }
    ;

    m_has_dayLong = false;

    if (m_dayLong)
    {
        delete m_dayLong;
        m_dayLong = NULL;
    }
    ;

    m_has_monthLong = false;

    if (m_monthLong)
    {
        delete m_monthLong;
        m_monthLong = NULL;
    }
    ;

    m_has_yearLong = false;

    if (m_yearLong)
    {
        delete m_yearLong;
        m_yearLong = NULL;
    }
    ;

    m_has_annotationRef = false;

    if (m_annotationRef)
    {
        delete m_annotationRef;
        m_annotationRef = NULL;
    }
    ;

    m_has_footnoteRef = false;

    if (m_footnoteRef)
    {
        delete m_footnoteRef;
        m_footnoteRef = NULL;
    }
    ;

    m_has_endnoteRef = false;

    if (m_endnoteRef)
    {
        delete m_endnoteRef;
        m_endnoteRef = NULL;
    }
    ;

    m_has_continuationSeparator = false;

    if (m_continuationSeparator)
    {
        delete m_continuationSeparator;
        m_continuationSeparator = NULL;
    }
    ;

    m_has_sym = false;

    if (m_sym)
    {
        delete m_sym;
        m_sym = NULL;
    }
    ;

    m_has_pgNum = false;

    if (m_pgNum)
    {
        delete m_pgNum;
        m_pgNum = NULL;
    }
    ;

    m_has_cr = false;

    if (m_cr)
    {
        delete m_cr;
        m_cr = NULL;
    }
    ;

    m_has_tab = false;

    if (m_tab)
    {
        delete m_tab;
        m_tab = NULL;
    }
    ;

    m_has_object = false;

    if (m_object)
    {
        delete m_object;
        m_object = NULL;
    }
    ;

    m_has_pict = false;

    if (m_pict)
    {
        delete m_pict;
        m_pict = NULL;
    }
    ;

    m_has_fldChar = false;

    if (m_fldChar)
    {
        delete m_fldChar;
        m_fldChar = NULL;
    }
    ;

    m_has_ruby = false;

    if (m_ruby)
    {
        delete m_ruby;
        m_ruby = NULL;
    }
    ;

    m_has_footnoteReference = false;

    if (m_footnoteReference)
    {
        delete m_footnoteReference;
        m_footnoteReference = NULL;
    }
    ;

    m_has_endnoteReference = false;

    if (m_endnoteReference)
    {
        delete m_endnoteReference;
        m_endnoteReference = NULL;
    }
    ;

    m_has_commentReference = false;

    if (m_commentReference)
    {
        delete m_commentReference;
        m_commentReference = NULL;
    }
    ;

    m_has_drawing = false;

    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;

    m_has_ptab = false;

    if (m_ptab)
    {
        delete m_ptab;
        m_ptab = NULL;
    }
    ;

    m_has_lastRenderedPageBreak = false;

    if (m_lastRenderedPageBreak)
    {
        delete m_lastRenderedPageBreak;
        m_lastRenderedPageBreak = NULL;
    }
    ;

    m_has_separator = true;
    if (!m_separator)
    {
        m_separator = new CT_Empty();
    }
    return m_separator;
}

const CT_Empty& CT_R::ChildGroup_1::get_separator() const
{
    if (m_separator)
    {
        return *m_separator;
    }
    return CT_Empty::default_instance();
}

bool CT_R::ChildGroup_1::has_continuationSeparator() const
{
    return m_has_continuationSeparator;
}

CT_Empty* CT_R::ChildGroup_1::mutable_continuationSeparator()
{

    m_has_br = false;

    if (m_br)
    {
        delete m_br;
        m_br = NULL;
    }
    ;

    m_has_t = false;

    if (m_t)
    {
        delete m_t;
        m_t = NULL;
    }
    ;

    m_has_contentPart = false;

    if (m_contentPart)
    {
        delete m_contentPart;
        m_contentPart = NULL;
    }
    ;

    m_has_delText = false;

    if (m_delText)
    {
        delete m_delText;
        m_delText = NULL;
    }
    ;

    m_has_instrText = false;

    if (m_instrText)
    {
        delete m_instrText;
        m_instrText = NULL;
    }
    ;

    m_has_delInstrText = false;

    if (m_delInstrText)
    {
        delete m_delInstrText;
        m_delInstrText = NULL;
    }
    ;

    m_has_noBreakHyphen = false;

    if (m_noBreakHyphen)
    {
        delete m_noBreakHyphen;
        m_noBreakHyphen = NULL;
    }
    ;

    m_has_softHyphen = false;

    if (m_softHyphen)
    {
        delete m_softHyphen;
        m_softHyphen = NULL;
    }
    ;

    m_has_dayShort = false;

    if (m_dayShort)
    {
        delete m_dayShort;
        m_dayShort = NULL;
    }
    ;

    m_has_monthShort = false;

    if (m_monthShort)
    {
        delete m_monthShort;
        m_monthShort = NULL;
    }
    ;

    m_has_yearShort = false;

    if (m_yearShort)
    {
        delete m_yearShort;
        m_yearShort = NULL;
    }
    ;

    m_has_dayLong = false;

    if (m_dayLong)
    {
        delete m_dayLong;
        m_dayLong = NULL;
    }
    ;

    m_has_monthLong = false;

    if (m_monthLong)
    {
        delete m_monthLong;
        m_monthLong = NULL;
    }
    ;

    m_has_yearLong = false;

    if (m_yearLong)
    {
        delete m_yearLong;
        m_yearLong = NULL;
    }
    ;

    m_has_annotationRef = false;

    if (m_annotationRef)
    {
        delete m_annotationRef;
        m_annotationRef = NULL;
    }
    ;

    m_has_footnoteRef = false;

    if (m_footnoteRef)
    {
        delete m_footnoteRef;
        m_footnoteRef = NULL;
    }
    ;

    m_has_endnoteRef = false;

    if (m_endnoteRef)
    {
        delete m_endnoteRef;
        m_endnoteRef = NULL;
    }
    ;

    m_has_separator = false;

    if (m_separator)
    {
        delete m_separator;
        m_separator = NULL;
    }
    ;

    m_has_sym = false;

    if (m_sym)
    {
        delete m_sym;
        m_sym = NULL;
    }
    ;

    m_has_pgNum = false;

    if (m_pgNum)
    {
        delete m_pgNum;
        m_pgNum = NULL;
    }
    ;

    m_has_cr = false;

    if (m_cr)
    {
        delete m_cr;
        m_cr = NULL;
    }
    ;

    m_has_tab = false;

    if (m_tab)
    {
        delete m_tab;
        m_tab = NULL;
    }
    ;

    m_has_object = false;

    if (m_object)
    {
        delete m_object;
        m_object = NULL;
    }
    ;

    m_has_pict = false;

    if (m_pict)
    {
        delete m_pict;
        m_pict = NULL;
    }
    ;

    m_has_fldChar = false;

    if (m_fldChar)
    {
        delete m_fldChar;
        m_fldChar = NULL;
    }
    ;

    m_has_ruby = false;

    if (m_ruby)
    {
        delete m_ruby;
        m_ruby = NULL;
    }
    ;

    m_has_footnoteReference = false;

    if (m_footnoteReference)
    {
        delete m_footnoteReference;
        m_footnoteReference = NULL;
    }
    ;

    m_has_endnoteReference = false;

    if (m_endnoteReference)
    {
        delete m_endnoteReference;
        m_endnoteReference = NULL;
    }
    ;

    m_has_commentReference = false;

    if (m_commentReference)
    {
        delete m_commentReference;
        m_commentReference = NULL;
    }
    ;

    m_has_drawing = false;

    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;

    m_has_ptab = false;

    if (m_ptab)
    {
        delete m_ptab;
        m_ptab = NULL;
    }
    ;

    m_has_lastRenderedPageBreak = false;

    if (m_lastRenderedPageBreak)
    {
        delete m_lastRenderedPageBreak;
        m_lastRenderedPageBreak = NULL;
    }
    ;

    m_has_continuationSeparator = true;
    if (!m_continuationSeparator)
    {
        m_continuationSeparator = new CT_Empty();
    }
    return m_continuationSeparator;
}

const CT_Empty& CT_R::ChildGroup_1::get_continuationSeparator() const
{
    if (m_continuationSeparator)
    {
        return *m_continuationSeparator;
    }
    return CT_Empty::default_instance();
}

bool CT_R::ChildGroup_1::has_sym() const
{
    return m_has_sym;
}

CT_Sym* CT_R::ChildGroup_1::mutable_sym()
{

    m_has_br = false;

    if (m_br)
    {
        delete m_br;
        m_br = NULL;
    }
    ;

    m_has_t = false;

    if (m_t)
    {
        delete m_t;
        m_t = NULL;
    }
    ;

    m_has_contentPart = false;

    if (m_contentPart)
    {
        delete m_contentPart;
        m_contentPart = NULL;
    }
    ;

    m_has_delText = false;

    if (m_delText)
    {
        delete m_delText;
        m_delText = NULL;
    }
    ;

    m_has_instrText = false;

    if (m_instrText)
    {
        delete m_instrText;
        m_instrText = NULL;
    }
    ;

    m_has_delInstrText = false;

    if (m_delInstrText)
    {
        delete m_delInstrText;
        m_delInstrText = NULL;
    }
    ;

    m_has_noBreakHyphen = false;

    if (m_noBreakHyphen)
    {
        delete m_noBreakHyphen;
        m_noBreakHyphen = NULL;
    }
    ;

    m_has_softHyphen = false;

    if (m_softHyphen)
    {
        delete m_softHyphen;
        m_softHyphen = NULL;
    }
    ;

    m_has_dayShort = false;

    if (m_dayShort)
    {
        delete m_dayShort;
        m_dayShort = NULL;
    }
    ;

    m_has_monthShort = false;

    if (m_monthShort)
    {
        delete m_monthShort;
        m_monthShort = NULL;
    }
    ;

    m_has_yearShort = false;

    if (m_yearShort)
    {
        delete m_yearShort;
        m_yearShort = NULL;
    }
    ;

    m_has_dayLong = false;

    if (m_dayLong)
    {
        delete m_dayLong;
        m_dayLong = NULL;
    }
    ;

    m_has_monthLong = false;

    if (m_monthLong)
    {
        delete m_monthLong;
        m_monthLong = NULL;
    }
    ;

    m_has_yearLong = false;

    if (m_yearLong)
    {
        delete m_yearLong;
        m_yearLong = NULL;
    }
    ;

    m_has_annotationRef = false;

    if (m_annotationRef)
    {
        delete m_annotationRef;
        m_annotationRef = NULL;
    }
    ;

    m_has_footnoteRef = false;

    if (m_footnoteRef)
    {
        delete m_footnoteRef;
        m_footnoteRef = NULL;
    }
    ;

    m_has_endnoteRef = false;

    if (m_endnoteRef)
    {
        delete m_endnoteRef;
        m_endnoteRef = NULL;
    }
    ;

    m_has_separator = false;

    if (m_separator)
    {
        delete m_separator;
        m_separator = NULL;
    }
    ;

    m_has_continuationSeparator = false;

    if (m_continuationSeparator)
    {
        delete m_continuationSeparator;
        m_continuationSeparator = NULL;
    }
    ;

    m_has_pgNum = false;

    if (m_pgNum)
    {
        delete m_pgNum;
        m_pgNum = NULL;
    }
    ;

    m_has_cr = false;

    if (m_cr)
    {
        delete m_cr;
        m_cr = NULL;
    }
    ;

    m_has_tab = false;

    if (m_tab)
    {
        delete m_tab;
        m_tab = NULL;
    }
    ;

    m_has_object = false;

    if (m_object)
    {
        delete m_object;
        m_object = NULL;
    }
    ;

    m_has_pict = false;

    if (m_pict)
    {
        delete m_pict;
        m_pict = NULL;
    }
    ;

    m_has_fldChar = false;

    if (m_fldChar)
    {
        delete m_fldChar;
        m_fldChar = NULL;
    }
    ;

    m_has_ruby = false;

    if (m_ruby)
    {
        delete m_ruby;
        m_ruby = NULL;
    }
    ;

    m_has_footnoteReference = false;

    if (m_footnoteReference)
    {
        delete m_footnoteReference;
        m_footnoteReference = NULL;
    }
    ;

    m_has_endnoteReference = false;

    if (m_endnoteReference)
    {
        delete m_endnoteReference;
        m_endnoteReference = NULL;
    }
    ;

    m_has_commentReference = false;

    if (m_commentReference)
    {
        delete m_commentReference;
        m_commentReference = NULL;
    }
    ;

    m_has_drawing = false;

    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;

    m_has_ptab = false;

    if (m_ptab)
    {
        delete m_ptab;
        m_ptab = NULL;
    }
    ;

    m_has_lastRenderedPageBreak = false;

    if (m_lastRenderedPageBreak)
    {
        delete m_lastRenderedPageBreak;
        m_lastRenderedPageBreak = NULL;
    }
    ;

    m_has_sym = true;
    if (!m_sym)
    {
        m_sym = new CT_Sym();
    }
    return m_sym;
}

const CT_Sym& CT_R::ChildGroup_1::get_sym() const
{
    if (m_sym)
    {
        return *m_sym;
    }
    return CT_Sym::default_instance();
}

bool CT_R::ChildGroup_1::has_pgNum() const
{
    return m_has_pgNum;
}

CT_Empty* CT_R::ChildGroup_1::mutable_pgNum()
{

    m_has_br = false;

    if (m_br)
    {
        delete m_br;
        m_br = NULL;
    }
    ;

    m_has_t = false;

    if (m_t)
    {
        delete m_t;
        m_t = NULL;
    }
    ;

    m_has_contentPart = false;

    if (m_contentPart)
    {
        delete m_contentPart;
        m_contentPart = NULL;
    }
    ;

    m_has_delText = false;

    if (m_delText)
    {
        delete m_delText;
        m_delText = NULL;
    }
    ;

    m_has_instrText = false;

    if (m_instrText)
    {
        delete m_instrText;
        m_instrText = NULL;
    }
    ;

    m_has_delInstrText = false;

    if (m_delInstrText)
    {
        delete m_delInstrText;
        m_delInstrText = NULL;
    }
    ;

    m_has_noBreakHyphen = false;

    if (m_noBreakHyphen)
    {
        delete m_noBreakHyphen;
        m_noBreakHyphen = NULL;
    }
    ;

    m_has_softHyphen = false;

    if (m_softHyphen)
    {
        delete m_softHyphen;
        m_softHyphen = NULL;
    }
    ;

    m_has_dayShort = false;

    if (m_dayShort)
    {
        delete m_dayShort;
        m_dayShort = NULL;
    }
    ;

    m_has_monthShort = false;

    if (m_monthShort)
    {
        delete m_monthShort;
        m_monthShort = NULL;
    }
    ;

    m_has_yearShort = false;

    if (m_yearShort)
    {
        delete m_yearShort;
        m_yearShort = NULL;
    }
    ;

    m_has_dayLong = false;

    if (m_dayLong)
    {
        delete m_dayLong;
        m_dayLong = NULL;
    }
    ;

    m_has_monthLong = false;

    if (m_monthLong)
    {
        delete m_monthLong;
        m_monthLong = NULL;
    }
    ;

    m_has_yearLong = false;

    if (m_yearLong)
    {
        delete m_yearLong;
        m_yearLong = NULL;
    }
    ;

    m_has_annotationRef = false;

    if (m_annotationRef)
    {
        delete m_annotationRef;
        m_annotationRef = NULL;
    }
    ;

    m_has_footnoteRef = false;

    if (m_footnoteRef)
    {
        delete m_footnoteRef;
        m_footnoteRef = NULL;
    }
    ;

    m_has_endnoteRef = false;

    if (m_endnoteRef)
    {
        delete m_endnoteRef;
        m_endnoteRef = NULL;
    }
    ;

    m_has_separator = false;

    if (m_separator)
    {
        delete m_separator;
        m_separator = NULL;
    }
    ;

    m_has_continuationSeparator = false;

    if (m_continuationSeparator)
    {
        delete m_continuationSeparator;
        m_continuationSeparator = NULL;
    }
    ;

    m_has_sym = false;

    if (m_sym)
    {
        delete m_sym;
        m_sym = NULL;
    }
    ;

    m_has_cr = false;

    if (m_cr)
    {
        delete m_cr;
        m_cr = NULL;
    }
    ;

    m_has_tab = false;

    if (m_tab)
    {
        delete m_tab;
        m_tab = NULL;
    }
    ;

    m_has_object = false;

    if (m_object)
    {
        delete m_object;
        m_object = NULL;
    }
    ;

    m_has_pict = false;

    if (m_pict)
    {
        delete m_pict;
        m_pict = NULL;
    }
    ;

    m_has_fldChar = false;

    if (m_fldChar)
    {
        delete m_fldChar;
        m_fldChar = NULL;
    }
    ;

    m_has_ruby = false;

    if (m_ruby)
    {
        delete m_ruby;
        m_ruby = NULL;
    }
    ;

    m_has_footnoteReference = false;

    if (m_footnoteReference)
    {
        delete m_footnoteReference;
        m_footnoteReference = NULL;
    }
    ;

    m_has_endnoteReference = false;

    if (m_endnoteReference)
    {
        delete m_endnoteReference;
        m_endnoteReference = NULL;
    }
    ;

    m_has_commentReference = false;

    if (m_commentReference)
    {
        delete m_commentReference;
        m_commentReference = NULL;
    }
    ;

    m_has_drawing = false;

    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;

    m_has_ptab = false;

    if (m_ptab)
    {
        delete m_ptab;
        m_ptab = NULL;
    }
    ;

    m_has_lastRenderedPageBreak = false;

    if (m_lastRenderedPageBreak)
    {
        delete m_lastRenderedPageBreak;
        m_lastRenderedPageBreak = NULL;
    }
    ;

    m_has_pgNum = true;
    if (!m_pgNum)
    {
        m_pgNum = new CT_Empty();
    }
    return m_pgNum;
}

const CT_Empty& CT_R::ChildGroup_1::get_pgNum() const
{
    if (m_pgNum)
    {
        return *m_pgNum;
    }
    return CT_Empty::default_instance();
}

bool CT_R::ChildGroup_1::has_cr() const
{
    return m_has_cr;
}

CT_Empty* CT_R::ChildGroup_1::mutable_cr()
{

    m_has_br = false;

    if (m_br)
    {
        delete m_br;
        m_br = NULL;
    }
    ;

    m_has_t = false;

    if (m_t)
    {
        delete m_t;
        m_t = NULL;
    }
    ;

    m_has_contentPart = false;

    if (m_contentPart)
    {
        delete m_contentPart;
        m_contentPart = NULL;
    }
    ;

    m_has_delText = false;

    if (m_delText)
    {
        delete m_delText;
        m_delText = NULL;
    }
    ;

    m_has_instrText = false;

    if (m_instrText)
    {
        delete m_instrText;
        m_instrText = NULL;
    }
    ;

    m_has_delInstrText = false;

    if (m_delInstrText)
    {
        delete m_delInstrText;
        m_delInstrText = NULL;
    }
    ;

    m_has_noBreakHyphen = false;

    if (m_noBreakHyphen)
    {
        delete m_noBreakHyphen;
        m_noBreakHyphen = NULL;
    }
    ;

    m_has_softHyphen = false;

    if (m_softHyphen)
    {
        delete m_softHyphen;
        m_softHyphen = NULL;
    }
    ;

    m_has_dayShort = false;

    if (m_dayShort)
    {
        delete m_dayShort;
        m_dayShort = NULL;
    }
    ;

    m_has_monthShort = false;

    if (m_monthShort)
    {
        delete m_monthShort;
        m_monthShort = NULL;
    }
    ;

    m_has_yearShort = false;

    if (m_yearShort)
    {
        delete m_yearShort;
        m_yearShort = NULL;
    }
    ;

    m_has_dayLong = false;

    if (m_dayLong)
    {
        delete m_dayLong;
        m_dayLong = NULL;
    }
    ;

    m_has_monthLong = false;

    if (m_monthLong)
    {
        delete m_monthLong;
        m_monthLong = NULL;
    }
    ;

    m_has_yearLong = false;

    if (m_yearLong)
    {
        delete m_yearLong;
        m_yearLong = NULL;
    }
    ;

    m_has_annotationRef = false;

    if (m_annotationRef)
    {
        delete m_annotationRef;
        m_annotationRef = NULL;
    }
    ;

    m_has_footnoteRef = false;

    if (m_footnoteRef)
    {
        delete m_footnoteRef;
        m_footnoteRef = NULL;
    }
    ;

    m_has_endnoteRef = false;

    if (m_endnoteRef)
    {
        delete m_endnoteRef;
        m_endnoteRef = NULL;
    }
    ;

    m_has_separator = false;

    if (m_separator)
    {
        delete m_separator;
        m_separator = NULL;
    }
    ;

    m_has_continuationSeparator = false;

    if (m_continuationSeparator)
    {
        delete m_continuationSeparator;
        m_continuationSeparator = NULL;
    }
    ;

    m_has_sym = false;

    if (m_sym)
    {
        delete m_sym;
        m_sym = NULL;
    }
    ;

    m_has_pgNum = false;

    if (m_pgNum)
    {
        delete m_pgNum;
        m_pgNum = NULL;
    }
    ;

    m_has_tab = false;

    if (m_tab)
    {
        delete m_tab;
        m_tab = NULL;
    }
    ;

    m_has_object = false;

    if (m_object)
    {
        delete m_object;
        m_object = NULL;
    }
    ;

    m_has_pict = false;

    if (m_pict)
    {
        delete m_pict;
        m_pict = NULL;
    }
    ;

    m_has_fldChar = false;

    if (m_fldChar)
    {
        delete m_fldChar;
        m_fldChar = NULL;
    }
    ;

    m_has_ruby = false;

    if (m_ruby)
    {
        delete m_ruby;
        m_ruby = NULL;
    }
    ;

    m_has_footnoteReference = false;

    if (m_footnoteReference)
    {
        delete m_footnoteReference;
        m_footnoteReference = NULL;
    }
    ;

    m_has_endnoteReference = false;

    if (m_endnoteReference)
    {
        delete m_endnoteReference;
        m_endnoteReference = NULL;
    }
    ;

    m_has_commentReference = false;

    if (m_commentReference)
    {
        delete m_commentReference;
        m_commentReference = NULL;
    }
    ;

    m_has_drawing = false;

    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;

    m_has_ptab = false;

    if (m_ptab)
    {
        delete m_ptab;
        m_ptab = NULL;
    }
    ;

    m_has_lastRenderedPageBreak = false;

    if (m_lastRenderedPageBreak)
    {
        delete m_lastRenderedPageBreak;
        m_lastRenderedPageBreak = NULL;
    }
    ;

    m_has_cr = true;
    if (!m_cr)
    {
        m_cr = new CT_Empty();
    }
    return m_cr;
}

const CT_Empty& CT_R::ChildGroup_1::get_cr() const
{
    if (m_cr)
    {
        return *m_cr;
    }
    return CT_Empty::default_instance();
}

bool CT_R::ChildGroup_1::has_tab() const
{
    return m_has_tab;
}

CT_Empty* CT_R::ChildGroup_1::mutable_tab()
{

    m_has_br = false;

    if (m_br)
    {
        delete m_br;
        m_br = NULL;
    }
    ;

    m_has_t = false;

    if (m_t)
    {
        delete m_t;
        m_t = NULL;
    }
    ;

    m_has_contentPart = false;

    if (m_contentPart)
    {
        delete m_contentPart;
        m_contentPart = NULL;
    }
    ;

    m_has_delText = false;

    if (m_delText)
    {
        delete m_delText;
        m_delText = NULL;
    }
    ;

    m_has_instrText = false;

    if (m_instrText)
    {
        delete m_instrText;
        m_instrText = NULL;
    }
    ;

    m_has_delInstrText = false;

    if (m_delInstrText)
    {
        delete m_delInstrText;
        m_delInstrText = NULL;
    }
    ;

    m_has_noBreakHyphen = false;

    if (m_noBreakHyphen)
    {
        delete m_noBreakHyphen;
        m_noBreakHyphen = NULL;
    }
    ;

    m_has_softHyphen = false;

    if (m_softHyphen)
    {
        delete m_softHyphen;
        m_softHyphen = NULL;
    }
    ;

    m_has_dayShort = false;

    if (m_dayShort)
    {
        delete m_dayShort;
        m_dayShort = NULL;
    }
    ;

    m_has_monthShort = false;

    if (m_monthShort)
    {
        delete m_monthShort;
        m_monthShort = NULL;
    }
    ;

    m_has_yearShort = false;

    if (m_yearShort)
    {
        delete m_yearShort;
        m_yearShort = NULL;
    }
    ;

    m_has_dayLong = false;

    if (m_dayLong)
    {
        delete m_dayLong;
        m_dayLong = NULL;
    }
    ;

    m_has_monthLong = false;

    if (m_monthLong)
    {
        delete m_monthLong;
        m_monthLong = NULL;
    }
    ;

    m_has_yearLong = false;

    if (m_yearLong)
    {
        delete m_yearLong;
        m_yearLong = NULL;
    }
    ;

    m_has_annotationRef = false;

    if (m_annotationRef)
    {
        delete m_annotationRef;
        m_annotationRef = NULL;
    }
    ;

    m_has_footnoteRef = false;

    if (m_footnoteRef)
    {
        delete m_footnoteRef;
        m_footnoteRef = NULL;
    }
    ;

    m_has_endnoteRef = false;

    if (m_endnoteRef)
    {
        delete m_endnoteRef;
        m_endnoteRef = NULL;
    }
    ;

    m_has_separator = false;

    if (m_separator)
    {
        delete m_separator;
        m_separator = NULL;
    }
    ;

    m_has_continuationSeparator = false;

    if (m_continuationSeparator)
    {
        delete m_continuationSeparator;
        m_continuationSeparator = NULL;
    }
    ;

    m_has_sym = false;

    if (m_sym)
    {
        delete m_sym;
        m_sym = NULL;
    }
    ;

    m_has_pgNum = false;

    if (m_pgNum)
    {
        delete m_pgNum;
        m_pgNum = NULL;
    }
    ;

    m_has_cr = false;

    if (m_cr)
    {
        delete m_cr;
        m_cr = NULL;
    }
    ;

    m_has_object = false;

    if (m_object)
    {
        delete m_object;
        m_object = NULL;
    }
    ;

    m_has_pict = false;

    if (m_pict)
    {
        delete m_pict;
        m_pict = NULL;
    }
    ;

    m_has_fldChar = false;

    if (m_fldChar)
    {
        delete m_fldChar;
        m_fldChar = NULL;
    }
    ;

    m_has_ruby = false;

    if (m_ruby)
    {
        delete m_ruby;
        m_ruby = NULL;
    }
    ;

    m_has_footnoteReference = false;

    if (m_footnoteReference)
    {
        delete m_footnoteReference;
        m_footnoteReference = NULL;
    }
    ;

    m_has_endnoteReference = false;

    if (m_endnoteReference)
    {
        delete m_endnoteReference;
        m_endnoteReference = NULL;
    }
    ;

    m_has_commentReference = false;

    if (m_commentReference)
    {
        delete m_commentReference;
        m_commentReference = NULL;
    }
    ;

    m_has_drawing = false;

    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;

    m_has_ptab = false;

    if (m_ptab)
    {
        delete m_ptab;
        m_ptab = NULL;
    }
    ;

    m_has_lastRenderedPageBreak = false;

    if (m_lastRenderedPageBreak)
    {
        delete m_lastRenderedPageBreak;
        m_lastRenderedPageBreak = NULL;
    }
    ;

    m_has_tab = true;
    if (!m_tab)
    {
        m_tab = new CT_Empty();
    }
    return m_tab;
}

const CT_Empty& CT_R::ChildGroup_1::get_tab() const
{
    if (m_tab)
    {
        return *m_tab;
    }
    return CT_Empty::default_instance();
}

bool CT_R::ChildGroup_1::has_object() const
{
    return m_has_object;
}

CT_Object* CT_R::ChildGroup_1::mutable_object()
{

    m_has_br = false;

    if (m_br)
    {
        delete m_br;
        m_br = NULL;
    }
    ;

    m_has_t = false;

    if (m_t)
    {
        delete m_t;
        m_t = NULL;
    }
    ;

    m_has_contentPart = false;

    if (m_contentPart)
    {
        delete m_contentPart;
        m_contentPart = NULL;
    }
    ;

    m_has_delText = false;

    if (m_delText)
    {
        delete m_delText;
        m_delText = NULL;
    }
    ;

    m_has_instrText = false;

    if (m_instrText)
    {
        delete m_instrText;
        m_instrText = NULL;
    }
    ;

    m_has_delInstrText = false;

    if (m_delInstrText)
    {
        delete m_delInstrText;
        m_delInstrText = NULL;
    }
    ;

    m_has_noBreakHyphen = false;

    if (m_noBreakHyphen)
    {
        delete m_noBreakHyphen;
        m_noBreakHyphen = NULL;
    }
    ;

    m_has_softHyphen = false;

    if (m_softHyphen)
    {
        delete m_softHyphen;
        m_softHyphen = NULL;
    }
    ;

    m_has_dayShort = false;

    if (m_dayShort)
    {
        delete m_dayShort;
        m_dayShort = NULL;
    }
    ;

    m_has_monthShort = false;

    if (m_monthShort)
    {
        delete m_monthShort;
        m_monthShort = NULL;
    }
    ;

    m_has_yearShort = false;

    if (m_yearShort)
    {
        delete m_yearShort;
        m_yearShort = NULL;
    }
    ;

    m_has_dayLong = false;

    if (m_dayLong)
    {
        delete m_dayLong;
        m_dayLong = NULL;
    }
    ;

    m_has_monthLong = false;

    if (m_monthLong)
    {
        delete m_monthLong;
        m_monthLong = NULL;
    }
    ;

    m_has_yearLong = false;

    if (m_yearLong)
    {
        delete m_yearLong;
        m_yearLong = NULL;
    }
    ;

    m_has_annotationRef = false;

    if (m_annotationRef)
    {
        delete m_annotationRef;
        m_annotationRef = NULL;
    }
    ;

    m_has_footnoteRef = false;

    if (m_footnoteRef)
    {
        delete m_footnoteRef;
        m_footnoteRef = NULL;
    }
    ;

    m_has_endnoteRef = false;

    if (m_endnoteRef)
    {
        delete m_endnoteRef;
        m_endnoteRef = NULL;
    }
    ;

    m_has_separator = false;

    if (m_separator)
    {
        delete m_separator;
        m_separator = NULL;
    }
    ;

    m_has_continuationSeparator = false;

    if (m_continuationSeparator)
    {
        delete m_continuationSeparator;
        m_continuationSeparator = NULL;
    }
    ;

    m_has_sym = false;

    if (m_sym)
    {
        delete m_sym;
        m_sym = NULL;
    }
    ;

    m_has_pgNum = false;

    if (m_pgNum)
    {
        delete m_pgNum;
        m_pgNum = NULL;
    }
    ;

    m_has_cr = false;

    if (m_cr)
    {
        delete m_cr;
        m_cr = NULL;
    }
    ;

    m_has_tab = false;

    if (m_tab)
    {
        delete m_tab;
        m_tab = NULL;
    }
    ;

    m_has_pict = false;

    if (m_pict)
    {
        delete m_pict;
        m_pict = NULL;
    }
    ;

    m_has_fldChar = false;

    if (m_fldChar)
    {
        delete m_fldChar;
        m_fldChar = NULL;
    }
    ;

    m_has_ruby = false;

    if (m_ruby)
    {
        delete m_ruby;
        m_ruby = NULL;
    }
    ;

    m_has_footnoteReference = false;

    if (m_footnoteReference)
    {
        delete m_footnoteReference;
        m_footnoteReference = NULL;
    }
    ;

    m_has_endnoteReference = false;

    if (m_endnoteReference)
    {
        delete m_endnoteReference;
        m_endnoteReference = NULL;
    }
    ;

    m_has_commentReference = false;

    if (m_commentReference)
    {
        delete m_commentReference;
        m_commentReference = NULL;
    }
    ;

    m_has_drawing = false;

    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;

    m_has_ptab = false;

    if (m_ptab)
    {
        delete m_ptab;
        m_ptab = NULL;
    }
    ;

    m_has_lastRenderedPageBreak = false;

    if (m_lastRenderedPageBreak)
    {
        delete m_lastRenderedPageBreak;
        m_lastRenderedPageBreak = NULL;
    }
    ;

    m_has_object = true;
    if (!m_object)
    {
        m_object = new CT_Object();
    }
    return m_object;
}

const CT_Object& CT_R::ChildGroup_1::get_object() const
{
    if (m_object)
    {
        return *m_object;
    }
    return CT_Object::default_instance();
}

bool CT_R::ChildGroup_1::has_pict() const
{
    return m_has_pict;
}

CT_Picture* CT_R::ChildGroup_1::mutable_pict()
{

    m_has_br = false;

    if (m_br)
    {
        delete m_br;
        m_br = NULL;
    }
    ;

    m_has_t = false;

    if (m_t)
    {
        delete m_t;
        m_t = NULL;
    }
    ;

    m_has_contentPart = false;

    if (m_contentPart)
    {
        delete m_contentPart;
        m_contentPart = NULL;
    }
    ;

    m_has_delText = false;

    if (m_delText)
    {
        delete m_delText;
        m_delText = NULL;
    }
    ;

    m_has_instrText = false;

    if (m_instrText)
    {
        delete m_instrText;
        m_instrText = NULL;
    }
    ;

    m_has_delInstrText = false;

    if (m_delInstrText)
    {
        delete m_delInstrText;
        m_delInstrText = NULL;
    }
    ;

    m_has_noBreakHyphen = false;

    if (m_noBreakHyphen)
    {
        delete m_noBreakHyphen;
        m_noBreakHyphen = NULL;
    }
    ;

    m_has_softHyphen = false;

    if (m_softHyphen)
    {
        delete m_softHyphen;
        m_softHyphen = NULL;
    }
    ;

    m_has_dayShort = false;

    if (m_dayShort)
    {
        delete m_dayShort;
        m_dayShort = NULL;
    }
    ;

    m_has_monthShort = false;

    if (m_monthShort)
    {
        delete m_monthShort;
        m_monthShort = NULL;
    }
    ;

    m_has_yearShort = false;

    if (m_yearShort)
    {
        delete m_yearShort;
        m_yearShort = NULL;
    }
    ;

    m_has_dayLong = false;

    if (m_dayLong)
    {
        delete m_dayLong;
        m_dayLong = NULL;
    }
    ;

    m_has_monthLong = false;

    if (m_monthLong)
    {
        delete m_monthLong;
        m_monthLong = NULL;
    }
    ;

    m_has_yearLong = false;

    if (m_yearLong)
    {
        delete m_yearLong;
        m_yearLong = NULL;
    }
    ;

    m_has_annotationRef = false;

    if (m_annotationRef)
    {
        delete m_annotationRef;
        m_annotationRef = NULL;
    }
    ;

    m_has_footnoteRef = false;

    if (m_footnoteRef)
    {
        delete m_footnoteRef;
        m_footnoteRef = NULL;
    }
    ;

    m_has_endnoteRef = false;

    if (m_endnoteRef)
    {
        delete m_endnoteRef;
        m_endnoteRef = NULL;
    }
    ;

    m_has_separator = false;

    if (m_separator)
    {
        delete m_separator;
        m_separator = NULL;
    }
    ;

    m_has_continuationSeparator = false;

    if (m_continuationSeparator)
    {
        delete m_continuationSeparator;
        m_continuationSeparator = NULL;
    }
    ;

    m_has_sym = false;

    if (m_sym)
    {
        delete m_sym;
        m_sym = NULL;
    }
    ;

    m_has_pgNum = false;

    if (m_pgNum)
    {
        delete m_pgNum;
        m_pgNum = NULL;
    }
    ;

    m_has_cr = false;

    if (m_cr)
    {
        delete m_cr;
        m_cr = NULL;
    }
    ;

    m_has_tab = false;

    if (m_tab)
    {
        delete m_tab;
        m_tab = NULL;
    }
    ;

    m_has_object = false;

    if (m_object)
    {
        delete m_object;
        m_object = NULL;
    }
    ;

    m_has_fldChar = false;

    if (m_fldChar)
    {
        delete m_fldChar;
        m_fldChar = NULL;
    }
    ;

    m_has_ruby = false;

    if (m_ruby)
    {
        delete m_ruby;
        m_ruby = NULL;
    }
    ;

    m_has_footnoteReference = false;

    if (m_footnoteReference)
    {
        delete m_footnoteReference;
        m_footnoteReference = NULL;
    }
    ;

    m_has_endnoteReference = false;

    if (m_endnoteReference)
    {
        delete m_endnoteReference;
        m_endnoteReference = NULL;
    }
    ;

    m_has_commentReference = false;

    if (m_commentReference)
    {
        delete m_commentReference;
        m_commentReference = NULL;
    }
    ;

    m_has_drawing = false;

    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;

    m_has_ptab = false;

    if (m_ptab)
    {
        delete m_ptab;
        m_ptab = NULL;
    }
    ;

    m_has_lastRenderedPageBreak = false;

    if (m_lastRenderedPageBreak)
    {
        delete m_lastRenderedPageBreak;
        m_lastRenderedPageBreak = NULL;
    }
    ;

    m_has_pict = true;
    if (!m_pict)
    {
        m_pict = new CT_Picture();
    }
    return m_pict;
}

const CT_Picture& CT_R::ChildGroup_1::get_pict() const
{
    if (m_pict)
    {
        return *m_pict;
    }
    return CT_Picture::default_instance();
}

bool CT_R::ChildGroup_1::has_fldChar() const
{
    return m_has_fldChar;
}

CT_FldChar* CT_R::ChildGroup_1::mutable_fldChar()
{

    m_has_br = false;

    if (m_br)
    {
        delete m_br;
        m_br = NULL;
    }
    ;

    m_has_t = false;

    if (m_t)
    {
        delete m_t;
        m_t = NULL;
    }
    ;

    m_has_contentPart = false;

    if (m_contentPart)
    {
        delete m_contentPart;
        m_contentPart = NULL;
    }
    ;

    m_has_delText = false;

    if (m_delText)
    {
        delete m_delText;
        m_delText = NULL;
    }
    ;

    m_has_instrText = false;

    if (m_instrText)
    {
        delete m_instrText;
        m_instrText = NULL;
    }
    ;

    m_has_delInstrText = false;

    if (m_delInstrText)
    {
        delete m_delInstrText;
        m_delInstrText = NULL;
    }
    ;

    m_has_noBreakHyphen = false;

    if (m_noBreakHyphen)
    {
        delete m_noBreakHyphen;
        m_noBreakHyphen = NULL;
    }
    ;

    m_has_softHyphen = false;

    if (m_softHyphen)
    {
        delete m_softHyphen;
        m_softHyphen = NULL;
    }
    ;

    m_has_dayShort = false;

    if (m_dayShort)
    {
        delete m_dayShort;
        m_dayShort = NULL;
    }
    ;

    m_has_monthShort = false;

    if (m_monthShort)
    {
        delete m_monthShort;
        m_monthShort = NULL;
    }
    ;

    m_has_yearShort = false;

    if (m_yearShort)
    {
        delete m_yearShort;
        m_yearShort = NULL;
    }
    ;

    m_has_dayLong = false;

    if (m_dayLong)
    {
        delete m_dayLong;
        m_dayLong = NULL;
    }
    ;

    m_has_monthLong = false;

    if (m_monthLong)
    {
        delete m_monthLong;
        m_monthLong = NULL;
    }
    ;

    m_has_yearLong = false;

    if (m_yearLong)
    {
        delete m_yearLong;
        m_yearLong = NULL;
    }
    ;

    m_has_annotationRef = false;

    if (m_annotationRef)
    {
        delete m_annotationRef;
        m_annotationRef = NULL;
    }
    ;

    m_has_footnoteRef = false;

    if (m_footnoteRef)
    {
        delete m_footnoteRef;
        m_footnoteRef = NULL;
    }
    ;

    m_has_endnoteRef = false;

    if (m_endnoteRef)
    {
        delete m_endnoteRef;
        m_endnoteRef = NULL;
    }
    ;

    m_has_separator = false;

    if (m_separator)
    {
        delete m_separator;
        m_separator = NULL;
    }
    ;

    m_has_continuationSeparator = false;

    if (m_continuationSeparator)
    {
        delete m_continuationSeparator;
        m_continuationSeparator = NULL;
    }
    ;

    m_has_sym = false;

    if (m_sym)
    {
        delete m_sym;
        m_sym = NULL;
    }
    ;

    m_has_pgNum = false;

    if (m_pgNum)
    {
        delete m_pgNum;
        m_pgNum = NULL;
    }
    ;

    m_has_cr = false;

    if (m_cr)
    {
        delete m_cr;
        m_cr = NULL;
    }
    ;

    m_has_tab = false;

    if (m_tab)
    {
        delete m_tab;
        m_tab = NULL;
    }
    ;

    m_has_object = false;

    if (m_object)
    {
        delete m_object;
        m_object = NULL;
    }
    ;

    m_has_pict = false;

    if (m_pict)
    {
        delete m_pict;
        m_pict = NULL;
    }
    ;

    m_has_ruby = false;

    if (m_ruby)
    {
        delete m_ruby;
        m_ruby = NULL;
    }
    ;

    m_has_footnoteReference = false;

    if (m_footnoteReference)
    {
        delete m_footnoteReference;
        m_footnoteReference = NULL;
    }
    ;

    m_has_endnoteReference = false;

    if (m_endnoteReference)
    {
        delete m_endnoteReference;
        m_endnoteReference = NULL;
    }
    ;

    m_has_commentReference = false;

    if (m_commentReference)
    {
        delete m_commentReference;
        m_commentReference = NULL;
    }
    ;

    m_has_drawing = false;

    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;

    m_has_ptab = false;

    if (m_ptab)
    {
        delete m_ptab;
        m_ptab = NULL;
    }
    ;

    m_has_lastRenderedPageBreak = false;

    if (m_lastRenderedPageBreak)
    {
        delete m_lastRenderedPageBreak;
        m_lastRenderedPageBreak = NULL;
    }
    ;

    m_has_fldChar = true;
    if (!m_fldChar)
    {
        m_fldChar = new CT_FldChar();
    }
    return m_fldChar;
}

const CT_FldChar& CT_R::ChildGroup_1::get_fldChar() const
{
    if (m_fldChar)
    {
        return *m_fldChar;
    }
    return CT_FldChar::default_instance();
}

bool CT_R::ChildGroup_1::has_ruby() const
{
    return m_has_ruby;
}

CT_Ruby* CT_R::ChildGroup_1::mutable_ruby()
{

    m_has_br = false;

    if (m_br)
    {
        delete m_br;
        m_br = NULL;
    }
    ;

    m_has_t = false;

    if (m_t)
    {
        delete m_t;
        m_t = NULL;
    }
    ;

    m_has_contentPart = false;

    if (m_contentPart)
    {
        delete m_contentPart;
        m_contentPart = NULL;
    }
    ;

    m_has_delText = false;

    if (m_delText)
    {
        delete m_delText;
        m_delText = NULL;
    }
    ;

    m_has_instrText = false;

    if (m_instrText)
    {
        delete m_instrText;
        m_instrText = NULL;
    }
    ;

    m_has_delInstrText = false;

    if (m_delInstrText)
    {
        delete m_delInstrText;
        m_delInstrText = NULL;
    }
    ;

    m_has_noBreakHyphen = false;

    if (m_noBreakHyphen)
    {
        delete m_noBreakHyphen;
        m_noBreakHyphen = NULL;
    }
    ;

    m_has_softHyphen = false;

    if (m_softHyphen)
    {
        delete m_softHyphen;
        m_softHyphen = NULL;
    }
    ;

    m_has_dayShort = false;

    if (m_dayShort)
    {
        delete m_dayShort;
        m_dayShort = NULL;
    }
    ;

    m_has_monthShort = false;

    if (m_monthShort)
    {
        delete m_monthShort;
        m_monthShort = NULL;
    }
    ;

    m_has_yearShort = false;

    if (m_yearShort)
    {
        delete m_yearShort;
        m_yearShort = NULL;
    }
    ;

    m_has_dayLong = false;

    if (m_dayLong)
    {
        delete m_dayLong;
        m_dayLong = NULL;
    }
    ;

    m_has_monthLong = false;

    if (m_monthLong)
    {
        delete m_monthLong;
        m_monthLong = NULL;
    }
    ;

    m_has_yearLong = false;

    if (m_yearLong)
    {
        delete m_yearLong;
        m_yearLong = NULL;
    }
    ;

    m_has_annotationRef = false;

    if (m_annotationRef)
    {
        delete m_annotationRef;
        m_annotationRef = NULL;
    }
    ;

    m_has_footnoteRef = false;

    if (m_footnoteRef)
    {
        delete m_footnoteRef;
        m_footnoteRef = NULL;
    }
    ;

    m_has_endnoteRef = false;

    if (m_endnoteRef)
    {
        delete m_endnoteRef;
        m_endnoteRef = NULL;
    }
    ;

    m_has_separator = false;

    if (m_separator)
    {
        delete m_separator;
        m_separator = NULL;
    }
    ;

    m_has_continuationSeparator = false;

    if (m_continuationSeparator)
    {
        delete m_continuationSeparator;
        m_continuationSeparator = NULL;
    }
    ;

    m_has_sym = false;

    if (m_sym)
    {
        delete m_sym;
        m_sym = NULL;
    }
    ;

    m_has_pgNum = false;

    if (m_pgNum)
    {
        delete m_pgNum;
        m_pgNum = NULL;
    }
    ;

    m_has_cr = false;

    if (m_cr)
    {
        delete m_cr;
        m_cr = NULL;
    }
    ;

    m_has_tab = false;

    if (m_tab)
    {
        delete m_tab;
        m_tab = NULL;
    }
    ;

    m_has_object = false;

    if (m_object)
    {
        delete m_object;
        m_object = NULL;
    }
    ;

    m_has_pict = false;

    if (m_pict)
    {
        delete m_pict;
        m_pict = NULL;
    }
    ;

    m_has_fldChar = false;

    if (m_fldChar)
    {
        delete m_fldChar;
        m_fldChar = NULL;
    }
    ;

    m_has_footnoteReference = false;

    if (m_footnoteReference)
    {
        delete m_footnoteReference;
        m_footnoteReference = NULL;
    }
    ;

    m_has_endnoteReference = false;

    if (m_endnoteReference)
    {
        delete m_endnoteReference;
        m_endnoteReference = NULL;
    }
    ;

    m_has_commentReference = false;

    if (m_commentReference)
    {
        delete m_commentReference;
        m_commentReference = NULL;
    }
    ;

    m_has_drawing = false;

    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;

    m_has_ptab = false;

    if (m_ptab)
    {
        delete m_ptab;
        m_ptab = NULL;
    }
    ;

    m_has_lastRenderedPageBreak = false;

    if (m_lastRenderedPageBreak)
    {
        delete m_lastRenderedPageBreak;
        m_lastRenderedPageBreak = NULL;
    }
    ;

    m_has_ruby = true;
    if (!m_ruby)
    {
        m_ruby = new CT_Ruby();
    }
    return m_ruby;
}

const CT_Ruby& CT_R::ChildGroup_1::get_ruby() const
{
    if (m_ruby)
    {
        return *m_ruby;
    }
    return CT_Ruby::default_instance();
}

bool CT_R::ChildGroup_1::has_footnoteReference() const
{
    return m_has_footnoteReference;
}

CT_FtnEdnRef* CT_R::ChildGroup_1::mutable_footnoteReference()
{

    m_has_br = false;

    if (m_br)
    {
        delete m_br;
        m_br = NULL;
    }
    ;

    m_has_t = false;

    if (m_t)
    {
        delete m_t;
        m_t = NULL;
    }
    ;

    m_has_contentPart = false;

    if (m_contentPart)
    {
        delete m_contentPart;
        m_contentPart = NULL;
    }
    ;

    m_has_delText = false;

    if (m_delText)
    {
        delete m_delText;
        m_delText = NULL;
    }
    ;

    m_has_instrText = false;

    if (m_instrText)
    {
        delete m_instrText;
        m_instrText = NULL;
    }
    ;

    m_has_delInstrText = false;

    if (m_delInstrText)
    {
        delete m_delInstrText;
        m_delInstrText = NULL;
    }
    ;

    m_has_noBreakHyphen = false;

    if (m_noBreakHyphen)
    {
        delete m_noBreakHyphen;
        m_noBreakHyphen = NULL;
    }
    ;

    m_has_softHyphen = false;

    if (m_softHyphen)
    {
        delete m_softHyphen;
        m_softHyphen = NULL;
    }
    ;

    m_has_dayShort = false;

    if (m_dayShort)
    {
        delete m_dayShort;
        m_dayShort = NULL;
    }
    ;

    m_has_monthShort = false;

    if (m_monthShort)
    {
        delete m_monthShort;
        m_monthShort = NULL;
    }
    ;

    m_has_yearShort = false;

    if (m_yearShort)
    {
        delete m_yearShort;
        m_yearShort = NULL;
    }
    ;

    m_has_dayLong = false;

    if (m_dayLong)
    {
        delete m_dayLong;
        m_dayLong = NULL;
    }
    ;

    m_has_monthLong = false;

    if (m_monthLong)
    {
        delete m_monthLong;
        m_monthLong = NULL;
    }
    ;

    m_has_yearLong = false;

    if (m_yearLong)
    {
        delete m_yearLong;
        m_yearLong = NULL;
    }
    ;

    m_has_annotationRef = false;

    if (m_annotationRef)
    {
        delete m_annotationRef;
        m_annotationRef = NULL;
    }
    ;

    m_has_footnoteRef = false;

    if (m_footnoteRef)
    {
        delete m_footnoteRef;
        m_footnoteRef = NULL;
    }
    ;

    m_has_endnoteRef = false;

    if (m_endnoteRef)
    {
        delete m_endnoteRef;
        m_endnoteRef = NULL;
    }
    ;

    m_has_separator = false;

    if (m_separator)
    {
        delete m_separator;
        m_separator = NULL;
    }
    ;

    m_has_continuationSeparator = false;

    if (m_continuationSeparator)
    {
        delete m_continuationSeparator;
        m_continuationSeparator = NULL;
    }
    ;

    m_has_sym = false;

    if (m_sym)
    {
        delete m_sym;
        m_sym = NULL;
    }
    ;

    m_has_pgNum = false;

    if (m_pgNum)
    {
        delete m_pgNum;
        m_pgNum = NULL;
    }
    ;

    m_has_cr = false;

    if (m_cr)
    {
        delete m_cr;
        m_cr = NULL;
    }
    ;

    m_has_tab = false;

    if (m_tab)
    {
        delete m_tab;
        m_tab = NULL;
    }
    ;

    m_has_object = false;

    if (m_object)
    {
        delete m_object;
        m_object = NULL;
    }
    ;

    m_has_pict = false;

    if (m_pict)
    {
        delete m_pict;
        m_pict = NULL;
    }
    ;

    m_has_fldChar = false;

    if (m_fldChar)
    {
        delete m_fldChar;
        m_fldChar = NULL;
    }
    ;

    m_has_ruby = false;

    if (m_ruby)
    {
        delete m_ruby;
        m_ruby = NULL;
    }
    ;

    m_has_endnoteReference = false;

    if (m_endnoteReference)
    {
        delete m_endnoteReference;
        m_endnoteReference = NULL;
    }
    ;

    m_has_commentReference = false;

    if (m_commentReference)
    {
        delete m_commentReference;
        m_commentReference = NULL;
    }
    ;

    m_has_drawing = false;

    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;

    m_has_ptab = false;

    if (m_ptab)
    {
        delete m_ptab;
        m_ptab = NULL;
    }
    ;

    m_has_lastRenderedPageBreak = false;

    if (m_lastRenderedPageBreak)
    {
        delete m_lastRenderedPageBreak;
        m_lastRenderedPageBreak = NULL;
    }
    ;

    m_has_footnoteReference = true;
    if (!m_footnoteReference)
    {
        m_footnoteReference = new CT_FtnEdnRef();
    }
    return m_footnoteReference;
}

const CT_FtnEdnRef& CT_R::ChildGroup_1::get_footnoteReference() const
{
    if (m_footnoteReference)
    {
        return *m_footnoteReference;
    }
    return CT_FtnEdnRef::default_instance();
}

bool CT_R::ChildGroup_1::has_endnoteReference() const
{
    return m_has_endnoteReference;
}

CT_FtnEdnRef* CT_R::ChildGroup_1::mutable_endnoteReference()
{

    m_has_br = false;

    if (m_br)
    {
        delete m_br;
        m_br = NULL;
    }
    ;

    m_has_t = false;

    if (m_t)
    {
        delete m_t;
        m_t = NULL;
    }
    ;

    m_has_contentPart = false;

    if (m_contentPart)
    {
        delete m_contentPart;
        m_contentPart = NULL;
    }
    ;

    m_has_delText = false;

    if (m_delText)
    {
        delete m_delText;
        m_delText = NULL;
    }
    ;

    m_has_instrText = false;

    if (m_instrText)
    {
        delete m_instrText;
        m_instrText = NULL;
    }
    ;

    m_has_delInstrText = false;

    if (m_delInstrText)
    {
        delete m_delInstrText;
        m_delInstrText = NULL;
    }
    ;

    m_has_noBreakHyphen = false;

    if (m_noBreakHyphen)
    {
        delete m_noBreakHyphen;
        m_noBreakHyphen = NULL;
    }
    ;

    m_has_softHyphen = false;

    if (m_softHyphen)
    {
        delete m_softHyphen;
        m_softHyphen = NULL;
    }
    ;

    m_has_dayShort = false;

    if (m_dayShort)
    {
        delete m_dayShort;
        m_dayShort = NULL;
    }
    ;

    m_has_monthShort = false;

    if (m_monthShort)
    {
        delete m_monthShort;
        m_monthShort = NULL;
    }
    ;

    m_has_yearShort = false;

    if (m_yearShort)
    {
        delete m_yearShort;
        m_yearShort = NULL;
    }
    ;

    m_has_dayLong = false;

    if (m_dayLong)
    {
        delete m_dayLong;
        m_dayLong = NULL;
    }
    ;

    m_has_monthLong = false;

    if (m_monthLong)
    {
        delete m_monthLong;
        m_monthLong = NULL;
    }
    ;

    m_has_yearLong = false;

    if (m_yearLong)
    {
        delete m_yearLong;
        m_yearLong = NULL;
    }
    ;

    m_has_annotationRef = false;

    if (m_annotationRef)
    {
        delete m_annotationRef;
        m_annotationRef = NULL;
    }
    ;

    m_has_footnoteRef = false;

    if (m_footnoteRef)
    {
        delete m_footnoteRef;
        m_footnoteRef = NULL;
    }
    ;

    m_has_endnoteRef = false;

    if (m_endnoteRef)
    {
        delete m_endnoteRef;
        m_endnoteRef = NULL;
    }
    ;

    m_has_separator = false;

    if (m_separator)
    {
        delete m_separator;
        m_separator = NULL;
    }
    ;

    m_has_continuationSeparator = false;

    if (m_continuationSeparator)
    {
        delete m_continuationSeparator;
        m_continuationSeparator = NULL;
    }
    ;

    m_has_sym = false;

    if (m_sym)
    {
        delete m_sym;
        m_sym = NULL;
    }
    ;

    m_has_pgNum = false;

    if (m_pgNum)
    {
        delete m_pgNum;
        m_pgNum = NULL;
    }
    ;

    m_has_cr = false;

    if (m_cr)
    {
        delete m_cr;
        m_cr = NULL;
    }
    ;

    m_has_tab = false;

    if (m_tab)
    {
        delete m_tab;
        m_tab = NULL;
    }
    ;

    m_has_object = false;

    if (m_object)
    {
        delete m_object;
        m_object = NULL;
    }
    ;

    m_has_pict = false;

    if (m_pict)
    {
        delete m_pict;
        m_pict = NULL;
    }
    ;

    m_has_fldChar = false;

    if (m_fldChar)
    {
        delete m_fldChar;
        m_fldChar = NULL;
    }
    ;

    m_has_ruby = false;

    if (m_ruby)
    {
        delete m_ruby;
        m_ruby = NULL;
    }
    ;

    m_has_footnoteReference = false;

    if (m_footnoteReference)
    {
        delete m_footnoteReference;
        m_footnoteReference = NULL;
    }
    ;

    m_has_commentReference = false;

    if (m_commentReference)
    {
        delete m_commentReference;
        m_commentReference = NULL;
    }
    ;

    m_has_drawing = false;

    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;

    m_has_ptab = false;

    if (m_ptab)
    {
        delete m_ptab;
        m_ptab = NULL;
    }
    ;

    m_has_lastRenderedPageBreak = false;

    if (m_lastRenderedPageBreak)
    {
        delete m_lastRenderedPageBreak;
        m_lastRenderedPageBreak = NULL;
    }
    ;

    m_has_endnoteReference = true;
    if (!m_endnoteReference)
    {
        m_endnoteReference = new CT_FtnEdnRef();
    }
    return m_endnoteReference;
}

const CT_FtnEdnRef& CT_R::ChildGroup_1::get_endnoteReference() const
{
    if (m_endnoteReference)
    {
        return *m_endnoteReference;
    }
    return CT_FtnEdnRef::default_instance();
}

bool CT_R::ChildGroup_1::has_commentReference() const
{
    return m_has_commentReference;
}

CT_Markup* CT_R::ChildGroup_1::mutable_commentReference()
{

    m_has_br = false;

    if (m_br)
    {
        delete m_br;
        m_br = NULL;
    }
    ;

    m_has_t = false;

    if (m_t)
    {
        delete m_t;
        m_t = NULL;
    }
    ;

    m_has_contentPart = false;

    if (m_contentPart)
    {
        delete m_contentPart;
        m_contentPart = NULL;
    }
    ;

    m_has_delText = false;

    if (m_delText)
    {
        delete m_delText;
        m_delText = NULL;
    }
    ;

    m_has_instrText = false;

    if (m_instrText)
    {
        delete m_instrText;
        m_instrText = NULL;
    }
    ;

    m_has_delInstrText = false;

    if (m_delInstrText)
    {
        delete m_delInstrText;
        m_delInstrText = NULL;
    }
    ;

    m_has_noBreakHyphen = false;

    if (m_noBreakHyphen)
    {
        delete m_noBreakHyphen;
        m_noBreakHyphen = NULL;
    }
    ;

    m_has_softHyphen = false;

    if (m_softHyphen)
    {
        delete m_softHyphen;
        m_softHyphen = NULL;
    }
    ;

    m_has_dayShort = false;

    if (m_dayShort)
    {
        delete m_dayShort;
        m_dayShort = NULL;
    }
    ;

    m_has_monthShort = false;

    if (m_monthShort)
    {
        delete m_monthShort;
        m_monthShort = NULL;
    }
    ;

    m_has_yearShort = false;

    if (m_yearShort)
    {
        delete m_yearShort;
        m_yearShort = NULL;
    }
    ;

    m_has_dayLong = false;

    if (m_dayLong)
    {
        delete m_dayLong;
        m_dayLong = NULL;
    }
    ;

    m_has_monthLong = false;

    if (m_monthLong)
    {
        delete m_monthLong;
        m_monthLong = NULL;
    }
    ;

    m_has_yearLong = false;

    if (m_yearLong)
    {
        delete m_yearLong;
        m_yearLong = NULL;
    }
    ;

    m_has_annotationRef = false;

    if (m_annotationRef)
    {
        delete m_annotationRef;
        m_annotationRef = NULL;
    }
    ;

    m_has_footnoteRef = false;

    if (m_footnoteRef)
    {
        delete m_footnoteRef;
        m_footnoteRef = NULL;
    }
    ;

    m_has_endnoteRef = false;

    if (m_endnoteRef)
    {
        delete m_endnoteRef;
        m_endnoteRef = NULL;
    }
    ;

    m_has_separator = false;

    if (m_separator)
    {
        delete m_separator;
        m_separator = NULL;
    }
    ;

    m_has_continuationSeparator = false;

    if (m_continuationSeparator)
    {
        delete m_continuationSeparator;
        m_continuationSeparator = NULL;
    }
    ;

    m_has_sym = false;

    if (m_sym)
    {
        delete m_sym;
        m_sym = NULL;
    }
    ;

    m_has_pgNum = false;

    if (m_pgNum)
    {
        delete m_pgNum;
        m_pgNum = NULL;
    }
    ;

    m_has_cr = false;

    if (m_cr)
    {
        delete m_cr;
        m_cr = NULL;
    }
    ;

    m_has_tab = false;

    if (m_tab)
    {
        delete m_tab;
        m_tab = NULL;
    }
    ;

    m_has_object = false;

    if (m_object)
    {
        delete m_object;
        m_object = NULL;
    }
    ;

    m_has_pict = false;

    if (m_pict)
    {
        delete m_pict;
        m_pict = NULL;
    }
    ;

    m_has_fldChar = false;

    if (m_fldChar)
    {
        delete m_fldChar;
        m_fldChar = NULL;
    }
    ;

    m_has_ruby = false;

    if (m_ruby)
    {
        delete m_ruby;
        m_ruby = NULL;
    }
    ;

    m_has_footnoteReference = false;

    if (m_footnoteReference)
    {
        delete m_footnoteReference;
        m_footnoteReference = NULL;
    }
    ;

    m_has_endnoteReference = false;

    if (m_endnoteReference)
    {
        delete m_endnoteReference;
        m_endnoteReference = NULL;
    }
    ;

    m_has_drawing = false;

    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;

    m_has_ptab = false;

    if (m_ptab)
    {
        delete m_ptab;
        m_ptab = NULL;
    }
    ;

    m_has_lastRenderedPageBreak = false;

    if (m_lastRenderedPageBreak)
    {
        delete m_lastRenderedPageBreak;
        m_lastRenderedPageBreak = NULL;
    }
    ;

    m_has_commentReference = true;
    if (!m_commentReference)
    {
        m_commentReference = new CT_Markup();
    }
    return m_commentReference;
}

const CT_Markup& CT_R::ChildGroup_1::get_commentReference() const
{
    if (m_commentReference)
    {
        return *m_commentReference;
    }
    return CT_Markup::default_instance();
}

bool CT_R::ChildGroup_1::has_drawing() const
{
    return m_has_drawing;
}

CT_Drawing* CT_R::ChildGroup_1::mutable_drawing()
{

    m_has_br = false;

    if (m_br)
    {
        delete m_br;
        m_br = NULL;
    }
    ;

    m_has_t = false;

    if (m_t)
    {
        delete m_t;
        m_t = NULL;
    }
    ;

    m_has_contentPart = false;

    if (m_contentPart)
    {
        delete m_contentPart;
        m_contentPart = NULL;
    }
    ;

    m_has_delText = false;

    if (m_delText)
    {
        delete m_delText;
        m_delText = NULL;
    }
    ;

    m_has_instrText = false;

    if (m_instrText)
    {
        delete m_instrText;
        m_instrText = NULL;
    }
    ;

    m_has_delInstrText = false;

    if (m_delInstrText)
    {
        delete m_delInstrText;
        m_delInstrText = NULL;
    }
    ;

    m_has_noBreakHyphen = false;

    if (m_noBreakHyphen)
    {
        delete m_noBreakHyphen;
        m_noBreakHyphen = NULL;
    }
    ;

    m_has_softHyphen = false;

    if (m_softHyphen)
    {
        delete m_softHyphen;
        m_softHyphen = NULL;
    }
    ;

    m_has_dayShort = false;

    if (m_dayShort)
    {
        delete m_dayShort;
        m_dayShort = NULL;
    }
    ;

    m_has_monthShort = false;

    if (m_monthShort)
    {
        delete m_monthShort;
        m_monthShort = NULL;
    }
    ;

    m_has_yearShort = false;

    if (m_yearShort)
    {
        delete m_yearShort;
        m_yearShort = NULL;
    }
    ;

    m_has_dayLong = false;

    if (m_dayLong)
    {
        delete m_dayLong;
        m_dayLong = NULL;
    }
    ;

    m_has_monthLong = false;

    if (m_monthLong)
    {
        delete m_monthLong;
        m_monthLong = NULL;
    }
    ;

    m_has_yearLong = false;

    if (m_yearLong)
    {
        delete m_yearLong;
        m_yearLong = NULL;
    }
    ;

    m_has_annotationRef = false;

    if (m_annotationRef)
    {
        delete m_annotationRef;
        m_annotationRef = NULL;
    }
    ;

    m_has_footnoteRef = false;

    if (m_footnoteRef)
    {
        delete m_footnoteRef;
        m_footnoteRef = NULL;
    }
    ;

    m_has_endnoteRef = false;

    if (m_endnoteRef)
    {
        delete m_endnoteRef;
        m_endnoteRef = NULL;
    }
    ;

    m_has_separator = false;

    if (m_separator)
    {
        delete m_separator;
        m_separator = NULL;
    }
    ;

    m_has_continuationSeparator = false;

    if (m_continuationSeparator)
    {
        delete m_continuationSeparator;
        m_continuationSeparator = NULL;
    }
    ;

    m_has_sym = false;

    if (m_sym)
    {
        delete m_sym;
        m_sym = NULL;
    }
    ;

    m_has_pgNum = false;

    if (m_pgNum)
    {
        delete m_pgNum;
        m_pgNum = NULL;
    }
    ;

    m_has_cr = false;

    if (m_cr)
    {
        delete m_cr;
        m_cr = NULL;
    }
    ;

    m_has_tab = false;

    if (m_tab)
    {
        delete m_tab;
        m_tab = NULL;
    }
    ;

    m_has_object = false;

    if (m_object)
    {
        delete m_object;
        m_object = NULL;
    }
    ;

    m_has_pict = false;

    if (m_pict)
    {
        delete m_pict;
        m_pict = NULL;
    }
    ;

    m_has_fldChar = false;

    if (m_fldChar)
    {
        delete m_fldChar;
        m_fldChar = NULL;
    }
    ;

    m_has_ruby = false;

    if (m_ruby)
    {
        delete m_ruby;
        m_ruby = NULL;
    }
    ;

    m_has_footnoteReference = false;

    if (m_footnoteReference)
    {
        delete m_footnoteReference;
        m_footnoteReference = NULL;
    }
    ;

    m_has_endnoteReference = false;

    if (m_endnoteReference)
    {
        delete m_endnoteReference;
        m_endnoteReference = NULL;
    }
    ;

    m_has_commentReference = false;

    if (m_commentReference)
    {
        delete m_commentReference;
        m_commentReference = NULL;
    }
    ;

    m_has_ptab = false;

    if (m_ptab)
    {
        delete m_ptab;
        m_ptab = NULL;
    }
    ;

    m_has_lastRenderedPageBreak = false;

    if (m_lastRenderedPageBreak)
    {
        delete m_lastRenderedPageBreak;
        m_lastRenderedPageBreak = NULL;
    }
    ;

    m_has_drawing = true;
    if (!m_drawing)
    {
        m_drawing = new CT_Drawing();
    }
    return m_drawing;
}

const CT_Drawing& CT_R::ChildGroup_1::get_drawing() const
{
    if (m_drawing)
    {
        return *m_drawing;
    }
    return CT_Drawing::default_instance();
}

bool CT_R::ChildGroup_1::has_ptab() const
{
    return m_has_ptab;
}

CT_PTab* CT_R::ChildGroup_1::mutable_ptab()
{

    m_has_br = false;

    if (m_br)
    {
        delete m_br;
        m_br = NULL;
    }
    ;

    m_has_t = false;

    if (m_t)
    {
        delete m_t;
        m_t = NULL;
    }
    ;

    m_has_contentPart = false;

    if (m_contentPart)
    {
        delete m_contentPart;
        m_contentPart = NULL;
    }
    ;

    m_has_delText = false;

    if (m_delText)
    {
        delete m_delText;
        m_delText = NULL;
    }
    ;

    m_has_instrText = false;

    if (m_instrText)
    {
        delete m_instrText;
        m_instrText = NULL;
    }
    ;

    m_has_delInstrText = false;

    if (m_delInstrText)
    {
        delete m_delInstrText;
        m_delInstrText = NULL;
    }
    ;

    m_has_noBreakHyphen = false;

    if (m_noBreakHyphen)
    {
        delete m_noBreakHyphen;
        m_noBreakHyphen = NULL;
    }
    ;

    m_has_softHyphen = false;

    if (m_softHyphen)
    {
        delete m_softHyphen;
        m_softHyphen = NULL;
    }
    ;

    m_has_dayShort = false;

    if (m_dayShort)
    {
        delete m_dayShort;
        m_dayShort = NULL;
    }
    ;

    m_has_monthShort = false;

    if (m_monthShort)
    {
        delete m_monthShort;
        m_monthShort = NULL;
    }
    ;

    m_has_yearShort = false;

    if (m_yearShort)
    {
        delete m_yearShort;
        m_yearShort = NULL;
    }
    ;

    m_has_dayLong = false;

    if (m_dayLong)
    {
        delete m_dayLong;
        m_dayLong = NULL;
    }
    ;

    m_has_monthLong = false;

    if (m_monthLong)
    {
        delete m_monthLong;
        m_monthLong = NULL;
    }
    ;

    m_has_yearLong = false;

    if (m_yearLong)
    {
        delete m_yearLong;
        m_yearLong = NULL;
    }
    ;

    m_has_annotationRef = false;

    if (m_annotationRef)
    {
        delete m_annotationRef;
        m_annotationRef = NULL;
    }
    ;

    m_has_footnoteRef = false;

    if (m_footnoteRef)
    {
        delete m_footnoteRef;
        m_footnoteRef = NULL;
    }
    ;

    m_has_endnoteRef = false;

    if (m_endnoteRef)
    {
        delete m_endnoteRef;
        m_endnoteRef = NULL;
    }
    ;

    m_has_separator = false;

    if (m_separator)
    {
        delete m_separator;
        m_separator = NULL;
    }
    ;

    m_has_continuationSeparator = false;

    if (m_continuationSeparator)
    {
        delete m_continuationSeparator;
        m_continuationSeparator = NULL;
    }
    ;

    m_has_sym = false;

    if (m_sym)
    {
        delete m_sym;
        m_sym = NULL;
    }
    ;

    m_has_pgNum = false;

    if (m_pgNum)
    {
        delete m_pgNum;
        m_pgNum = NULL;
    }
    ;

    m_has_cr = false;

    if (m_cr)
    {
        delete m_cr;
        m_cr = NULL;
    }
    ;

    m_has_tab = false;

    if (m_tab)
    {
        delete m_tab;
        m_tab = NULL;
    }
    ;

    m_has_object = false;

    if (m_object)
    {
        delete m_object;
        m_object = NULL;
    }
    ;

    m_has_pict = false;

    if (m_pict)
    {
        delete m_pict;
        m_pict = NULL;
    }
    ;

    m_has_fldChar = false;

    if (m_fldChar)
    {
        delete m_fldChar;
        m_fldChar = NULL;
    }
    ;

    m_has_ruby = false;

    if (m_ruby)
    {
        delete m_ruby;
        m_ruby = NULL;
    }
    ;

    m_has_footnoteReference = false;

    if (m_footnoteReference)
    {
        delete m_footnoteReference;
        m_footnoteReference = NULL;
    }
    ;

    m_has_endnoteReference = false;

    if (m_endnoteReference)
    {
        delete m_endnoteReference;
        m_endnoteReference = NULL;
    }
    ;

    m_has_commentReference = false;

    if (m_commentReference)
    {
        delete m_commentReference;
        m_commentReference = NULL;
    }
    ;

    m_has_drawing = false;

    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;

    m_has_lastRenderedPageBreak = false;

    if (m_lastRenderedPageBreak)
    {
        delete m_lastRenderedPageBreak;
        m_lastRenderedPageBreak = NULL;
    }
    ;

    m_has_ptab = true;
    if (!m_ptab)
    {
        m_ptab = new CT_PTab();
    }
    return m_ptab;
}

const CT_PTab& CT_R::ChildGroup_1::get_ptab() const
{
    if (m_ptab)
    {
        return *m_ptab;
    }
    return CT_PTab::default_instance();
}

bool CT_R::ChildGroup_1::has_lastRenderedPageBreak() const
{
    return m_has_lastRenderedPageBreak;
}

CT_Empty* CT_R::ChildGroup_1::mutable_lastRenderedPageBreak()
{

    m_has_br = false;

    if (m_br)
    {
        delete m_br;
        m_br = NULL;
    }
    ;

    m_has_t = false;

    if (m_t)
    {
        delete m_t;
        m_t = NULL;
    }
    ;

    m_has_contentPart = false;

    if (m_contentPart)
    {
        delete m_contentPart;
        m_contentPart = NULL;
    }
    ;

    m_has_delText = false;

    if (m_delText)
    {
        delete m_delText;
        m_delText = NULL;
    }
    ;

    m_has_instrText = false;

    if (m_instrText)
    {
        delete m_instrText;
        m_instrText = NULL;
    }
    ;

    m_has_delInstrText = false;

    if (m_delInstrText)
    {
        delete m_delInstrText;
        m_delInstrText = NULL;
    }
    ;

    m_has_noBreakHyphen = false;

    if (m_noBreakHyphen)
    {
        delete m_noBreakHyphen;
        m_noBreakHyphen = NULL;
    }
    ;

    m_has_softHyphen = false;

    if (m_softHyphen)
    {
        delete m_softHyphen;
        m_softHyphen = NULL;
    }
    ;

    m_has_dayShort = false;

    if (m_dayShort)
    {
        delete m_dayShort;
        m_dayShort = NULL;
    }
    ;

    m_has_monthShort = false;

    if (m_monthShort)
    {
        delete m_monthShort;
        m_monthShort = NULL;
    }
    ;

    m_has_yearShort = false;

    if (m_yearShort)
    {
        delete m_yearShort;
        m_yearShort = NULL;
    }
    ;

    m_has_dayLong = false;

    if (m_dayLong)
    {
        delete m_dayLong;
        m_dayLong = NULL;
    }
    ;

    m_has_monthLong = false;

    if (m_monthLong)
    {
        delete m_monthLong;
        m_monthLong = NULL;
    }
    ;

    m_has_yearLong = false;

    if (m_yearLong)
    {
        delete m_yearLong;
        m_yearLong = NULL;
    }
    ;

    m_has_annotationRef = false;

    if (m_annotationRef)
    {
        delete m_annotationRef;
        m_annotationRef = NULL;
    }
    ;

    m_has_footnoteRef = false;

    if (m_footnoteRef)
    {
        delete m_footnoteRef;
        m_footnoteRef = NULL;
    }
    ;

    m_has_endnoteRef = false;

    if (m_endnoteRef)
    {
        delete m_endnoteRef;
        m_endnoteRef = NULL;
    }
    ;

    m_has_separator = false;

    if (m_separator)
    {
        delete m_separator;
        m_separator = NULL;
    }
    ;

    m_has_continuationSeparator = false;

    if (m_continuationSeparator)
    {
        delete m_continuationSeparator;
        m_continuationSeparator = NULL;
    }
    ;

    m_has_sym = false;

    if (m_sym)
    {
        delete m_sym;
        m_sym = NULL;
    }
    ;

    m_has_pgNum = false;

    if (m_pgNum)
    {
        delete m_pgNum;
        m_pgNum = NULL;
    }
    ;

    m_has_cr = false;

    if (m_cr)
    {
        delete m_cr;
        m_cr = NULL;
    }
    ;

    m_has_tab = false;

    if (m_tab)
    {
        delete m_tab;
        m_tab = NULL;
    }
    ;

    m_has_object = false;

    if (m_object)
    {
        delete m_object;
        m_object = NULL;
    }
    ;

    m_has_pict = false;

    if (m_pict)
    {
        delete m_pict;
        m_pict = NULL;
    }
    ;

    m_has_fldChar = false;

    if (m_fldChar)
    {
        delete m_fldChar;
        m_fldChar = NULL;
    }
    ;

    m_has_ruby = false;

    if (m_ruby)
    {
        delete m_ruby;
        m_ruby = NULL;
    }
    ;

    m_has_footnoteReference = false;

    if (m_footnoteReference)
    {
        delete m_footnoteReference;
        m_footnoteReference = NULL;
    }
    ;

    m_has_endnoteReference = false;

    if (m_endnoteReference)
    {
        delete m_endnoteReference;
        m_endnoteReference = NULL;
    }
    ;

    m_has_commentReference = false;

    if (m_commentReference)
    {
        delete m_commentReference;
        m_commentReference = NULL;
    }
    ;

    m_has_drawing = false;

    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;

    m_has_ptab = false;

    if (m_ptab)
    {
        delete m_ptab;
        m_ptab = NULL;
    }
    ;

    m_has_lastRenderedPageBreak = true;
    if (!m_lastRenderedPageBreak)
    {
        m_lastRenderedPageBreak = new CT_Empty();
    }
    return m_lastRenderedPageBreak;
}

const CT_Empty& CT_R::ChildGroup_1::get_lastRenderedPageBreak() const
{
    if (m_lastRenderedPageBreak)
    {
        return *m_lastRenderedPageBreak;
    }
    return CT_Empty::default_instance();
}

CT_R* CT_R::default_instance_ = NULL;

// CT_Fonts
CT_Fonts::CT_Fonts()
    :m_has_hint_attr(false),
     m_hint_attr(NULL),
     m_has_ascii_attr(false),
     m_ascii_attr(NULL),
     m_has_hAnsi_attr(false),
     m_hAnsi_attr(NULL),
     m_has_eastAsia_attr(false),
     m_eastAsia_attr(NULL),
     m_has_cs_attr(false),
     m_cs_attr(NULL),
     m_has_asciiTheme_attr(false),
     m_asciiTheme_attr(NULL),
     m_has_hAnsiTheme_attr(false),
     m_hAnsiTheme_attr(NULL),
     m_has_eastAsiaTheme_attr(false),
     m_eastAsiaTheme_attr(NULL),
     m_has_cstheme_attr(false),
     m_cstheme_attr(NULL)
{
}
CT_Fonts::~CT_Fonts()
{
    clear();
}
void CT_Fonts::clear()
{
    m_has_hint_attr = false;

    if (m_hint_attr)
    {
        delete m_hint_attr;
        m_hint_attr = NULL;
    }


    m_has_ascii_attr = false;

    if (m_ascii_attr)
    {
        delete m_ascii_attr;
        m_ascii_attr = NULL;
    }


    m_has_hAnsi_attr = false;

    if (m_hAnsi_attr)
    {
        delete m_hAnsi_attr;
        m_hAnsi_attr = NULL;
    }


    m_has_eastAsia_attr = false;

    if (m_eastAsia_attr)
    {
        delete m_eastAsia_attr;
        m_eastAsia_attr = NULL;
    }


    m_has_cs_attr = false;

    if (m_cs_attr)
    {
        delete m_cs_attr;
        m_cs_attr = NULL;
    }


    m_has_asciiTheme_attr = false;

    if (m_asciiTheme_attr)
    {
        delete m_asciiTheme_attr;
        m_asciiTheme_attr = NULL;
    }


    m_has_hAnsiTheme_attr = false;

    if (m_hAnsiTheme_attr)
    {
        delete m_hAnsiTheme_attr;
        m_hAnsiTheme_attr = NULL;
    }


    m_has_eastAsiaTheme_attr = false;

    if (m_eastAsiaTheme_attr)
    {
        delete m_eastAsiaTheme_attr;
        m_eastAsiaTheme_attr = NULL;
    }


    m_has_cstheme_attr = false;

    if (m_cstheme_attr)
    {
        delete m_cstheme_attr;
        m_cstheme_attr = NULL;
    }

}

void CT_Fonts::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_hint_attr)
    {
        m_hint_attr->toXmlAttr("w:hint", _outStream);
    }



    if (m_has_ascii_attr)
    {
        m_ascii_attr->toXmlAttr("w:ascii", _outStream);
    }



    if (m_has_hAnsi_attr)
    {
        m_hAnsi_attr->toXmlAttr("w:hAnsi", _outStream);
    }



    if (m_has_eastAsia_attr)
    {
        m_eastAsia_attr->toXmlAttr("w:eastAsia", _outStream);
    }



    if (m_has_cs_attr)
    {
        m_cs_attr->toXmlAttr("w:cs", _outStream);
    }



    if (m_has_asciiTheme_attr)
    {
        m_asciiTheme_attr->toXmlAttr("w:asciiTheme", _outStream);
    }



    if (m_has_hAnsiTheme_attr)
    {
        m_hAnsiTheme_attr->toXmlAttr("w:hAnsiTheme", _outStream);
    }



    if (m_has_eastAsiaTheme_attr)
    {
        m_eastAsiaTheme_attr->toXmlAttr("w:eastAsiaTheme", _outStream);
    }



    if (m_has_cstheme_attr)
    {
        m_cstheme_attr->toXmlAttr("w:cstheme", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_Fonts& CT_Fonts::default_instance()
{
    if (!CT_Fonts::default_instance_)
    {
        CT_Fonts::default_instance_ = new CT_Fonts();
    }
    return *CT_Fonts::default_instance_;
}

bool CT_Fonts::has_hint_attr() const
{
    return m_has_hint_attr;
}

void CT_Fonts::set_hint_attr(const ST_Hint& _hint_attr)
{
    m_has_hint_attr = true;
    m_hint_attr = new ST_Hint(_hint_attr);
}

const ST_Hint& CT_Fonts::get_hint_attr() const
{
    if (m_hint_attr)
    {
        return *m_hint_attr;
    }
    return ST_Hint::default_instance();
}

bool CT_Fonts::has_ascii_attr() const
{
    return m_has_ascii_attr;
}

void CT_Fonts::set_ascii_attr(const ns_s::ST_String& _ascii_attr)
{
    m_has_ascii_attr = true;
    m_ascii_attr = new ns_s::ST_String(_ascii_attr);
}

const ns_s::ST_String& CT_Fonts::get_ascii_attr() const
{
    if (m_ascii_attr)
    {
        return *m_ascii_attr;
    }
    return ns_s::ST_String::default_instance();
}

bool CT_Fonts::has_hAnsi_attr() const
{
    return m_has_hAnsi_attr;
}

void CT_Fonts::set_hAnsi_attr(const ns_s::ST_String& _hAnsi_attr)
{
    m_has_hAnsi_attr = true;
    m_hAnsi_attr = new ns_s::ST_String(_hAnsi_attr);
}

const ns_s::ST_String& CT_Fonts::get_hAnsi_attr() const
{
    if (m_hAnsi_attr)
    {
        return *m_hAnsi_attr;
    }
    return ns_s::ST_String::default_instance();
}

bool CT_Fonts::has_eastAsia_attr() const
{
    return m_has_eastAsia_attr;
}

void CT_Fonts::set_eastAsia_attr(const ns_s::ST_String& _eastAsia_attr)
{
    m_has_eastAsia_attr = true;
    m_eastAsia_attr = new ns_s::ST_String(_eastAsia_attr);
}

const ns_s::ST_String& CT_Fonts::get_eastAsia_attr() const
{
    if (m_eastAsia_attr)
    {
        return *m_eastAsia_attr;
    }
    return ns_s::ST_String::default_instance();
}

bool CT_Fonts::has_cs_attr() const
{
    return m_has_cs_attr;
}

void CT_Fonts::set_cs_attr(const ns_s::ST_String& _cs_attr)
{
    m_has_cs_attr = true;
    m_cs_attr = new ns_s::ST_String(_cs_attr);
}

const ns_s::ST_String& CT_Fonts::get_cs_attr() const
{
    if (m_cs_attr)
    {
        return *m_cs_attr;
    }
    return ns_s::ST_String::default_instance();
}

bool CT_Fonts::has_asciiTheme_attr() const
{
    return m_has_asciiTheme_attr;
}

void CT_Fonts::set_asciiTheme_attr(const ST_Theme& _asciiTheme_attr)
{
    m_has_asciiTheme_attr = true;
    m_asciiTheme_attr = new ST_Theme(_asciiTheme_attr);
}

const ST_Theme& CT_Fonts::get_asciiTheme_attr() const
{
    if (m_asciiTheme_attr)
    {
        return *m_asciiTheme_attr;
    }
    return ST_Theme::default_instance();
}

bool CT_Fonts::has_hAnsiTheme_attr() const
{
    return m_has_hAnsiTheme_attr;
}

void CT_Fonts::set_hAnsiTheme_attr(const ST_Theme& _hAnsiTheme_attr)
{
    m_has_hAnsiTheme_attr = true;
    m_hAnsiTheme_attr = new ST_Theme(_hAnsiTheme_attr);
}

const ST_Theme& CT_Fonts::get_hAnsiTheme_attr() const
{
    if (m_hAnsiTheme_attr)
    {
        return *m_hAnsiTheme_attr;
    }
    return ST_Theme::default_instance();
}

bool CT_Fonts::has_eastAsiaTheme_attr() const
{
    return m_has_eastAsiaTheme_attr;
}

void CT_Fonts::set_eastAsiaTheme_attr(const ST_Theme& _eastAsiaTheme_attr)
{
    m_has_eastAsiaTheme_attr = true;
    m_eastAsiaTheme_attr = new ST_Theme(_eastAsiaTheme_attr);
}

const ST_Theme& CT_Fonts::get_eastAsiaTheme_attr() const
{
    if (m_eastAsiaTheme_attr)
    {
        return *m_eastAsiaTheme_attr;
    }
    return ST_Theme::default_instance();
}

bool CT_Fonts::has_cstheme_attr() const
{
    return m_has_cstheme_attr;
}

void CT_Fonts::set_cstheme_attr(const ST_Theme& _cstheme_attr)
{
    m_has_cstheme_attr = true;
    m_cstheme_attr = new ST_Theme(_cstheme_attr);
}

const ST_Theme& CT_Fonts::get_cstheme_attr() const
{
    if (m_cstheme_attr)
    {
        return *m_cstheme_attr;
    }
    return ST_Theme::default_instance();
}

CT_Fonts* CT_Fonts::default_instance_ = NULL;

// CT_RPr
CT_RPr::CT_RPr()
    :m_has_rPrChange(false),
     m_rPrChange(NULL)
{
}
CT_RPr::~CT_RPr()
{
    clear();
}
CT_String* CT_RPr::add_rStyle()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_String* pNewChild = pChildGroup->mutable_rStyle();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_Fonts* CT_RPr::add_rFonts()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Fonts* pNewChild = pChildGroup->mutable_rFonts();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_RPr::add_b()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_b();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_RPr::add_bCs()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_bCs();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_RPr::add_i()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_i();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_RPr::add_iCs()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_iCs();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_RPr::add_caps()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_caps();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_RPr::add_smallCaps()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_smallCaps();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_RPr::add_strike()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_strike();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_RPr::add_dstrike()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_dstrike();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_RPr::add_outline()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_outline();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_RPr::add_shadow()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_shadow();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_RPr::add_emboss()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_emboss();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_RPr::add_imprint()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_imprint();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_RPr::add_noProof()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_noProof();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_RPr::add_snapToGrid()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_snapToGrid();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_RPr::add_vanish()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_vanish();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_RPr::add_webHidden()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_webHidden();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_Color* CT_RPr::add_color()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Color* pNewChild = pChildGroup->mutable_color();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_SignedTwipsMeasure* CT_RPr::add_spacing()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_SignedTwipsMeasure* pNewChild = pChildGroup->mutable_spacing();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_TextScale* CT_RPr::add_w()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_TextScale* pNewChild = pChildGroup->mutable_w();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_HpsMeasure* CT_RPr::add_kern()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_HpsMeasure* pNewChild = pChildGroup->mutable_kern();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_SignedHpsMeasure* CT_RPr::add_position()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_SignedHpsMeasure* pNewChild = pChildGroup->mutable_position();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_HpsMeasure* CT_RPr::add_sz()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_HpsMeasure* pNewChild = pChildGroup->mutable_sz();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_HpsMeasure* CT_RPr::add_szCs()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_HpsMeasure* pNewChild = pChildGroup->mutable_szCs();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_Highlight* CT_RPr::add_highlight()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Highlight* pNewChild = pChildGroup->mutable_highlight();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_Underline* CT_RPr::add_u()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Underline* pNewChild = pChildGroup->mutable_u();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_TextEffect* CT_RPr::add_effect()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_TextEffect* pNewChild = pChildGroup->mutable_effect();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_Border* CT_RPr::add_bdr()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Border* pNewChild = pChildGroup->mutable_bdr();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_Shd* CT_RPr::add_shd()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Shd* pNewChild = pChildGroup->mutable_shd();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_FitText* CT_RPr::add_fitText()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_FitText* pNewChild = pChildGroup->mutable_fitText();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_VerticalAlignRun* CT_RPr::add_vertAlign()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_VerticalAlignRun* pNewChild = pChildGroup->mutable_vertAlign();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_RPr::add_rtl()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_rtl();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_RPr::add_cs()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_cs();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_Em* CT_RPr::add_em()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Em* pNewChild = pChildGroup->mutable_em();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_Language* CT_RPr::add_lang()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Language* pNewChild = pChildGroup->mutable_lang();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_EastAsianLayout* CT_RPr::add_eastAsianLayout()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_EastAsianLayout* pNewChild = pChildGroup->mutable_eastAsianLayout();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_RPr::add_specVanish()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_specVanish();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_RPr::add_oMath()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_oMath();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

bool CT_RPr::has_rPrChange() const
{
    return m_has_rPrChange;
}

CT_RPrChange* CT_RPr::mutable_rPrChange()
{
    m_has_rPrChange = true;
    if (!m_rPrChange)
    {
        m_rPrChange = new CT_RPrChange();
    }
    return m_rPrChange;
}

const CT_RPrChange& CT_RPr::get_rPrChange() const
{
    if (m_rPrChange)
    {
        return *m_rPrChange;
    }
    return CT_RPrChange::default_instance();
}

void CT_RPr::clear()
{
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }

    m_has_rPrChange = false;

    if (m_rPrChange)
    {
        delete m_rPrChange;
        m_rPrChange = NULL;
    }

}

void CT_RPr::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";

    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_rStyle())
            {
                (*iter)->get_rStyle().toXmlElem("w:rStyle", "", _outStream);
            }


            else if ((*iter)->has_rFonts())
            {
                (*iter)->get_rFonts().toXmlElem("w:rFonts", "", _outStream);
            }


            else if ((*iter)->has_b())
            {
                (*iter)->get_b().toXmlElem("w:b", "", _outStream);
            }


            else if ((*iter)->has_bCs())
            {
                (*iter)->get_bCs().toXmlElem("w:bCs", "", _outStream);
            }


            else if ((*iter)->has_i())
            {
                (*iter)->get_i().toXmlElem("w:i", "", _outStream);
            }


            else if ((*iter)->has_iCs())
            {
                (*iter)->get_iCs().toXmlElem("w:iCs", "", _outStream);
            }


            else if ((*iter)->has_caps())
            {
                (*iter)->get_caps().toXmlElem("w:caps", "", _outStream);
            }


            else if ((*iter)->has_smallCaps())
            {
                (*iter)->get_smallCaps().toXmlElem("w:smallCaps", "", _outStream);
            }


            else if ((*iter)->has_strike())
            {
                (*iter)->get_strike().toXmlElem("w:strike", "", _outStream);
            }


            else if ((*iter)->has_dstrike())
            {
                (*iter)->get_dstrike().toXmlElem("w:dstrike", "", _outStream);
            }


            else if ((*iter)->has_outline())
            {
                (*iter)->get_outline().toXmlElem("w:outline", "", _outStream);
            }


            else if ((*iter)->has_shadow())
            {
                (*iter)->get_shadow().toXmlElem("w:shadow", "", _outStream);
            }


            else if ((*iter)->has_emboss())
            {
                (*iter)->get_emboss().toXmlElem("w:emboss", "", _outStream);
            }


            else if ((*iter)->has_imprint())
            {
                (*iter)->get_imprint().toXmlElem("w:imprint", "", _outStream);
            }


            else if ((*iter)->has_noProof())
            {
                (*iter)->get_noProof().toXmlElem("w:noProof", "", _outStream);
            }


            else if ((*iter)->has_snapToGrid())
            {
                (*iter)->get_snapToGrid().toXmlElem("w:snapToGrid", "", _outStream);
            }


            else if ((*iter)->has_vanish())
            {
                (*iter)->get_vanish().toXmlElem("w:vanish", "", _outStream);
            }


            else if ((*iter)->has_webHidden())
            {
                (*iter)->get_webHidden().toXmlElem("w:webHidden", "", _outStream);
            }


            else if ((*iter)->has_color())
            {
                (*iter)->get_color().toXmlElem("w:color", "", _outStream);
            }


            else if ((*iter)->has_spacing())
            {
                (*iter)->get_spacing().toXmlElem("w:spacing", "", _outStream);
            }


            else if ((*iter)->has_w())
            {
                (*iter)->get_w().toXmlElem("w:w", "", _outStream);
            }


            else if ((*iter)->has_kern())
            {
                (*iter)->get_kern().toXmlElem("w:kern", "", _outStream);
            }


            else if ((*iter)->has_position())
            {
                (*iter)->get_position().toXmlElem("w:position", "", _outStream);
            }


            else if ((*iter)->has_sz())
            {
                (*iter)->get_sz().toXmlElem("w:sz", "", _outStream);
            }


            else if ((*iter)->has_szCs())
            {
                (*iter)->get_szCs().toXmlElem("w:szCs", "", _outStream);
            }


            else if ((*iter)->has_highlight())
            {
                (*iter)->get_highlight().toXmlElem("w:highlight", "", _outStream);
            }


            else if ((*iter)->has_u())
            {
                (*iter)->get_u().toXmlElem("w:u", "", _outStream);
            }


            else if ((*iter)->has_effect())
            {
                (*iter)->get_effect().toXmlElem("w:effect", "", _outStream);
            }


            else if ((*iter)->has_bdr())
            {
                (*iter)->get_bdr().toXmlElem("w:bdr", "", _outStream);
            }


            else if ((*iter)->has_shd())
            {
                (*iter)->get_shd().toXmlElem("w:shd", "", _outStream);
            }


            else if ((*iter)->has_fitText())
            {
                (*iter)->get_fitText().toXmlElem("w:fitText", "", _outStream);
            }


            else if ((*iter)->has_vertAlign())
            {
                (*iter)->get_vertAlign().toXmlElem("w:vertAlign", "", _outStream);
            }


            else if ((*iter)->has_rtl())
            {
                (*iter)->get_rtl().toXmlElem("w:rtl", "", _outStream);
            }


            else if ((*iter)->has_cs())
            {
                (*iter)->get_cs().toXmlElem("w:cs", "", _outStream);
            }


            else if ((*iter)->has_em())
            {
                (*iter)->get_em().toXmlElem("w:em", "", _outStream);
            }


            else if ((*iter)->has_lang())
            {
                (*iter)->get_lang().toXmlElem("w:lang", "", _outStream);
            }


            else if ((*iter)->has_eastAsianLayout())
            {
                (*iter)->get_eastAsianLayout().toXmlElem("w:eastAsianLayout", "", _outStream);
            }


            else if ((*iter)->has_specVanish())
            {
                (*iter)->get_specVanish().toXmlElem("w:specVanish", "", _outStream);
            }


            else if ((*iter)->has_oMath())
            {
                (*iter)->get_oMath().toXmlElem("w:oMath", "", _outStream);
            }


        }
    }


    if (m_has_rPrChange)
    {
        m_rPrChange->toXmlElem("w:rPrChange", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_RPr& CT_RPr::default_instance()
{
    if (!CT_RPr::default_instance_)
    {
        CT_RPr::default_instance_ = new CT_RPr();
    }
    return *CT_RPr::default_instance_;
}


// CT_RPr::ChildGroup_1
CT_RPr::ChildGroup_1::ChildGroup_1()
    :m_has_rStyle(false),
     m_rStyle(NULL),
     m_has_rFonts(false),
     m_rFonts(NULL),
     m_has_b(false),
     m_b(NULL),
     m_has_bCs(false),
     m_bCs(NULL),
     m_has_i(false),
     m_i(NULL),
     m_has_iCs(false),
     m_iCs(NULL),
     m_has_caps(false),
     m_caps(NULL),
     m_has_smallCaps(false),
     m_smallCaps(NULL),
     m_has_strike(false),
     m_strike(NULL),
     m_has_dstrike(false),
     m_dstrike(NULL),
     m_has_outline(false),
     m_outline(NULL),
     m_has_shadow(false),
     m_shadow(NULL),
     m_has_emboss(false),
     m_emboss(NULL),
     m_has_imprint(false),
     m_imprint(NULL),
     m_has_noProof(false),
     m_noProof(NULL),
     m_has_snapToGrid(false),
     m_snapToGrid(NULL),
     m_has_vanish(false),
     m_vanish(NULL),
     m_has_webHidden(false),
     m_webHidden(NULL),
     m_has_color(false),
     m_color(NULL),
     m_has_spacing(false),
     m_spacing(NULL),
     m_has_w(false),
     m_w(NULL),
     m_has_kern(false),
     m_kern(NULL),
     m_has_position(false),
     m_position(NULL),
     m_has_sz(false),
     m_sz(NULL),
     m_has_szCs(false),
     m_szCs(NULL),
     m_has_highlight(false),
     m_highlight(NULL),
     m_has_u(false),
     m_u(NULL),
     m_has_effect(false),
     m_effect(NULL),
     m_has_bdr(false),
     m_bdr(NULL),
     m_has_shd(false),
     m_shd(NULL),
     m_has_fitText(false),
     m_fitText(NULL),
     m_has_vertAlign(false),
     m_vertAlign(NULL),
     m_has_rtl(false),
     m_rtl(NULL),
     m_has_cs(false),
     m_cs(NULL),
     m_has_em(false),
     m_em(NULL),
     m_has_lang(false),
     m_lang(NULL),
     m_has_eastAsianLayout(false),
     m_eastAsianLayout(NULL),
     m_has_specVanish(false),
     m_specVanish(NULL),
     m_has_oMath(false),
     m_oMath(NULL)
{
}
bool CT_RPr::ChildGroup_1::has_rStyle() const
{
    return m_has_rStyle;
}

CT_String* CT_RPr::ChildGroup_1::mutable_rStyle()
{

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_rStyle = true;
    if (!m_rStyle)
    {
        m_rStyle = new CT_String();
    }
    return m_rStyle;
}

const CT_String& CT_RPr::ChildGroup_1::get_rStyle() const
{
    if (m_rStyle)
    {
        return *m_rStyle;
    }
    return CT_String::default_instance();
}

bool CT_RPr::ChildGroup_1::has_rFonts() const
{
    return m_has_rFonts;
}

CT_Fonts* CT_RPr::ChildGroup_1::mutable_rFonts()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_rFonts = true;
    if (!m_rFonts)
    {
        m_rFonts = new CT_Fonts();
    }
    return m_rFonts;
}

const CT_Fonts& CT_RPr::ChildGroup_1::get_rFonts() const
{
    if (m_rFonts)
    {
        return *m_rFonts;
    }
    return CT_Fonts::default_instance();
}

bool CT_RPr::ChildGroup_1::has_b() const
{
    return m_has_b;
}

CT_OnOff* CT_RPr::ChildGroup_1::mutable_b()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_b = true;
    if (!m_b)
    {
        m_b = new CT_OnOff();
    }
    return m_b;
}

const CT_OnOff& CT_RPr::ChildGroup_1::get_b() const
{
    if (m_b)
    {
        return *m_b;
    }
    return CT_OnOff::default_instance();
}

bool CT_RPr::ChildGroup_1::has_bCs() const
{
    return m_has_bCs;
}

CT_OnOff* CT_RPr::ChildGroup_1::mutable_bCs()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_bCs = true;
    if (!m_bCs)
    {
        m_bCs = new CT_OnOff();
    }
    return m_bCs;
}

const CT_OnOff& CT_RPr::ChildGroup_1::get_bCs() const
{
    if (m_bCs)
    {
        return *m_bCs;
    }
    return CT_OnOff::default_instance();
}

bool CT_RPr::ChildGroup_1::has_i() const
{
    return m_has_i;
}

CT_OnOff* CT_RPr::ChildGroup_1::mutable_i()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_i = true;
    if (!m_i)
    {
        m_i = new CT_OnOff();
    }
    return m_i;
}

const CT_OnOff& CT_RPr::ChildGroup_1::get_i() const
{
    if (m_i)
    {
        return *m_i;
    }
    return CT_OnOff::default_instance();
}

bool CT_RPr::ChildGroup_1::has_iCs() const
{
    return m_has_iCs;
}

CT_OnOff* CT_RPr::ChildGroup_1::mutable_iCs()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_iCs = true;
    if (!m_iCs)
    {
        m_iCs = new CT_OnOff();
    }
    return m_iCs;
}

const CT_OnOff& CT_RPr::ChildGroup_1::get_iCs() const
{
    if (m_iCs)
    {
        return *m_iCs;
    }
    return CT_OnOff::default_instance();
}

bool CT_RPr::ChildGroup_1::has_caps() const
{
    return m_has_caps;
}

CT_OnOff* CT_RPr::ChildGroup_1::mutable_caps()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_caps = true;
    if (!m_caps)
    {
        m_caps = new CT_OnOff();
    }
    return m_caps;
}

const CT_OnOff& CT_RPr::ChildGroup_1::get_caps() const
{
    if (m_caps)
    {
        return *m_caps;
    }
    return CT_OnOff::default_instance();
}

bool CT_RPr::ChildGroup_1::has_smallCaps() const
{
    return m_has_smallCaps;
}

CT_OnOff* CT_RPr::ChildGroup_1::mutable_smallCaps()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_smallCaps = true;
    if (!m_smallCaps)
    {
        m_smallCaps = new CT_OnOff();
    }
    return m_smallCaps;
}

const CT_OnOff& CT_RPr::ChildGroup_1::get_smallCaps() const
{
    if (m_smallCaps)
    {
        return *m_smallCaps;
    }
    return CT_OnOff::default_instance();
}

bool CT_RPr::ChildGroup_1::has_strike() const
{
    return m_has_strike;
}

CT_OnOff* CT_RPr::ChildGroup_1::mutable_strike()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_strike = true;
    if (!m_strike)
    {
        m_strike = new CT_OnOff();
    }
    return m_strike;
}

const CT_OnOff& CT_RPr::ChildGroup_1::get_strike() const
{
    if (m_strike)
    {
        return *m_strike;
    }
    return CT_OnOff::default_instance();
}

bool CT_RPr::ChildGroup_1::has_dstrike() const
{
    return m_has_dstrike;
}

CT_OnOff* CT_RPr::ChildGroup_1::mutable_dstrike()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_dstrike = true;
    if (!m_dstrike)
    {
        m_dstrike = new CT_OnOff();
    }
    return m_dstrike;
}

const CT_OnOff& CT_RPr::ChildGroup_1::get_dstrike() const
{
    if (m_dstrike)
    {
        return *m_dstrike;
    }
    return CT_OnOff::default_instance();
}

bool CT_RPr::ChildGroup_1::has_outline() const
{
    return m_has_outline;
}

CT_OnOff* CT_RPr::ChildGroup_1::mutable_outline()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_outline = true;
    if (!m_outline)
    {
        m_outline = new CT_OnOff();
    }
    return m_outline;
}

const CT_OnOff& CT_RPr::ChildGroup_1::get_outline() const
{
    if (m_outline)
    {
        return *m_outline;
    }
    return CT_OnOff::default_instance();
}

bool CT_RPr::ChildGroup_1::has_shadow() const
{
    return m_has_shadow;
}

CT_OnOff* CT_RPr::ChildGroup_1::mutable_shadow()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_shadow = true;
    if (!m_shadow)
    {
        m_shadow = new CT_OnOff();
    }
    return m_shadow;
}

const CT_OnOff& CT_RPr::ChildGroup_1::get_shadow() const
{
    if (m_shadow)
    {
        return *m_shadow;
    }
    return CT_OnOff::default_instance();
}

bool CT_RPr::ChildGroup_1::has_emboss() const
{
    return m_has_emboss;
}

CT_OnOff* CT_RPr::ChildGroup_1::mutable_emboss()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_emboss = true;
    if (!m_emboss)
    {
        m_emboss = new CT_OnOff();
    }
    return m_emboss;
}

const CT_OnOff& CT_RPr::ChildGroup_1::get_emboss() const
{
    if (m_emboss)
    {
        return *m_emboss;
    }
    return CT_OnOff::default_instance();
}

bool CT_RPr::ChildGroup_1::has_imprint() const
{
    return m_has_imprint;
}

CT_OnOff* CT_RPr::ChildGroup_1::mutable_imprint()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_imprint = true;
    if (!m_imprint)
    {
        m_imprint = new CT_OnOff();
    }
    return m_imprint;
}

const CT_OnOff& CT_RPr::ChildGroup_1::get_imprint() const
{
    if (m_imprint)
    {
        return *m_imprint;
    }
    return CT_OnOff::default_instance();
}

bool CT_RPr::ChildGroup_1::has_noProof() const
{
    return m_has_noProof;
}

CT_OnOff* CT_RPr::ChildGroup_1::mutable_noProof()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_noProof = true;
    if (!m_noProof)
    {
        m_noProof = new CT_OnOff();
    }
    return m_noProof;
}

const CT_OnOff& CT_RPr::ChildGroup_1::get_noProof() const
{
    if (m_noProof)
    {
        return *m_noProof;
    }
    return CT_OnOff::default_instance();
}

bool CT_RPr::ChildGroup_1::has_snapToGrid() const
{
    return m_has_snapToGrid;
}

CT_OnOff* CT_RPr::ChildGroup_1::mutable_snapToGrid()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_snapToGrid = true;
    if (!m_snapToGrid)
    {
        m_snapToGrid = new CT_OnOff();
    }
    return m_snapToGrid;
}

const CT_OnOff& CT_RPr::ChildGroup_1::get_snapToGrid() const
{
    if (m_snapToGrid)
    {
        return *m_snapToGrid;
    }
    return CT_OnOff::default_instance();
}

bool CT_RPr::ChildGroup_1::has_vanish() const
{
    return m_has_vanish;
}

CT_OnOff* CT_RPr::ChildGroup_1::mutable_vanish()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_vanish = true;
    if (!m_vanish)
    {
        m_vanish = new CT_OnOff();
    }
    return m_vanish;
}

const CT_OnOff& CT_RPr::ChildGroup_1::get_vanish() const
{
    if (m_vanish)
    {
        return *m_vanish;
    }
    return CT_OnOff::default_instance();
}

bool CT_RPr::ChildGroup_1::has_webHidden() const
{
    return m_has_webHidden;
}

CT_OnOff* CT_RPr::ChildGroup_1::mutable_webHidden()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_webHidden = true;
    if (!m_webHidden)
    {
        m_webHidden = new CT_OnOff();
    }
    return m_webHidden;
}

const CT_OnOff& CT_RPr::ChildGroup_1::get_webHidden() const
{
    if (m_webHidden)
    {
        return *m_webHidden;
    }
    return CT_OnOff::default_instance();
}

bool CT_RPr::ChildGroup_1::has_color() const
{
    return m_has_color;
}

CT_Color* CT_RPr::ChildGroup_1::mutable_color()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_color = true;
    if (!m_color)
    {
        m_color = new CT_Color();
    }
    return m_color;
}

const CT_Color& CT_RPr::ChildGroup_1::get_color() const
{
    if (m_color)
    {
        return *m_color;
    }
    return CT_Color::default_instance();
}

bool CT_RPr::ChildGroup_1::has_spacing() const
{
    return m_has_spacing;
}

CT_SignedTwipsMeasure* CT_RPr::ChildGroup_1::mutable_spacing()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_spacing = true;
    if (!m_spacing)
    {
        m_spacing = new CT_SignedTwipsMeasure();
    }
    return m_spacing;
}

const CT_SignedTwipsMeasure& CT_RPr::ChildGroup_1::get_spacing() const
{
    if (m_spacing)
    {
        return *m_spacing;
    }
    return CT_SignedTwipsMeasure::default_instance();
}

bool CT_RPr::ChildGroup_1::has_w() const
{
    return m_has_w;
}

CT_TextScale* CT_RPr::ChildGroup_1::mutable_w()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_w = true;
    if (!m_w)
    {
        m_w = new CT_TextScale();
    }
    return m_w;
}

const CT_TextScale& CT_RPr::ChildGroup_1::get_w() const
{
    if (m_w)
    {
        return *m_w;
    }
    return CT_TextScale::default_instance();
}

bool CT_RPr::ChildGroup_1::has_kern() const
{
    return m_has_kern;
}

CT_HpsMeasure* CT_RPr::ChildGroup_1::mutable_kern()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_kern = true;
    if (!m_kern)
    {
        m_kern = new CT_HpsMeasure();
    }
    return m_kern;
}

const CT_HpsMeasure& CT_RPr::ChildGroup_1::get_kern() const
{
    if (m_kern)
    {
        return *m_kern;
    }
    return CT_HpsMeasure::default_instance();
}

bool CT_RPr::ChildGroup_1::has_position() const
{
    return m_has_position;
}

CT_SignedHpsMeasure* CT_RPr::ChildGroup_1::mutable_position()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_position = true;
    if (!m_position)
    {
        m_position = new CT_SignedHpsMeasure();
    }
    return m_position;
}

const CT_SignedHpsMeasure& CT_RPr::ChildGroup_1::get_position() const
{
    if (m_position)
    {
        return *m_position;
    }
    return CT_SignedHpsMeasure::default_instance();
}

bool CT_RPr::ChildGroup_1::has_sz() const
{
    return m_has_sz;
}

CT_HpsMeasure* CT_RPr::ChildGroup_1::mutable_sz()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_sz = true;
    if (!m_sz)
    {
        m_sz = new CT_HpsMeasure();
    }
    return m_sz;
}

const CT_HpsMeasure& CT_RPr::ChildGroup_1::get_sz() const
{
    if (m_sz)
    {
        return *m_sz;
    }
    return CT_HpsMeasure::default_instance();
}

bool CT_RPr::ChildGroup_1::has_szCs() const
{
    return m_has_szCs;
}

CT_HpsMeasure* CT_RPr::ChildGroup_1::mutable_szCs()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_szCs = true;
    if (!m_szCs)
    {
        m_szCs = new CT_HpsMeasure();
    }
    return m_szCs;
}

const CT_HpsMeasure& CT_RPr::ChildGroup_1::get_szCs() const
{
    if (m_szCs)
    {
        return *m_szCs;
    }
    return CT_HpsMeasure::default_instance();
}

bool CT_RPr::ChildGroup_1::has_highlight() const
{
    return m_has_highlight;
}

CT_Highlight* CT_RPr::ChildGroup_1::mutable_highlight()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_highlight = true;
    if (!m_highlight)
    {
        m_highlight = new CT_Highlight();
    }
    return m_highlight;
}

const CT_Highlight& CT_RPr::ChildGroup_1::get_highlight() const
{
    if (m_highlight)
    {
        return *m_highlight;
    }
    return CT_Highlight::default_instance();
}

bool CT_RPr::ChildGroup_1::has_u() const
{
    return m_has_u;
}

CT_Underline* CT_RPr::ChildGroup_1::mutable_u()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_u = true;
    if (!m_u)
    {
        m_u = new CT_Underline();
    }
    return m_u;
}

const CT_Underline& CT_RPr::ChildGroup_1::get_u() const
{
    if (m_u)
    {
        return *m_u;
    }
    return CT_Underline::default_instance();
}

bool CT_RPr::ChildGroup_1::has_effect() const
{
    return m_has_effect;
}

CT_TextEffect* CT_RPr::ChildGroup_1::mutable_effect()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_effect = true;
    if (!m_effect)
    {
        m_effect = new CT_TextEffect();
    }
    return m_effect;
}

const CT_TextEffect& CT_RPr::ChildGroup_1::get_effect() const
{
    if (m_effect)
    {
        return *m_effect;
    }
    return CT_TextEffect::default_instance();
}

bool CT_RPr::ChildGroup_1::has_bdr() const
{
    return m_has_bdr;
}

CT_Border* CT_RPr::ChildGroup_1::mutable_bdr()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_bdr = true;
    if (!m_bdr)
    {
        m_bdr = new CT_Border();
    }
    return m_bdr;
}

const CT_Border& CT_RPr::ChildGroup_1::get_bdr() const
{
    if (m_bdr)
    {
        return *m_bdr;
    }
    return CT_Border::default_instance();
}

bool CT_RPr::ChildGroup_1::has_shd() const
{
    return m_has_shd;
}

CT_Shd* CT_RPr::ChildGroup_1::mutable_shd()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_shd = true;
    if (!m_shd)
    {
        m_shd = new CT_Shd();
    }
    return m_shd;
}

const CT_Shd& CT_RPr::ChildGroup_1::get_shd() const
{
    if (m_shd)
    {
        return *m_shd;
    }
    return CT_Shd::default_instance();
}

bool CT_RPr::ChildGroup_1::has_fitText() const
{
    return m_has_fitText;
}

CT_FitText* CT_RPr::ChildGroup_1::mutable_fitText()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_fitText = true;
    if (!m_fitText)
    {
        m_fitText = new CT_FitText();
    }
    return m_fitText;
}

const CT_FitText& CT_RPr::ChildGroup_1::get_fitText() const
{
    if (m_fitText)
    {
        return *m_fitText;
    }
    return CT_FitText::default_instance();
}

bool CT_RPr::ChildGroup_1::has_vertAlign() const
{
    return m_has_vertAlign;
}

CT_VerticalAlignRun* CT_RPr::ChildGroup_1::mutable_vertAlign()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_vertAlign = true;
    if (!m_vertAlign)
    {
        m_vertAlign = new CT_VerticalAlignRun();
    }
    return m_vertAlign;
}

const CT_VerticalAlignRun& CT_RPr::ChildGroup_1::get_vertAlign() const
{
    if (m_vertAlign)
    {
        return *m_vertAlign;
    }
    return CT_VerticalAlignRun::default_instance();
}

bool CT_RPr::ChildGroup_1::has_rtl() const
{
    return m_has_rtl;
}

CT_OnOff* CT_RPr::ChildGroup_1::mutable_rtl()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_rtl = true;
    if (!m_rtl)
    {
        m_rtl = new CT_OnOff();
    }
    return m_rtl;
}

const CT_OnOff& CT_RPr::ChildGroup_1::get_rtl() const
{
    if (m_rtl)
    {
        return *m_rtl;
    }
    return CT_OnOff::default_instance();
}

bool CT_RPr::ChildGroup_1::has_cs() const
{
    return m_has_cs;
}

CT_OnOff* CT_RPr::ChildGroup_1::mutable_cs()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_cs = true;
    if (!m_cs)
    {
        m_cs = new CT_OnOff();
    }
    return m_cs;
}

const CT_OnOff& CT_RPr::ChildGroup_1::get_cs() const
{
    if (m_cs)
    {
        return *m_cs;
    }
    return CT_OnOff::default_instance();
}

bool CT_RPr::ChildGroup_1::has_em() const
{
    return m_has_em;
}

CT_Em* CT_RPr::ChildGroup_1::mutable_em()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_em = true;
    if (!m_em)
    {
        m_em = new CT_Em();
    }
    return m_em;
}

const CT_Em& CT_RPr::ChildGroup_1::get_em() const
{
    if (m_em)
    {
        return *m_em;
    }
    return CT_Em::default_instance();
}

bool CT_RPr::ChildGroup_1::has_lang() const
{
    return m_has_lang;
}

CT_Language* CT_RPr::ChildGroup_1::mutable_lang()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_lang = true;
    if (!m_lang)
    {
        m_lang = new CT_Language();
    }
    return m_lang;
}

const CT_Language& CT_RPr::ChildGroup_1::get_lang() const
{
    if (m_lang)
    {
        return *m_lang;
    }
    return CT_Language::default_instance();
}

bool CT_RPr::ChildGroup_1::has_eastAsianLayout() const
{
    return m_has_eastAsianLayout;
}

CT_EastAsianLayout* CT_RPr::ChildGroup_1::mutable_eastAsianLayout()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_eastAsianLayout = true;
    if (!m_eastAsianLayout)
    {
        m_eastAsianLayout = new CT_EastAsianLayout();
    }
    return m_eastAsianLayout;
}

const CT_EastAsianLayout& CT_RPr::ChildGroup_1::get_eastAsianLayout() const
{
    if (m_eastAsianLayout)
    {
        return *m_eastAsianLayout;
    }
    return CT_EastAsianLayout::default_instance();
}

bool CT_RPr::ChildGroup_1::has_specVanish() const
{
    return m_has_specVanish;
}

CT_OnOff* CT_RPr::ChildGroup_1::mutable_specVanish()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_specVanish = true;
    if (!m_specVanish)
    {
        m_specVanish = new CT_OnOff();
    }
    return m_specVanish;
}

const CT_OnOff& CT_RPr::ChildGroup_1::get_specVanish() const
{
    if (m_specVanish)
    {
        return *m_specVanish;
    }
    return CT_OnOff::default_instance();
}

bool CT_RPr::ChildGroup_1::has_oMath() const
{
    return m_has_oMath;
}

CT_OnOff* CT_RPr::ChildGroup_1::mutable_oMath()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = true;
    if (!m_oMath)
    {
        m_oMath = new CT_OnOff();
    }
    return m_oMath;
}

const CT_OnOff& CT_RPr::ChildGroup_1::get_oMath() const
{
    if (m_oMath)
    {
        return *m_oMath;
    }
    return CT_OnOff::default_instance();
}

CT_RPr* CT_RPr::default_instance_ = NULL;

// CT_MathCtrlIns
CT_MathCtrlIns::CT_MathCtrlIns()
    :m_has_del(false),
     m_del(NULL),
     m_has_rPr(false),
     m_rPr(NULL),
     m_has_id_attr(false),
     m_id_attr(NULL),
     m_has_author_attr(false),
     m_author_attr(NULL),
     m_has_date_attr(false),
     m_date_attr(NULL)
{
}
CT_MathCtrlIns::~CT_MathCtrlIns()
{
    clear();
}
bool CT_MathCtrlIns::has_del() const
{
    return m_has_del;
}

CT_RPrChange* CT_MathCtrlIns::mutable_del()
{

    m_has_rPr = false;

    if (m_rPr)
    {
        delete m_rPr;
        m_rPr = NULL;
    }
    ;

    m_has_del = true;
    if (!m_del)
    {
        m_del = new CT_RPrChange();
    }
    return m_del;
}

const CT_RPrChange& CT_MathCtrlIns::get_del() const
{
    if (m_del)
    {
        return *m_del;
    }
    return CT_RPrChange::default_instance();
}

bool CT_MathCtrlIns::has_rPr() const
{
    return m_has_rPr;
}

CT_RPr* CT_MathCtrlIns::mutable_rPr()
{

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_rPr = true;
    if (!m_rPr)
    {
        m_rPr = new CT_RPr();
    }
    return m_rPr;
}

const CT_RPr& CT_MathCtrlIns::get_rPr() const
{
    if (m_rPr)
    {
        return *m_rPr;
    }
    return CT_RPr::default_instance();
}

void CT_MathCtrlIns::clear()
{
    m_has_id_attr = false;

    if (m_id_attr)
    {
        delete m_id_attr;
        m_id_attr = NULL;
    }


    m_has_author_attr = false;

    if (m_author_attr)
    {
        delete m_author_attr;
        m_author_attr = NULL;
    }


    m_has_date_attr = false;

    if (m_date_attr)
    {
        delete m_date_attr;
        m_date_attr = NULL;
    }


    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }


    m_has_rPr = false;

    if (m_rPr)
    {
        delete m_rPr;
        m_rPr = NULL;
    }

}

void CT_MathCtrlIns::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_id_attr);
    if (m_has_id_attr)
    {
        m_id_attr->toXmlAttr("w:id", _outStream);
    }


    assert(m_has_author_attr);
    if (m_has_author_attr)
    {
        m_author_attr->toXmlAttr("w:author", _outStream);
    }



    if (m_has_date_attr)
    {
        m_date_attr->toXmlAttr("w:date", _outStream);
    }

    _outStream << ">";

    {
        bool elemHasValueList[2] = {m_has_del, m_has_rPr};
        int cnt = count(elemHasValueList, elemHasValueList + 2, true);
        assert(cnt == 0 || cnt == 1);
    }


    if (m_has_del)
    {
        m_del->toXmlElem("w:del", "", _outStream);
    }


    if (m_has_rPr)
    {
        m_rPr->toXmlElem("w:rPr", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_MathCtrlIns& CT_MathCtrlIns::default_instance()
{
    if (!CT_MathCtrlIns::default_instance_)
    {
        CT_MathCtrlIns::default_instance_ = new CT_MathCtrlIns();
    }
    return *CT_MathCtrlIns::default_instance_;
}

bool CT_MathCtrlIns::has_id_attr() const
{
    return m_has_id_attr;
}

void CT_MathCtrlIns::set_id_attr(const ST_DecimalNumber& _id_attr)
{
    m_has_id_attr = true;
    m_id_attr = new ST_DecimalNumber(_id_attr);
}

const ST_DecimalNumber& CT_MathCtrlIns::get_id_attr() const
{
    if (m_id_attr)
    {
        return *m_id_attr;
    }
    return ST_DecimalNumber::default_instance();
}

bool CT_MathCtrlIns::has_author_attr() const
{
    return m_has_author_attr;
}

void CT_MathCtrlIns::set_author_attr(const ns_s::ST_String& _author_attr)
{
    m_has_author_attr = true;
    m_author_attr = new ns_s::ST_String(_author_attr);
}

const ns_s::ST_String& CT_MathCtrlIns::get_author_attr() const
{
    if (m_author_attr)
    {
        return *m_author_attr;
    }
    return ns_s::ST_String::default_instance();
}

bool CT_MathCtrlIns::has_date_attr() const
{
    return m_has_date_attr;
}

void CT_MathCtrlIns::set_date_attr(const ST_DateTime& _date_attr)
{
    m_has_date_attr = true;
    m_date_attr = new ST_DateTime(_date_attr);
}

const ST_DateTime& CT_MathCtrlIns::get_date_attr() const
{
    if (m_date_attr)
    {
        return *m_date_attr;
    }
    return ST_DateTime::default_instance();
}

CT_MathCtrlIns* CT_MathCtrlIns::default_instance_ = NULL;

// CT_MathCtrlDel
CT_MathCtrlDel::CT_MathCtrlDel()
    :m_has_rPr(false),
     m_rPr(NULL),
     m_has_id_attr(false),
     m_id_attr(NULL),
     m_has_author_attr(false),
     m_author_attr(NULL),
     m_has_date_attr(false),
     m_date_attr(NULL)
{
}
CT_MathCtrlDel::~CT_MathCtrlDel()
{
    clear();
}
bool CT_MathCtrlDel::has_rPr() const
{
    return m_has_rPr;
}

CT_RPr* CT_MathCtrlDel::mutable_rPr()
{

    m_has_rPr = true;
    if (!m_rPr)
    {
        m_rPr = new CT_RPr();
    }
    return m_rPr;
}

const CT_RPr& CT_MathCtrlDel::get_rPr() const
{
    if (m_rPr)
    {
        return *m_rPr;
    }
    return CT_RPr::default_instance();
}

void CT_MathCtrlDel::clear()
{
    m_has_id_attr = false;

    if (m_id_attr)
    {
        delete m_id_attr;
        m_id_attr = NULL;
    }


    m_has_author_attr = false;

    if (m_author_attr)
    {
        delete m_author_attr;
        m_author_attr = NULL;
    }


    m_has_date_attr = false;

    if (m_date_attr)
    {
        delete m_date_attr;
        m_date_attr = NULL;
    }


    m_has_rPr = false;

    if (m_rPr)
    {
        delete m_rPr;
        m_rPr = NULL;
    }

}

void CT_MathCtrlDel::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_id_attr);
    if (m_has_id_attr)
    {
        m_id_attr->toXmlAttr("w:id", _outStream);
    }


    assert(m_has_author_attr);
    if (m_has_author_attr)
    {
        m_author_attr->toXmlAttr("w:author", _outStream);
    }



    if (m_has_date_attr)
    {
        m_date_attr->toXmlAttr("w:date", _outStream);
    }

    _outStream << ">";

    {
        bool elemHasValueList[1] = {m_has_rPr};
        int cnt = count(elemHasValueList, elemHasValueList + 1, true);
        assert(cnt == 0 || cnt == 1);
    }


    if (m_has_rPr)
    {
        m_rPr->toXmlElem("w:rPr", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_MathCtrlDel& CT_MathCtrlDel::default_instance()
{
    if (!CT_MathCtrlDel::default_instance_)
    {
        CT_MathCtrlDel::default_instance_ = new CT_MathCtrlDel();
    }
    return *CT_MathCtrlDel::default_instance_;
}

bool CT_MathCtrlDel::has_id_attr() const
{
    return m_has_id_attr;
}

void CT_MathCtrlDel::set_id_attr(const ST_DecimalNumber& _id_attr)
{
    m_has_id_attr = true;
    m_id_attr = new ST_DecimalNumber(_id_attr);
}

const ST_DecimalNumber& CT_MathCtrlDel::get_id_attr() const
{
    if (m_id_attr)
    {
        return *m_id_attr;
    }
    return ST_DecimalNumber::default_instance();
}

bool CT_MathCtrlDel::has_author_attr() const
{
    return m_has_author_attr;
}

void CT_MathCtrlDel::set_author_attr(const ns_s::ST_String& _author_attr)
{
    m_has_author_attr = true;
    m_author_attr = new ns_s::ST_String(_author_attr);
}

const ns_s::ST_String& CT_MathCtrlDel::get_author_attr() const
{
    if (m_author_attr)
    {
        return *m_author_attr;
    }
    return ns_s::ST_String::default_instance();
}

bool CT_MathCtrlDel::has_date_attr() const
{
    return m_has_date_attr;
}

void CT_MathCtrlDel::set_date_attr(const ST_DateTime& _date_attr)
{
    m_has_date_attr = true;
    m_date_attr = new ST_DateTime(_date_attr);
}

const ST_DateTime& CT_MathCtrlDel::get_date_attr() const
{
    if (m_date_attr)
    {
        return *m_date_attr;
    }
    return ST_DateTime::default_instance();
}

CT_MathCtrlDel* CT_MathCtrlDel::default_instance_ = NULL;

// CT_RPrOriginal
CT_RPrOriginal::CT_RPrOriginal()

{
}
CT_RPrOriginal::~CT_RPrOriginal()
{
    clear();
}
CT_String* CT_RPrOriginal::add_rStyle()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_String* pNewChild = pChildGroup->mutable_rStyle();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_Fonts* CT_RPrOriginal::add_rFonts()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Fonts* pNewChild = pChildGroup->mutable_rFonts();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_RPrOriginal::add_b()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_b();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_RPrOriginal::add_bCs()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_bCs();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_RPrOriginal::add_i()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_i();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_RPrOriginal::add_iCs()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_iCs();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_RPrOriginal::add_caps()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_caps();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_RPrOriginal::add_smallCaps()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_smallCaps();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_RPrOriginal::add_strike()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_strike();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_RPrOriginal::add_dstrike()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_dstrike();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_RPrOriginal::add_outline()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_outline();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_RPrOriginal::add_shadow()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_shadow();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_RPrOriginal::add_emboss()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_emboss();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_RPrOriginal::add_imprint()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_imprint();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_RPrOriginal::add_noProof()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_noProof();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_RPrOriginal::add_snapToGrid()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_snapToGrid();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_RPrOriginal::add_vanish()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_vanish();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_RPrOriginal::add_webHidden()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_webHidden();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_Color* CT_RPrOriginal::add_color()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Color* pNewChild = pChildGroup->mutable_color();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_SignedTwipsMeasure* CT_RPrOriginal::add_spacing()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_SignedTwipsMeasure* pNewChild = pChildGroup->mutable_spacing();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_TextScale* CT_RPrOriginal::add_w()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_TextScale* pNewChild = pChildGroup->mutable_w();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_HpsMeasure* CT_RPrOriginal::add_kern()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_HpsMeasure* pNewChild = pChildGroup->mutable_kern();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_SignedHpsMeasure* CT_RPrOriginal::add_position()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_SignedHpsMeasure* pNewChild = pChildGroup->mutable_position();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_HpsMeasure* CT_RPrOriginal::add_sz()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_HpsMeasure* pNewChild = pChildGroup->mutable_sz();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_HpsMeasure* CT_RPrOriginal::add_szCs()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_HpsMeasure* pNewChild = pChildGroup->mutable_szCs();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_Highlight* CT_RPrOriginal::add_highlight()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Highlight* pNewChild = pChildGroup->mutable_highlight();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_Underline* CT_RPrOriginal::add_u()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Underline* pNewChild = pChildGroup->mutable_u();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_TextEffect* CT_RPrOriginal::add_effect()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_TextEffect* pNewChild = pChildGroup->mutable_effect();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_Border* CT_RPrOriginal::add_bdr()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Border* pNewChild = pChildGroup->mutable_bdr();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_Shd* CT_RPrOriginal::add_shd()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Shd* pNewChild = pChildGroup->mutable_shd();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_FitText* CT_RPrOriginal::add_fitText()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_FitText* pNewChild = pChildGroup->mutable_fitText();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_VerticalAlignRun* CT_RPrOriginal::add_vertAlign()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_VerticalAlignRun* pNewChild = pChildGroup->mutable_vertAlign();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_RPrOriginal::add_rtl()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_rtl();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_RPrOriginal::add_cs()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_cs();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_Em* CT_RPrOriginal::add_em()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Em* pNewChild = pChildGroup->mutable_em();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_Language* CT_RPrOriginal::add_lang()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Language* pNewChild = pChildGroup->mutable_lang();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_EastAsianLayout* CT_RPrOriginal::add_eastAsianLayout()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_EastAsianLayout* pNewChild = pChildGroup->mutable_eastAsianLayout();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_RPrOriginal::add_specVanish()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_specVanish();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_RPrOriginal::add_oMath()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_oMath();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

void CT_RPrOriginal::clear()
{
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
}

void CT_RPrOriginal::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";

    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_rStyle())
            {
                (*iter)->get_rStyle().toXmlElem("w:rStyle", "", _outStream);
            }


            else if ((*iter)->has_rFonts())
            {
                (*iter)->get_rFonts().toXmlElem("w:rFonts", "", _outStream);
            }


            else if ((*iter)->has_b())
            {
                (*iter)->get_b().toXmlElem("w:b", "", _outStream);
            }


            else if ((*iter)->has_bCs())
            {
                (*iter)->get_bCs().toXmlElem("w:bCs", "", _outStream);
            }


            else if ((*iter)->has_i())
            {
                (*iter)->get_i().toXmlElem("w:i", "", _outStream);
            }


            else if ((*iter)->has_iCs())
            {
                (*iter)->get_iCs().toXmlElem("w:iCs", "", _outStream);
            }


            else if ((*iter)->has_caps())
            {
                (*iter)->get_caps().toXmlElem("w:caps", "", _outStream);
            }


            else if ((*iter)->has_smallCaps())
            {
                (*iter)->get_smallCaps().toXmlElem("w:smallCaps", "", _outStream);
            }


            else if ((*iter)->has_strike())
            {
                (*iter)->get_strike().toXmlElem("w:strike", "", _outStream);
            }


            else if ((*iter)->has_dstrike())
            {
                (*iter)->get_dstrike().toXmlElem("w:dstrike", "", _outStream);
            }


            else if ((*iter)->has_outline())
            {
                (*iter)->get_outline().toXmlElem("w:outline", "", _outStream);
            }


            else if ((*iter)->has_shadow())
            {
                (*iter)->get_shadow().toXmlElem("w:shadow", "", _outStream);
            }


            else if ((*iter)->has_emboss())
            {
                (*iter)->get_emboss().toXmlElem("w:emboss", "", _outStream);
            }


            else if ((*iter)->has_imprint())
            {
                (*iter)->get_imprint().toXmlElem("w:imprint", "", _outStream);
            }


            else if ((*iter)->has_noProof())
            {
                (*iter)->get_noProof().toXmlElem("w:noProof", "", _outStream);
            }


            else if ((*iter)->has_snapToGrid())
            {
                (*iter)->get_snapToGrid().toXmlElem("w:snapToGrid", "", _outStream);
            }


            else if ((*iter)->has_vanish())
            {
                (*iter)->get_vanish().toXmlElem("w:vanish", "", _outStream);
            }


            else if ((*iter)->has_webHidden())
            {
                (*iter)->get_webHidden().toXmlElem("w:webHidden", "", _outStream);
            }


            else if ((*iter)->has_color())
            {
                (*iter)->get_color().toXmlElem("w:color", "", _outStream);
            }


            else if ((*iter)->has_spacing())
            {
                (*iter)->get_spacing().toXmlElem("w:spacing", "", _outStream);
            }


            else if ((*iter)->has_w())
            {
                (*iter)->get_w().toXmlElem("w:w", "", _outStream);
            }


            else if ((*iter)->has_kern())
            {
                (*iter)->get_kern().toXmlElem("w:kern", "", _outStream);
            }


            else if ((*iter)->has_position())
            {
                (*iter)->get_position().toXmlElem("w:position", "", _outStream);
            }


            else if ((*iter)->has_sz())
            {
                (*iter)->get_sz().toXmlElem("w:sz", "", _outStream);
            }


            else if ((*iter)->has_szCs())
            {
                (*iter)->get_szCs().toXmlElem("w:szCs", "", _outStream);
            }


            else if ((*iter)->has_highlight())
            {
                (*iter)->get_highlight().toXmlElem("w:highlight", "", _outStream);
            }


            else if ((*iter)->has_u())
            {
                (*iter)->get_u().toXmlElem("w:u", "", _outStream);
            }


            else if ((*iter)->has_effect())
            {
                (*iter)->get_effect().toXmlElem("w:effect", "", _outStream);
            }


            else if ((*iter)->has_bdr())
            {
                (*iter)->get_bdr().toXmlElem("w:bdr", "", _outStream);
            }


            else if ((*iter)->has_shd())
            {
                (*iter)->get_shd().toXmlElem("w:shd", "", _outStream);
            }


            else if ((*iter)->has_fitText())
            {
                (*iter)->get_fitText().toXmlElem("w:fitText", "", _outStream);
            }


            else if ((*iter)->has_vertAlign())
            {
                (*iter)->get_vertAlign().toXmlElem("w:vertAlign", "", _outStream);
            }


            else if ((*iter)->has_rtl())
            {
                (*iter)->get_rtl().toXmlElem("w:rtl", "", _outStream);
            }


            else if ((*iter)->has_cs())
            {
                (*iter)->get_cs().toXmlElem("w:cs", "", _outStream);
            }


            else if ((*iter)->has_em())
            {
                (*iter)->get_em().toXmlElem("w:em", "", _outStream);
            }


            else if ((*iter)->has_lang())
            {
                (*iter)->get_lang().toXmlElem("w:lang", "", _outStream);
            }


            else if ((*iter)->has_eastAsianLayout())
            {
                (*iter)->get_eastAsianLayout().toXmlElem("w:eastAsianLayout", "", _outStream);
            }


            else if ((*iter)->has_specVanish())
            {
                (*iter)->get_specVanish().toXmlElem("w:specVanish", "", _outStream);
            }


            else if ((*iter)->has_oMath())
            {
                (*iter)->get_oMath().toXmlElem("w:oMath", "", _outStream);
            }


        }
    }

    _outStream << "</" << _elemName << ">";
}

const CT_RPrOriginal& CT_RPrOriginal::default_instance()
{
    if (!CT_RPrOriginal::default_instance_)
    {
        CT_RPrOriginal::default_instance_ = new CT_RPrOriginal();
    }
    return *CT_RPrOriginal::default_instance_;
}


// CT_RPrOriginal::ChildGroup_1
CT_RPrOriginal::ChildGroup_1::ChildGroup_1()
    :m_has_rStyle(false),
     m_rStyle(NULL),
     m_has_rFonts(false),
     m_rFonts(NULL),
     m_has_b(false),
     m_b(NULL),
     m_has_bCs(false),
     m_bCs(NULL),
     m_has_i(false),
     m_i(NULL),
     m_has_iCs(false),
     m_iCs(NULL),
     m_has_caps(false),
     m_caps(NULL),
     m_has_smallCaps(false),
     m_smallCaps(NULL),
     m_has_strike(false),
     m_strike(NULL),
     m_has_dstrike(false),
     m_dstrike(NULL),
     m_has_outline(false),
     m_outline(NULL),
     m_has_shadow(false),
     m_shadow(NULL),
     m_has_emboss(false),
     m_emboss(NULL),
     m_has_imprint(false),
     m_imprint(NULL),
     m_has_noProof(false),
     m_noProof(NULL),
     m_has_snapToGrid(false),
     m_snapToGrid(NULL),
     m_has_vanish(false),
     m_vanish(NULL),
     m_has_webHidden(false),
     m_webHidden(NULL),
     m_has_color(false),
     m_color(NULL),
     m_has_spacing(false),
     m_spacing(NULL),
     m_has_w(false),
     m_w(NULL),
     m_has_kern(false),
     m_kern(NULL),
     m_has_position(false),
     m_position(NULL),
     m_has_sz(false),
     m_sz(NULL),
     m_has_szCs(false),
     m_szCs(NULL),
     m_has_highlight(false),
     m_highlight(NULL),
     m_has_u(false),
     m_u(NULL),
     m_has_effect(false),
     m_effect(NULL),
     m_has_bdr(false),
     m_bdr(NULL),
     m_has_shd(false),
     m_shd(NULL),
     m_has_fitText(false),
     m_fitText(NULL),
     m_has_vertAlign(false),
     m_vertAlign(NULL),
     m_has_rtl(false),
     m_rtl(NULL),
     m_has_cs(false),
     m_cs(NULL),
     m_has_em(false),
     m_em(NULL),
     m_has_lang(false),
     m_lang(NULL),
     m_has_eastAsianLayout(false),
     m_eastAsianLayout(NULL),
     m_has_specVanish(false),
     m_specVanish(NULL),
     m_has_oMath(false),
     m_oMath(NULL)
{
}
bool CT_RPrOriginal::ChildGroup_1::has_rStyle() const
{
    return m_has_rStyle;
}

CT_String* CT_RPrOriginal::ChildGroup_1::mutable_rStyle()
{

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_rStyle = true;
    if (!m_rStyle)
    {
        m_rStyle = new CT_String();
    }
    return m_rStyle;
}

const CT_String& CT_RPrOriginal::ChildGroup_1::get_rStyle() const
{
    if (m_rStyle)
    {
        return *m_rStyle;
    }
    return CT_String::default_instance();
}

bool CT_RPrOriginal::ChildGroup_1::has_rFonts() const
{
    return m_has_rFonts;
}

CT_Fonts* CT_RPrOriginal::ChildGroup_1::mutable_rFonts()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_rFonts = true;
    if (!m_rFonts)
    {
        m_rFonts = new CT_Fonts();
    }
    return m_rFonts;
}

const CT_Fonts& CT_RPrOriginal::ChildGroup_1::get_rFonts() const
{
    if (m_rFonts)
    {
        return *m_rFonts;
    }
    return CT_Fonts::default_instance();
}

bool CT_RPrOriginal::ChildGroup_1::has_b() const
{
    return m_has_b;
}

CT_OnOff* CT_RPrOriginal::ChildGroup_1::mutable_b()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_b = true;
    if (!m_b)
    {
        m_b = new CT_OnOff();
    }
    return m_b;
}

const CT_OnOff& CT_RPrOriginal::ChildGroup_1::get_b() const
{
    if (m_b)
    {
        return *m_b;
    }
    return CT_OnOff::default_instance();
}

bool CT_RPrOriginal::ChildGroup_1::has_bCs() const
{
    return m_has_bCs;
}

CT_OnOff* CT_RPrOriginal::ChildGroup_1::mutable_bCs()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_bCs = true;
    if (!m_bCs)
    {
        m_bCs = new CT_OnOff();
    }
    return m_bCs;
}

const CT_OnOff& CT_RPrOriginal::ChildGroup_1::get_bCs() const
{
    if (m_bCs)
    {
        return *m_bCs;
    }
    return CT_OnOff::default_instance();
}

bool CT_RPrOriginal::ChildGroup_1::has_i() const
{
    return m_has_i;
}

CT_OnOff* CT_RPrOriginal::ChildGroup_1::mutable_i()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_i = true;
    if (!m_i)
    {
        m_i = new CT_OnOff();
    }
    return m_i;
}

const CT_OnOff& CT_RPrOriginal::ChildGroup_1::get_i() const
{
    if (m_i)
    {
        return *m_i;
    }
    return CT_OnOff::default_instance();
}

bool CT_RPrOriginal::ChildGroup_1::has_iCs() const
{
    return m_has_iCs;
}

CT_OnOff* CT_RPrOriginal::ChildGroup_1::mutable_iCs()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_iCs = true;
    if (!m_iCs)
    {
        m_iCs = new CT_OnOff();
    }
    return m_iCs;
}

const CT_OnOff& CT_RPrOriginal::ChildGroup_1::get_iCs() const
{
    if (m_iCs)
    {
        return *m_iCs;
    }
    return CT_OnOff::default_instance();
}

bool CT_RPrOriginal::ChildGroup_1::has_caps() const
{
    return m_has_caps;
}

CT_OnOff* CT_RPrOriginal::ChildGroup_1::mutable_caps()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_caps = true;
    if (!m_caps)
    {
        m_caps = new CT_OnOff();
    }
    return m_caps;
}

const CT_OnOff& CT_RPrOriginal::ChildGroup_1::get_caps() const
{
    if (m_caps)
    {
        return *m_caps;
    }
    return CT_OnOff::default_instance();
}

bool CT_RPrOriginal::ChildGroup_1::has_smallCaps() const
{
    return m_has_smallCaps;
}

CT_OnOff* CT_RPrOriginal::ChildGroup_1::mutable_smallCaps()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_smallCaps = true;
    if (!m_smallCaps)
    {
        m_smallCaps = new CT_OnOff();
    }
    return m_smallCaps;
}

const CT_OnOff& CT_RPrOriginal::ChildGroup_1::get_smallCaps() const
{
    if (m_smallCaps)
    {
        return *m_smallCaps;
    }
    return CT_OnOff::default_instance();
}

bool CT_RPrOriginal::ChildGroup_1::has_strike() const
{
    return m_has_strike;
}

CT_OnOff* CT_RPrOriginal::ChildGroup_1::mutable_strike()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_strike = true;
    if (!m_strike)
    {
        m_strike = new CT_OnOff();
    }
    return m_strike;
}

const CT_OnOff& CT_RPrOriginal::ChildGroup_1::get_strike() const
{
    if (m_strike)
    {
        return *m_strike;
    }
    return CT_OnOff::default_instance();
}

bool CT_RPrOriginal::ChildGroup_1::has_dstrike() const
{
    return m_has_dstrike;
}

CT_OnOff* CT_RPrOriginal::ChildGroup_1::mutable_dstrike()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_dstrike = true;
    if (!m_dstrike)
    {
        m_dstrike = new CT_OnOff();
    }
    return m_dstrike;
}

const CT_OnOff& CT_RPrOriginal::ChildGroup_1::get_dstrike() const
{
    if (m_dstrike)
    {
        return *m_dstrike;
    }
    return CT_OnOff::default_instance();
}

bool CT_RPrOriginal::ChildGroup_1::has_outline() const
{
    return m_has_outline;
}

CT_OnOff* CT_RPrOriginal::ChildGroup_1::mutable_outline()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_outline = true;
    if (!m_outline)
    {
        m_outline = new CT_OnOff();
    }
    return m_outline;
}

const CT_OnOff& CT_RPrOriginal::ChildGroup_1::get_outline() const
{
    if (m_outline)
    {
        return *m_outline;
    }
    return CT_OnOff::default_instance();
}

bool CT_RPrOriginal::ChildGroup_1::has_shadow() const
{
    return m_has_shadow;
}

CT_OnOff* CT_RPrOriginal::ChildGroup_1::mutable_shadow()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_shadow = true;
    if (!m_shadow)
    {
        m_shadow = new CT_OnOff();
    }
    return m_shadow;
}

const CT_OnOff& CT_RPrOriginal::ChildGroup_1::get_shadow() const
{
    if (m_shadow)
    {
        return *m_shadow;
    }
    return CT_OnOff::default_instance();
}

bool CT_RPrOriginal::ChildGroup_1::has_emboss() const
{
    return m_has_emboss;
}

CT_OnOff* CT_RPrOriginal::ChildGroup_1::mutable_emboss()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_emboss = true;
    if (!m_emboss)
    {
        m_emboss = new CT_OnOff();
    }
    return m_emboss;
}

const CT_OnOff& CT_RPrOriginal::ChildGroup_1::get_emboss() const
{
    if (m_emboss)
    {
        return *m_emboss;
    }
    return CT_OnOff::default_instance();
}

bool CT_RPrOriginal::ChildGroup_1::has_imprint() const
{
    return m_has_imprint;
}

CT_OnOff* CT_RPrOriginal::ChildGroup_1::mutable_imprint()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_imprint = true;
    if (!m_imprint)
    {
        m_imprint = new CT_OnOff();
    }
    return m_imprint;
}

const CT_OnOff& CT_RPrOriginal::ChildGroup_1::get_imprint() const
{
    if (m_imprint)
    {
        return *m_imprint;
    }
    return CT_OnOff::default_instance();
}

bool CT_RPrOriginal::ChildGroup_1::has_noProof() const
{
    return m_has_noProof;
}

CT_OnOff* CT_RPrOriginal::ChildGroup_1::mutable_noProof()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_noProof = true;
    if (!m_noProof)
    {
        m_noProof = new CT_OnOff();
    }
    return m_noProof;
}

const CT_OnOff& CT_RPrOriginal::ChildGroup_1::get_noProof() const
{
    if (m_noProof)
    {
        return *m_noProof;
    }
    return CT_OnOff::default_instance();
}

bool CT_RPrOriginal::ChildGroup_1::has_snapToGrid() const
{
    return m_has_snapToGrid;
}

CT_OnOff* CT_RPrOriginal::ChildGroup_1::mutable_snapToGrid()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_snapToGrid = true;
    if (!m_snapToGrid)
    {
        m_snapToGrid = new CT_OnOff();
    }
    return m_snapToGrid;
}

const CT_OnOff& CT_RPrOriginal::ChildGroup_1::get_snapToGrid() const
{
    if (m_snapToGrid)
    {
        return *m_snapToGrid;
    }
    return CT_OnOff::default_instance();
}

bool CT_RPrOriginal::ChildGroup_1::has_vanish() const
{
    return m_has_vanish;
}

CT_OnOff* CT_RPrOriginal::ChildGroup_1::mutable_vanish()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_vanish = true;
    if (!m_vanish)
    {
        m_vanish = new CT_OnOff();
    }
    return m_vanish;
}

const CT_OnOff& CT_RPrOriginal::ChildGroup_1::get_vanish() const
{
    if (m_vanish)
    {
        return *m_vanish;
    }
    return CT_OnOff::default_instance();
}

bool CT_RPrOriginal::ChildGroup_1::has_webHidden() const
{
    return m_has_webHidden;
}

CT_OnOff* CT_RPrOriginal::ChildGroup_1::mutable_webHidden()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_webHidden = true;
    if (!m_webHidden)
    {
        m_webHidden = new CT_OnOff();
    }
    return m_webHidden;
}

const CT_OnOff& CT_RPrOriginal::ChildGroup_1::get_webHidden() const
{
    if (m_webHidden)
    {
        return *m_webHidden;
    }
    return CT_OnOff::default_instance();
}

bool CT_RPrOriginal::ChildGroup_1::has_color() const
{
    return m_has_color;
}

CT_Color* CT_RPrOriginal::ChildGroup_1::mutable_color()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_color = true;
    if (!m_color)
    {
        m_color = new CT_Color();
    }
    return m_color;
}

const CT_Color& CT_RPrOriginal::ChildGroup_1::get_color() const
{
    if (m_color)
    {
        return *m_color;
    }
    return CT_Color::default_instance();
}

bool CT_RPrOriginal::ChildGroup_1::has_spacing() const
{
    return m_has_spacing;
}

CT_SignedTwipsMeasure* CT_RPrOriginal::ChildGroup_1::mutable_spacing()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_spacing = true;
    if (!m_spacing)
    {
        m_spacing = new CT_SignedTwipsMeasure();
    }
    return m_spacing;
}

const CT_SignedTwipsMeasure& CT_RPrOriginal::ChildGroup_1::get_spacing() const
{
    if (m_spacing)
    {
        return *m_spacing;
    }
    return CT_SignedTwipsMeasure::default_instance();
}

bool CT_RPrOriginal::ChildGroup_1::has_w() const
{
    return m_has_w;
}

CT_TextScale* CT_RPrOriginal::ChildGroup_1::mutable_w()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_w = true;
    if (!m_w)
    {
        m_w = new CT_TextScale();
    }
    return m_w;
}

const CT_TextScale& CT_RPrOriginal::ChildGroup_1::get_w() const
{
    if (m_w)
    {
        return *m_w;
    }
    return CT_TextScale::default_instance();
}

bool CT_RPrOriginal::ChildGroup_1::has_kern() const
{
    return m_has_kern;
}

CT_HpsMeasure* CT_RPrOriginal::ChildGroup_1::mutable_kern()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_kern = true;
    if (!m_kern)
    {
        m_kern = new CT_HpsMeasure();
    }
    return m_kern;
}

const CT_HpsMeasure& CT_RPrOriginal::ChildGroup_1::get_kern() const
{
    if (m_kern)
    {
        return *m_kern;
    }
    return CT_HpsMeasure::default_instance();
}

bool CT_RPrOriginal::ChildGroup_1::has_position() const
{
    return m_has_position;
}

CT_SignedHpsMeasure* CT_RPrOriginal::ChildGroup_1::mutable_position()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_position = true;
    if (!m_position)
    {
        m_position = new CT_SignedHpsMeasure();
    }
    return m_position;
}

const CT_SignedHpsMeasure& CT_RPrOriginal::ChildGroup_1::get_position() const
{
    if (m_position)
    {
        return *m_position;
    }
    return CT_SignedHpsMeasure::default_instance();
}

bool CT_RPrOriginal::ChildGroup_1::has_sz() const
{
    return m_has_sz;
}

CT_HpsMeasure* CT_RPrOriginal::ChildGroup_1::mutable_sz()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_sz = true;
    if (!m_sz)
    {
        m_sz = new CT_HpsMeasure();
    }
    return m_sz;
}

const CT_HpsMeasure& CT_RPrOriginal::ChildGroup_1::get_sz() const
{
    if (m_sz)
    {
        return *m_sz;
    }
    return CT_HpsMeasure::default_instance();
}

bool CT_RPrOriginal::ChildGroup_1::has_szCs() const
{
    return m_has_szCs;
}

CT_HpsMeasure* CT_RPrOriginal::ChildGroup_1::mutable_szCs()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_szCs = true;
    if (!m_szCs)
    {
        m_szCs = new CT_HpsMeasure();
    }
    return m_szCs;
}

const CT_HpsMeasure& CT_RPrOriginal::ChildGroup_1::get_szCs() const
{
    if (m_szCs)
    {
        return *m_szCs;
    }
    return CT_HpsMeasure::default_instance();
}

bool CT_RPrOriginal::ChildGroup_1::has_highlight() const
{
    return m_has_highlight;
}

CT_Highlight* CT_RPrOriginal::ChildGroup_1::mutable_highlight()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_highlight = true;
    if (!m_highlight)
    {
        m_highlight = new CT_Highlight();
    }
    return m_highlight;
}

const CT_Highlight& CT_RPrOriginal::ChildGroup_1::get_highlight() const
{
    if (m_highlight)
    {
        return *m_highlight;
    }
    return CT_Highlight::default_instance();
}

bool CT_RPrOriginal::ChildGroup_1::has_u() const
{
    return m_has_u;
}

CT_Underline* CT_RPrOriginal::ChildGroup_1::mutable_u()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_u = true;
    if (!m_u)
    {
        m_u = new CT_Underline();
    }
    return m_u;
}

const CT_Underline& CT_RPrOriginal::ChildGroup_1::get_u() const
{
    if (m_u)
    {
        return *m_u;
    }
    return CT_Underline::default_instance();
}

bool CT_RPrOriginal::ChildGroup_1::has_effect() const
{
    return m_has_effect;
}

CT_TextEffect* CT_RPrOriginal::ChildGroup_1::mutable_effect()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_effect = true;
    if (!m_effect)
    {
        m_effect = new CT_TextEffect();
    }
    return m_effect;
}

const CT_TextEffect& CT_RPrOriginal::ChildGroup_1::get_effect() const
{
    if (m_effect)
    {
        return *m_effect;
    }
    return CT_TextEffect::default_instance();
}

bool CT_RPrOriginal::ChildGroup_1::has_bdr() const
{
    return m_has_bdr;
}

CT_Border* CT_RPrOriginal::ChildGroup_1::mutable_bdr()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_bdr = true;
    if (!m_bdr)
    {
        m_bdr = new CT_Border();
    }
    return m_bdr;
}

const CT_Border& CT_RPrOriginal::ChildGroup_1::get_bdr() const
{
    if (m_bdr)
    {
        return *m_bdr;
    }
    return CT_Border::default_instance();
}

bool CT_RPrOriginal::ChildGroup_1::has_shd() const
{
    return m_has_shd;
}

CT_Shd* CT_RPrOriginal::ChildGroup_1::mutable_shd()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_shd = true;
    if (!m_shd)
    {
        m_shd = new CT_Shd();
    }
    return m_shd;
}

const CT_Shd& CT_RPrOriginal::ChildGroup_1::get_shd() const
{
    if (m_shd)
    {
        return *m_shd;
    }
    return CT_Shd::default_instance();
}

bool CT_RPrOriginal::ChildGroup_1::has_fitText() const
{
    return m_has_fitText;
}

CT_FitText* CT_RPrOriginal::ChildGroup_1::mutable_fitText()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_fitText = true;
    if (!m_fitText)
    {
        m_fitText = new CT_FitText();
    }
    return m_fitText;
}

const CT_FitText& CT_RPrOriginal::ChildGroup_1::get_fitText() const
{
    if (m_fitText)
    {
        return *m_fitText;
    }
    return CT_FitText::default_instance();
}

bool CT_RPrOriginal::ChildGroup_1::has_vertAlign() const
{
    return m_has_vertAlign;
}

CT_VerticalAlignRun* CT_RPrOriginal::ChildGroup_1::mutable_vertAlign()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_vertAlign = true;
    if (!m_vertAlign)
    {
        m_vertAlign = new CT_VerticalAlignRun();
    }
    return m_vertAlign;
}

const CT_VerticalAlignRun& CT_RPrOriginal::ChildGroup_1::get_vertAlign() const
{
    if (m_vertAlign)
    {
        return *m_vertAlign;
    }
    return CT_VerticalAlignRun::default_instance();
}

bool CT_RPrOriginal::ChildGroup_1::has_rtl() const
{
    return m_has_rtl;
}

CT_OnOff* CT_RPrOriginal::ChildGroup_1::mutable_rtl()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_rtl = true;
    if (!m_rtl)
    {
        m_rtl = new CT_OnOff();
    }
    return m_rtl;
}

const CT_OnOff& CT_RPrOriginal::ChildGroup_1::get_rtl() const
{
    if (m_rtl)
    {
        return *m_rtl;
    }
    return CT_OnOff::default_instance();
}

bool CT_RPrOriginal::ChildGroup_1::has_cs() const
{
    return m_has_cs;
}

CT_OnOff* CT_RPrOriginal::ChildGroup_1::mutable_cs()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_cs = true;
    if (!m_cs)
    {
        m_cs = new CT_OnOff();
    }
    return m_cs;
}

const CT_OnOff& CT_RPrOriginal::ChildGroup_1::get_cs() const
{
    if (m_cs)
    {
        return *m_cs;
    }
    return CT_OnOff::default_instance();
}

bool CT_RPrOriginal::ChildGroup_1::has_em() const
{
    return m_has_em;
}

CT_Em* CT_RPrOriginal::ChildGroup_1::mutable_em()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_em = true;
    if (!m_em)
    {
        m_em = new CT_Em();
    }
    return m_em;
}

const CT_Em& CT_RPrOriginal::ChildGroup_1::get_em() const
{
    if (m_em)
    {
        return *m_em;
    }
    return CT_Em::default_instance();
}

bool CT_RPrOriginal::ChildGroup_1::has_lang() const
{
    return m_has_lang;
}

CT_Language* CT_RPrOriginal::ChildGroup_1::mutable_lang()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_lang = true;
    if (!m_lang)
    {
        m_lang = new CT_Language();
    }
    return m_lang;
}

const CT_Language& CT_RPrOriginal::ChildGroup_1::get_lang() const
{
    if (m_lang)
    {
        return *m_lang;
    }
    return CT_Language::default_instance();
}

bool CT_RPrOriginal::ChildGroup_1::has_eastAsianLayout() const
{
    return m_has_eastAsianLayout;
}

CT_EastAsianLayout* CT_RPrOriginal::ChildGroup_1::mutable_eastAsianLayout()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_eastAsianLayout = true;
    if (!m_eastAsianLayout)
    {
        m_eastAsianLayout = new CT_EastAsianLayout();
    }
    return m_eastAsianLayout;
}

const CT_EastAsianLayout& CT_RPrOriginal::ChildGroup_1::get_eastAsianLayout() const
{
    if (m_eastAsianLayout)
    {
        return *m_eastAsianLayout;
    }
    return CT_EastAsianLayout::default_instance();
}

bool CT_RPrOriginal::ChildGroup_1::has_specVanish() const
{
    return m_has_specVanish;
}

CT_OnOff* CT_RPrOriginal::ChildGroup_1::mutable_specVanish()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_specVanish = true;
    if (!m_specVanish)
    {
        m_specVanish = new CT_OnOff();
    }
    return m_specVanish;
}

const CT_OnOff& CT_RPrOriginal::ChildGroup_1::get_specVanish() const
{
    if (m_specVanish)
    {
        return *m_specVanish;
    }
    return CT_OnOff::default_instance();
}

bool CT_RPrOriginal::ChildGroup_1::has_oMath() const
{
    return m_has_oMath;
}

CT_OnOff* CT_RPrOriginal::ChildGroup_1::mutable_oMath()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = true;
    if (!m_oMath)
    {
        m_oMath = new CT_OnOff();
    }
    return m_oMath;
}

const CT_OnOff& CT_RPrOriginal::ChildGroup_1::get_oMath() const
{
    if (m_oMath)
    {
        return *m_oMath;
    }
    return CT_OnOff::default_instance();
}

CT_RPrOriginal* CT_RPrOriginal::default_instance_ = NULL;

// CT_ParaRPrOriginal
CT_ParaRPrOriginal::CT_ParaRPrOriginal()
    :m_has_ins(false),
     m_ins(NULL),
     m_has_del(false),
     m_del(NULL),
     m_has_moveFrom(false),
     m_moveFrom(NULL),
     m_has_moveTo(false),
     m_moveTo(NULL)
{
}
CT_ParaRPrOriginal::~CT_ParaRPrOriginal()
{
    clear();
}
bool CT_ParaRPrOriginal::has_ins() const
{
    return m_has_ins;
}

CT_TrackChange* CT_ParaRPrOriginal::mutable_ins()
{
    m_has_ins = true;
    if (!m_ins)
    {
        m_ins = new CT_TrackChange();
    }
    return m_ins;
}

const CT_TrackChange& CT_ParaRPrOriginal::get_ins() const
{
    if (m_ins)
    {
        return *m_ins;
    }
    return CT_TrackChange::default_instance();
}

bool CT_ParaRPrOriginal::has_del() const
{
    return m_has_del;
}

CT_TrackChange* CT_ParaRPrOriginal::mutable_del()
{
    m_has_del = true;
    if (!m_del)
    {
        m_del = new CT_TrackChange();
    }
    return m_del;
}

const CT_TrackChange& CT_ParaRPrOriginal::get_del() const
{
    if (m_del)
    {
        return *m_del;
    }
    return CT_TrackChange::default_instance();
}

bool CT_ParaRPrOriginal::has_moveFrom() const
{
    return m_has_moveFrom;
}

CT_TrackChange* CT_ParaRPrOriginal::mutable_moveFrom()
{
    m_has_moveFrom = true;
    if (!m_moveFrom)
    {
        m_moveFrom = new CT_TrackChange();
    }
    return m_moveFrom;
}

const CT_TrackChange& CT_ParaRPrOriginal::get_moveFrom() const
{
    if (m_moveFrom)
    {
        return *m_moveFrom;
    }
    return CT_TrackChange::default_instance();
}

bool CT_ParaRPrOriginal::has_moveTo() const
{
    return m_has_moveTo;
}

CT_TrackChange* CT_ParaRPrOriginal::mutable_moveTo()
{
    m_has_moveTo = true;
    if (!m_moveTo)
    {
        m_moveTo = new CT_TrackChange();
    }
    return m_moveTo;
}

const CT_TrackChange& CT_ParaRPrOriginal::get_moveTo() const
{
    if (m_moveTo)
    {
        return *m_moveTo;
    }
    return CT_TrackChange::default_instance();
}

CT_String* CT_ParaRPrOriginal::add_rStyle()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_String* pNewChild = pChildGroup->mutable_rStyle();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_Fonts* CT_ParaRPrOriginal::add_rFonts()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Fonts* pNewChild = pChildGroup->mutable_rFonts();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_ParaRPrOriginal::add_b()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_b();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_ParaRPrOriginal::add_bCs()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_bCs();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_ParaRPrOriginal::add_i()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_i();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_ParaRPrOriginal::add_iCs()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_iCs();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_ParaRPrOriginal::add_caps()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_caps();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_ParaRPrOriginal::add_smallCaps()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_smallCaps();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_ParaRPrOriginal::add_strike()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_strike();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_ParaRPrOriginal::add_dstrike()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_dstrike();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_ParaRPrOriginal::add_outline()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_outline();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_ParaRPrOriginal::add_shadow()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_shadow();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_ParaRPrOriginal::add_emboss()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_emboss();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_ParaRPrOriginal::add_imprint()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_imprint();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_ParaRPrOriginal::add_noProof()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_noProof();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_ParaRPrOriginal::add_snapToGrid()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_snapToGrid();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_ParaRPrOriginal::add_vanish()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_vanish();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_ParaRPrOriginal::add_webHidden()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_webHidden();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_Color* CT_ParaRPrOriginal::add_color()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Color* pNewChild = pChildGroup->mutable_color();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_SignedTwipsMeasure* CT_ParaRPrOriginal::add_spacing()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_SignedTwipsMeasure* pNewChild = pChildGroup->mutable_spacing();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_TextScale* CT_ParaRPrOriginal::add_w()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_TextScale* pNewChild = pChildGroup->mutable_w();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_HpsMeasure* CT_ParaRPrOriginal::add_kern()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_HpsMeasure* pNewChild = pChildGroup->mutable_kern();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_SignedHpsMeasure* CT_ParaRPrOriginal::add_position()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_SignedHpsMeasure* pNewChild = pChildGroup->mutable_position();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_HpsMeasure* CT_ParaRPrOriginal::add_sz()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_HpsMeasure* pNewChild = pChildGroup->mutable_sz();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_HpsMeasure* CT_ParaRPrOriginal::add_szCs()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_HpsMeasure* pNewChild = pChildGroup->mutable_szCs();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_Highlight* CT_ParaRPrOriginal::add_highlight()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Highlight* pNewChild = pChildGroup->mutable_highlight();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_Underline* CT_ParaRPrOriginal::add_u()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Underline* pNewChild = pChildGroup->mutable_u();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_TextEffect* CT_ParaRPrOriginal::add_effect()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_TextEffect* pNewChild = pChildGroup->mutable_effect();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_Border* CT_ParaRPrOriginal::add_bdr()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Border* pNewChild = pChildGroup->mutable_bdr();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_Shd* CT_ParaRPrOriginal::add_shd()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Shd* pNewChild = pChildGroup->mutable_shd();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_FitText* CT_ParaRPrOriginal::add_fitText()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_FitText* pNewChild = pChildGroup->mutable_fitText();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_VerticalAlignRun* CT_ParaRPrOriginal::add_vertAlign()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_VerticalAlignRun* pNewChild = pChildGroup->mutable_vertAlign();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_ParaRPrOriginal::add_rtl()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_rtl();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_ParaRPrOriginal::add_cs()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_cs();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_Em* CT_ParaRPrOriginal::add_em()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Em* pNewChild = pChildGroup->mutable_em();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_Language* CT_ParaRPrOriginal::add_lang()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Language* pNewChild = pChildGroup->mutable_lang();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_EastAsianLayout* CT_ParaRPrOriginal::add_eastAsianLayout()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_EastAsianLayout* pNewChild = pChildGroup->mutable_eastAsianLayout();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_ParaRPrOriginal::add_specVanish()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_specVanish();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_ParaRPrOriginal::add_oMath()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_oMath();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

void CT_ParaRPrOriginal::clear()
{
    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }


    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }


    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }


    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }


    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
}

void CT_ParaRPrOriginal::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";


    if (m_has_ins)
    {
        m_ins->toXmlElem("w:ins", "", _outStream);
    }


    if (m_has_del)
    {
        m_del->toXmlElem("w:del", "", _outStream);
    }


    if (m_has_moveFrom)
    {
        m_moveFrom->toXmlElem("w:moveFrom", "", _outStream);
    }


    if (m_has_moveTo)
    {
        m_moveTo->toXmlElem("w:moveTo", "", _outStream);
    }

    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_rStyle())
            {
                (*iter)->get_rStyle().toXmlElem("w:rStyle", "", _outStream);
            }


            else if ((*iter)->has_rFonts())
            {
                (*iter)->get_rFonts().toXmlElem("w:rFonts", "", _outStream);
            }


            else if ((*iter)->has_b())
            {
                (*iter)->get_b().toXmlElem("w:b", "", _outStream);
            }


            else if ((*iter)->has_bCs())
            {
                (*iter)->get_bCs().toXmlElem("w:bCs", "", _outStream);
            }


            else if ((*iter)->has_i())
            {
                (*iter)->get_i().toXmlElem("w:i", "", _outStream);
            }


            else if ((*iter)->has_iCs())
            {
                (*iter)->get_iCs().toXmlElem("w:iCs", "", _outStream);
            }


            else if ((*iter)->has_caps())
            {
                (*iter)->get_caps().toXmlElem("w:caps", "", _outStream);
            }


            else if ((*iter)->has_smallCaps())
            {
                (*iter)->get_smallCaps().toXmlElem("w:smallCaps", "", _outStream);
            }


            else if ((*iter)->has_strike())
            {
                (*iter)->get_strike().toXmlElem("w:strike", "", _outStream);
            }


            else if ((*iter)->has_dstrike())
            {
                (*iter)->get_dstrike().toXmlElem("w:dstrike", "", _outStream);
            }


            else if ((*iter)->has_outline())
            {
                (*iter)->get_outline().toXmlElem("w:outline", "", _outStream);
            }


            else if ((*iter)->has_shadow())
            {
                (*iter)->get_shadow().toXmlElem("w:shadow", "", _outStream);
            }


            else if ((*iter)->has_emboss())
            {
                (*iter)->get_emboss().toXmlElem("w:emboss", "", _outStream);
            }


            else if ((*iter)->has_imprint())
            {
                (*iter)->get_imprint().toXmlElem("w:imprint", "", _outStream);
            }


            else if ((*iter)->has_noProof())
            {
                (*iter)->get_noProof().toXmlElem("w:noProof", "", _outStream);
            }


            else if ((*iter)->has_snapToGrid())
            {
                (*iter)->get_snapToGrid().toXmlElem("w:snapToGrid", "", _outStream);
            }


            else if ((*iter)->has_vanish())
            {
                (*iter)->get_vanish().toXmlElem("w:vanish", "", _outStream);
            }


            else if ((*iter)->has_webHidden())
            {
                (*iter)->get_webHidden().toXmlElem("w:webHidden", "", _outStream);
            }


            else if ((*iter)->has_color())
            {
                (*iter)->get_color().toXmlElem("w:color", "", _outStream);
            }


            else if ((*iter)->has_spacing())
            {
                (*iter)->get_spacing().toXmlElem("w:spacing", "", _outStream);
            }


            else if ((*iter)->has_w())
            {
                (*iter)->get_w().toXmlElem("w:w", "", _outStream);
            }


            else if ((*iter)->has_kern())
            {
                (*iter)->get_kern().toXmlElem("w:kern", "", _outStream);
            }


            else if ((*iter)->has_position())
            {
                (*iter)->get_position().toXmlElem("w:position", "", _outStream);
            }


            else if ((*iter)->has_sz())
            {
                (*iter)->get_sz().toXmlElem("w:sz", "", _outStream);
            }


            else if ((*iter)->has_szCs())
            {
                (*iter)->get_szCs().toXmlElem("w:szCs", "", _outStream);
            }


            else if ((*iter)->has_highlight())
            {
                (*iter)->get_highlight().toXmlElem("w:highlight", "", _outStream);
            }


            else if ((*iter)->has_u())
            {
                (*iter)->get_u().toXmlElem("w:u", "", _outStream);
            }


            else if ((*iter)->has_effect())
            {
                (*iter)->get_effect().toXmlElem("w:effect", "", _outStream);
            }


            else if ((*iter)->has_bdr())
            {
                (*iter)->get_bdr().toXmlElem("w:bdr", "", _outStream);
            }


            else if ((*iter)->has_shd())
            {
                (*iter)->get_shd().toXmlElem("w:shd", "", _outStream);
            }


            else if ((*iter)->has_fitText())
            {
                (*iter)->get_fitText().toXmlElem("w:fitText", "", _outStream);
            }


            else if ((*iter)->has_vertAlign())
            {
                (*iter)->get_vertAlign().toXmlElem("w:vertAlign", "", _outStream);
            }


            else if ((*iter)->has_rtl())
            {
                (*iter)->get_rtl().toXmlElem("w:rtl", "", _outStream);
            }


            else if ((*iter)->has_cs())
            {
                (*iter)->get_cs().toXmlElem("w:cs", "", _outStream);
            }


            else if ((*iter)->has_em())
            {
                (*iter)->get_em().toXmlElem("w:em", "", _outStream);
            }


            else if ((*iter)->has_lang())
            {
                (*iter)->get_lang().toXmlElem("w:lang", "", _outStream);
            }


            else if ((*iter)->has_eastAsianLayout())
            {
                (*iter)->get_eastAsianLayout().toXmlElem("w:eastAsianLayout", "", _outStream);
            }


            else if ((*iter)->has_specVanish())
            {
                (*iter)->get_specVanish().toXmlElem("w:specVanish", "", _outStream);
            }


            else if ((*iter)->has_oMath())
            {
                (*iter)->get_oMath().toXmlElem("w:oMath", "", _outStream);
            }


        }
    }

    _outStream << "</" << _elemName << ">";
}

const CT_ParaRPrOriginal& CT_ParaRPrOriginal::default_instance()
{
    if (!CT_ParaRPrOriginal::default_instance_)
    {
        CT_ParaRPrOriginal::default_instance_ = new CT_ParaRPrOriginal();
    }
    return *CT_ParaRPrOriginal::default_instance_;
}


// CT_ParaRPrOriginal::ChildGroup_1
CT_ParaRPrOriginal::ChildGroup_1::ChildGroup_1()
    :m_has_rStyle(false),
     m_rStyle(NULL),
     m_has_rFonts(false),
     m_rFonts(NULL),
     m_has_b(false),
     m_b(NULL),
     m_has_bCs(false),
     m_bCs(NULL),
     m_has_i(false),
     m_i(NULL),
     m_has_iCs(false),
     m_iCs(NULL),
     m_has_caps(false),
     m_caps(NULL),
     m_has_smallCaps(false),
     m_smallCaps(NULL),
     m_has_strike(false),
     m_strike(NULL),
     m_has_dstrike(false),
     m_dstrike(NULL),
     m_has_outline(false),
     m_outline(NULL),
     m_has_shadow(false),
     m_shadow(NULL),
     m_has_emboss(false),
     m_emboss(NULL),
     m_has_imprint(false),
     m_imprint(NULL),
     m_has_noProof(false),
     m_noProof(NULL),
     m_has_snapToGrid(false),
     m_snapToGrid(NULL),
     m_has_vanish(false),
     m_vanish(NULL),
     m_has_webHidden(false),
     m_webHidden(NULL),
     m_has_color(false),
     m_color(NULL),
     m_has_spacing(false),
     m_spacing(NULL),
     m_has_w(false),
     m_w(NULL),
     m_has_kern(false),
     m_kern(NULL),
     m_has_position(false),
     m_position(NULL),
     m_has_sz(false),
     m_sz(NULL),
     m_has_szCs(false),
     m_szCs(NULL),
     m_has_highlight(false),
     m_highlight(NULL),
     m_has_u(false),
     m_u(NULL),
     m_has_effect(false),
     m_effect(NULL),
     m_has_bdr(false),
     m_bdr(NULL),
     m_has_shd(false),
     m_shd(NULL),
     m_has_fitText(false),
     m_fitText(NULL),
     m_has_vertAlign(false),
     m_vertAlign(NULL),
     m_has_rtl(false),
     m_rtl(NULL),
     m_has_cs(false),
     m_cs(NULL),
     m_has_em(false),
     m_em(NULL),
     m_has_lang(false),
     m_lang(NULL),
     m_has_eastAsianLayout(false),
     m_eastAsianLayout(NULL),
     m_has_specVanish(false),
     m_specVanish(NULL),
     m_has_oMath(false),
     m_oMath(NULL)
{
}
bool CT_ParaRPrOriginal::ChildGroup_1::has_rStyle() const
{
    return m_has_rStyle;
}

CT_String* CT_ParaRPrOriginal::ChildGroup_1::mutable_rStyle()
{

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_rStyle = true;
    if (!m_rStyle)
    {
        m_rStyle = new CT_String();
    }
    return m_rStyle;
}

const CT_String& CT_ParaRPrOriginal::ChildGroup_1::get_rStyle() const
{
    if (m_rStyle)
    {
        return *m_rStyle;
    }
    return CT_String::default_instance();
}

bool CT_ParaRPrOriginal::ChildGroup_1::has_rFonts() const
{
    return m_has_rFonts;
}

CT_Fonts* CT_ParaRPrOriginal::ChildGroup_1::mutable_rFonts()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_rFonts = true;
    if (!m_rFonts)
    {
        m_rFonts = new CT_Fonts();
    }
    return m_rFonts;
}

const CT_Fonts& CT_ParaRPrOriginal::ChildGroup_1::get_rFonts() const
{
    if (m_rFonts)
    {
        return *m_rFonts;
    }
    return CT_Fonts::default_instance();
}

bool CT_ParaRPrOriginal::ChildGroup_1::has_b() const
{
    return m_has_b;
}

CT_OnOff* CT_ParaRPrOriginal::ChildGroup_1::mutable_b()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_b = true;
    if (!m_b)
    {
        m_b = new CT_OnOff();
    }
    return m_b;
}

const CT_OnOff& CT_ParaRPrOriginal::ChildGroup_1::get_b() const
{
    if (m_b)
    {
        return *m_b;
    }
    return CT_OnOff::default_instance();
}

bool CT_ParaRPrOriginal::ChildGroup_1::has_bCs() const
{
    return m_has_bCs;
}

CT_OnOff* CT_ParaRPrOriginal::ChildGroup_1::mutable_bCs()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_bCs = true;
    if (!m_bCs)
    {
        m_bCs = new CT_OnOff();
    }
    return m_bCs;
}

const CT_OnOff& CT_ParaRPrOriginal::ChildGroup_1::get_bCs() const
{
    if (m_bCs)
    {
        return *m_bCs;
    }
    return CT_OnOff::default_instance();
}

bool CT_ParaRPrOriginal::ChildGroup_1::has_i() const
{
    return m_has_i;
}

CT_OnOff* CT_ParaRPrOriginal::ChildGroup_1::mutable_i()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_i = true;
    if (!m_i)
    {
        m_i = new CT_OnOff();
    }
    return m_i;
}

const CT_OnOff& CT_ParaRPrOriginal::ChildGroup_1::get_i() const
{
    if (m_i)
    {
        return *m_i;
    }
    return CT_OnOff::default_instance();
}

bool CT_ParaRPrOriginal::ChildGroup_1::has_iCs() const
{
    return m_has_iCs;
}

CT_OnOff* CT_ParaRPrOriginal::ChildGroup_1::mutable_iCs()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_iCs = true;
    if (!m_iCs)
    {
        m_iCs = new CT_OnOff();
    }
    return m_iCs;
}

const CT_OnOff& CT_ParaRPrOriginal::ChildGroup_1::get_iCs() const
{
    if (m_iCs)
    {
        return *m_iCs;
    }
    return CT_OnOff::default_instance();
}

bool CT_ParaRPrOriginal::ChildGroup_1::has_caps() const
{
    return m_has_caps;
}

CT_OnOff* CT_ParaRPrOriginal::ChildGroup_1::mutable_caps()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_caps = true;
    if (!m_caps)
    {
        m_caps = new CT_OnOff();
    }
    return m_caps;
}

const CT_OnOff& CT_ParaRPrOriginal::ChildGroup_1::get_caps() const
{
    if (m_caps)
    {
        return *m_caps;
    }
    return CT_OnOff::default_instance();
}

bool CT_ParaRPrOriginal::ChildGroup_1::has_smallCaps() const
{
    return m_has_smallCaps;
}

CT_OnOff* CT_ParaRPrOriginal::ChildGroup_1::mutable_smallCaps()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_smallCaps = true;
    if (!m_smallCaps)
    {
        m_smallCaps = new CT_OnOff();
    }
    return m_smallCaps;
}

const CT_OnOff& CT_ParaRPrOriginal::ChildGroup_1::get_smallCaps() const
{
    if (m_smallCaps)
    {
        return *m_smallCaps;
    }
    return CT_OnOff::default_instance();
}

bool CT_ParaRPrOriginal::ChildGroup_1::has_strike() const
{
    return m_has_strike;
}

CT_OnOff* CT_ParaRPrOriginal::ChildGroup_1::mutable_strike()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_strike = true;
    if (!m_strike)
    {
        m_strike = new CT_OnOff();
    }
    return m_strike;
}

const CT_OnOff& CT_ParaRPrOriginal::ChildGroup_1::get_strike() const
{
    if (m_strike)
    {
        return *m_strike;
    }
    return CT_OnOff::default_instance();
}

bool CT_ParaRPrOriginal::ChildGroup_1::has_dstrike() const
{
    return m_has_dstrike;
}

CT_OnOff* CT_ParaRPrOriginal::ChildGroup_1::mutable_dstrike()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_dstrike = true;
    if (!m_dstrike)
    {
        m_dstrike = new CT_OnOff();
    }
    return m_dstrike;
}

const CT_OnOff& CT_ParaRPrOriginal::ChildGroup_1::get_dstrike() const
{
    if (m_dstrike)
    {
        return *m_dstrike;
    }
    return CT_OnOff::default_instance();
}

bool CT_ParaRPrOriginal::ChildGroup_1::has_outline() const
{
    return m_has_outline;
}

CT_OnOff* CT_ParaRPrOriginal::ChildGroup_1::mutable_outline()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_outline = true;
    if (!m_outline)
    {
        m_outline = new CT_OnOff();
    }
    return m_outline;
}

const CT_OnOff& CT_ParaRPrOriginal::ChildGroup_1::get_outline() const
{
    if (m_outline)
    {
        return *m_outline;
    }
    return CT_OnOff::default_instance();
}

bool CT_ParaRPrOriginal::ChildGroup_1::has_shadow() const
{
    return m_has_shadow;
}

CT_OnOff* CT_ParaRPrOriginal::ChildGroup_1::mutable_shadow()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_shadow = true;
    if (!m_shadow)
    {
        m_shadow = new CT_OnOff();
    }
    return m_shadow;
}

const CT_OnOff& CT_ParaRPrOriginal::ChildGroup_1::get_shadow() const
{
    if (m_shadow)
    {
        return *m_shadow;
    }
    return CT_OnOff::default_instance();
}

bool CT_ParaRPrOriginal::ChildGroup_1::has_emboss() const
{
    return m_has_emboss;
}

CT_OnOff* CT_ParaRPrOriginal::ChildGroup_1::mutable_emboss()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_emboss = true;
    if (!m_emboss)
    {
        m_emboss = new CT_OnOff();
    }
    return m_emboss;
}

const CT_OnOff& CT_ParaRPrOriginal::ChildGroup_1::get_emboss() const
{
    if (m_emboss)
    {
        return *m_emboss;
    }
    return CT_OnOff::default_instance();
}

bool CT_ParaRPrOriginal::ChildGroup_1::has_imprint() const
{
    return m_has_imprint;
}

CT_OnOff* CT_ParaRPrOriginal::ChildGroup_1::mutable_imprint()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_imprint = true;
    if (!m_imprint)
    {
        m_imprint = new CT_OnOff();
    }
    return m_imprint;
}

const CT_OnOff& CT_ParaRPrOriginal::ChildGroup_1::get_imprint() const
{
    if (m_imprint)
    {
        return *m_imprint;
    }
    return CT_OnOff::default_instance();
}

bool CT_ParaRPrOriginal::ChildGroup_1::has_noProof() const
{
    return m_has_noProof;
}

CT_OnOff* CT_ParaRPrOriginal::ChildGroup_1::mutable_noProof()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_noProof = true;
    if (!m_noProof)
    {
        m_noProof = new CT_OnOff();
    }
    return m_noProof;
}

const CT_OnOff& CT_ParaRPrOriginal::ChildGroup_1::get_noProof() const
{
    if (m_noProof)
    {
        return *m_noProof;
    }
    return CT_OnOff::default_instance();
}

bool CT_ParaRPrOriginal::ChildGroup_1::has_snapToGrid() const
{
    return m_has_snapToGrid;
}

CT_OnOff* CT_ParaRPrOriginal::ChildGroup_1::mutable_snapToGrid()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_snapToGrid = true;
    if (!m_snapToGrid)
    {
        m_snapToGrid = new CT_OnOff();
    }
    return m_snapToGrid;
}

const CT_OnOff& CT_ParaRPrOriginal::ChildGroup_1::get_snapToGrid() const
{
    if (m_snapToGrid)
    {
        return *m_snapToGrid;
    }
    return CT_OnOff::default_instance();
}

bool CT_ParaRPrOriginal::ChildGroup_1::has_vanish() const
{
    return m_has_vanish;
}

CT_OnOff* CT_ParaRPrOriginal::ChildGroup_1::mutable_vanish()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_vanish = true;
    if (!m_vanish)
    {
        m_vanish = new CT_OnOff();
    }
    return m_vanish;
}

const CT_OnOff& CT_ParaRPrOriginal::ChildGroup_1::get_vanish() const
{
    if (m_vanish)
    {
        return *m_vanish;
    }
    return CT_OnOff::default_instance();
}

bool CT_ParaRPrOriginal::ChildGroup_1::has_webHidden() const
{
    return m_has_webHidden;
}

CT_OnOff* CT_ParaRPrOriginal::ChildGroup_1::mutable_webHidden()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_webHidden = true;
    if (!m_webHidden)
    {
        m_webHidden = new CT_OnOff();
    }
    return m_webHidden;
}

const CT_OnOff& CT_ParaRPrOriginal::ChildGroup_1::get_webHidden() const
{
    if (m_webHidden)
    {
        return *m_webHidden;
    }
    return CT_OnOff::default_instance();
}

bool CT_ParaRPrOriginal::ChildGroup_1::has_color() const
{
    return m_has_color;
}

CT_Color* CT_ParaRPrOriginal::ChildGroup_1::mutable_color()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_color = true;
    if (!m_color)
    {
        m_color = new CT_Color();
    }
    return m_color;
}

const CT_Color& CT_ParaRPrOriginal::ChildGroup_1::get_color() const
{
    if (m_color)
    {
        return *m_color;
    }
    return CT_Color::default_instance();
}

bool CT_ParaRPrOriginal::ChildGroup_1::has_spacing() const
{
    return m_has_spacing;
}

CT_SignedTwipsMeasure* CT_ParaRPrOriginal::ChildGroup_1::mutable_spacing()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_spacing = true;
    if (!m_spacing)
    {
        m_spacing = new CT_SignedTwipsMeasure();
    }
    return m_spacing;
}

const CT_SignedTwipsMeasure& CT_ParaRPrOriginal::ChildGroup_1::get_spacing() const
{
    if (m_spacing)
    {
        return *m_spacing;
    }
    return CT_SignedTwipsMeasure::default_instance();
}

bool CT_ParaRPrOriginal::ChildGroup_1::has_w() const
{
    return m_has_w;
}

CT_TextScale* CT_ParaRPrOriginal::ChildGroup_1::mutable_w()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_w = true;
    if (!m_w)
    {
        m_w = new CT_TextScale();
    }
    return m_w;
}

const CT_TextScale& CT_ParaRPrOriginal::ChildGroup_1::get_w() const
{
    if (m_w)
    {
        return *m_w;
    }
    return CT_TextScale::default_instance();
}

bool CT_ParaRPrOriginal::ChildGroup_1::has_kern() const
{
    return m_has_kern;
}

CT_HpsMeasure* CT_ParaRPrOriginal::ChildGroup_1::mutable_kern()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_kern = true;
    if (!m_kern)
    {
        m_kern = new CT_HpsMeasure();
    }
    return m_kern;
}

const CT_HpsMeasure& CT_ParaRPrOriginal::ChildGroup_1::get_kern() const
{
    if (m_kern)
    {
        return *m_kern;
    }
    return CT_HpsMeasure::default_instance();
}

bool CT_ParaRPrOriginal::ChildGroup_1::has_position() const
{
    return m_has_position;
}

CT_SignedHpsMeasure* CT_ParaRPrOriginal::ChildGroup_1::mutable_position()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_position = true;
    if (!m_position)
    {
        m_position = new CT_SignedHpsMeasure();
    }
    return m_position;
}

const CT_SignedHpsMeasure& CT_ParaRPrOriginal::ChildGroup_1::get_position() const
{
    if (m_position)
    {
        return *m_position;
    }
    return CT_SignedHpsMeasure::default_instance();
}

bool CT_ParaRPrOriginal::ChildGroup_1::has_sz() const
{
    return m_has_sz;
}

CT_HpsMeasure* CT_ParaRPrOriginal::ChildGroup_1::mutable_sz()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_sz = true;
    if (!m_sz)
    {
        m_sz = new CT_HpsMeasure();
    }
    return m_sz;
}

const CT_HpsMeasure& CT_ParaRPrOriginal::ChildGroup_1::get_sz() const
{
    if (m_sz)
    {
        return *m_sz;
    }
    return CT_HpsMeasure::default_instance();
}

bool CT_ParaRPrOriginal::ChildGroup_1::has_szCs() const
{
    return m_has_szCs;
}

CT_HpsMeasure* CT_ParaRPrOriginal::ChildGroup_1::mutable_szCs()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_szCs = true;
    if (!m_szCs)
    {
        m_szCs = new CT_HpsMeasure();
    }
    return m_szCs;
}

const CT_HpsMeasure& CT_ParaRPrOriginal::ChildGroup_1::get_szCs() const
{
    if (m_szCs)
    {
        return *m_szCs;
    }
    return CT_HpsMeasure::default_instance();
}

bool CT_ParaRPrOriginal::ChildGroup_1::has_highlight() const
{
    return m_has_highlight;
}

CT_Highlight* CT_ParaRPrOriginal::ChildGroup_1::mutable_highlight()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_highlight = true;
    if (!m_highlight)
    {
        m_highlight = new CT_Highlight();
    }
    return m_highlight;
}

const CT_Highlight& CT_ParaRPrOriginal::ChildGroup_1::get_highlight() const
{
    if (m_highlight)
    {
        return *m_highlight;
    }
    return CT_Highlight::default_instance();
}

bool CT_ParaRPrOriginal::ChildGroup_1::has_u() const
{
    return m_has_u;
}

CT_Underline* CT_ParaRPrOriginal::ChildGroup_1::mutable_u()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_u = true;
    if (!m_u)
    {
        m_u = new CT_Underline();
    }
    return m_u;
}

const CT_Underline& CT_ParaRPrOriginal::ChildGroup_1::get_u() const
{
    if (m_u)
    {
        return *m_u;
    }
    return CT_Underline::default_instance();
}

bool CT_ParaRPrOriginal::ChildGroup_1::has_effect() const
{
    return m_has_effect;
}

CT_TextEffect* CT_ParaRPrOriginal::ChildGroup_1::mutable_effect()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_effect = true;
    if (!m_effect)
    {
        m_effect = new CT_TextEffect();
    }
    return m_effect;
}

const CT_TextEffect& CT_ParaRPrOriginal::ChildGroup_1::get_effect() const
{
    if (m_effect)
    {
        return *m_effect;
    }
    return CT_TextEffect::default_instance();
}

bool CT_ParaRPrOriginal::ChildGroup_1::has_bdr() const
{
    return m_has_bdr;
}

CT_Border* CT_ParaRPrOriginal::ChildGroup_1::mutable_bdr()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_bdr = true;
    if (!m_bdr)
    {
        m_bdr = new CT_Border();
    }
    return m_bdr;
}

const CT_Border& CT_ParaRPrOriginal::ChildGroup_1::get_bdr() const
{
    if (m_bdr)
    {
        return *m_bdr;
    }
    return CT_Border::default_instance();
}

bool CT_ParaRPrOriginal::ChildGroup_1::has_shd() const
{
    return m_has_shd;
}

CT_Shd* CT_ParaRPrOriginal::ChildGroup_1::mutable_shd()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_shd = true;
    if (!m_shd)
    {
        m_shd = new CT_Shd();
    }
    return m_shd;
}

const CT_Shd& CT_ParaRPrOriginal::ChildGroup_1::get_shd() const
{
    if (m_shd)
    {
        return *m_shd;
    }
    return CT_Shd::default_instance();
}

bool CT_ParaRPrOriginal::ChildGroup_1::has_fitText() const
{
    return m_has_fitText;
}

CT_FitText* CT_ParaRPrOriginal::ChildGroup_1::mutable_fitText()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_fitText = true;
    if (!m_fitText)
    {
        m_fitText = new CT_FitText();
    }
    return m_fitText;
}

const CT_FitText& CT_ParaRPrOriginal::ChildGroup_1::get_fitText() const
{
    if (m_fitText)
    {
        return *m_fitText;
    }
    return CT_FitText::default_instance();
}

bool CT_ParaRPrOriginal::ChildGroup_1::has_vertAlign() const
{
    return m_has_vertAlign;
}

CT_VerticalAlignRun* CT_ParaRPrOriginal::ChildGroup_1::mutable_vertAlign()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_vertAlign = true;
    if (!m_vertAlign)
    {
        m_vertAlign = new CT_VerticalAlignRun();
    }
    return m_vertAlign;
}

const CT_VerticalAlignRun& CT_ParaRPrOriginal::ChildGroup_1::get_vertAlign() const
{
    if (m_vertAlign)
    {
        return *m_vertAlign;
    }
    return CT_VerticalAlignRun::default_instance();
}

bool CT_ParaRPrOriginal::ChildGroup_1::has_rtl() const
{
    return m_has_rtl;
}

CT_OnOff* CT_ParaRPrOriginal::ChildGroup_1::mutable_rtl()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_rtl = true;
    if (!m_rtl)
    {
        m_rtl = new CT_OnOff();
    }
    return m_rtl;
}

const CT_OnOff& CT_ParaRPrOriginal::ChildGroup_1::get_rtl() const
{
    if (m_rtl)
    {
        return *m_rtl;
    }
    return CT_OnOff::default_instance();
}

bool CT_ParaRPrOriginal::ChildGroup_1::has_cs() const
{
    return m_has_cs;
}

CT_OnOff* CT_ParaRPrOriginal::ChildGroup_1::mutable_cs()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_cs = true;
    if (!m_cs)
    {
        m_cs = new CT_OnOff();
    }
    return m_cs;
}

const CT_OnOff& CT_ParaRPrOriginal::ChildGroup_1::get_cs() const
{
    if (m_cs)
    {
        return *m_cs;
    }
    return CT_OnOff::default_instance();
}

bool CT_ParaRPrOriginal::ChildGroup_1::has_em() const
{
    return m_has_em;
}

CT_Em* CT_ParaRPrOriginal::ChildGroup_1::mutable_em()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_em = true;
    if (!m_em)
    {
        m_em = new CT_Em();
    }
    return m_em;
}

const CT_Em& CT_ParaRPrOriginal::ChildGroup_1::get_em() const
{
    if (m_em)
    {
        return *m_em;
    }
    return CT_Em::default_instance();
}

bool CT_ParaRPrOriginal::ChildGroup_1::has_lang() const
{
    return m_has_lang;
}

CT_Language* CT_ParaRPrOriginal::ChildGroup_1::mutable_lang()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_lang = true;
    if (!m_lang)
    {
        m_lang = new CT_Language();
    }
    return m_lang;
}

const CT_Language& CT_ParaRPrOriginal::ChildGroup_1::get_lang() const
{
    if (m_lang)
    {
        return *m_lang;
    }
    return CT_Language::default_instance();
}

bool CT_ParaRPrOriginal::ChildGroup_1::has_eastAsianLayout() const
{
    return m_has_eastAsianLayout;
}

CT_EastAsianLayout* CT_ParaRPrOriginal::ChildGroup_1::mutable_eastAsianLayout()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_eastAsianLayout = true;
    if (!m_eastAsianLayout)
    {
        m_eastAsianLayout = new CT_EastAsianLayout();
    }
    return m_eastAsianLayout;
}

const CT_EastAsianLayout& CT_ParaRPrOriginal::ChildGroup_1::get_eastAsianLayout() const
{
    if (m_eastAsianLayout)
    {
        return *m_eastAsianLayout;
    }
    return CT_EastAsianLayout::default_instance();
}

bool CT_ParaRPrOriginal::ChildGroup_1::has_specVanish() const
{
    return m_has_specVanish;
}

CT_OnOff* CT_ParaRPrOriginal::ChildGroup_1::mutable_specVanish()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_specVanish = true;
    if (!m_specVanish)
    {
        m_specVanish = new CT_OnOff();
    }
    return m_specVanish;
}

const CT_OnOff& CT_ParaRPrOriginal::ChildGroup_1::get_specVanish() const
{
    if (m_specVanish)
    {
        return *m_specVanish;
    }
    return CT_OnOff::default_instance();
}

bool CT_ParaRPrOriginal::ChildGroup_1::has_oMath() const
{
    return m_has_oMath;
}

CT_OnOff* CT_ParaRPrOriginal::ChildGroup_1::mutable_oMath()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = true;
    if (!m_oMath)
    {
        m_oMath = new CT_OnOff();
    }
    return m_oMath;
}

const CT_OnOff& CT_ParaRPrOriginal::ChildGroup_1::get_oMath() const
{
    if (m_oMath)
    {
        return *m_oMath;
    }
    return CT_OnOff::default_instance();
}

CT_ParaRPrOriginal* CT_ParaRPrOriginal::default_instance_ = NULL;

// CT_ParaRPr
CT_ParaRPr::CT_ParaRPr()
    :m_has_ins(false),
     m_ins(NULL),
     m_has_del(false),
     m_del(NULL),
     m_has_moveFrom(false),
     m_moveFrom(NULL),
     m_has_moveTo(false),
     m_moveTo(NULL),
     m_has_rPrChange(false),
     m_rPrChange(NULL)
{
}
CT_ParaRPr::~CT_ParaRPr()
{
    clear();
}
bool CT_ParaRPr::has_ins() const
{
    return m_has_ins;
}

CT_TrackChange* CT_ParaRPr::mutable_ins()
{
    m_has_ins = true;
    if (!m_ins)
    {
        m_ins = new CT_TrackChange();
    }
    return m_ins;
}

const CT_TrackChange& CT_ParaRPr::get_ins() const
{
    if (m_ins)
    {
        return *m_ins;
    }
    return CT_TrackChange::default_instance();
}

bool CT_ParaRPr::has_del() const
{
    return m_has_del;
}

CT_TrackChange* CT_ParaRPr::mutable_del()
{
    m_has_del = true;
    if (!m_del)
    {
        m_del = new CT_TrackChange();
    }
    return m_del;
}

const CT_TrackChange& CT_ParaRPr::get_del() const
{
    if (m_del)
    {
        return *m_del;
    }
    return CT_TrackChange::default_instance();
}

bool CT_ParaRPr::has_moveFrom() const
{
    return m_has_moveFrom;
}

CT_TrackChange* CT_ParaRPr::mutable_moveFrom()
{
    m_has_moveFrom = true;
    if (!m_moveFrom)
    {
        m_moveFrom = new CT_TrackChange();
    }
    return m_moveFrom;
}

const CT_TrackChange& CT_ParaRPr::get_moveFrom() const
{
    if (m_moveFrom)
    {
        return *m_moveFrom;
    }
    return CT_TrackChange::default_instance();
}

bool CT_ParaRPr::has_moveTo() const
{
    return m_has_moveTo;
}

CT_TrackChange* CT_ParaRPr::mutable_moveTo()
{
    m_has_moveTo = true;
    if (!m_moveTo)
    {
        m_moveTo = new CT_TrackChange();
    }
    return m_moveTo;
}

const CT_TrackChange& CT_ParaRPr::get_moveTo() const
{
    if (m_moveTo)
    {
        return *m_moveTo;
    }
    return CT_TrackChange::default_instance();
}

CT_String* CT_ParaRPr::add_rStyle()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_String* pNewChild = pChildGroup->mutable_rStyle();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_Fonts* CT_ParaRPr::add_rFonts()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Fonts* pNewChild = pChildGroup->mutable_rFonts();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_ParaRPr::add_b()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_b();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_ParaRPr::add_bCs()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_bCs();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_ParaRPr::add_i()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_i();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_ParaRPr::add_iCs()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_iCs();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_ParaRPr::add_caps()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_caps();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_ParaRPr::add_smallCaps()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_smallCaps();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_ParaRPr::add_strike()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_strike();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_ParaRPr::add_dstrike()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_dstrike();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_ParaRPr::add_outline()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_outline();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_ParaRPr::add_shadow()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_shadow();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_ParaRPr::add_emboss()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_emboss();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_ParaRPr::add_imprint()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_imprint();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_ParaRPr::add_noProof()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_noProof();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_ParaRPr::add_snapToGrid()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_snapToGrid();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_ParaRPr::add_vanish()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_vanish();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_ParaRPr::add_webHidden()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_webHidden();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_Color* CT_ParaRPr::add_color()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Color* pNewChild = pChildGroup->mutable_color();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_SignedTwipsMeasure* CT_ParaRPr::add_spacing()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_SignedTwipsMeasure* pNewChild = pChildGroup->mutable_spacing();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_TextScale* CT_ParaRPr::add_w()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_TextScale* pNewChild = pChildGroup->mutable_w();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_HpsMeasure* CT_ParaRPr::add_kern()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_HpsMeasure* pNewChild = pChildGroup->mutable_kern();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_SignedHpsMeasure* CT_ParaRPr::add_position()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_SignedHpsMeasure* pNewChild = pChildGroup->mutable_position();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_HpsMeasure* CT_ParaRPr::add_sz()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_HpsMeasure* pNewChild = pChildGroup->mutable_sz();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_HpsMeasure* CT_ParaRPr::add_szCs()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_HpsMeasure* pNewChild = pChildGroup->mutable_szCs();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_Highlight* CT_ParaRPr::add_highlight()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Highlight* pNewChild = pChildGroup->mutable_highlight();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_Underline* CT_ParaRPr::add_u()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Underline* pNewChild = pChildGroup->mutable_u();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_TextEffect* CT_ParaRPr::add_effect()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_TextEffect* pNewChild = pChildGroup->mutable_effect();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_Border* CT_ParaRPr::add_bdr()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Border* pNewChild = pChildGroup->mutable_bdr();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_Shd* CT_ParaRPr::add_shd()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Shd* pNewChild = pChildGroup->mutable_shd();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_FitText* CT_ParaRPr::add_fitText()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_FitText* pNewChild = pChildGroup->mutable_fitText();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_VerticalAlignRun* CT_ParaRPr::add_vertAlign()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_VerticalAlignRun* pNewChild = pChildGroup->mutable_vertAlign();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_ParaRPr::add_rtl()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_rtl();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_ParaRPr::add_cs()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_cs();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_Em* CT_ParaRPr::add_em()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Em* pNewChild = pChildGroup->mutable_em();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_Language* CT_ParaRPr::add_lang()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Language* pNewChild = pChildGroup->mutable_lang();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_EastAsianLayout* CT_ParaRPr::add_eastAsianLayout()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_EastAsianLayout* pNewChild = pChildGroup->mutable_eastAsianLayout();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_ParaRPr::add_specVanish()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_specVanish();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_ParaRPr::add_oMath()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_oMath();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

bool CT_ParaRPr::has_rPrChange() const
{
    return m_has_rPrChange;
}

CT_ParaRPrChange* CT_ParaRPr::mutable_rPrChange()
{
    m_has_rPrChange = true;
    if (!m_rPrChange)
    {
        m_rPrChange = new CT_ParaRPrChange();
    }
    return m_rPrChange;
}

const CT_ParaRPrChange& CT_ParaRPr::get_rPrChange() const
{
    if (m_rPrChange)
    {
        return *m_rPrChange;
    }
    return CT_ParaRPrChange::default_instance();
}

void CT_ParaRPr::clear()
{
    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }


    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }


    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }


    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }


    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }

    m_has_rPrChange = false;

    if (m_rPrChange)
    {
        delete m_rPrChange;
        m_rPrChange = NULL;
    }

}

void CT_ParaRPr::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";


    if (m_has_ins)
    {
        m_ins->toXmlElem("w:ins", "", _outStream);
    }


    if (m_has_del)
    {
        m_del->toXmlElem("w:del", "", _outStream);
    }


    if (m_has_moveFrom)
    {
        m_moveFrom->toXmlElem("w:moveFrom", "", _outStream);
    }


    if (m_has_moveTo)
    {
        m_moveTo->toXmlElem("w:moveTo", "", _outStream);
    }

    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_rStyle())
            {
                (*iter)->get_rStyle().toXmlElem("w:rStyle", "", _outStream);
            }


            else if ((*iter)->has_rFonts())
            {
                (*iter)->get_rFonts().toXmlElem("w:rFonts", "", _outStream);
            }


            else if ((*iter)->has_b())
            {
                (*iter)->get_b().toXmlElem("w:b", "", _outStream);
            }


            else if ((*iter)->has_bCs())
            {
                (*iter)->get_bCs().toXmlElem("w:bCs", "", _outStream);
            }


            else if ((*iter)->has_i())
            {
                (*iter)->get_i().toXmlElem("w:i", "", _outStream);
            }


            else if ((*iter)->has_iCs())
            {
                (*iter)->get_iCs().toXmlElem("w:iCs", "", _outStream);
            }


            else if ((*iter)->has_caps())
            {
                (*iter)->get_caps().toXmlElem("w:caps", "", _outStream);
            }


            else if ((*iter)->has_smallCaps())
            {
                (*iter)->get_smallCaps().toXmlElem("w:smallCaps", "", _outStream);
            }


            else if ((*iter)->has_strike())
            {
                (*iter)->get_strike().toXmlElem("w:strike", "", _outStream);
            }


            else if ((*iter)->has_dstrike())
            {
                (*iter)->get_dstrike().toXmlElem("w:dstrike", "", _outStream);
            }


            else if ((*iter)->has_outline())
            {
                (*iter)->get_outline().toXmlElem("w:outline", "", _outStream);
            }


            else if ((*iter)->has_shadow())
            {
                (*iter)->get_shadow().toXmlElem("w:shadow", "", _outStream);
            }


            else if ((*iter)->has_emboss())
            {
                (*iter)->get_emboss().toXmlElem("w:emboss", "", _outStream);
            }


            else if ((*iter)->has_imprint())
            {
                (*iter)->get_imprint().toXmlElem("w:imprint", "", _outStream);
            }


            else if ((*iter)->has_noProof())
            {
                (*iter)->get_noProof().toXmlElem("w:noProof", "", _outStream);
            }


            else if ((*iter)->has_snapToGrid())
            {
                (*iter)->get_snapToGrid().toXmlElem("w:snapToGrid", "", _outStream);
            }


            else if ((*iter)->has_vanish())
            {
                (*iter)->get_vanish().toXmlElem("w:vanish", "", _outStream);
            }


            else if ((*iter)->has_webHidden())
            {
                (*iter)->get_webHidden().toXmlElem("w:webHidden", "", _outStream);
            }


            else if ((*iter)->has_color())
            {
                (*iter)->get_color().toXmlElem("w:color", "", _outStream);
            }


            else if ((*iter)->has_spacing())
            {
                (*iter)->get_spacing().toXmlElem("w:spacing", "", _outStream);
            }


            else if ((*iter)->has_w())
            {
                (*iter)->get_w().toXmlElem("w:w", "", _outStream);
            }


            else if ((*iter)->has_kern())
            {
                (*iter)->get_kern().toXmlElem("w:kern", "", _outStream);
            }


            else if ((*iter)->has_position())
            {
                (*iter)->get_position().toXmlElem("w:position", "", _outStream);
            }


            else if ((*iter)->has_sz())
            {
                (*iter)->get_sz().toXmlElem("w:sz", "", _outStream);
            }


            else if ((*iter)->has_szCs())
            {
                (*iter)->get_szCs().toXmlElem("w:szCs", "", _outStream);
            }


            else if ((*iter)->has_highlight())
            {
                (*iter)->get_highlight().toXmlElem("w:highlight", "", _outStream);
            }


            else if ((*iter)->has_u())
            {
                (*iter)->get_u().toXmlElem("w:u", "", _outStream);
            }


            else if ((*iter)->has_effect())
            {
                (*iter)->get_effect().toXmlElem("w:effect", "", _outStream);
            }


            else if ((*iter)->has_bdr())
            {
                (*iter)->get_bdr().toXmlElem("w:bdr", "", _outStream);
            }


            else if ((*iter)->has_shd())
            {
                (*iter)->get_shd().toXmlElem("w:shd", "", _outStream);
            }


            else if ((*iter)->has_fitText())
            {
                (*iter)->get_fitText().toXmlElem("w:fitText", "", _outStream);
            }


            else if ((*iter)->has_vertAlign())
            {
                (*iter)->get_vertAlign().toXmlElem("w:vertAlign", "", _outStream);
            }


            else if ((*iter)->has_rtl())
            {
                (*iter)->get_rtl().toXmlElem("w:rtl", "", _outStream);
            }


            else if ((*iter)->has_cs())
            {
                (*iter)->get_cs().toXmlElem("w:cs", "", _outStream);
            }


            else if ((*iter)->has_em())
            {
                (*iter)->get_em().toXmlElem("w:em", "", _outStream);
            }


            else if ((*iter)->has_lang())
            {
                (*iter)->get_lang().toXmlElem("w:lang", "", _outStream);
            }


            else if ((*iter)->has_eastAsianLayout())
            {
                (*iter)->get_eastAsianLayout().toXmlElem("w:eastAsianLayout", "", _outStream);
            }


            else if ((*iter)->has_specVanish())
            {
                (*iter)->get_specVanish().toXmlElem("w:specVanish", "", _outStream);
            }


            else if ((*iter)->has_oMath())
            {
                (*iter)->get_oMath().toXmlElem("w:oMath", "", _outStream);
            }


        }
    }


    if (m_has_rPrChange)
    {
        m_rPrChange->toXmlElem("w:rPrChange", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_ParaRPr& CT_ParaRPr::default_instance()
{
    if (!CT_ParaRPr::default_instance_)
    {
        CT_ParaRPr::default_instance_ = new CT_ParaRPr();
    }
    return *CT_ParaRPr::default_instance_;
}


// CT_ParaRPr::ChildGroup_1
CT_ParaRPr::ChildGroup_1::ChildGroup_1()
    :m_has_rStyle(false),
     m_rStyle(NULL),
     m_has_rFonts(false),
     m_rFonts(NULL),
     m_has_b(false),
     m_b(NULL),
     m_has_bCs(false),
     m_bCs(NULL),
     m_has_i(false),
     m_i(NULL),
     m_has_iCs(false),
     m_iCs(NULL),
     m_has_caps(false),
     m_caps(NULL),
     m_has_smallCaps(false),
     m_smallCaps(NULL),
     m_has_strike(false),
     m_strike(NULL),
     m_has_dstrike(false),
     m_dstrike(NULL),
     m_has_outline(false),
     m_outline(NULL),
     m_has_shadow(false),
     m_shadow(NULL),
     m_has_emboss(false),
     m_emboss(NULL),
     m_has_imprint(false),
     m_imprint(NULL),
     m_has_noProof(false),
     m_noProof(NULL),
     m_has_snapToGrid(false),
     m_snapToGrid(NULL),
     m_has_vanish(false),
     m_vanish(NULL),
     m_has_webHidden(false),
     m_webHidden(NULL),
     m_has_color(false),
     m_color(NULL),
     m_has_spacing(false),
     m_spacing(NULL),
     m_has_w(false),
     m_w(NULL),
     m_has_kern(false),
     m_kern(NULL),
     m_has_position(false),
     m_position(NULL),
     m_has_sz(false),
     m_sz(NULL),
     m_has_szCs(false),
     m_szCs(NULL),
     m_has_highlight(false),
     m_highlight(NULL),
     m_has_u(false),
     m_u(NULL),
     m_has_effect(false),
     m_effect(NULL),
     m_has_bdr(false),
     m_bdr(NULL),
     m_has_shd(false),
     m_shd(NULL),
     m_has_fitText(false),
     m_fitText(NULL),
     m_has_vertAlign(false),
     m_vertAlign(NULL),
     m_has_rtl(false),
     m_rtl(NULL),
     m_has_cs(false),
     m_cs(NULL),
     m_has_em(false),
     m_em(NULL),
     m_has_lang(false),
     m_lang(NULL),
     m_has_eastAsianLayout(false),
     m_eastAsianLayout(NULL),
     m_has_specVanish(false),
     m_specVanish(NULL),
     m_has_oMath(false),
     m_oMath(NULL)
{
}
bool CT_ParaRPr::ChildGroup_1::has_rStyle() const
{
    return m_has_rStyle;
}

CT_String* CT_ParaRPr::ChildGroup_1::mutable_rStyle()
{

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_rStyle = true;
    if (!m_rStyle)
    {
        m_rStyle = new CT_String();
    }
    return m_rStyle;
}

const CT_String& CT_ParaRPr::ChildGroup_1::get_rStyle() const
{
    if (m_rStyle)
    {
        return *m_rStyle;
    }
    return CT_String::default_instance();
}

bool CT_ParaRPr::ChildGroup_1::has_rFonts() const
{
    return m_has_rFonts;
}

CT_Fonts* CT_ParaRPr::ChildGroup_1::mutable_rFonts()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_rFonts = true;
    if (!m_rFonts)
    {
        m_rFonts = new CT_Fonts();
    }
    return m_rFonts;
}

const CT_Fonts& CT_ParaRPr::ChildGroup_1::get_rFonts() const
{
    if (m_rFonts)
    {
        return *m_rFonts;
    }
    return CT_Fonts::default_instance();
}

bool CT_ParaRPr::ChildGroup_1::has_b() const
{
    return m_has_b;
}

CT_OnOff* CT_ParaRPr::ChildGroup_1::mutable_b()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_b = true;
    if (!m_b)
    {
        m_b = new CT_OnOff();
    }
    return m_b;
}

const CT_OnOff& CT_ParaRPr::ChildGroup_1::get_b() const
{
    if (m_b)
    {
        return *m_b;
    }
    return CT_OnOff::default_instance();
}

bool CT_ParaRPr::ChildGroup_1::has_bCs() const
{
    return m_has_bCs;
}

CT_OnOff* CT_ParaRPr::ChildGroup_1::mutable_bCs()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_bCs = true;
    if (!m_bCs)
    {
        m_bCs = new CT_OnOff();
    }
    return m_bCs;
}

const CT_OnOff& CT_ParaRPr::ChildGroup_1::get_bCs() const
{
    if (m_bCs)
    {
        return *m_bCs;
    }
    return CT_OnOff::default_instance();
}

bool CT_ParaRPr::ChildGroup_1::has_i() const
{
    return m_has_i;
}

CT_OnOff* CT_ParaRPr::ChildGroup_1::mutable_i()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_i = true;
    if (!m_i)
    {
        m_i = new CT_OnOff();
    }
    return m_i;
}

const CT_OnOff& CT_ParaRPr::ChildGroup_1::get_i() const
{
    if (m_i)
    {
        return *m_i;
    }
    return CT_OnOff::default_instance();
}

bool CT_ParaRPr::ChildGroup_1::has_iCs() const
{
    return m_has_iCs;
}

CT_OnOff* CT_ParaRPr::ChildGroup_1::mutable_iCs()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_iCs = true;
    if (!m_iCs)
    {
        m_iCs = new CT_OnOff();
    }
    return m_iCs;
}

const CT_OnOff& CT_ParaRPr::ChildGroup_1::get_iCs() const
{
    if (m_iCs)
    {
        return *m_iCs;
    }
    return CT_OnOff::default_instance();
}

bool CT_ParaRPr::ChildGroup_1::has_caps() const
{
    return m_has_caps;
}

CT_OnOff* CT_ParaRPr::ChildGroup_1::mutable_caps()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_caps = true;
    if (!m_caps)
    {
        m_caps = new CT_OnOff();
    }
    return m_caps;
}

const CT_OnOff& CT_ParaRPr::ChildGroup_1::get_caps() const
{
    if (m_caps)
    {
        return *m_caps;
    }
    return CT_OnOff::default_instance();
}

bool CT_ParaRPr::ChildGroup_1::has_smallCaps() const
{
    return m_has_smallCaps;
}

CT_OnOff* CT_ParaRPr::ChildGroup_1::mutable_smallCaps()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_smallCaps = true;
    if (!m_smallCaps)
    {
        m_smallCaps = new CT_OnOff();
    }
    return m_smallCaps;
}

const CT_OnOff& CT_ParaRPr::ChildGroup_1::get_smallCaps() const
{
    if (m_smallCaps)
    {
        return *m_smallCaps;
    }
    return CT_OnOff::default_instance();
}

bool CT_ParaRPr::ChildGroup_1::has_strike() const
{
    return m_has_strike;
}

CT_OnOff* CT_ParaRPr::ChildGroup_1::mutable_strike()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_strike = true;
    if (!m_strike)
    {
        m_strike = new CT_OnOff();
    }
    return m_strike;
}

const CT_OnOff& CT_ParaRPr::ChildGroup_1::get_strike() const
{
    if (m_strike)
    {
        return *m_strike;
    }
    return CT_OnOff::default_instance();
}

bool CT_ParaRPr::ChildGroup_1::has_dstrike() const
{
    return m_has_dstrike;
}

CT_OnOff* CT_ParaRPr::ChildGroup_1::mutable_dstrike()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_dstrike = true;
    if (!m_dstrike)
    {
        m_dstrike = new CT_OnOff();
    }
    return m_dstrike;
}

const CT_OnOff& CT_ParaRPr::ChildGroup_1::get_dstrike() const
{
    if (m_dstrike)
    {
        return *m_dstrike;
    }
    return CT_OnOff::default_instance();
}

bool CT_ParaRPr::ChildGroup_1::has_outline() const
{
    return m_has_outline;
}

CT_OnOff* CT_ParaRPr::ChildGroup_1::mutable_outline()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_outline = true;
    if (!m_outline)
    {
        m_outline = new CT_OnOff();
    }
    return m_outline;
}

const CT_OnOff& CT_ParaRPr::ChildGroup_1::get_outline() const
{
    if (m_outline)
    {
        return *m_outline;
    }
    return CT_OnOff::default_instance();
}

bool CT_ParaRPr::ChildGroup_1::has_shadow() const
{
    return m_has_shadow;
}

CT_OnOff* CT_ParaRPr::ChildGroup_1::mutable_shadow()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_shadow = true;
    if (!m_shadow)
    {
        m_shadow = new CT_OnOff();
    }
    return m_shadow;
}

const CT_OnOff& CT_ParaRPr::ChildGroup_1::get_shadow() const
{
    if (m_shadow)
    {
        return *m_shadow;
    }
    return CT_OnOff::default_instance();
}

bool CT_ParaRPr::ChildGroup_1::has_emboss() const
{
    return m_has_emboss;
}

CT_OnOff* CT_ParaRPr::ChildGroup_1::mutable_emboss()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_emboss = true;
    if (!m_emboss)
    {
        m_emboss = new CT_OnOff();
    }
    return m_emboss;
}

const CT_OnOff& CT_ParaRPr::ChildGroup_1::get_emboss() const
{
    if (m_emboss)
    {
        return *m_emboss;
    }
    return CT_OnOff::default_instance();
}

bool CT_ParaRPr::ChildGroup_1::has_imprint() const
{
    return m_has_imprint;
}

CT_OnOff* CT_ParaRPr::ChildGroup_1::mutable_imprint()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_imprint = true;
    if (!m_imprint)
    {
        m_imprint = new CT_OnOff();
    }
    return m_imprint;
}

const CT_OnOff& CT_ParaRPr::ChildGroup_1::get_imprint() const
{
    if (m_imprint)
    {
        return *m_imprint;
    }
    return CT_OnOff::default_instance();
}

bool CT_ParaRPr::ChildGroup_1::has_noProof() const
{
    return m_has_noProof;
}

CT_OnOff* CT_ParaRPr::ChildGroup_1::mutable_noProof()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_noProof = true;
    if (!m_noProof)
    {
        m_noProof = new CT_OnOff();
    }
    return m_noProof;
}

const CT_OnOff& CT_ParaRPr::ChildGroup_1::get_noProof() const
{
    if (m_noProof)
    {
        return *m_noProof;
    }
    return CT_OnOff::default_instance();
}

bool CT_ParaRPr::ChildGroup_1::has_snapToGrid() const
{
    return m_has_snapToGrid;
}

CT_OnOff* CT_ParaRPr::ChildGroup_1::mutable_snapToGrid()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_snapToGrid = true;
    if (!m_snapToGrid)
    {
        m_snapToGrid = new CT_OnOff();
    }
    return m_snapToGrid;
}

const CT_OnOff& CT_ParaRPr::ChildGroup_1::get_snapToGrid() const
{
    if (m_snapToGrid)
    {
        return *m_snapToGrid;
    }
    return CT_OnOff::default_instance();
}

bool CT_ParaRPr::ChildGroup_1::has_vanish() const
{
    return m_has_vanish;
}

CT_OnOff* CT_ParaRPr::ChildGroup_1::mutable_vanish()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_vanish = true;
    if (!m_vanish)
    {
        m_vanish = new CT_OnOff();
    }
    return m_vanish;
}

const CT_OnOff& CT_ParaRPr::ChildGroup_1::get_vanish() const
{
    if (m_vanish)
    {
        return *m_vanish;
    }
    return CT_OnOff::default_instance();
}

bool CT_ParaRPr::ChildGroup_1::has_webHidden() const
{
    return m_has_webHidden;
}

CT_OnOff* CT_ParaRPr::ChildGroup_1::mutable_webHidden()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_webHidden = true;
    if (!m_webHidden)
    {
        m_webHidden = new CT_OnOff();
    }
    return m_webHidden;
}

const CT_OnOff& CT_ParaRPr::ChildGroup_1::get_webHidden() const
{
    if (m_webHidden)
    {
        return *m_webHidden;
    }
    return CT_OnOff::default_instance();
}

bool CT_ParaRPr::ChildGroup_1::has_color() const
{
    return m_has_color;
}

CT_Color* CT_ParaRPr::ChildGroup_1::mutable_color()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_color = true;
    if (!m_color)
    {
        m_color = new CT_Color();
    }
    return m_color;
}

const CT_Color& CT_ParaRPr::ChildGroup_1::get_color() const
{
    if (m_color)
    {
        return *m_color;
    }
    return CT_Color::default_instance();
}

bool CT_ParaRPr::ChildGroup_1::has_spacing() const
{
    return m_has_spacing;
}

CT_SignedTwipsMeasure* CT_ParaRPr::ChildGroup_1::mutable_spacing()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_spacing = true;
    if (!m_spacing)
    {
        m_spacing = new CT_SignedTwipsMeasure();
    }
    return m_spacing;
}

const CT_SignedTwipsMeasure& CT_ParaRPr::ChildGroup_1::get_spacing() const
{
    if (m_spacing)
    {
        return *m_spacing;
    }
    return CT_SignedTwipsMeasure::default_instance();
}

bool CT_ParaRPr::ChildGroup_1::has_w() const
{
    return m_has_w;
}

CT_TextScale* CT_ParaRPr::ChildGroup_1::mutable_w()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_w = true;
    if (!m_w)
    {
        m_w = new CT_TextScale();
    }
    return m_w;
}

const CT_TextScale& CT_ParaRPr::ChildGroup_1::get_w() const
{
    if (m_w)
    {
        return *m_w;
    }
    return CT_TextScale::default_instance();
}

bool CT_ParaRPr::ChildGroup_1::has_kern() const
{
    return m_has_kern;
}

CT_HpsMeasure* CT_ParaRPr::ChildGroup_1::mutable_kern()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_kern = true;
    if (!m_kern)
    {
        m_kern = new CT_HpsMeasure();
    }
    return m_kern;
}

const CT_HpsMeasure& CT_ParaRPr::ChildGroup_1::get_kern() const
{
    if (m_kern)
    {
        return *m_kern;
    }
    return CT_HpsMeasure::default_instance();
}

bool CT_ParaRPr::ChildGroup_1::has_position() const
{
    return m_has_position;
}

CT_SignedHpsMeasure* CT_ParaRPr::ChildGroup_1::mutable_position()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_position = true;
    if (!m_position)
    {
        m_position = new CT_SignedHpsMeasure();
    }
    return m_position;
}

const CT_SignedHpsMeasure& CT_ParaRPr::ChildGroup_1::get_position() const
{
    if (m_position)
    {
        return *m_position;
    }
    return CT_SignedHpsMeasure::default_instance();
}

bool CT_ParaRPr::ChildGroup_1::has_sz() const
{
    return m_has_sz;
}

CT_HpsMeasure* CT_ParaRPr::ChildGroup_1::mutable_sz()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_sz = true;
    if (!m_sz)
    {
        m_sz = new CT_HpsMeasure();
    }
    return m_sz;
}

const CT_HpsMeasure& CT_ParaRPr::ChildGroup_1::get_sz() const
{
    if (m_sz)
    {
        return *m_sz;
    }
    return CT_HpsMeasure::default_instance();
}

bool CT_ParaRPr::ChildGroup_1::has_szCs() const
{
    return m_has_szCs;
}

CT_HpsMeasure* CT_ParaRPr::ChildGroup_1::mutable_szCs()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_szCs = true;
    if (!m_szCs)
    {
        m_szCs = new CT_HpsMeasure();
    }
    return m_szCs;
}

const CT_HpsMeasure& CT_ParaRPr::ChildGroup_1::get_szCs() const
{
    if (m_szCs)
    {
        return *m_szCs;
    }
    return CT_HpsMeasure::default_instance();
}

bool CT_ParaRPr::ChildGroup_1::has_highlight() const
{
    return m_has_highlight;
}

CT_Highlight* CT_ParaRPr::ChildGroup_1::mutable_highlight()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_highlight = true;
    if (!m_highlight)
    {
        m_highlight = new CT_Highlight();
    }
    return m_highlight;
}

const CT_Highlight& CT_ParaRPr::ChildGroup_1::get_highlight() const
{
    if (m_highlight)
    {
        return *m_highlight;
    }
    return CT_Highlight::default_instance();
}

bool CT_ParaRPr::ChildGroup_1::has_u() const
{
    return m_has_u;
}

CT_Underline* CT_ParaRPr::ChildGroup_1::mutable_u()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_u = true;
    if (!m_u)
    {
        m_u = new CT_Underline();
    }
    return m_u;
}

const CT_Underline& CT_ParaRPr::ChildGroup_1::get_u() const
{
    if (m_u)
    {
        return *m_u;
    }
    return CT_Underline::default_instance();
}

bool CT_ParaRPr::ChildGroup_1::has_effect() const
{
    return m_has_effect;
}

CT_TextEffect* CT_ParaRPr::ChildGroup_1::mutable_effect()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_effect = true;
    if (!m_effect)
    {
        m_effect = new CT_TextEffect();
    }
    return m_effect;
}

const CT_TextEffect& CT_ParaRPr::ChildGroup_1::get_effect() const
{
    if (m_effect)
    {
        return *m_effect;
    }
    return CT_TextEffect::default_instance();
}

bool CT_ParaRPr::ChildGroup_1::has_bdr() const
{
    return m_has_bdr;
}

CT_Border* CT_ParaRPr::ChildGroup_1::mutable_bdr()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_bdr = true;
    if (!m_bdr)
    {
        m_bdr = new CT_Border();
    }
    return m_bdr;
}

const CT_Border& CT_ParaRPr::ChildGroup_1::get_bdr() const
{
    if (m_bdr)
    {
        return *m_bdr;
    }
    return CT_Border::default_instance();
}

bool CT_ParaRPr::ChildGroup_1::has_shd() const
{
    return m_has_shd;
}

CT_Shd* CT_ParaRPr::ChildGroup_1::mutable_shd()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_shd = true;
    if (!m_shd)
    {
        m_shd = new CT_Shd();
    }
    return m_shd;
}

const CT_Shd& CT_ParaRPr::ChildGroup_1::get_shd() const
{
    if (m_shd)
    {
        return *m_shd;
    }
    return CT_Shd::default_instance();
}

bool CT_ParaRPr::ChildGroup_1::has_fitText() const
{
    return m_has_fitText;
}

CT_FitText* CT_ParaRPr::ChildGroup_1::mutable_fitText()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_fitText = true;
    if (!m_fitText)
    {
        m_fitText = new CT_FitText();
    }
    return m_fitText;
}

const CT_FitText& CT_ParaRPr::ChildGroup_1::get_fitText() const
{
    if (m_fitText)
    {
        return *m_fitText;
    }
    return CT_FitText::default_instance();
}

bool CT_ParaRPr::ChildGroup_1::has_vertAlign() const
{
    return m_has_vertAlign;
}

CT_VerticalAlignRun* CT_ParaRPr::ChildGroup_1::mutable_vertAlign()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_vertAlign = true;
    if (!m_vertAlign)
    {
        m_vertAlign = new CT_VerticalAlignRun();
    }
    return m_vertAlign;
}

const CT_VerticalAlignRun& CT_ParaRPr::ChildGroup_1::get_vertAlign() const
{
    if (m_vertAlign)
    {
        return *m_vertAlign;
    }
    return CT_VerticalAlignRun::default_instance();
}

bool CT_ParaRPr::ChildGroup_1::has_rtl() const
{
    return m_has_rtl;
}

CT_OnOff* CT_ParaRPr::ChildGroup_1::mutable_rtl()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_rtl = true;
    if (!m_rtl)
    {
        m_rtl = new CT_OnOff();
    }
    return m_rtl;
}

const CT_OnOff& CT_ParaRPr::ChildGroup_1::get_rtl() const
{
    if (m_rtl)
    {
        return *m_rtl;
    }
    return CT_OnOff::default_instance();
}

bool CT_ParaRPr::ChildGroup_1::has_cs() const
{
    return m_has_cs;
}

CT_OnOff* CT_ParaRPr::ChildGroup_1::mutable_cs()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_cs = true;
    if (!m_cs)
    {
        m_cs = new CT_OnOff();
    }
    return m_cs;
}

const CT_OnOff& CT_ParaRPr::ChildGroup_1::get_cs() const
{
    if (m_cs)
    {
        return *m_cs;
    }
    return CT_OnOff::default_instance();
}

bool CT_ParaRPr::ChildGroup_1::has_em() const
{
    return m_has_em;
}

CT_Em* CT_ParaRPr::ChildGroup_1::mutable_em()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_em = true;
    if (!m_em)
    {
        m_em = new CT_Em();
    }
    return m_em;
}

const CT_Em& CT_ParaRPr::ChildGroup_1::get_em() const
{
    if (m_em)
    {
        return *m_em;
    }
    return CT_Em::default_instance();
}

bool CT_ParaRPr::ChildGroup_1::has_lang() const
{
    return m_has_lang;
}

CT_Language* CT_ParaRPr::ChildGroup_1::mutable_lang()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_lang = true;
    if (!m_lang)
    {
        m_lang = new CT_Language();
    }
    return m_lang;
}

const CT_Language& CT_ParaRPr::ChildGroup_1::get_lang() const
{
    if (m_lang)
    {
        return *m_lang;
    }
    return CT_Language::default_instance();
}

bool CT_ParaRPr::ChildGroup_1::has_eastAsianLayout() const
{
    return m_has_eastAsianLayout;
}

CT_EastAsianLayout* CT_ParaRPr::ChildGroup_1::mutable_eastAsianLayout()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_eastAsianLayout = true;
    if (!m_eastAsianLayout)
    {
        m_eastAsianLayout = new CT_EastAsianLayout();
    }
    return m_eastAsianLayout;
}

const CT_EastAsianLayout& CT_ParaRPr::ChildGroup_1::get_eastAsianLayout() const
{
    if (m_eastAsianLayout)
    {
        return *m_eastAsianLayout;
    }
    return CT_EastAsianLayout::default_instance();
}

bool CT_ParaRPr::ChildGroup_1::has_specVanish() const
{
    return m_has_specVanish;
}

CT_OnOff* CT_ParaRPr::ChildGroup_1::mutable_specVanish()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_oMath = false;

    if (m_oMath)
    {
        delete m_oMath;
        m_oMath = NULL;
    }
    ;

    m_has_specVanish = true;
    if (!m_specVanish)
    {
        m_specVanish = new CT_OnOff();
    }
    return m_specVanish;
}

const CT_OnOff& CT_ParaRPr::ChildGroup_1::get_specVanish() const
{
    if (m_specVanish)
    {
        return *m_specVanish;
    }
    return CT_OnOff::default_instance();
}

bool CT_ParaRPr::ChildGroup_1::has_oMath() const
{
    return m_has_oMath;
}

CT_OnOff* CT_ParaRPr::ChildGroup_1::mutable_oMath()
{

    m_has_rStyle = false;

    if (m_rStyle)
    {
        delete m_rStyle;
        m_rStyle = NULL;
    }
    ;

    m_has_rFonts = false;

    if (m_rFonts)
    {
        delete m_rFonts;
        m_rFonts = NULL;
    }
    ;

    m_has_b = false;

    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;

    m_has_bCs = false;

    if (m_bCs)
    {
        delete m_bCs;
        m_bCs = NULL;
    }
    ;

    m_has_i = false;

    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;

    m_has_iCs = false;

    if (m_iCs)
    {
        delete m_iCs;
        m_iCs = NULL;
    }
    ;

    m_has_caps = false;

    if (m_caps)
    {
        delete m_caps;
        m_caps = NULL;
    }
    ;

    m_has_smallCaps = false;

    if (m_smallCaps)
    {
        delete m_smallCaps;
        m_smallCaps = NULL;
    }
    ;

    m_has_strike = false;

    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;

    m_has_dstrike = false;

    if (m_dstrike)
    {
        delete m_dstrike;
        m_dstrike = NULL;
    }
    ;

    m_has_outline = false;

    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;

    m_has_shadow = false;

    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;

    m_has_emboss = false;

    if (m_emboss)
    {
        delete m_emboss;
        m_emboss = NULL;
    }
    ;

    m_has_imprint = false;

    if (m_imprint)
    {
        delete m_imprint;
        m_imprint = NULL;
    }
    ;

    m_has_noProof = false;

    if (m_noProof)
    {
        delete m_noProof;
        m_noProof = NULL;
    }
    ;

    m_has_snapToGrid = false;

    if (m_snapToGrid)
    {
        delete m_snapToGrid;
        m_snapToGrid = NULL;
    }
    ;

    m_has_vanish = false;

    if (m_vanish)
    {
        delete m_vanish;
        m_vanish = NULL;
    }
    ;

    m_has_webHidden = false;

    if (m_webHidden)
    {
        delete m_webHidden;
        m_webHidden = NULL;
    }
    ;

    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;

    m_has_spacing = false;

    if (m_spacing)
    {
        delete m_spacing;
        m_spacing = NULL;
    }
    ;

    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }
    ;

    m_has_kern = false;

    if (m_kern)
    {
        delete m_kern;
        m_kern = NULL;
    }
    ;

    m_has_position = false;

    if (m_position)
    {
        delete m_position;
        m_position = NULL;
    }
    ;

    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;

    m_has_szCs = false;

    if (m_szCs)
    {
        delete m_szCs;
        m_szCs = NULL;
    }
    ;

    m_has_highlight = false;

    if (m_highlight)
    {
        delete m_highlight;
        m_highlight = NULL;
    }
    ;

    m_has_u = false;

    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;

    m_has_effect = false;

    if (m_effect)
    {
        delete m_effect;
        m_effect = NULL;
    }
    ;

    m_has_bdr = false;

    if (m_bdr)
    {
        delete m_bdr;
        m_bdr = NULL;
    }
    ;

    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }
    ;

    m_has_fitText = false;

    if (m_fitText)
    {
        delete m_fitText;
        m_fitText = NULL;
    }
    ;

    m_has_vertAlign = false;

    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;

    m_has_rtl = false;

    if (m_rtl)
    {
        delete m_rtl;
        m_rtl = NULL;
    }
    ;

    m_has_cs = false;

    if (m_cs)
    {
        delete m_cs;
        m_cs = NULL;
    }
    ;

    m_has_em = false;

    if (m_em)
    {
        delete m_em;
        m_em = NULL;
    }
    ;

    m_has_lang = false;

    if (m_lang)
    {
        delete m_lang;
        m_lang = NULL;
    }
    ;

    m_has_eastAsianLayout = false;

    if (m_eastAsianLayout)
    {
        delete m_eastAsianLayout;
        m_eastAsianLayout = NULL;
    }
    ;

    m_has_specVanish = false;

    if (m_specVanish)
    {
        delete m_specVanish;
        m_specVanish = NULL;
    }
    ;

    m_has_oMath = true;
    if (!m_oMath)
    {
        m_oMath = new CT_OnOff();
    }
    return m_oMath;
}

const CT_OnOff& CT_ParaRPr::ChildGroup_1::get_oMath() const
{
    if (m_oMath)
    {
        return *m_oMath;
    }
    return CT_OnOff::default_instance();
}

CT_ParaRPr* CT_ParaRPr::default_instance_ = NULL;

// CT_AltChunk
CT_AltChunk::CT_AltChunk()
    :m_has_altChunkPr(false),
     m_altChunkPr(NULL),
     m_has_r_id_attr(false),
     m_r_id_attr(NULL)
{
}
CT_AltChunk::~CT_AltChunk()
{
    clear();
}
bool CT_AltChunk::has_altChunkPr() const
{
    return m_has_altChunkPr;
}

CT_AltChunkPr* CT_AltChunk::mutable_altChunkPr()
{
    m_has_altChunkPr = true;
    if (!m_altChunkPr)
    {
        m_altChunkPr = new CT_AltChunkPr();
    }
    return m_altChunkPr;
}

const CT_AltChunkPr& CT_AltChunk::get_altChunkPr() const
{
    if (m_altChunkPr)
    {
        return *m_altChunkPr;
    }
    return CT_AltChunkPr::default_instance();
}

void CT_AltChunk::clear()
{
    m_has_r_id_attr = false;

    if (m_r_id_attr)
    {
        delete m_r_id_attr;
        m_r_id_attr = NULL;
    }


    m_has_altChunkPr = false;

    if (m_altChunkPr)
    {
        delete m_altChunkPr;
        m_altChunkPr = NULL;
    }

}

void CT_AltChunk::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_r_id_attr)
    {
        m_r_id_attr->toXmlAttr("r:id", _outStream);
    }

    _outStream << ">";


    if (m_has_altChunkPr)
    {
        m_altChunkPr->toXmlElem("w:altChunkPr", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_AltChunk& CT_AltChunk::default_instance()
{
    if (!CT_AltChunk::default_instance_)
    {
        CT_AltChunk::default_instance_ = new CT_AltChunk();
    }
    return *CT_AltChunk::default_instance_;
}

bool CT_AltChunk::has_r_id_attr() const
{
    return m_has_r_id_attr;
}

void CT_AltChunk::set_r_id_attr(const ns_r::ST_RelationshipId& _r_id_attr)
{
    m_has_r_id_attr = true;
    m_r_id_attr = new ns_r::ST_RelationshipId(_r_id_attr);
}

const ns_r::ST_RelationshipId& CT_AltChunk::get_r_id_attr() const
{
    if (m_r_id_attr)
    {
        return *m_r_id_attr;
    }
    return ns_r::ST_RelationshipId::default_instance();
}

CT_AltChunk* CT_AltChunk::default_instance_ = NULL;

// CT_AltChunkPr
CT_AltChunkPr::CT_AltChunkPr()
    :m_has_matchSrc(false),
     m_matchSrc(NULL)
{
}
CT_AltChunkPr::~CT_AltChunkPr()
{
    clear();
}
bool CT_AltChunkPr::has_matchSrc() const
{
    return m_has_matchSrc;
}

CT_OnOff* CT_AltChunkPr::mutable_matchSrc()
{
    m_has_matchSrc = true;
    if (!m_matchSrc)
    {
        m_matchSrc = new CT_OnOff();
    }
    return m_matchSrc;
}

const CT_OnOff& CT_AltChunkPr::get_matchSrc() const
{
    if (m_matchSrc)
    {
        return *m_matchSrc;
    }
    return CT_OnOff::default_instance();
}

void CT_AltChunkPr::clear()
{
    m_has_matchSrc = false;

    if (m_matchSrc)
    {
        delete m_matchSrc;
        m_matchSrc = NULL;
    }

}

void CT_AltChunkPr::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";


    if (m_has_matchSrc)
    {
        m_matchSrc->toXmlElem("w:matchSrc", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_AltChunkPr& CT_AltChunkPr::default_instance()
{
    if (!CT_AltChunkPr::default_instance_)
    {
        CT_AltChunkPr::default_instance_ = new CT_AltChunkPr();
    }
    return *CT_AltChunkPr::default_instance_;
}

CT_AltChunkPr* CT_AltChunkPr::default_instance_ = NULL;

// CT_RubyAlign
CT_RubyAlign::CT_RubyAlign()
    :m_has_val_attr(false),
     m_val_attr(NULL)
{
}
CT_RubyAlign::~CT_RubyAlign()
{
    clear();
}
void CT_RubyAlign::clear()
{
    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }

}

void CT_RubyAlign::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_val_attr);
    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_RubyAlign& CT_RubyAlign::default_instance()
{
    if (!CT_RubyAlign::default_instance_)
    {
        CT_RubyAlign::default_instance_ = new CT_RubyAlign();
    }
    return *CT_RubyAlign::default_instance_;
}

bool CT_RubyAlign::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_RubyAlign::set_val_attr(const ST_RubyAlign& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ST_RubyAlign(_val_attr);
}

const ST_RubyAlign& CT_RubyAlign::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ST_RubyAlign::default_instance();
}

CT_RubyAlign* CT_RubyAlign::default_instance_ = NULL;

// CT_RubyPr
CT_RubyPr::CT_RubyPr()
    :m_has_rubyAlign(false),
     m_rubyAlign(NULL),
     m_has_hps(false),
     m_hps(NULL),
     m_has_hpsRaise(false),
     m_hpsRaise(NULL),
     m_has_hpsBaseText(false),
     m_hpsBaseText(NULL),
     m_has_lid(false),
     m_lid(NULL),
     m_has_dirty(false),
     m_dirty(NULL)
{
}
CT_RubyPr::~CT_RubyPr()
{
    clear();
}
bool CT_RubyPr::has_rubyAlign() const
{
    return m_has_rubyAlign;
}

CT_RubyAlign* CT_RubyPr::mutable_rubyAlign()
{
    m_has_rubyAlign = true;
    if (!m_rubyAlign)
    {
        m_rubyAlign = new CT_RubyAlign();
    }
    return m_rubyAlign;
}

const CT_RubyAlign& CT_RubyPr::get_rubyAlign() const
{
    if (m_rubyAlign)
    {
        return *m_rubyAlign;
    }
    return CT_RubyAlign::default_instance();
}

bool CT_RubyPr::has_hps() const
{
    return m_has_hps;
}

CT_HpsMeasure* CT_RubyPr::mutable_hps()
{
    m_has_hps = true;
    if (!m_hps)
    {
        m_hps = new CT_HpsMeasure();
    }
    return m_hps;
}

const CT_HpsMeasure& CT_RubyPr::get_hps() const
{
    if (m_hps)
    {
        return *m_hps;
    }
    return CT_HpsMeasure::default_instance();
}

bool CT_RubyPr::has_hpsRaise() const
{
    return m_has_hpsRaise;
}

CT_HpsMeasure* CT_RubyPr::mutable_hpsRaise()
{
    m_has_hpsRaise = true;
    if (!m_hpsRaise)
    {
        m_hpsRaise = new CT_HpsMeasure();
    }
    return m_hpsRaise;
}

const CT_HpsMeasure& CT_RubyPr::get_hpsRaise() const
{
    if (m_hpsRaise)
    {
        return *m_hpsRaise;
    }
    return CT_HpsMeasure::default_instance();
}

bool CT_RubyPr::has_hpsBaseText() const
{
    return m_has_hpsBaseText;
}

CT_HpsMeasure* CT_RubyPr::mutable_hpsBaseText()
{
    m_has_hpsBaseText = true;
    if (!m_hpsBaseText)
    {
        m_hpsBaseText = new CT_HpsMeasure();
    }
    return m_hpsBaseText;
}

const CT_HpsMeasure& CT_RubyPr::get_hpsBaseText() const
{
    if (m_hpsBaseText)
    {
        return *m_hpsBaseText;
    }
    return CT_HpsMeasure::default_instance();
}

bool CT_RubyPr::has_lid() const
{
    return m_has_lid;
}

CT_Lang* CT_RubyPr::mutable_lid()
{
    m_has_lid = true;
    if (!m_lid)
    {
        m_lid = new CT_Lang();
    }
    return m_lid;
}

const CT_Lang& CT_RubyPr::get_lid() const
{
    if (m_lid)
    {
        return *m_lid;
    }
    return CT_Lang::default_instance();
}

bool CT_RubyPr::has_dirty() const
{
    return m_has_dirty;
}

CT_OnOff* CT_RubyPr::mutable_dirty()
{
    m_has_dirty = true;
    if (!m_dirty)
    {
        m_dirty = new CT_OnOff();
    }
    return m_dirty;
}

const CT_OnOff& CT_RubyPr::get_dirty() const
{
    if (m_dirty)
    {
        return *m_dirty;
    }
    return CT_OnOff::default_instance();
}

void CT_RubyPr::clear()
{
    m_has_rubyAlign = false;

    if (m_rubyAlign)
    {
        delete m_rubyAlign;
        m_rubyAlign = NULL;
    }


    m_has_hps = false;

    if (m_hps)
    {
        delete m_hps;
        m_hps = NULL;
    }


    m_has_hpsRaise = false;

    if (m_hpsRaise)
    {
        delete m_hpsRaise;
        m_hpsRaise = NULL;
    }


    m_has_hpsBaseText = false;

    if (m_hpsBaseText)
    {
        delete m_hpsBaseText;
        m_hpsBaseText = NULL;
    }


    m_has_lid = false;

    if (m_lid)
    {
        delete m_lid;
        m_lid = NULL;
    }


    m_has_dirty = false;

    if (m_dirty)
    {
        delete m_dirty;
        m_dirty = NULL;
    }

}

void CT_RubyPr::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";

    assert(m_has_rubyAlign);


    assert(m_has_hps);


    assert(m_has_hpsRaise);


    assert(m_has_hpsBaseText);


    assert(m_has_lid);


    if (m_has_rubyAlign)
    {
        m_rubyAlign->toXmlElem("w:rubyAlign", "", _outStream);
    }


    if (m_has_hps)
    {
        m_hps->toXmlElem("w:hps", "", _outStream);
    }


    if (m_has_hpsRaise)
    {
        m_hpsRaise->toXmlElem("w:hpsRaise", "", _outStream);
    }


    if (m_has_hpsBaseText)
    {
        m_hpsBaseText->toXmlElem("w:hpsBaseText", "", _outStream);
    }


    if (m_has_lid)
    {
        m_lid->toXmlElem("w:lid", "", _outStream);
    }


    if (m_has_dirty)
    {
        m_dirty->toXmlElem("w:dirty", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_RubyPr& CT_RubyPr::default_instance()
{
    if (!CT_RubyPr::default_instance_)
    {
        CT_RubyPr::default_instance_ = new CT_RubyPr();
    }
    return *CT_RubyPr::default_instance_;
}

CT_RubyPr* CT_RubyPr::default_instance_ = NULL;

// CT_RubyContent
CT_RubyContent::CT_RubyContent()

{
}
CT_RubyContent::~CT_RubyContent()
{
    clear();
}
void CT_RubyContent::clear()
{    }

void CT_RubyContent::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_RubyContent& CT_RubyContent::default_instance()
{
    if (!CT_RubyContent::default_instance_)
    {
        CT_RubyContent::default_instance_ = new CT_RubyContent();
    }
    return *CT_RubyContent::default_instance_;
}

CT_RubyContent* CT_RubyContent::default_instance_ = NULL;

// CT_Ruby
CT_Ruby::CT_Ruby()
    :m_has_rubyPr(false),
     m_rubyPr(NULL),
     m_has_rt(false),
     m_rt(NULL),
     m_has_rubyBase(false),
     m_rubyBase(NULL)
{
}
CT_Ruby::~CT_Ruby()
{
    clear();
}
bool CT_Ruby::has_rubyPr() const
{
    return m_has_rubyPr;
}

CT_RubyPr* CT_Ruby::mutable_rubyPr()
{
    m_has_rubyPr = true;
    if (!m_rubyPr)
    {
        m_rubyPr = new CT_RubyPr();
    }
    return m_rubyPr;
}

const CT_RubyPr& CT_Ruby::get_rubyPr() const
{
    if (m_rubyPr)
    {
        return *m_rubyPr;
    }
    return CT_RubyPr::default_instance();
}

bool CT_Ruby::has_rt() const
{
    return m_has_rt;
}

CT_RubyContent* CT_Ruby::mutable_rt()
{
    m_has_rt = true;
    if (!m_rt)
    {
        m_rt = new CT_RubyContent();
    }
    return m_rt;
}

const CT_RubyContent& CT_Ruby::get_rt() const
{
    if (m_rt)
    {
        return *m_rt;
    }
    return CT_RubyContent::default_instance();
}

bool CT_Ruby::has_rubyBase() const
{
    return m_has_rubyBase;
}

CT_RubyContent* CT_Ruby::mutable_rubyBase()
{
    m_has_rubyBase = true;
    if (!m_rubyBase)
    {
        m_rubyBase = new CT_RubyContent();
    }
    return m_rubyBase;
}

const CT_RubyContent& CT_Ruby::get_rubyBase() const
{
    if (m_rubyBase)
    {
        return *m_rubyBase;
    }
    return CT_RubyContent::default_instance();
}

void CT_Ruby::clear()
{
    m_has_rubyPr = false;

    if (m_rubyPr)
    {
        delete m_rubyPr;
        m_rubyPr = NULL;
    }


    m_has_rt = false;

    if (m_rt)
    {
        delete m_rt;
        m_rt = NULL;
    }


    m_has_rubyBase = false;

    if (m_rubyBase)
    {
        delete m_rubyBase;
        m_rubyBase = NULL;
    }

}

void CT_Ruby::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";

    assert(m_has_rubyPr);


    assert(m_has_rt);


    assert(m_has_rubyBase);


    if (m_has_rubyPr)
    {
        m_rubyPr->toXmlElem("w:rubyPr", "", _outStream);
    }


    if (m_has_rt)
    {
        m_rt->toXmlElem("w:rt", "", _outStream);
    }


    if (m_has_rubyBase)
    {
        m_rubyBase->toXmlElem("w:rubyBase", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_Ruby& CT_Ruby::default_instance()
{
    if (!CT_Ruby::default_instance_)
    {
        CT_Ruby::default_instance_ = new CT_Ruby();
    }
    return *CT_Ruby::default_instance_;
}

CT_Ruby* CT_Ruby::default_instance_ = NULL;

// CT_Lock
CT_Lock::CT_Lock()
    :m_has_val_attr(false),
     m_val_attr(NULL)
{
}
CT_Lock::~CT_Lock()
{
    clear();
}
void CT_Lock::clear()
{
    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }

}

void CT_Lock::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_Lock& CT_Lock::default_instance()
{
    if (!CT_Lock::default_instance_)
    {
        CT_Lock::default_instance_ = new CT_Lock();
    }
    return *CT_Lock::default_instance_;
}

bool CT_Lock::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_Lock::set_val_attr(const ST_Lock& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ST_Lock(_val_attr);
}

const ST_Lock& CT_Lock::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ST_Lock::default_instance();
}

CT_Lock* CT_Lock::default_instance_ = NULL;

// CT_SdtListItem
CT_SdtListItem::CT_SdtListItem()
    :m_has_displayText_attr(false),
     m_displayText_attr(NULL),
     m_has_value_attr(false),
     m_value_attr(NULL)
{
}
CT_SdtListItem::~CT_SdtListItem()
{
    clear();
}
void CT_SdtListItem::clear()
{
    m_has_displayText_attr = false;

    if (m_displayText_attr)
    {
        delete m_displayText_attr;
        m_displayText_attr = NULL;
    }


    m_has_value_attr = false;

    if (m_value_attr)
    {
        delete m_value_attr;
        m_value_attr = NULL;
    }

}

void CT_SdtListItem::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_displayText_attr)
    {
        m_displayText_attr->toXmlAttr("w:displayText", _outStream);
    }



    if (m_has_value_attr)
    {
        m_value_attr->toXmlAttr("w:value", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_SdtListItem& CT_SdtListItem::default_instance()
{
    if (!CT_SdtListItem::default_instance_)
    {
        CT_SdtListItem::default_instance_ = new CT_SdtListItem();
    }
    return *CT_SdtListItem::default_instance_;
}

bool CT_SdtListItem::has_displayText_attr() const
{
    return m_has_displayText_attr;
}

void CT_SdtListItem::set_displayText_attr(const ns_s::ST_String& _displayText_attr)
{
    m_has_displayText_attr = true;
    m_displayText_attr = new ns_s::ST_String(_displayText_attr);
}

const ns_s::ST_String& CT_SdtListItem::get_displayText_attr() const
{
    if (m_displayText_attr)
    {
        return *m_displayText_attr;
    }
    return ns_s::ST_String::default_instance();
}

bool CT_SdtListItem::has_value_attr() const
{
    return m_has_value_attr;
}

void CT_SdtListItem::set_value_attr(const ns_s::ST_String& _value_attr)
{
    m_has_value_attr = true;
    m_value_attr = new ns_s::ST_String(_value_attr);
}

const ns_s::ST_String& CT_SdtListItem::get_value_attr() const
{
    if (m_value_attr)
    {
        return *m_value_attr;
    }
    return ns_s::ST_String::default_instance();
}

CT_SdtListItem* CT_SdtListItem::default_instance_ = NULL;

// CT_SdtDateMappingType
CT_SdtDateMappingType::CT_SdtDateMappingType()
    :m_has_val_attr(false),
     m_val_attr(NULL)
{
}
CT_SdtDateMappingType::~CT_SdtDateMappingType()
{
    clear();
}
void CT_SdtDateMappingType::clear()
{
    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }

}

void CT_SdtDateMappingType::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_SdtDateMappingType& CT_SdtDateMappingType::default_instance()
{
    if (!CT_SdtDateMappingType::default_instance_)
    {
        CT_SdtDateMappingType::default_instance_ = new CT_SdtDateMappingType();
    }
    return *CT_SdtDateMappingType::default_instance_;
}

bool CT_SdtDateMappingType::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_SdtDateMappingType::set_val_attr(const ST_SdtDateMappingType& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ST_SdtDateMappingType(_val_attr);
}

const ST_SdtDateMappingType& CT_SdtDateMappingType::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ST_SdtDateMappingType::default_instance();
}

CT_SdtDateMappingType* CT_SdtDateMappingType::default_instance_ = NULL;

// CT_CalendarType
CT_CalendarType::CT_CalendarType()
    :m_has_val_attr(false),
     m_val_attr(NULL)
{
}
CT_CalendarType::~CT_CalendarType()
{
    clear();
}
void CT_CalendarType::clear()
{
    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }

}

void CT_CalendarType::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_CalendarType& CT_CalendarType::default_instance()
{
    if (!CT_CalendarType::default_instance_)
    {
        CT_CalendarType::default_instance_ = new CT_CalendarType();
    }
    return *CT_CalendarType::default_instance_;
}

bool CT_CalendarType::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_CalendarType::set_val_attr(const ns_s::ST_CalendarType& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ns_s::ST_CalendarType(_val_attr);
}

const ns_s::ST_CalendarType& CT_CalendarType::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ns_s::ST_CalendarType::default_instance();
}

CT_CalendarType* CT_CalendarType::default_instance_ = NULL;

// CT_SdtDate
CT_SdtDate::CT_SdtDate()
    :m_has_dateFormat(false),
     m_dateFormat(NULL),
     m_has_lid(false),
     m_lid(NULL),
     m_has_storeMappedDataAs(false),
     m_storeMappedDataAs(NULL),
     m_has_calendar(false),
     m_calendar(NULL),
     m_has_fullDate_attr(false),
     m_fullDate_attr(NULL)
{
}
CT_SdtDate::~CT_SdtDate()
{
    clear();
}
bool CT_SdtDate::has_dateFormat() const
{
    return m_has_dateFormat;
}

CT_String* CT_SdtDate::mutable_dateFormat()
{
    m_has_dateFormat = true;
    if (!m_dateFormat)
    {
        m_dateFormat = new CT_String();
    }
    return m_dateFormat;
}

const CT_String& CT_SdtDate::get_dateFormat() const
{
    if (m_dateFormat)
    {
        return *m_dateFormat;
    }
    return CT_String::default_instance();
}

bool CT_SdtDate::has_lid() const
{
    return m_has_lid;
}

CT_Lang* CT_SdtDate::mutable_lid()
{
    m_has_lid = true;
    if (!m_lid)
    {
        m_lid = new CT_Lang();
    }
    return m_lid;
}

const CT_Lang& CT_SdtDate::get_lid() const
{
    if (m_lid)
    {
        return *m_lid;
    }
    return CT_Lang::default_instance();
}

bool CT_SdtDate::has_storeMappedDataAs() const
{
    return m_has_storeMappedDataAs;
}

CT_SdtDateMappingType* CT_SdtDate::mutable_storeMappedDataAs()
{
    m_has_storeMappedDataAs = true;
    if (!m_storeMappedDataAs)
    {
        m_storeMappedDataAs = new CT_SdtDateMappingType();
    }
    return m_storeMappedDataAs;
}

const CT_SdtDateMappingType& CT_SdtDate::get_storeMappedDataAs() const
{
    if (m_storeMappedDataAs)
    {
        return *m_storeMappedDataAs;
    }
    return CT_SdtDateMappingType::default_instance();
}

bool CT_SdtDate::has_calendar() const
{
    return m_has_calendar;
}

CT_CalendarType* CT_SdtDate::mutable_calendar()
{
    m_has_calendar = true;
    if (!m_calendar)
    {
        m_calendar = new CT_CalendarType();
    }
    return m_calendar;
}

const CT_CalendarType& CT_SdtDate::get_calendar() const
{
    if (m_calendar)
    {
        return *m_calendar;
    }
    return CT_CalendarType::default_instance();
}

void CT_SdtDate::clear()
{
    m_has_fullDate_attr = false;

    if (m_fullDate_attr)
    {
        delete m_fullDate_attr;
        m_fullDate_attr = NULL;
    }


    m_has_dateFormat = false;

    if (m_dateFormat)
    {
        delete m_dateFormat;
        m_dateFormat = NULL;
    }


    m_has_lid = false;

    if (m_lid)
    {
        delete m_lid;
        m_lid = NULL;
    }


    m_has_storeMappedDataAs = false;

    if (m_storeMappedDataAs)
    {
        delete m_storeMappedDataAs;
        m_storeMappedDataAs = NULL;
    }


    m_has_calendar = false;

    if (m_calendar)
    {
        delete m_calendar;
        m_calendar = NULL;
    }

}

void CT_SdtDate::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_fullDate_attr)
    {
        m_fullDate_attr->toXmlAttr("w:fullDate", _outStream);
    }

    _outStream << ">";


    if (m_has_dateFormat)
    {
        m_dateFormat->toXmlElem("w:dateFormat", "", _outStream);
    }


    if (m_has_lid)
    {
        m_lid->toXmlElem("w:lid", "", _outStream);
    }


    if (m_has_storeMappedDataAs)
    {
        m_storeMappedDataAs->toXmlElem("w:storeMappedDataAs", "", _outStream);
    }


    if (m_has_calendar)
    {
        m_calendar->toXmlElem("w:calendar", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_SdtDate& CT_SdtDate::default_instance()
{
    if (!CT_SdtDate::default_instance_)
    {
        CT_SdtDate::default_instance_ = new CT_SdtDate();
    }
    return *CT_SdtDate::default_instance_;
}

bool CT_SdtDate::has_fullDate_attr() const
{
    return m_has_fullDate_attr;
}

void CT_SdtDate::set_fullDate_attr(const ST_DateTime& _fullDate_attr)
{
    m_has_fullDate_attr = true;
    m_fullDate_attr = new ST_DateTime(_fullDate_attr);
}

const ST_DateTime& CT_SdtDate::get_fullDate_attr() const
{
    if (m_fullDate_attr)
    {
        return *m_fullDate_attr;
    }
    return ST_DateTime::default_instance();
}

CT_SdtDate* CT_SdtDate::default_instance_ = NULL;

// CT_SdtComboBox
CT_SdtComboBox::CT_SdtComboBox()
    :m_has_lastValue_attr(false),
     m_lastValue_attr(NULL)
{
}
CT_SdtComboBox::~CT_SdtComboBox()
{
    clear();
}
CT_SdtListItem* CT_SdtComboBox::add_listItem()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_SdtListItem* pNewChild = pChildGroup->mutable_listItem();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

void CT_SdtComboBox::clear()
{
    m_has_lastValue_attr = false;

    if (m_lastValue_attr)
    {
        delete m_lastValue_attr;
        m_lastValue_attr = NULL;
    }


    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
}

void CT_SdtComboBox::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_lastValue_attr)
    {
        m_lastValue_attr->toXmlAttr("w:lastValue", _outStream);
    }

    _outStream << ">";

    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_listItem())
            {
                (*iter)->get_listItem().toXmlElem("w:listItem", "", _outStream);
            }


        }
    }

    _outStream << "</" << _elemName << ">";
}

const CT_SdtComboBox& CT_SdtComboBox::default_instance()
{
    if (!CT_SdtComboBox::default_instance_)
    {
        CT_SdtComboBox::default_instance_ = new CT_SdtComboBox();
    }
    return *CT_SdtComboBox::default_instance_;
}

bool CT_SdtComboBox::has_lastValue_attr() const
{
    return m_has_lastValue_attr;
}

void CT_SdtComboBox::set_lastValue_attr(const ns_s::ST_String& _lastValue_attr)
{
    m_has_lastValue_attr = true;
    m_lastValue_attr = new ns_s::ST_String(_lastValue_attr);
}

const ns_s::ST_String& CT_SdtComboBox::get_lastValue_attr() const
{
    if (m_lastValue_attr)
    {
        return *m_lastValue_attr;
    }
    return ns_s::ST_String::default_instance();
}


// CT_SdtComboBox::ChildGroup_1
CT_SdtComboBox::ChildGroup_1::ChildGroup_1()
    :m_has_listItem(false),
     m_listItem(NULL)
{
}
bool CT_SdtComboBox::ChildGroup_1::has_listItem() const
{
    return m_has_listItem;
}

CT_SdtListItem* CT_SdtComboBox::ChildGroup_1::mutable_listItem()
{

    m_has_listItem = true;
    if (!m_listItem)
    {
        m_listItem = new CT_SdtListItem();
    }
    return m_listItem;
}

const CT_SdtListItem& CT_SdtComboBox::ChildGroup_1::get_listItem() const
{
    if (m_listItem)
    {
        return *m_listItem;
    }
    return CT_SdtListItem::default_instance();
}

CT_SdtComboBox* CT_SdtComboBox::default_instance_ = NULL;

// CT_SdtDocPart
CT_SdtDocPart::CT_SdtDocPart()
    :m_has_docPartGallery(false),
     m_docPartGallery(NULL),
     m_has_docPartCategory(false),
     m_docPartCategory(NULL),
     m_has_docPartUnique(false),
     m_docPartUnique(NULL)
{
}
CT_SdtDocPart::~CT_SdtDocPart()
{
    clear();
}
bool CT_SdtDocPart::has_docPartGallery() const
{
    return m_has_docPartGallery;
}

CT_String* CT_SdtDocPart::mutable_docPartGallery()
{
    m_has_docPartGallery = true;
    if (!m_docPartGallery)
    {
        m_docPartGallery = new CT_String();
    }
    return m_docPartGallery;
}

const CT_String& CT_SdtDocPart::get_docPartGallery() const
{
    if (m_docPartGallery)
    {
        return *m_docPartGallery;
    }
    return CT_String::default_instance();
}

bool CT_SdtDocPart::has_docPartCategory() const
{
    return m_has_docPartCategory;
}

CT_String* CT_SdtDocPart::mutable_docPartCategory()
{
    m_has_docPartCategory = true;
    if (!m_docPartCategory)
    {
        m_docPartCategory = new CT_String();
    }
    return m_docPartCategory;
}

const CT_String& CT_SdtDocPart::get_docPartCategory() const
{
    if (m_docPartCategory)
    {
        return *m_docPartCategory;
    }
    return CT_String::default_instance();
}

bool CT_SdtDocPart::has_docPartUnique() const
{
    return m_has_docPartUnique;
}

CT_OnOff* CT_SdtDocPart::mutable_docPartUnique()
{
    m_has_docPartUnique = true;
    if (!m_docPartUnique)
    {
        m_docPartUnique = new CT_OnOff();
    }
    return m_docPartUnique;
}

const CT_OnOff& CT_SdtDocPart::get_docPartUnique() const
{
    if (m_docPartUnique)
    {
        return *m_docPartUnique;
    }
    return CT_OnOff::default_instance();
}

void CT_SdtDocPart::clear()
{
    m_has_docPartGallery = false;

    if (m_docPartGallery)
    {
        delete m_docPartGallery;
        m_docPartGallery = NULL;
    }


    m_has_docPartCategory = false;

    if (m_docPartCategory)
    {
        delete m_docPartCategory;
        m_docPartCategory = NULL;
    }


    m_has_docPartUnique = false;

    if (m_docPartUnique)
    {
        delete m_docPartUnique;
        m_docPartUnique = NULL;
    }

}

void CT_SdtDocPart::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";


    if (m_has_docPartGallery)
    {
        m_docPartGallery->toXmlElem("w:docPartGallery", "", _outStream);
    }


    if (m_has_docPartCategory)
    {
        m_docPartCategory->toXmlElem("w:docPartCategory", "", _outStream);
    }


    if (m_has_docPartUnique)
    {
        m_docPartUnique->toXmlElem("w:docPartUnique", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_SdtDocPart& CT_SdtDocPart::default_instance()
{
    if (!CT_SdtDocPart::default_instance_)
    {
        CT_SdtDocPart::default_instance_ = new CT_SdtDocPart();
    }
    return *CT_SdtDocPart::default_instance_;
}

CT_SdtDocPart* CT_SdtDocPart::default_instance_ = NULL;

// CT_SdtDropDownList
CT_SdtDropDownList::CT_SdtDropDownList()
    :m_has_lastValue_attr(false),
     m_lastValue_attr(NULL)
{
}
CT_SdtDropDownList::~CT_SdtDropDownList()
{
    clear();
}
CT_SdtListItem* CT_SdtDropDownList::add_listItem()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_SdtListItem* pNewChild = pChildGroup->mutable_listItem();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

void CT_SdtDropDownList::clear()
{
    m_has_lastValue_attr = false;

    if (m_lastValue_attr)
    {
        delete m_lastValue_attr;
        m_lastValue_attr = NULL;
    }


    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
}

void CT_SdtDropDownList::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_lastValue_attr)
    {
        m_lastValue_attr->toXmlAttr("w:lastValue", _outStream);
    }

    _outStream << ">";

    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_listItem())
            {
                (*iter)->get_listItem().toXmlElem("w:listItem", "", _outStream);
            }


        }
    }

    _outStream << "</" << _elemName << ">";
}

const CT_SdtDropDownList& CT_SdtDropDownList::default_instance()
{
    if (!CT_SdtDropDownList::default_instance_)
    {
        CT_SdtDropDownList::default_instance_ = new CT_SdtDropDownList();
    }
    return *CT_SdtDropDownList::default_instance_;
}

bool CT_SdtDropDownList::has_lastValue_attr() const
{
    return m_has_lastValue_attr;
}

void CT_SdtDropDownList::set_lastValue_attr(const ns_s::ST_String& _lastValue_attr)
{
    m_has_lastValue_attr = true;
    m_lastValue_attr = new ns_s::ST_String(_lastValue_attr);
}

const ns_s::ST_String& CT_SdtDropDownList::get_lastValue_attr() const
{
    if (m_lastValue_attr)
    {
        return *m_lastValue_attr;
    }
    return ns_s::ST_String::default_instance();
}


// CT_SdtDropDownList::ChildGroup_1
CT_SdtDropDownList::ChildGroup_1::ChildGroup_1()
    :m_has_listItem(false),
     m_listItem(NULL)
{
}
bool CT_SdtDropDownList::ChildGroup_1::has_listItem() const
{
    return m_has_listItem;
}

CT_SdtListItem* CT_SdtDropDownList::ChildGroup_1::mutable_listItem()
{

    m_has_listItem = true;
    if (!m_listItem)
    {
        m_listItem = new CT_SdtListItem();
    }
    return m_listItem;
}

const CT_SdtListItem& CT_SdtDropDownList::ChildGroup_1::get_listItem() const
{
    if (m_listItem)
    {
        return *m_listItem;
    }
    return CT_SdtListItem::default_instance();
}

CT_SdtDropDownList* CT_SdtDropDownList::default_instance_ = NULL;

// CT_Placeholder
CT_Placeholder::CT_Placeholder()
    :m_has_docPart(false),
     m_docPart(NULL)
{
}
CT_Placeholder::~CT_Placeholder()
{
    clear();
}
bool CT_Placeholder::has_docPart() const
{
    return m_has_docPart;
}

CT_String* CT_Placeholder::mutable_docPart()
{
    m_has_docPart = true;
    if (!m_docPart)
    {
        m_docPart = new CT_String();
    }
    return m_docPart;
}

const CT_String& CT_Placeholder::get_docPart() const
{
    if (m_docPart)
    {
        return *m_docPart;
    }
    return CT_String::default_instance();
}

void CT_Placeholder::clear()
{
    m_has_docPart = false;

    if (m_docPart)
    {
        delete m_docPart;
        m_docPart = NULL;
    }

}

void CT_Placeholder::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";

    assert(m_has_docPart);


    if (m_has_docPart)
    {
        m_docPart->toXmlElem("w:docPart", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_Placeholder& CT_Placeholder::default_instance()
{
    if (!CT_Placeholder::default_instance_)
    {
        CT_Placeholder::default_instance_ = new CT_Placeholder();
    }
    return *CT_Placeholder::default_instance_;
}

CT_Placeholder* CT_Placeholder::default_instance_ = NULL;

// CT_SdtText
CT_SdtText::CT_SdtText()
    :m_has_multiLine_attr(false),
     m_multiLine_attr(NULL)
{
}
CT_SdtText::~CT_SdtText()
{
    clear();
}
void CT_SdtText::clear()
{
    m_has_multiLine_attr = false;

    if (m_multiLine_attr)
    {
        delete m_multiLine_attr;
        m_multiLine_attr = NULL;
    }

}

void CT_SdtText::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_multiLine_attr)
    {
        m_multiLine_attr->toXmlAttr("w:multiLine", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_SdtText& CT_SdtText::default_instance()
{
    if (!CT_SdtText::default_instance_)
    {
        CT_SdtText::default_instance_ = new CT_SdtText();
    }
    return *CT_SdtText::default_instance_;
}

bool CT_SdtText::has_multiLine_attr() const
{
    return m_has_multiLine_attr;
}

void CT_SdtText::set_multiLine_attr(const ns_s::ST_OnOff& _multiLine_attr)
{
    m_has_multiLine_attr = true;
    m_multiLine_attr = new ns_s::ST_OnOff(_multiLine_attr);
}

const ns_s::ST_OnOff& CT_SdtText::get_multiLine_attr() const
{
    if (m_multiLine_attr)
    {
        return *m_multiLine_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

CT_SdtText* CT_SdtText::default_instance_ = NULL;

// CT_DataBinding
CT_DataBinding::CT_DataBinding()
    :m_has_prefixMappings_attr(false),
     m_prefixMappings_attr(NULL),
     m_has_xpath_attr(false),
     m_xpath_attr(NULL),
     m_has_storeItemID_attr(false),
     m_storeItemID_attr(NULL)
{
}
CT_DataBinding::~CT_DataBinding()
{
    clear();
}
void CT_DataBinding::clear()
{
    m_has_prefixMappings_attr = false;

    if (m_prefixMappings_attr)
    {
        delete m_prefixMappings_attr;
        m_prefixMappings_attr = NULL;
    }


    m_has_xpath_attr = false;

    if (m_xpath_attr)
    {
        delete m_xpath_attr;
        m_xpath_attr = NULL;
    }


    m_has_storeItemID_attr = false;

    if (m_storeItemID_attr)
    {
        delete m_storeItemID_attr;
        m_storeItemID_attr = NULL;
    }

}

void CT_DataBinding::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_prefixMappings_attr)
    {
        m_prefixMappings_attr->toXmlAttr("w:prefixMappings", _outStream);
    }


    assert(m_has_xpath_attr);
    if (m_has_xpath_attr)
    {
        m_xpath_attr->toXmlAttr("w:xpath", _outStream);
    }


    assert(m_has_storeItemID_attr);
    if (m_has_storeItemID_attr)
    {
        m_storeItemID_attr->toXmlAttr("w:storeItemID", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_DataBinding& CT_DataBinding::default_instance()
{
    if (!CT_DataBinding::default_instance_)
    {
        CT_DataBinding::default_instance_ = new CT_DataBinding();
    }
    return *CT_DataBinding::default_instance_;
}

bool CT_DataBinding::has_prefixMappings_attr() const
{
    return m_has_prefixMappings_attr;
}

void CT_DataBinding::set_prefixMappings_attr(const ns_s::ST_String& _prefixMappings_attr)
{
    m_has_prefixMappings_attr = true;
    m_prefixMappings_attr = new ns_s::ST_String(_prefixMappings_attr);
}

const ns_s::ST_String& CT_DataBinding::get_prefixMappings_attr() const
{
    if (m_prefixMappings_attr)
    {
        return *m_prefixMappings_attr;
    }
    return ns_s::ST_String::default_instance();
}

bool CT_DataBinding::has_xpath_attr() const
{
    return m_has_xpath_attr;
}

void CT_DataBinding::set_xpath_attr(const ns_s::ST_String& _xpath_attr)
{
    m_has_xpath_attr = true;
    m_xpath_attr = new ns_s::ST_String(_xpath_attr);
}

const ns_s::ST_String& CT_DataBinding::get_xpath_attr() const
{
    if (m_xpath_attr)
    {
        return *m_xpath_attr;
    }
    return ns_s::ST_String::default_instance();
}

bool CT_DataBinding::has_storeItemID_attr() const
{
    return m_has_storeItemID_attr;
}

void CT_DataBinding::set_storeItemID_attr(const ns_s::ST_String& _storeItemID_attr)
{
    m_has_storeItemID_attr = true;
    m_storeItemID_attr = new ns_s::ST_String(_storeItemID_attr);
}

const ns_s::ST_String& CT_DataBinding::get_storeItemID_attr() const
{
    if (m_storeItemID_attr)
    {
        return *m_storeItemID_attr;
    }
    return ns_s::ST_String::default_instance();
}

CT_DataBinding* CT_DataBinding::default_instance_ = NULL;

// CT_SdtPr
CT_SdtPr::CT_SdtPr()
    :m_has_rPr(false),
     m_rPr(NULL),
     m_has_alias(false),
     m_alias(NULL),
     m_has_tag(false),
     m_tag(NULL),
     m_has_id(false),
     m_id(NULL),
     m_has_lock(false),
     m_lock(NULL),
     m_has_placeholder(false),
     m_placeholder(NULL),
     m_has_temporary(false),
     m_temporary(NULL),
     m_has_showingPlcHdr(false),
     m_showingPlcHdr(NULL),
     m_has_dataBinding(false),
     m_dataBinding(NULL),
     m_has_label(false),
     m_label(NULL),
     m_has_tabIndex(false),
     m_tabIndex(NULL),
     m_has_equation(false),
     m_equation(NULL),
     m_has_comboBox(false),
     m_comboBox(NULL),
     m_has_date(false),
     m_date(NULL),
     m_has_docPartObj(false),
     m_docPartObj(NULL),
     m_has_docPartList(false),
     m_docPartList(NULL),
     m_has_dropDownList(false),
     m_dropDownList(NULL),
     m_has_picture(false),
     m_picture(NULL),
     m_has_richText(false),
     m_richText(NULL),
     m_has_text(false),
     m_text(NULL),
     m_has_citation(false),
     m_citation(NULL),
     m_has_group(false),
     m_group(NULL),
     m_has_bibliography(false),
     m_bibliography(NULL)
{
}
CT_SdtPr::~CT_SdtPr()
{
    clear();
}
bool CT_SdtPr::has_rPr() const
{
    return m_has_rPr;
}

CT_RPr* CT_SdtPr::mutable_rPr()
{
    m_has_rPr = true;
    if (!m_rPr)
    {
        m_rPr = new CT_RPr();
    }
    return m_rPr;
}

const CT_RPr& CT_SdtPr::get_rPr() const
{
    if (m_rPr)
    {
        return *m_rPr;
    }
    return CT_RPr::default_instance();
}

bool CT_SdtPr::has_alias() const
{
    return m_has_alias;
}

CT_String* CT_SdtPr::mutable_alias()
{
    m_has_alias = true;
    if (!m_alias)
    {
        m_alias = new CT_String();
    }
    return m_alias;
}

const CT_String& CT_SdtPr::get_alias() const
{
    if (m_alias)
    {
        return *m_alias;
    }
    return CT_String::default_instance();
}

bool CT_SdtPr::has_tag() const
{
    return m_has_tag;
}

CT_String* CT_SdtPr::mutable_tag()
{
    m_has_tag = true;
    if (!m_tag)
    {
        m_tag = new CT_String();
    }
    return m_tag;
}

const CT_String& CT_SdtPr::get_tag() const
{
    if (m_tag)
    {
        return *m_tag;
    }
    return CT_String::default_instance();
}

bool CT_SdtPr::has_id() const
{
    return m_has_id;
}

CT_DecimalNumber* CT_SdtPr::mutable_id()
{
    m_has_id = true;
    if (!m_id)
    {
        m_id = new CT_DecimalNumber();
    }
    return m_id;
}

const CT_DecimalNumber& CT_SdtPr::get_id() const
{
    if (m_id)
    {
        return *m_id;
    }
    return CT_DecimalNumber::default_instance();
}

bool CT_SdtPr::has_lock() const
{
    return m_has_lock;
}

CT_Lock* CT_SdtPr::mutable_lock()
{
    m_has_lock = true;
    if (!m_lock)
    {
        m_lock = new CT_Lock();
    }
    return m_lock;
}

const CT_Lock& CT_SdtPr::get_lock() const
{
    if (m_lock)
    {
        return *m_lock;
    }
    return CT_Lock::default_instance();
}

bool CT_SdtPr::has_placeholder() const
{
    return m_has_placeholder;
}

CT_Placeholder* CT_SdtPr::mutable_placeholder()
{
    m_has_placeholder = true;
    if (!m_placeholder)
    {
        m_placeholder = new CT_Placeholder();
    }
    return m_placeholder;
}

const CT_Placeholder& CT_SdtPr::get_placeholder() const
{
    if (m_placeholder)
    {
        return *m_placeholder;
    }
    return CT_Placeholder::default_instance();
}

bool CT_SdtPr::has_temporary() const
{
    return m_has_temporary;
}

CT_OnOff* CT_SdtPr::mutable_temporary()
{
    m_has_temporary = true;
    if (!m_temporary)
    {
        m_temporary = new CT_OnOff();
    }
    return m_temporary;
}

const CT_OnOff& CT_SdtPr::get_temporary() const
{
    if (m_temporary)
    {
        return *m_temporary;
    }
    return CT_OnOff::default_instance();
}

bool CT_SdtPr::has_showingPlcHdr() const
{
    return m_has_showingPlcHdr;
}

CT_OnOff* CT_SdtPr::mutable_showingPlcHdr()
{
    m_has_showingPlcHdr = true;
    if (!m_showingPlcHdr)
    {
        m_showingPlcHdr = new CT_OnOff();
    }
    return m_showingPlcHdr;
}

const CT_OnOff& CT_SdtPr::get_showingPlcHdr() const
{
    if (m_showingPlcHdr)
    {
        return *m_showingPlcHdr;
    }
    return CT_OnOff::default_instance();
}

bool CT_SdtPr::has_dataBinding() const
{
    return m_has_dataBinding;
}

CT_DataBinding* CT_SdtPr::mutable_dataBinding()
{
    m_has_dataBinding = true;
    if (!m_dataBinding)
    {
        m_dataBinding = new CT_DataBinding();
    }
    return m_dataBinding;
}

const CT_DataBinding& CT_SdtPr::get_dataBinding() const
{
    if (m_dataBinding)
    {
        return *m_dataBinding;
    }
    return CT_DataBinding::default_instance();
}

bool CT_SdtPr::has_label() const
{
    return m_has_label;
}

CT_DecimalNumber* CT_SdtPr::mutable_label()
{
    m_has_label = true;
    if (!m_label)
    {
        m_label = new CT_DecimalNumber();
    }
    return m_label;
}

const CT_DecimalNumber& CT_SdtPr::get_label() const
{
    if (m_label)
    {
        return *m_label;
    }
    return CT_DecimalNumber::default_instance();
}

bool CT_SdtPr::has_tabIndex() const
{
    return m_has_tabIndex;
}

CT_UnsignedDecimalNumber* CT_SdtPr::mutable_tabIndex()
{
    m_has_tabIndex = true;
    if (!m_tabIndex)
    {
        m_tabIndex = new CT_UnsignedDecimalNumber();
    }
    return m_tabIndex;
}

const CT_UnsignedDecimalNumber& CT_SdtPr::get_tabIndex() const
{
    if (m_tabIndex)
    {
        return *m_tabIndex;
    }
    return CT_UnsignedDecimalNumber::default_instance();
}

bool CT_SdtPr::has_equation() const
{
    return m_has_equation;
}

CT_Empty* CT_SdtPr::mutable_equation()
{

    m_has_comboBox = false;

    if (m_comboBox)
    {
        delete m_comboBox;
        m_comboBox = NULL;
    }
    ;

    m_has_date = false;

    if (m_date)
    {
        delete m_date;
        m_date = NULL;
    }
    ;

    m_has_docPartObj = false;

    if (m_docPartObj)
    {
        delete m_docPartObj;
        m_docPartObj = NULL;
    }
    ;

    m_has_docPartList = false;

    if (m_docPartList)
    {
        delete m_docPartList;
        m_docPartList = NULL;
    }
    ;

    m_has_dropDownList = false;

    if (m_dropDownList)
    {
        delete m_dropDownList;
        m_dropDownList = NULL;
    }
    ;

    m_has_picture = false;

    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;

    m_has_richText = false;

    if (m_richText)
    {
        delete m_richText;
        m_richText = NULL;
    }
    ;

    m_has_text = false;

    if (m_text)
    {
        delete m_text;
        m_text = NULL;
    }
    ;

    m_has_citation = false;

    if (m_citation)
    {
        delete m_citation;
        m_citation = NULL;
    }
    ;

    m_has_group = false;

    if (m_group)
    {
        delete m_group;
        m_group = NULL;
    }
    ;

    m_has_bibliography = false;

    if (m_bibliography)
    {
        delete m_bibliography;
        m_bibliography = NULL;
    }
    ;

    m_has_equation = true;
    if (!m_equation)
    {
        m_equation = new CT_Empty();
    }
    return m_equation;
}

const CT_Empty& CT_SdtPr::get_equation() const
{
    if (m_equation)
    {
        return *m_equation;
    }
    return CT_Empty::default_instance();
}

bool CT_SdtPr::has_comboBox() const
{
    return m_has_comboBox;
}

CT_SdtComboBox* CT_SdtPr::mutable_comboBox()
{

    m_has_equation = false;

    if (m_equation)
    {
        delete m_equation;
        m_equation = NULL;
    }
    ;

    m_has_date = false;

    if (m_date)
    {
        delete m_date;
        m_date = NULL;
    }
    ;

    m_has_docPartObj = false;

    if (m_docPartObj)
    {
        delete m_docPartObj;
        m_docPartObj = NULL;
    }
    ;

    m_has_docPartList = false;

    if (m_docPartList)
    {
        delete m_docPartList;
        m_docPartList = NULL;
    }
    ;

    m_has_dropDownList = false;

    if (m_dropDownList)
    {
        delete m_dropDownList;
        m_dropDownList = NULL;
    }
    ;

    m_has_picture = false;

    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;

    m_has_richText = false;

    if (m_richText)
    {
        delete m_richText;
        m_richText = NULL;
    }
    ;

    m_has_text = false;

    if (m_text)
    {
        delete m_text;
        m_text = NULL;
    }
    ;

    m_has_citation = false;

    if (m_citation)
    {
        delete m_citation;
        m_citation = NULL;
    }
    ;

    m_has_group = false;

    if (m_group)
    {
        delete m_group;
        m_group = NULL;
    }
    ;

    m_has_bibliography = false;

    if (m_bibliography)
    {
        delete m_bibliography;
        m_bibliography = NULL;
    }
    ;

    m_has_comboBox = true;
    if (!m_comboBox)
    {
        m_comboBox = new CT_SdtComboBox();
    }
    return m_comboBox;
}

const CT_SdtComboBox& CT_SdtPr::get_comboBox() const
{
    if (m_comboBox)
    {
        return *m_comboBox;
    }
    return CT_SdtComboBox::default_instance();
}

bool CT_SdtPr::has_date() const
{
    return m_has_date;
}

CT_SdtDate* CT_SdtPr::mutable_date()
{

    m_has_equation = false;

    if (m_equation)
    {
        delete m_equation;
        m_equation = NULL;
    }
    ;

    m_has_comboBox = false;

    if (m_comboBox)
    {
        delete m_comboBox;
        m_comboBox = NULL;
    }
    ;

    m_has_docPartObj = false;

    if (m_docPartObj)
    {
        delete m_docPartObj;
        m_docPartObj = NULL;
    }
    ;

    m_has_docPartList = false;

    if (m_docPartList)
    {
        delete m_docPartList;
        m_docPartList = NULL;
    }
    ;

    m_has_dropDownList = false;

    if (m_dropDownList)
    {
        delete m_dropDownList;
        m_dropDownList = NULL;
    }
    ;

    m_has_picture = false;

    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;

    m_has_richText = false;

    if (m_richText)
    {
        delete m_richText;
        m_richText = NULL;
    }
    ;

    m_has_text = false;

    if (m_text)
    {
        delete m_text;
        m_text = NULL;
    }
    ;

    m_has_citation = false;

    if (m_citation)
    {
        delete m_citation;
        m_citation = NULL;
    }
    ;

    m_has_group = false;

    if (m_group)
    {
        delete m_group;
        m_group = NULL;
    }
    ;

    m_has_bibliography = false;

    if (m_bibliography)
    {
        delete m_bibliography;
        m_bibliography = NULL;
    }
    ;

    m_has_date = true;
    if (!m_date)
    {
        m_date = new CT_SdtDate();
    }
    return m_date;
}

const CT_SdtDate& CT_SdtPr::get_date() const
{
    if (m_date)
    {
        return *m_date;
    }
    return CT_SdtDate::default_instance();
}

bool CT_SdtPr::has_docPartObj() const
{
    return m_has_docPartObj;
}

CT_SdtDocPart* CT_SdtPr::mutable_docPartObj()
{

    m_has_equation = false;

    if (m_equation)
    {
        delete m_equation;
        m_equation = NULL;
    }
    ;

    m_has_comboBox = false;

    if (m_comboBox)
    {
        delete m_comboBox;
        m_comboBox = NULL;
    }
    ;

    m_has_date = false;

    if (m_date)
    {
        delete m_date;
        m_date = NULL;
    }
    ;

    m_has_docPartList = false;

    if (m_docPartList)
    {
        delete m_docPartList;
        m_docPartList = NULL;
    }
    ;

    m_has_dropDownList = false;

    if (m_dropDownList)
    {
        delete m_dropDownList;
        m_dropDownList = NULL;
    }
    ;

    m_has_picture = false;

    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;

    m_has_richText = false;

    if (m_richText)
    {
        delete m_richText;
        m_richText = NULL;
    }
    ;

    m_has_text = false;

    if (m_text)
    {
        delete m_text;
        m_text = NULL;
    }
    ;

    m_has_citation = false;

    if (m_citation)
    {
        delete m_citation;
        m_citation = NULL;
    }
    ;

    m_has_group = false;

    if (m_group)
    {
        delete m_group;
        m_group = NULL;
    }
    ;

    m_has_bibliography = false;

    if (m_bibliography)
    {
        delete m_bibliography;
        m_bibliography = NULL;
    }
    ;

    m_has_docPartObj = true;
    if (!m_docPartObj)
    {
        m_docPartObj = new CT_SdtDocPart();
    }
    return m_docPartObj;
}

const CT_SdtDocPart& CT_SdtPr::get_docPartObj() const
{
    if (m_docPartObj)
    {
        return *m_docPartObj;
    }
    return CT_SdtDocPart::default_instance();
}

bool CT_SdtPr::has_docPartList() const
{
    return m_has_docPartList;
}

CT_SdtDocPart* CT_SdtPr::mutable_docPartList()
{

    m_has_equation = false;

    if (m_equation)
    {
        delete m_equation;
        m_equation = NULL;
    }
    ;

    m_has_comboBox = false;

    if (m_comboBox)
    {
        delete m_comboBox;
        m_comboBox = NULL;
    }
    ;

    m_has_date = false;

    if (m_date)
    {
        delete m_date;
        m_date = NULL;
    }
    ;

    m_has_docPartObj = false;

    if (m_docPartObj)
    {
        delete m_docPartObj;
        m_docPartObj = NULL;
    }
    ;

    m_has_dropDownList = false;

    if (m_dropDownList)
    {
        delete m_dropDownList;
        m_dropDownList = NULL;
    }
    ;

    m_has_picture = false;

    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;

    m_has_richText = false;

    if (m_richText)
    {
        delete m_richText;
        m_richText = NULL;
    }
    ;

    m_has_text = false;

    if (m_text)
    {
        delete m_text;
        m_text = NULL;
    }
    ;

    m_has_citation = false;

    if (m_citation)
    {
        delete m_citation;
        m_citation = NULL;
    }
    ;

    m_has_group = false;

    if (m_group)
    {
        delete m_group;
        m_group = NULL;
    }
    ;

    m_has_bibliography = false;

    if (m_bibliography)
    {
        delete m_bibliography;
        m_bibliography = NULL;
    }
    ;

    m_has_docPartList = true;
    if (!m_docPartList)
    {
        m_docPartList = new CT_SdtDocPart();
    }
    return m_docPartList;
}

const CT_SdtDocPart& CT_SdtPr::get_docPartList() const
{
    if (m_docPartList)
    {
        return *m_docPartList;
    }
    return CT_SdtDocPart::default_instance();
}

bool CT_SdtPr::has_dropDownList() const
{
    return m_has_dropDownList;
}

CT_SdtDropDownList* CT_SdtPr::mutable_dropDownList()
{

    m_has_equation = false;

    if (m_equation)
    {
        delete m_equation;
        m_equation = NULL;
    }
    ;

    m_has_comboBox = false;

    if (m_comboBox)
    {
        delete m_comboBox;
        m_comboBox = NULL;
    }
    ;

    m_has_date = false;

    if (m_date)
    {
        delete m_date;
        m_date = NULL;
    }
    ;

    m_has_docPartObj = false;

    if (m_docPartObj)
    {
        delete m_docPartObj;
        m_docPartObj = NULL;
    }
    ;

    m_has_docPartList = false;

    if (m_docPartList)
    {
        delete m_docPartList;
        m_docPartList = NULL;
    }
    ;

    m_has_picture = false;

    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;

    m_has_richText = false;

    if (m_richText)
    {
        delete m_richText;
        m_richText = NULL;
    }
    ;

    m_has_text = false;

    if (m_text)
    {
        delete m_text;
        m_text = NULL;
    }
    ;

    m_has_citation = false;

    if (m_citation)
    {
        delete m_citation;
        m_citation = NULL;
    }
    ;

    m_has_group = false;

    if (m_group)
    {
        delete m_group;
        m_group = NULL;
    }
    ;

    m_has_bibliography = false;

    if (m_bibliography)
    {
        delete m_bibliography;
        m_bibliography = NULL;
    }
    ;

    m_has_dropDownList = true;
    if (!m_dropDownList)
    {
        m_dropDownList = new CT_SdtDropDownList();
    }
    return m_dropDownList;
}

const CT_SdtDropDownList& CT_SdtPr::get_dropDownList() const
{
    if (m_dropDownList)
    {
        return *m_dropDownList;
    }
    return CT_SdtDropDownList::default_instance();
}

bool CT_SdtPr::has_picture() const
{
    return m_has_picture;
}

CT_Empty* CT_SdtPr::mutable_picture()
{

    m_has_equation = false;

    if (m_equation)
    {
        delete m_equation;
        m_equation = NULL;
    }
    ;

    m_has_comboBox = false;

    if (m_comboBox)
    {
        delete m_comboBox;
        m_comboBox = NULL;
    }
    ;

    m_has_date = false;

    if (m_date)
    {
        delete m_date;
        m_date = NULL;
    }
    ;

    m_has_docPartObj = false;

    if (m_docPartObj)
    {
        delete m_docPartObj;
        m_docPartObj = NULL;
    }
    ;

    m_has_docPartList = false;

    if (m_docPartList)
    {
        delete m_docPartList;
        m_docPartList = NULL;
    }
    ;

    m_has_dropDownList = false;

    if (m_dropDownList)
    {
        delete m_dropDownList;
        m_dropDownList = NULL;
    }
    ;

    m_has_richText = false;

    if (m_richText)
    {
        delete m_richText;
        m_richText = NULL;
    }
    ;

    m_has_text = false;

    if (m_text)
    {
        delete m_text;
        m_text = NULL;
    }
    ;

    m_has_citation = false;

    if (m_citation)
    {
        delete m_citation;
        m_citation = NULL;
    }
    ;

    m_has_group = false;

    if (m_group)
    {
        delete m_group;
        m_group = NULL;
    }
    ;

    m_has_bibliography = false;

    if (m_bibliography)
    {
        delete m_bibliography;
        m_bibliography = NULL;
    }
    ;

    m_has_picture = true;
    if (!m_picture)
    {
        m_picture = new CT_Empty();
    }
    return m_picture;
}

const CT_Empty& CT_SdtPr::get_picture() const
{
    if (m_picture)
    {
        return *m_picture;
    }
    return CT_Empty::default_instance();
}

bool CT_SdtPr::has_richText() const
{
    return m_has_richText;
}

CT_Empty* CT_SdtPr::mutable_richText()
{

    m_has_equation = false;

    if (m_equation)
    {
        delete m_equation;
        m_equation = NULL;
    }
    ;

    m_has_comboBox = false;

    if (m_comboBox)
    {
        delete m_comboBox;
        m_comboBox = NULL;
    }
    ;

    m_has_date = false;

    if (m_date)
    {
        delete m_date;
        m_date = NULL;
    }
    ;

    m_has_docPartObj = false;

    if (m_docPartObj)
    {
        delete m_docPartObj;
        m_docPartObj = NULL;
    }
    ;

    m_has_docPartList = false;

    if (m_docPartList)
    {
        delete m_docPartList;
        m_docPartList = NULL;
    }
    ;

    m_has_dropDownList = false;

    if (m_dropDownList)
    {
        delete m_dropDownList;
        m_dropDownList = NULL;
    }
    ;

    m_has_picture = false;

    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;

    m_has_text = false;

    if (m_text)
    {
        delete m_text;
        m_text = NULL;
    }
    ;

    m_has_citation = false;

    if (m_citation)
    {
        delete m_citation;
        m_citation = NULL;
    }
    ;

    m_has_group = false;

    if (m_group)
    {
        delete m_group;
        m_group = NULL;
    }
    ;

    m_has_bibliography = false;

    if (m_bibliography)
    {
        delete m_bibliography;
        m_bibliography = NULL;
    }
    ;

    m_has_richText = true;
    if (!m_richText)
    {
        m_richText = new CT_Empty();
    }
    return m_richText;
}

const CT_Empty& CT_SdtPr::get_richText() const
{
    if (m_richText)
    {
        return *m_richText;
    }
    return CT_Empty::default_instance();
}

bool CT_SdtPr::has_text() const
{
    return m_has_text;
}

CT_SdtText* CT_SdtPr::mutable_text()
{

    m_has_equation = false;

    if (m_equation)
    {
        delete m_equation;
        m_equation = NULL;
    }
    ;

    m_has_comboBox = false;

    if (m_comboBox)
    {
        delete m_comboBox;
        m_comboBox = NULL;
    }
    ;

    m_has_date = false;

    if (m_date)
    {
        delete m_date;
        m_date = NULL;
    }
    ;

    m_has_docPartObj = false;

    if (m_docPartObj)
    {
        delete m_docPartObj;
        m_docPartObj = NULL;
    }
    ;

    m_has_docPartList = false;

    if (m_docPartList)
    {
        delete m_docPartList;
        m_docPartList = NULL;
    }
    ;

    m_has_dropDownList = false;

    if (m_dropDownList)
    {
        delete m_dropDownList;
        m_dropDownList = NULL;
    }
    ;

    m_has_picture = false;

    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;

    m_has_richText = false;

    if (m_richText)
    {
        delete m_richText;
        m_richText = NULL;
    }
    ;

    m_has_citation = false;

    if (m_citation)
    {
        delete m_citation;
        m_citation = NULL;
    }
    ;

    m_has_group = false;

    if (m_group)
    {
        delete m_group;
        m_group = NULL;
    }
    ;

    m_has_bibliography = false;

    if (m_bibliography)
    {
        delete m_bibliography;
        m_bibliography = NULL;
    }
    ;

    m_has_text = true;
    if (!m_text)
    {
        m_text = new CT_SdtText();
    }
    return m_text;
}

const CT_SdtText& CT_SdtPr::get_text() const
{
    if (m_text)
    {
        return *m_text;
    }
    return CT_SdtText::default_instance();
}

bool CT_SdtPr::has_citation() const
{
    return m_has_citation;
}

CT_Empty* CT_SdtPr::mutable_citation()
{

    m_has_equation = false;

    if (m_equation)
    {
        delete m_equation;
        m_equation = NULL;
    }
    ;

    m_has_comboBox = false;

    if (m_comboBox)
    {
        delete m_comboBox;
        m_comboBox = NULL;
    }
    ;

    m_has_date = false;

    if (m_date)
    {
        delete m_date;
        m_date = NULL;
    }
    ;

    m_has_docPartObj = false;

    if (m_docPartObj)
    {
        delete m_docPartObj;
        m_docPartObj = NULL;
    }
    ;

    m_has_docPartList = false;

    if (m_docPartList)
    {
        delete m_docPartList;
        m_docPartList = NULL;
    }
    ;

    m_has_dropDownList = false;

    if (m_dropDownList)
    {
        delete m_dropDownList;
        m_dropDownList = NULL;
    }
    ;

    m_has_picture = false;

    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;

    m_has_richText = false;

    if (m_richText)
    {
        delete m_richText;
        m_richText = NULL;
    }
    ;

    m_has_text = false;

    if (m_text)
    {
        delete m_text;
        m_text = NULL;
    }
    ;

    m_has_group = false;

    if (m_group)
    {
        delete m_group;
        m_group = NULL;
    }
    ;

    m_has_bibliography = false;

    if (m_bibliography)
    {
        delete m_bibliography;
        m_bibliography = NULL;
    }
    ;

    m_has_citation = true;
    if (!m_citation)
    {
        m_citation = new CT_Empty();
    }
    return m_citation;
}

const CT_Empty& CT_SdtPr::get_citation() const
{
    if (m_citation)
    {
        return *m_citation;
    }
    return CT_Empty::default_instance();
}

bool CT_SdtPr::has_group() const
{
    return m_has_group;
}

CT_Empty* CT_SdtPr::mutable_group()
{

    m_has_equation = false;

    if (m_equation)
    {
        delete m_equation;
        m_equation = NULL;
    }
    ;

    m_has_comboBox = false;

    if (m_comboBox)
    {
        delete m_comboBox;
        m_comboBox = NULL;
    }
    ;

    m_has_date = false;

    if (m_date)
    {
        delete m_date;
        m_date = NULL;
    }
    ;

    m_has_docPartObj = false;

    if (m_docPartObj)
    {
        delete m_docPartObj;
        m_docPartObj = NULL;
    }
    ;

    m_has_docPartList = false;

    if (m_docPartList)
    {
        delete m_docPartList;
        m_docPartList = NULL;
    }
    ;

    m_has_dropDownList = false;

    if (m_dropDownList)
    {
        delete m_dropDownList;
        m_dropDownList = NULL;
    }
    ;

    m_has_picture = false;

    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;

    m_has_richText = false;

    if (m_richText)
    {
        delete m_richText;
        m_richText = NULL;
    }
    ;

    m_has_text = false;

    if (m_text)
    {
        delete m_text;
        m_text = NULL;
    }
    ;

    m_has_citation = false;

    if (m_citation)
    {
        delete m_citation;
        m_citation = NULL;
    }
    ;

    m_has_bibliography = false;

    if (m_bibliography)
    {
        delete m_bibliography;
        m_bibliography = NULL;
    }
    ;

    m_has_group = true;
    if (!m_group)
    {
        m_group = new CT_Empty();
    }
    return m_group;
}

const CT_Empty& CT_SdtPr::get_group() const
{
    if (m_group)
    {
        return *m_group;
    }
    return CT_Empty::default_instance();
}

bool CT_SdtPr::has_bibliography() const
{
    return m_has_bibliography;
}

CT_Empty* CT_SdtPr::mutable_bibliography()
{

    m_has_equation = false;

    if (m_equation)
    {
        delete m_equation;
        m_equation = NULL;
    }
    ;

    m_has_comboBox = false;

    if (m_comboBox)
    {
        delete m_comboBox;
        m_comboBox = NULL;
    }
    ;

    m_has_date = false;

    if (m_date)
    {
        delete m_date;
        m_date = NULL;
    }
    ;

    m_has_docPartObj = false;

    if (m_docPartObj)
    {
        delete m_docPartObj;
        m_docPartObj = NULL;
    }
    ;

    m_has_docPartList = false;

    if (m_docPartList)
    {
        delete m_docPartList;
        m_docPartList = NULL;
    }
    ;

    m_has_dropDownList = false;

    if (m_dropDownList)
    {
        delete m_dropDownList;
        m_dropDownList = NULL;
    }
    ;

    m_has_picture = false;

    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;

    m_has_richText = false;

    if (m_richText)
    {
        delete m_richText;
        m_richText = NULL;
    }
    ;

    m_has_text = false;

    if (m_text)
    {
        delete m_text;
        m_text = NULL;
    }
    ;

    m_has_citation = false;

    if (m_citation)
    {
        delete m_citation;
        m_citation = NULL;
    }
    ;

    m_has_group = false;

    if (m_group)
    {
        delete m_group;
        m_group = NULL;
    }
    ;

    m_has_bibliography = true;
    if (!m_bibliography)
    {
        m_bibliography = new CT_Empty();
    }
    return m_bibliography;
}

const CT_Empty& CT_SdtPr::get_bibliography() const
{
    if (m_bibliography)
    {
        return *m_bibliography;
    }
    return CT_Empty::default_instance();
}

void CT_SdtPr::clear()
{
    m_has_rPr = false;

    if (m_rPr)
    {
        delete m_rPr;
        m_rPr = NULL;
    }


    m_has_alias = false;

    if (m_alias)
    {
        delete m_alias;
        m_alias = NULL;
    }


    m_has_tag = false;

    if (m_tag)
    {
        delete m_tag;
        m_tag = NULL;
    }


    m_has_id = false;

    if (m_id)
    {
        delete m_id;
        m_id = NULL;
    }


    m_has_lock = false;

    if (m_lock)
    {
        delete m_lock;
        m_lock = NULL;
    }


    m_has_placeholder = false;

    if (m_placeholder)
    {
        delete m_placeholder;
        m_placeholder = NULL;
    }


    m_has_temporary = false;

    if (m_temporary)
    {
        delete m_temporary;
        m_temporary = NULL;
    }


    m_has_showingPlcHdr = false;

    if (m_showingPlcHdr)
    {
        delete m_showingPlcHdr;
        m_showingPlcHdr = NULL;
    }


    m_has_dataBinding = false;

    if (m_dataBinding)
    {
        delete m_dataBinding;
        m_dataBinding = NULL;
    }


    m_has_label = false;

    if (m_label)
    {
        delete m_label;
        m_label = NULL;
    }


    m_has_tabIndex = false;

    if (m_tabIndex)
    {
        delete m_tabIndex;
        m_tabIndex = NULL;
    }


    m_has_equation = false;

    if (m_equation)
    {
        delete m_equation;
        m_equation = NULL;
    }


    m_has_comboBox = false;

    if (m_comboBox)
    {
        delete m_comboBox;
        m_comboBox = NULL;
    }


    m_has_date = false;

    if (m_date)
    {
        delete m_date;
        m_date = NULL;
    }


    m_has_docPartObj = false;

    if (m_docPartObj)
    {
        delete m_docPartObj;
        m_docPartObj = NULL;
    }


    m_has_docPartList = false;

    if (m_docPartList)
    {
        delete m_docPartList;
        m_docPartList = NULL;
    }


    m_has_dropDownList = false;

    if (m_dropDownList)
    {
        delete m_dropDownList;
        m_dropDownList = NULL;
    }


    m_has_picture = false;

    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }


    m_has_richText = false;

    if (m_richText)
    {
        delete m_richText;
        m_richText = NULL;
    }


    m_has_text = false;

    if (m_text)
    {
        delete m_text;
        m_text = NULL;
    }


    m_has_citation = false;

    if (m_citation)
    {
        delete m_citation;
        m_citation = NULL;
    }


    m_has_group = false;

    if (m_group)
    {
        delete m_group;
        m_group = NULL;
    }


    m_has_bibliography = false;

    if (m_bibliography)
    {
        delete m_bibliography;
        m_bibliography = NULL;
    }

}

void CT_SdtPr::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";


    if (m_has_rPr)
    {
        m_rPr->toXmlElem("w:rPr", "", _outStream);
    }


    if (m_has_alias)
    {
        m_alias->toXmlElem("w:alias", "", _outStream);
    }


    if (m_has_tag)
    {
        m_tag->toXmlElem("w:tag", "", _outStream);
    }


    if (m_has_id)
    {
        m_id->toXmlElem("w:id", "", _outStream);
    }


    if (m_has_lock)
    {
        m_lock->toXmlElem("w:lock", "", _outStream);
    }


    if (m_has_placeholder)
    {
        m_placeholder->toXmlElem("w:placeholder", "", _outStream);
    }


    if (m_has_temporary)
    {
        m_temporary->toXmlElem("w:temporary", "", _outStream);
    }


    if (m_has_showingPlcHdr)
    {
        m_showingPlcHdr->toXmlElem("w:showingPlcHdr", "", _outStream);
    }


    if (m_has_dataBinding)
    {
        m_dataBinding->toXmlElem("w:dataBinding", "", _outStream);
    }


    if (m_has_label)
    {
        m_label->toXmlElem("w:label", "", _outStream);
    }


    if (m_has_tabIndex)
    {
        m_tabIndex->toXmlElem("w:tabIndex", "", _outStream);
    }

    {
        bool elemHasValueList[12] = {m_has_equation, m_has_comboBox, m_has_date, m_has_docPartObj, m_has_docPartList, m_has_dropDownList, m_has_picture, m_has_richText, m_has_text, m_has_citation, m_has_group, m_has_bibliography};
        int cnt = count(elemHasValueList, elemHasValueList + 12, true);
        assert(cnt == 0 || cnt == 1);
    }


    if (m_has_equation)
    {
        m_equation->toXmlElem("w:equation", "", _outStream);
    }


    if (m_has_comboBox)
    {
        m_comboBox->toXmlElem("w:comboBox", "", _outStream);
    }


    if (m_has_date)
    {
        m_date->toXmlElem("w:date", "", _outStream);
    }


    if (m_has_docPartObj)
    {
        m_docPartObj->toXmlElem("w:docPartObj", "", _outStream);
    }


    if (m_has_docPartList)
    {
        m_docPartList->toXmlElem("w:docPartList", "", _outStream);
    }


    if (m_has_dropDownList)
    {
        m_dropDownList->toXmlElem("w:dropDownList", "", _outStream);
    }


    if (m_has_picture)
    {
        m_picture->toXmlElem("w:picture", "", _outStream);
    }


    if (m_has_richText)
    {
        m_richText->toXmlElem("w:richText", "", _outStream);
    }


    if (m_has_text)
    {
        m_text->toXmlElem("w:text", "", _outStream);
    }


    if (m_has_citation)
    {
        m_citation->toXmlElem("w:citation", "", _outStream);
    }


    if (m_has_group)
    {
        m_group->toXmlElem("w:group", "", _outStream);
    }


    if (m_has_bibliography)
    {
        m_bibliography->toXmlElem("w:bibliography", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_SdtPr& CT_SdtPr::default_instance()
{
    if (!CT_SdtPr::default_instance_)
    {
        CT_SdtPr::default_instance_ = new CT_SdtPr();
    }
    return *CT_SdtPr::default_instance_;
}

CT_SdtPr* CT_SdtPr::default_instance_ = NULL;

// CT_SdtEndPr
CT_SdtEndPr::CT_SdtEndPr()

{
}
CT_SdtEndPr::~CT_SdtEndPr()
{
    clear();
}
CT_RPr* CT_SdtEndPr::add_rPr()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_RPr* pNewChild = pChildGroup->mutable_rPr();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

void CT_SdtEndPr::clear()
{
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
}

void CT_SdtEndPr::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";

    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_rPr())
            {
                (*iter)->get_rPr().toXmlElem("w:rPr", "", _outStream);
            }


        }
    }

    _outStream << "</" << _elemName << ">";
}

const CT_SdtEndPr& CT_SdtEndPr::default_instance()
{
    if (!CT_SdtEndPr::default_instance_)
    {
        CT_SdtEndPr::default_instance_ = new CT_SdtEndPr();
    }
    return *CT_SdtEndPr::default_instance_;
}


// CT_SdtEndPr::ChildGroup_1
CT_SdtEndPr::ChildGroup_1::ChildGroup_1()
    :m_has_rPr(false),
     m_rPr(NULL)
{
}
bool CT_SdtEndPr::ChildGroup_1::has_rPr() const
{
    return m_has_rPr;
}

CT_RPr* CT_SdtEndPr::ChildGroup_1::mutable_rPr()
{

    m_has_rPr = true;
    if (!m_rPr)
    {
        m_rPr = new CT_RPr();
    }
    return m_rPr;
}

const CT_RPr& CT_SdtEndPr::ChildGroup_1::get_rPr() const
{
    if (m_rPr)
    {
        return *m_rPr;
    }
    return CT_RPr::default_instance();
}

CT_SdtEndPr* CT_SdtEndPr::default_instance_ = NULL;

// CT_DirContentRun
CT_DirContentRun::CT_DirContentRun()
    :m_has_val_attr(false),
     m_val_attr(NULL)
{
}
CT_DirContentRun::~CT_DirContentRun()
{
    clear();
}
void CT_DirContentRun::clear()
{
    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }

}

void CT_DirContentRun::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_DirContentRun& CT_DirContentRun::default_instance()
{
    if (!CT_DirContentRun::default_instance_)
    {
        CT_DirContentRun::default_instance_ = new CT_DirContentRun();
    }
    return *CT_DirContentRun::default_instance_;
}

bool CT_DirContentRun::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_DirContentRun::set_val_attr(const ST_Direction& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ST_Direction(_val_attr);
}

const ST_Direction& CT_DirContentRun::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ST_Direction::default_instance();
}

CT_DirContentRun* CT_DirContentRun::default_instance_ = NULL;

// CT_BdoContentRun
CT_BdoContentRun::CT_BdoContentRun()
    :m_has_val_attr(false),
     m_val_attr(NULL)
{
}
CT_BdoContentRun::~CT_BdoContentRun()
{
    clear();
}
void CT_BdoContentRun::clear()
{
    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }

}

void CT_BdoContentRun::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_BdoContentRun& CT_BdoContentRun::default_instance()
{
    if (!CT_BdoContentRun::default_instance_)
    {
        CT_BdoContentRun::default_instance_ = new CT_BdoContentRun();
    }
    return *CT_BdoContentRun::default_instance_;
}

bool CT_BdoContentRun::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_BdoContentRun::set_val_attr(const ST_Direction& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ST_Direction(_val_attr);
}

const ST_Direction& CT_BdoContentRun::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ST_Direction::default_instance();
}

CT_BdoContentRun* CT_BdoContentRun::default_instance_ = NULL;

// CT_SdtContentRun
CT_SdtContentRun::CT_SdtContentRun()

{
}
CT_SdtContentRun::~CT_SdtContentRun()
{
    clear();
}
void CT_SdtContentRun::clear()
{    }

void CT_SdtContentRun::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_SdtContentRun& CT_SdtContentRun::default_instance()
{
    if (!CT_SdtContentRun::default_instance_)
    {
        CT_SdtContentRun::default_instance_ = new CT_SdtContentRun();
    }
    return *CT_SdtContentRun::default_instance_;
}

CT_SdtContentRun* CT_SdtContentRun::default_instance_ = NULL;

// CT_SdtContentBlock
CT_SdtContentBlock::CT_SdtContentBlock()

{
}
CT_SdtContentBlock::~CT_SdtContentBlock()
{
    clear();
}
void CT_SdtContentBlock::clear()
{    }

void CT_SdtContentBlock::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_SdtContentBlock& CT_SdtContentBlock::default_instance()
{
    if (!CT_SdtContentBlock::default_instance_)
    {
        CT_SdtContentBlock::default_instance_ = new CT_SdtContentBlock();
    }
    return *CT_SdtContentBlock::default_instance_;
}

CT_SdtContentBlock* CT_SdtContentBlock::default_instance_ = NULL;

// CT_SdtContentRow
CT_SdtContentRow::CT_SdtContentRow()

{
}
CT_SdtContentRow::~CT_SdtContentRow()
{
    clear();
}
void CT_SdtContentRow::clear()
{    }

void CT_SdtContentRow::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_SdtContentRow& CT_SdtContentRow::default_instance()
{
    if (!CT_SdtContentRow::default_instance_)
    {
        CT_SdtContentRow::default_instance_ = new CT_SdtContentRow();
    }
    return *CT_SdtContentRow::default_instance_;
}

CT_SdtContentRow* CT_SdtContentRow::default_instance_ = NULL;

// CT_SdtContentCell
CT_SdtContentCell::CT_SdtContentCell()

{
}
CT_SdtContentCell::~CT_SdtContentCell()
{
    clear();
}
void CT_SdtContentCell::clear()
{    }

void CT_SdtContentCell::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_SdtContentCell& CT_SdtContentCell::default_instance()
{
    if (!CT_SdtContentCell::default_instance_)
    {
        CT_SdtContentCell::default_instance_ = new CT_SdtContentCell();
    }
    return *CT_SdtContentCell::default_instance_;
}

CT_SdtContentCell* CT_SdtContentCell::default_instance_ = NULL;

// CT_SdtBlock
CT_SdtBlock::CT_SdtBlock()
    :m_has_sdtPr(false),
     m_sdtPr(NULL),
     m_has_sdtEndPr(false),
     m_sdtEndPr(NULL),
     m_has_sdtContent(false),
     m_sdtContent(NULL)
{
}
CT_SdtBlock::~CT_SdtBlock()
{
    clear();
}
bool CT_SdtBlock::has_sdtPr() const
{
    return m_has_sdtPr;
}

CT_SdtPr* CT_SdtBlock::mutable_sdtPr()
{
    m_has_sdtPr = true;
    if (!m_sdtPr)
    {
        m_sdtPr = new CT_SdtPr();
    }
    return m_sdtPr;
}

const CT_SdtPr& CT_SdtBlock::get_sdtPr() const
{
    if (m_sdtPr)
    {
        return *m_sdtPr;
    }
    return CT_SdtPr::default_instance();
}

bool CT_SdtBlock::has_sdtEndPr() const
{
    return m_has_sdtEndPr;
}

CT_SdtEndPr* CT_SdtBlock::mutable_sdtEndPr()
{
    m_has_sdtEndPr = true;
    if (!m_sdtEndPr)
    {
        m_sdtEndPr = new CT_SdtEndPr();
    }
    return m_sdtEndPr;
}

const CT_SdtEndPr& CT_SdtBlock::get_sdtEndPr() const
{
    if (m_sdtEndPr)
    {
        return *m_sdtEndPr;
    }
    return CT_SdtEndPr::default_instance();
}

bool CT_SdtBlock::has_sdtContent() const
{
    return m_has_sdtContent;
}

CT_SdtContentBlock* CT_SdtBlock::mutable_sdtContent()
{
    m_has_sdtContent = true;
    if (!m_sdtContent)
    {
        m_sdtContent = new CT_SdtContentBlock();
    }
    return m_sdtContent;
}

const CT_SdtContentBlock& CT_SdtBlock::get_sdtContent() const
{
    if (m_sdtContent)
    {
        return *m_sdtContent;
    }
    return CT_SdtContentBlock::default_instance();
}

void CT_SdtBlock::clear()
{
    m_has_sdtPr = false;

    if (m_sdtPr)
    {
        delete m_sdtPr;
        m_sdtPr = NULL;
    }


    m_has_sdtEndPr = false;

    if (m_sdtEndPr)
    {
        delete m_sdtEndPr;
        m_sdtEndPr = NULL;
    }


    m_has_sdtContent = false;

    if (m_sdtContent)
    {
        delete m_sdtContent;
        m_sdtContent = NULL;
    }

}

void CT_SdtBlock::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";


    if (m_has_sdtPr)
    {
        m_sdtPr->toXmlElem("w:sdtPr", "", _outStream);
    }


    if (m_has_sdtEndPr)
    {
        m_sdtEndPr->toXmlElem("w:sdtEndPr", "", _outStream);
    }


    if (m_has_sdtContent)
    {
        m_sdtContent->toXmlElem("w:sdtContent", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_SdtBlock& CT_SdtBlock::default_instance()
{
    if (!CT_SdtBlock::default_instance_)
    {
        CT_SdtBlock::default_instance_ = new CT_SdtBlock();
    }
    return *CT_SdtBlock::default_instance_;
}

CT_SdtBlock* CT_SdtBlock::default_instance_ = NULL;

// CT_SdtRun
CT_SdtRun::CT_SdtRun()
    :m_has_sdtPr(false),
     m_sdtPr(NULL),
     m_has_sdtEndPr(false),
     m_sdtEndPr(NULL),
     m_has_sdtContent(false),
     m_sdtContent(NULL)
{
}
CT_SdtRun::~CT_SdtRun()
{
    clear();
}
bool CT_SdtRun::has_sdtPr() const
{
    return m_has_sdtPr;
}

CT_SdtPr* CT_SdtRun::mutable_sdtPr()
{
    m_has_sdtPr = true;
    if (!m_sdtPr)
    {
        m_sdtPr = new CT_SdtPr();
    }
    return m_sdtPr;
}

const CT_SdtPr& CT_SdtRun::get_sdtPr() const
{
    if (m_sdtPr)
    {
        return *m_sdtPr;
    }
    return CT_SdtPr::default_instance();
}

bool CT_SdtRun::has_sdtEndPr() const
{
    return m_has_sdtEndPr;
}

CT_SdtEndPr* CT_SdtRun::mutable_sdtEndPr()
{
    m_has_sdtEndPr = true;
    if (!m_sdtEndPr)
    {
        m_sdtEndPr = new CT_SdtEndPr();
    }
    return m_sdtEndPr;
}

const CT_SdtEndPr& CT_SdtRun::get_sdtEndPr() const
{
    if (m_sdtEndPr)
    {
        return *m_sdtEndPr;
    }
    return CT_SdtEndPr::default_instance();
}

bool CT_SdtRun::has_sdtContent() const
{
    return m_has_sdtContent;
}

CT_SdtContentRun* CT_SdtRun::mutable_sdtContent()
{
    m_has_sdtContent = true;
    if (!m_sdtContent)
    {
        m_sdtContent = new CT_SdtContentRun();
    }
    return m_sdtContent;
}

const CT_SdtContentRun& CT_SdtRun::get_sdtContent() const
{
    if (m_sdtContent)
    {
        return *m_sdtContent;
    }
    return CT_SdtContentRun::default_instance();
}

void CT_SdtRun::clear()
{
    m_has_sdtPr = false;

    if (m_sdtPr)
    {
        delete m_sdtPr;
        m_sdtPr = NULL;
    }


    m_has_sdtEndPr = false;

    if (m_sdtEndPr)
    {
        delete m_sdtEndPr;
        m_sdtEndPr = NULL;
    }


    m_has_sdtContent = false;

    if (m_sdtContent)
    {
        delete m_sdtContent;
        m_sdtContent = NULL;
    }

}

void CT_SdtRun::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";


    if (m_has_sdtPr)
    {
        m_sdtPr->toXmlElem("w:sdtPr", "", _outStream);
    }


    if (m_has_sdtEndPr)
    {
        m_sdtEndPr->toXmlElem("w:sdtEndPr", "", _outStream);
    }


    if (m_has_sdtContent)
    {
        m_sdtContent->toXmlElem("w:sdtContent", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_SdtRun& CT_SdtRun::default_instance()
{
    if (!CT_SdtRun::default_instance_)
    {
        CT_SdtRun::default_instance_ = new CT_SdtRun();
    }
    return *CT_SdtRun::default_instance_;
}

CT_SdtRun* CT_SdtRun::default_instance_ = NULL;

// CT_SdtCell
CT_SdtCell::CT_SdtCell()
    :m_has_sdtPr(false),
     m_sdtPr(NULL),
     m_has_sdtEndPr(false),
     m_sdtEndPr(NULL),
     m_has_sdtContent(false),
     m_sdtContent(NULL)
{
}
CT_SdtCell::~CT_SdtCell()
{
    clear();
}
bool CT_SdtCell::has_sdtPr() const
{
    return m_has_sdtPr;
}

CT_SdtPr* CT_SdtCell::mutable_sdtPr()
{
    m_has_sdtPr = true;
    if (!m_sdtPr)
    {
        m_sdtPr = new CT_SdtPr();
    }
    return m_sdtPr;
}

const CT_SdtPr& CT_SdtCell::get_sdtPr() const
{
    if (m_sdtPr)
    {
        return *m_sdtPr;
    }
    return CT_SdtPr::default_instance();
}

bool CT_SdtCell::has_sdtEndPr() const
{
    return m_has_sdtEndPr;
}

CT_SdtEndPr* CT_SdtCell::mutable_sdtEndPr()
{
    m_has_sdtEndPr = true;
    if (!m_sdtEndPr)
    {
        m_sdtEndPr = new CT_SdtEndPr();
    }
    return m_sdtEndPr;
}

const CT_SdtEndPr& CT_SdtCell::get_sdtEndPr() const
{
    if (m_sdtEndPr)
    {
        return *m_sdtEndPr;
    }
    return CT_SdtEndPr::default_instance();
}

bool CT_SdtCell::has_sdtContent() const
{
    return m_has_sdtContent;
}

CT_SdtContentCell* CT_SdtCell::mutable_sdtContent()
{
    m_has_sdtContent = true;
    if (!m_sdtContent)
    {
        m_sdtContent = new CT_SdtContentCell();
    }
    return m_sdtContent;
}

const CT_SdtContentCell& CT_SdtCell::get_sdtContent() const
{
    if (m_sdtContent)
    {
        return *m_sdtContent;
    }
    return CT_SdtContentCell::default_instance();
}

void CT_SdtCell::clear()
{
    m_has_sdtPr = false;

    if (m_sdtPr)
    {
        delete m_sdtPr;
        m_sdtPr = NULL;
    }


    m_has_sdtEndPr = false;

    if (m_sdtEndPr)
    {
        delete m_sdtEndPr;
        m_sdtEndPr = NULL;
    }


    m_has_sdtContent = false;

    if (m_sdtContent)
    {
        delete m_sdtContent;
        m_sdtContent = NULL;
    }

}

void CT_SdtCell::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";


    if (m_has_sdtPr)
    {
        m_sdtPr->toXmlElem("w:sdtPr", "", _outStream);
    }


    if (m_has_sdtEndPr)
    {
        m_sdtEndPr->toXmlElem("w:sdtEndPr", "", _outStream);
    }


    if (m_has_sdtContent)
    {
        m_sdtContent->toXmlElem("w:sdtContent", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_SdtCell& CT_SdtCell::default_instance()
{
    if (!CT_SdtCell::default_instance_)
    {
        CT_SdtCell::default_instance_ = new CT_SdtCell();
    }
    return *CT_SdtCell::default_instance_;
}

CT_SdtCell* CT_SdtCell::default_instance_ = NULL;

// CT_SdtRow
CT_SdtRow::CT_SdtRow()
    :m_has_sdtPr(false),
     m_sdtPr(NULL),
     m_has_sdtEndPr(false),
     m_sdtEndPr(NULL),
     m_has_sdtContent(false),
     m_sdtContent(NULL)
{
}
CT_SdtRow::~CT_SdtRow()
{
    clear();
}
bool CT_SdtRow::has_sdtPr() const
{
    return m_has_sdtPr;
}

CT_SdtPr* CT_SdtRow::mutable_sdtPr()
{
    m_has_sdtPr = true;
    if (!m_sdtPr)
    {
        m_sdtPr = new CT_SdtPr();
    }
    return m_sdtPr;
}

const CT_SdtPr& CT_SdtRow::get_sdtPr() const
{
    if (m_sdtPr)
    {
        return *m_sdtPr;
    }
    return CT_SdtPr::default_instance();
}

bool CT_SdtRow::has_sdtEndPr() const
{
    return m_has_sdtEndPr;
}

CT_SdtEndPr* CT_SdtRow::mutable_sdtEndPr()
{
    m_has_sdtEndPr = true;
    if (!m_sdtEndPr)
    {
        m_sdtEndPr = new CT_SdtEndPr();
    }
    return m_sdtEndPr;
}

const CT_SdtEndPr& CT_SdtRow::get_sdtEndPr() const
{
    if (m_sdtEndPr)
    {
        return *m_sdtEndPr;
    }
    return CT_SdtEndPr::default_instance();
}

bool CT_SdtRow::has_sdtContent() const
{
    return m_has_sdtContent;
}

CT_SdtContentRow* CT_SdtRow::mutable_sdtContent()
{
    m_has_sdtContent = true;
    if (!m_sdtContent)
    {
        m_sdtContent = new CT_SdtContentRow();
    }
    return m_sdtContent;
}

const CT_SdtContentRow& CT_SdtRow::get_sdtContent() const
{
    if (m_sdtContent)
    {
        return *m_sdtContent;
    }
    return CT_SdtContentRow::default_instance();
}

void CT_SdtRow::clear()
{
    m_has_sdtPr = false;

    if (m_sdtPr)
    {
        delete m_sdtPr;
        m_sdtPr = NULL;
    }


    m_has_sdtEndPr = false;

    if (m_sdtEndPr)
    {
        delete m_sdtEndPr;
        m_sdtEndPr = NULL;
    }


    m_has_sdtContent = false;

    if (m_sdtContent)
    {
        delete m_sdtContent;
        m_sdtContent = NULL;
    }

}

void CT_SdtRow::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";


    if (m_has_sdtPr)
    {
        m_sdtPr->toXmlElem("w:sdtPr", "", _outStream);
    }


    if (m_has_sdtEndPr)
    {
        m_sdtEndPr->toXmlElem("w:sdtEndPr", "", _outStream);
    }


    if (m_has_sdtContent)
    {
        m_sdtContent->toXmlElem("w:sdtContent", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_SdtRow& CT_SdtRow::default_instance()
{
    if (!CT_SdtRow::default_instance_)
    {
        CT_SdtRow::default_instance_ = new CT_SdtRow();
    }
    return *CT_SdtRow::default_instance_;
}

CT_SdtRow* CT_SdtRow::default_instance_ = NULL;

// CT_Attr
CT_Attr::CT_Attr()
    :m_has_uri_attr(false),
     m_uri_attr(NULL),
     m_has_name_attr(false),
     m_name_attr(NULL),
     m_has_val_attr(false),
     m_val_attr(NULL)
{
}
CT_Attr::~CT_Attr()
{
    clear();
}
void CT_Attr::clear()
{
    m_has_uri_attr = false;

    if (m_uri_attr)
    {
        delete m_uri_attr;
        m_uri_attr = NULL;
    }


    m_has_name_attr = false;

    if (m_name_attr)
    {
        delete m_name_attr;
        m_name_attr = NULL;
    }


    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }

}

void CT_Attr::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_uri_attr)
    {
        m_uri_attr->toXmlAttr("w:uri", _outStream);
    }


    assert(m_has_name_attr);
    if (m_has_name_attr)
    {
        m_name_attr->toXmlAttr("w:name", _outStream);
    }


    assert(m_has_val_attr);
    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_Attr& CT_Attr::default_instance()
{
    if (!CT_Attr::default_instance_)
    {
        CT_Attr::default_instance_ = new CT_Attr();
    }
    return *CT_Attr::default_instance_;
}

bool CT_Attr::has_uri_attr() const
{
    return m_has_uri_attr;
}

void CT_Attr::set_uri_attr(const ns_s::ST_String& _uri_attr)
{
    m_has_uri_attr = true;
    m_uri_attr = new ns_s::ST_String(_uri_attr);
}

const ns_s::ST_String& CT_Attr::get_uri_attr() const
{
    if (m_uri_attr)
    {
        return *m_uri_attr;
    }
    return ns_s::ST_String::default_instance();
}

bool CT_Attr::has_name_attr() const
{
    return m_has_name_attr;
}

void CT_Attr::set_name_attr(const ns_s::ST_String& _name_attr)
{
    m_has_name_attr = true;
    m_name_attr = new ns_s::ST_String(_name_attr);
}

const ns_s::ST_String& CT_Attr::get_name_attr() const
{
    if (m_name_attr)
    {
        return *m_name_attr;
    }
    return ns_s::ST_String::default_instance();
}

bool CT_Attr::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_Attr::set_val_attr(const ns_s::ST_String& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ns_s::ST_String(_val_attr);
}

const ns_s::ST_String& CT_Attr::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ns_s::ST_String::default_instance();
}

CT_Attr* CT_Attr::default_instance_ = NULL;

// CT_CustomXmlRun
CT_CustomXmlRun::CT_CustomXmlRun()
    :m_has_customXmlPr(false),
     m_customXmlPr(NULL),
     m_has_uri_attr(false),
     m_uri_attr(NULL),
     m_has_element_attr(false),
     m_element_attr(NULL)
{
}
CT_CustomXmlRun::~CT_CustomXmlRun()
{
    clear();
}
bool CT_CustomXmlRun::has_customXmlPr() const
{
    return m_has_customXmlPr;
}

CT_CustomXmlPr* CT_CustomXmlRun::mutable_customXmlPr()
{
    m_has_customXmlPr = true;
    if (!m_customXmlPr)
    {
        m_customXmlPr = new CT_CustomXmlPr();
    }
    return m_customXmlPr;
}

const CT_CustomXmlPr& CT_CustomXmlRun::get_customXmlPr() const
{
    if (m_customXmlPr)
    {
        return *m_customXmlPr;
    }
    return CT_CustomXmlPr::default_instance();
}

CT_CustomXmlRun* CT_CustomXmlRun::add_customXml()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_CustomXmlRun* pNewChild = pChildGroup->mutable_customXml();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_SmartTagRun* CT_CustomXmlRun::add_smartTag()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_SmartTagRun* pNewChild = pChildGroup->mutable_smartTag();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_SdtRun* CT_CustomXmlRun::add_sdt()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_SdtRun* pNewChild = pChildGroup->mutable_sdt();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_DirContentRun* CT_CustomXmlRun::add_dir()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_DirContentRun* pNewChild = pChildGroup->mutable_dir();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_BdoContentRun* CT_CustomXmlRun::add_bdo()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_BdoContentRun* pNewChild = pChildGroup->mutable_bdo();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_R* CT_CustomXmlRun::add_r()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_R* pNewChild = pChildGroup->mutable_r();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_ProofErr* CT_CustomXmlRun::add_proofErr()
{
    ChildGroup_2 *pChildGroup = new ChildGroup_2();
    CT_ProofErr* pNewChild = pChildGroup->mutable_proofErr();
    m_childGroupList_2.push_back(pChildGroup);
    return pNewChild;
}

CT_PermStart* CT_CustomXmlRun::add_permStart()
{
    ChildGroup_2 *pChildGroup = new ChildGroup_2();
    CT_PermStart* pNewChild = pChildGroup->mutable_permStart();
    m_childGroupList_2.push_back(pChildGroup);
    return pNewChild;
}

CT_Perm* CT_CustomXmlRun::add_permEnd()
{
    ChildGroup_2 *pChildGroup = new ChildGroup_2();
    CT_Perm* pNewChild = pChildGroup->mutable_permEnd();
    m_childGroupList_2.push_back(pChildGroup);
    return pNewChild;
}

CT_Bookmark* CT_CustomXmlRun::add_bookmarkStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_Bookmark* pNewChild = pChildGroup->mutable_bookmarkStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MarkupRange* CT_CustomXmlRun::add_bookmarkEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MarkupRange* pNewChild = pChildGroup->mutable_bookmarkEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MoveBookmark* CT_CustomXmlRun::add_moveFromRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MoveBookmark* pNewChild = pChildGroup->mutable_moveFromRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MarkupRange* CT_CustomXmlRun::add_moveFromRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MarkupRange* pNewChild = pChildGroup->mutable_moveFromRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MoveBookmark* CT_CustomXmlRun::add_moveToRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MoveBookmark* pNewChild = pChildGroup->mutable_moveToRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MarkupRange* CT_CustomXmlRun::add_moveToRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MarkupRange* pNewChild = pChildGroup->mutable_moveToRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MarkupRange* CT_CustomXmlRun::add_commentRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MarkupRange* pNewChild = pChildGroup->mutable_commentRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MarkupRange* CT_CustomXmlRun::add_commentRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MarkupRange* pNewChild = pChildGroup->mutable_commentRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_TrackChange* CT_CustomXmlRun::add_customXmlInsRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_TrackChange* pNewChild = pChildGroup->mutable_customXmlInsRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_Markup* CT_CustomXmlRun::add_customXmlInsRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_Markup* pNewChild = pChildGroup->mutable_customXmlInsRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_TrackChange* CT_CustomXmlRun::add_customXmlDelRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_TrackChange* pNewChild = pChildGroup->mutable_customXmlDelRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_Markup* CT_CustomXmlRun::add_customXmlDelRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_Markup* pNewChild = pChildGroup->mutable_customXmlDelRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_TrackChange* CT_CustomXmlRun::add_customXmlMoveFromRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_TrackChange* pNewChild = pChildGroup->mutable_customXmlMoveFromRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_Markup* CT_CustomXmlRun::add_customXmlMoveFromRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_Markup* pNewChild = pChildGroup->mutable_customXmlMoveFromRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_TrackChange* CT_CustomXmlRun::add_customXmlMoveToRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_TrackChange* pNewChild = pChildGroup->mutable_customXmlMoveToRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_Markup* CT_CustomXmlRun::add_customXmlMoveToRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_Markup* pNewChild = pChildGroup->mutable_customXmlMoveToRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_RunTrackChange* CT_CustomXmlRun::add_ins()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_RunTrackChange* pNewChild = pChildGroup->mutable_ins();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_RunTrackChange* CT_CustomXmlRun::add_del()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_RunTrackChange* pNewChild = pChildGroup->mutable_del();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_RunTrackChange* CT_CustomXmlRun::add_moveFrom()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_RunTrackChange* pNewChild = pChildGroup->mutable_moveFrom();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_RunTrackChange* CT_CustomXmlRun::add_moveTo()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_RunTrackChange* pNewChild = pChildGroup->mutable_moveTo();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

ns_m::CT_OMathPara* CT_CustomXmlRun::add_m_oMathPara()
{
    ChildGroup_4 *pChildGroup = new ChildGroup_4();
    ns_m::CT_OMathPara* pNewChild = pChildGroup->mutable_m_oMathPara();
    m_childGroupList_4.push_back(pChildGroup);
    return pNewChild;
}

ns_m::CT_OMath* CT_CustomXmlRun::add_m_oMath()
{
    ChildGroup_4 *pChildGroup = new ChildGroup_4();
    ns_m::CT_OMath* pNewChild = pChildGroup->mutable_m_oMath();
    m_childGroupList_4.push_back(pChildGroup);
    return pNewChild;
}

CT_SimpleField* CT_CustomXmlRun::add_fldSimple()
{
    ChildGroup_4 *pChildGroup = new ChildGroup_4();
    CT_SimpleField* pNewChild = pChildGroup->mutable_fldSimple();
    m_childGroupList_4.push_back(pChildGroup);
    return pNewChild;
}

CT_Hyperlink* CT_CustomXmlRun::add_hyperlink()
{
    ChildGroup_4 *pChildGroup = new ChildGroup_4();
    CT_Hyperlink* pNewChild = pChildGroup->mutable_hyperlink();
    m_childGroupList_4.push_back(pChildGroup);
    return pNewChild;
}

CT_Rel* CT_CustomXmlRun::add_subDoc()
{
    ChildGroup_4 *pChildGroup = new ChildGroup_4();
    CT_Rel* pNewChild = pChildGroup->mutable_subDoc();
    m_childGroupList_4.push_back(pChildGroup);
    return pNewChild;
}

void CT_CustomXmlRun::clear()
{
    m_has_uri_attr = false;

    if (m_uri_attr)
    {
        delete m_uri_attr;
        m_uri_attr = NULL;
    }


    m_has_element_attr = false;

    if (m_element_attr)
    {
        delete m_element_attr;
        m_element_attr = NULL;
    }


    m_has_customXmlPr = false;

    if (m_customXmlPr)
    {
        delete m_customXmlPr;
        m_customXmlPr = NULL;
    }


    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }

    {
        vector<ChildGroup_2*>::iterator iter;
        for (iter = m_childGroupList_2.begin(); iter != m_childGroupList_2.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_2.clear();
    }

    {
        vector<ChildGroup_3*>::iterator iter;
        for (iter = m_childGroupList_3.begin(); iter != m_childGroupList_3.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_3.clear();
    }

    {
        vector<ChildGroup_4*>::iterator iter;
        for (iter = m_childGroupList_4.begin(); iter != m_childGroupList_4.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_4.clear();
    }
}

void CT_CustomXmlRun::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_uri_attr)
    {
        m_uri_attr->toXmlAttr("w:uri", _outStream);
    }


    assert(m_has_element_attr);
    if (m_has_element_attr)
    {
        m_element_attr->toXmlAttr("w:element", _outStream);
    }

    _outStream << ">";


    if (m_has_customXmlPr)
    {
        m_customXmlPr->toXmlElem("w:customXmlPr", "", _outStream);
    }

    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_customXml())
            {
                (*iter)->get_customXml().toXmlElem("w:customXml", "", _outStream);
            }


            else if ((*iter)->has_smartTag())
            {
                (*iter)->get_smartTag().toXmlElem("w:smartTag", "", _outStream);
            }


            else if ((*iter)->has_sdt())
            {
                (*iter)->get_sdt().toXmlElem("w:sdt", "", _outStream);
            }


            else if ((*iter)->has_dir())
            {
                (*iter)->get_dir().toXmlElem("w:dir", "", _outStream);
            }


            else if ((*iter)->has_bdo())
            {
                (*iter)->get_bdo().toXmlElem("w:bdo", "", _outStream);
            }


            else if ((*iter)->has_r())
            {
                (*iter)->get_r().toXmlElem("w:r", "", _outStream);
            }


        }
    }

    {
        vector<ChildGroup_2*>::const_iterator iter;
        for (iter = m_childGroupList_2.begin(); iter != m_childGroupList_2.end(); ++iter)
        {
            if ((*iter)->has_proofErr())
            {
                (*iter)->get_proofErr().toXmlElem("w:proofErr", "", _outStream);
            }


            else if ((*iter)->has_permStart())
            {
                (*iter)->get_permStart().toXmlElem("w:permStart", "", _outStream);
            }


            else if ((*iter)->has_permEnd())
            {
                (*iter)->get_permEnd().toXmlElem("w:permEnd", "", _outStream);
            }


        }
    }

    {
        vector<ChildGroup_3*>::const_iterator iter;
        for (iter = m_childGroupList_3.begin(); iter != m_childGroupList_3.end(); ++iter)
        {
            if ((*iter)->has_bookmarkStart())
            {
                (*iter)->get_bookmarkStart().toXmlElem("w:bookmarkStart", "", _outStream);
            }


            else if ((*iter)->has_bookmarkEnd())
            {
                (*iter)->get_bookmarkEnd().toXmlElem("w:bookmarkEnd", "", _outStream);
            }


            else if ((*iter)->has_moveFromRangeStart())
            {
                (*iter)->get_moveFromRangeStart().toXmlElem("w:moveFromRangeStart", "", _outStream);
            }


            else if ((*iter)->has_moveFromRangeEnd())
            {
                (*iter)->get_moveFromRangeEnd().toXmlElem("w:moveFromRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_moveToRangeStart())
            {
                (*iter)->get_moveToRangeStart().toXmlElem("w:moveToRangeStart", "", _outStream);
            }


            else if ((*iter)->has_moveToRangeEnd())
            {
                (*iter)->get_moveToRangeEnd().toXmlElem("w:moveToRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_commentRangeStart())
            {
                (*iter)->get_commentRangeStart().toXmlElem("w:commentRangeStart", "", _outStream);
            }


            else if ((*iter)->has_commentRangeEnd())
            {
                (*iter)->get_commentRangeEnd().toXmlElem("w:commentRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_customXmlInsRangeStart())
            {
                (*iter)->get_customXmlInsRangeStart().toXmlElem("w:customXmlInsRangeStart", "", _outStream);
            }


            else if ((*iter)->has_customXmlInsRangeEnd())
            {
                (*iter)->get_customXmlInsRangeEnd().toXmlElem("w:customXmlInsRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_customXmlDelRangeStart())
            {
                (*iter)->get_customXmlDelRangeStart().toXmlElem("w:customXmlDelRangeStart", "", _outStream);
            }


            else if ((*iter)->has_customXmlDelRangeEnd())
            {
                (*iter)->get_customXmlDelRangeEnd().toXmlElem("w:customXmlDelRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_customXmlMoveFromRangeStart())
            {
                (*iter)->get_customXmlMoveFromRangeStart().toXmlElem("w:customXmlMoveFromRangeStart", "", _outStream);
            }


            else if ((*iter)->has_customXmlMoveFromRangeEnd())
            {
                (*iter)->get_customXmlMoveFromRangeEnd().toXmlElem("w:customXmlMoveFromRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_customXmlMoveToRangeStart())
            {
                (*iter)->get_customXmlMoveToRangeStart().toXmlElem("w:customXmlMoveToRangeStart", "", _outStream);
            }


            else if ((*iter)->has_customXmlMoveToRangeEnd())
            {
                (*iter)->get_customXmlMoveToRangeEnd().toXmlElem("w:customXmlMoveToRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_ins())
            {
                (*iter)->get_ins().toXmlElem("w:ins", "", _outStream);
            }


            else if ((*iter)->has_del())
            {
                (*iter)->get_del().toXmlElem("w:del", "", _outStream);
            }


            else if ((*iter)->has_moveFrom())
            {
                (*iter)->get_moveFrom().toXmlElem("w:moveFrom", "", _outStream);
            }


            else if ((*iter)->has_moveTo())
            {
                (*iter)->get_moveTo().toXmlElem("w:moveTo", "", _outStream);
            }


        }
    }

    {
        vector<ChildGroup_4*>::const_iterator iter;
        for (iter = m_childGroupList_4.begin(); iter != m_childGroupList_4.end(); ++iter)
        {
            if ((*iter)->has_m_oMathPara())
            {
                (*iter)->get_m_oMathPara().toXmlElem("m:oMathPara", "", _outStream);
            }


            else if ((*iter)->has_m_oMath())
            {
                (*iter)->get_m_oMath().toXmlElem("m:oMath", "", _outStream);
            }


            else if ((*iter)->has_fldSimple())
            {
                (*iter)->get_fldSimple().toXmlElem("w:fldSimple", "", _outStream);
            }


            else if ((*iter)->has_hyperlink())
            {
                (*iter)->get_hyperlink().toXmlElem("w:hyperlink", "", _outStream);
            }


            else if ((*iter)->has_subDoc())
            {
                (*iter)->get_subDoc().toXmlElem("w:subDoc", "", _outStream);
            }


        }
    }

    _outStream << "</" << _elemName << ">";
}

const CT_CustomXmlRun& CT_CustomXmlRun::default_instance()
{
    if (!CT_CustomXmlRun::default_instance_)
    {
        CT_CustomXmlRun::default_instance_ = new CT_CustomXmlRun();
    }
    return *CT_CustomXmlRun::default_instance_;
}

bool CT_CustomXmlRun::has_uri_attr() const
{
    return m_has_uri_attr;
}

void CT_CustomXmlRun::set_uri_attr(const ns_s::ST_String& _uri_attr)
{
    m_has_uri_attr = true;
    m_uri_attr = new ns_s::ST_String(_uri_attr);
}

const ns_s::ST_String& CT_CustomXmlRun::get_uri_attr() const
{
    if (m_uri_attr)
    {
        return *m_uri_attr;
    }
    return ns_s::ST_String::default_instance();
}

bool CT_CustomXmlRun::has_element_attr() const
{
    return m_has_element_attr;
}

void CT_CustomXmlRun::set_element_attr(const ns_s::ST_XmlName& _element_attr)
{
    m_has_element_attr = true;
    m_element_attr = new ns_s::ST_XmlName(_element_attr);
}

const ns_s::ST_XmlName& CT_CustomXmlRun::get_element_attr() const
{
    if (m_element_attr)
    {
        return *m_element_attr;
    }
    return ns_s::ST_XmlName::default_instance();
}


// CT_CustomXmlRun::ChildGroup_1
CT_CustomXmlRun::ChildGroup_1::ChildGroup_1()
    :m_has_customXml(false),
     m_customXml(NULL),
     m_has_smartTag(false),
     m_smartTag(NULL),
     m_has_sdt(false),
     m_sdt(NULL),
     m_has_dir(false),
     m_dir(NULL),
     m_has_bdo(false),
     m_bdo(NULL),
     m_has_r(false),
     m_r(NULL)
{
}
bool CT_CustomXmlRun::ChildGroup_1::has_customXml() const
{
    return m_has_customXml;
}

CT_CustomXmlRun* CT_CustomXmlRun::ChildGroup_1::mutable_customXml()
{

    m_has_smartTag = false;

    if (m_smartTag)
    {
        delete m_smartTag;
        m_smartTag = NULL;
    }
    ;

    m_has_sdt = false;

    if (m_sdt)
    {
        delete m_sdt;
        m_sdt = NULL;
    }
    ;

    m_has_dir = false;

    if (m_dir)
    {
        delete m_dir;
        m_dir = NULL;
    }
    ;

    m_has_bdo = false;

    if (m_bdo)
    {
        delete m_bdo;
        m_bdo = NULL;
    }
    ;

    m_has_r = false;

    if (m_r)
    {
        delete m_r;
        m_r = NULL;
    }
    ;

    m_has_customXml = true;
    if (!m_customXml)
    {
        m_customXml = new CT_CustomXmlRun();
    }
    return m_customXml;
}

const CT_CustomXmlRun& CT_CustomXmlRun::ChildGroup_1::get_customXml() const
{
    if (m_customXml)
    {
        return *m_customXml;
    }
    return CT_CustomXmlRun::default_instance();
}

bool CT_CustomXmlRun::ChildGroup_1::has_smartTag() const
{
    return m_has_smartTag;
}

CT_SmartTagRun* CT_CustomXmlRun::ChildGroup_1::mutable_smartTag()
{

    m_has_customXml = false;

    if (m_customXml)
    {
        delete m_customXml;
        m_customXml = NULL;
    }
    ;

    m_has_sdt = false;

    if (m_sdt)
    {
        delete m_sdt;
        m_sdt = NULL;
    }
    ;

    m_has_dir = false;

    if (m_dir)
    {
        delete m_dir;
        m_dir = NULL;
    }
    ;

    m_has_bdo = false;

    if (m_bdo)
    {
        delete m_bdo;
        m_bdo = NULL;
    }
    ;

    m_has_r = false;

    if (m_r)
    {
        delete m_r;
        m_r = NULL;
    }
    ;

    m_has_smartTag = true;
    if (!m_smartTag)
    {
        m_smartTag = new CT_SmartTagRun();
    }
    return m_smartTag;
}

const CT_SmartTagRun& CT_CustomXmlRun::ChildGroup_1::get_smartTag() const
{
    if (m_smartTag)
    {
        return *m_smartTag;
    }
    return CT_SmartTagRun::default_instance();
}

bool CT_CustomXmlRun::ChildGroup_1::has_sdt() const
{
    return m_has_sdt;
}

CT_SdtRun* CT_CustomXmlRun::ChildGroup_1::mutable_sdt()
{

    m_has_customXml = false;

    if (m_customXml)
    {
        delete m_customXml;
        m_customXml = NULL;
    }
    ;

    m_has_smartTag = false;

    if (m_smartTag)
    {
        delete m_smartTag;
        m_smartTag = NULL;
    }
    ;

    m_has_dir = false;

    if (m_dir)
    {
        delete m_dir;
        m_dir = NULL;
    }
    ;

    m_has_bdo = false;

    if (m_bdo)
    {
        delete m_bdo;
        m_bdo = NULL;
    }
    ;

    m_has_r = false;

    if (m_r)
    {
        delete m_r;
        m_r = NULL;
    }
    ;

    m_has_sdt = true;
    if (!m_sdt)
    {
        m_sdt = new CT_SdtRun();
    }
    return m_sdt;
}

const CT_SdtRun& CT_CustomXmlRun::ChildGroup_1::get_sdt() const
{
    if (m_sdt)
    {
        return *m_sdt;
    }
    return CT_SdtRun::default_instance();
}

bool CT_CustomXmlRun::ChildGroup_1::has_dir() const
{
    return m_has_dir;
}

CT_DirContentRun* CT_CustomXmlRun::ChildGroup_1::mutable_dir()
{

    m_has_customXml = false;

    if (m_customXml)
    {
        delete m_customXml;
        m_customXml = NULL;
    }
    ;

    m_has_smartTag = false;

    if (m_smartTag)
    {
        delete m_smartTag;
        m_smartTag = NULL;
    }
    ;

    m_has_sdt = false;

    if (m_sdt)
    {
        delete m_sdt;
        m_sdt = NULL;
    }
    ;

    m_has_bdo = false;

    if (m_bdo)
    {
        delete m_bdo;
        m_bdo = NULL;
    }
    ;

    m_has_r = false;

    if (m_r)
    {
        delete m_r;
        m_r = NULL;
    }
    ;

    m_has_dir = true;
    if (!m_dir)
    {
        m_dir = new CT_DirContentRun();
    }
    return m_dir;
}

const CT_DirContentRun& CT_CustomXmlRun::ChildGroup_1::get_dir() const
{
    if (m_dir)
    {
        return *m_dir;
    }
    return CT_DirContentRun::default_instance();
}

bool CT_CustomXmlRun::ChildGroup_1::has_bdo() const
{
    return m_has_bdo;
}

CT_BdoContentRun* CT_CustomXmlRun::ChildGroup_1::mutable_bdo()
{

    m_has_customXml = false;

    if (m_customXml)
    {
        delete m_customXml;
        m_customXml = NULL;
    }
    ;

    m_has_smartTag = false;

    if (m_smartTag)
    {
        delete m_smartTag;
        m_smartTag = NULL;
    }
    ;

    m_has_sdt = false;

    if (m_sdt)
    {
        delete m_sdt;
        m_sdt = NULL;
    }
    ;

    m_has_dir = false;

    if (m_dir)
    {
        delete m_dir;
        m_dir = NULL;
    }
    ;

    m_has_r = false;

    if (m_r)
    {
        delete m_r;
        m_r = NULL;
    }
    ;

    m_has_bdo = true;
    if (!m_bdo)
    {
        m_bdo = new CT_BdoContentRun();
    }
    return m_bdo;
}

const CT_BdoContentRun& CT_CustomXmlRun::ChildGroup_1::get_bdo() const
{
    if (m_bdo)
    {
        return *m_bdo;
    }
    return CT_BdoContentRun::default_instance();
}

bool CT_CustomXmlRun::ChildGroup_1::has_r() const
{
    return m_has_r;
}

CT_R* CT_CustomXmlRun::ChildGroup_1::mutable_r()
{

    m_has_customXml = false;

    if (m_customXml)
    {
        delete m_customXml;
        m_customXml = NULL;
    }
    ;

    m_has_smartTag = false;

    if (m_smartTag)
    {
        delete m_smartTag;
        m_smartTag = NULL;
    }
    ;

    m_has_sdt = false;

    if (m_sdt)
    {
        delete m_sdt;
        m_sdt = NULL;
    }
    ;

    m_has_dir = false;

    if (m_dir)
    {
        delete m_dir;
        m_dir = NULL;
    }
    ;

    m_has_bdo = false;

    if (m_bdo)
    {
        delete m_bdo;
        m_bdo = NULL;
    }
    ;

    m_has_r = true;
    if (!m_r)
    {
        m_r = new CT_R();
    }
    return m_r;
}

const CT_R& CT_CustomXmlRun::ChildGroup_1::get_r() const
{
    if (m_r)
    {
        return *m_r;
    }
    return CT_R::default_instance();
}


// CT_CustomXmlRun::ChildGroup_2
CT_CustomXmlRun::ChildGroup_2::ChildGroup_2()
    :m_has_proofErr(false),
     m_proofErr(NULL),
     m_has_permStart(false),
     m_permStart(NULL),
     m_has_permEnd(false),
     m_permEnd(NULL)
{
}
bool CT_CustomXmlRun::ChildGroup_2::has_proofErr() const
{
    return m_has_proofErr;
}

CT_ProofErr* CT_CustomXmlRun::ChildGroup_2::mutable_proofErr()
{

    m_has_permStart = false;

    if (m_permStart)
    {
        delete m_permStart;
        m_permStart = NULL;
    }
    ;

    m_has_permEnd = false;

    if (m_permEnd)
    {
        delete m_permEnd;
        m_permEnd = NULL;
    }
    ;

    m_has_proofErr = true;
    if (!m_proofErr)
    {
        m_proofErr = new CT_ProofErr();
    }
    return m_proofErr;
}

const CT_ProofErr& CT_CustomXmlRun::ChildGroup_2::get_proofErr() const
{
    if (m_proofErr)
    {
        return *m_proofErr;
    }
    return CT_ProofErr::default_instance();
}

bool CT_CustomXmlRun::ChildGroup_2::has_permStart() const
{
    return m_has_permStart;
}

CT_PermStart* CT_CustomXmlRun::ChildGroup_2::mutable_permStart()
{

    m_has_proofErr = false;

    if (m_proofErr)
    {
        delete m_proofErr;
        m_proofErr = NULL;
    }
    ;

    m_has_permEnd = false;

    if (m_permEnd)
    {
        delete m_permEnd;
        m_permEnd = NULL;
    }
    ;

    m_has_permStart = true;
    if (!m_permStart)
    {
        m_permStart = new CT_PermStart();
    }
    return m_permStart;
}

const CT_PermStart& CT_CustomXmlRun::ChildGroup_2::get_permStart() const
{
    if (m_permStart)
    {
        return *m_permStart;
    }
    return CT_PermStart::default_instance();
}

bool CT_CustomXmlRun::ChildGroup_2::has_permEnd() const
{
    return m_has_permEnd;
}

CT_Perm* CT_CustomXmlRun::ChildGroup_2::mutable_permEnd()
{

    m_has_proofErr = false;

    if (m_proofErr)
    {
        delete m_proofErr;
        m_proofErr = NULL;
    }
    ;

    m_has_permStart = false;

    if (m_permStart)
    {
        delete m_permStart;
        m_permStart = NULL;
    }
    ;

    m_has_permEnd = true;
    if (!m_permEnd)
    {
        m_permEnd = new CT_Perm();
    }
    return m_permEnd;
}

const CT_Perm& CT_CustomXmlRun::ChildGroup_2::get_permEnd() const
{
    if (m_permEnd)
    {
        return *m_permEnd;
    }
    return CT_Perm::default_instance();
}


// CT_CustomXmlRun::ChildGroup_3
CT_CustomXmlRun::ChildGroup_3::ChildGroup_3()
    :m_has_bookmarkStart(false),
     m_bookmarkStart(NULL),
     m_has_bookmarkEnd(false),
     m_bookmarkEnd(NULL),
     m_has_moveFromRangeStart(false),
     m_moveFromRangeStart(NULL),
     m_has_moveFromRangeEnd(false),
     m_moveFromRangeEnd(NULL),
     m_has_moveToRangeStart(false),
     m_moveToRangeStart(NULL),
     m_has_moveToRangeEnd(false),
     m_moveToRangeEnd(NULL),
     m_has_commentRangeStart(false),
     m_commentRangeStart(NULL),
     m_has_commentRangeEnd(false),
     m_commentRangeEnd(NULL),
     m_has_customXmlInsRangeStart(false),
     m_customXmlInsRangeStart(NULL),
     m_has_customXmlInsRangeEnd(false),
     m_customXmlInsRangeEnd(NULL),
     m_has_customXmlDelRangeStart(false),
     m_customXmlDelRangeStart(NULL),
     m_has_customXmlDelRangeEnd(false),
     m_customXmlDelRangeEnd(NULL),
     m_has_customXmlMoveFromRangeStart(false),
     m_customXmlMoveFromRangeStart(NULL),
     m_has_customXmlMoveFromRangeEnd(false),
     m_customXmlMoveFromRangeEnd(NULL),
     m_has_customXmlMoveToRangeStart(false),
     m_customXmlMoveToRangeStart(NULL),
     m_has_customXmlMoveToRangeEnd(false),
     m_customXmlMoveToRangeEnd(NULL),
     m_has_ins(false),
     m_ins(NULL),
     m_has_del(false),
     m_del(NULL),
     m_has_moveFrom(false),
     m_moveFrom(NULL),
     m_has_moveTo(false),
     m_moveTo(NULL)
{
}
bool CT_CustomXmlRun::ChildGroup_3::has_bookmarkStart() const
{
    return m_has_bookmarkStart;
}

CT_Bookmark* CT_CustomXmlRun::ChildGroup_3::mutable_bookmarkStart()
{

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_bookmarkStart = true;
    if (!m_bookmarkStart)
    {
        m_bookmarkStart = new CT_Bookmark();
    }
    return m_bookmarkStart;
}

const CT_Bookmark& CT_CustomXmlRun::ChildGroup_3::get_bookmarkStart() const
{
    if (m_bookmarkStart)
    {
        return *m_bookmarkStart;
    }
    return CT_Bookmark::default_instance();
}

bool CT_CustomXmlRun::ChildGroup_3::has_bookmarkEnd() const
{
    return m_has_bookmarkEnd;
}

CT_MarkupRange* CT_CustomXmlRun::ChildGroup_3::mutable_bookmarkEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_bookmarkEnd = true;
    if (!m_bookmarkEnd)
    {
        m_bookmarkEnd = new CT_MarkupRange();
    }
    return m_bookmarkEnd;
}

const CT_MarkupRange& CT_CustomXmlRun::ChildGroup_3::get_bookmarkEnd() const
{
    if (m_bookmarkEnd)
    {
        return *m_bookmarkEnd;
    }
    return CT_MarkupRange::default_instance();
}

bool CT_CustomXmlRun::ChildGroup_3::has_moveFromRangeStart() const
{
    return m_has_moveFromRangeStart;
}

CT_MoveBookmark* CT_CustomXmlRun::ChildGroup_3::mutable_moveFromRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_moveFromRangeStart = true;
    if (!m_moveFromRangeStart)
    {
        m_moveFromRangeStart = new CT_MoveBookmark();
    }
    return m_moveFromRangeStart;
}

const CT_MoveBookmark& CT_CustomXmlRun::ChildGroup_3::get_moveFromRangeStart() const
{
    if (m_moveFromRangeStart)
    {
        return *m_moveFromRangeStart;
    }
    return CT_MoveBookmark::default_instance();
}

bool CT_CustomXmlRun::ChildGroup_3::has_moveFromRangeEnd() const
{
    return m_has_moveFromRangeEnd;
}

CT_MarkupRange* CT_CustomXmlRun::ChildGroup_3::mutable_moveFromRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_moveFromRangeEnd = true;
    if (!m_moveFromRangeEnd)
    {
        m_moveFromRangeEnd = new CT_MarkupRange();
    }
    return m_moveFromRangeEnd;
}

const CT_MarkupRange& CT_CustomXmlRun::ChildGroup_3::get_moveFromRangeEnd() const
{
    if (m_moveFromRangeEnd)
    {
        return *m_moveFromRangeEnd;
    }
    return CT_MarkupRange::default_instance();
}

bool CT_CustomXmlRun::ChildGroup_3::has_moveToRangeStart() const
{
    return m_has_moveToRangeStart;
}

CT_MoveBookmark* CT_CustomXmlRun::ChildGroup_3::mutable_moveToRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_moveToRangeStart = true;
    if (!m_moveToRangeStart)
    {
        m_moveToRangeStart = new CT_MoveBookmark();
    }
    return m_moveToRangeStart;
}

const CT_MoveBookmark& CT_CustomXmlRun::ChildGroup_3::get_moveToRangeStart() const
{
    if (m_moveToRangeStart)
    {
        return *m_moveToRangeStart;
    }
    return CT_MoveBookmark::default_instance();
}

bool CT_CustomXmlRun::ChildGroup_3::has_moveToRangeEnd() const
{
    return m_has_moveToRangeEnd;
}

CT_MarkupRange* CT_CustomXmlRun::ChildGroup_3::mutable_moveToRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_moveToRangeEnd = true;
    if (!m_moveToRangeEnd)
    {
        m_moveToRangeEnd = new CT_MarkupRange();
    }
    return m_moveToRangeEnd;
}

const CT_MarkupRange& CT_CustomXmlRun::ChildGroup_3::get_moveToRangeEnd() const
{
    if (m_moveToRangeEnd)
    {
        return *m_moveToRangeEnd;
    }
    return CT_MarkupRange::default_instance();
}

bool CT_CustomXmlRun::ChildGroup_3::has_commentRangeStart() const
{
    return m_has_commentRangeStart;
}

CT_MarkupRange* CT_CustomXmlRun::ChildGroup_3::mutable_commentRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_commentRangeStart = true;
    if (!m_commentRangeStart)
    {
        m_commentRangeStart = new CT_MarkupRange();
    }
    return m_commentRangeStart;
}

const CT_MarkupRange& CT_CustomXmlRun::ChildGroup_3::get_commentRangeStart() const
{
    if (m_commentRangeStart)
    {
        return *m_commentRangeStart;
    }
    return CT_MarkupRange::default_instance();
}

bool CT_CustomXmlRun::ChildGroup_3::has_commentRangeEnd() const
{
    return m_has_commentRangeEnd;
}

CT_MarkupRange* CT_CustomXmlRun::ChildGroup_3::mutable_commentRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_commentRangeEnd = true;
    if (!m_commentRangeEnd)
    {
        m_commentRangeEnd = new CT_MarkupRange();
    }
    return m_commentRangeEnd;
}

const CT_MarkupRange& CT_CustomXmlRun::ChildGroup_3::get_commentRangeEnd() const
{
    if (m_commentRangeEnd)
    {
        return *m_commentRangeEnd;
    }
    return CT_MarkupRange::default_instance();
}

bool CT_CustomXmlRun::ChildGroup_3::has_customXmlInsRangeStart() const
{
    return m_has_customXmlInsRangeStart;
}

CT_TrackChange* CT_CustomXmlRun::ChildGroup_3::mutable_customXmlInsRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = true;
    if (!m_customXmlInsRangeStart)
    {
        m_customXmlInsRangeStart = new CT_TrackChange();
    }
    return m_customXmlInsRangeStart;
}

const CT_TrackChange& CT_CustomXmlRun::ChildGroup_3::get_customXmlInsRangeStart() const
{
    if (m_customXmlInsRangeStart)
    {
        return *m_customXmlInsRangeStart;
    }
    return CT_TrackChange::default_instance();
}

bool CT_CustomXmlRun::ChildGroup_3::has_customXmlInsRangeEnd() const
{
    return m_has_customXmlInsRangeEnd;
}

CT_Markup* CT_CustomXmlRun::ChildGroup_3::mutable_customXmlInsRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = true;
    if (!m_customXmlInsRangeEnd)
    {
        m_customXmlInsRangeEnd = new CT_Markup();
    }
    return m_customXmlInsRangeEnd;
}

const CT_Markup& CT_CustomXmlRun::ChildGroup_3::get_customXmlInsRangeEnd() const
{
    if (m_customXmlInsRangeEnd)
    {
        return *m_customXmlInsRangeEnd;
    }
    return CT_Markup::default_instance();
}

bool CT_CustomXmlRun::ChildGroup_3::has_customXmlDelRangeStart() const
{
    return m_has_customXmlDelRangeStart;
}

CT_TrackChange* CT_CustomXmlRun::ChildGroup_3::mutable_customXmlDelRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = true;
    if (!m_customXmlDelRangeStart)
    {
        m_customXmlDelRangeStart = new CT_TrackChange();
    }
    return m_customXmlDelRangeStart;
}

const CT_TrackChange& CT_CustomXmlRun::ChildGroup_3::get_customXmlDelRangeStart() const
{
    if (m_customXmlDelRangeStart)
    {
        return *m_customXmlDelRangeStart;
    }
    return CT_TrackChange::default_instance();
}

bool CT_CustomXmlRun::ChildGroup_3::has_customXmlDelRangeEnd() const
{
    return m_has_customXmlDelRangeEnd;
}

CT_Markup* CT_CustomXmlRun::ChildGroup_3::mutable_customXmlDelRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = true;
    if (!m_customXmlDelRangeEnd)
    {
        m_customXmlDelRangeEnd = new CT_Markup();
    }
    return m_customXmlDelRangeEnd;
}

const CT_Markup& CT_CustomXmlRun::ChildGroup_3::get_customXmlDelRangeEnd() const
{
    if (m_customXmlDelRangeEnd)
    {
        return *m_customXmlDelRangeEnd;
    }
    return CT_Markup::default_instance();
}

bool CT_CustomXmlRun::ChildGroup_3::has_customXmlMoveFromRangeStart() const
{
    return m_has_customXmlMoveFromRangeStart;
}

CT_TrackChange* CT_CustomXmlRun::ChildGroup_3::mutable_customXmlMoveFromRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = true;
    if (!m_customXmlMoveFromRangeStart)
    {
        m_customXmlMoveFromRangeStart = new CT_TrackChange();
    }
    return m_customXmlMoveFromRangeStart;
}

const CT_TrackChange& CT_CustomXmlRun::ChildGroup_3::get_customXmlMoveFromRangeStart() const
{
    if (m_customXmlMoveFromRangeStart)
    {
        return *m_customXmlMoveFromRangeStart;
    }
    return CT_TrackChange::default_instance();
}

bool CT_CustomXmlRun::ChildGroup_3::has_customXmlMoveFromRangeEnd() const
{
    return m_has_customXmlMoveFromRangeEnd;
}

CT_Markup* CT_CustomXmlRun::ChildGroup_3::mutable_customXmlMoveFromRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = true;
    if (!m_customXmlMoveFromRangeEnd)
    {
        m_customXmlMoveFromRangeEnd = new CT_Markup();
    }
    return m_customXmlMoveFromRangeEnd;
}

const CT_Markup& CT_CustomXmlRun::ChildGroup_3::get_customXmlMoveFromRangeEnd() const
{
    if (m_customXmlMoveFromRangeEnd)
    {
        return *m_customXmlMoveFromRangeEnd;
    }
    return CT_Markup::default_instance();
}

bool CT_CustomXmlRun::ChildGroup_3::has_customXmlMoveToRangeStart() const
{
    return m_has_customXmlMoveToRangeStart;
}

CT_TrackChange* CT_CustomXmlRun::ChildGroup_3::mutable_customXmlMoveToRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = true;
    if (!m_customXmlMoveToRangeStart)
    {
        m_customXmlMoveToRangeStart = new CT_TrackChange();
    }
    return m_customXmlMoveToRangeStart;
}

const CT_TrackChange& CT_CustomXmlRun::ChildGroup_3::get_customXmlMoveToRangeStart() const
{
    if (m_customXmlMoveToRangeStart)
    {
        return *m_customXmlMoveToRangeStart;
    }
    return CT_TrackChange::default_instance();
}

bool CT_CustomXmlRun::ChildGroup_3::has_customXmlMoveToRangeEnd() const
{
    return m_has_customXmlMoveToRangeEnd;
}

CT_Markup* CT_CustomXmlRun::ChildGroup_3::mutable_customXmlMoveToRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = true;
    if (!m_customXmlMoveToRangeEnd)
    {
        m_customXmlMoveToRangeEnd = new CT_Markup();
    }
    return m_customXmlMoveToRangeEnd;
}

const CT_Markup& CT_CustomXmlRun::ChildGroup_3::get_customXmlMoveToRangeEnd() const
{
    if (m_customXmlMoveToRangeEnd)
    {
        return *m_customXmlMoveToRangeEnd;
    }
    return CT_Markup::default_instance();
}

bool CT_CustomXmlRun::ChildGroup_3::has_ins() const
{
    return m_has_ins;
}

CT_RunTrackChange* CT_CustomXmlRun::ChildGroup_3::mutable_ins()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_ins = true;
    if (!m_ins)
    {
        m_ins = new CT_RunTrackChange();
    }
    return m_ins;
}

const CT_RunTrackChange& CT_CustomXmlRun::ChildGroup_3::get_ins() const
{
    if (m_ins)
    {
        return *m_ins;
    }
    return CT_RunTrackChange::default_instance();
}

bool CT_CustomXmlRun::ChildGroup_3::has_del() const
{
    return m_has_del;
}

CT_RunTrackChange* CT_CustomXmlRun::ChildGroup_3::mutable_del()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_del = true;
    if (!m_del)
    {
        m_del = new CT_RunTrackChange();
    }
    return m_del;
}

const CT_RunTrackChange& CT_CustomXmlRun::ChildGroup_3::get_del() const
{
    if (m_del)
    {
        return *m_del;
    }
    return CT_RunTrackChange::default_instance();
}

bool CT_CustomXmlRun::ChildGroup_3::has_moveFrom() const
{
    return m_has_moveFrom;
}

CT_RunTrackChange* CT_CustomXmlRun::ChildGroup_3::mutable_moveFrom()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_moveFrom = true;
    if (!m_moveFrom)
    {
        m_moveFrom = new CT_RunTrackChange();
    }
    return m_moveFrom;
}

const CT_RunTrackChange& CT_CustomXmlRun::ChildGroup_3::get_moveFrom() const
{
    if (m_moveFrom)
    {
        return *m_moveFrom;
    }
    return CT_RunTrackChange::default_instance();
}

bool CT_CustomXmlRun::ChildGroup_3::has_moveTo() const
{
    return m_has_moveTo;
}

CT_RunTrackChange* CT_CustomXmlRun::ChildGroup_3::mutable_moveTo()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = true;
    if (!m_moveTo)
    {
        m_moveTo = new CT_RunTrackChange();
    }
    return m_moveTo;
}

const CT_RunTrackChange& CT_CustomXmlRun::ChildGroup_3::get_moveTo() const
{
    if (m_moveTo)
    {
        return *m_moveTo;
    }
    return CT_RunTrackChange::default_instance();
}


// CT_CustomXmlRun::ChildGroup_4
CT_CustomXmlRun::ChildGroup_4::ChildGroup_4()
    :m_has_m_oMathPara(false),
     m_m_oMathPara(NULL),
     m_has_m_oMath(false),
     m_m_oMath(NULL),
     m_has_fldSimple(false),
     m_fldSimple(NULL),
     m_has_hyperlink(false),
     m_hyperlink(NULL),
     m_has_subDoc(false),
     m_subDoc(NULL)
{
}
bool CT_CustomXmlRun::ChildGroup_4::has_m_oMathPara() const
{
    return m_has_m_oMathPara;
}

ns_m::CT_OMathPara* CT_CustomXmlRun::ChildGroup_4::mutable_m_oMathPara()
{

    m_has_m_oMath = false;

    if (m_m_oMath)
    {
        delete m_m_oMath;
        m_m_oMath = NULL;
    }
    ;

    m_has_fldSimple = false;

    if (m_fldSimple)
    {
        delete m_fldSimple;
        m_fldSimple = NULL;
    }
    ;

    m_has_hyperlink = false;

    if (m_hyperlink)
    {
        delete m_hyperlink;
        m_hyperlink = NULL;
    }
    ;

    m_has_subDoc = false;

    if (m_subDoc)
    {
        delete m_subDoc;
        m_subDoc = NULL;
    }
    ;

    m_has_m_oMathPara = true;
    if (!m_m_oMathPara)
    {
        m_m_oMathPara = new ns_m::CT_OMathPara();
    }
    return m_m_oMathPara;
}

const ns_m::CT_OMathPara& CT_CustomXmlRun::ChildGroup_4::get_m_oMathPara() const
{
    if (m_m_oMathPara)
    {
        return *m_m_oMathPara;
    }
    return ns_m::CT_OMathPara::default_instance();
}

bool CT_CustomXmlRun::ChildGroup_4::has_m_oMath() const
{
    return m_has_m_oMath;
}

ns_m::CT_OMath* CT_CustomXmlRun::ChildGroup_4::mutable_m_oMath()
{

    m_has_m_oMathPara = false;

    if (m_m_oMathPara)
    {
        delete m_m_oMathPara;
        m_m_oMathPara = NULL;
    }
    ;

    m_has_fldSimple = false;

    if (m_fldSimple)
    {
        delete m_fldSimple;
        m_fldSimple = NULL;
    }
    ;

    m_has_hyperlink = false;

    if (m_hyperlink)
    {
        delete m_hyperlink;
        m_hyperlink = NULL;
    }
    ;

    m_has_subDoc = false;

    if (m_subDoc)
    {
        delete m_subDoc;
        m_subDoc = NULL;
    }
    ;

    m_has_m_oMath = true;
    if (!m_m_oMath)
    {
        m_m_oMath = new ns_m::CT_OMath();
    }
    return m_m_oMath;
}

const ns_m::CT_OMath& CT_CustomXmlRun::ChildGroup_4::get_m_oMath() const
{
    if (m_m_oMath)
    {
        return *m_m_oMath;
    }
    return ns_m::CT_OMath::default_instance();
}

bool CT_CustomXmlRun::ChildGroup_4::has_fldSimple() const
{
    return m_has_fldSimple;
}

CT_SimpleField* CT_CustomXmlRun::ChildGroup_4::mutable_fldSimple()
{

    m_has_m_oMathPara = false;

    if (m_m_oMathPara)
    {
        delete m_m_oMathPara;
        m_m_oMathPara = NULL;
    }
    ;

    m_has_m_oMath = false;

    if (m_m_oMath)
    {
        delete m_m_oMath;
        m_m_oMath = NULL;
    }
    ;

    m_has_hyperlink = false;

    if (m_hyperlink)
    {
        delete m_hyperlink;
        m_hyperlink = NULL;
    }
    ;

    m_has_subDoc = false;

    if (m_subDoc)
    {
        delete m_subDoc;
        m_subDoc = NULL;
    }
    ;

    m_has_fldSimple = true;
    if (!m_fldSimple)
    {
        m_fldSimple = new CT_SimpleField();
    }
    return m_fldSimple;
}

const CT_SimpleField& CT_CustomXmlRun::ChildGroup_4::get_fldSimple() const
{
    if (m_fldSimple)
    {
        return *m_fldSimple;
    }
    return CT_SimpleField::default_instance();
}

bool CT_CustomXmlRun::ChildGroup_4::has_hyperlink() const
{
    return m_has_hyperlink;
}

CT_Hyperlink* CT_CustomXmlRun::ChildGroup_4::mutable_hyperlink()
{

    m_has_m_oMathPara = false;

    if (m_m_oMathPara)
    {
        delete m_m_oMathPara;
        m_m_oMathPara = NULL;
    }
    ;

    m_has_m_oMath = false;

    if (m_m_oMath)
    {
        delete m_m_oMath;
        m_m_oMath = NULL;
    }
    ;

    m_has_fldSimple = false;

    if (m_fldSimple)
    {
        delete m_fldSimple;
        m_fldSimple = NULL;
    }
    ;

    m_has_subDoc = false;

    if (m_subDoc)
    {
        delete m_subDoc;
        m_subDoc = NULL;
    }
    ;

    m_has_hyperlink = true;
    if (!m_hyperlink)
    {
        m_hyperlink = new CT_Hyperlink();
    }
    return m_hyperlink;
}

const CT_Hyperlink& CT_CustomXmlRun::ChildGroup_4::get_hyperlink() const
{
    if (m_hyperlink)
    {
        return *m_hyperlink;
    }
    return CT_Hyperlink::default_instance();
}

bool CT_CustomXmlRun::ChildGroup_4::has_subDoc() const
{
    return m_has_subDoc;
}

CT_Rel* CT_CustomXmlRun::ChildGroup_4::mutable_subDoc()
{

    m_has_m_oMathPara = false;

    if (m_m_oMathPara)
    {
        delete m_m_oMathPara;
        m_m_oMathPara = NULL;
    }
    ;

    m_has_m_oMath = false;

    if (m_m_oMath)
    {
        delete m_m_oMath;
        m_m_oMath = NULL;
    }
    ;

    m_has_fldSimple = false;

    if (m_fldSimple)
    {
        delete m_fldSimple;
        m_fldSimple = NULL;
    }
    ;

    m_has_hyperlink = false;

    if (m_hyperlink)
    {
        delete m_hyperlink;
        m_hyperlink = NULL;
    }
    ;

    m_has_subDoc = true;
    if (!m_subDoc)
    {
        m_subDoc = new CT_Rel();
    }
    return m_subDoc;
}

const CT_Rel& CT_CustomXmlRun::ChildGroup_4::get_subDoc() const
{
    if (m_subDoc)
    {
        return *m_subDoc;
    }
    return CT_Rel::default_instance();
}

CT_CustomXmlRun* CT_CustomXmlRun::default_instance_ = NULL;

// CT_SmartTagRun
CT_SmartTagRun::CT_SmartTagRun()
    :m_has_smartTagPr(false),
     m_smartTagPr(NULL),
     m_has_uri_attr(false),
     m_uri_attr(NULL),
     m_has_element_attr(false),
     m_element_attr(NULL)
{
}
CT_SmartTagRun::~CT_SmartTagRun()
{
    clear();
}
bool CT_SmartTagRun::has_smartTagPr() const
{
    return m_has_smartTagPr;
}

CT_SmartTagPr* CT_SmartTagRun::mutable_smartTagPr()
{
    m_has_smartTagPr = true;
    if (!m_smartTagPr)
    {
        m_smartTagPr = new CT_SmartTagPr();
    }
    return m_smartTagPr;
}

const CT_SmartTagPr& CT_SmartTagRun::get_smartTagPr() const
{
    if (m_smartTagPr)
    {
        return *m_smartTagPr;
    }
    return CT_SmartTagPr::default_instance();
}

CT_CustomXmlRun* CT_SmartTagRun::add_customXml()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_CustomXmlRun* pNewChild = pChildGroup->mutable_customXml();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_SmartTagRun* CT_SmartTagRun::add_smartTag()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_SmartTagRun* pNewChild = pChildGroup->mutable_smartTag();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_SdtRun* CT_SmartTagRun::add_sdt()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_SdtRun* pNewChild = pChildGroup->mutable_sdt();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_DirContentRun* CT_SmartTagRun::add_dir()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_DirContentRun* pNewChild = pChildGroup->mutable_dir();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_BdoContentRun* CT_SmartTagRun::add_bdo()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_BdoContentRun* pNewChild = pChildGroup->mutable_bdo();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_R* CT_SmartTagRun::add_r()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_R* pNewChild = pChildGroup->mutable_r();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_ProofErr* CT_SmartTagRun::add_proofErr()
{
    ChildGroup_2 *pChildGroup = new ChildGroup_2();
    CT_ProofErr* pNewChild = pChildGroup->mutable_proofErr();
    m_childGroupList_2.push_back(pChildGroup);
    return pNewChild;
}

CT_PermStart* CT_SmartTagRun::add_permStart()
{
    ChildGroup_2 *pChildGroup = new ChildGroup_2();
    CT_PermStart* pNewChild = pChildGroup->mutable_permStart();
    m_childGroupList_2.push_back(pChildGroup);
    return pNewChild;
}

CT_Perm* CT_SmartTagRun::add_permEnd()
{
    ChildGroup_2 *pChildGroup = new ChildGroup_2();
    CT_Perm* pNewChild = pChildGroup->mutable_permEnd();
    m_childGroupList_2.push_back(pChildGroup);
    return pNewChild;
}

CT_Bookmark* CT_SmartTagRun::add_bookmarkStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_Bookmark* pNewChild = pChildGroup->mutable_bookmarkStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MarkupRange* CT_SmartTagRun::add_bookmarkEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MarkupRange* pNewChild = pChildGroup->mutable_bookmarkEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MoveBookmark* CT_SmartTagRun::add_moveFromRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MoveBookmark* pNewChild = pChildGroup->mutable_moveFromRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MarkupRange* CT_SmartTagRun::add_moveFromRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MarkupRange* pNewChild = pChildGroup->mutable_moveFromRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MoveBookmark* CT_SmartTagRun::add_moveToRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MoveBookmark* pNewChild = pChildGroup->mutable_moveToRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MarkupRange* CT_SmartTagRun::add_moveToRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MarkupRange* pNewChild = pChildGroup->mutable_moveToRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MarkupRange* CT_SmartTagRun::add_commentRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MarkupRange* pNewChild = pChildGroup->mutable_commentRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MarkupRange* CT_SmartTagRun::add_commentRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MarkupRange* pNewChild = pChildGroup->mutable_commentRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_TrackChange* CT_SmartTagRun::add_customXmlInsRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_TrackChange* pNewChild = pChildGroup->mutable_customXmlInsRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_Markup* CT_SmartTagRun::add_customXmlInsRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_Markup* pNewChild = pChildGroup->mutable_customXmlInsRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_TrackChange* CT_SmartTagRun::add_customXmlDelRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_TrackChange* pNewChild = pChildGroup->mutable_customXmlDelRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_Markup* CT_SmartTagRun::add_customXmlDelRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_Markup* pNewChild = pChildGroup->mutable_customXmlDelRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_TrackChange* CT_SmartTagRun::add_customXmlMoveFromRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_TrackChange* pNewChild = pChildGroup->mutable_customXmlMoveFromRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_Markup* CT_SmartTagRun::add_customXmlMoveFromRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_Markup* pNewChild = pChildGroup->mutable_customXmlMoveFromRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_TrackChange* CT_SmartTagRun::add_customXmlMoveToRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_TrackChange* pNewChild = pChildGroup->mutable_customXmlMoveToRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_Markup* CT_SmartTagRun::add_customXmlMoveToRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_Markup* pNewChild = pChildGroup->mutable_customXmlMoveToRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_RunTrackChange* CT_SmartTagRun::add_ins()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_RunTrackChange* pNewChild = pChildGroup->mutable_ins();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_RunTrackChange* CT_SmartTagRun::add_del()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_RunTrackChange* pNewChild = pChildGroup->mutable_del();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_RunTrackChange* CT_SmartTagRun::add_moveFrom()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_RunTrackChange* pNewChild = pChildGroup->mutable_moveFrom();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_RunTrackChange* CT_SmartTagRun::add_moveTo()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_RunTrackChange* pNewChild = pChildGroup->mutable_moveTo();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

ns_m::CT_OMathPara* CT_SmartTagRun::add_m_oMathPara()
{
    ChildGroup_4 *pChildGroup = new ChildGroup_4();
    ns_m::CT_OMathPara* pNewChild = pChildGroup->mutable_m_oMathPara();
    m_childGroupList_4.push_back(pChildGroup);
    return pNewChild;
}

ns_m::CT_OMath* CT_SmartTagRun::add_m_oMath()
{
    ChildGroup_4 *pChildGroup = new ChildGroup_4();
    ns_m::CT_OMath* pNewChild = pChildGroup->mutable_m_oMath();
    m_childGroupList_4.push_back(pChildGroup);
    return pNewChild;
}

CT_SimpleField* CT_SmartTagRun::add_fldSimple()
{
    ChildGroup_4 *pChildGroup = new ChildGroup_4();
    CT_SimpleField* pNewChild = pChildGroup->mutable_fldSimple();
    m_childGroupList_4.push_back(pChildGroup);
    return pNewChild;
}

CT_Hyperlink* CT_SmartTagRun::add_hyperlink()
{
    ChildGroup_4 *pChildGroup = new ChildGroup_4();
    CT_Hyperlink* pNewChild = pChildGroup->mutable_hyperlink();
    m_childGroupList_4.push_back(pChildGroup);
    return pNewChild;
}

CT_Rel* CT_SmartTagRun::add_subDoc()
{
    ChildGroup_4 *pChildGroup = new ChildGroup_4();
    CT_Rel* pNewChild = pChildGroup->mutable_subDoc();
    m_childGroupList_4.push_back(pChildGroup);
    return pNewChild;
}

void CT_SmartTagRun::clear()
{
    m_has_uri_attr = false;

    if (m_uri_attr)
    {
        delete m_uri_attr;
        m_uri_attr = NULL;
    }


    m_has_element_attr = false;

    if (m_element_attr)
    {
        delete m_element_attr;
        m_element_attr = NULL;
    }


    m_has_smartTagPr = false;

    if (m_smartTagPr)
    {
        delete m_smartTagPr;
        m_smartTagPr = NULL;
    }


    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }

    {
        vector<ChildGroup_2*>::iterator iter;
        for (iter = m_childGroupList_2.begin(); iter != m_childGroupList_2.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_2.clear();
    }

    {
        vector<ChildGroup_3*>::iterator iter;
        for (iter = m_childGroupList_3.begin(); iter != m_childGroupList_3.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_3.clear();
    }

    {
        vector<ChildGroup_4*>::iterator iter;
        for (iter = m_childGroupList_4.begin(); iter != m_childGroupList_4.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_4.clear();
    }
}

void CT_SmartTagRun::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_uri_attr)
    {
        m_uri_attr->toXmlAttr("w:uri", _outStream);
    }


    assert(m_has_element_attr);
    if (m_has_element_attr)
    {
        m_element_attr->toXmlAttr("w:element", _outStream);
    }

    _outStream << ">";


    if (m_has_smartTagPr)
    {
        m_smartTagPr->toXmlElem("w:smartTagPr", "", _outStream);
    }

    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_customXml())
            {
                (*iter)->get_customXml().toXmlElem("w:customXml", "", _outStream);
            }


            else if ((*iter)->has_smartTag())
            {
                (*iter)->get_smartTag().toXmlElem("w:smartTag", "", _outStream);
            }


            else if ((*iter)->has_sdt())
            {
                (*iter)->get_sdt().toXmlElem("w:sdt", "", _outStream);
            }


            else if ((*iter)->has_dir())
            {
                (*iter)->get_dir().toXmlElem("w:dir", "", _outStream);
            }


            else if ((*iter)->has_bdo())
            {
                (*iter)->get_bdo().toXmlElem("w:bdo", "", _outStream);
            }


            else if ((*iter)->has_r())
            {
                (*iter)->get_r().toXmlElem("w:r", "", _outStream);
            }


        }
    }

    {
        vector<ChildGroup_2*>::const_iterator iter;
        for (iter = m_childGroupList_2.begin(); iter != m_childGroupList_2.end(); ++iter)
        {
            if ((*iter)->has_proofErr())
            {
                (*iter)->get_proofErr().toXmlElem("w:proofErr", "", _outStream);
            }


            else if ((*iter)->has_permStart())
            {
                (*iter)->get_permStart().toXmlElem("w:permStart", "", _outStream);
            }


            else if ((*iter)->has_permEnd())
            {
                (*iter)->get_permEnd().toXmlElem("w:permEnd", "", _outStream);
            }


        }
    }

    {
        vector<ChildGroup_3*>::const_iterator iter;
        for (iter = m_childGroupList_3.begin(); iter != m_childGroupList_3.end(); ++iter)
        {
            if ((*iter)->has_bookmarkStart())
            {
                (*iter)->get_bookmarkStart().toXmlElem("w:bookmarkStart", "", _outStream);
            }


            else if ((*iter)->has_bookmarkEnd())
            {
                (*iter)->get_bookmarkEnd().toXmlElem("w:bookmarkEnd", "", _outStream);
            }


            else if ((*iter)->has_moveFromRangeStart())
            {
                (*iter)->get_moveFromRangeStart().toXmlElem("w:moveFromRangeStart", "", _outStream);
            }


            else if ((*iter)->has_moveFromRangeEnd())
            {
                (*iter)->get_moveFromRangeEnd().toXmlElem("w:moveFromRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_moveToRangeStart())
            {
                (*iter)->get_moveToRangeStart().toXmlElem("w:moveToRangeStart", "", _outStream);
            }


            else if ((*iter)->has_moveToRangeEnd())
            {
                (*iter)->get_moveToRangeEnd().toXmlElem("w:moveToRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_commentRangeStart())
            {
                (*iter)->get_commentRangeStart().toXmlElem("w:commentRangeStart", "", _outStream);
            }


            else if ((*iter)->has_commentRangeEnd())
            {
                (*iter)->get_commentRangeEnd().toXmlElem("w:commentRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_customXmlInsRangeStart())
            {
                (*iter)->get_customXmlInsRangeStart().toXmlElem("w:customXmlInsRangeStart", "", _outStream);
            }


            else if ((*iter)->has_customXmlInsRangeEnd())
            {
                (*iter)->get_customXmlInsRangeEnd().toXmlElem("w:customXmlInsRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_customXmlDelRangeStart())
            {
                (*iter)->get_customXmlDelRangeStart().toXmlElem("w:customXmlDelRangeStart", "", _outStream);
            }


            else if ((*iter)->has_customXmlDelRangeEnd())
            {
                (*iter)->get_customXmlDelRangeEnd().toXmlElem("w:customXmlDelRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_customXmlMoveFromRangeStart())
            {
                (*iter)->get_customXmlMoveFromRangeStart().toXmlElem("w:customXmlMoveFromRangeStart", "", _outStream);
            }


            else if ((*iter)->has_customXmlMoveFromRangeEnd())
            {
                (*iter)->get_customXmlMoveFromRangeEnd().toXmlElem("w:customXmlMoveFromRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_customXmlMoveToRangeStart())
            {
                (*iter)->get_customXmlMoveToRangeStart().toXmlElem("w:customXmlMoveToRangeStart", "", _outStream);
            }


            else if ((*iter)->has_customXmlMoveToRangeEnd())
            {
                (*iter)->get_customXmlMoveToRangeEnd().toXmlElem("w:customXmlMoveToRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_ins())
            {
                (*iter)->get_ins().toXmlElem("w:ins", "", _outStream);
            }


            else if ((*iter)->has_del())
            {
                (*iter)->get_del().toXmlElem("w:del", "", _outStream);
            }


            else if ((*iter)->has_moveFrom())
            {
                (*iter)->get_moveFrom().toXmlElem("w:moveFrom", "", _outStream);
            }


            else if ((*iter)->has_moveTo())
            {
                (*iter)->get_moveTo().toXmlElem("w:moveTo", "", _outStream);
            }


        }
    }

    {
        vector<ChildGroup_4*>::const_iterator iter;
        for (iter = m_childGroupList_4.begin(); iter != m_childGroupList_4.end(); ++iter)
        {
            if ((*iter)->has_m_oMathPara())
            {
                (*iter)->get_m_oMathPara().toXmlElem("m:oMathPara", "", _outStream);
            }


            else if ((*iter)->has_m_oMath())
            {
                (*iter)->get_m_oMath().toXmlElem("m:oMath", "", _outStream);
            }


            else if ((*iter)->has_fldSimple())
            {
                (*iter)->get_fldSimple().toXmlElem("w:fldSimple", "", _outStream);
            }


            else if ((*iter)->has_hyperlink())
            {
                (*iter)->get_hyperlink().toXmlElem("w:hyperlink", "", _outStream);
            }


            else if ((*iter)->has_subDoc())
            {
                (*iter)->get_subDoc().toXmlElem("w:subDoc", "", _outStream);
            }


        }
    }

    _outStream << "</" << _elemName << ">";
}

const CT_SmartTagRun& CT_SmartTagRun::default_instance()
{
    if (!CT_SmartTagRun::default_instance_)
    {
        CT_SmartTagRun::default_instance_ = new CT_SmartTagRun();
    }
    return *CT_SmartTagRun::default_instance_;
}

bool CT_SmartTagRun::has_uri_attr() const
{
    return m_has_uri_attr;
}

void CT_SmartTagRun::set_uri_attr(const ns_s::ST_String& _uri_attr)
{
    m_has_uri_attr = true;
    m_uri_attr = new ns_s::ST_String(_uri_attr);
}

const ns_s::ST_String& CT_SmartTagRun::get_uri_attr() const
{
    if (m_uri_attr)
    {
        return *m_uri_attr;
    }
    return ns_s::ST_String::default_instance();
}

bool CT_SmartTagRun::has_element_attr() const
{
    return m_has_element_attr;
}

void CT_SmartTagRun::set_element_attr(const ns_s::ST_XmlName& _element_attr)
{
    m_has_element_attr = true;
    m_element_attr = new ns_s::ST_XmlName(_element_attr);
}

const ns_s::ST_XmlName& CT_SmartTagRun::get_element_attr() const
{
    if (m_element_attr)
    {
        return *m_element_attr;
    }
    return ns_s::ST_XmlName::default_instance();
}


// CT_SmartTagRun::ChildGroup_1
CT_SmartTagRun::ChildGroup_1::ChildGroup_1()
    :m_has_customXml(false),
     m_customXml(NULL),
     m_has_smartTag(false),
     m_smartTag(NULL),
     m_has_sdt(false),
     m_sdt(NULL),
     m_has_dir(false),
     m_dir(NULL),
     m_has_bdo(false),
     m_bdo(NULL),
     m_has_r(false),
     m_r(NULL)
{
}
bool CT_SmartTagRun::ChildGroup_1::has_customXml() const
{
    return m_has_customXml;
}

CT_CustomXmlRun* CT_SmartTagRun::ChildGroup_1::mutable_customXml()
{

    m_has_smartTag = false;

    if (m_smartTag)
    {
        delete m_smartTag;
        m_smartTag = NULL;
    }
    ;

    m_has_sdt = false;

    if (m_sdt)
    {
        delete m_sdt;
        m_sdt = NULL;
    }
    ;

    m_has_dir = false;

    if (m_dir)
    {
        delete m_dir;
        m_dir = NULL;
    }
    ;

    m_has_bdo = false;

    if (m_bdo)
    {
        delete m_bdo;
        m_bdo = NULL;
    }
    ;

    m_has_r = false;

    if (m_r)
    {
        delete m_r;
        m_r = NULL;
    }
    ;

    m_has_customXml = true;
    if (!m_customXml)
    {
        m_customXml = new CT_CustomXmlRun();
    }
    return m_customXml;
}

const CT_CustomXmlRun& CT_SmartTagRun::ChildGroup_1::get_customXml() const
{
    if (m_customXml)
    {
        return *m_customXml;
    }
    return CT_CustomXmlRun::default_instance();
}

bool CT_SmartTagRun::ChildGroup_1::has_smartTag() const
{
    return m_has_smartTag;
}

CT_SmartTagRun* CT_SmartTagRun::ChildGroup_1::mutable_smartTag()
{

    m_has_customXml = false;

    if (m_customXml)
    {
        delete m_customXml;
        m_customXml = NULL;
    }
    ;

    m_has_sdt = false;

    if (m_sdt)
    {
        delete m_sdt;
        m_sdt = NULL;
    }
    ;

    m_has_dir = false;

    if (m_dir)
    {
        delete m_dir;
        m_dir = NULL;
    }
    ;

    m_has_bdo = false;

    if (m_bdo)
    {
        delete m_bdo;
        m_bdo = NULL;
    }
    ;

    m_has_r = false;

    if (m_r)
    {
        delete m_r;
        m_r = NULL;
    }
    ;

    m_has_smartTag = true;
    if (!m_smartTag)
    {
        m_smartTag = new CT_SmartTagRun();
    }
    return m_smartTag;
}

const CT_SmartTagRun& CT_SmartTagRun::ChildGroup_1::get_smartTag() const
{
    if (m_smartTag)
    {
        return *m_smartTag;
    }
    return CT_SmartTagRun::default_instance();
}

bool CT_SmartTagRun::ChildGroup_1::has_sdt() const
{
    return m_has_sdt;
}

CT_SdtRun* CT_SmartTagRun::ChildGroup_1::mutable_sdt()
{

    m_has_customXml = false;

    if (m_customXml)
    {
        delete m_customXml;
        m_customXml = NULL;
    }
    ;

    m_has_smartTag = false;

    if (m_smartTag)
    {
        delete m_smartTag;
        m_smartTag = NULL;
    }
    ;

    m_has_dir = false;

    if (m_dir)
    {
        delete m_dir;
        m_dir = NULL;
    }
    ;

    m_has_bdo = false;

    if (m_bdo)
    {
        delete m_bdo;
        m_bdo = NULL;
    }
    ;

    m_has_r = false;

    if (m_r)
    {
        delete m_r;
        m_r = NULL;
    }
    ;

    m_has_sdt = true;
    if (!m_sdt)
    {
        m_sdt = new CT_SdtRun();
    }
    return m_sdt;
}

const CT_SdtRun& CT_SmartTagRun::ChildGroup_1::get_sdt() const
{
    if (m_sdt)
    {
        return *m_sdt;
    }
    return CT_SdtRun::default_instance();
}

bool CT_SmartTagRun::ChildGroup_1::has_dir() const
{
    return m_has_dir;
}

CT_DirContentRun* CT_SmartTagRun::ChildGroup_1::mutable_dir()
{

    m_has_customXml = false;

    if (m_customXml)
    {
        delete m_customXml;
        m_customXml = NULL;
    }
    ;

    m_has_smartTag = false;

    if (m_smartTag)
    {
        delete m_smartTag;
        m_smartTag = NULL;
    }
    ;

    m_has_sdt = false;

    if (m_sdt)
    {
        delete m_sdt;
        m_sdt = NULL;
    }
    ;

    m_has_bdo = false;

    if (m_bdo)
    {
        delete m_bdo;
        m_bdo = NULL;
    }
    ;

    m_has_r = false;

    if (m_r)
    {
        delete m_r;
        m_r = NULL;
    }
    ;

    m_has_dir = true;
    if (!m_dir)
    {
        m_dir = new CT_DirContentRun();
    }
    return m_dir;
}

const CT_DirContentRun& CT_SmartTagRun::ChildGroup_1::get_dir() const
{
    if (m_dir)
    {
        return *m_dir;
    }
    return CT_DirContentRun::default_instance();
}

bool CT_SmartTagRun::ChildGroup_1::has_bdo() const
{
    return m_has_bdo;
}

CT_BdoContentRun* CT_SmartTagRun::ChildGroup_1::mutable_bdo()
{

    m_has_customXml = false;

    if (m_customXml)
    {
        delete m_customXml;
        m_customXml = NULL;
    }
    ;

    m_has_smartTag = false;

    if (m_smartTag)
    {
        delete m_smartTag;
        m_smartTag = NULL;
    }
    ;

    m_has_sdt = false;

    if (m_sdt)
    {
        delete m_sdt;
        m_sdt = NULL;
    }
    ;

    m_has_dir = false;

    if (m_dir)
    {
        delete m_dir;
        m_dir = NULL;
    }
    ;

    m_has_r = false;

    if (m_r)
    {
        delete m_r;
        m_r = NULL;
    }
    ;

    m_has_bdo = true;
    if (!m_bdo)
    {
        m_bdo = new CT_BdoContentRun();
    }
    return m_bdo;
}

const CT_BdoContentRun& CT_SmartTagRun::ChildGroup_1::get_bdo() const
{
    if (m_bdo)
    {
        return *m_bdo;
    }
    return CT_BdoContentRun::default_instance();
}

bool CT_SmartTagRun::ChildGroup_1::has_r() const
{
    return m_has_r;
}

CT_R* CT_SmartTagRun::ChildGroup_1::mutable_r()
{

    m_has_customXml = false;

    if (m_customXml)
    {
        delete m_customXml;
        m_customXml = NULL;
    }
    ;

    m_has_smartTag = false;

    if (m_smartTag)
    {
        delete m_smartTag;
        m_smartTag = NULL;
    }
    ;

    m_has_sdt = false;

    if (m_sdt)
    {
        delete m_sdt;
        m_sdt = NULL;
    }
    ;

    m_has_dir = false;

    if (m_dir)
    {
        delete m_dir;
        m_dir = NULL;
    }
    ;

    m_has_bdo = false;

    if (m_bdo)
    {
        delete m_bdo;
        m_bdo = NULL;
    }
    ;

    m_has_r = true;
    if (!m_r)
    {
        m_r = new CT_R();
    }
    return m_r;
}

const CT_R& CT_SmartTagRun::ChildGroup_1::get_r() const
{
    if (m_r)
    {
        return *m_r;
    }
    return CT_R::default_instance();
}


// CT_SmartTagRun::ChildGroup_2
CT_SmartTagRun::ChildGroup_2::ChildGroup_2()
    :m_has_proofErr(false),
     m_proofErr(NULL),
     m_has_permStart(false),
     m_permStart(NULL),
     m_has_permEnd(false),
     m_permEnd(NULL)
{
}
bool CT_SmartTagRun::ChildGroup_2::has_proofErr() const
{
    return m_has_proofErr;
}

CT_ProofErr* CT_SmartTagRun::ChildGroup_2::mutable_proofErr()
{

    m_has_permStart = false;

    if (m_permStart)
    {
        delete m_permStart;
        m_permStart = NULL;
    }
    ;

    m_has_permEnd = false;

    if (m_permEnd)
    {
        delete m_permEnd;
        m_permEnd = NULL;
    }
    ;

    m_has_proofErr = true;
    if (!m_proofErr)
    {
        m_proofErr = new CT_ProofErr();
    }
    return m_proofErr;
}

const CT_ProofErr& CT_SmartTagRun::ChildGroup_2::get_proofErr() const
{
    if (m_proofErr)
    {
        return *m_proofErr;
    }
    return CT_ProofErr::default_instance();
}

bool CT_SmartTagRun::ChildGroup_2::has_permStart() const
{
    return m_has_permStart;
}

CT_PermStart* CT_SmartTagRun::ChildGroup_2::mutable_permStart()
{

    m_has_proofErr = false;

    if (m_proofErr)
    {
        delete m_proofErr;
        m_proofErr = NULL;
    }
    ;

    m_has_permEnd = false;

    if (m_permEnd)
    {
        delete m_permEnd;
        m_permEnd = NULL;
    }
    ;

    m_has_permStart = true;
    if (!m_permStart)
    {
        m_permStart = new CT_PermStart();
    }
    return m_permStart;
}

const CT_PermStart& CT_SmartTagRun::ChildGroup_2::get_permStart() const
{
    if (m_permStart)
    {
        return *m_permStart;
    }
    return CT_PermStart::default_instance();
}

bool CT_SmartTagRun::ChildGroup_2::has_permEnd() const
{
    return m_has_permEnd;
}

CT_Perm* CT_SmartTagRun::ChildGroup_2::mutable_permEnd()
{

    m_has_proofErr = false;

    if (m_proofErr)
    {
        delete m_proofErr;
        m_proofErr = NULL;
    }
    ;

    m_has_permStart = false;

    if (m_permStart)
    {
        delete m_permStart;
        m_permStart = NULL;
    }
    ;

    m_has_permEnd = true;
    if (!m_permEnd)
    {
        m_permEnd = new CT_Perm();
    }
    return m_permEnd;
}

const CT_Perm& CT_SmartTagRun::ChildGroup_2::get_permEnd() const
{
    if (m_permEnd)
    {
        return *m_permEnd;
    }
    return CT_Perm::default_instance();
}


// CT_SmartTagRun::ChildGroup_3
CT_SmartTagRun::ChildGroup_3::ChildGroup_3()
    :m_has_bookmarkStart(false),
     m_bookmarkStart(NULL),
     m_has_bookmarkEnd(false),
     m_bookmarkEnd(NULL),
     m_has_moveFromRangeStart(false),
     m_moveFromRangeStart(NULL),
     m_has_moveFromRangeEnd(false),
     m_moveFromRangeEnd(NULL),
     m_has_moveToRangeStart(false),
     m_moveToRangeStart(NULL),
     m_has_moveToRangeEnd(false),
     m_moveToRangeEnd(NULL),
     m_has_commentRangeStart(false),
     m_commentRangeStart(NULL),
     m_has_commentRangeEnd(false),
     m_commentRangeEnd(NULL),
     m_has_customXmlInsRangeStart(false),
     m_customXmlInsRangeStart(NULL),
     m_has_customXmlInsRangeEnd(false),
     m_customXmlInsRangeEnd(NULL),
     m_has_customXmlDelRangeStart(false),
     m_customXmlDelRangeStart(NULL),
     m_has_customXmlDelRangeEnd(false),
     m_customXmlDelRangeEnd(NULL),
     m_has_customXmlMoveFromRangeStart(false),
     m_customXmlMoveFromRangeStart(NULL),
     m_has_customXmlMoveFromRangeEnd(false),
     m_customXmlMoveFromRangeEnd(NULL),
     m_has_customXmlMoveToRangeStart(false),
     m_customXmlMoveToRangeStart(NULL),
     m_has_customXmlMoveToRangeEnd(false),
     m_customXmlMoveToRangeEnd(NULL),
     m_has_ins(false),
     m_ins(NULL),
     m_has_del(false),
     m_del(NULL),
     m_has_moveFrom(false),
     m_moveFrom(NULL),
     m_has_moveTo(false),
     m_moveTo(NULL)
{
}
bool CT_SmartTagRun::ChildGroup_3::has_bookmarkStart() const
{
    return m_has_bookmarkStart;
}

CT_Bookmark* CT_SmartTagRun::ChildGroup_3::mutable_bookmarkStart()
{

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_bookmarkStart = true;
    if (!m_bookmarkStart)
    {
        m_bookmarkStart = new CT_Bookmark();
    }
    return m_bookmarkStart;
}

const CT_Bookmark& CT_SmartTagRun::ChildGroup_3::get_bookmarkStart() const
{
    if (m_bookmarkStart)
    {
        return *m_bookmarkStart;
    }
    return CT_Bookmark::default_instance();
}

bool CT_SmartTagRun::ChildGroup_3::has_bookmarkEnd() const
{
    return m_has_bookmarkEnd;
}

CT_MarkupRange* CT_SmartTagRun::ChildGroup_3::mutable_bookmarkEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_bookmarkEnd = true;
    if (!m_bookmarkEnd)
    {
        m_bookmarkEnd = new CT_MarkupRange();
    }
    return m_bookmarkEnd;
}

const CT_MarkupRange& CT_SmartTagRun::ChildGroup_3::get_bookmarkEnd() const
{
    if (m_bookmarkEnd)
    {
        return *m_bookmarkEnd;
    }
    return CT_MarkupRange::default_instance();
}

bool CT_SmartTagRun::ChildGroup_3::has_moveFromRangeStart() const
{
    return m_has_moveFromRangeStart;
}

CT_MoveBookmark* CT_SmartTagRun::ChildGroup_3::mutable_moveFromRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_moveFromRangeStart = true;
    if (!m_moveFromRangeStart)
    {
        m_moveFromRangeStart = new CT_MoveBookmark();
    }
    return m_moveFromRangeStart;
}

const CT_MoveBookmark& CT_SmartTagRun::ChildGroup_3::get_moveFromRangeStart() const
{
    if (m_moveFromRangeStart)
    {
        return *m_moveFromRangeStart;
    }
    return CT_MoveBookmark::default_instance();
}

bool CT_SmartTagRun::ChildGroup_3::has_moveFromRangeEnd() const
{
    return m_has_moveFromRangeEnd;
}

CT_MarkupRange* CT_SmartTagRun::ChildGroup_3::mutable_moveFromRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_moveFromRangeEnd = true;
    if (!m_moveFromRangeEnd)
    {
        m_moveFromRangeEnd = new CT_MarkupRange();
    }
    return m_moveFromRangeEnd;
}

const CT_MarkupRange& CT_SmartTagRun::ChildGroup_3::get_moveFromRangeEnd() const
{
    if (m_moveFromRangeEnd)
    {
        return *m_moveFromRangeEnd;
    }
    return CT_MarkupRange::default_instance();
}

bool CT_SmartTagRun::ChildGroup_3::has_moveToRangeStart() const
{
    return m_has_moveToRangeStart;
}

CT_MoveBookmark* CT_SmartTagRun::ChildGroup_3::mutable_moveToRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_moveToRangeStart = true;
    if (!m_moveToRangeStart)
    {
        m_moveToRangeStart = new CT_MoveBookmark();
    }
    return m_moveToRangeStart;
}

const CT_MoveBookmark& CT_SmartTagRun::ChildGroup_3::get_moveToRangeStart() const
{
    if (m_moveToRangeStart)
    {
        return *m_moveToRangeStart;
    }
    return CT_MoveBookmark::default_instance();
}

bool CT_SmartTagRun::ChildGroup_3::has_moveToRangeEnd() const
{
    return m_has_moveToRangeEnd;
}

CT_MarkupRange* CT_SmartTagRun::ChildGroup_3::mutable_moveToRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_moveToRangeEnd = true;
    if (!m_moveToRangeEnd)
    {
        m_moveToRangeEnd = new CT_MarkupRange();
    }
    return m_moveToRangeEnd;
}

const CT_MarkupRange& CT_SmartTagRun::ChildGroup_3::get_moveToRangeEnd() const
{
    if (m_moveToRangeEnd)
    {
        return *m_moveToRangeEnd;
    }
    return CT_MarkupRange::default_instance();
}

bool CT_SmartTagRun::ChildGroup_3::has_commentRangeStart() const
{
    return m_has_commentRangeStart;
}

CT_MarkupRange* CT_SmartTagRun::ChildGroup_3::mutable_commentRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_commentRangeStart = true;
    if (!m_commentRangeStart)
    {
        m_commentRangeStart = new CT_MarkupRange();
    }
    return m_commentRangeStart;
}

const CT_MarkupRange& CT_SmartTagRun::ChildGroup_3::get_commentRangeStart() const
{
    if (m_commentRangeStart)
    {
        return *m_commentRangeStart;
    }
    return CT_MarkupRange::default_instance();
}

bool CT_SmartTagRun::ChildGroup_3::has_commentRangeEnd() const
{
    return m_has_commentRangeEnd;
}

CT_MarkupRange* CT_SmartTagRun::ChildGroup_3::mutable_commentRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_commentRangeEnd = true;
    if (!m_commentRangeEnd)
    {
        m_commentRangeEnd = new CT_MarkupRange();
    }
    return m_commentRangeEnd;
}

const CT_MarkupRange& CT_SmartTagRun::ChildGroup_3::get_commentRangeEnd() const
{
    if (m_commentRangeEnd)
    {
        return *m_commentRangeEnd;
    }
    return CT_MarkupRange::default_instance();
}

bool CT_SmartTagRun::ChildGroup_3::has_customXmlInsRangeStart() const
{
    return m_has_customXmlInsRangeStart;
}

CT_TrackChange* CT_SmartTagRun::ChildGroup_3::mutable_customXmlInsRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = true;
    if (!m_customXmlInsRangeStart)
    {
        m_customXmlInsRangeStart = new CT_TrackChange();
    }
    return m_customXmlInsRangeStart;
}

const CT_TrackChange& CT_SmartTagRun::ChildGroup_3::get_customXmlInsRangeStart() const
{
    if (m_customXmlInsRangeStart)
    {
        return *m_customXmlInsRangeStart;
    }
    return CT_TrackChange::default_instance();
}

bool CT_SmartTagRun::ChildGroup_3::has_customXmlInsRangeEnd() const
{
    return m_has_customXmlInsRangeEnd;
}

CT_Markup* CT_SmartTagRun::ChildGroup_3::mutable_customXmlInsRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = true;
    if (!m_customXmlInsRangeEnd)
    {
        m_customXmlInsRangeEnd = new CT_Markup();
    }
    return m_customXmlInsRangeEnd;
}

const CT_Markup& CT_SmartTagRun::ChildGroup_3::get_customXmlInsRangeEnd() const
{
    if (m_customXmlInsRangeEnd)
    {
        return *m_customXmlInsRangeEnd;
    }
    return CT_Markup::default_instance();
}

bool CT_SmartTagRun::ChildGroup_3::has_customXmlDelRangeStart() const
{
    return m_has_customXmlDelRangeStart;
}

CT_TrackChange* CT_SmartTagRun::ChildGroup_3::mutable_customXmlDelRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = true;
    if (!m_customXmlDelRangeStart)
    {
        m_customXmlDelRangeStart = new CT_TrackChange();
    }
    return m_customXmlDelRangeStart;
}

const CT_TrackChange& CT_SmartTagRun::ChildGroup_3::get_customXmlDelRangeStart() const
{
    if (m_customXmlDelRangeStart)
    {
        return *m_customXmlDelRangeStart;
    }
    return CT_TrackChange::default_instance();
}

bool CT_SmartTagRun::ChildGroup_3::has_customXmlDelRangeEnd() const
{
    return m_has_customXmlDelRangeEnd;
}

CT_Markup* CT_SmartTagRun::ChildGroup_3::mutable_customXmlDelRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = true;
    if (!m_customXmlDelRangeEnd)
    {
        m_customXmlDelRangeEnd = new CT_Markup();
    }
    return m_customXmlDelRangeEnd;
}

const CT_Markup& CT_SmartTagRun::ChildGroup_3::get_customXmlDelRangeEnd() const
{
    if (m_customXmlDelRangeEnd)
    {
        return *m_customXmlDelRangeEnd;
    }
    return CT_Markup::default_instance();
}

bool CT_SmartTagRun::ChildGroup_3::has_customXmlMoveFromRangeStart() const
{
    return m_has_customXmlMoveFromRangeStart;
}

CT_TrackChange* CT_SmartTagRun::ChildGroup_3::mutable_customXmlMoveFromRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = true;
    if (!m_customXmlMoveFromRangeStart)
    {
        m_customXmlMoveFromRangeStart = new CT_TrackChange();
    }
    return m_customXmlMoveFromRangeStart;
}

const CT_TrackChange& CT_SmartTagRun::ChildGroup_3::get_customXmlMoveFromRangeStart() const
{
    if (m_customXmlMoveFromRangeStart)
    {
        return *m_customXmlMoveFromRangeStart;
    }
    return CT_TrackChange::default_instance();
}

bool CT_SmartTagRun::ChildGroup_3::has_customXmlMoveFromRangeEnd() const
{
    return m_has_customXmlMoveFromRangeEnd;
}

CT_Markup* CT_SmartTagRun::ChildGroup_3::mutable_customXmlMoveFromRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = true;
    if (!m_customXmlMoveFromRangeEnd)
    {
        m_customXmlMoveFromRangeEnd = new CT_Markup();
    }
    return m_customXmlMoveFromRangeEnd;
}

const CT_Markup& CT_SmartTagRun::ChildGroup_3::get_customXmlMoveFromRangeEnd() const
{
    if (m_customXmlMoveFromRangeEnd)
    {
        return *m_customXmlMoveFromRangeEnd;
    }
    return CT_Markup::default_instance();
}

bool CT_SmartTagRun::ChildGroup_3::has_customXmlMoveToRangeStart() const
{
    return m_has_customXmlMoveToRangeStart;
}

CT_TrackChange* CT_SmartTagRun::ChildGroup_3::mutable_customXmlMoveToRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = true;
    if (!m_customXmlMoveToRangeStart)
    {
        m_customXmlMoveToRangeStart = new CT_TrackChange();
    }
    return m_customXmlMoveToRangeStart;
}

const CT_TrackChange& CT_SmartTagRun::ChildGroup_3::get_customXmlMoveToRangeStart() const
{
    if (m_customXmlMoveToRangeStart)
    {
        return *m_customXmlMoveToRangeStart;
    }
    return CT_TrackChange::default_instance();
}

bool CT_SmartTagRun::ChildGroup_3::has_customXmlMoveToRangeEnd() const
{
    return m_has_customXmlMoveToRangeEnd;
}

CT_Markup* CT_SmartTagRun::ChildGroup_3::mutable_customXmlMoveToRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = true;
    if (!m_customXmlMoveToRangeEnd)
    {
        m_customXmlMoveToRangeEnd = new CT_Markup();
    }
    return m_customXmlMoveToRangeEnd;
}

const CT_Markup& CT_SmartTagRun::ChildGroup_3::get_customXmlMoveToRangeEnd() const
{
    if (m_customXmlMoveToRangeEnd)
    {
        return *m_customXmlMoveToRangeEnd;
    }
    return CT_Markup::default_instance();
}

bool CT_SmartTagRun::ChildGroup_3::has_ins() const
{
    return m_has_ins;
}

CT_RunTrackChange* CT_SmartTagRun::ChildGroup_3::mutable_ins()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_ins = true;
    if (!m_ins)
    {
        m_ins = new CT_RunTrackChange();
    }
    return m_ins;
}

const CT_RunTrackChange& CT_SmartTagRun::ChildGroup_3::get_ins() const
{
    if (m_ins)
    {
        return *m_ins;
    }
    return CT_RunTrackChange::default_instance();
}

bool CT_SmartTagRun::ChildGroup_3::has_del() const
{
    return m_has_del;
}

CT_RunTrackChange* CT_SmartTagRun::ChildGroup_3::mutable_del()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_del = true;
    if (!m_del)
    {
        m_del = new CT_RunTrackChange();
    }
    return m_del;
}

const CT_RunTrackChange& CT_SmartTagRun::ChildGroup_3::get_del() const
{
    if (m_del)
    {
        return *m_del;
    }
    return CT_RunTrackChange::default_instance();
}

bool CT_SmartTagRun::ChildGroup_3::has_moveFrom() const
{
    return m_has_moveFrom;
}

CT_RunTrackChange* CT_SmartTagRun::ChildGroup_3::mutable_moveFrom()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_moveFrom = true;
    if (!m_moveFrom)
    {
        m_moveFrom = new CT_RunTrackChange();
    }
    return m_moveFrom;
}

const CT_RunTrackChange& CT_SmartTagRun::ChildGroup_3::get_moveFrom() const
{
    if (m_moveFrom)
    {
        return *m_moveFrom;
    }
    return CT_RunTrackChange::default_instance();
}

bool CT_SmartTagRun::ChildGroup_3::has_moveTo() const
{
    return m_has_moveTo;
}

CT_RunTrackChange* CT_SmartTagRun::ChildGroup_3::mutable_moveTo()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = true;
    if (!m_moveTo)
    {
        m_moveTo = new CT_RunTrackChange();
    }
    return m_moveTo;
}

const CT_RunTrackChange& CT_SmartTagRun::ChildGroup_3::get_moveTo() const
{
    if (m_moveTo)
    {
        return *m_moveTo;
    }
    return CT_RunTrackChange::default_instance();
}


// CT_SmartTagRun::ChildGroup_4
CT_SmartTagRun::ChildGroup_4::ChildGroup_4()
    :m_has_m_oMathPara(false),
     m_m_oMathPara(NULL),
     m_has_m_oMath(false),
     m_m_oMath(NULL),
     m_has_fldSimple(false),
     m_fldSimple(NULL),
     m_has_hyperlink(false),
     m_hyperlink(NULL),
     m_has_subDoc(false),
     m_subDoc(NULL)
{
}
bool CT_SmartTagRun::ChildGroup_4::has_m_oMathPara() const
{
    return m_has_m_oMathPara;
}

ns_m::CT_OMathPara* CT_SmartTagRun::ChildGroup_4::mutable_m_oMathPara()
{

    m_has_m_oMath = false;

    if (m_m_oMath)
    {
        delete m_m_oMath;
        m_m_oMath = NULL;
    }
    ;

    m_has_fldSimple = false;

    if (m_fldSimple)
    {
        delete m_fldSimple;
        m_fldSimple = NULL;
    }
    ;

    m_has_hyperlink = false;

    if (m_hyperlink)
    {
        delete m_hyperlink;
        m_hyperlink = NULL;
    }
    ;

    m_has_subDoc = false;

    if (m_subDoc)
    {
        delete m_subDoc;
        m_subDoc = NULL;
    }
    ;

    m_has_m_oMathPara = true;
    if (!m_m_oMathPara)
    {
        m_m_oMathPara = new ns_m::CT_OMathPara();
    }
    return m_m_oMathPara;
}

const ns_m::CT_OMathPara& CT_SmartTagRun::ChildGroup_4::get_m_oMathPara() const
{
    if (m_m_oMathPara)
    {
        return *m_m_oMathPara;
    }
    return ns_m::CT_OMathPara::default_instance();
}

bool CT_SmartTagRun::ChildGroup_4::has_m_oMath() const
{
    return m_has_m_oMath;
}

ns_m::CT_OMath* CT_SmartTagRun::ChildGroup_4::mutable_m_oMath()
{

    m_has_m_oMathPara = false;

    if (m_m_oMathPara)
    {
        delete m_m_oMathPara;
        m_m_oMathPara = NULL;
    }
    ;

    m_has_fldSimple = false;

    if (m_fldSimple)
    {
        delete m_fldSimple;
        m_fldSimple = NULL;
    }
    ;

    m_has_hyperlink = false;

    if (m_hyperlink)
    {
        delete m_hyperlink;
        m_hyperlink = NULL;
    }
    ;

    m_has_subDoc = false;

    if (m_subDoc)
    {
        delete m_subDoc;
        m_subDoc = NULL;
    }
    ;

    m_has_m_oMath = true;
    if (!m_m_oMath)
    {
        m_m_oMath = new ns_m::CT_OMath();
    }
    return m_m_oMath;
}

const ns_m::CT_OMath& CT_SmartTagRun::ChildGroup_4::get_m_oMath() const
{
    if (m_m_oMath)
    {
        return *m_m_oMath;
    }
    return ns_m::CT_OMath::default_instance();
}

bool CT_SmartTagRun::ChildGroup_4::has_fldSimple() const
{
    return m_has_fldSimple;
}

CT_SimpleField* CT_SmartTagRun::ChildGroup_4::mutable_fldSimple()
{

    m_has_m_oMathPara = false;

    if (m_m_oMathPara)
    {
        delete m_m_oMathPara;
        m_m_oMathPara = NULL;
    }
    ;

    m_has_m_oMath = false;

    if (m_m_oMath)
    {
        delete m_m_oMath;
        m_m_oMath = NULL;
    }
    ;

    m_has_hyperlink = false;

    if (m_hyperlink)
    {
        delete m_hyperlink;
        m_hyperlink = NULL;
    }
    ;

    m_has_subDoc = false;

    if (m_subDoc)
    {
        delete m_subDoc;
        m_subDoc = NULL;
    }
    ;

    m_has_fldSimple = true;
    if (!m_fldSimple)
    {
        m_fldSimple = new CT_SimpleField();
    }
    return m_fldSimple;
}

const CT_SimpleField& CT_SmartTagRun::ChildGroup_4::get_fldSimple() const
{
    if (m_fldSimple)
    {
        return *m_fldSimple;
    }
    return CT_SimpleField::default_instance();
}

bool CT_SmartTagRun::ChildGroup_4::has_hyperlink() const
{
    return m_has_hyperlink;
}

CT_Hyperlink* CT_SmartTagRun::ChildGroup_4::mutable_hyperlink()
{

    m_has_m_oMathPara = false;

    if (m_m_oMathPara)
    {
        delete m_m_oMathPara;
        m_m_oMathPara = NULL;
    }
    ;

    m_has_m_oMath = false;

    if (m_m_oMath)
    {
        delete m_m_oMath;
        m_m_oMath = NULL;
    }
    ;

    m_has_fldSimple = false;

    if (m_fldSimple)
    {
        delete m_fldSimple;
        m_fldSimple = NULL;
    }
    ;

    m_has_subDoc = false;

    if (m_subDoc)
    {
        delete m_subDoc;
        m_subDoc = NULL;
    }
    ;

    m_has_hyperlink = true;
    if (!m_hyperlink)
    {
        m_hyperlink = new CT_Hyperlink();
    }
    return m_hyperlink;
}

const CT_Hyperlink& CT_SmartTagRun::ChildGroup_4::get_hyperlink() const
{
    if (m_hyperlink)
    {
        return *m_hyperlink;
    }
    return CT_Hyperlink::default_instance();
}

bool CT_SmartTagRun::ChildGroup_4::has_subDoc() const
{
    return m_has_subDoc;
}

CT_Rel* CT_SmartTagRun::ChildGroup_4::mutable_subDoc()
{

    m_has_m_oMathPara = false;

    if (m_m_oMathPara)
    {
        delete m_m_oMathPara;
        m_m_oMathPara = NULL;
    }
    ;

    m_has_m_oMath = false;

    if (m_m_oMath)
    {
        delete m_m_oMath;
        m_m_oMath = NULL;
    }
    ;

    m_has_fldSimple = false;

    if (m_fldSimple)
    {
        delete m_fldSimple;
        m_fldSimple = NULL;
    }
    ;

    m_has_hyperlink = false;

    if (m_hyperlink)
    {
        delete m_hyperlink;
        m_hyperlink = NULL;
    }
    ;

    m_has_subDoc = true;
    if (!m_subDoc)
    {
        m_subDoc = new CT_Rel();
    }
    return m_subDoc;
}

const CT_Rel& CT_SmartTagRun::ChildGroup_4::get_subDoc() const
{
    if (m_subDoc)
    {
        return *m_subDoc;
    }
    return CT_Rel::default_instance();
}

CT_SmartTagRun* CT_SmartTagRun::default_instance_ = NULL;

// CT_CustomXmlBlock
CT_CustomXmlBlock::CT_CustomXmlBlock()
    :m_has_customXmlPr(false),
     m_customXmlPr(NULL),
     m_has_uri_attr(false),
     m_uri_attr(NULL),
     m_has_element_attr(false),
     m_element_attr(NULL)
{
}
CT_CustomXmlBlock::~CT_CustomXmlBlock()
{
    clear();
}
bool CT_CustomXmlBlock::has_customXmlPr() const
{
    return m_has_customXmlPr;
}

CT_CustomXmlPr* CT_CustomXmlBlock::mutable_customXmlPr()
{
    m_has_customXmlPr = true;
    if (!m_customXmlPr)
    {
        m_customXmlPr = new CT_CustomXmlPr();
    }
    return m_customXmlPr;
}

const CT_CustomXmlPr& CT_CustomXmlBlock::get_customXmlPr() const
{
    if (m_customXmlPr)
    {
        return *m_customXmlPr;
    }
    return CT_CustomXmlPr::default_instance();
}

CT_CustomXmlBlock* CT_CustomXmlBlock::add_customXml()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_CustomXmlBlock* pNewChild = pChildGroup->mutable_customXml();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_SdtBlock* CT_CustomXmlBlock::add_sdt()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_SdtBlock* pNewChild = pChildGroup->mutable_sdt();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_P* CT_CustomXmlBlock::add_p()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_P* pNewChild = pChildGroup->mutable_p();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_Tbl* CT_CustomXmlBlock::add_tbl()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Tbl* pNewChild = pChildGroup->mutable_tbl();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_ProofErr* CT_CustomXmlBlock::add_proofErr()
{
    ChildGroup_2 *pChildGroup = new ChildGroup_2();
    CT_ProofErr* pNewChild = pChildGroup->mutable_proofErr();
    m_childGroupList_2.push_back(pChildGroup);
    return pNewChild;
}

CT_PermStart* CT_CustomXmlBlock::add_permStart()
{
    ChildGroup_2 *pChildGroup = new ChildGroup_2();
    CT_PermStart* pNewChild = pChildGroup->mutable_permStart();
    m_childGroupList_2.push_back(pChildGroup);
    return pNewChild;
}

CT_Perm* CT_CustomXmlBlock::add_permEnd()
{
    ChildGroup_2 *pChildGroup = new ChildGroup_2();
    CT_Perm* pNewChild = pChildGroup->mutable_permEnd();
    m_childGroupList_2.push_back(pChildGroup);
    return pNewChild;
}

CT_Bookmark* CT_CustomXmlBlock::add_bookmarkStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_Bookmark* pNewChild = pChildGroup->mutable_bookmarkStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MarkupRange* CT_CustomXmlBlock::add_bookmarkEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MarkupRange* pNewChild = pChildGroup->mutable_bookmarkEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MoveBookmark* CT_CustomXmlBlock::add_moveFromRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MoveBookmark* pNewChild = pChildGroup->mutable_moveFromRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MarkupRange* CT_CustomXmlBlock::add_moveFromRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MarkupRange* pNewChild = pChildGroup->mutable_moveFromRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MoveBookmark* CT_CustomXmlBlock::add_moveToRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MoveBookmark* pNewChild = pChildGroup->mutable_moveToRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MarkupRange* CT_CustomXmlBlock::add_moveToRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MarkupRange* pNewChild = pChildGroup->mutable_moveToRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MarkupRange* CT_CustomXmlBlock::add_commentRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MarkupRange* pNewChild = pChildGroup->mutable_commentRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MarkupRange* CT_CustomXmlBlock::add_commentRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MarkupRange* pNewChild = pChildGroup->mutable_commentRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_TrackChange* CT_CustomXmlBlock::add_customXmlInsRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_TrackChange* pNewChild = pChildGroup->mutable_customXmlInsRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_Markup* CT_CustomXmlBlock::add_customXmlInsRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_Markup* pNewChild = pChildGroup->mutable_customXmlInsRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_TrackChange* CT_CustomXmlBlock::add_customXmlDelRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_TrackChange* pNewChild = pChildGroup->mutable_customXmlDelRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_Markup* CT_CustomXmlBlock::add_customXmlDelRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_Markup* pNewChild = pChildGroup->mutable_customXmlDelRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_TrackChange* CT_CustomXmlBlock::add_customXmlMoveFromRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_TrackChange* pNewChild = pChildGroup->mutable_customXmlMoveFromRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_Markup* CT_CustomXmlBlock::add_customXmlMoveFromRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_Markup* pNewChild = pChildGroup->mutable_customXmlMoveFromRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_TrackChange* CT_CustomXmlBlock::add_customXmlMoveToRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_TrackChange* pNewChild = pChildGroup->mutable_customXmlMoveToRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_Markup* CT_CustomXmlBlock::add_customXmlMoveToRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_Markup* pNewChild = pChildGroup->mutable_customXmlMoveToRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_RunTrackChange* CT_CustomXmlBlock::add_ins()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_RunTrackChange* pNewChild = pChildGroup->mutable_ins();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_RunTrackChange* CT_CustomXmlBlock::add_del()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_RunTrackChange* pNewChild = pChildGroup->mutable_del();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_RunTrackChange* CT_CustomXmlBlock::add_moveFrom()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_RunTrackChange* pNewChild = pChildGroup->mutable_moveFrom();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_RunTrackChange* CT_CustomXmlBlock::add_moveTo()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_RunTrackChange* pNewChild = pChildGroup->mutable_moveTo();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

ns_m::CT_OMathPara* CT_CustomXmlBlock::add_m_oMathPara()
{
    ChildGroup_4 *pChildGroup = new ChildGroup_4();
    ns_m::CT_OMathPara* pNewChild = pChildGroup->mutable_m_oMathPara();
    m_childGroupList_4.push_back(pChildGroup);
    return pNewChild;
}

ns_m::CT_OMath* CT_CustomXmlBlock::add_m_oMath()
{
    ChildGroup_4 *pChildGroup = new ChildGroup_4();
    ns_m::CT_OMath* pNewChild = pChildGroup->mutable_m_oMath();
    m_childGroupList_4.push_back(pChildGroup);
    return pNewChild;
}

void CT_CustomXmlBlock::clear()
{
    m_has_uri_attr = false;

    if (m_uri_attr)
    {
        delete m_uri_attr;
        m_uri_attr = NULL;
    }


    m_has_element_attr = false;

    if (m_element_attr)
    {
        delete m_element_attr;
        m_element_attr = NULL;
    }


    m_has_customXmlPr = false;

    if (m_customXmlPr)
    {
        delete m_customXmlPr;
        m_customXmlPr = NULL;
    }


    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }

    {
        vector<ChildGroup_2*>::iterator iter;
        for (iter = m_childGroupList_2.begin(); iter != m_childGroupList_2.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_2.clear();
    }

    {
        vector<ChildGroup_3*>::iterator iter;
        for (iter = m_childGroupList_3.begin(); iter != m_childGroupList_3.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_3.clear();
    }

    {
        vector<ChildGroup_4*>::iterator iter;
        for (iter = m_childGroupList_4.begin(); iter != m_childGroupList_4.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_4.clear();
    }
}

void CT_CustomXmlBlock::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_uri_attr)
    {
        m_uri_attr->toXmlAttr("w:uri", _outStream);
    }


    assert(m_has_element_attr);
    if (m_has_element_attr)
    {
        m_element_attr->toXmlAttr("w:element", _outStream);
    }

    _outStream << ">";


    if (m_has_customXmlPr)
    {
        m_customXmlPr->toXmlElem("w:customXmlPr", "", _outStream);
    }

    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_customXml())
            {
                (*iter)->get_customXml().toXmlElem("w:customXml", "", _outStream);
            }


            else if ((*iter)->has_sdt())
            {
                (*iter)->get_sdt().toXmlElem("w:sdt", "", _outStream);
            }


            else if ((*iter)->has_p())
            {
                (*iter)->get_p().toXmlElem("w:p", "", _outStream);
            }


            else if ((*iter)->has_tbl())
            {
                (*iter)->get_tbl().toXmlElem("w:tbl", "", _outStream);
            }


        }
    }

    {
        vector<ChildGroup_2*>::const_iterator iter;
        for (iter = m_childGroupList_2.begin(); iter != m_childGroupList_2.end(); ++iter)
        {
            if ((*iter)->has_proofErr())
            {
                (*iter)->get_proofErr().toXmlElem("w:proofErr", "", _outStream);
            }


            else if ((*iter)->has_permStart())
            {
                (*iter)->get_permStart().toXmlElem("w:permStart", "", _outStream);
            }


            else if ((*iter)->has_permEnd())
            {
                (*iter)->get_permEnd().toXmlElem("w:permEnd", "", _outStream);
            }


        }
    }

    {
        vector<ChildGroup_3*>::const_iterator iter;
        for (iter = m_childGroupList_3.begin(); iter != m_childGroupList_3.end(); ++iter)
        {
            if ((*iter)->has_bookmarkStart())
            {
                (*iter)->get_bookmarkStart().toXmlElem("w:bookmarkStart", "", _outStream);
            }


            else if ((*iter)->has_bookmarkEnd())
            {
                (*iter)->get_bookmarkEnd().toXmlElem("w:bookmarkEnd", "", _outStream);
            }


            else if ((*iter)->has_moveFromRangeStart())
            {
                (*iter)->get_moveFromRangeStart().toXmlElem("w:moveFromRangeStart", "", _outStream);
            }


            else if ((*iter)->has_moveFromRangeEnd())
            {
                (*iter)->get_moveFromRangeEnd().toXmlElem("w:moveFromRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_moveToRangeStart())
            {
                (*iter)->get_moveToRangeStart().toXmlElem("w:moveToRangeStart", "", _outStream);
            }


            else if ((*iter)->has_moveToRangeEnd())
            {
                (*iter)->get_moveToRangeEnd().toXmlElem("w:moveToRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_commentRangeStart())
            {
                (*iter)->get_commentRangeStart().toXmlElem("w:commentRangeStart", "", _outStream);
            }


            else if ((*iter)->has_commentRangeEnd())
            {
                (*iter)->get_commentRangeEnd().toXmlElem("w:commentRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_customXmlInsRangeStart())
            {
                (*iter)->get_customXmlInsRangeStart().toXmlElem("w:customXmlInsRangeStart", "", _outStream);
            }


            else if ((*iter)->has_customXmlInsRangeEnd())
            {
                (*iter)->get_customXmlInsRangeEnd().toXmlElem("w:customXmlInsRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_customXmlDelRangeStart())
            {
                (*iter)->get_customXmlDelRangeStart().toXmlElem("w:customXmlDelRangeStart", "", _outStream);
            }


            else if ((*iter)->has_customXmlDelRangeEnd())
            {
                (*iter)->get_customXmlDelRangeEnd().toXmlElem("w:customXmlDelRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_customXmlMoveFromRangeStart())
            {
                (*iter)->get_customXmlMoveFromRangeStart().toXmlElem("w:customXmlMoveFromRangeStart", "", _outStream);
            }


            else if ((*iter)->has_customXmlMoveFromRangeEnd())
            {
                (*iter)->get_customXmlMoveFromRangeEnd().toXmlElem("w:customXmlMoveFromRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_customXmlMoveToRangeStart())
            {
                (*iter)->get_customXmlMoveToRangeStart().toXmlElem("w:customXmlMoveToRangeStart", "", _outStream);
            }


            else if ((*iter)->has_customXmlMoveToRangeEnd())
            {
                (*iter)->get_customXmlMoveToRangeEnd().toXmlElem("w:customXmlMoveToRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_ins())
            {
                (*iter)->get_ins().toXmlElem("w:ins", "", _outStream);
            }


            else if ((*iter)->has_del())
            {
                (*iter)->get_del().toXmlElem("w:del", "", _outStream);
            }


            else if ((*iter)->has_moveFrom())
            {
                (*iter)->get_moveFrom().toXmlElem("w:moveFrom", "", _outStream);
            }


            else if ((*iter)->has_moveTo())
            {
                (*iter)->get_moveTo().toXmlElem("w:moveTo", "", _outStream);
            }


        }
    }

    {
        vector<ChildGroup_4*>::const_iterator iter;
        for (iter = m_childGroupList_4.begin(); iter != m_childGroupList_4.end(); ++iter)
        {
            if ((*iter)->has_m_oMathPara())
            {
                (*iter)->get_m_oMathPara().toXmlElem("m:oMathPara", "", _outStream);
            }


            else if ((*iter)->has_m_oMath())
            {
                (*iter)->get_m_oMath().toXmlElem("m:oMath", "", _outStream);
            }


        }
    }

    _outStream << "</" << _elemName << ">";
}

const CT_CustomXmlBlock& CT_CustomXmlBlock::default_instance()
{
    if (!CT_CustomXmlBlock::default_instance_)
    {
        CT_CustomXmlBlock::default_instance_ = new CT_CustomXmlBlock();
    }
    return *CT_CustomXmlBlock::default_instance_;
}

bool CT_CustomXmlBlock::has_uri_attr() const
{
    return m_has_uri_attr;
}

void CT_CustomXmlBlock::set_uri_attr(const ns_s::ST_String& _uri_attr)
{
    m_has_uri_attr = true;
    m_uri_attr = new ns_s::ST_String(_uri_attr);
}

const ns_s::ST_String& CT_CustomXmlBlock::get_uri_attr() const
{
    if (m_uri_attr)
    {
        return *m_uri_attr;
    }
    return ns_s::ST_String::default_instance();
}

bool CT_CustomXmlBlock::has_element_attr() const
{
    return m_has_element_attr;
}

void CT_CustomXmlBlock::set_element_attr(const ns_s::ST_XmlName& _element_attr)
{
    m_has_element_attr = true;
    m_element_attr = new ns_s::ST_XmlName(_element_attr);
}

const ns_s::ST_XmlName& CT_CustomXmlBlock::get_element_attr() const
{
    if (m_element_attr)
    {
        return *m_element_attr;
    }
    return ns_s::ST_XmlName::default_instance();
}


// CT_CustomXmlBlock::ChildGroup_1
CT_CustomXmlBlock::ChildGroup_1::ChildGroup_1()
    :m_has_customXml(false),
     m_customXml(NULL),
     m_has_sdt(false),
     m_sdt(NULL),
     m_has_p(false),
     m_p(NULL),
     m_has_tbl(false),
     m_tbl(NULL)
{
}
bool CT_CustomXmlBlock::ChildGroup_1::has_customXml() const
{
    return m_has_customXml;
}

CT_CustomXmlBlock* CT_CustomXmlBlock::ChildGroup_1::mutable_customXml()
{

    m_has_sdt = false;

    if (m_sdt)
    {
        delete m_sdt;
        m_sdt = NULL;
    }
    ;

    m_has_p = false;

    if (m_p)
    {
        delete m_p;
        m_p = NULL;
    }
    ;

    m_has_tbl = false;

    if (m_tbl)
    {
        delete m_tbl;
        m_tbl = NULL;
    }
    ;

    m_has_customXml = true;
    if (!m_customXml)
    {
        m_customXml = new CT_CustomXmlBlock();
    }
    return m_customXml;
}

const CT_CustomXmlBlock& CT_CustomXmlBlock::ChildGroup_1::get_customXml() const
{
    if (m_customXml)
    {
        return *m_customXml;
    }
    return CT_CustomXmlBlock::default_instance();
}

bool CT_CustomXmlBlock::ChildGroup_1::has_sdt() const
{
    return m_has_sdt;
}

CT_SdtBlock* CT_CustomXmlBlock::ChildGroup_1::mutable_sdt()
{

    m_has_customXml = false;

    if (m_customXml)
    {
        delete m_customXml;
        m_customXml = NULL;
    }
    ;

    m_has_p = false;

    if (m_p)
    {
        delete m_p;
        m_p = NULL;
    }
    ;

    m_has_tbl = false;

    if (m_tbl)
    {
        delete m_tbl;
        m_tbl = NULL;
    }
    ;

    m_has_sdt = true;
    if (!m_sdt)
    {
        m_sdt = new CT_SdtBlock();
    }
    return m_sdt;
}

const CT_SdtBlock& CT_CustomXmlBlock::ChildGroup_1::get_sdt() const
{
    if (m_sdt)
    {
        return *m_sdt;
    }
    return CT_SdtBlock::default_instance();
}

bool CT_CustomXmlBlock::ChildGroup_1::has_p() const
{
    return m_has_p;
}

CT_P* CT_CustomXmlBlock::ChildGroup_1::mutable_p()
{

    m_has_customXml = false;

    if (m_customXml)
    {
        delete m_customXml;
        m_customXml = NULL;
    }
    ;

    m_has_sdt = false;

    if (m_sdt)
    {
        delete m_sdt;
        m_sdt = NULL;
    }
    ;

    m_has_tbl = false;

    if (m_tbl)
    {
        delete m_tbl;
        m_tbl = NULL;
    }
    ;

    m_has_p = true;
    if (!m_p)
    {
        m_p = new CT_P();
    }
    return m_p;
}

const CT_P& CT_CustomXmlBlock::ChildGroup_1::get_p() const
{
    if (m_p)
    {
        return *m_p;
    }
    return CT_P::default_instance();
}

bool CT_CustomXmlBlock::ChildGroup_1::has_tbl() const
{
    return m_has_tbl;
}

CT_Tbl* CT_CustomXmlBlock::ChildGroup_1::mutable_tbl()
{

    m_has_customXml = false;

    if (m_customXml)
    {
        delete m_customXml;
        m_customXml = NULL;
    }
    ;

    m_has_sdt = false;

    if (m_sdt)
    {
        delete m_sdt;
        m_sdt = NULL;
    }
    ;

    m_has_p = false;

    if (m_p)
    {
        delete m_p;
        m_p = NULL;
    }
    ;

    m_has_tbl = true;
    if (!m_tbl)
    {
        m_tbl = new CT_Tbl();
    }
    return m_tbl;
}

const CT_Tbl& CT_CustomXmlBlock::ChildGroup_1::get_tbl() const
{
    if (m_tbl)
    {
        return *m_tbl;
    }
    return CT_Tbl::default_instance();
}


// CT_CustomXmlBlock::ChildGroup_2
CT_CustomXmlBlock::ChildGroup_2::ChildGroup_2()
    :m_has_proofErr(false),
     m_proofErr(NULL),
     m_has_permStart(false),
     m_permStart(NULL),
     m_has_permEnd(false),
     m_permEnd(NULL)
{
}
bool CT_CustomXmlBlock::ChildGroup_2::has_proofErr() const
{
    return m_has_proofErr;
}

CT_ProofErr* CT_CustomXmlBlock::ChildGroup_2::mutable_proofErr()
{

    m_has_permStart = false;

    if (m_permStart)
    {
        delete m_permStart;
        m_permStart = NULL;
    }
    ;

    m_has_permEnd = false;

    if (m_permEnd)
    {
        delete m_permEnd;
        m_permEnd = NULL;
    }
    ;

    m_has_proofErr = true;
    if (!m_proofErr)
    {
        m_proofErr = new CT_ProofErr();
    }
    return m_proofErr;
}

const CT_ProofErr& CT_CustomXmlBlock::ChildGroup_2::get_proofErr() const
{
    if (m_proofErr)
    {
        return *m_proofErr;
    }
    return CT_ProofErr::default_instance();
}

bool CT_CustomXmlBlock::ChildGroup_2::has_permStart() const
{
    return m_has_permStart;
}

CT_PermStart* CT_CustomXmlBlock::ChildGroup_2::mutable_permStart()
{

    m_has_proofErr = false;

    if (m_proofErr)
    {
        delete m_proofErr;
        m_proofErr = NULL;
    }
    ;

    m_has_permEnd = false;

    if (m_permEnd)
    {
        delete m_permEnd;
        m_permEnd = NULL;
    }
    ;

    m_has_permStart = true;
    if (!m_permStart)
    {
        m_permStart = new CT_PermStart();
    }
    return m_permStart;
}

const CT_PermStart& CT_CustomXmlBlock::ChildGroup_2::get_permStart() const
{
    if (m_permStart)
    {
        return *m_permStart;
    }
    return CT_PermStart::default_instance();
}

bool CT_CustomXmlBlock::ChildGroup_2::has_permEnd() const
{
    return m_has_permEnd;
}

CT_Perm* CT_CustomXmlBlock::ChildGroup_2::mutable_permEnd()
{

    m_has_proofErr = false;

    if (m_proofErr)
    {
        delete m_proofErr;
        m_proofErr = NULL;
    }
    ;

    m_has_permStart = false;

    if (m_permStart)
    {
        delete m_permStart;
        m_permStart = NULL;
    }
    ;

    m_has_permEnd = true;
    if (!m_permEnd)
    {
        m_permEnd = new CT_Perm();
    }
    return m_permEnd;
}

const CT_Perm& CT_CustomXmlBlock::ChildGroup_2::get_permEnd() const
{
    if (m_permEnd)
    {
        return *m_permEnd;
    }
    return CT_Perm::default_instance();
}


// CT_CustomXmlBlock::ChildGroup_3
CT_CustomXmlBlock::ChildGroup_3::ChildGroup_3()
    :m_has_bookmarkStart(false),
     m_bookmarkStart(NULL),
     m_has_bookmarkEnd(false),
     m_bookmarkEnd(NULL),
     m_has_moveFromRangeStart(false),
     m_moveFromRangeStart(NULL),
     m_has_moveFromRangeEnd(false),
     m_moveFromRangeEnd(NULL),
     m_has_moveToRangeStart(false),
     m_moveToRangeStart(NULL),
     m_has_moveToRangeEnd(false),
     m_moveToRangeEnd(NULL),
     m_has_commentRangeStart(false),
     m_commentRangeStart(NULL),
     m_has_commentRangeEnd(false),
     m_commentRangeEnd(NULL),
     m_has_customXmlInsRangeStart(false),
     m_customXmlInsRangeStart(NULL),
     m_has_customXmlInsRangeEnd(false),
     m_customXmlInsRangeEnd(NULL),
     m_has_customXmlDelRangeStart(false),
     m_customXmlDelRangeStart(NULL),
     m_has_customXmlDelRangeEnd(false),
     m_customXmlDelRangeEnd(NULL),
     m_has_customXmlMoveFromRangeStart(false),
     m_customXmlMoveFromRangeStart(NULL),
     m_has_customXmlMoveFromRangeEnd(false),
     m_customXmlMoveFromRangeEnd(NULL),
     m_has_customXmlMoveToRangeStart(false),
     m_customXmlMoveToRangeStart(NULL),
     m_has_customXmlMoveToRangeEnd(false),
     m_customXmlMoveToRangeEnd(NULL),
     m_has_ins(false),
     m_ins(NULL),
     m_has_del(false),
     m_del(NULL),
     m_has_moveFrom(false),
     m_moveFrom(NULL),
     m_has_moveTo(false),
     m_moveTo(NULL)
{
}
bool CT_CustomXmlBlock::ChildGroup_3::has_bookmarkStart() const
{
    return m_has_bookmarkStart;
}

CT_Bookmark* CT_CustomXmlBlock::ChildGroup_3::mutable_bookmarkStart()
{

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_bookmarkStart = true;
    if (!m_bookmarkStart)
    {
        m_bookmarkStart = new CT_Bookmark();
    }
    return m_bookmarkStart;
}

const CT_Bookmark& CT_CustomXmlBlock::ChildGroup_3::get_bookmarkStart() const
{
    if (m_bookmarkStart)
    {
        return *m_bookmarkStart;
    }
    return CT_Bookmark::default_instance();
}

bool CT_CustomXmlBlock::ChildGroup_3::has_bookmarkEnd() const
{
    return m_has_bookmarkEnd;
}

CT_MarkupRange* CT_CustomXmlBlock::ChildGroup_3::mutable_bookmarkEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_bookmarkEnd = true;
    if (!m_bookmarkEnd)
    {
        m_bookmarkEnd = new CT_MarkupRange();
    }
    return m_bookmarkEnd;
}

const CT_MarkupRange& CT_CustomXmlBlock::ChildGroup_3::get_bookmarkEnd() const
{
    if (m_bookmarkEnd)
    {
        return *m_bookmarkEnd;
    }
    return CT_MarkupRange::default_instance();
}

bool CT_CustomXmlBlock::ChildGroup_3::has_moveFromRangeStart() const
{
    return m_has_moveFromRangeStart;
}

CT_MoveBookmark* CT_CustomXmlBlock::ChildGroup_3::mutable_moveFromRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_moveFromRangeStart = true;
    if (!m_moveFromRangeStart)
    {
        m_moveFromRangeStart = new CT_MoveBookmark();
    }
    return m_moveFromRangeStart;
}

const CT_MoveBookmark& CT_CustomXmlBlock::ChildGroup_3::get_moveFromRangeStart() const
{
    if (m_moveFromRangeStart)
    {
        return *m_moveFromRangeStart;
    }
    return CT_MoveBookmark::default_instance();
}

bool CT_CustomXmlBlock::ChildGroup_3::has_moveFromRangeEnd() const
{
    return m_has_moveFromRangeEnd;
}

CT_MarkupRange* CT_CustomXmlBlock::ChildGroup_3::mutable_moveFromRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_moveFromRangeEnd = true;
    if (!m_moveFromRangeEnd)
    {
        m_moveFromRangeEnd = new CT_MarkupRange();
    }
    return m_moveFromRangeEnd;
}

const CT_MarkupRange& CT_CustomXmlBlock::ChildGroup_3::get_moveFromRangeEnd() const
{
    if (m_moveFromRangeEnd)
    {
        return *m_moveFromRangeEnd;
    }
    return CT_MarkupRange::default_instance();
}

bool CT_CustomXmlBlock::ChildGroup_3::has_moveToRangeStart() const
{
    return m_has_moveToRangeStart;
}

CT_MoveBookmark* CT_CustomXmlBlock::ChildGroup_3::mutable_moveToRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_moveToRangeStart = true;
    if (!m_moveToRangeStart)
    {
        m_moveToRangeStart = new CT_MoveBookmark();
    }
    return m_moveToRangeStart;
}

const CT_MoveBookmark& CT_CustomXmlBlock::ChildGroup_3::get_moveToRangeStart() const
{
    if (m_moveToRangeStart)
    {
        return *m_moveToRangeStart;
    }
    return CT_MoveBookmark::default_instance();
}

bool CT_CustomXmlBlock::ChildGroup_3::has_moveToRangeEnd() const
{
    return m_has_moveToRangeEnd;
}

CT_MarkupRange* CT_CustomXmlBlock::ChildGroup_3::mutable_moveToRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_moveToRangeEnd = true;
    if (!m_moveToRangeEnd)
    {
        m_moveToRangeEnd = new CT_MarkupRange();
    }
    return m_moveToRangeEnd;
}

const CT_MarkupRange& CT_CustomXmlBlock::ChildGroup_3::get_moveToRangeEnd() const
{
    if (m_moveToRangeEnd)
    {
        return *m_moveToRangeEnd;
    }
    return CT_MarkupRange::default_instance();
}

bool CT_CustomXmlBlock::ChildGroup_3::has_commentRangeStart() const
{
    return m_has_commentRangeStart;
}

CT_MarkupRange* CT_CustomXmlBlock::ChildGroup_3::mutable_commentRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_commentRangeStart = true;
    if (!m_commentRangeStart)
    {
        m_commentRangeStart = new CT_MarkupRange();
    }
    return m_commentRangeStart;
}

const CT_MarkupRange& CT_CustomXmlBlock::ChildGroup_3::get_commentRangeStart() const
{
    if (m_commentRangeStart)
    {
        return *m_commentRangeStart;
    }
    return CT_MarkupRange::default_instance();
}

bool CT_CustomXmlBlock::ChildGroup_3::has_commentRangeEnd() const
{
    return m_has_commentRangeEnd;
}

CT_MarkupRange* CT_CustomXmlBlock::ChildGroup_3::mutable_commentRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_commentRangeEnd = true;
    if (!m_commentRangeEnd)
    {
        m_commentRangeEnd = new CT_MarkupRange();
    }
    return m_commentRangeEnd;
}

const CT_MarkupRange& CT_CustomXmlBlock::ChildGroup_3::get_commentRangeEnd() const
{
    if (m_commentRangeEnd)
    {
        return *m_commentRangeEnd;
    }
    return CT_MarkupRange::default_instance();
}

bool CT_CustomXmlBlock::ChildGroup_3::has_customXmlInsRangeStart() const
{
    return m_has_customXmlInsRangeStart;
}

CT_TrackChange* CT_CustomXmlBlock::ChildGroup_3::mutable_customXmlInsRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = true;
    if (!m_customXmlInsRangeStart)
    {
        m_customXmlInsRangeStart = new CT_TrackChange();
    }
    return m_customXmlInsRangeStart;
}

const CT_TrackChange& CT_CustomXmlBlock::ChildGroup_3::get_customXmlInsRangeStart() const
{
    if (m_customXmlInsRangeStart)
    {
        return *m_customXmlInsRangeStart;
    }
    return CT_TrackChange::default_instance();
}

bool CT_CustomXmlBlock::ChildGroup_3::has_customXmlInsRangeEnd() const
{
    return m_has_customXmlInsRangeEnd;
}

CT_Markup* CT_CustomXmlBlock::ChildGroup_3::mutable_customXmlInsRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = true;
    if (!m_customXmlInsRangeEnd)
    {
        m_customXmlInsRangeEnd = new CT_Markup();
    }
    return m_customXmlInsRangeEnd;
}

const CT_Markup& CT_CustomXmlBlock::ChildGroup_3::get_customXmlInsRangeEnd() const
{
    if (m_customXmlInsRangeEnd)
    {
        return *m_customXmlInsRangeEnd;
    }
    return CT_Markup::default_instance();
}

bool CT_CustomXmlBlock::ChildGroup_3::has_customXmlDelRangeStart() const
{
    return m_has_customXmlDelRangeStart;
}

CT_TrackChange* CT_CustomXmlBlock::ChildGroup_3::mutable_customXmlDelRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = true;
    if (!m_customXmlDelRangeStart)
    {
        m_customXmlDelRangeStart = new CT_TrackChange();
    }
    return m_customXmlDelRangeStart;
}

const CT_TrackChange& CT_CustomXmlBlock::ChildGroup_3::get_customXmlDelRangeStart() const
{
    if (m_customXmlDelRangeStart)
    {
        return *m_customXmlDelRangeStart;
    }
    return CT_TrackChange::default_instance();
}

bool CT_CustomXmlBlock::ChildGroup_3::has_customXmlDelRangeEnd() const
{
    return m_has_customXmlDelRangeEnd;
}

CT_Markup* CT_CustomXmlBlock::ChildGroup_3::mutable_customXmlDelRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = true;
    if (!m_customXmlDelRangeEnd)
    {
        m_customXmlDelRangeEnd = new CT_Markup();
    }
    return m_customXmlDelRangeEnd;
}

const CT_Markup& CT_CustomXmlBlock::ChildGroup_3::get_customXmlDelRangeEnd() const
{
    if (m_customXmlDelRangeEnd)
    {
        return *m_customXmlDelRangeEnd;
    }
    return CT_Markup::default_instance();
}

bool CT_CustomXmlBlock::ChildGroup_3::has_customXmlMoveFromRangeStart() const
{
    return m_has_customXmlMoveFromRangeStart;
}

CT_TrackChange* CT_CustomXmlBlock::ChildGroup_3::mutable_customXmlMoveFromRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = true;
    if (!m_customXmlMoveFromRangeStart)
    {
        m_customXmlMoveFromRangeStart = new CT_TrackChange();
    }
    return m_customXmlMoveFromRangeStart;
}

const CT_TrackChange& CT_CustomXmlBlock::ChildGroup_3::get_customXmlMoveFromRangeStart() const
{
    if (m_customXmlMoveFromRangeStart)
    {
        return *m_customXmlMoveFromRangeStart;
    }
    return CT_TrackChange::default_instance();
}

bool CT_CustomXmlBlock::ChildGroup_3::has_customXmlMoveFromRangeEnd() const
{
    return m_has_customXmlMoveFromRangeEnd;
}

CT_Markup* CT_CustomXmlBlock::ChildGroup_3::mutable_customXmlMoveFromRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = true;
    if (!m_customXmlMoveFromRangeEnd)
    {
        m_customXmlMoveFromRangeEnd = new CT_Markup();
    }
    return m_customXmlMoveFromRangeEnd;
}

const CT_Markup& CT_CustomXmlBlock::ChildGroup_3::get_customXmlMoveFromRangeEnd() const
{
    if (m_customXmlMoveFromRangeEnd)
    {
        return *m_customXmlMoveFromRangeEnd;
    }
    return CT_Markup::default_instance();
}

bool CT_CustomXmlBlock::ChildGroup_3::has_customXmlMoveToRangeStart() const
{
    return m_has_customXmlMoveToRangeStart;
}

CT_TrackChange* CT_CustomXmlBlock::ChildGroup_3::mutable_customXmlMoveToRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = true;
    if (!m_customXmlMoveToRangeStart)
    {
        m_customXmlMoveToRangeStart = new CT_TrackChange();
    }
    return m_customXmlMoveToRangeStart;
}

const CT_TrackChange& CT_CustomXmlBlock::ChildGroup_3::get_customXmlMoveToRangeStart() const
{
    if (m_customXmlMoveToRangeStart)
    {
        return *m_customXmlMoveToRangeStart;
    }
    return CT_TrackChange::default_instance();
}

bool CT_CustomXmlBlock::ChildGroup_3::has_customXmlMoveToRangeEnd() const
{
    return m_has_customXmlMoveToRangeEnd;
}

CT_Markup* CT_CustomXmlBlock::ChildGroup_3::mutable_customXmlMoveToRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = true;
    if (!m_customXmlMoveToRangeEnd)
    {
        m_customXmlMoveToRangeEnd = new CT_Markup();
    }
    return m_customXmlMoveToRangeEnd;
}

const CT_Markup& CT_CustomXmlBlock::ChildGroup_3::get_customXmlMoveToRangeEnd() const
{
    if (m_customXmlMoveToRangeEnd)
    {
        return *m_customXmlMoveToRangeEnd;
    }
    return CT_Markup::default_instance();
}

bool CT_CustomXmlBlock::ChildGroup_3::has_ins() const
{
    return m_has_ins;
}

CT_RunTrackChange* CT_CustomXmlBlock::ChildGroup_3::mutable_ins()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_ins = true;
    if (!m_ins)
    {
        m_ins = new CT_RunTrackChange();
    }
    return m_ins;
}

const CT_RunTrackChange& CT_CustomXmlBlock::ChildGroup_3::get_ins() const
{
    if (m_ins)
    {
        return *m_ins;
    }
    return CT_RunTrackChange::default_instance();
}

bool CT_CustomXmlBlock::ChildGroup_3::has_del() const
{
    return m_has_del;
}

CT_RunTrackChange* CT_CustomXmlBlock::ChildGroup_3::mutable_del()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_del = true;
    if (!m_del)
    {
        m_del = new CT_RunTrackChange();
    }
    return m_del;
}

const CT_RunTrackChange& CT_CustomXmlBlock::ChildGroup_3::get_del() const
{
    if (m_del)
    {
        return *m_del;
    }
    return CT_RunTrackChange::default_instance();
}

bool CT_CustomXmlBlock::ChildGroup_3::has_moveFrom() const
{
    return m_has_moveFrom;
}

CT_RunTrackChange* CT_CustomXmlBlock::ChildGroup_3::mutable_moveFrom()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_moveFrom = true;
    if (!m_moveFrom)
    {
        m_moveFrom = new CT_RunTrackChange();
    }
    return m_moveFrom;
}

const CT_RunTrackChange& CT_CustomXmlBlock::ChildGroup_3::get_moveFrom() const
{
    if (m_moveFrom)
    {
        return *m_moveFrom;
    }
    return CT_RunTrackChange::default_instance();
}

bool CT_CustomXmlBlock::ChildGroup_3::has_moveTo() const
{
    return m_has_moveTo;
}

CT_RunTrackChange* CT_CustomXmlBlock::ChildGroup_3::mutable_moveTo()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = true;
    if (!m_moveTo)
    {
        m_moveTo = new CT_RunTrackChange();
    }
    return m_moveTo;
}

const CT_RunTrackChange& CT_CustomXmlBlock::ChildGroup_3::get_moveTo() const
{
    if (m_moveTo)
    {
        return *m_moveTo;
    }
    return CT_RunTrackChange::default_instance();
}


// CT_CustomXmlBlock::ChildGroup_4
CT_CustomXmlBlock::ChildGroup_4::ChildGroup_4()
    :m_has_m_oMathPara(false),
     m_m_oMathPara(NULL),
     m_has_m_oMath(false),
     m_m_oMath(NULL)
{
}
bool CT_CustomXmlBlock::ChildGroup_4::has_m_oMathPara() const
{
    return m_has_m_oMathPara;
}

ns_m::CT_OMathPara* CT_CustomXmlBlock::ChildGroup_4::mutable_m_oMathPara()
{

    m_has_m_oMath = false;

    if (m_m_oMath)
    {
        delete m_m_oMath;
        m_m_oMath = NULL;
    }
    ;

    m_has_m_oMathPara = true;
    if (!m_m_oMathPara)
    {
        m_m_oMathPara = new ns_m::CT_OMathPara();
    }
    return m_m_oMathPara;
}

const ns_m::CT_OMathPara& CT_CustomXmlBlock::ChildGroup_4::get_m_oMathPara() const
{
    if (m_m_oMathPara)
    {
        return *m_m_oMathPara;
    }
    return ns_m::CT_OMathPara::default_instance();
}

bool CT_CustomXmlBlock::ChildGroup_4::has_m_oMath() const
{
    return m_has_m_oMath;
}

ns_m::CT_OMath* CT_CustomXmlBlock::ChildGroup_4::mutable_m_oMath()
{

    m_has_m_oMathPara = false;

    if (m_m_oMathPara)
    {
        delete m_m_oMathPara;
        m_m_oMathPara = NULL;
    }
    ;

    m_has_m_oMath = true;
    if (!m_m_oMath)
    {
        m_m_oMath = new ns_m::CT_OMath();
    }
    return m_m_oMath;
}

const ns_m::CT_OMath& CT_CustomXmlBlock::ChildGroup_4::get_m_oMath() const
{
    if (m_m_oMath)
    {
        return *m_m_oMath;
    }
    return ns_m::CT_OMath::default_instance();
}

CT_CustomXmlBlock* CT_CustomXmlBlock::default_instance_ = NULL;

// CT_CustomXmlPr
CT_CustomXmlPr::CT_CustomXmlPr()
    :m_has_placeholder(false),
     m_placeholder(NULL)
{
}
CT_CustomXmlPr::~CT_CustomXmlPr()
{
    clear();
}
bool CT_CustomXmlPr::has_placeholder() const
{
    return m_has_placeholder;
}

CT_String* CT_CustomXmlPr::mutable_placeholder()
{
    m_has_placeholder = true;
    if (!m_placeholder)
    {
        m_placeholder = new CT_String();
    }
    return m_placeholder;
}

const CT_String& CT_CustomXmlPr::get_placeholder() const
{
    if (m_placeholder)
    {
        return *m_placeholder;
    }
    return CT_String::default_instance();
}

CT_Attr* CT_CustomXmlPr::add_attr()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Attr* pNewChild = pChildGroup->mutable_attr();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

void CT_CustomXmlPr::clear()
{
    m_has_placeholder = false;

    if (m_placeholder)
    {
        delete m_placeholder;
        m_placeholder = NULL;
    }


    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
}

void CT_CustomXmlPr::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";


    if (m_has_placeholder)
    {
        m_placeholder->toXmlElem("w:placeholder", "", _outStream);
    }

    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_attr())
            {
                (*iter)->get_attr().toXmlElem("w:attr", "", _outStream);
            }


        }
    }

    _outStream << "</" << _elemName << ">";
}

const CT_CustomXmlPr& CT_CustomXmlPr::default_instance()
{
    if (!CT_CustomXmlPr::default_instance_)
    {
        CT_CustomXmlPr::default_instance_ = new CT_CustomXmlPr();
    }
    return *CT_CustomXmlPr::default_instance_;
}


// CT_CustomXmlPr::ChildGroup_1
CT_CustomXmlPr::ChildGroup_1::ChildGroup_1()
    :m_has_attr(false),
     m_attr(NULL)
{
}
bool CT_CustomXmlPr::ChildGroup_1::has_attr() const
{
    return m_has_attr;
}

CT_Attr* CT_CustomXmlPr::ChildGroup_1::mutable_attr()
{

    m_has_attr = true;
    if (!m_attr)
    {
        m_attr = new CT_Attr();
    }
    return m_attr;
}

const CT_Attr& CT_CustomXmlPr::ChildGroup_1::get_attr() const
{
    if (m_attr)
    {
        return *m_attr;
    }
    return CT_Attr::default_instance();
}

CT_CustomXmlPr* CT_CustomXmlPr::default_instance_ = NULL;

// CT_CustomXmlRow
CT_CustomXmlRow::CT_CustomXmlRow()
    :m_has_customXmlPr(false),
     m_customXmlPr(NULL),
     m_has_uri_attr(false),
     m_uri_attr(NULL),
     m_has_element_attr(false),
     m_element_attr(NULL)
{
}
CT_CustomXmlRow::~CT_CustomXmlRow()
{
    clear();
}
bool CT_CustomXmlRow::has_customXmlPr() const
{
    return m_has_customXmlPr;
}

CT_CustomXmlPr* CT_CustomXmlRow::mutable_customXmlPr()
{
    m_has_customXmlPr = true;
    if (!m_customXmlPr)
    {
        m_customXmlPr = new CT_CustomXmlPr();
    }
    return m_customXmlPr;
}

const CT_CustomXmlPr& CT_CustomXmlRow::get_customXmlPr() const
{
    if (m_customXmlPr)
    {
        return *m_customXmlPr;
    }
    return CT_CustomXmlPr::default_instance();
}

CT_Row* CT_CustomXmlRow::add_tr()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Row* pNewChild = pChildGroup->mutable_tr();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_CustomXmlRow* CT_CustomXmlRow::add_customXml()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_CustomXmlRow* pNewChild = pChildGroup->mutable_customXml();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_SdtRow* CT_CustomXmlRow::add_sdt()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_SdtRow* pNewChild = pChildGroup->mutable_sdt();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_ProofErr* CT_CustomXmlRow::add_proofErr()
{
    ChildGroup_2 *pChildGroup = new ChildGroup_2();
    CT_ProofErr* pNewChild = pChildGroup->mutable_proofErr();
    m_childGroupList_2.push_back(pChildGroup);
    return pNewChild;
}

CT_PermStart* CT_CustomXmlRow::add_permStart()
{
    ChildGroup_2 *pChildGroup = new ChildGroup_2();
    CT_PermStart* pNewChild = pChildGroup->mutable_permStart();
    m_childGroupList_2.push_back(pChildGroup);
    return pNewChild;
}

CT_Perm* CT_CustomXmlRow::add_permEnd()
{
    ChildGroup_2 *pChildGroup = new ChildGroup_2();
    CT_Perm* pNewChild = pChildGroup->mutable_permEnd();
    m_childGroupList_2.push_back(pChildGroup);
    return pNewChild;
}

CT_Bookmark* CT_CustomXmlRow::add_bookmarkStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_Bookmark* pNewChild = pChildGroup->mutable_bookmarkStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MarkupRange* CT_CustomXmlRow::add_bookmarkEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MarkupRange* pNewChild = pChildGroup->mutable_bookmarkEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MoveBookmark* CT_CustomXmlRow::add_moveFromRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MoveBookmark* pNewChild = pChildGroup->mutable_moveFromRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MarkupRange* CT_CustomXmlRow::add_moveFromRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MarkupRange* pNewChild = pChildGroup->mutable_moveFromRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MoveBookmark* CT_CustomXmlRow::add_moveToRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MoveBookmark* pNewChild = pChildGroup->mutable_moveToRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MarkupRange* CT_CustomXmlRow::add_moveToRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MarkupRange* pNewChild = pChildGroup->mutable_moveToRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MarkupRange* CT_CustomXmlRow::add_commentRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MarkupRange* pNewChild = pChildGroup->mutable_commentRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MarkupRange* CT_CustomXmlRow::add_commentRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MarkupRange* pNewChild = pChildGroup->mutable_commentRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_TrackChange* CT_CustomXmlRow::add_customXmlInsRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_TrackChange* pNewChild = pChildGroup->mutable_customXmlInsRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_Markup* CT_CustomXmlRow::add_customXmlInsRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_Markup* pNewChild = pChildGroup->mutable_customXmlInsRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_TrackChange* CT_CustomXmlRow::add_customXmlDelRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_TrackChange* pNewChild = pChildGroup->mutable_customXmlDelRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_Markup* CT_CustomXmlRow::add_customXmlDelRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_Markup* pNewChild = pChildGroup->mutable_customXmlDelRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_TrackChange* CT_CustomXmlRow::add_customXmlMoveFromRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_TrackChange* pNewChild = pChildGroup->mutable_customXmlMoveFromRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_Markup* CT_CustomXmlRow::add_customXmlMoveFromRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_Markup* pNewChild = pChildGroup->mutable_customXmlMoveFromRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_TrackChange* CT_CustomXmlRow::add_customXmlMoveToRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_TrackChange* pNewChild = pChildGroup->mutable_customXmlMoveToRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_Markup* CT_CustomXmlRow::add_customXmlMoveToRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_Markup* pNewChild = pChildGroup->mutable_customXmlMoveToRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_RunTrackChange* CT_CustomXmlRow::add_ins()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_RunTrackChange* pNewChild = pChildGroup->mutable_ins();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_RunTrackChange* CT_CustomXmlRow::add_del()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_RunTrackChange* pNewChild = pChildGroup->mutable_del();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_RunTrackChange* CT_CustomXmlRow::add_moveFrom()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_RunTrackChange* pNewChild = pChildGroup->mutable_moveFrom();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_RunTrackChange* CT_CustomXmlRow::add_moveTo()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_RunTrackChange* pNewChild = pChildGroup->mutable_moveTo();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

ns_m::CT_OMathPara* CT_CustomXmlRow::add_m_oMathPara()
{
    ChildGroup_4 *pChildGroup = new ChildGroup_4();
    ns_m::CT_OMathPara* pNewChild = pChildGroup->mutable_m_oMathPara();
    m_childGroupList_4.push_back(pChildGroup);
    return pNewChild;
}

ns_m::CT_OMath* CT_CustomXmlRow::add_m_oMath()
{
    ChildGroup_4 *pChildGroup = new ChildGroup_4();
    ns_m::CT_OMath* pNewChild = pChildGroup->mutable_m_oMath();
    m_childGroupList_4.push_back(pChildGroup);
    return pNewChild;
}

void CT_CustomXmlRow::clear()
{
    m_has_uri_attr = false;

    if (m_uri_attr)
    {
        delete m_uri_attr;
        m_uri_attr = NULL;
    }


    m_has_element_attr = false;

    if (m_element_attr)
    {
        delete m_element_attr;
        m_element_attr = NULL;
    }


    m_has_customXmlPr = false;

    if (m_customXmlPr)
    {
        delete m_customXmlPr;
        m_customXmlPr = NULL;
    }


    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }

    {
        vector<ChildGroup_2*>::iterator iter;
        for (iter = m_childGroupList_2.begin(); iter != m_childGroupList_2.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_2.clear();
    }

    {
        vector<ChildGroup_3*>::iterator iter;
        for (iter = m_childGroupList_3.begin(); iter != m_childGroupList_3.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_3.clear();
    }

    {
        vector<ChildGroup_4*>::iterator iter;
        for (iter = m_childGroupList_4.begin(); iter != m_childGroupList_4.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_4.clear();
    }
}

void CT_CustomXmlRow::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_uri_attr)
    {
        m_uri_attr->toXmlAttr("w:uri", _outStream);
    }


    assert(m_has_element_attr);
    if (m_has_element_attr)
    {
        m_element_attr->toXmlAttr("w:element", _outStream);
    }

    _outStream << ">";


    if (m_has_customXmlPr)
    {
        m_customXmlPr->toXmlElem("w:customXmlPr", "", _outStream);
    }

    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_tr())
            {
                (*iter)->get_tr().toXmlElem("w:tr", "", _outStream);
            }


            else if ((*iter)->has_customXml())
            {
                (*iter)->get_customXml().toXmlElem("w:customXml", "", _outStream);
            }


            else if ((*iter)->has_sdt())
            {
                (*iter)->get_sdt().toXmlElem("w:sdt", "", _outStream);
            }


        }
    }

    {
        vector<ChildGroup_2*>::const_iterator iter;
        for (iter = m_childGroupList_2.begin(); iter != m_childGroupList_2.end(); ++iter)
        {
            if ((*iter)->has_proofErr())
            {
                (*iter)->get_proofErr().toXmlElem("w:proofErr", "", _outStream);
            }


            else if ((*iter)->has_permStart())
            {
                (*iter)->get_permStart().toXmlElem("w:permStart", "", _outStream);
            }


            else if ((*iter)->has_permEnd())
            {
                (*iter)->get_permEnd().toXmlElem("w:permEnd", "", _outStream);
            }


        }
    }

    {
        vector<ChildGroup_3*>::const_iterator iter;
        for (iter = m_childGroupList_3.begin(); iter != m_childGroupList_3.end(); ++iter)
        {
            if ((*iter)->has_bookmarkStart())
            {
                (*iter)->get_bookmarkStart().toXmlElem("w:bookmarkStart", "", _outStream);
            }


            else if ((*iter)->has_bookmarkEnd())
            {
                (*iter)->get_bookmarkEnd().toXmlElem("w:bookmarkEnd", "", _outStream);
            }


            else if ((*iter)->has_moveFromRangeStart())
            {
                (*iter)->get_moveFromRangeStart().toXmlElem("w:moveFromRangeStart", "", _outStream);
            }


            else if ((*iter)->has_moveFromRangeEnd())
            {
                (*iter)->get_moveFromRangeEnd().toXmlElem("w:moveFromRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_moveToRangeStart())
            {
                (*iter)->get_moveToRangeStart().toXmlElem("w:moveToRangeStart", "", _outStream);
            }


            else if ((*iter)->has_moveToRangeEnd())
            {
                (*iter)->get_moveToRangeEnd().toXmlElem("w:moveToRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_commentRangeStart())
            {
                (*iter)->get_commentRangeStart().toXmlElem("w:commentRangeStart", "", _outStream);
            }


            else if ((*iter)->has_commentRangeEnd())
            {
                (*iter)->get_commentRangeEnd().toXmlElem("w:commentRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_customXmlInsRangeStart())
            {
                (*iter)->get_customXmlInsRangeStart().toXmlElem("w:customXmlInsRangeStart", "", _outStream);
            }


            else if ((*iter)->has_customXmlInsRangeEnd())
            {
                (*iter)->get_customXmlInsRangeEnd().toXmlElem("w:customXmlInsRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_customXmlDelRangeStart())
            {
                (*iter)->get_customXmlDelRangeStart().toXmlElem("w:customXmlDelRangeStart", "", _outStream);
            }


            else if ((*iter)->has_customXmlDelRangeEnd())
            {
                (*iter)->get_customXmlDelRangeEnd().toXmlElem("w:customXmlDelRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_customXmlMoveFromRangeStart())
            {
                (*iter)->get_customXmlMoveFromRangeStart().toXmlElem("w:customXmlMoveFromRangeStart", "", _outStream);
            }


            else if ((*iter)->has_customXmlMoveFromRangeEnd())
            {
                (*iter)->get_customXmlMoveFromRangeEnd().toXmlElem("w:customXmlMoveFromRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_customXmlMoveToRangeStart())
            {
                (*iter)->get_customXmlMoveToRangeStart().toXmlElem("w:customXmlMoveToRangeStart", "", _outStream);
            }


            else if ((*iter)->has_customXmlMoveToRangeEnd())
            {
                (*iter)->get_customXmlMoveToRangeEnd().toXmlElem("w:customXmlMoveToRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_ins())
            {
                (*iter)->get_ins().toXmlElem("w:ins", "", _outStream);
            }


            else if ((*iter)->has_del())
            {
                (*iter)->get_del().toXmlElem("w:del", "", _outStream);
            }


            else if ((*iter)->has_moveFrom())
            {
                (*iter)->get_moveFrom().toXmlElem("w:moveFrom", "", _outStream);
            }


            else if ((*iter)->has_moveTo())
            {
                (*iter)->get_moveTo().toXmlElem("w:moveTo", "", _outStream);
            }


        }
    }

    {
        vector<ChildGroup_4*>::const_iterator iter;
        for (iter = m_childGroupList_4.begin(); iter != m_childGroupList_4.end(); ++iter)
        {
            if ((*iter)->has_m_oMathPara())
            {
                (*iter)->get_m_oMathPara().toXmlElem("m:oMathPara", "", _outStream);
            }


            else if ((*iter)->has_m_oMath())
            {
                (*iter)->get_m_oMath().toXmlElem("m:oMath", "", _outStream);
            }


        }
    }

    _outStream << "</" << _elemName << ">";
}

const CT_CustomXmlRow& CT_CustomXmlRow::default_instance()
{
    if (!CT_CustomXmlRow::default_instance_)
    {
        CT_CustomXmlRow::default_instance_ = new CT_CustomXmlRow();
    }
    return *CT_CustomXmlRow::default_instance_;
}

bool CT_CustomXmlRow::has_uri_attr() const
{
    return m_has_uri_attr;
}

void CT_CustomXmlRow::set_uri_attr(const ns_s::ST_String& _uri_attr)
{
    m_has_uri_attr = true;
    m_uri_attr = new ns_s::ST_String(_uri_attr);
}

const ns_s::ST_String& CT_CustomXmlRow::get_uri_attr() const
{
    if (m_uri_attr)
    {
        return *m_uri_attr;
    }
    return ns_s::ST_String::default_instance();
}

bool CT_CustomXmlRow::has_element_attr() const
{
    return m_has_element_attr;
}

void CT_CustomXmlRow::set_element_attr(const ns_s::ST_XmlName& _element_attr)
{
    m_has_element_attr = true;
    m_element_attr = new ns_s::ST_XmlName(_element_attr);
}

const ns_s::ST_XmlName& CT_CustomXmlRow::get_element_attr() const
{
    if (m_element_attr)
    {
        return *m_element_attr;
    }
    return ns_s::ST_XmlName::default_instance();
}


// CT_CustomXmlRow::ChildGroup_1
CT_CustomXmlRow::ChildGroup_1::ChildGroup_1()
    :m_has_tr(false),
     m_tr(NULL),
     m_has_customXml(false),
     m_customXml(NULL),
     m_has_sdt(false),
     m_sdt(NULL)
{
}
bool CT_CustomXmlRow::ChildGroup_1::has_tr() const
{
    return m_has_tr;
}

CT_Row* CT_CustomXmlRow::ChildGroup_1::mutable_tr()
{

    m_has_customXml = false;

    if (m_customXml)
    {
        delete m_customXml;
        m_customXml = NULL;
    }
    ;

    m_has_sdt = false;

    if (m_sdt)
    {
        delete m_sdt;
        m_sdt = NULL;
    }
    ;

    m_has_tr = true;
    if (!m_tr)
    {
        m_tr = new CT_Row();
    }
    return m_tr;
}

const CT_Row& CT_CustomXmlRow::ChildGroup_1::get_tr() const
{
    if (m_tr)
    {
        return *m_tr;
    }
    return CT_Row::default_instance();
}

bool CT_CustomXmlRow::ChildGroup_1::has_customXml() const
{
    return m_has_customXml;
}

CT_CustomXmlRow* CT_CustomXmlRow::ChildGroup_1::mutable_customXml()
{

    m_has_tr = false;

    if (m_tr)
    {
        delete m_tr;
        m_tr = NULL;
    }
    ;

    m_has_sdt = false;

    if (m_sdt)
    {
        delete m_sdt;
        m_sdt = NULL;
    }
    ;

    m_has_customXml = true;
    if (!m_customXml)
    {
        m_customXml = new CT_CustomXmlRow();
    }
    return m_customXml;
}

const CT_CustomXmlRow& CT_CustomXmlRow::ChildGroup_1::get_customXml() const
{
    if (m_customXml)
    {
        return *m_customXml;
    }
    return CT_CustomXmlRow::default_instance();
}

bool CT_CustomXmlRow::ChildGroup_1::has_sdt() const
{
    return m_has_sdt;
}

CT_SdtRow* CT_CustomXmlRow::ChildGroup_1::mutable_sdt()
{

    m_has_tr = false;

    if (m_tr)
    {
        delete m_tr;
        m_tr = NULL;
    }
    ;

    m_has_customXml = false;

    if (m_customXml)
    {
        delete m_customXml;
        m_customXml = NULL;
    }
    ;

    m_has_sdt = true;
    if (!m_sdt)
    {
        m_sdt = new CT_SdtRow();
    }
    return m_sdt;
}

const CT_SdtRow& CT_CustomXmlRow::ChildGroup_1::get_sdt() const
{
    if (m_sdt)
    {
        return *m_sdt;
    }
    return CT_SdtRow::default_instance();
}


// CT_CustomXmlRow::ChildGroup_2
CT_CustomXmlRow::ChildGroup_2::ChildGroup_2()
    :m_has_proofErr(false),
     m_proofErr(NULL),
     m_has_permStart(false),
     m_permStart(NULL),
     m_has_permEnd(false),
     m_permEnd(NULL)
{
}
bool CT_CustomXmlRow::ChildGroup_2::has_proofErr() const
{
    return m_has_proofErr;
}

CT_ProofErr* CT_CustomXmlRow::ChildGroup_2::mutable_proofErr()
{

    m_has_permStart = false;

    if (m_permStart)
    {
        delete m_permStart;
        m_permStart = NULL;
    }
    ;

    m_has_permEnd = false;

    if (m_permEnd)
    {
        delete m_permEnd;
        m_permEnd = NULL;
    }
    ;

    m_has_proofErr = true;
    if (!m_proofErr)
    {
        m_proofErr = new CT_ProofErr();
    }
    return m_proofErr;
}

const CT_ProofErr& CT_CustomXmlRow::ChildGroup_2::get_proofErr() const
{
    if (m_proofErr)
    {
        return *m_proofErr;
    }
    return CT_ProofErr::default_instance();
}

bool CT_CustomXmlRow::ChildGroup_2::has_permStart() const
{
    return m_has_permStart;
}

CT_PermStart* CT_CustomXmlRow::ChildGroup_2::mutable_permStart()
{

    m_has_proofErr = false;

    if (m_proofErr)
    {
        delete m_proofErr;
        m_proofErr = NULL;
    }
    ;

    m_has_permEnd = false;

    if (m_permEnd)
    {
        delete m_permEnd;
        m_permEnd = NULL;
    }
    ;

    m_has_permStart = true;
    if (!m_permStart)
    {
        m_permStart = new CT_PermStart();
    }
    return m_permStart;
}

const CT_PermStart& CT_CustomXmlRow::ChildGroup_2::get_permStart() const
{
    if (m_permStart)
    {
        return *m_permStart;
    }
    return CT_PermStart::default_instance();
}

bool CT_CustomXmlRow::ChildGroup_2::has_permEnd() const
{
    return m_has_permEnd;
}

CT_Perm* CT_CustomXmlRow::ChildGroup_2::mutable_permEnd()
{

    m_has_proofErr = false;

    if (m_proofErr)
    {
        delete m_proofErr;
        m_proofErr = NULL;
    }
    ;

    m_has_permStart = false;

    if (m_permStart)
    {
        delete m_permStart;
        m_permStart = NULL;
    }
    ;

    m_has_permEnd = true;
    if (!m_permEnd)
    {
        m_permEnd = new CT_Perm();
    }
    return m_permEnd;
}

const CT_Perm& CT_CustomXmlRow::ChildGroup_2::get_permEnd() const
{
    if (m_permEnd)
    {
        return *m_permEnd;
    }
    return CT_Perm::default_instance();
}


// CT_CustomXmlRow::ChildGroup_3
CT_CustomXmlRow::ChildGroup_3::ChildGroup_3()
    :m_has_bookmarkStart(false),
     m_bookmarkStart(NULL),
     m_has_bookmarkEnd(false),
     m_bookmarkEnd(NULL),
     m_has_moveFromRangeStart(false),
     m_moveFromRangeStart(NULL),
     m_has_moveFromRangeEnd(false),
     m_moveFromRangeEnd(NULL),
     m_has_moveToRangeStart(false),
     m_moveToRangeStart(NULL),
     m_has_moveToRangeEnd(false),
     m_moveToRangeEnd(NULL),
     m_has_commentRangeStart(false),
     m_commentRangeStart(NULL),
     m_has_commentRangeEnd(false),
     m_commentRangeEnd(NULL),
     m_has_customXmlInsRangeStart(false),
     m_customXmlInsRangeStart(NULL),
     m_has_customXmlInsRangeEnd(false),
     m_customXmlInsRangeEnd(NULL),
     m_has_customXmlDelRangeStart(false),
     m_customXmlDelRangeStart(NULL),
     m_has_customXmlDelRangeEnd(false),
     m_customXmlDelRangeEnd(NULL),
     m_has_customXmlMoveFromRangeStart(false),
     m_customXmlMoveFromRangeStart(NULL),
     m_has_customXmlMoveFromRangeEnd(false),
     m_customXmlMoveFromRangeEnd(NULL),
     m_has_customXmlMoveToRangeStart(false),
     m_customXmlMoveToRangeStart(NULL),
     m_has_customXmlMoveToRangeEnd(false),
     m_customXmlMoveToRangeEnd(NULL),
     m_has_ins(false),
     m_ins(NULL),
     m_has_del(false),
     m_del(NULL),
     m_has_moveFrom(false),
     m_moveFrom(NULL),
     m_has_moveTo(false),
     m_moveTo(NULL)
{
}
bool CT_CustomXmlRow::ChildGroup_3::has_bookmarkStart() const
{
    return m_has_bookmarkStart;
}

CT_Bookmark* CT_CustomXmlRow::ChildGroup_3::mutable_bookmarkStart()
{

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_bookmarkStart = true;
    if (!m_bookmarkStart)
    {
        m_bookmarkStart = new CT_Bookmark();
    }
    return m_bookmarkStart;
}

const CT_Bookmark& CT_CustomXmlRow::ChildGroup_3::get_bookmarkStart() const
{
    if (m_bookmarkStart)
    {
        return *m_bookmarkStart;
    }
    return CT_Bookmark::default_instance();
}

bool CT_CustomXmlRow::ChildGroup_3::has_bookmarkEnd() const
{
    return m_has_bookmarkEnd;
}

CT_MarkupRange* CT_CustomXmlRow::ChildGroup_3::mutable_bookmarkEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_bookmarkEnd = true;
    if (!m_bookmarkEnd)
    {
        m_bookmarkEnd = new CT_MarkupRange();
    }
    return m_bookmarkEnd;
}

const CT_MarkupRange& CT_CustomXmlRow::ChildGroup_3::get_bookmarkEnd() const
{
    if (m_bookmarkEnd)
    {
        return *m_bookmarkEnd;
    }
    return CT_MarkupRange::default_instance();
}

bool CT_CustomXmlRow::ChildGroup_3::has_moveFromRangeStart() const
{
    return m_has_moveFromRangeStart;
}

CT_MoveBookmark* CT_CustomXmlRow::ChildGroup_3::mutable_moveFromRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_moveFromRangeStart = true;
    if (!m_moveFromRangeStart)
    {
        m_moveFromRangeStart = new CT_MoveBookmark();
    }
    return m_moveFromRangeStart;
}

const CT_MoveBookmark& CT_CustomXmlRow::ChildGroup_3::get_moveFromRangeStart() const
{
    if (m_moveFromRangeStart)
    {
        return *m_moveFromRangeStart;
    }
    return CT_MoveBookmark::default_instance();
}

bool CT_CustomXmlRow::ChildGroup_3::has_moveFromRangeEnd() const
{
    return m_has_moveFromRangeEnd;
}

CT_MarkupRange* CT_CustomXmlRow::ChildGroup_3::mutable_moveFromRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_moveFromRangeEnd = true;
    if (!m_moveFromRangeEnd)
    {
        m_moveFromRangeEnd = new CT_MarkupRange();
    }
    return m_moveFromRangeEnd;
}

const CT_MarkupRange& CT_CustomXmlRow::ChildGroup_3::get_moveFromRangeEnd() const
{
    if (m_moveFromRangeEnd)
    {
        return *m_moveFromRangeEnd;
    }
    return CT_MarkupRange::default_instance();
}

bool CT_CustomXmlRow::ChildGroup_3::has_moveToRangeStart() const
{
    return m_has_moveToRangeStart;
}

CT_MoveBookmark* CT_CustomXmlRow::ChildGroup_3::mutable_moveToRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_moveToRangeStart = true;
    if (!m_moveToRangeStart)
    {
        m_moveToRangeStart = new CT_MoveBookmark();
    }
    return m_moveToRangeStart;
}

const CT_MoveBookmark& CT_CustomXmlRow::ChildGroup_3::get_moveToRangeStart() const
{
    if (m_moveToRangeStart)
    {
        return *m_moveToRangeStart;
    }
    return CT_MoveBookmark::default_instance();
}

bool CT_CustomXmlRow::ChildGroup_3::has_moveToRangeEnd() const
{
    return m_has_moveToRangeEnd;
}

CT_MarkupRange* CT_CustomXmlRow::ChildGroup_3::mutable_moveToRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_moveToRangeEnd = true;
    if (!m_moveToRangeEnd)
    {
        m_moveToRangeEnd = new CT_MarkupRange();
    }
    return m_moveToRangeEnd;
}

const CT_MarkupRange& CT_CustomXmlRow::ChildGroup_3::get_moveToRangeEnd() const
{
    if (m_moveToRangeEnd)
    {
        return *m_moveToRangeEnd;
    }
    return CT_MarkupRange::default_instance();
}

bool CT_CustomXmlRow::ChildGroup_3::has_commentRangeStart() const
{
    return m_has_commentRangeStart;
}

CT_MarkupRange* CT_CustomXmlRow::ChildGroup_3::mutable_commentRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_commentRangeStart = true;
    if (!m_commentRangeStart)
    {
        m_commentRangeStart = new CT_MarkupRange();
    }
    return m_commentRangeStart;
}

const CT_MarkupRange& CT_CustomXmlRow::ChildGroup_3::get_commentRangeStart() const
{
    if (m_commentRangeStart)
    {
        return *m_commentRangeStart;
    }
    return CT_MarkupRange::default_instance();
}

bool CT_CustomXmlRow::ChildGroup_3::has_commentRangeEnd() const
{
    return m_has_commentRangeEnd;
}

CT_MarkupRange* CT_CustomXmlRow::ChildGroup_3::mutable_commentRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_commentRangeEnd = true;
    if (!m_commentRangeEnd)
    {
        m_commentRangeEnd = new CT_MarkupRange();
    }
    return m_commentRangeEnd;
}

const CT_MarkupRange& CT_CustomXmlRow::ChildGroup_3::get_commentRangeEnd() const
{
    if (m_commentRangeEnd)
    {
        return *m_commentRangeEnd;
    }
    return CT_MarkupRange::default_instance();
}

bool CT_CustomXmlRow::ChildGroup_3::has_customXmlInsRangeStart() const
{
    return m_has_customXmlInsRangeStart;
}

CT_TrackChange* CT_CustomXmlRow::ChildGroup_3::mutable_customXmlInsRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = true;
    if (!m_customXmlInsRangeStart)
    {
        m_customXmlInsRangeStart = new CT_TrackChange();
    }
    return m_customXmlInsRangeStart;
}

const CT_TrackChange& CT_CustomXmlRow::ChildGroup_3::get_customXmlInsRangeStart() const
{
    if (m_customXmlInsRangeStart)
    {
        return *m_customXmlInsRangeStart;
    }
    return CT_TrackChange::default_instance();
}

bool CT_CustomXmlRow::ChildGroup_3::has_customXmlInsRangeEnd() const
{
    return m_has_customXmlInsRangeEnd;
}

CT_Markup* CT_CustomXmlRow::ChildGroup_3::mutable_customXmlInsRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = true;
    if (!m_customXmlInsRangeEnd)
    {
        m_customXmlInsRangeEnd = new CT_Markup();
    }
    return m_customXmlInsRangeEnd;
}

const CT_Markup& CT_CustomXmlRow::ChildGroup_3::get_customXmlInsRangeEnd() const
{
    if (m_customXmlInsRangeEnd)
    {
        return *m_customXmlInsRangeEnd;
    }
    return CT_Markup::default_instance();
}

bool CT_CustomXmlRow::ChildGroup_3::has_customXmlDelRangeStart() const
{
    return m_has_customXmlDelRangeStart;
}

CT_TrackChange* CT_CustomXmlRow::ChildGroup_3::mutable_customXmlDelRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = true;
    if (!m_customXmlDelRangeStart)
    {
        m_customXmlDelRangeStart = new CT_TrackChange();
    }
    return m_customXmlDelRangeStart;
}

const CT_TrackChange& CT_CustomXmlRow::ChildGroup_3::get_customXmlDelRangeStart() const
{
    if (m_customXmlDelRangeStart)
    {
        return *m_customXmlDelRangeStart;
    }
    return CT_TrackChange::default_instance();
}

bool CT_CustomXmlRow::ChildGroup_3::has_customXmlDelRangeEnd() const
{
    return m_has_customXmlDelRangeEnd;
}

CT_Markup* CT_CustomXmlRow::ChildGroup_3::mutable_customXmlDelRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = true;
    if (!m_customXmlDelRangeEnd)
    {
        m_customXmlDelRangeEnd = new CT_Markup();
    }
    return m_customXmlDelRangeEnd;
}

const CT_Markup& CT_CustomXmlRow::ChildGroup_3::get_customXmlDelRangeEnd() const
{
    if (m_customXmlDelRangeEnd)
    {
        return *m_customXmlDelRangeEnd;
    }
    return CT_Markup::default_instance();
}

bool CT_CustomXmlRow::ChildGroup_3::has_customXmlMoveFromRangeStart() const
{
    return m_has_customXmlMoveFromRangeStart;
}

CT_TrackChange* CT_CustomXmlRow::ChildGroup_3::mutable_customXmlMoveFromRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = true;
    if (!m_customXmlMoveFromRangeStart)
    {
        m_customXmlMoveFromRangeStart = new CT_TrackChange();
    }
    return m_customXmlMoveFromRangeStart;
}

const CT_TrackChange& CT_CustomXmlRow::ChildGroup_3::get_customXmlMoveFromRangeStart() const
{
    if (m_customXmlMoveFromRangeStart)
    {
        return *m_customXmlMoveFromRangeStart;
    }
    return CT_TrackChange::default_instance();
}

bool CT_CustomXmlRow::ChildGroup_3::has_customXmlMoveFromRangeEnd() const
{
    return m_has_customXmlMoveFromRangeEnd;
}

CT_Markup* CT_CustomXmlRow::ChildGroup_3::mutable_customXmlMoveFromRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = true;
    if (!m_customXmlMoveFromRangeEnd)
    {
        m_customXmlMoveFromRangeEnd = new CT_Markup();
    }
    return m_customXmlMoveFromRangeEnd;
}

const CT_Markup& CT_CustomXmlRow::ChildGroup_3::get_customXmlMoveFromRangeEnd() const
{
    if (m_customXmlMoveFromRangeEnd)
    {
        return *m_customXmlMoveFromRangeEnd;
    }
    return CT_Markup::default_instance();
}

bool CT_CustomXmlRow::ChildGroup_3::has_customXmlMoveToRangeStart() const
{
    return m_has_customXmlMoveToRangeStart;
}

CT_TrackChange* CT_CustomXmlRow::ChildGroup_3::mutable_customXmlMoveToRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = true;
    if (!m_customXmlMoveToRangeStart)
    {
        m_customXmlMoveToRangeStart = new CT_TrackChange();
    }
    return m_customXmlMoveToRangeStart;
}

const CT_TrackChange& CT_CustomXmlRow::ChildGroup_3::get_customXmlMoveToRangeStart() const
{
    if (m_customXmlMoveToRangeStart)
    {
        return *m_customXmlMoveToRangeStart;
    }
    return CT_TrackChange::default_instance();
}

bool CT_CustomXmlRow::ChildGroup_3::has_customXmlMoveToRangeEnd() const
{
    return m_has_customXmlMoveToRangeEnd;
}

CT_Markup* CT_CustomXmlRow::ChildGroup_3::mutable_customXmlMoveToRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = true;
    if (!m_customXmlMoveToRangeEnd)
    {
        m_customXmlMoveToRangeEnd = new CT_Markup();
    }
    return m_customXmlMoveToRangeEnd;
}

const CT_Markup& CT_CustomXmlRow::ChildGroup_3::get_customXmlMoveToRangeEnd() const
{
    if (m_customXmlMoveToRangeEnd)
    {
        return *m_customXmlMoveToRangeEnd;
    }
    return CT_Markup::default_instance();
}

bool CT_CustomXmlRow::ChildGroup_3::has_ins() const
{
    return m_has_ins;
}

CT_RunTrackChange* CT_CustomXmlRow::ChildGroup_3::mutable_ins()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_ins = true;
    if (!m_ins)
    {
        m_ins = new CT_RunTrackChange();
    }
    return m_ins;
}

const CT_RunTrackChange& CT_CustomXmlRow::ChildGroup_3::get_ins() const
{
    if (m_ins)
    {
        return *m_ins;
    }
    return CT_RunTrackChange::default_instance();
}

bool CT_CustomXmlRow::ChildGroup_3::has_del() const
{
    return m_has_del;
}

CT_RunTrackChange* CT_CustomXmlRow::ChildGroup_3::mutable_del()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_del = true;
    if (!m_del)
    {
        m_del = new CT_RunTrackChange();
    }
    return m_del;
}

const CT_RunTrackChange& CT_CustomXmlRow::ChildGroup_3::get_del() const
{
    if (m_del)
    {
        return *m_del;
    }
    return CT_RunTrackChange::default_instance();
}

bool CT_CustomXmlRow::ChildGroup_3::has_moveFrom() const
{
    return m_has_moveFrom;
}

CT_RunTrackChange* CT_CustomXmlRow::ChildGroup_3::mutable_moveFrom()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_moveFrom = true;
    if (!m_moveFrom)
    {
        m_moveFrom = new CT_RunTrackChange();
    }
    return m_moveFrom;
}

const CT_RunTrackChange& CT_CustomXmlRow::ChildGroup_3::get_moveFrom() const
{
    if (m_moveFrom)
    {
        return *m_moveFrom;
    }
    return CT_RunTrackChange::default_instance();
}

bool CT_CustomXmlRow::ChildGroup_3::has_moveTo() const
{
    return m_has_moveTo;
}

CT_RunTrackChange* CT_CustomXmlRow::ChildGroup_3::mutable_moveTo()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = true;
    if (!m_moveTo)
    {
        m_moveTo = new CT_RunTrackChange();
    }
    return m_moveTo;
}

const CT_RunTrackChange& CT_CustomXmlRow::ChildGroup_3::get_moveTo() const
{
    if (m_moveTo)
    {
        return *m_moveTo;
    }
    return CT_RunTrackChange::default_instance();
}


// CT_CustomXmlRow::ChildGroup_4
CT_CustomXmlRow::ChildGroup_4::ChildGroup_4()
    :m_has_m_oMathPara(false),
     m_m_oMathPara(NULL),
     m_has_m_oMath(false),
     m_m_oMath(NULL)
{
}
bool CT_CustomXmlRow::ChildGroup_4::has_m_oMathPara() const
{
    return m_has_m_oMathPara;
}

ns_m::CT_OMathPara* CT_CustomXmlRow::ChildGroup_4::mutable_m_oMathPara()
{

    m_has_m_oMath = false;

    if (m_m_oMath)
    {
        delete m_m_oMath;
        m_m_oMath = NULL;
    }
    ;

    m_has_m_oMathPara = true;
    if (!m_m_oMathPara)
    {
        m_m_oMathPara = new ns_m::CT_OMathPara();
    }
    return m_m_oMathPara;
}

const ns_m::CT_OMathPara& CT_CustomXmlRow::ChildGroup_4::get_m_oMathPara() const
{
    if (m_m_oMathPara)
    {
        return *m_m_oMathPara;
    }
    return ns_m::CT_OMathPara::default_instance();
}

bool CT_CustomXmlRow::ChildGroup_4::has_m_oMath() const
{
    return m_has_m_oMath;
}

ns_m::CT_OMath* CT_CustomXmlRow::ChildGroup_4::mutable_m_oMath()
{

    m_has_m_oMathPara = false;

    if (m_m_oMathPara)
    {
        delete m_m_oMathPara;
        m_m_oMathPara = NULL;
    }
    ;

    m_has_m_oMath = true;
    if (!m_m_oMath)
    {
        m_m_oMath = new ns_m::CT_OMath();
    }
    return m_m_oMath;
}

const ns_m::CT_OMath& CT_CustomXmlRow::ChildGroup_4::get_m_oMath() const
{
    if (m_m_oMath)
    {
        return *m_m_oMath;
    }
    return ns_m::CT_OMath::default_instance();
}

CT_CustomXmlRow* CT_CustomXmlRow::default_instance_ = NULL;

// CT_CustomXmlCell
CT_CustomXmlCell::CT_CustomXmlCell()
    :m_has_customXmlPr(false),
     m_customXmlPr(NULL),
     m_has_uri_attr(false),
     m_uri_attr(NULL),
     m_has_element_attr(false),
     m_element_attr(NULL)
{
}
CT_CustomXmlCell::~CT_CustomXmlCell()
{
    clear();
}
bool CT_CustomXmlCell::has_customXmlPr() const
{
    return m_has_customXmlPr;
}

CT_CustomXmlPr* CT_CustomXmlCell::mutable_customXmlPr()
{
    m_has_customXmlPr = true;
    if (!m_customXmlPr)
    {
        m_customXmlPr = new CT_CustomXmlPr();
    }
    return m_customXmlPr;
}

const CT_CustomXmlPr& CT_CustomXmlCell::get_customXmlPr() const
{
    if (m_customXmlPr)
    {
        return *m_customXmlPr;
    }
    return CT_CustomXmlPr::default_instance();
}

CT_Tc* CT_CustomXmlCell::add_tc()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Tc* pNewChild = pChildGroup->mutable_tc();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_CustomXmlCell* CT_CustomXmlCell::add_customXml()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_CustomXmlCell* pNewChild = pChildGroup->mutable_customXml();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_SdtCell* CT_CustomXmlCell::add_sdt()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_SdtCell* pNewChild = pChildGroup->mutable_sdt();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_ProofErr* CT_CustomXmlCell::add_proofErr()
{
    ChildGroup_2 *pChildGroup = new ChildGroup_2();
    CT_ProofErr* pNewChild = pChildGroup->mutable_proofErr();
    m_childGroupList_2.push_back(pChildGroup);
    return pNewChild;
}

CT_PermStart* CT_CustomXmlCell::add_permStart()
{
    ChildGroup_2 *pChildGroup = new ChildGroup_2();
    CT_PermStart* pNewChild = pChildGroup->mutable_permStart();
    m_childGroupList_2.push_back(pChildGroup);
    return pNewChild;
}

CT_Perm* CT_CustomXmlCell::add_permEnd()
{
    ChildGroup_2 *pChildGroup = new ChildGroup_2();
    CT_Perm* pNewChild = pChildGroup->mutable_permEnd();
    m_childGroupList_2.push_back(pChildGroup);
    return pNewChild;
}

CT_Bookmark* CT_CustomXmlCell::add_bookmarkStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_Bookmark* pNewChild = pChildGroup->mutable_bookmarkStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MarkupRange* CT_CustomXmlCell::add_bookmarkEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MarkupRange* pNewChild = pChildGroup->mutable_bookmarkEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MoveBookmark* CT_CustomXmlCell::add_moveFromRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MoveBookmark* pNewChild = pChildGroup->mutable_moveFromRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MarkupRange* CT_CustomXmlCell::add_moveFromRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MarkupRange* pNewChild = pChildGroup->mutable_moveFromRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MoveBookmark* CT_CustomXmlCell::add_moveToRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MoveBookmark* pNewChild = pChildGroup->mutable_moveToRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MarkupRange* CT_CustomXmlCell::add_moveToRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MarkupRange* pNewChild = pChildGroup->mutable_moveToRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MarkupRange* CT_CustomXmlCell::add_commentRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MarkupRange* pNewChild = pChildGroup->mutable_commentRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MarkupRange* CT_CustomXmlCell::add_commentRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MarkupRange* pNewChild = pChildGroup->mutable_commentRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_TrackChange* CT_CustomXmlCell::add_customXmlInsRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_TrackChange* pNewChild = pChildGroup->mutable_customXmlInsRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_Markup* CT_CustomXmlCell::add_customXmlInsRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_Markup* pNewChild = pChildGroup->mutable_customXmlInsRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_TrackChange* CT_CustomXmlCell::add_customXmlDelRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_TrackChange* pNewChild = pChildGroup->mutable_customXmlDelRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_Markup* CT_CustomXmlCell::add_customXmlDelRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_Markup* pNewChild = pChildGroup->mutable_customXmlDelRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_TrackChange* CT_CustomXmlCell::add_customXmlMoveFromRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_TrackChange* pNewChild = pChildGroup->mutable_customXmlMoveFromRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_Markup* CT_CustomXmlCell::add_customXmlMoveFromRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_Markup* pNewChild = pChildGroup->mutable_customXmlMoveFromRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_TrackChange* CT_CustomXmlCell::add_customXmlMoveToRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_TrackChange* pNewChild = pChildGroup->mutable_customXmlMoveToRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_Markup* CT_CustomXmlCell::add_customXmlMoveToRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_Markup* pNewChild = pChildGroup->mutable_customXmlMoveToRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_RunTrackChange* CT_CustomXmlCell::add_ins()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_RunTrackChange* pNewChild = pChildGroup->mutable_ins();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_RunTrackChange* CT_CustomXmlCell::add_del()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_RunTrackChange* pNewChild = pChildGroup->mutable_del();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_RunTrackChange* CT_CustomXmlCell::add_moveFrom()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_RunTrackChange* pNewChild = pChildGroup->mutable_moveFrom();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_RunTrackChange* CT_CustomXmlCell::add_moveTo()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_RunTrackChange* pNewChild = pChildGroup->mutable_moveTo();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

ns_m::CT_OMathPara* CT_CustomXmlCell::add_m_oMathPara()
{
    ChildGroup_4 *pChildGroup = new ChildGroup_4();
    ns_m::CT_OMathPara* pNewChild = pChildGroup->mutable_m_oMathPara();
    m_childGroupList_4.push_back(pChildGroup);
    return pNewChild;
}

ns_m::CT_OMath* CT_CustomXmlCell::add_m_oMath()
{
    ChildGroup_4 *pChildGroup = new ChildGroup_4();
    ns_m::CT_OMath* pNewChild = pChildGroup->mutable_m_oMath();
    m_childGroupList_4.push_back(pChildGroup);
    return pNewChild;
}

void CT_CustomXmlCell::clear()
{
    m_has_uri_attr = false;

    if (m_uri_attr)
    {
        delete m_uri_attr;
        m_uri_attr = NULL;
    }


    m_has_element_attr = false;

    if (m_element_attr)
    {
        delete m_element_attr;
        m_element_attr = NULL;
    }


    m_has_customXmlPr = false;

    if (m_customXmlPr)
    {
        delete m_customXmlPr;
        m_customXmlPr = NULL;
    }


    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }

    {
        vector<ChildGroup_2*>::iterator iter;
        for (iter = m_childGroupList_2.begin(); iter != m_childGroupList_2.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_2.clear();
    }

    {
        vector<ChildGroup_3*>::iterator iter;
        for (iter = m_childGroupList_3.begin(); iter != m_childGroupList_3.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_3.clear();
    }

    {
        vector<ChildGroup_4*>::iterator iter;
        for (iter = m_childGroupList_4.begin(); iter != m_childGroupList_4.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_4.clear();
    }
}

void CT_CustomXmlCell::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_uri_attr)
    {
        m_uri_attr->toXmlAttr("w:uri", _outStream);
    }


    assert(m_has_element_attr);
    if (m_has_element_attr)
    {
        m_element_attr->toXmlAttr("w:element", _outStream);
    }

    _outStream << ">";


    if (m_has_customXmlPr)
    {
        m_customXmlPr->toXmlElem("w:customXmlPr", "", _outStream);
    }

    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_tc())
            {
                (*iter)->get_tc().toXmlElem("w:tc", "", _outStream);
            }


            else if ((*iter)->has_customXml())
            {
                (*iter)->get_customXml().toXmlElem("w:customXml", "", _outStream);
            }


            else if ((*iter)->has_sdt())
            {
                (*iter)->get_sdt().toXmlElem("w:sdt", "", _outStream);
            }


        }
    }

    {
        vector<ChildGroup_2*>::const_iterator iter;
        for (iter = m_childGroupList_2.begin(); iter != m_childGroupList_2.end(); ++iter)
        {
            if ((*iter)->has_proofErr())
            {
                (*iter)->get_proofErr().toXmlElem("w:proofErr", "", _outStream);
            }


            else if ((*iter)->has_permStart())
            {
                (*iter)->get_permStart().toXmlElem("w:permStart", "", _outStream);
            }


            else if ((*iter)->has_permEnd())
            {
                (*iter)->get_permEnd().toXmlElem("w:permEnd", "", _outStream);
            }


        }
    }

    {
        vector<ChildGroup_3*>::const_iterator iter;
        for (iter = m_childGroupList_3.begin(); iter != m_childGroupList_3.end(); ++iter)
        {
            if ((*iter)->has_bookmarkStart())
            {
                (*iter)->get_bookmarkStart().toXmlElem("w:bookmarkStart", "", _outStream);
            }


            else if ((*iter)->has_bookmarkEnd())
            {
                (*iter)->get_bookmarkEnd().toXmlElem("w:bookmarkEnd", "", _outStream);
            }


            else if ((*iter)->has_moveFromRangeStart())
            {
                (*iter)->get_moveFromRangeStart().toXmlElem("w:moveFromRangeStart", "", _outStream);
            }


            else if ((*iter)->has_moveFromRangeEnd())
            {
                (*iter)->get_moveFromRangeEnd().toXmlElem("w:moveFromRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_moveToRangeStart())
            {
                (*iter)->get_moveToRangeStart().toXmlElem("w:moveToRangeStart", "", _outStream);
            }


            else if ((*iter)->has_moveToRangeEnd())
            {
                (*iter)->get_moveToRangeEnd().toXmlElem("w:moveToRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_commentRangeStart())
            {
                (*iter)->get_commentRangeStart().toXmlElem("w:commentRangeStart", "", _outStream);
            }


            else if ((*iter)->has_commentRangeEnd())
            {
                (*iter)->get_commentRangeEnd().toXmlElem("w:commentRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_customXmlInsRangeStart())
            {
                (*iter)->get_customXmlInsRangeStart().toXmlElem("w:customXmlInsRangeStart", "", _outStream);
            }


            else if ((*iter)->has_customXmlInsRangeEnd())
            {
                (*iter)->get_customXmlInsRangeEnd().toXmlElem("w:customXmlInsRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_customXmlDelRangeStart())
            {
                (*iter)->get_customXmlDelRangeStart().toXmlElem("w:customXmlDelRangeStart", "", _outStream);
            }


            else if ((*iter)->has_customXmlDelRangeEnd())
            {
                (*iter)->get_customXmlDelRangeEnd().toXmlElem("w:customXmlDelRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_customXmlMoveFromRangeStart())
            {
                (*iter)->get_customXmlMoveFromRangeStart().toXmlElem("w:customXmlMoveFromRangeStart", "", _outStream);
            }


            else if ((*iter)->has_customXmlMoveFromRangeEnd())
            {
                (*iter)->get_customXmlMoveFromRangeEnd().toXmlElem("w:customXmlMoveFromRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_customXmlMoveToRangeStart())
            {
                (*iter)->get_customXmlMoveToRangeStart().toXmlElem("w:customXmlMoveToRangeStart", "", _outStream);
            }


            else if ((*iter)->has_customXmlMoveToRangeEnd())
            {
                (*iter)->get_customXmlMoveToRangeEnd().toXmlElem("w:customXmlMoveToRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_ins())
            {
                (*iter)->get_ins().toXmlElem("w:ins", "", _outStream);
            }


            else if ((*iter)->has_del())
            {
                (*iter)->get_del().toXmlElem("w:del", "", _outStream);
            }


            else if ((*iter)->has_moveFrom())
            {
                (*iter)->get_moveFrom().toXmlElem("w:moveFrom", "", _outStream);
            }


            else if ((*iter)->has_moveTo())
            {
                (*iter)->get_moveTo().toXmlElem("w:moveTo", "", _outStream);
            }


        }
    }

    {
        vector<ChildGroup_4*>::const_iterator iter;
        for (iter = m_childGroupList_4.begin(); iter != m_childGroupList_4.end(); ++iter)
        {
            if ((*iter)->has_m_oMathPara())
            {
                (*iter)->get_m_oMathPara().toXmlElem("m:oMathPara", "", _outStream);
            }


            else if ((*iter)->has_m_oMath())
            {
                (*iter)->get_m_oMath().toXmlElem("m:oMath", "", _outStream);
            }


        }
    }

    _outStream << "</" << _elemName << ">";
}

const CT_CustomXmlCell& CT_CustomXmlCell::default_instance()
{
    if (!CT_CustomXmlCell::default_instance_)
    {
        CT_CustomXmlCell::default_instance_ = new CT_CustomXmlCell();
    }
    return *CT_CustomXmlCell::default_instance_;
}

bool CT_CustomXmlCell::has_uri_attr() const
{
    return m_has_uri_attr;
}

void CT_CustomXmlCell::set_uri_attr(const ns_s::ST_String& _uri_attr)
{
    m_has_uri_attr = true;
    m_uri_attr = new ns_s::ST_String(_uri_attr);
}

const ns_s::ST_String& CT_CustomXmlCell::get_uri_attr() const
{
    if (m_uri_attr)
    {
        return *m_uri_attr;
    }
    return ns_s::ST_String::default_instance();
}

bool CT_CustomXmlCell::has_element_attr() const
{
    return m_has_element_attr;
}

void CT_CustomXmlCell::set_element_attr(const ns_s::ST_XmlName& _element_attr)
{
    m_has_element_attr = true;
    m_element_attr = new ns_s::ST_XmlName(_element_attr);
}

const ns_s::ST_XmlName& CT_CustomXmlCell::get_element_attr() const
{
    if (m_element_attr)
    {
        return *m_element_attr;
    }
    return ns_s::ST_XmlName::default_instance();
}


// CT_CustomXmlCell::ChildGroup_1
CT_CustomXmlCell::ChildGroup_1::ChildGroup_1()
    :m_has_tc(false),
     m_tc(NULL),
     m_has_customXml(false),
     m_customXml(NULL),
     m_has_sdt(false),
     m_sdt(NULL)
{
}
bool CT_CustomXmlCell::ChildGroup_1::has_tc() const
{
    return m_has_tc;
}

CT_Tc* CT_CustomXmlCell::ChildGroup_1::mutable_tc()
{

    m_has_customXml = false;

    if (m_customXml)
    {
        delete m_customXml;
        m_customXml = NULL;
    }
    ;

    m_has_sdt = false;

    if (m_sdt)
    {
        delete m_sdt;
        m_sdt = NULL;
    }
    ;

    m_has_tc = true;
    if (!m_tc)
    {
        m_tc = new CT_Tc();
    }
    return m_tc;
}

const CT_Tc& CT_CustomXmlCell::ChildGroup_1::get_tc() const
{
    if (m_tc)
    {
        return *m_tc;
    }
    return CT_Tc::default_instance();
}

bool CT_CustomXmlCell::ChildGroup_1::has_customXml() const
{
    return m_has_customXml;
}

CT_CustomXmlCell* CT_CustomXmlCell::ChildGroup_1::mutable_customXml()
{

    m_has_tc = false;

    if (m_tc)
    {
        delete m_tc;
        m_tc = NULL;
    }
    ;

    m_has_sdt = false;

    if (m_sdt)
    {
        delete m_sdt;
        m_sdt = NULL;
    }
    ;

    m_has_customXml = true;
    if (!m_customXml)
    {
        m_customXml = new CT_CustomXmlCell();
    }
    return m_customXml;
}

const CT_CustomXmlCell& CT_CustomXmlCell::ChildGroup_1::get_customXml() const
{
    if (m_customXml)
    {
        return *m_customXml;
    }
    return CT_CustomXmlCell::default_instance();
}

bool CT_CustomXmlCell::ChildGroup_1::has_sdt() const
{
    return m_has_sdt;
}

CT_SdtCell* CT_CustomXmlCell::ChildGroup_1::mutable_sdt()
{

    m_has_tc = false;

    if (m_tc)
    {
        delete m_tc;
        m_tc = NULL;
    }
    ;

    m_has_customXml = false;

    if (m_customXml)
    {
        delete m_customXml;
        m_customXml = NULL;
    }
    ;

    m_has_sdt = true;
    if (!m_sdt)
    {
        m_sdt = new CT_SdtCell();
    }
    return m_sdt;
}

const CT_SdtCell& CT_CustomXmlCell::ChildGroup_1::get_sdt() const
{
    if (m_sdt)
    {
        return *m_sdt;
    }
    return CT_SdtCell::default_instance();
}


// CT_CustomXmlCell::ChildGroup_2
CT_CustomXmlCell::ChildGroup_2::ChildGroup_2()
    :m_has_proofErr(false),
     m_proofErr(NULL),
     m_has_permStart(false),
     m_permStart(NULL),
     m_has_permEnd(false),
     m_permEnd(NULL)
{
}
bool CT_CustomXmlCell::ChildGroup_2::has_proofErr() const
{
    return m_has_proofErr;
}

CT_ProofErr* CT_CustomXmlCell::ChildGroup_2::mutable_proofErr()
{

    m_has_permStart = false;

    if (m_permStart)
    {
        delete m_permStart;
        m_permStart = NULL;
    }
    ;

    m_has_permEnd = false;

    if (m_permEnd)
    {
        delete m_permEnd;
        m_permEnd = NULL;
    }
    ;

    m_has_proofErr = true;
    if (!m_proofErr)
    {
        m_proofErr = new CT_ProofErr();
    }
    return m_proofErr;
}

const CT_ProofErr& CT_CustomXmlCell::ChildGroup_2::get_proofErr() const
{
    if (m_proofErr)
    {
        return *m_proofErr;
    }
    return CT_ProofErr::default_instance();
}

bool CT_CustomXmlCell::ChildGroup_2::has_permStart() const
{
    return m_has_permStart;
}

CT_PermStart* CT_CustomXmlCell::ChildGroup_2::mutable_permStart()
{

    m_has_proofErr = false;

    if (m_proofErr)
    {
        delete m_proofErr;
        m_proofErr = NULL;
    }
    ;

    m_has_permEnd = false;

    if (m_permEnd)
    {
        delete m_permEnd;
        m_permEnd = NULL;
    }
    ;

    m_has_permStart = true;
    if (!m_permStart)
    {
        m_permStart = new CT_PermStart();
    }
    return m_permStart;
}

const CT_PermStart& CT_CustomXmlCell::ChildGroup_2::get_permStart() const
{
    if (m_permStart)
    {
        return *m_permStart;
    }
    return CT_PermStart::default_instance();
}

bool CT_CustomXmlCell::ChildGroup_2::has_permEnd() const
{
    return m_has_permEnd;
}

CT_Perm* CT_CustomXmlCell::ChildGroup_2::mutable_permEnd()
{

    m_has_proofErr = false;

    if (m_proofErr)
    {
        delete m_proofErr;
        m_proofErr = NULL;
    }
    ;

    m_has_permStart = false;

    if (m_permStart)
    {
        delete m_permStart;
        m_permStart = NULL;
    }
    ;

    m_has_permEnd = true;
    if (!m_permEnd)
    {
        m_permEnd = new CT_Perm();
    }
    return m_permEnd;
}

const CT_Perm& CT_CustomXmlCell::ChildGroup_2::get_permEnd() const
{
    if (m_permEnd)
    {
        return *m_permEnd;
    }
    return CT_Perm::default_instance();
}


// CT_CustomXmlCell::ChildGroup_3
CT_CustomXmlCell::ChildGroup_3::ChildGroup_3()
    :m_has_bookmarkStart(false),
     m_bookmarkStart(NULL),
     m_has_bookmarkEnd(false),
     m_bookmarkEnd(NULL),
     m_has_moveFromRangeStart(false),
     m_moveFromRangeStart(NULL),
     m_has_moveFromRangeEnd(false),
     m_moveFromRangeEnd(NULL),
     m_has_moveToRangeStart(false),
     m_moveToRangeStart(NULL),
     m_has_moveToRangeEnd(false),
     m_moveToRangeEnd(NULL),
     m_has_commentRangeStart(false),
     m_commentRangeStart(NULL),
     m_has_commentRangeEnd(false),
     m_commentRangeEnd(NULL),
     m_has_customXmlInsRangeStart(false),
     m_customXmlInsRangeStart(NULL),
     m_has_customXmlInsRangeEnd(false),
     m_customXmlInsRangeEnd(NULL),
     m_has_customXmlDelRangeStart(false),
     m_customXmlDelRangeStart(NULL),
     m_has_customXmlDelRangeEnd(false),
     m_customXmlDelRangeEnd(NULL),
     m_has_customXmlMoveFromRangeStart(false),
     m_customXmlMoveFromRangeStart(NULL),
     m_has_customXmlMoveFromRangeEnd(false),
     m_customXmlMoveFromRangeEnd(NULL),
     m_has_customXmlMoveToRangeStart(false),
     m_customXmlMoveToRangeStart(NULL),
     m_has_customXmlMoveToRangeEnd(false),
     m_customXmlMoveToRangeEnd(NULL),
     m_has_ins(false),
     m_ins(NULL),
     m_has_del(false),
     m_del(NULL),
     m_has_moveFrom(false),
     m_moveFrom(NULL),
     m_has_moveTo(false),
     m_moveTo(NULL)
{
}
bool CT_CustomXmlCell::ChildGroup_3::has_bookmarkStart() const
{
    return m_has_bookmarkStart;
}

CT_Bookmark* CT_CustomXmlCell::ChildGroup_3::mutable_bookmarkStart()
{

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_bookmarkStart = true;
    if (!m_bookmarkStart)
    {
        m_bookmarkStart = new CT_Bookmark();
    }
    return m_bookmarkStart;
}

const CT_Bookmark& CT_CustomXmlCell::ChildGroup_3::get_bookmarkStart() const
{
    if (m_bookmarkStart)
    {
        return *m_bookmarkStart;
    }
    return CT_Bookmark::default_instance();
}

bool CT_CustomXmlCell::ChildGroup_3::has_bookmarkEnd() const
{
    return m_has_bookmarkEnd;
}

CT_MarkupRange* CT_CustomXmlCell::ChildGroup_3::mutable_bookmarkEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_bookmarkEnd = true;
    if (!m_bookmarkEnd)
    {
        m_bookmarkEnd = new CT_MarkupRange();
    }
    return m_bookmarkEnd;
}

const CT_MarkupRange& CT_CustomXmlCell::ChildGroup_3::get_bookmarkEnd() const
{
    if (m_bookmarkEnd)
    {
        return *m_bookmarkEnd;
    }
    return CT_MarkupRange::default_instance();
}

bool CT_CustomXmlCell::ChildGroup_3::has_moveFromRangeStart() const
{
    return m_has_moveFromRangeStart;
}

CT_MoveBookmark* CT_CustomXmlCell::ChildGroup_3::mutable_moveFromRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_moveFromRangeStart = true;
    if (!m_moveFromRangeStart)
    {
        m_moveFromRangeStart = new CT_MoveBookmark();
    }
    return m_moveFromRangeStart;
}

const CT_MoveBookmark& CT_CustomXmlCell::ChildGroup_3::get_moveFromRangeStart() const
{
    if (m_moveFromRangeStart)
    {
        return *m_moveFromRangeStart;
    }
    return CT_MoveBookmark::default_instance();
}

bool CT_CustomXmlCell::ChildGroup_3::has_moveFromRangeEnd() const
{
    return m_has_moveFromRangeEnd;
}

CT_MarkupRange* CT_CustomXmlCell::ChildGroup_3::mutable_moveFromRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_moveFromRangeEnd = true;
    if (!m_moveFromRangeEnd)
    {
        m_moveFromRangeEnd = new CT_MarkupRange();
    }
    return m_moveFromRangeEnd;
}

const CT_MarkupRange& CT_CustomXmlCell::ChildGroup_3::get_moveFromRangeEnd() const
{
    if (m_moveFromRangeEnd)
    {
        return *m_moveFromRangeEnd;
    }
    return CT_MarkupRange::default_instance();
}

bool CT_CustomXmlCell::ChildGroup_3::has_moveToRangeStart() const
{
    return m_has_moveToRangeStart;
}

CT_MoveBookmark* CT_CustomXmlCell::ChildGroup_3::mutable_moveToRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_moveToRangeStart = true;
    if (!m_moveToRangeStart)
    {
        m_moveToRangeStart = new CT_MoveBookmark();
    }
    return m_moveToRangeStart;
}

const CT_MoveBookmark& CT_CustomXmlCell::ChildGroup_3::get_moveToRangeStart() const
{
    if (m_moveToRangeStart)
    {
        return *m_moveToRangeStart;
    }
    return CT_MoveBookmark::default_instance();
}

bool CT_CustomXmlCell::ChildGroup_3::has_moveToRangeEnd() const
{
    return m_has_moveToRangeEnd;
}

CT_MarkupRange* CT_CustomXmlCell::ChildGroup_3::mutable_moveToRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_moveToRangeEnd = true;
    if (!m_moveToRangeEnd)
    {
        m_moveToRangeEnd = new CT_MarkupRange();
    }
    return m_moveToRangeEnd;
}

const CT_MarkupRange& CT_CustomXmlCell::ChildGroup_3::get_moveToRangeEnd() const
{
    if (m_moveToRangeEnd)
    {
        return *m_moveToRangeEnd;
    }
    return CT_MarkupRange::default_instance();
}

bool CT_CustomXmlCell::ChildGroup_3::has_commentRangeStart() const
{
    return m_has_commentRangeStart;
}

CT_MarkupRange* CT_CustomXmlCell::ChildGroup_3::mutable_commentRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_commentRangeStart = true;
    if (!m_commentRangeStart)
    {
        m_commentRangeStart = new CT_MarkupRange();
    }
    return m_commentRangeStart;
}

const CT_MarkupRange& CT_CustomXmlCell::ChildGroup_3::get_commentRangeStart() const
{
    if (m_commentRangeStart)
    {
        return *m_commentRangeStart;
    }
    return CT_MarkupRange::default_instance();
}

bool CT_CustomXmlCell::ChildGroup_3::has_commentRangeEnd() const
{
    return m_has_commentRangeEnd;
}

CT_MarkupRange* CT_CustomXmlCell::ChildGroup_3::mutable_commentRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_commentRangeEnd = true;
    if (!m_commentRangeEnd)
    {
        m_commentRangeEnd = new CT_MarkupRange();
    }
    return m_commentRangeEnd;
}

const CT_MarkupRange& CT_CustomXmlCell::ChildGroup_3::get_commentRangeEnd() const
{
    if (m_commentRangeEnd)
    {
        return *m_commentRangeEnd;
    }
    return CT_MarkupRange::default_instance();
}

bool CT_CustomXmlCell::ChildGroup_3::has_customXmlInsRangeStart() const
{
    return m_has_customXmlInsRangeStart;
}

CT_TrackChange* CT_CustomXmlCell::ChildGroup_3::mutable_customXmlInsRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = true;
    if (!m_customXmlInsRangeStart)
    {
        m_customXmlInsRangeStart = new CT_TrackChange();
    }
    return m_customXmlInsRangeStart;
}

const CT_TrackChange& CT_CustomXmlCell::ChildGroup_3::get_customXmlInsRangeStart() const
{
    if (m_customXmlInsRangeStart)
    {
        return *m_customXmlInsRangeStart;
    }
    return CT_TrackChange::default_instance();
}

bool CT_CustomXmlCell::ChildGroup_3::has_customXmlInsRangeEnd() const
{
    return m_has_customXmlInsRangeEnd;
}

CT_Markup* CT_CustomXmlCell::ChildGroup_3::mutable_customXmlInsRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = true;
    if (!m_customXmlInsRangeEnd)
    {
        m_customXmlInsRangeEnd = new CT_Markup();
    }
    return m_customXmlInsRangeEnd;
}

const CT_Markup& CT_CustomXmlCell::ChildGroup_3::get_customXmlInsRangeEnd() const
{
    if (m_customXmlInsRangeEnd)
    {
        return *m_customXmlInsRangeEnd;
    }
    return CT_Markup::default_instance();
}

bool CT_CustomXmlCell::ChildGroup_3::has_customXmlDelRangeStart() const
{
    return m_has_customXmlDelRangeStart;
}

CT_TrackChange* CT_CustomXmlCell::ChildGroup_3::mutable_customXmlDelRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = true;
    if (!m_customXmlDelRangeStart)
    {
        m_customXmlDelRangeStart = new CT_TrackChange();
    }
    return m_customXmlDelRangeStart;
}

const CT_TrackChange& CT_CustomXmlCell::ChildGroup_3::get_customXmlDelRangeStart() const
{
    if (m_customXmlDelRangeStart)
    {
        return *m_customXmlDelRangeStart;
    }
    return CT_TrackChange::default_instance();
}

bool CT_CustomXmlCell::ChildGroup_3::has_customXmlDelRangeEnd() const
{
    return m_has_customXmlDelRangeEnd;
}

CT_Markup* CT_CustomXmlCell::ChildGroup_3::mutable_customXmlDelRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = true;
    if (!m_customXmlDelRangeEnd)
    {
        m_customXmlDelRangeEnd = new CT_Markup();
    }
    return m_customXmlDelRangeEnd;
}

const CT_Markup& CT_CustomXmlCell::ChildGroup_3::get_customXmlDelRangeEnd() const
{
    if (m_customXmlDelRangeEnd)
    {
        return *m_customXmlDelRangeEnd;
    }
    return CT_Markup::default_instance();
}

bool CT_CustomXmlCell::ChildGroup_3::has_customXmlMoveFromRangeStart() const
{
    return m_has_customXmlMoveFromRangeStart;
}

CT_TrackChange* CT_CustomXmlCell::ChildGroup_3::mutable_customXmlMoveFromRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = true;
    if (!m_customXmlMoveFromRangeStart)
    {
        m_customXmlMoveFromRangeStart = new CT_TrackChange();
    }
    return m_customXmlMoveFromRangeStart;
}

const CT_TrackChange& CT_CustomXmlCell::ChildGroup_3::get_customXmlMoveFromRangeStart() const
{
    if (m_customXmlMoveFromRangeStart)
    {
        return *m_customXmlMoveFromRangeStart;
    }
    return CT_TrackChange::default_instance();
}

bool CT_CustomXmlCell::ChildGroup_3::has_customXmlMoveFromRangeEnd() const
{
    return m_has_customXmlMoveFromRangeEnd;
}

CT_Markup* CT_CustomXmlCell::ChildGroup_3::mutable_customXmlMoveFromRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = true;
    if (!m_customXmlMoveFromRangeEnd)
    {
        m_customXmlMoveFromRangeEnd = new CT_Markup();
    }
    return m_customXmlMoveFromRangeEnd;
}

const CT_Markup& CT_CustomXmlCell::ChildGroup_3::get_customXmlMoveFromRangeEnd() const
{
    if (m_customXmlMoveFromRangeEnd)
    {
        return *m_customXmlMoveFromRangeEnd;
    }
    return CT_Markup::default_instance();
}

bool CT_CustomXmlCell::ChildGroup_3::has_customXmlMoveToRangeStart() const
{
    return m_has_customXmlMoveToRangeStart;
}

CT_TrackChange* CT_CustomXmlCell::ChildGroup_3::mutable_customXmlMoveToRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = true;
    if (!m_customXmlMoveToRangeStart)
    {
        m_customXmlMoveToRangeStart = new CT_TrackChange();
    }
    return m_customXmlMoveToRangeStart;
}

const CT_TrackChange& CT_CustomXmlCell::ChildGroup_3::get_customXmlMoveToRangeStart() const
{
    if (m_customXmlMoveToRangeStart)
    {
        return *m_customXmlMoveToRangeStart;
    }
    return CT_TrackChange::default_instance();
}

bool CT_CustomXmlCell::ChildGroup_3::has_customXmlMoveToRangeEnd() const
{
    return m_has_customXmlMoveToRangeEnd;
}

CT_Markup* CT_CustomXmlCell::ChildGroup_3::mutable_customXmlMoveToRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = true;
    if (!m_customXmlMoveToRangeEnd)
    {
        m_customXmlMoveToRangeEnd = new CT_Markup();
    }
    return m_customXmlMoveToRangeEnd;
}

const CT_Markup& CT_CustomXmlCell::ChildGroup_3::get_customXmlMoveToRangeEnd() const
{
    if (m_customXmlMoveToRangeEnd)
    {
        return *m_customXmlMoveToRangeEnd;
    }
    return CT_Markup::default_instance();
}

bool CT_CustomXmlCell::ChildGroup_3::has_ins() const
{
    return m_has_ins;
}

CT_RunTrackChange* CT_CustomXmlCell::ChildGroup_3::mutable_ins()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_ins = true;
    if (!m_ins)
    {
        m_ins = new CT_RunTrackChange();
    }
    return m_ins;
}

const CT_RunTrackChange& CT_CustomXmlCell::ChildGroup_3::get_ins() const
{
    if (m_ins)
    {
        return *m_ins;
    }
    return CT_RunTrackChange::default_instance();
}

bool CT_CustomXmlCell::ChildGroup_3::has_del() const
{
    return m_has_del;
}

CT_RunTrackChange* CT_CustomXmlCell::ChildGroup_3::mutable_del()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_del = true;
    if (!m_del)
    {
        m_del = new CT_RunTrackChange();
    }
    return m_del;
}

const CT_RunTrackChange& CT_CustomXmlCell::ChildGroup_3::get_del() const
{
    if (m_del)
    {
        return *m_del;
    }
    return CT_RunTrackChange::default_instance();
}

bool CT_CustomXmlCell::ChildGroup_3::has_moveFrom() const
{
    return m_has_moveFrom;
}

CT_RunTrackChange* CT_CustomXmlCell::ChildGroup_3::mutable_moveFrom()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_moveFrom = true;
    if (!m_moveFrom)
    {
        m_moveFrom = new CT_RunTrackChange();
    }
    return m_moveFrom;
}

const CT_RunTrackChange& CT_CustomXmlCell::ChildGroup_3::get_moveFrom() const
{
    if (m_moveFrom)
    {
        return *m_moveFrom;
    }
    return CT_RunTrackChange::default_instance();
}

bool CT_CustomXmlCell::ChildGroup_3::has_moveTo() const
{
    return m_has_moveTo;
}

CT_RunTrackChange* CT_CustomXmlCell::ChildGroup_3::mutable_moveTo()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = true;
    if (!m_moveTo)
    {
        m_moveTo = new CT_RunTrackChange();
    }
    return m_moveTo;
}

const CT_RunTrackChange& CT_CustomXmlCell::ChildGroup_3::get_moveTo() const
{
    if (m_moveTo)
    {
        return *m_moveTo;
    }
    return CT_RunTrackChange::default_instance();
}


// CT_CustomXmlCell::ChildGroup_4
CT_CustomXmlCell::ChildGroup_4::ChildGroup_4()
    :m_has_m_oMathPara(false),
     m_m_oMathPara(NULL),
     m_has_m_oMath(false),
     m_m_oMath(NULL)
{
}
bool CT_CustomXmlCell::ChildGroup_4::has_m_oMathPara() const
{
    return m_has_m_oMathPara;
}

ns_m::CT_OMathPara* CT_CustomXmlCell::ChildGroup_4::mutable_m_oMathPara()
{

    m_has_m_oMath = false;

    if (m_m_oMath)
    {
        delete m_m_oMath;
        m_m_oMath = NULL;
    }
    ;

    m_has_m_oMathPara = true;
    if (!m_m_oMathPara)
    {
        m_m_oMathPara = new ns_m::CT_OMathPara();
    }
    return m_m_oMathPara;
}

const ns_m::CT_OMathPara& CT_CustomXmlCell::ChildGroup_4::get_m_oMathPara() const
{
    if (m_m_oMathPara)
    {
        return *m_m_oMathPara;
    }
    return ns_m::CT_OMathPara::default_instance();
}

bool CT_CustomXmlCell::ChildGroup_4::has_m_oMath() const
{
    return m_has_m_oMath;
}

ns_m::CT_OMath* CT_CustomXmlCell::ChildGroup_4::mutable_m_oMath()
{

    m_has_m_oMathPara = false;

    if (m_m_oMathPara)
    {
        delete m_m_oMathPara;
        m_m_oMathPara = NULL;
    }
    ;

    m_has_m_oMath = true;
    if (!m_m_oMath)
    {
        m_m_oMath = new ns_m::CT_OMath();
    }
    return m_m_oMath;
}

const ns_m::CT_OMath& CT_CustomXmlCell::ChildGroup_4::get_m_oMath() const
{
    if (m_m_oMath)
    {
        return *m_m_oMath;
    }
    return ns_m::CT_OMath::default_instance();
}

CT_CustomXmlCell* CT_CustomXmlCell::default_instance_ = NULL;

// CT_SmartTagPr
CT_SmartTagPr::CT_SmartTagPr()

{
}
CT_SmartTagPr::~CT_SmartTagPr()
{
    clear();
}
CT_Attr* CT_SmartTagPr::add_attr()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Attr* pNewChild = pChildGroup->mutable_attr();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

void CT_SmartTagPr::clear()
{
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
}

void CT_SmartTagPr::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";

    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_attr())
            {
                (*iter)->get_attr().toXmlElem("w:attr", "", _outStream);
            }


        }
    }

    _outStream << "</" << _elemName << ">";
}

const CT_SmartTagPr& CT_SmartTagPr::default_instance()
{
    if (!CT_SmartTagPr::default_instance_)
    {
        CT_SmartTagPr::default_instance_ = new CT_SmartTagPr();
    }
    return *CT_SmartTagPr::default_instance_;
}


// CT_SmartTagPr::ChildGroup_1
CT_SmartTagPr::ChildGroup_1::ChildGroup_1()
    :m_has_attr(false),
     m_attr(NULL)
{
}
bool CT_SmartTagPr::ChildGroup_1::has_attr() const
{
    return m_has_attr;
}

CT_Attr* CT_SmartTagPr::ChildGroup_1::mutable_attr()
{

    m_has_attr = true;
    if (!m_attr)
    {
        m_attr = new CT_Attr();
    }
    return m_attr;
}

const CT_Attr& CT_SmartTagPr::ChildGroup_1::get_attr() const
{
    if (m_attr)
    {
        return *m_attr;
    }
    return CT_Attr::default_instance();
}

CT_SmartTagPr* CT_SmartTagPr::default_instance_ = NULL;

// CT_P
CT_P::CT_P()
    :m_has_pPr(false),
     m_pPr(NULL),
     m_has_rsidRPr_attr(false),
     m_rsidRPr_attr(NULL),
     m_has_rsidR_attr(false),
     m_rsidR_attr(NULL),
     m_has_rsidDel_attr(false),
     m_rsidDel_attr(NULL),
     m_has_rsidP_attr(false),
     m_rsidP_attr(NULL),
     m_has_rsidRDefault_attr(false),
     m_rsidRDefault_attr(NULL)
{
}
CT_P::~CT_P()
{
    clear();
}
bool CT_P::has_pPr() const
{
    return m_has_pPr;
}

CT_PPr* CT_P::mutable_pPr()
{
    m_has_pPr = true;
    if (!m_pPr)
    {
        m_pPr = new CT_PPr();
    }
    return m_pPr;
}

const CT_PPr& CT_P::get_pPr() const
{
    if (m_pPr)
    {
        return *m_pPr;
    }
    return CT_PPr::default_instance();
}

CT_CustomXmlRun* CT_P::add_customXml()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_CustomXmlRun* pNewChild = pChildGroup->mutable_customXml();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_SmartTagRun* CT_P::add_smartTag()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_SmartTagRun* pNewChild = pChildGroup->mutable_smartTag();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_SdtRun* CT_P::add_sdt()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_SdtRun* pNewChild = pChildGroup->mutable_sdt();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_DirContentRun* CT_P::add_dir()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_DirContentRun* pNewChild = pChildGroup->mutable_dir();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_BdoContentRun* CT_P::add_bdo()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_BdoContentRun* pNewChild = pChildGroup->mutable_bdo();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_R* CT_P::add_r()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_R* pNewChild = pChildGroup->mutable_r();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_ProofErr* CT_P::add_proofErr()
{
    ChildGroup_2 *pChildGroup = new ChildGroup_2();
    CT_ProofErr* pNewChild = pChildGroup->mutable_proofErr();
    m_childGroupList_2.push_back(pChildGroup);
    return pNewChild;
}

CT_PermStart* CT_P::add_permStart()
{
    ChildGroup_2 *pChildGroup = new ChildGroup_2();
    CT_PermStart* pNewChild = pChildGroup->mutable_permStart();
    m_childGroupList_2.push_back(pChildGroup);
    return pNewChild;
}

CT_Perm* CT_P::add_permEnd()
{
    ChildGroup_2 *pChildGroup = new ChildGroup_2();
    CT_Perm* pNewChild = pChildGroup->mutable_permEnd();
    m_childGroupList_2.push_back(pChildGroup);
    return pNewChild;
}

CT_Bookmark* CT_P::add_bookmarkStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_Bookmark* pNewChild = pChildGroup->mutable_bookmarkStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MarkupRange* CT_P::add_bookmarkEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MarkupRange* pNewChild = pChildGroup->mutable_bookmarkEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MoveBookmark* CT_P::add_moveFromRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MoveBookmark* pNewChild = pChildGroup->mutable_moveFromRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MarkupRange* CT_P::add_moveFromRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MarkupRange* pNewChild = pChildGroup->mutable_moveFromRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MoveBookmark* CT_P::add_moveToRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MoveBookmark* pNewChild = pChildGroup->mutable_moveToRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MarkupRange* CT_P::add_moveToRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MarkupRange* pNewChild = pChildGroup->mutable_moveToRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MarkupRange* CT_P::add_commentRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MarkupRange* pNewChild = pChildGroup->mutable_commentRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MarkupRange* CT_P::add_commentRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MarkupRange* pNewChild = pChildGroup->mutable_commentRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_TrackChange* CT_P::add_customXmlInsRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_TrackChange* pNewChild = pChildGroup->mutable_customXmlInsRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_Markup* CT_P::add_customXmlInsRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_Markup* pNewChild = pChildGroup->mutable_customXmlInsRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_TrackChange* CT_P::add_customXmlDelRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_TrackChange* pNewChild = pChildGroup->mutable_customXmlDelRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_Markup* CT_P::add_customXmlDelRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_Markup* pNewChild = pChildGroup->mutable_customXmlDelRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_TrackChange* CT_P::add_customXmlMoveFromRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_TrackChange* pNewChild = pChildGroup->mutable_customXmlMoveFromRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_Markup* CT_P::add_customXmlMoveFromRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_Markup* pNewChild = pChildGroup->mutable_customXmlMoveFromRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_TrackChange* CT_P::add_customXmlMoveToRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_TrackChange* pNewChild = pChildGroup->mutable_customXmlMoveToRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_Markup* CT_P::add_customXmlMoveToRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_Markup* pNewChild = pChildGroup->mutable_customXmlMoveToRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_RunTrackChange* CT_P::add_ins()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_RunTrackChange* pNewChild = pChildGroup->mutable_ins();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_RunTrackChange* CT_P::add_del()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_RunTrackChange* pNewChild = pChildGroup->mutable_del();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_RunTrackChange* CT_P::add_moveFrom()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_RunTrackChange* pNewChild = pChildGroup->mutable_moveFrom();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_RunTrackChange* CT_P::add_moveTo()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_RunTrackChange* pNewChild = pChildGroup->mutable_moveTo();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

ns_m::CT_OMathPara* CT_P::add_m_oMathPara()
{
    ChildGroup_4 *pChildGroup = new ChildGroup_4();
    ns_m::CT_OMathPara* pNewChild = pChildGroup->mutable_m_oMathPara();
    m_childGroupList_4.push_back(pChildGroup);
    return pNewChild;
}

ns_m::CT_OMath* CT_P::add_m_oMath()
{
    ChildGroup_4 *pChildGroup = new ChildGroup_4();
    ns_m::CT_OMath* pNewChild = pChildGroup->mutable_m_oMath();
    m_childGroupList_4.push_back(pChildGroup);
    return pNewChild;
}

CT_SimpleField* CT_P::add_fldSimple()
{
    ChildGroup_4 *pChildGroup = new ChildGroup_4();
    CT_SimpleField* pNewChild = pChildGroup->mutable_fldSimple();
    m_childGroupList_4.push_back(pChildGroup);
    return pNewChild;
}

CT_Hyperlink* CT_P::add_hyperlink()
{
    ChildGroup_4 *pChildGroup = new ChildGroup_4();
    CT_Hyperlink* pNewChild = pChildGroup->mutable_hyperlink();
    m_childGroupList_4.push_back(pChildGroup);
    return pNewChild;
}

CT_Rel* CT_P::add_subDoc()
{
    ChildGroup_4 *pChildGroup = new ChildGroup_4();
    CT_Rel* pNewChild = pChildGroup->mutable_subDoc();
    m_childGroupList_4.push_back(pChildGroup);
    return pNewChild;
}

void CT_P::clear()
{
    m_has_rsidRPr_attr = false;

    if (m_rsidRPr_attr)
    {
        delete m_rsidRPr_attr;
        m_rsidRPr_attr = NULL;
    }


    m_has_rsidR_attr = false;

    if (m_rsidR_attr)
    {
        delete m_rsidR_attr;
        m_rsidR_attr = NULL;
    }


    m_has_rsidDel_attr = false;

    if (m_rsidDel_attr)
    {
        delete m_rsidDel_attr;
        m_rsidDel_attr = NULL;
    }


    m_has_rsidP_attr = false;

    if (m_rsidP_attr)
    {
        delete m_rsidP_attr;
        m_rsidP_attr = NULL;
    }


    m_has_rsidRDefault_attr = false;

    if (m_rsidRDefault_attr)
    {
        delete m_rsidRDefault_attr;
        m_rsidRDefault_attr = NULL;
    }


    m_has_pPr = false;

    if (m_pPr)
    {
        delete m_pPr;
        m_pPr = NULL;
    }


    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }

    {
        vector<ChildGroup_2*>::iterator iter;
        for (iter = m_childGroupList_2.begin(); iter != m_childGroupList_2.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_2.clear();
    }

    {
        vector<ChildGroup_3*>::iterator iter;
        for (iter = m_childGroupList_3.begin(); iter != m_childGroupList_3.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_3.clear();
    }

    {
        vector<ChildGroup_4*>::iterator iter;
        for (iter = m_childGroupList_4.begin(); iter != m_childGroupList_4.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_4.clear();
    }
}

void CT_P::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_rsidRPr_attr)
    {
        m_rsidRPr_attr->toXmlAttr("w:rsidRPr", _outStream);
    }



    if (m_has_rsidR_attr)
    {
        m_rsidR_attr->toXmlAttr("w:rsidR", _outStream);
    }



    if (m_has_rsidDel_attr)
    {
        m_rsidDel_attr->toXmlAttr("w:rsidDel", _outStream);
    }



    if (m_has_rsidP_attr)
    {
        m_rsidP_attr->toXmlAttr("w:rsidP", _outStream);
    }



    if (m_has_rsidRDefault_attr)
    {
        m_rsidRDefault_attr->toXmlAttr("w:rsidRDefault", _outStream);
    }

    _outStream << ">";


    if (m_has_pPr)
    {
        m_pPr->toXmlElem("w:pPr", "", _outStream);
    }

    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_customXml())
            {
                (*iter)->get_customXml().toXmlElem("w:customXml", "", _outStream);
            }


            else if ((*iter)->has_smartTag())
            {
                (*iter)->get_smartTag().toXmlElem("w:smartTag", "", _outStream);
            }


            else if ((*iter)->has_sdt())
            {
                (*iter)->get_sdt().toXmlElem("w:sdt", "", _outStream);
            }


            else if ((*iter)->has_dir())
            {
                (*iter)->get_dir().toXmlElem("w:dir", "", _outStream);
            }


            else if ((*iter)->has_bdo())
            {
                (*iter)->get_bdo().toXmlElem("w:bdo", "", _outStream);
            }


            else if ((*iter)->has_r())
            {
                (*iter)->get_r().toXmlElem("w:r", "", _outStream);
            }


        }
    }

    {
        vector<ChildGroup_2*>::const_iterator iter;
        for (iter = m_childGroupList_2.begin(); iter != m_childGroupList_2.end(); ++iter)
        {
            if ((*iter)->has_proofErr())
            {
                (*iter)->get_proofErr().toXmlElem("w:proofErr", "", _outStream);
            }


            else if ((*iter)->has_permStart())
            {
                (*iter)->get_permStart().toXmlElem("w:permStart", "", _outStream);
            }


            else if ((*iter)->has_permEnd())
            {
                (*iter)->get_permEnd().toXmlElem("w:permEnd", "", _outStream);
            }


        }
    }

    {
        vector<ChildGroup_3*>::const_iterator iter;
        for (iter = m_childGroupList_3.begin(); iter != m_childGroupList_3.end(); ++iter)
        {
            if ((*iter)->has_bookmarkStart())
            {
                (*iter)->get_bookmarkStart().toXmlElem("w:bookmarkStart", "", _outStream);
            }


            else if ((*iter)->has_bookmarkEnd())
            {
                (*iter)->get_bookmarkEnd().toXmlElem("w:bookmarkEnd", "", _outStream);
            }


            else if ((*iter)->has_moveFromRangeStart())
            {
                (*iter)->get_moveFromRangeStart().toXmlElem("w:moveFromRangeStart", "", _outStream);
            }


            else if ((*iter)->has_moveFromRangeEnd())
            {
                (*iter)->get_moveFromRangeEnd().toXmlElem("w:moveFromRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_moveToRangeStart())
            {
                (*iter)->get_moveToRangeStart().toXmlElem("w:moveToRangeStart", "", _outStream);
            }


            else if ((*iter)->has_moveToRangeEnd())
            {
                (*iter)->get_moveToRangeEnd().toXmlElem("w:moveToRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_commentRangeStart())
            {
                (*iter)->get_commentRangeStart().toXmlElem("w:commentRangeStart", "", _outStream);
            }


            else if ((*iter)->has_commentRangeEnd())
            {
                (*iter)->get_commentRangeEnd().toXmlElem("w:commentRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_customXmlInsRangeStart())
            {
                (*iter)->get_customXmlInsRangeStart().toXmlElem("w:customXmlInsRangeStart", "", _outStream);
            }


            else if ((*iter)->has_customXmlInsRangeEnd())
            {
                (*iter)->get_customXmlInsRangeEnd().toXmlElem("w:customXmlInsRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_customXmlDelRangeStart())
            {
                (*iter)->get_customXmlDelRangeStart().toXmlElem("w:customXmlDelRangeStart", "", _outStream);
            }


            else if ((*iter)->has_customXmlDelRangeEnd())
            {
                (*iter)->get_customXmlDelRangeEnd().toXmlElem("w:customXmlDelRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_customXmlMoveFromRangeStart())
            {
                (*iter)->get_customXmlMoveFromRangeStart().toXmlElem("w:customXmlMoveFromRangeStart", "", _outStream);
            }


            else if ((*iter)->has_customXmlMoveFromRangeEnd())
            {
                (*iter)->get_customXmlMoveFromRangeEnd().toXmlElem("w:customXmlMoveFromRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_customXmlMoveToRangeStart())
            {
                (*iter)->get_customXmlMoveToRangeStart().toXmlElem("w:customXmlMoveToRangeStart", "", _outStream);
            }


            else if ((*iter)->has_customXmlMoveToRangeEnd())
            {
                (*iter)->get_customXmlMoveToRangeEnd().toXmlElem("w:customXmlMoveToRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_ins())
            {
                (*iter)->get_ins().toXmlElem("w:ins", "", _outStream);
            }


            else if ((*iter)->has_del())
            {
                (*iter)->get_del().toXmlElem("w:del", "", _outStream);
            }


            else if ((*iter)->has_moveFrom())
            {
                (*iter)->get_moveFrom().toXmlElem("w:moveFrom", "", _outStream);
            }


            else if ((*iter)->has_moveTo())
            {
                (*iter)->get_moveTo().toXmlElem("w:moveTo", "", _outStream);
            }


        }
    }

    {
        vector<ChildGroup_4*>::const_iterator iter;
        for (iter = m_childGroupList_4.begin(); iter != m_childGroupList_4.end(); ++iter)
        {
            if ((*iter)->has_m_oMathPara())
            {
                (*iter)->get_m_oMathPara().toXmlElem("m:oMathPara", "", _outStream);
            }


            else if ((*iter)->has_m_oMath())
            {
                (*iter)->get_m_oMath().toXmlElem("m:oMath", "", _outStream);
            }


            else if ((*iter)->has_fldSimple())
            {
                (*iter)->get_fldSimple().toXmlElem("w:fldSimple", "", _outStream);
            }


            else if ((*iter)->has_hyperlink())
            {
                (*iter)->get_hyperlink().toXmlElem("w:hyperlink", "", _outStream);
            }


            else if ((*iter)->has_subDoc())
            {
                (*iter)->get_subDoc().toXmlElem("w:subDoc", "", _outStream);
            }


        }
    }

    _outStream << "</" << _elemName << ">";
}

const CT_P& CT_P::default_instance()
{
    if (!CT_P::default_instance_)
    {
        CT_P::default_instance_ = new CT_P();
    }
    return *CT_P::default_instance_;
}

bool CT_P::has_rsidRPr_attr() const
{
    return m_has_rsidRPr_attr;
}

void CT_P::set_rsidRPr_attr(const ST_LongHexNumber& _rsidRPr_attr)
{
    m_has_rsidRPr_attr = true;
    m_rsidRPr_attr = new ST_LongHexNumber(_rsidRPr_attr);
}

const ST_LongHexNumber& CT_P::get_rsidRPr_attr() const
{
    if (m_rsidRPr_attr)
    {
        return *m_rsidRPr_attr;
    }
    return ST_LongHexNumber::default_instance();
}

bool CT_P::has_rsidR_attr() const
{
    return m_has_rsidR_attr;
}

void CT_P::set_rsidR_attr(const ST_LongHexNumber& _rsidR_attr)
{
    m_has_rsidR_attr = true;
    m_rsidR_attr = new ST_LongHexNumber(_rsidR_attr);
}

const ST_LongHexNumber& CT_P::get_rsidR_attr() const
{
    if (m_rsidR_attr)
    {
        return *m_rsidR_attr;
    }
    return ST_LongHexNumber::default_instance();
}

bool CT_P::has_rsidDel_attr() const
{
    return m_has_rsidDel_attr;
}

void CT_P::set_rsidDel_attr(const ST_LongHexNumber& _rsidDel_attr)
{
    m_has_rsidDel_attr = true;
    m_rsidDel_attr = new ST_LongHexNumber(_rsidDel_attr);
}

const ST_LongHexNumber& CT_P::get_rsidDel_attr() const
{
    if (m_rsidDel_attr)
    {
        return *m_rsidDel_attr;
    }
    return ST_LongHexNumber::default_instance();
}

bool CT_P::has_rsidP_attr() const
{
    return m_has_rsidP_attr;
}

void CT_P::set_rsidP_attr(const ST_LongHexNumber& _rsidP_attr)
{
    m_has_rsidP_attr = true;
    m_rsidP_attr = new ST_LongHexNumber(_rsidP_attr);
}

const ST_LongHexNumber& CT_P::get_rsidP_attr() const
{
    if (m_rsidP_attr)
    {
        return *m_rsidP_attr;
    }
    return ST_LongHexNumber::default_instance();
}

bool CT_P::has_rsidRDefault_attr() const
{
    return m_has_rsidRDefault_attr;
}

void CT_P::set_rsidRDefault_attr(const ST_LongHexNumber& _rsidRDefault_attr)
{
    m_has_rsidRDefault_attr = true;
    m_rsidRDefault_attr = new ST_LongHexNumber(_rsidRDefault_attr);
}

const ST_LongHexNumber& CT_P::get_rsidRDefault_attr() const
{
    if (m_rsidRDefault_attr)
    {
        return *m_rsidRDefault_attr;
    }
    return ST_LongHexNumber::default_instance();
}


// CT_P::ChildGroup_1
CT_P::ChildGroup_1::ChildGroup_1()
    :m_has_customXml(false),
     m_customXml(NULL),
     m_has_smartTag(false),
     m_smartTag(NULL),
     m_has_sdt(false),
     m_sdt(NULL),
     m_has_dir(false),
     m_dir(NULL),
     m_has_bdo(false),
     m_bdo(NULL),
     m_has_r(false),
     m_r(NULL)
{
}
bool CT_P::ChildGroup_1::has_customXml() const
{
    return m_has_customXml;
}

CT_CustomXmlRun* CT_P::ChildGroup_1::mutable_customXml()
{

    m_has_smartTag = false;

    if (m_smartTag)
    {
        delete m_smartTag;
        m_smartTag = NULL;
    }
    ;

    m_has_sdt = false;

    if (m_sdt)
    {
        delete m_sdt;
        m_sdt = NULL;
    }
    ;

    m_has_dir = false;

    if (m_dir)
    {
        delete m_dir;
        m_dir = NULL;
    }
    ;

    m_has_bdo = false;

    if (m_bdo)
    {
        delete m_bdo;
        m_bdo = NULL;
    }
    ;

    m_has_r = false;

    if (m_r)
    {
        delete m_r;
        m_r = NULL;
    }
    ;

    m_has_customXml = true;
    if (!m_customXml)
    {
        m_customXml = new CT_CustomXmlRun();
    }
    return m_customXml;
}

const CT_CustomXmlRun& CT_P::ChildGroup_1::get_customXml() const
{
    if (m_customXml)
    {
        return *m_customXml;
    }
    return CT_CustomXmlRun::default_instance();
}

bool CT_P::ChildGroup_1::has_smartTag() const
{
    return m_has_smartTag;
}

CT_SmartTagRun* CT_P::ChildGroup_1::mutable_smartTag()
{

    m_has_customXml = false;

    if (m_customXml)
    {
        delete m_customXml;
        m_customXml = NULL;
    }
    ;

    m_has_sdt = false;

    if (m_sdt)
    {
        delete m_sdt;
        m_sdt = NULL;
    }
    ;

    m_has_dir = false;

    if (m_dir)
    {
        delete m_dir;
        m_dir = NULL;
    }
    ;

    m_has_bdo = false;

    if (m_bdo)
    {
        delete m_bdo;
        m_bdo = NULL;
    }
    ;

    m_has_r = false;

    if (m_r)
    {
        delete m_r;
        m_r = NULL;
    }
    ;

    m_has_smartTag = true;
    if (!m_smartTag)
    {
        m_smartTag = new CT_SmartTagRun();
    }
    return m_smartTag;
}

const CT_SmartTagRun& CT_P::ChildGroup_1::get_smartTag() const
{
    if (m_smartTag)
    {
        return *m_smartTag;
    }
    return CT_SmartTagRun::default_instance();
}

bool CT_P::ChildGroup_1::has_sdt() const
{
    return m_has_sdt;
}

CT_SdtRun* CT_P::ChildGroup_1::mutable_sdt()
{

    m_has_customXml = false;

    if (m_customXml)
    {
        delete m_customXml;
        m_customXml = NULL;
    }
    ;

    m_has_smartTag = false;

    if (m_smartTag)
    {
        delete m_smartTag;
        m_smartTag = NULL;
    }
    ;

    m_has_dir = false;

    if (m_dir)
    {
        delete m_dir;
        m_dir = NULL;
    }
    ;

    m_has_bdo = false;

    if (m_bdo)
    {
        delete m_bdo;
        m_bdo = NULL;
    }
    ;

    m_has_r = false;

    if (m_r)
    {
        delete m_r;
        m_r = NULL;
    }
    ;

    m_has_sdt = true;
    if (!m_sdt)
    {
        m_sdt = new CT_SdtRun();
    }
    return m_sdt;
}

const CT_SdtRun& CT_P::ChildGroup_1::get_sdt() const
{
    if (m_sdt)
    {
        return *m_sdt;
    }
    return CT_SdtRun::default_instance();
}

bool CT_P::ChildGroup_1::has_dir() const
{
    return m_has_dir;
}

CT_DirContentRun* CT_P::ChildGroup_1::mutable_dir()
{

    m_has_customXml = false;

    if (m_customXml)
    {
        delete m_customXml;
        m_customXml = NULL;
    }
    ;

    m_has_smartTag = false;

    if (m_smartTag)
    {
        delete m_smartTag;
        m_smartTag = NULL;
    }
    ;

    m_has_sdt = false;

    if (m_sdt)
    {
        delete m_sdt;
        m_sdt = NULL;
    }
    ;

    m_has_bdo = false;

    if (m_bdo)
    {
        delete m_bdo;
        m_bdo = NULL;
    }
    ;

    m_has_r = false;

    if (m_r)
    {
        delete m_r;
        m_r = NULL;
    }
    ;

    m_has_dir = true;
    if (!m_dir)
    {
        m_dir = new CT_DirContentRun();
    }
    return m_dir;
}

const CT_DirContentRun& CT_P::ChildGroup_1::get_dir() const
{
    if (m_dir)
    {
        return *m_dir;
    }
    return CT_DirContentRun::default_instance();
}

bool CT_P::ChildGroup_1::has_bdo() const
{
    return m_has_bdo;
}

CT_BdoContentRun* CT_P::ChildGroup_1::mutable_bdo()
{

    m_has_customXml = false;

    if (m_customXml)
    {
        delete m_customXml;
        m_customXml = NULL;
    }
    ;

    m_has_smartTag = false;

    if (m_smartTag)
    {
        delete m_smartTag;
        m_smartTag = NULL;
    }
    ;

    m_has_sdt = false;

    if (m_sdt)
    {
        delete m_sdt;
        m_sdt = NULL;
    }
    ;

    m_has_dir = false;

    if (m_dir)
    {
        delete m_dir;
        m_dir = NULL;
    }
    ;

    m_has_r = false;

    if (m_r)
    {
        delete m_r;
        m_r = NULL;
    }
    ;

    m_has_bdo = true;
    if (!m_bdo)
    {
        m_bdo = new CT_BdoContentRun();
    }
    return m_bdo;
}

const CT_BdoContentRun& CT_P::ChildGroup_1::get_bdo() const
{
    if (m_bdo)
    {
        return *m_bdo;
    }
    return CT_BdoContentRun::default_instance();
}

bool CT_P::ChildGroup_1::has_r() const
{
    return m_has_r;
}

CT_R* CT_P::ChildGroup_1::mutable_r()
{

    m_has_customXml = false;

    if (m_customXml)
    {
        delete m_customXml;
        m_customXml = NULL;
    }
    ;

    m_has_smartTag = false;

    if (m_smartTag)
    {
        delete m_smartTag;
        m_smartTag = NULL;
    }
    ;

    m_has_sdt = false;

    if (m_sdt)
    {
        delete m_sdt;
        m_sdt = NULL;
    }
    ;

    m_has_dir = false;

    if (m_dir)
    {
        delete m_dir;
        m_dir = NULL;
    }
    ;

    m_has_bdo = false;

    if (m_bdo)
    {
        delete m_bdo;
        m_bdo = NULL;
    }
    ;

    m_has_r = true;
    if (!m_r)
    {
        m_r = new CT_R();
    }
    return m_r;
}

const CT_R& CT_P::ChildGroup_1::get_r() const
{
    if (m_r)
    {
        return *m_r;
    }
    return CT_R::default_instance();
}


// CT_P::ChildGroup_2
CT_P::ChildGroup_2::ChildGroup_2()
    :m_has_proofErr(false),
     m_proofErr(NULL),
     m_has_permStart(false),
     m_permStart(NULL),
     m_has_permEnd(false),
     m_permEnd(NULL)
{
}
bool CT_P::ChildGroup_2::has_proofErr() const
{
    return m_has_proofErr;
}

CT_ProofErr* CT_P::ChildGroup_2::mutable_proofErr()
{

    m_has_permStart = false;

    if (m_permStart)
    {
        delete m_permStart;
        m_permStart = NULL;
    }
    ;

    m_has_permEnd = false;

    if (m_permEnd)
    {
        delete m_permEnd;
        m_permEnd = NULL;
    }
    ;

    m_has_proofErr = true;
    if (!m_proofErr)
    {
        m_proofErr = new CT_ProofErr();
    }
    return m_proofErr;
}

const CT_ProofErr& CT_P::ChildGroup_2::get_proofErr() const
{
    if (m_proofErr)
    {
        return *m_proofErr;
    }
    return CT_ProofErr::default_instance();
}

bool CT_P::ChildGroup_2::has_permStart() const
{
    return m_has_permStart;
}

CT_PermStart* CT_P::ChildGroup_2::mutable_permStart()
{

    m_has_proofErr = false;

    if (m_proofErr)
    {
        delete m_proofErr;
        m_proofErr = NULL;
    }
    ;

    m_has_permEnd = false;

    if (m_permEnd)
    {
        delete m_permEnd;
        m_permEnd = NULL;
    }
    ;

    m_has_permStart = true;
    if (!m_permStart)
    {
        m_permStart = new CT_PermStart();
    }
    return m_permStart;
}

const CT_PermStart& CT_P::ChildGroup_2::get_permStart() const
{
    if (m_permStart)
    {
        return *m_permStart;
    }
    return CT_PermStart::default_instance();
}

bool CT_P::ChildGroup_2::has_permEnd() const
{
    return m_has_permEnd;
}

CT_Perm* CT_P::ChildGroup_2::mutable_permEnd()
{

    m_has_proofErr = false;

    if (m_proofErr)
    {
        delete m_proofErr;
        m_proofErr = NULL;
    }
    ;

    m_has_permStart = false;

    if (m_permStart)
    {
        delete m_permStart;
        m_permStart = NULL;
    }
    ;

    m_has_permEnd = true;
    if (!m_permEnd)
    {
        m_permEnd = new CT_Perm();
    }
    return m_permEnd;
}

const CT_Perm& CT_P::ChildGroup_2::get_permEnd() const
{
    if (m_permEnd)
    {
        return *m_permEnd;
    }
    return CT_Perm::default_instance();
}


// CT_P::ChildGroup_3
CT_P::ChildGroup_3::ChildGroup_3()
    :m_has_bookmarkStart(false),
     m_bookmarkStart(NULL),
     m_has_bookmarkEnd(false),
     m_bookmarkEnd(NULL),
     m_has_moveFromRangeStart(false),
     m_moveFromRangeStart(NULL),
     m_has_moveFromRangeEnd(false),
     m_moveFromRangeEnd(NULL),
     m_has_moveToRangeStart(false),
     m_moveToRangeStart(NULL),
     m_has_moveToRangeEnd(false),
     m_moveToRangeEnd(NULL),
     m_has_commentRangeStart(false),
     m_commentRangeStart(NULL),
     m_has_commentRangeEnd(false),
     m_commentRangeEnd(NULL),
     m_has_customXmlInsRangeStart(false),
     m_customXmlInsRangeStart(NULL),
     m_has_customXmlInsRangeEnd(false),
     m_customXmlInsRangeEnd(NULL),
     m_has_customXmlDelRangeStart(false),
     m_customXmlDelRangeStart(NULL),
     m_has_customXmlDelRangeEnd(false),
     m_customXmlDelRangeEnd(NULL),
     m_has_customXmlMoveFromRangeStart(false),
     m_customXmlMoveFromRangeStart(NULL),
     m_has_customXmlMoveFromRangeEnd(false),
     m_customXmlMoveFromRangeEnd(NULL),
     m_has_customXmlMoveToRangeStart(false),
     m_customXmlMoveToRangeStart(NULL),
     m_has_customXmlMoveToRangeEnd(false),
     m_customXmlMoveToRangeEnd(NULL),
     m_has_ins(false),
     m_ins(NULL),
     m_has_del(false),
     m_del(NULL),
     m_has_moveFrom(false),
     m_moveFrom(NULL),
     m_has_moveTo(false),
     m_moveTo(NULL)
{
}
bool CT_P::ChildGroup_3::has_bookmarkStart() const
{
    return m_has_bookmarkStart;
}

CT_Bookmark* CT_P::ChildGroup_3::mutable_bookmarkStart()
{

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_bookmarkStart = true;
    if (!m_bookmarkStart)
    {
        m_bookmarkStart = new CT_Bookmark();
    }
    return m_bookmarkStart;
}

const CT_Bookmark& CT_P::ChildGroup_3::get_bookmarkStart() const
{
    if (m_bookmarkStart)
    {
        return *m_bookmarkStart;
    }
    return CT_Bookmark::default_instance();
}

bool CT_P::ChildGroup_3::has_bookmarkEnd() const
{
    return m_has_bookmarkEnd;
}

CT_MarkupRange* CT_P::ChildGroup_3::mutable_bookmarkEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_bookmarkEnd = true;
    if (!m_bookmarkEnd)
    {
        m_bookmarkEnd = new CT_MarkupRange();
    }
    return m_bookmarkEnd;
}

const CT_MarkupRange& CT_P::ChildGroup_3::get_bookmarkEnd() const
{
    if (m_bookmarkEnd)
    {
        return *m_bookmarkEnd;
    }
    return CT_MarkupRange::default_instance();
}

bool CT_P::ChildGroup_3::has_moveFromRangeStart() const
{
    return m_has_moveFromRangeStart;
}

CT_MoveBookmark* CT_P::ChildGroup_3::mutable_moveFromRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_moveFromRangeStart = true;
    if (!m_moveFromRangeStart)
    {
        m_moveFromRangeStart = new CT_MoveBookmark();
    }
    return m_moveFromRangeStart;
}

const CT_MoveBookmark& CT_P::ChildGroup_3::get_moveFromRangeStart() const
{
    if (m_moveFromRangeStart)
    {
        return *m_moveFromRangeStart;
    }
    return CT_MoveBookmark::default_instance();
}

bool CT_P::ChildGroup_3::has_moveFromRangeEnd() const
{
    return m_has_moveFromRangeEnd;
}

CT_MarkupRange* CT_P::ChildGroup_3::mutable_moveFromRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_moveFromRangeEnd = true;
    if (!m_moveFromRangeEnd)
    {
        m_moveFromRangeEnd = new CT_MarkupRange();
    }
    return m_moveFromRangeEnd;
}

const CT_MarkupRange& CT_P::ChildGroup_3::get_moveFromRangeEnd() const
{
    if (m_moveFromRangeEnd)
    {
        return *m_moveFromRangeEnd;
    }
    return CT_MarkupRange::default_instance();
}

bool CT_P::ChildGroup_3::has_moveToRangeStart() const
{
    return m_has_moveToRangeStart;
}

CT_MoveBookmark* CT_P::ChildGroup_3::mutable_moveToRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_moveToRangeStart = true;
    if (!m_moveToRangeStart)
    {
        m_moveToRangeStart = new CT_MoveBookmark();
    }
    return m_moveToRangeStart;
}

const CT_MoveBookmark& CT_P::ChildGroup_3::get_moveToRangeStart() const
{
    if (m_moveToRangeStart)
    {
        return *m_moveToRangeStart;
    }
    return CT_MoveBookmark::default_instance();
}

bool CT_P::ChildGroup_3::has_moveToRangeEnd() const
{
    return m_has_moveToRangeEnd;
}

CT_MarkupRange* CT_P::ChildGroup_3::mutable_moveToRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_moveToRangeEnd = true;
    if (!m_moveToRangeEnd)
    {
        m_moveToRangeEnd = new CT_MarkupRange();
    }
    return m_moveToRangeEnd;
}

const CT_MarkupRange& CT_P::ChildGroup_3::get_moveToRangeEnd() const
{
    if (m_moveToRangeEnd)
    {
        return *m_moveToRangeEnd;
    }
    return CT_MarkupRange::default_instance();
}

bool CT_P::ChildGroup_3::has_commentRangeStart() const
{
    return m_has_commentRangeStart;
}

CT_MarkupRange* CT_P::ChildGroup_3::mutable_commentRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_commentRangeStart = true;
    if (!m_commentRangeStart)
    {
        m_commentRangeStart = new CT_MarkupRange();
    }
    return m_commentRangeStart;
}

const CT_MarkupRange& CT_P::ChildGroup_3::get_commentRangeStart() const
{
    if (m_commentRangeStart)
    {
        return *m_commentRangeStart;
    }
    return CT_MarkupRange::default_instance();
}

bool CT_P::ChildGroup_3::has_commentRangeEnd() const
{
    return m_has_commentRangeEnd;
}

CT_MarkupRange* CT_P::ChildGroup_3::mutable_commentRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_commentRangeEnd = true;
    if (!m_commentRangeEnd)
    {
        m_commentRangeEnd = new CT_MarkupRange();
    }
    return m_commentRangeEnd;
}

const CT_MarkupRange& CT_P::ChildGroup_3::get_commentRangeEnd() const
{
    if (m_commentRangeEnd)
    {
        return *m_commentRangeEnd;
    }
    return CT_MarkupRange::default_instance();
}

bool CT_P::ChildGroup_3::has_customXmlInsRangeStart() const
{
    return m_has_customXmlInsRangeStart;
}

CT_TrackChange* CT_P::ChildGroup_3::mutable_customXmlInsRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = true;
    if (!m_customXmlInsRangeStart)
    {
        m_customXmlInsRangeStart = new CT_TrackChange();
    }
    return m_customXmlInsRangeStart;
}

const CT_TrackChange& CT_P::ChildGroup_3::get_customXmlInsRangeStart() const
{
    if (m_customXmlInsRangeStart)
    {
        return *m_customXmlInsRangeStart;
    }
    return CT_TrackChange::default_instance();
}

bool CT_P::ChildGroup_3::has_customXmlInsRangeEnd() const
{
    return m_has_customXmlInsRangeEnd;
}

CT_Markup* CT_P::ChildGroup_3::mutable_customXmlInsRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = true;
    if (!m_customXmlInsRangeEnd)
    {
        m_customXmlInsRangeEnd = new CT_Markup();
    }
    return m_customXmlInsRangeEnd;
}

const CT_Markup& CT_P::ChildGroup_3::get_customXmlInsRangeEnd() const
{
    if (m_customXmlInsRangeEnd)
    {
        return *m_customXmlInsRangeEnd;
    }
    return CT_Markup::default_instance();
}

bool CT_P::ChildGroup_3::has_customXmlDelRangeStart() const
{
    return m_has_customXmlDelRangeStart;
}

CT_TrackChange* CT_P::ChildGroup_3::mutable_customXmlDelRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = true;
    if (!m_customXmlDelRangeStart)
    {
        m_customXmlDelRangeStart = new CT_TrackChange();
    }
    return m_customXmlDelRangeStart;
}

const CT_TrackChange& CT_P::ChildGroup_3::get_customXmlDelRangeStart() const
{
    if (m_customXmlDelRangeStart)
    {
        return *m_customXmlDelRangeStart;
    }
    return CT_TrackChange::default_instance();
}

bool CT_P::ChildGroup_3::has_customXmlDelRangeEnd() const
{
    return m_has_customXmlDelRangeEnd;
}

CT_Markup* CT_P::ChildGroup_3::mutable_customXmlDelRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = true;
    if (!m_customXmlDelRangeEnd)
    {
        m_customXmlDelRangeEnd = new CT_Markup();
    }
    return m_customXmlDelRangeEnd;
}

const CT_Markup& CT_P::ChildGroup_3::get_customXmlDelRangeEnd() const
{
    if (m_customXmlDelRangeEnd)
    {
        return *m_customXmlDelRangeEnd;
    }
    return CT_Markup::default_instance();
}

bool CT_P::ChildGroup_3::has_customXmlMoveFromRangeStart() const
{
    return m_has_customXmlMoveFromRangeStart;
}

CT_TrackChange* CT_P::ChildGroup_3::mutable_customXmlMoveFromRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = true;
    if (!m_customXmlMoveFromRangeStart)
    {
        m_customXmlMoveFromRangeStart = new CT_TrackChange();
    }
    return m_customXmlMoveFromRangeStart;
}

const CT_TrackChange& CT_P::ChildGroup_3::get_customXmlMoveFromRangeStart() const
{
    if (m_customXmlMoveFromRangeStart)
    {
        return *m_customXmlMoveFromRangeStart;
    }
    return CT_TrackChange::default_instance();
}

bool CT_P::ChildGroup_3::has_customXmlMoveFromRangeEnd() const
{
    return m_has_customXmlMoveFromRangeEnd;
}

CT_Markup* CT_P::ChildGroup_3::mutable_customXmlMoveFromRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = true;
    if (!m_customXmlMoveFromRangeEnd)
    {
        m_customXmlMoveFromRangeEnd = new CT_Markup();
    }
    return m_customXmlMoveFromRangeEnd;
}

const CT_Markup& CT_P::ChildGroup_3::get_customXmlMoveFromRangeEnd() const
{
    if (m_customXmlMoveFromRangeEnd)
    {
        return *m_customXmlMoveFromRangeEnd;
    }
    return CT_Markup::default_instance();
}

bool CT_P::ChildGroup_3::has_customXmlMoveToRangeStart() const
{
    return m_has_customXmlMoveToRangeStart;
}

CT_TrackChange* CT_P::ChildGroup_3::mutable_customXmlMoveToRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = true;
    if (!m_customXmlMoveToRangeStart)
    {
        m_customXmlMoveToRangeStart = new CT_TrackChange();
    }
    return m_customXmlMoveToRangeStart;
}

const CT_TrackChange& CT_P::ChildGroup_3::get_customXmlMoveToRangeStart() const
{
    if (m_customXmlMoveToRangeStart)
    {
        return *m_customXmlMoveToRangeStart;
    }
    return CT_TrackChange::default_instance();
}

bool CT_P::ChildGroup_3::has_customXmlMoveToRangeEnd() const
{
    return m_has_customXmlMoveToRangeEnd;
}

CT_Markup* CT_P::ChildGroup_3::mutable_customXmlMoveToRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = true;
    if (!m_customXmlMoveToRangeEnd)
    {
        m_customXmlMoveToRangeEnd = new CT_Markup();
    }
    return m_customXmlMoveToRangeEnd;
}

const CT_Markup& CT_P::ChildGroup_3::get_customXmlMoveToRangeEnd() const
{
    if (m_customXmlMoveToRangeEnd)
    {
        return *m_customXmlMoveToRangeEnd;
    }
    return CT_Markup::default_instance();
}

bool CT_P::ChildGroup_3::has_ins() const
{
    return m_has_ins;
}

CT_RunTrackChange* CT_P::ChildGroup_3::mutable_ins()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_ins = true;
    if (!m_ins)
    {
        m_ins = new CT_RunTrackChange();
    }
    return m_ins;
}

const CT_RunTrackChange& CT_P::ChildGroup_3::get_ins() const
{
    if (m_ins)
    {
        return *m_ins;
    }
    return CT_RunTrackChange::default_instance();
}

bool CT_P::ChildGroup_3::has_del() const
{
    return m_has_del;
}

CT_RunTrackChange* CT_P::ChildGroup_3::mutable_del()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_del = true;
    if (!m_del)
    {
        m_del = new CT_RunTrackChange();
    }
    return m_del;
}

const CT_RunTrackChange& CT_P::ChildGroup_3::get_del() const
{
    if (m_del)
    {
        return *m_del;
    }
    return CT_RunTrackChange::default_instance();
}

bool CT_P::ChildGroup_3::has_moveFrom() const
{
    return m_has_moveFrom;
}

CT_RunTrackChange* CT_P::ChildGroup_3::mutable_moveFrom()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_moveFrom = true;
    if (!m_moveFrom)
    {
        m_moveFrom = new CT_RunTrackChange();
    }
    return m_moveFrom;
}

const CT_RunTrackChange& CT_P::ChildGroup_3::get_moveFrom() const
{
    if (m_moveFrom)
    {
        return *m_moveFrom;
    }
    return CT_RunTrackChange::default_instance();
}

bool CT_P::ChildGroup_3::has_moveTo() const
{
    return m_has_moveTo;
}

CT_RunTrackChange* CT_P::ChildGroup_3::mutable_moveTo()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = true;
    if (!m_moveTo)
    {
        m_moveTo = new CT_RunTrackChange();
    }
    return m_moveTo;
}

const CT_RunTrackChange& CT_P::ChildGroup_3::get_moveTo() const
{
    if (m_moveTo)
    {
        return *m_moveTo;
    }
    return CT_RunTrackChange::default_instance();
}


// CT_P::ChildGroup_4
CT_P::ChildGroup_4::ChildGroup_4()
    :m_has_m_oMathPara(false),
     m_m_oMathPara(NULL),
     m_has_m_oMath(false),
     m_m_oMath(NULL),
     m_has_fldSimple(false),
     m_fldSimple(NULL),
     m_has_hyperlink(false),
     m_hyperlink(NULL),
     m_has_subDoc(false),
     m_subDoc(NULL)
{
}
bool CT_P::ChildGroup_4::has_m_oMathPara() const
{
    return m_has_m_oMathPara;
}

ns_m::CT_OMathPara* CT_P::ChildGroup_4::mutable_m_oMathPara()
{

    m_has_m_oMath = false;

    if (m_m_oMath)
    {
        delete m_m_oMath;
        m_m_oMath = NULL;
    }
    ;

    m_has_fldSimple = false;

    if (m_fldSimple)
    {
        delete m_fldSimple;
        m_fldSimple = NULL;
    }
    ;

    m_has_hyperlink = false;

    if (m_hyperlink)
    {
        delete m_hyperlink;
        m_hyperlink = NULL;
    }
    ;

    m_has_subDoc = false;

    if (m_subDoc)
    {
        delete m_subDoc;
        m_subDoc = NULL;
    }
    ;

    m_has_m_oMathPara = true;
    if (!m_m_oMathPara)
    {
        m_m_oMathPara = new ns_m::CT_OMathPara();
    }
    return m_m_oMathPara;
}

const ns_m::CT_OMathPara& CT_P::ChildGroup_4::get_m_oMathPara() const
{
    if (m_m_oMathPara)
    {
        return *m_m_oMathPara;
    }
    return ns_m::CT_OMathPara::default_instance();
}

bool CT_P::ChildGroup_4::has_m_oMath() const
{
    return m_has_m_oMath;
}

ns_m::CT_OMath* CT_P::ChildGroup_4::mutable_m_oMath()
{

    m_has_m_oMathPara = false;

    if (m_m_oMathPara)
    {
        delete m_m_oMathPara;
        m_m_oMathPara = NULL;
    }
    ;

    m_has_fldSimple = false;

    if (m_fldSimple)
    {
        delete m_fldSimple;
        m_fldSimple = NULL;
    }
    ;

    m_has_hyperlink = false;

    if (m_hyperlink)
    {
        delete m_hyperlink;
        m_hyperlink = NULL;
    }
    ;

    m_has_subDoc = false;

    if (m_subDoc)
    {
        delete m_subDoc;
        m_subDoc = NULL;
    }
    ;

    m_has_m_oMath = true;
    if (!m_m_oMath)
    {
        m_m_oMath = new ns_m::CT_OMath();
    }
    return m_m_oMath;
}

const ns_m::CT_OMath& CT_P::ChildGroup_4::get_m_oMath() const
{
    if (m_m_oMath)
    {
        return *m_m_oMath;
    }
    return ns_m::CT_OMath::default_instance();
}

bool CT_P::ChildGroup_4::has_fldSimple() const
{
    return m_has_fldSimple;
}

CT_SimpleField* CT_P::ChildGroup_4::mutable_fldSimple()
{

    m_has_m_oMathPara = false;

    if (m_m_oMathPara)
    {
        delete m_m_oMathPara;
        m_m_oMathPara = NULL;
    }
    ;

    m_has_m_oMath = false;

    if (m_m_oMath)
    {
        delete m_m_oMath;
        m_m_oMath = NULL;
    }
    ;

    m_has_hyperlink = false;

    if (m_hyperlink)
    {
        delete m_hyperlink;
        m_hyperlink = NULL;
    }
    ;

    m_has_subDoc = false;

    if (m_subDoc)
    {
        delete m_subDoc;
        m_subDoc = NULL;
    }
    ;

    m_has_fldSimple = true;
    if (!m_fldSimple)
    {
        m_fldSimple = new CT_SimpleField();
    }
    return m_fldSimple;
}

const CT_SimpleField& CT_P::ChildGroup_4::get_fldSimple() const
{
    if (m_fldSimple)
    {
        return *m_fldSimple;
    }
    return CT_SimpleField::default_instance();
}

bool CT_P::ChildGroup_4::has_hyperlink() const
{
    return m_has_hyperlink;
}

CT_Hyperlink* CT_P::ChildGroup_4::mutable_hyperlink()
{

    m_has_m_oMathPara = false;

    if (m_m_oMathPara)
    {
        delete m_m_oMathPara;
        m_m_oMathPara = NULL;
    }
    ;

    m_has_m_oMath = false;

    if (m_m_oMath)
    {
        delete m_m_oMath;
        m_m_oMath = NULL;
    }
    ;

    m_has_fldSimple = false;

    if (m_fldSimple)
    {
        delete m_fldSimple;
        m_fldSimple = NULL;
    }
    ;

    m_has_subDoc = false;

    if (m_subDoc)
    {
        delete m_subDoc;
        m_subDoc = NULL;
    }
    ;

    m_has_hyperlink = true;
    if (!m_hyperlink)
    {
        m_hyperlink = new CT_Hyperlink();
    }
    return m_hyperlink;
}

const CT_Hyperlink& CT_P::ChildGroup_4::get_hyperlink() const
{
    if (m_hyperlink)
    {
        return *m_hyperlink;
    }
    return CT_Hyperlink::default_instance();
}

bool CT_P::ChildGroup_4::has_subDoc() const
{
    return m_has_subDoc;
}

CT_Rel* CT_P::ChildGroup_4::mutable_subDoc()
{

    m_has_m_oMathPara = false;

    if (m_m_oMathPara)
    {
        delete m_m_oMathPara;
        m_m_oMathPara = NULL;
    }
    ;

    m_has_m_oMath = false;

    if (m_m_oMath)
    {
        delete m_m_oMath;
        m_m_oMath = NULL;
    }
    ;

    m_has_fldSimple = false;

    if (m_fldSimple)
    {
        delete m_fldSimple;
        m_fldSimple = NULL;
    }
    ;

    m_has_hyperlink = false;

    if (m_hyperlink)
    {
        delete m_hyperlink;
        m_hyperlink = NULL;
    }
    ;

    m_has_subDoc = true;
    if (!m_subDoc)
    {
        m_subDoc = new CT_Rel();
    }
    return m_subDoc;
}

const CT_Rel& CT_P::ChildGroup_4::get_subDoc() const
{
    if (m_subDoc)
    {
        return *m_subDoc;
    }
    return CT_Rel::default_instance();
}

CT_P* CT_P::default_instance_ = NULL;

// CT_Height
CT_Height::CT_Height()
    :m_has_val_attr(false),
     m_val_attr(NULL),
     m_has_hRule_attr(false),
     m_hRule_attr(NULL)
{
}
CT_Height::~CT_Height()
{
    clear();
}
void CT_Height::clear()
{
    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }


    m_has_hRule_attr = false;

    if (m_hRule_attr)
    {
        delete m_hRule_attr;
        m_hRule_attr = NULL;
    }

}

void CT_Height::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }



    if (m_has_hRule_attr)
    {
        m_hRule_attr->toXmlAttr("w:hRule", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_Height& CT_Height::default_instance()
{
    if (!CT_Height::default_instance_)
    {
        CT_Height::default_instance_ = new CT_Height();
    }
    return *CT_Height::default_instance_;
}

bool CT_Height::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_Height::set_val_attr(const ns_s::ST_TwipsMeasure& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ns_s::ST_TwipsMeasure(_val_attr);
}

const ns_s::ST_TwipsMeasure& CT_Height::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ns_s::ST_TwipsMeasure::default_instance();
}

bool CT_Height::has_hRule_attr() const
{
    return m_has_hRule_attr;
}

void CT_Height::set_hRule_attr(const ST_HeightRule& _hRule_attr)
{
    m_has_hRule_attr = true;
    m_hRule_attr = new ST_HeightRule(_hRule_attr);
}

const ST_HeightRule& CT_Height::get_hRule_attr() const
{
    if (m_hRule_attr)
    {
        return *m_hRule_attr;
    }
    return ST_HeightRule::default_instance();
}

CT_Height* CT_Height::default_instance_ = NULL;

// CT_TblWidth
CT_TblWidth::CT_TblWidth()
    :m_has_w_attr(false),
     m_w_attr(NULL),
     m_has_type_attr(false),
     m_type_attr(NULL)
{
}
CT_TblWidth::~CT_TblWidth()
{
    clear();
}
void CT_TblWidth::clear()
{
    m_has_w_attr = false;

    if (m_w_attr)
    {
        delete m_w_attr;
        m_w_attr = NULL;
    }


    m_has_type_attr = false;

    if (m_type_attr)
    {
        delete m_type_attr;
        m_type_attr = NULL;
    }

}

void CT_TblWidth::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_w_attr)
    {
        m_w_attr->toXmlAttr("w:w", _outStream);
    }



    if (m_has_type_attr)
    {
        m_type_attr->toXmlAttr("w:type", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_TblWidth& CT_TblWidth::default_instance()
{
    if (!CT_TblWidth::default_instance_)
    {
        CT_TblWidth::default_instance_ = new CT_TblWidth();
    }
    return *CT_TblWidth::default_instance_;
}

bool CT_TblWidth::has_w_attr() const
{
    return m_has_w_attr;
}

void CT_TblWidth::set_w_attr(const ST_MeasurementOrPercent& _w_attr)
{
    m_has_w_attr = true;
    m_w_attr = new ST_MeasurementOrPercent(_w_attr);
}

const ST_MeasurementOrPercent& CT_TblWidth::get_w_attr() const
{
    if (m_w_attr)
    {
        return *m_w_attr;
    }
    return ST_MeasurementOrPercent::default_instance();
}

bool CT_TblWidth::has_type_attr() const
{
    return m_has_type_attr;
}

void CT_TblWidth::set_type_attr(const ST_TblWidth& _type_attr)
{
    m_has_type_attr = true;
    m_type_attr = new ST_TblWidth(_type_attr);
}

const ST_TblWidth& CT_TblWidth::get_type_attr() const
{
    if (m_type_attr)
    {
        return *m_type_attr;
    }
    return ST_TblWidth::default_instance();
}

CT_TblWidth* CT_TblWidth::default_instance_ = NULL;

// CT_TblGridCol
CT_TblGridCol::CT_TblGridCol()
    :m_has_w_attr(false),
     m_w_attr(NULL)
{
}
CT_TblGridCol::~CT_TblGridCol()
{
    clear();
}
void CT_TblGridCol::clear()
{
    m_has_w_attr = false;

    if (m_w_attr)
    {
        delete m_w_attr;
        m_w_attr = NULL;
    }

}

void CT_TblGridCol::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_w_attr)
    {
        m_w_attr->toXmlAttr("w:w", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_TblGridCol& CT_TblGridCol::default_instance()
{
    if (!CT_TblGridCol::default_instance_)
    {
        CT_TblGridCol::default_instance_ = new CT_TblGridCol();
    }
    return *CT_TblGridCol::default_instance_;
}

bool CT_TblGridCol::has_w_attr() const
{
    return m_has_w_attr;
}

void CT_TblGridCol::set_w_attr(const ns_s::ST_TwipsMeasure& _w_attr)
{
    m_has_w_attr = true;
    m_w_attr = new ns_s::ST_TwipsMeasure(_w_attr);
}

const ns_s::ST_TwipsMeasure& CT_TblGridCol::get_w_attr() const
{
    if (m_w_attr)
    {
        return *m_w_attr;
    }
    return ns_s::ST_TwipsMeasure::default_instance();
}

CT_TblGridCol* CT_TblGridCol::default_instance_ = NULL;

// CT_TblGridBase
CT_TblGridBase::CT_TblGridBase()

{
}
CT_TblGridBase::~CT_TblGridBase()
{
    clear();
}
CT_TblGridCol* CT_TblGridBase::add_gridCol()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_TblGridCol* pNewChild = pChildGroup->mutable_gridCol();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

void CT_TblGridBase::clear()
{
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
}

void CT_TblGridBase::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";

    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_gridCol())
            {
                (*iter)->get_gridCol().toXmlElem("w:gridCol", "", _outStream);
            }


        }
    }

    _outStream << "</" << _elemName << ">";
}

const CT_TblGridBase& CT_TblGridBase::default_instance()
{
    if (!CT_TblGridBase::default_instance_)
    {
        CT_TblGridBase::default_instance_ = new CT_TblGridBase();
    }
    return *CT_TblGridBase::default_instance_;
}


// CT_TblGridBase::ChildGroup_1
CT_TblGridBase::ChildGroup_1::ChildGroup_1()
    :m_has_gridCol(false),
     m_gridCol(NULL)
{
}
bool CT_TblGridBase::ChildGroup_1::has_gridCol() const
{
    return m_has_gridCol;
}

CT_TblGridCol* CT_TblGridBase::ChildGroup_1::mutable_gridCol()
{

    m_has_gridCol = true;
    if (!m_gridCol)
    {
        m_gridCol = new CT_TblGridCol();
    }
    return m_gridCol;
}

const CT_TblGridCol& CT_TblGridBase::ChildGroup_1::get_gridCol() const
{
    if (m_gridCol)
    {
        return *m_gridCol;
    }
    return CT_TblGridCol::default_instance();
}

CT_TblGridBase* CT_TblGridBase::default_instance_ = NULL;

// CT_TblGrid
CT_TblGrid::CT_TblGrid()
    :m_has_tblGridChange(false),
     m_tblGridChange(NULL)
{
}
CT_TblGrid::~CT_TblGrid()
{
    clear();
}
CT_TblGridCol* CT_TblGrid::add_gridCol()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_TblGridCol* pNewChild = pChildGroup->mutable_gridCol();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

bool CT_TblGrid::has_tblGridChange() const
{
    return m_has_tblGridChange;
}

CT_TblGridChange* CT_TblGrid::mutable_tblGridChange()
{
    m_has_tblGridChange = true;
    if (!m_tblGridChange)
    {
        m_tblGridChange = new CT_TblGridChange();
    }
    return m_tblGridChange;
}

const CT_TblGridChange& CT_TblGrid::get_tblGridChange() const
{
    if (m_tblGridChange)
    {
        return *m_tblGridChange;
    }
    return CT_TblGridChange::default_instance();
}

void CT_TblGrid::clear()
{
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }

    m_has_tblGridChange = false;

    if (m_tblGridChange)
    {
        delete m_tblGridChange;
        m_tblGridChange = NULL;
    }

}

void CT_TblGrid::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";

    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_gridCol())
            {
                (*iter)->get_gridCol().toXmlElem("w:gridCol", "", _outStream);
            }


        }
    }


    if (m_has_tblGridChange)
    {
        m_tblGridChange->toXmlElem("w:tblGridChange", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_TblGrid& CT_TblGrid::default_instance()
{
    if (!CT_TblGrid::default_instance_)
    {
        CT_TblGrid::default_instance_ = new CT_TblGrid();
    }
    return *CT_TblGrid::default_instance_;
}


// CT_TblGrid::ChildGroup_1
CT_TblGrid::ChildGroup_1::ChildGroup_1()
    :m_has_gridCol(false),
     m_gridCol(NULL)
{
}
bool CT_TblGrid::ChildGroup_1::has_gridCol() const
{
    return m_has_gridCol;
}

CT_TblGridCol* CT_TblGrid::ChildGroup_1::mutable_gridCol()
{

    m_has_gridCol = true;
    if (!m_gridCol)
    {
        m_gridCol = new CT_TblGridCol();
    }
    return m_gridCol;
}

const CT_TblGridCol& CT_TblGrid::ChildGroup_1::get_gridCol() const
{
    if (m_gridCol)
    {
        return *m_gridCol;
    }
    return CT_TblGridCol::default_instance();
}

CT_TblGrid* CT_TblGrid::default_instance_ = NULL;

// CT_TcBorders
CT_TcBorders::CT_TcBorders()
    :m_has_top(false),
     m_top(NULL),
     m_has_start(false),
     m_start(NULL),
     m_has_left(false),
     m_left(NULL),
     m_has_bottom(false),
     m_bottom(NULL),
     m_has_end(false),
     m_end(NULL),
     m_has_right(false),
     m_right(NULL),
     m_has_insideH(false),
     m_insideH(NULL),
     m_has_insideV(false),
     m_insideV(NULL),
     m_has_tl2br(false),
     m_tl2br(NULL),
     m_has_tr2bl(false),
     m_tr2bl(NULL)
{
}
CT_TcBorders::~CT_TcBorders()
{
    clear();
}
bool CT_TcBorders::has_top() const
{
    return m_has_top;
}

CT_Border* CT_TcBorders::mutable_top()
{
    m_has_top = true;
    if (!m_top)
    {
        m_top = new CT_Border();
    }
    return m_top;
}

const CT_Border& CT_TcBorders::get_top() const
{
    if (m_top)
    {
        return *m_top;
    }
    return CT_Border::default_instance();
}

bool CT_TcBorders::has_start() const
{
    return m_has_start;
}

CT_Border* CT_TcBorders::mutable_start()
{
    m_has_start = true;
    if (!m_start)
    {
        m_start = new CT_Border();
    }
    return m_start;
}

const CT_Border& CT_TcBorders::get_start() const
{
    if (m_start)
    {
        return *m_start;
    }
    return CT_Border::default_instance();
}

bool CT_TcBorders::has_left() const
{
    return m_has_left;
}

CT_Border* CT_TcBorders::mutable_left()
{
    m_has_left = true;
    if (!m_left)
    {
        m_left = new CT_Border();
    }
    return m_left;
}

const CT_Border& CT_TcBorders::get_left() const
{
    if (m_left)
    {
        return *m_left;
    }
    return CT_Border::default_instance();
}

bool CT_TcBorders::has_bottom() const
{
    return m_has_bottom;
}

CT_Border* CT_TcBorders::mutable_bottom()
{
    m_has_bottom = true;
    if (!m_bottom)
    {
        m_bottom = new CT_Border();
    }
    return m_bottom;
}

const CT_Border& CT_TcBorders::get_bottom() const
{
    if (m_bottom)
    {
        return *m_bottom;
    }
    return CT_Border::default_instance();
}

bool CT_TcBorders::has_end() const
{
    return m_has_end;
}

CT_Border* CT_TcBorders::mutable_end()
{
    m_has_end = true;
    if (!m_end)
    {
        m_end = new CT_Border();
    }
    return m_end;
}

const CT_Border& CT_TcBorders::get_end() const
{
    if (m_end)
    {
        return *m_end;
    }
    return CT_Border::default_instance();
}

bool CT_TcBorders::has_right() const
{
    return m_has_right;
}

CT_Border* CT_TcBorders::mutable_right()
{
    m_has_right = true;
    if (!m_right)
    {
        m_right = new CT_Border();
    }
    return m_right;
}

const CT_Border& CT_TcBorders::get_right() const
{
    if (m_right)
    {
        return *m_right;
    }
    return CT_Border::default_instance();
}

bool CT_TcBorders::has_insideH() const
{
    return m_has_insideH;
}

CT_Border* CT_TcBorders::mutable_insideH()
{
    m_has_insideH = true;
    if (!m_insideH)
    {
        m_insideH = new CT_Border();
    }
    return m_insideH;
}

const CT_Border& CT_TcBorders::get_insideH() const
{
    if (m_insideH)
    {
        return *m_insideH;
    }
    return CT_Border::default_instance();
}

bool CT_TcBorders::has_insideV() const
{
    return m_has_insideV;
}

CT_Border* CT_TcBorders::mutable_insideV()
{
    m_has_insideV = true;
    if (!m_insideV)
    {
        m_insideV = new CT_Border();
    }
    return m_insideV;
}

const CT_Border& CT_TcBorders::get_insideV() const
{
    if (m_insideV)
    {
        return *m_insideV;
    }
    return CT_Border::default_instance();
}

bool CT_TcBorders::has_tl2br() const
{
    return m_has_tl2br;
}

CT_Border* CT_TcBorders::mutable_tl2br()
{
    m_has_tl2br = true;
    if (!m_tl2br)
    {
        m_tl2br = new CT_Border();
    }
    return m_tl2br;
}

const CT_Border& CT_TcBorders::get_tl2br() const
{
    if (m_tl2br)
    {
        return *m_tl2br;
    }
    return CT_Border::default_instance();
}

bool CT_TcBorders::has_tr2bl() const
{
    return m_has_tr2bl;
}

CT_Border* CT_TcBorders::mutable_tr2bl()
{
    m_has_tr2bl = true;
    if (!m_tr2bl)
    {
        m_tr2bl = new CT_Border();
    }
    return m_tr2bl;
}

const CT_Border& CT_TcBorders::get_tr2bl() const
{
    if (m_tr2bl)
    {
        return *m_tr2bl;
    }
    return CT_Border::default_instance();
}

void CT_TcBorders::clear()
{
    m_has_top = false;

    if (m_top)
    {
        delete m_top;
        m_top = NULL;
    }


    m_has_start = false;

    if (m_start)
    {
        delete m_start;
        m_start = NULL;
    }


    m_has_left = false;

    if (m_left)
    {
        delete m_left;
        m_left = NULL;
    }


    m_has_bottom = false;

    if (m_bottom)
    {
        delete m_bottom;
        m_bottom = NULL;
    }


    m_has_end = false;

    if (m_end)
    {
        delete m_end;
        m_end = NULL;
    }


    m_has_right = false;

    if (m_right)
    {
        delete m_right;
        m_right = NULL;
    }


    m_has_insideH = false;

    if (m_insideH)
    {
        delete m_insideH;
        m_insideH = NULL;
    }


    m_has_insideV = false;

    if (m_insideV)
    {
        delete m_insideV;
        m_insideV = NULL;
    }


    m_has_tl2br = false;

    if (m_tl2br)
    {
        delete m_tl2br;
        m_tl2br = NULL;
    }


    m_has_tr2bl = false;

    if (m_tr2bl)
    {
        delete m_tr2bl;
        m_tr2bl = NULL;
    }

}

void CT_TcBorders::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";


    if (m_has_top)
    {
        m_top->toXmlElem("w:top", "", _outStream);
    }


    if (m_has_start)
    {
        m_start->toXmlElem("w:start", "", _outStream);
    }


    if (m_has_left)
    {
        m_left->toXmlElem("w:left", "", _outStream);
    }


    if (m_has_bottom)
    {
        m_bottom->toXmlElem("w:bottom", "", _outStream);
    }


    if (m_has_end)
    {
        m_end->toXmlElem("w:end", "", _outStream);
    }


    if (m_has_right)
    {
        m_right->toXmlElem("w:right", "", _outStream);
    }


    if (m_has_insideH)
    {
        m_insideH->toXmlElem("w:insideH", "", _outStream);
    }


    if (m_has_insideV)
    {
        m_insideV->toXmlElem("w:insideV", "", _outStream);
    }


    if (m_has_tl2br)
    {
        m_tl2br->toXmlElem("w:tl2br", "", _outStream);
    }


    if (m_has_tr2bl)
    {
        m_tr2bl->toXmlElem("w:tr2bl", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_TcBorders& CT_TcBorders::default_instance()
{
    if (!CT_TcBorders::default_instance_)
    {
        CT_TcBorders::default_instance_ = new CT_TcBorders();
    }
    return *CT_TcBorders::default_instance_;
}

CT_TcBorders* CT_TcBorders::default_instance_ = NULL;

// CT_TcMar
CT_TcMar::CT_TcMar()
    :m_has_top(false),
     m_top(NULL),
     m_has_start(false),
     m_start(NULL),
     m_has_left(false),
     m_left(NULL),
     m_has_bottom(false),
     m_bottom(NULL),
     m_has_end(false),
     m_end(NULL),
     m_has_right(false),
     m_right(NULL)
{
}
CT_TcMar::~CT_TcMar()
{
    clear();
}
bool CT_TcMar::has_top() const
{
    return m_has_top;
}

CT_TblWidth* CT_TcMar::mutable_top()
{
    m_has_top = true;
    if (!m_top)
    {
        m_top = new CT_TblWidth();
    }
    return m_top;
}

const CT_TblWidth& CT_TcMar::get_top() const
{
    if (m_top)
    {
        return *m_top;
    }
    return CT_TblWidth::default_instance();
}

bool CT_TcMar::has_start() const
{
    return m_has_start;
}

CT_TblWidth* CT_TcMar::mutable_start()
{
    m_has_start = true;
    if (!m_start)
    {
        m_start = new CT_TblWidth();
    }
    return m_start;
}

const CT_TblWidth& CT_TcMar::get_start() const
{
    if (m_start)
    {
        return *m_start;
    }
    return CT_TblWidth::default_instance();
}

bool CT_TcMar::has_left() const
{
    return m_has_left;
}

CT_TblWidth* CT_TcMar::mutable_left()
{
    m_has_left = true;
    if (!m_left)
    {
        m_left = new CT_TblWidth();
    }
    return m_left;
}

const CT_TblWidth& CT_TcMar::get_left() const
{
    if (m_left)
    {
        return *m_left;
    }
    return CT_TblWidth::default_instance();
}

bool CT_TcMar::has_bottom() const
{
    return m_has_bottom;
}

CT_TblWidth* CT_TcMar::mutable_bottom()
{
    m_has_bottom = true;
    if (!m_bottom)
    {
        m_bottom = new CT_TblWidth();
    }
    return m_bottom;
}

const CT_TblWidth& CT_TcMar::get_bottom() const
{
    if (m_bottom)
    {
        return *m_bottom;
    }
    return CT_TblWidth::default_instance();
}

bool CT_TcMar::has_end() const
{
    return m_has_end;
}

CT_TblWidth* CT_TcMar::mutable_end()
{
    m_has_end = true;
    if (!m_end)
    {
        m_end = new CT_TblWidth();
    }
    return m_end;
}

const CT_TblWidth& CT_TcMar::get_end() const
{
    if (m_end)
    {
        return *m_end;
    }
    return CT_TblWidth::default_instance();
}

bool CT_TcMar::has_right() const
{
    return m_has_right;
}

CT_TblWidth* CT_TcMar::mutable_right()
{
    m_has_right = true;
    if (!m_right)
    {
        m_right = new CT_TblWidth();
    }
    return m_right;
}

const CT_TblWidth& CT_TcMar::get_right() const
{
    if (m_right)
    {
        return *m_right;
    }
    return CT_TblWidth::default_instance();
}

void CT_TcMar::clear()
{
    m_has_top = false;

    if (m_top)
    {
        delete m_top;
        m_top = NULL;
    }


    m_has_start = false;

    if (m_start)
    {
        delete m_start;
        m_start = NULL;
    }


    m_has_left = false;

    if (m_left)
    {
        delete m_left;
        m_left = NULL;
    }


    m_has_bottom = false;

    if (m_bottom)
    {
        delete m_bottom;
        m_bottom = NULL;
    }


    m_has_end = false;

    if (m_end)
    {
        delete m_end;
        m_end = NULL;
    }


    m_has_right = false;

    if (m_right)
    {
        delete m_right;
        m_right = NULL;
    }

}

void CT_TcMar::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";


    if (m_has_top)
    {
        m_top->toXmlElem("w:top", "", _outStream);
    }


    if (m_has_start)
    {
        m_start->toXmlElem("w:start", "", _outStream);
    }


    if (m_has_left)
    {
        m_left->toXmlElem("w:left", "", _outStream);
    }


    if (m_has_bottom)
    {
        m_bottom->toXmlElem("w:bottom", "", _outStream);
    }


    if (m_has_end)
    {
        m_end->toXmlElem("w:end", "", _outStream);
    }


    if (m_has_right)
    {
        m_right->toXmlElem("w:right", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_TcMar& CT_TcMar::default_instance()
{
    if (!CT_TcMar::default_instance_)
    {
        CT_TcMar::default_instance_ = new CT_TcMar();
    }
    return *CT_TcMar::default_instance_;
}

CT_TcMar* CT_TcMar::default_instance_ = NULL;

// CT_VMerge
CT_VMerge::CT_VMerge()
    :m_has_val_attr(false),
     m_val_attr(NULL)
{
}
CT_VMerge::~CT_VMerge()
{
    clear();
}
void CT_VMerge::clear()
{
    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }

}

void CT_VMerge::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_VMerge& CT_VMerge::default_instance()
{
    if (!CT_VMerge::default_instance_)
    {
        CT_VMerge::default_instance_ = new CT_VMerge();
    }
    return *CT_VMerge::default_instance_;
}

bool CT_VMerge::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_VMerge::set_val_attr(const ST_Merge& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ST_Merge(_val_attr);
}

const ST_Merge& CT_VMerge::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ST_Merge::default_instance();
}

CT_VMerge* CT_VMerge::default_instance_ = NULL;

// CT_HMerge
CT_HMerge::CT_HMerge()
    :m_has_val_attr(false),
     m_val_attr(NULL)
{
}
CT_HMerge::~CT_HMerge()
{
    clear();
}
void CT_HMerge::clear()
{
    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }

}

void CT_HMerge::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_HMerge& CT_HMerge::default_instance()
{
    if (!CT_HMerge::default_instance_)
    {
        CT_HMerge::default_instance_ = new CT_HMerge();
    }
    return *CT_HMerge::default_instance_;
}

bool CT_HMerge::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_HMerge::set_val_attr(const ST_Merge& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ST_Merge(_val_attr);
}

const ST_Merge& CT_HMerge::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ST_Merge::default_instance();
}

CT_HMerge* CT_HMerge::default_instance_ = NULL;

// CT_TcPrBase
CT_TcPrBase::CT_TcPrBase()
    :m_has_cnfStyle(false),
     m_cnfStyle(NULL),
     m_has_tcW(false),
     m_tcW(NULL),
     m_has_gridSpan(false),
     m_gridSpan(NULL),
     m_has_hMerge(false),
     m_hMerge(NULL),
     m_has_vMerge(false),
     m_vMerge(NULL),
     m_has_tcBorders(false),
     m_tcBorders(NULL),
     m_has_shd(false),
     m_shd(NULL),
     m_has_noWrap(false),
     m_noWrap(NULL),
     m_has_tcMar(false),
     m_tcMar(NULL),
     m_has_textDirection(false),
     m_textDirection(NULL),
     m_has_tcFitText(false),
     m_tcFitText(NULL),
     m_has_vAlign(false),
     m_vAlign(NULL),
     m_has_hideMark(false),
     m_hideMark(NULL),
     m_has_headers(false),
     m_headers(NULL)
{
}
CT_TcPrBase::~CT_TcPrBase()
{
    clear();
}
bool CT_TcPrBase::has_cnfStyle() const
{
    return m_has_cnfStyle;
}

CT_Cnf* CT_TcPrBase::mutable_cnfStyle()
{
    m_has_cnfStyle = true;
    if (!m_cnfStyle)
    {
        m_cnfStyle = new CT_Cnf();
    }
    return m_cnfStyle;
}

const CT_Cnf& CT_TcPrBase::get_cnfStyle() const
{
    if (m_cnfStyle)
    {
        return *m_cnfStyle;
    }
    return CT_Cnf::default_instance();
}

bool CT_TcPrBase::has_tcW() const
{
    return m_has_tcW;
}

CT_TblWidth* CT_TcPrBase::mutable_tcW()
{
    m_has_tcW = true;
    if (!m_tcW)
    {
        m_tcW = new CT_TblWidth();
    }
    return m_tcW;
}

const CT_TblWidth& CT_TcPrBase::get_tcW() const
{
    if (m_tcW)
    {
        return *m_tcW;
    }
    return CT_TblWidth::default_instance();
}

bool CT_TcPrBase::has_gridSpan() const
{
    return m_has_gridSpan;
}

CT_DecimalNumber* CT_TcPrBase::mutable_gridSpan()
{
    m_has_gridSpan = true;
    if (!m_gridSpan)
    {
        m_gridSpan = new CT_DecimalNumber();
    }
    return m_gridSpan;
}

const CT_DecimalNumber& CT_TcPrBase::get_gridSpan() const
{
    if (m_gridSpan)
    {
        return *m_gridSpan;
    }
    return CT_DecimalNumber::default_instance();
}

bool CT_TcPrBase::has_hMerge() const
{
    return m_has_hMerge;
}

CT_HMerge* CT_TcPrBase::mutable_hMerge()
{
    m_has_hMerge = true;
    if (!m_hMerge)
    {
        m_hMerge = new CT_HMerge();
    }
    return m_hMerge;
}

const CT_HMerge& CT_TcPrBase::get_hMerge() const
{
    if (m_hMerge)
    {
        return *m_hMerge;
    }
    return CT_HMerge::default_instance();
}

bool CT_TcPrBase::has_vMerge() const
{
    return m_has_vMerge;
}

CT_VMerge* CT_TcPrBase::mutable_vMerge()
{
    m_has_vMerge = true;
    if (!m_vMerge)
    {
        m_vMerge = new CT_VMerge();
    }
    return m_vMerge;
}

const CT_VMerge& CT_TcPrBase::get_vMerge() const
{
    if (m_vMerge)
    {
        return *m_vMerge;
    }
    return CT_VMerge::default_instance();
}

bool CT_TcPrBase::has_tcBorders() const
{
    return m_has_tcBorders;
}

CT_TcBorders* CT_TcPrBase::mutable_tcBorders()
{
    m_has_tcBorders = true;
    if (!m_tcBorders)
    {
        m_tcBorders = new CT_TcBorders();
    }
    return m_tcBorders;
}

const CT_TcBorders& CT_TcPrBase::get_tcBorders() const
{
    if (m_tcBorders)
    {
        return *m_tcBorders;
    }
    return CT_TcBorders::default_instance();
}

bool CT_TcPrBase::has_shd() const
{
    return m_has_shd;
}

CT_Shd* CT_TcPrBase::mutable_shd()
{
    m_has_shd = true;
    if (!m_shd)
    {
        m_shd = new CT_Shd();
    }
    return m_shd;
}

const CT_Shd& CT_TcPrBase::get_shd() const
{
    if (m_shd)
    {
        return *m_shd;
    }
    return CT_Shd::default_instance();
}

bool CT_TcPrBase::has_noWrap() const
{
    return m_has_noWrap;
}

CT_OnOff* CT_TcPrBase::mutable_noWrap()
{
    m_has_noWrap = true;
    if (!m_noWrap)
    {
        m_noWrap = new CT_OnOff();
    }
    return m_noWrap;
}

const CT_OnOff& CT_TcPrBase::get_noWrap() const
{
    if (m_noWrap)
    {
        return *m_noWrap;
    }
    return CT_OnOff::default_instance();
}

bool CT_TcPrBase::has_tcMar() const
{
    return m_has_tcMar;
}

CT_TcMar* CT_TcPrBase::mutable_tcMar()
{
    m_has_tcMar = true;
    if (!m_tcMar)
    {
        m_tcMar = new CT_TcMar();
    }
    return m_tcMar;
}

const CT_TcMar& CT_TcPrBase::get_tcMar() const
{
    if (m_tcMar)
    {
        return *m_tcMar;
    }
    return CT_TcMar::default_instance();
}

bool CT_TcPrBase::has_textDirection() const
{
    return m_has_textDirection;
}

CT_TextDirection* CT_TcPrBase::mutable_textDirection()
{
    m_has_textDirection = true;
    if (!m_textDirection)
    {
        m_textDirection = new CT_TextDirection();
    }
    return m_textDirection;
}

const CT_TextDirection& CT_TcPrBase::get_textDirection() const
{
    if (m_textDirection)
    {
        return *m_textDirection;
    }
    return CT_TextDirection::default_instance();
}

bool CT_TcPrBase::has_tcFitText() const
{
    return m_has_tcFitText;
}

CT_OnOff* CT_TcPrBase::mutable_tcFitText()
{
    m_has_tcFitText = true;
    if (!m_tcFitText)
    {
        m_tcFitText = new CT_OnOff();
    }
    return m_tcFitText;
}

const CT_OnOff& CT_TcPrBase::get_tcFitText() const
{
    if (m_tcFitText)
    {
        return *m_tcFitText;
    }
    return CT_OnOff::default_instance();
}

bool CT_TcPrBase::has_vAlign() const
{
    return m_has_vAlign;
}

CT_VerticalJc* CT_TcPrBase::mutable_vAlign()
{
    m_has_vAlign = true;
    if (!m_vAlign)
    {
        m_vAlign = new CT_VerticalJc();
    }
    return m_vAlign;
}

const CT_VerticalJc& CT_TcPrBase::get_vAlign() const
{
    if (m_vAlign)
    {
        return *m_vAlign;
    }
    return CT_VerticalJc::default_instance();
}

bool CT_TcPrBase::has_hideMark() const
{
    return m_has_hideMark;
}

CT_OnOff* CT_TcPrBase::mutable_hideMark()
{
    m_has_hideMark = true;
    if (!m_hideMark)
    {
        m_hideMark = new CT_OnOff();
    }
    return m_hideMark;
}

const CT_OnOff& CT_TcPrBase::get_hideMark() const
{
    if (m_hideMark)
    {
        return *m_hideMark;
    }
    return CT_OnOff::default_instance();
}

bool CT_TcPrBase::has_headers() const
{
    return m_has_headers;
}

CT_Headers* CT_TcPrBase::mutable_headers()
{
    m_has_headers = true;
    if (!m_headers)
    {
        m_headers = new CT_Headers();
    }
    return m_headers;
}

const CT_Headers& CT_TcPrBase::get_headers() const
{
    if (m_headers)
    {
        return *m_headers;
    }
    return CT_Headers::default_instance();
}

void CT_TcPrBase::clear()
{
    m_has_cnfStyle = false;

    if (m_cnfStyle)
    {
        delete m_cnfStyle;
        m_cnfStyle = NULL;
    }


    m_has_tcW = false;

    if (m_tcW)
    {
        delete m_tcW;
        m_tcW = NULL;
    }


    m_has_gridSpan = false;

    if (m_gridSpan)
    {
        delete m_gridSpan;
        m_gridSpan = NULL;
    }


    m_has_hMerge = false;

    if (m_hMerge)
    {
        delete m_hMerge;
        m_hMerge = NULL;
    }


    m_has_vMerge = false;

    if (m_vMerge)
    {
        delete m_vMerge;
        m_vMerge = NULL;
    }


    m_has_tcBorders = false;

    if (m_tcBorders)
    {
        delete m_tcBorders;
        m_tcBorders = NULL;
    }


    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }


    m_has_noWrap = false;

    if (m_noWrap)
    {
        delete m_noWrap;
        m_noWrap = NULL;
    }


    m_has_tcMar = false;

    if (m_tcMar)
    {
        delete m_tcMar;
        m_tcMar = NULL;
    }


    m_has_textDirection = false;

    if (m_textDirection)
    {
        delete m_textDirection;
        m_textDirection = NULL;
    }


    m_has_tcFitText = false;

    if (m_tcFitText)
    {
        delete m_tcFitText;
        m_tcFitText = NULL;
    }


    m_has_vAlign = false;

    if (m_vAlign)
    {
        delete m_vAlign;
        m_vAlign = NULL;
    }


    m_has_hideMark = false;

    if (m_hideMark)
    {
        delete m_hideMark;
        m_hideMark = NULL;
    }


    m_has_headers = false;

    if (m_headers)
    {
        delete m_headers;
        m_headers = NULL;
    }

}

void CT_TcPrBase::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";


    if (m_has_cnfStyle)
    {
        m_cnfStyle->toXmlElem("w:cnfStyle", "", _outStream);
    }


    if (m_has_tcW)
    {
        m_tcW->toXmlElem("w:tcW", "", _outStream);
    }


    if (m_has_gridSpan)
    {
        m_gridSpan->toXmlElem("w:gridSpan", "", _outStream);
    }


    if (m_has_hMerge)
    {
        m_hMerge->toXmlElem("w:hMerge", "", _outStream);
    }


    if (m_has_vMerge)
    {
        m_vMerge->toXmlElem("w:vMerge", "", _outStream);
    }


    if (m_has_tcBorders)
    {
        m_tcBorders->toXmlElem("w:tcBorders", "", _outStream);
    }


    if (m_has_shd)
    {
        m_shd->toXmlElem("w:shd", "", _outStream);
    }


    if (m_has_noWrap)
    {
        m_noWrap->toXmlElem("w:noWrap", "", _outStream);
    }


    if (m_has_tcMar)
    {
        m_tcMar->toXmlElem("w:tcMar", "", _outStream);
    }


    if (m_has_textDirection)
    {
        m_textDirection->toXmlElem("w:textDirection", "", _outStream);
    }


    if (m_has_tcFitText)
    {
        m_tcFitText->toXmlElem("w:tcFitText", "", _outStream);
    }


    if (m_has_vAlign)
    {
        m_vAlign->toXmlElem("w:vAlign", "", _outStream);
    }


    if (m_has_hideMark)
    {
        m_hideMark->toXmlElem("w:hideMark", "", _outStream);
    }


    if (m_has_headers)
    {
        m_headers->toXmlElem("w:headers", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_TcPrBase& CT_TcPrBase::default_instance()
{
    if (!CT_TcPrBase::default_instance_)
    {
        CT_TcPrBase::default_instance_ = new CT_TcPrBase();
    }
    return *CT_TcPrBase::default_instance_;
}

CT_TcPrBase* CT_TcPrBase::default_instance_ = NULL;

// CT_TcPr
CT_TcPr::CT_TcPr()
    :m_has_cnfStyle(false),
     m_cnfStyle(NULL),
     m_has_tcW(false),
     m_tcW(NULL),
     m_has_gridSpan(false),
     m_gridSpan(NULL),
     m_has_hMerge(false),
     m_hMerge(NULL),
     m_has_vMerge(false),
     m_vMerge(NULL),
     m_has_tcBorders(false),
     m_tcBorders(NULL),
     m_has_shd(false),
     m_shd(NULL),
     m_has_noWrap(false),
     m_noWrap(NULL),
     m_has_tcMar(false),
     m_tcMar(NULL),
     m_has_textDirection(false),
     m_textDirection(NULL),
     m_has_tcFitText(false),
     m_tcFitText(NULL),
     m_has_vAlign(false),
     m_vAlign(NULL),
     m_has_hideMark(false),
     m_hideMark(NULL),
     m_has_headers(false),
     m_headers(NULL),
     m_has_cellIns(false),
     m_cellIns(NULL),
     m_has_cellDel(false),
     m_cellDel(NULL),
     m_has_cellMerge(false),
     m_cellMerge(NULL),
     m_has_tcPrChange(false),
     m_tcPrChange(NULL)
{
}
CT_TcPr::~CT_TcPr()
{
    clear();
}
bool CT_TcPr::has_cnfStyle() const
{
    return m_has_cnfStyle;
}

CT_Cnf* CT_TcPr::mutable_cnfStyle()
{
    m_has_cnfStyle = true;
    if (!m_cnfStyle)
    {
        m_cnfStyle = new CT_Cnf();
    }
    return m_cnfStyle;
}

const CT_Cnf& CT_TcPr::get_cnfStyle() const
{
    if (m_cnfStyle)
    {
        return *m_cnfStyle;
    }
    return CT_Cnf::default_instance();
}

bool CT_TcPr::has_tcW() const
{
    return m_has_tcW;
}

CT_TblWidth* CT_TcPr::mutable_tcW()
{
    m_has_tcW = true;
    if (!m_tcW)
    {
        m_tcW = new CT_TblWidth();
    }
    return m_tcW;
}

const CT_TblWidth& CT_TcPr::get_tcW() const
{
    if (m_tcW)
    {
        return *m_tcW;
    }
    return CT_TblWidth::default_instance();
}

bool CT_TcPr::has_gridSpan() const
{
    return m_has_gridSpan;
}

CT_DecimalNumber* CT_TcPr::mutable_gridSpan()
{
    m_has_gridSpan = true;
    if (!m_gridSpan)
    {
        m_gridSpan = new CT_DecimalNumber();
    }
    return m_gridSpan;
}

const CT_DecimalNumber& CT_TcPr::get_gridSpan() const
{
    if (m_gridSpan)
    {
        return *m_gridSpan;
    }
    return CT_DecimalNumber::default_instance();
}

bool CT_TcPr::has_hMerge() const
{
    return m_has_hMerge;
}

CT_HMerge* CT_TcPr::mutable_hMerge()
{
    m_has_hMerge = true;
    if (!m_hMerge)
    {
        m_hMerge = new CT_HMerge();
    }
    return m_hMerge;
}

const CT_HMerge& CT_TcPr::get_hMerge() const
{
    if (m_hMerge)
    {
        return *m_hMerge;
    }
    return CT_HMerge::default_instance();
}

bool CT_TcPr::has_vMerge() const
{
    return m_has_vMerge;
}

CT_VMerge* CT_TcPr::mutable_vMerge()
{
    m_has_vMerge = true;
    if (!m_vMerge)
    {
        m_vMerge = new CT_VMerge();
    }
    return m_vMerge;
}

const CT_VMerge& CT_TcPr::get_vMerge() const
{
    if (m_vMerge)
    {
        return *m_vMerge;
    }
    return CT_VMerge::default_instance();
}

bool CT_TcPr::has_tcBorders() const
{
    return m_has_tcBorders;
}

CT_TcBorders* CT_TcPr::mutable_tcBorders()
{
    m_has_tcBorders = true;
    if (!m_tcBorders)
    {
        m_tcBorders = new CT_TcBorders();
    }
    return m_tcBorders;
}

const CT_TcBorders& CT_TcPr::get_tcBorders() const
{
    if (m_tcBorders)
    {
        return *m_tcBorders;
    }
    return CT_TcBorders::default_instance();
}

bool CT_TcPr::has_shd() const
{
    return m_has_shd;
}

CT_Shd* CT_TcPr::mutable_shd()
{
    m_has_shd = true;
    if (!m_shd)
    {
        m_shd = new CT_Shd();
    }
    return m_shd;
}

const CT_Shd& CT_TcPr::get_shd() const
{
    if (m_shd)
    {
        return *m_shd;
    }
    return CT_Shd::default_instance();
}

bool CT_TcPr::has_noWrap() const
{
    return m_has_noWrap;
}

CT_OnOff* CT_TcPr::mutable_noWrap()
{
    m_has_noWrap = true;
    if (!m_noWrap)
    {
        m_noWrap = new CT_OnOff();
    }
    return m_noWrap;
}

const CT_OnOff& CT_TcPr::get_noWrap() const
{
    if (m_noWrap)
    {
        return *m_noWrap;
    }
    return CT_OnOff::default_instance();
}

bool CT_TcPr::has_tcMar() const
{
    return m_has_tcMar;
}

CT_TcMar* CT_TcPr::mutable_tcMar()
{
    m_has_tcMar = true;
    if (!m_tcMar)
    {
        m_tcMar = new CT_TcMar();
    }
    return m_tcMar;
}

const CT_TcMar& CT_TcPr::get_tcMar() const
{
    if (m_tcMar)
    {
        return *m_tcMar;
    }
    return CT_TcMar::default_instance();
}

bool CT_TcPr::has_textDirection() const
{
    return m_has_textDirection;
}

CT_TextDirection* CT_TcPr::mutable_textDirection()
{
    m_has_textDirection = true;
    if (!m_textDirection)
    {
        m_textDirection = new CT_TextDirection();
    }
    return m_textDirection;
}

const CT_TextDirection& CT_TcPr::get_textDirection() const
{
    if (m_textDirection)
    {
        return *m_textDirection;
    }
    return CT_TextDirection::default_instance();
}

bool CT_TcPr::has_tcFitText() const
{
    return m_has_tcFitText;
}

CT_OnOff* CT_TcPr::mutable_tcFitText()
{
    m_has_tcFitText = true;
    if (!m_tcFitText)
    {
        m_tcFitText = new CT_OnOff();
    }
    return m_tcFitText;
}

const CT_OnOff& CT_TcPr::get_tcFitText() const
{
    if (m_tcFitText)
    {
        return *m_tcFitText;
    }
    return CT_OnOff::default_instance();
}

bool CT_TcPr::has_vAlign() const
{
    return m_has_vAlign;
}

CT_VerticalJc* CT_TcPr::mutable_vAlign()
{
    m_has_vAlign = true;
    if (!m_vAlign)
    {
        m_vAlign = new CT_VerticalJc();
    }
    return m_vAlign;
}

const CT_VerticalJc& CT_TcPr::get_vAlign() const
{
    if (m_vAlign)
    {
        return *m_vAlign;
    }
    return CT_VerticalJc::default_instance();
}

bool CT_TcPr::has_hideMark() const
{
    return m_has_hideMark;
}

CT_OnOff* CT_TcPr::mutable_hideMark()
{
    m_has_hideMark = true;
    if (!m_hideMark)
    {
        m_hideMark = new CT_OnOff();
    }
    return m_hideMark;
}

const CT_OnOff& CT_TcPr::get_hideMark() const
{
    if (m_hideMark)
    {
        return *m_hideMark;
    }
    return CT_OnOff::default_instance();
}

bool CT_TcPr::has_headers() const
{
    return m_has_headers;
}

CT_Headers* CT_TcPr::mutable_headers()
{
    m_has_headers = true;
    if (!m_headers)
    {
        m_headers = new CT_Headers();
    }
    return m_headers;
}

const CT_Headers& CT_TcPr::get_headers() const
{
    if (m_headers)
    {
        return *m_headers;
    }
    return CT_Headers::default_instance();
}

bool CT_TcPr::has_cellIns() const
{
    return m_has_cellIns;
}

CT_TrackChange* CT_TcPr::mutable_cellIns()
{

    m_has_cellDel = false;

    if (m_cellDel)
    {
        delete m_cellDel;
        m_cellDel = NULL;
    }
    ;

    m_has_cellMerge = false;

    if (m_cellMerge)
    {
        delete m_cellMerge;
        m_cellMerge = NULL;
    }
    ;

    m_has_cellIns = true;
    if (!m_cellIns)
    {
        m_cellIns = new CT_TrackChange();
    }
    return m_cellIns;
}

const CT_TrackChange& CT_TcPr::get_cellIns() const
{
    if (m_cellIns)
    {
        return *m_cellIns;
    }
    return CT_TrackChange::default_instance();
}

bool CT_TcPr::has_cellDel() const
{
    return m_has_cellDel;
}

CT_TrackChange* CT_TcPr::mutable_cellDel()
{

    m_has_cellIns = false;

    if (m_cellIns)
    {
        delete m_cellIns;
        m_cellIns = NULL;
    }
    ;

    m_has_cellMerge = false;

    if (m_cellMerge)
    {
        delete m_cellMerge;
        m_cellMerge = NULL;
    }
    ;

    m_has_cellDel = true;
    if (!m_cellDel)
    {
        m_cellDel = new CT_TrackChange();
    }
    return m_cellDel;
}

const CT_TrackChange& CT_TcPr::get_cellDel() const
{
    if (m_cellDel)
    {
        return *m_cellDel;
    }
    return CT_TrackChange::default_instance();
}

bool CT_TcPr::has_cellMerge() const
{
    return m_has_cellMerge;
}

CT_CellMergeTrackChange* CT_TcPr::mutable_cellMerge()
{

    m_has_cellIns = false;

    if (m_cellIns)
    {
        delete m_cellIns;
        m_cellIns = NULL;
    }
    ;

    m_has_cellDel = false;

    if (m_cellDel)
    {
        delete m_cellDel;
        m_cellDel = NULL;
    }
    ;

    m_has_cellMerge = true;
    if (!m_cellMerge)
    {
        m_cellMerge = new CT_CellMergeTrackChange();
    }
    return m_cellMerge;
}

const CT_CellMergeTrackChange& CT_TcPr::get_cellMerge() const
{
    if (m_cellMerge)
    {
        return *m_cellMerge;
    }
    return CT_CellMergeTrackChange::default_instance();
}

bool CT_TcPr::has_tcPrChange() const
{
    return m_has_tcPrChange;
}

CT_TcPrChange* CT_TcPr::mutable_tcPrChange()
{
    m_has_tcPrChange = true;
    if (!m_tcPrChange)
    {
        m_tcPrChange = new CT_TcPrChange();
    }
    return m_tcPrChange;
}

const CT_TcPrChange& CT_TcPr::get_tcPrChange() const
{
    if (m_tcPrChange)
    {
        return *m_tcPrChange;
    }
    return CT_TcPrChange::default_instance();
}

void CT_TcPr::clear()
{
    m_has_cnfStyle = false;

    if (m_cnfStyle)
    {
        delete m_cnfStyle;
        m_cnfStyle = NULL;
    }


    m_has_tcW = false;

    if (m_tcW)
    {
        delete m_tcW;
        m_tcW = NULL;
    }


    m_has_gridSpan = false;

    if (m_gridSpan)
    {
        delete m_gridSpan;
        m_gridSpan = NULL;
    }


    m_has_hMerge = false;

    if (m_hMerge)
    {
        delete m_hMerge;
        m_hMerge = NULL;
    }


    m_has_vMerge = false;

    if (m_vMerge)
    {
        delete m_vMerge;
        m_vMerge = NULL;
    }


    m_has_tcBorders = false;

    if (m_tcBorders)
    {
        delete m_tcBorders;
        m_tcBorders = NULL;
    }


    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }


    m_has_noWrap = false;

    if (m_noWrap)
    {
        delete m_noWrap;
        m_noWrap = NULL;
    }


    m_has_tcMar = false;

    if (m_tcMar)
    {
        delete m_tcMar;
        m_tcMar = NULL;
    }


    m_has_textDirection = false;

    if (m_textDirection)
    {
        delete m_textDirection;
        m_textDirection = NULL;
    }


    m_has_tcFitText = false;

    if (m_tcFitText)
    {
        delete m_tcFitText;
        m_tcFitText = NULL;
    }


    m_has_vAlign = false;

    if (m_vAlign)
    {
        delete m_vAlign;
        m_vAlign = NULL;
    }


    m_has_hideMark = false;

    if (m_hideMark)
    {
        delete m_hideMark;
        m_hideMark = NULL;
    }


    m_has_headers = false;

    if (m_headers)
    {
        delete m_headers;
        m_headers = NULL;
    }


    m_has_cellIns = false;

    if (m_cellIns)
    {
        delete m_cellIns;
        m_cellIns = NULL;
    }


    m_has_cellDel = false;

    if (m_cellDel)
    {
        delete m_cellDel;
        m_cellDel = NULL;
    }


    m_has_cellMerge = false;

    if (m_cellMerge)
    {
        delete m_cellMerge;
        m_cellMerge = NULL;
    }


    m_has_tcPrChange = false;

    if (m_tcPrChange)
    {
        delete m_tcPrChange;
        m_tcPrChange = NULL;
    }

}

void CT_TcPr::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";


    if (m_has_cnfStyle)
    {
        m_cnfStyle->toXmlElem("w:cnfStyle", "", _outStream);
    }


    if (m_has_tcW)
    {
        m_tcW->toXmlElem("w:tcW", "", _outStream);
    }


    if (m_has_gridSpan)
    {
        m_gridSpan->toXmlElem("w:gridSpan", "", _outStream);
    }


    if (m_has_hMerge)
    {
        m_hMerge->toXmlElem("w:hMerge", "", _outStream);
    }


    if (m_has_vMerge)
    {
        m_vMerge->toXmlElem("w:vMerge", "", _outStream);
    }


    if (m_has_tcBorders)
    {
        m_tcBorders->toXmlElem("w:tcBorders", "", _outStream);
    }


    if (m_has_shd)
    {
        m_shd->toXmlElem("w:shd", "", _outStream);
    }


    if (m_has_noWrap)
    {
        m_noWrap->toXmlElem("w:noWrap", "", _outStream);
    }


    if (m_has_tcMar)
    {
        m_tcMar->toXmlElem("w:tcMar", "", _outStream);
    }


    if (m_has_textDirection)
    {
        m_textDirection->toXmlElem("w:textDirection", "", _outStream);
    }


    if (m_has_tcFitText)
    {
        m_tcFitText->toXmlElem("w:tcFitText", "", _outStream);
    }


    if (m_has_vAlign)
    {
        m_vAlign->toXmlElem("w:vAlign", "", _outStream);
    }


    if (m_has_hideMark)
    {
        m_hideMark->toXmlElem("w:hideMark", "", _outStream);
    }


    if (m_has_headers)
    {
        m_headers->toXmlElem("w:headers", "", _outStream);
    }

    {
        bool elemHasValueList[3] = {m_has_cellIns, m_has_cellDel, m_has_cellMerge};
        int cnt = count(elemHasValueList, elemHasValueList + 3, true);
        assert(cnt == 1);
    }


    if (m_has_cellIns)
    {
        m_cellIns->toXmlElem("w:cellIns", "", _outStream);
    }


    if (m_has_cellDel)
    {
        m_cellDel->toXmlElem("w:cellDel", "", _outStream);
    }


    if (m_has_cellMerge)
    {
        m_cellMerge->toXmlElem("w:cellMerge", "", _outStream);
    }


    if (m_has_tcPrChange)
    {
        m_tcPrChange->toXmlElem("w:tcPrChange", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_TcPr& CT_TcPr::default_instance()
{
    if (!CT_TcPr::default_instance_)
    {
        CT_TcPr::default_instance_ = new CT_TcPr();
    }
    return *CT_TcPr::default_instance_;
}

CT_TcPr* CT_TcPr::default_instance_ = NULL;

// CT_TcPrInner
CT_TcPrInner::CT_TcPrInner()
    :m_has_cnfStyle(false),
     m_cnfStyle(NULL),
     m_has_tcW(false),
     m_tcW(NULL),
     m_has_gridSpan(false),
     m_gridSpan(NULL),
     m_has_hMerge(false),
     m_hMerge(NULL),
     m_has_vMerge(false),
     m_vMerge(NULL),
     m_has_tcBorders(false),
     m_tcBorders(NULL),
     m_has_shd(false),
     m_shd(NULL),
     m_has_noWrap(false),
     m_noWrap(NULL),
     m_has_tcMar(false),
     m_tcMar(NULL),
     m_has_textDirection(false),
     m_textDirection(NULL),
     m_has_tcFitText(false),
     m_tcFitText(NULL),
     m_has_vAlign(false),
     m_vAlign(NULL),
     m_has_hideMark(false),
     m_hideMark(NULL),
     m_has_headers(false),
     m_headers(NULL),
     m_has_cellIns(false),
     m_cellIns(NULL),
     m_has_cellDel(false),
     m_cellDel(NULL),
     m_has_cellMerge(false),
     m_cellMerge(NULL)
{
}
CT_TcPrInner::~CT_TcPrInner()
{
    clear();
}
bool CT_TcPrInner::has_cnfStyle() const
{
    return m_has_cnfStyle;
}

CT_Cnf* CT_TcPrInner::mutable_cnfStyle()
{
    m_has_cnfStyle = true;
    if (!m_cnfStyle)
    {
        m_cnfStyle = new CT_Cnf();
    }
    return m_cnfStyle;
}

const CT_Cnf& CT_TcPrInner::get_cnfStyle() const
{
    if (m_cnfStyle)
    {
        return *m_cnfStyle;
    }
    return CT_Cnf::default_instance();
}

bool CT_TcPrInner::has_tcW() const
{
    return m_has_tcW;
}

CT_TblWidth* CT_TcPrInner::mutable_tcW()
{
    m_has_tcW = true;
    if (!m_tcW)
    {
        m_tcW = new CT_TblWidth();
    }
    return m_tcW;
}

const CT_TblWidth& CT_TcPrInner::get_tcW() const
{
    if (m_tcW)
    {
        return *m_tcW;
    }
    return CT_TblWidth::default_instance();
}

bool CT_TcPrInner::has_gridSpan() const
{
    return m_has_gridSpan;
}

CT_DecimalNumber* CT_TcPrInner::mutable_gridSpan()
{
    m_has_gridSpan = true;
    if (!m_gridSpan)
    {
        m_gridSpan = new CT_DecimalNumber();
    }
    return m_gridSpan;
}

const CT_DecimalNumber& CT_TcPrInner::get_gridSpan() const
{
    if (m_gridSpan)
    {
        return *m_gridSpan;
    }
    return CT_DecimalNumber::default_instance();
}

bool CT_TcPrInner::has_hMerge() const
{
    return m_has_hMerge;
}

CT_HMerge* CT_TcPrInner::mutable_hMerge()
{
    m_has_hMerge = true;
    if (!m_hMerge)
    {
        m_hMerge = new CT_HMerge();
    }
    return m_hMerge;
}

const CT_HMerge& CT_TcPrInner::get_hMerge() const
{
    if (m_hMerge)
    {
        return *m_hMerge;
    }
    return CT_HMerge::default_instance();
}

bool CT_TcPrInner::has_vMerge() const
{
    return m_has_vMerge;
}

CT_VMerge* CT_TcPrInner::mutable_vMerge()
{
    m_has_vMerge = true;
    if (!m_vMerge)
    {
        m_vMerge = new CT_VMerge();
    }
    return m_vMerge;
}

const CT_VMerge& CT_TcPrInner::get_vMerge() const
{
    if (m_vMerge)
    {
        return *m_vMerge;
    }
    return CT_VMerge::default_instance();
}

bool CT_TcPrInner::has_tcBorders() const
{
    return m_has_tcBorders;
}

CT_TcBorders* CT_TcPrInner::mutable_tcBorders()
{
    m_has_tcBorders = true;
    if (!m_tcBorders)
    {
        m_tcBorders = new CT_TcBorders();
    }
    return m_tcBorders;
}

const CT_TcBorders& CT_TcPrInner::get_tcBorders() const
{
    if (m_tcBorders)
    {
        return *m_tcBorders;
    }
    return CT_TcBorders::default_instance();
}

bool CT_TcPrInner::has_shd() const
{
    return m_has_shd;
}

CT_Shd* CT_TcPrInner::mutable_shd()
{
    m_has_shd = true;
    if (!m_shd)
    {
        m_shd = new CT_Shd();
    }
    return m_shd;
}

const CT_Shd& CT_TcPrInner::get_shd() const
{
    if (m_shd)
    {
        return *m_shd;
    }
    return CT_Shd::default_instance();
}

bool CT_TcPrInner::has_noWrap() const
{
    return m_has_noWrap;
}

CT_OnOff* CT_TcPrInner::mutable_noWrap()
{
    m_has_noWrap = true;
    if (!m_noWrap)
    {
        m_noWrap = new CT_OnOff();
    }
    return m_noWrap;
}

const CT_OnOff& CT_TcPrInner::get_noWrap() const
{
    if (m_noWrap)
    {
        return *m_noWrap;
    }
    return CT_OnOff::default_instance();
}

bool CT_TcPrInner::has_tcMar() const
{
    return m_has_tcMar;
}

CT_TcMar* CT_TcPrInner::mutable_tcMar()
{
    m_has_tcMar = true;
    if (!m_tcMar)
    {
        m_tcMar = new CT_TcMar();
    }
    return m_tcMar;
}

const CT_TcMar& CT_TcPrInner::get_tcMar() const
{
    if (m_tcMar)
    {
        return *m_tcMar;
    }
    return CT_TcMar::default_instance();
}

bool CT_TcPrInner::has_textDirection() const
{
    return m_has_textDirection;
}

CT_TextDirection* CT_TcPrInner::mutable_textDirection()
{
    m_has_textDirection = true;
    if (!m_textDirection)
    {
        m_textDirection = new CT_TextDirection();
    }
    return m_textDirection;
}

const CT_TextDirection& CT_TcPrInner::get_textDirection() const
{
    if (m_textDirection)
    {
        return *m_textDirection;
    }
    return CT_TextDirection::default_instance();
}

bool CT_TcPrInner::has_tcFitText() const
{
    return m_has_tcFitText;
}

CT_OnOff* CT_TcPrInner::mutable_tcFitText()
{
    m_has_tcFitText = true;
    if (!m_tcFitText)
    {
        m_tcFitText = new CT_OnOff();
    }
    return m_tcFitText;
}

const CT_OnOff& CT_TcPrInner::get_tcFitText() const
{
    if (m_tcFitText)
    {
        return *m_tcFitText;
    }
    return CT_OnOff::default_instance();
}

bool CT_TcPrInner::has_vAlign() const
{
    return m_has_vAlign;
}

CT_VerticalJc* CT_TcPrInner::mutable_vAlign()
{
    m_has_vAlign = true;
    if (!m_vAlign)
    {
        m_vAlign = new CT_VerticalJc();
    }
    return m_vAlign;
}

const CT_VerticalJc& CT_TcPrInner::get_vAlign() const
{
    if (m_vAlign)
    {
        return *m_vAlign;
    }
    return CT_VerticalJc::default_instance();
}

bool CT_TcPrInner::has_hideMark() const
{
    return m_has_hideMark;
}

CT_OnOff* CT_TcPrInner::mutable_hideMark()
{
    m_has_hideMark = true;
    if (!m_hideMark)
    {
        m_hideMark = new CT_OnOff();
    }
    return m_hideMark;
}

const CT_OnOff& CT_TcPrInner::get_hideMark() const
{
    if (m_hideMark)
    {
        return *m_hideMark;
    }
    return CT_OnOff::default_instance();
}

bool CT_TcPrInner::has_headers() const
{
    return m_has_headers;
}

CT_Headers* CT_TcPrInner::mutable_headers()
{
    m_has_headers = true;
    if (!m_headers)
    {
        m_headers = new CT_Headers();
    }
    return m_headers;
}

const CT_Headers& CT_TcPrInner::get_headers() const
{
    if (m_headers)
    {
        return *m_headers;
    }
    return CT_Headers::default_instance();
}

bool CT_TcPrInner::has_cellIns() const
{
    return m_has_cellIns;
}

CT_TrackChange* CT_TcPrInner::mutable_cellIns()
{

    m_has_cellDel = false;

    if (m_cellDel)
    {
        delete m_cellDel;
        m_cellDel = NULL;
    }
    ;

    m_has_cellMerge = false;

    if (m_cellMerge)
    {
        delete m_cellMerge;
        m_cellMerge = NULL;
    }
    ;

    m_has_cellIns = true;
    if (!m_cellIns)
    {
        m_cellIns = new CT_TrackChange();
    }
    return m_cellIns;
}

const CT_TrackChange& CT_TcPrInner::get_cellIns() const
{
    if (m_cellIns)
    {
        return *m_cellIns;
    }
    return CT_TrackChange::default_instance();
}

bool CT_TcPrInner::has_cellDel() const
{
    return m_has_cellDel;
}

CT_TrackChange* CT_TcPrInner::mutable_cellDel()
{

    m_has_cellIns = false;

    if (m_cellIns)
    {
        delete m_cellIns;
        m_cellIns = NULL;
    }
    ;

    m_has_cellMerge = false;

    if (m_cellMerge)
    {
        delete m_cellMerge;
        m_cellMerge = NULL;
    }
    ;

    m_has_cellDel = true;
    if (!m_cellDel)
    {
        m_cellDel = new CT_TrackChange();
    }
    return m_cellDel;
}

const CT_TrackChange& CT_TcPrInner::get_cellDel() const
{
    if (m_cellDel)
    {
        return *m_cellDel;
    }
    return CT_TrackChange::default_instance();
}

bool CT_TcPrInner::has_cellMerge() const
{
    return m_has_cellMerge;
}

CT_CellMergeTrackChange* CT_TcPrInner::mutable_cellMerge()
{

    m_has_cellIns = false;

    if (m_cellIns)
    {
        delete m_cellIns;
        m_cellIns = NULL;
    }
    ;

    m_has_cellDel = false;

    if (m_cellDel)
    {
        delete m_cellDel;
        m_cellDel = NULL;
    }
    ;

    m_has_cellMerge = true;
    if (!m_cellMerge)
    {
        m_cellMerge = new CT_CellMergeTrackChange();
    }
    return m_cellMerge;
}

const CT_CellMergeTrackChange& CT_TcPrInner::get_cellMerge() const
{
    if (m_cellMerge)
    {
        return *m_cellMerge;
    }
    return CT_CellMergeTrackChange::default_instance();
}

void CT_TcPrInner::clear()
{
    m_has_cnfStyle = false;

    if (m_cnfStyle)
    {
        delete m_cnfStyle;
        m_cnfStyle = NULL;
    }


    m_has_tcW = false;

    if (m_tcW)
    {
        delete m_tcW;
        m_tcW = NULL;
    }


    m_has_gridSpan = false;

    if (m_gridSpan)
    {
        delete m_gridSpan;
        m_gridSpan = NULL;
    }


    m_has_hMerge = false;

    if (m_hMerge)
    {
        delete m_hMerge;
        m_hMerge = NULL;
    }


    m_has_vMerge = false;

    if (m_vMerge)
    {
        delete m_vMerge;
        m_vMerge = NULL;
    }


    m_has_tcBorders = false;

    if (m_tcBorders)
    {
        delete m_tcBorders;
        m_tcBorders = NULL;
    }


    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }


    m_has_noWrap = false;

    if (m_noWrap)
    {
        delete m_noWrap;
        m_noWrap = NULL;
    }


    m_has_tcMar = false;

    if (m_tcMar)
    {
        delete m_tcMar;
        m_tcMar = NULL;
    }


    m_has_textDirection = false;

    if (m_textDirection)
    {
        delete m_textDirection;
        m_textDirection = NULL;
    }


    m_has_tcFitText = false;

    if (m_tcFitText)
    {
        delete m_tcFitText;
        m_tcFitText = NULL;
    }


    m_has_vAlign = false;

    if (m_vAlign)
    {
        delete m_vAlign;
        m_vAlign = NULL;
    }


    m_has_hideMark = false;

    if (m_hideMark)
    {
        delete m_hideMark;
        m_hideMark = NULL;
    }


    m_has_headers = false;

    if (m_headers)
    {
        delete m_headers;
        m_headers = NULL;
    }


    m_has_cellIns = false;

    if (m_cellIns)
    {
        delete m_cellIns;
        m_cellIns = NULL;
    }


    m_has_cellDel = false;

    if (m_cellDel)
    {
        delete m_cellDel;
        m_cellDel = NULL;
    }


    m_has_cellMerge = false;

    if (m_cellMerge)
    {
        delete m_cellMerge;
        m_cellMerge = NULL;
    }

}

void CT_TcPrInner::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";


    if (m_has_cnfStyle)
    {
        m_cnfStyle->toXmlElem("w:cnfStyle", "", _outStream);
    }


    if (m_has_tcW)
    {
        m_tcW->toXmlElem("w:tcW", "", _outStream);
    }


    if (m_has_gridSpan)
    {
        m_gridSpan->toXmlElem("w:gridSpan", "", _outStream);
    }


    if (m_has_hMerge)
    {
        m_hMerge->toXmlElem("w:hMerge", "", _outStream);
    }


    if (m_has_vMerge)
    {
        m_vMerge->toXmlElem("w:vMerge", "", _outStream);
    }


    if (m_has_tcBorders)
    {
        m_tcBorders->toXmlElem("w:tcBorders", "", _outStream);
    }


    if (m_has_shd)
    {
        m_shd->toXmlElem("w:shd", "", _outStream);
    }


    if (m_has_noWrap)
    {
        m_noWrap->toXmlElem("w:noWrap", "", _outStream);
    }


    if (m_has_tcMar)
    {
        m_tcMar->toXmlElem("w:tcMar", "", _outStream);
    }


    if (m_has_textDirection)
    {
        m_textDirection->toXmlElem("w:textDirection", "", _outStream);
    }


    if (m_has_tcFitText)
    {
        m_tcFitText->toXmlElem("w:tcFitText", "", _outStream);
    }


    if (m_has_vAlign)
    {
        m_vAlign->toXmlElem("w:vAlign", "", _outStream);
    }


    if (m_has_hideMark)
    {
        m_hideMark->toXmlElem("w:hideMark", "", _outStream);
    }


    if (m_has_headers)
    {
        m_headers->toXmlElem("w:headers", "", _outStream);
    }

    {
        bool elemHasValueList[3] = {m_has_cellIns, m_has_cellDel, m_has_cellMerge};
        int cnt = count(elemHasValueList, elemHasValueList + 3, true);
        assert(cnt == 1);
    }


    if (m_has_cellIns)
    {
        m_cellIns->toXmlElem("w:cellIns", "", _outStream);
    }


    if (m_has_cellDel)
    {
        m_cellDel->toXmlElem("w:cellDel", "", _outStream);
    }


    if (m_has_cellMerge)
    {
        m_cellMerge->toXmlElem("w:cellMerge", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_TcPrInner& CT_TcPrInner::default_instance()
{
    if (!CT_TcPrInner::default_instance_)
    {
        CT_TcPrInner::default_instance_ = new CT_TcPrInner();
    }
    return *CT_TcPrInner::default_instance_;
}

CT_TcPrInner* CT_TcPrInner::default_instance_ = NULL;

// CT_Tc
CT_Tc::CT_Tc()
    :m_has_tcPr(false),
     m_tcPr(NULL),
     m_has_id_attr(false),
     m_id_attr(NULL)
{
}
CT_Tc::~CT_Tc()
{
    clear();
}
bool CT_Tc::has_tcPr() const
{
    return m_has_tcPr;
}

CT_TcPr* CT_Tc::mutable_tcPr()
{
    m_has_tcPr = true;
    if (!m_tcPr)
    {
        m_tcPr = new CT_TcPr();
    }
    return m_tcPr;
}

const CT_TcPr& CT_Tc::get_tcPr() const
{
    if (m_tcPr)
    {
        return *m_tcPr;
    }
    return CT_TcPr::default_instance();
}

CT_CustomXmlBlock* CT_Tc::add_customXml()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_CustomXmlBlock* pNewChild = pChildGroup->mutable_customXml();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_SdtBlock* CT_Tc::add_sdt()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_SdtBlock* pNewChild = pChildGroup->mutable_sdt();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_P* CT_Tc::add_p()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_P* pNewChild = pChildGroup->mutable_p();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_Tbl* CT_Tc::add_tbl()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Tbl* pNewChild = pChildGroup->mutable_tbl();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_ProofErr* CT_Tc::add_proofErr()
{
    ChildGroup_2 *pChildGroup = new ChildGroup_2();
    CT_ProofErr* pNewChild = pChildGroup->mutable_proofErr();
    m_childGroupList_2.push_back(pChildGroup);
    return pNewChild;
}

CT_PermStart* CT_Tc::add_permStart()
{
    ChildGroup_2 *pChildGroup = new ChildGroup_2();
    CT_PermStart* pNewChild = pChildGroup->mutable_permStart();
    m_childGroupList_2.push_back(pChildGroup);
    return pNewChild;
}

CT_Perm* CT_Tc::add_permEnd()
{
    ChildGroup_2 *pChildGroup = new ChildGroup_2();
    CT_Perm* pNewChild = pChildGroup->mutable_permEnd();
    m_childGroupList_2.push_back(pChildGroup);
    return pNewChild;
}

CT_Bookmark* CT_Tc::add_bookmarkStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_Bookmark* pNewChild = pChildGroup->mutable_bookmarkStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MarkupRange* CT_Tc::add_bookmarkEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MarkupRange* pNewChild = pChildGroup->mutable_bookmarkEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MoveBookmark* CT_Tc::add_moveFromRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MoveBookmark* pNewChild = pChildGroup->mutable_moveFromRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MarkupRange* CT_Tc::add_moveFromRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MarkupRange* pNewChild = pChildGroup->mutable_moveFromRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MoveBookmark* CT_Tc::add_moveToRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MoveBookmark* pNewChild = pChildGroup->mutable_moveToRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MarkupRange* CT_Tc::add_moveToRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MarkupRange* pNewChild = pChildGroup->mutable_moveToRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MarkupRange* CT_Tc::add_commentRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MarkupRange* pNewChild = pChildGroup->mutable_commentRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MarkupRange* CT_Tc::add_commentRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MarkupRange* pNewChild = pChildGroup->mutable_commentRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_TrackChange* CT_Tc::add_customXmlInsRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_TrackChange* pNewChild = pChildGroup->mutable_customXmlInsRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_Markup* CT_Tc::add_customXmlInsRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_Markup* pNewChild = pChildGroup->mutable_customXmlInsRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_TrackChange* CT_Tc::add_customXmlDelRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_TrackChange* pNewChild = pChildGroup->mutable_customXmlDelRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_Markup* CT_Tc::add_customXmlDelRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_Markup* pNewChild = pChildGroup->mutable_customXmlDelRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_TrackChange* CT_Tc::add_customXmlMoveFromRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_TrackChange* pNewChild = pChildGroup->mutable_customXmlMoveFromRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_Markup* CT_Tc::add_customXmlMoveFromRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_Markup* pNewChild = pChildGroup->mutable_customXmlMoveFromRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_TrackChange* CT_Tc::add_customXmlMoveToRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_TrackChange* pNewChild = pChildGroup->mutable_customXmlMoveToRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_Markup* CT_Tc::add_customXmlMoveToRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_Markup* pNewChild = pChildGroup->mutable_customXmlMoveToRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_RunTrackChange* CT_Tc::add_ins()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_RunTrackChange* pNewChild = pChildGroup->mutable_ins();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_RunTrackChange* CT_Tc::add_del()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_RunTrackChange* pNewChild = pChildGroup->mutable_del();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_RunTrackChange* CT_Tc::add_moveFrom()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_RunTrackChange* pNewChild = pChildGroup->mutable_moveFrom();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_RunTrackChange* CT_Tc::add_moveTo()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_RunTrackChange* pNewChild = pChildGroup->mutable_moveTo();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

ns_m::CT_OMathPara* CT_Tc::add_m_oMathPara()
{
    ChildGroup_4 *pChildGroup = new ChildGroup_4();
    ns_m::CT_OMathPara* pNewChild = pChildGroup->mutable_m_oMathPara();
    m_childGroupList_4.push_back(pChildGroup);
    return pNewChild;
}

ns_m::CT_OMath* CT_Tc::add_m_oMath()
{
    ChildGroup_4 *pChildGroup = new ChildGroup_4();
    ns_m::CT_OMath* pNewChild = pChildGroup->mutable_m_oMath();
    m_childGroupList_4.push_back(pChildGroup);
    return pNewChild;
}

CT_AltChunk* CT_Tc::add_altChunk()
{
    ChildGroup_4 *pChildGroup = new ChildGroup_4();
    CT_AltChunk* pNewChild = pChildGroup->mutable_altChunk();
    m_childGroupList_4.push_back(pChildGroup);
    return pNewChild;
}

void CT_Tc::clear()
{
    m_has_id_attr = false;

    if (m_id_attr)
    {
        delete m_id_attr;
        m_id_attr = NULL;
    }


    m_has_tcPr = false;

    if (m_tcPr)
    {
        delete m_tcPr;
        m_tcPr = NULL;
    }


    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }

    {
        vector<ChildGroup_2*>::iterator iter;
        for (iter = m_childGroupList_2.begin(); iter != m_childGroupList_2.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_2.clear();
    }

    {
        vector<ChildGroup_3*>::iterator iter;
        for (iter = m_childGroupList_3.begin(); iter != m_childGroupList_3.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_3.clear();
    }

    {
        vector<ChildGroup_4*>::iterator iter;
        for (iter = m_childGroupList_4.begin(); iter != m_childGroupList_4.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_4.clear();
    }
}

void CT_Tc::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_id_attr)
    {
        m_id_attr->toXmlAttr("w:id", _outStream);
    }

    _outStream << ">";


    if (m_has_tcPr)
    {
        m_tcPr->toXmlElem("w:tcPr", "", _outStream);
    }

    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_customXml())
            {
                (*iter)->get_customXml().toXmlElem("w:customXml", "", _outStream);
            }


            else if ((*iter)->has_sdt())
            {
                (*iter)->get_sdt().toXmlElem("w:sdt", "", _outStream);
            }


            else if ((*iter)->has_p())
            {
                (*iter)->get_p().toXmlElem("w:p", "", _outStream);
            }


            else if ((*iter)->has_tbl())
            {
                (*iter)->get_tbl().toXmlElem("w:tbl", "", _outStream);
            }


        }
    }

    {
        vector<ChildGroup_2*>::const_iterator iter;
        for (iter = m_childGroupList_2.begin(); iter != m_childGroupList_2.end(); ++iter)
        {
            if ((*iter)->has_proofErr())
            {
                (*iter)->get_proofErr().toXmlElem("w:proofErr", "", _outStream);
            }


            else if ((*iter)->has_permStart())
            {
                (*iter)->get_permStart().toXmlElem("w:permStart", "", _outStream);
            }


            else if ((*iter)->has_permEnd())
            {
                (*iter)->get_permEnd().toXmlElem("w:permEnd", "", _outStream);
            }


        }
    }

    {
        vector<ChildGroup_3*>::const_iterator iter;
        for (iter = m_childGroupList_3.begin(); iter != m_childGroupList_3.end(); ++iter)
        {
            if ((*iter)->has_bookmarkStart())
            {
                (*iter)->get_bookmarkStart().toXmlElem("w:bookmarkStart", "", _outStream);
            }


            else if ((*iter)->has_bookmarkEnd())
            {
                (*iter)->get_bookmarkEnd().toXmlElem("w:bookmarkEnd", "", _outStream);
            }


            else if ((*iter)->has_moveFromRangeStart())
            {
                (*iter)->get_moveFromRangeStart().toXmlElem("w:moveFromRangeStart", "", _outStream);
            }


            else if ((*iter)->has_moveFromRangeEnd())
            {
                (*iter)->get_moveFromRangeEnd().toXmlElem("w:moveFromRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_moveToRangeStart())
            {
                (*iter)->get_moveToRangeStart().toXmlElem("w:moveToRangeStart", "", _outStream);
            }


            else if ((*iter)->has_moveToRangeEnd())
            {
                (*iter)->get_moveToRangeEnd().toXmlElem("w:moveToRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_commentRangeStart())
            {
                (*iter)->get_commentRangeStart().toXmlElem("w:commentRangeStart", "", _outStream);
            }


            else if ((*iter)->has_commentRangeEnd())
            {
                (*iter)->get_commentRangeEnd().toXmlElem("w:commentRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_customXmlInsRangeStart())
            {
                (*iter)->get_customXmlInsRangeStart().toXmlElem("w:customXmlInsRangeStart", "", _outStream);
            }


            else if ((*iter)->has_customXmlInsRangeEnd())
            {
                (*iter)->get_customXmlInsRangeEnd().toXmlElem("w:customXmlInsRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_customXmlDelRangeStart())
            {
                (*iter)->get_customXmlDelRangeStart().toXmlElem("w:customXmlDelRangeStart", "", _outStream);
            }


            else if ((*iter)->has_customXmlDelRangeEnd())
            {
                (*iter)->get_customXmlDelRangeEnd().toXmlElem("w:customXmlDelRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_customXmlMoveFromRangeStart())
            {
                (*iter)->get_customXmlMoveFromRangeStart().toXmlElem("w:customXmlMoveFromRangeStart", "", _outStream);
            }


            else if ((*iter)->has_customXmlMoveFromRangeEnd())
            {
                (*iter)->get_customXmlMoveFromRangeEnd().toXmlElem("w:customXmlMoveFromRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_customXmlMoveToRangeStart())
            {
                (*iter)->get_customXmlMoveToRangeStart().toXmlElem("w:customXmlMoveToRangeStart", "", _outStream);
            }


            else if ((*iter)->has_customXmlMoveToRangeEnd())
            {
                (*iter)->get_customXmlMoveToRangeEnd().toXmlElem("w:customXmlMoveToRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_ins())
            {
                (*iter)->get_ins().toXmlElem("w:ins", "", _outStream);
            }


            else if ((*iter)->has_del())
            {
                (*iter)->get_del().toXmlElem("w:del", "", _outStream);
            }


            else if ((*iter)->has_moveFrom())
            {
                (*iter)->get_moveFrom().toXmlElem("w:moveFrom", "", _outStream);
            }


            else if ((*iter)->has_moveTo())
            {
                (*iter)->get_moveTo().toXmlElem("w:moveTo", "", _outStream);
            }


        }
    }

    {
        vector<ChildGroup_4*>::const_iterator iter;
        for (iter = m_childGroupList_4.begin(); iter != m_childGroupList_4.end(); ++iter)
        {
            if ((*iter)->has_m_oMathPara())
            {
                (*iter)->get_m_oMathPara().toXmlElem("m:oMathPara", "", _outStream);
            }


            else if ((*iter)->has_m_oMath())
            {
                (*iter)->get_m_oMath().toXmlElem("m:oMath", "", _outStream);
            }


            else if ((*iter)->has_altChunk())
            {
                (*iter)->get_altChunk().toXmlElem("w:altChunk", "", _outStream);
            }


        }
    }

    _outStream << "</" << _elemName << ">";
}

const CT_Tc& CT_Tc::default_instance()
{
    if (!CT_Tc::default_instance_)
    {
        CT_Tc::default_instance_ = new CT_Tc();
    }
    return *CT_Tc::default_instance_;
}

bool CT_Tc::has_id_attr() const
{
    return m_has_id_attr;
}

void CT_Tc::set_id_attr(const ns_s::ST_String& _id_attr)
{
    m_has_id_attr = true;
    m_id_attr = new ns_s::ST_String(_id_attr);
}

const ns_s::ST_String& CT_Tc::get_id_attr() const
{
    if (m_id_attr)
    {
        return *m_id_attr;
    }
    return ns_s::ST_String::default_instance();
}


// CT_Tc::ChildGroup_1
CT_Tc::ChildGroup_1::ChildGroup_1()
    :m_has_customXml(false),
     m_customXml(NULL),
     m_has_sdt(false),
     m_sdt(NULL),
     m_has_p(false),
     m_p(NULL),
     m_has_tbl(false),
     m_tbl(NULL)
{
}
bool CT_Tc::ChildGroup_1::has_customXml() const
{
    return m_has_customXml;
}

CT_CustomXmlBlock* CT_Tc::ChildGroup_1::mutable_customXml()
{

    m_has_sdt = false;

    if (m_sdt)
    {
        delete m_sdt;
        m_sdt = NULL;
    }
    ;

    m_has_p = false;

    if (m_p)
    {
        delete m_p;
        m_p = NULL;
    }
    ;

    m_has_tbl = false;

    if (m_tbl)
    {
        delete m_tbl;
        m_tbl = NULL;
    }
    ;

    m_has_customXml = true;
    if (!m_customXml)
    {
        m_customXml = new CT_CustomXmlBlock();
    }
    return m_customXml;
}

const CT_CustomXmlBlock& CT_Tc::ChildGroup_1::get_customXml() const
{
    if (m_customXml)
    {
        return *m_customXml;
    }
    return CT_CustomXmlBlock::default_instance();
}

bool CT_Tc::ChildGroup_1::has_sdt() const
{
    return m_has_sdt;
}

CT_SdtBlock* CT_Tc::ChildGroup_1::mutable_sdt()
{

    m_has_customXml = false;

    if (m_customXml)
    {
        delete m_customXml;
        m_customXml = NULL;
    }
    ;

    m_has_p = false;

    if (m_p)
    {
        delete m_p;
        m_p = NULL;
    }
    ;

    m_has_tbl = false;

    if (m_tbl)
    {
        delete m_tbl;
        m_tbl = NULL;
    }
    ;

    m_has_sdt = true;
    if (!m_sdt)
    {
        m_sdt = new CT_SdtBlock();
    }
    return m_sdt;
}

const CT_SdtBlock& CT_Tc::ChildGroup_1::get_sdt() const
{
    if (m_sdt)
    {
        return *m_sdt;
    }
    return CT_SdtBlock::default_instance();
}

bool CT_Tc::ChildGroup_1::has_p() const
{
    return m_has_p;
}

CT_P* CT_Tc::ChildGroup_1::mutable_p()
{

    m_has_customXml = false;

    if (m_customXml)
    {
        delete m_customXml;
        m_customXml = NULL;
    }
    ;

    m_has_sdt = false;

    if (m_sdt)
    {
        delete m_sdt;
        m_sdt = NULL;
    }
    ;

    m_has_tbl = false;

    if (m_tbl)
    {
        delete m_tbl;
        m_tbl = NULL;
    }
    ;

    m_has_p = true;
    if (!m_p)
    {
        m_p = new CT_P();
    }
    return m_p;
}

const CT_P& CT_Tc::ChildGroup_1::get_p() const
{
    if (m_p)
    {
        return *m_p;
    }
    return CT_P::default_instance();
}

bool CT_Tc::ChildGroup_1::has_tbl() const
{
    return m_has_tbl;
}

CT_Tbl* CT_Tc::ChildGroup_1::mutable_tbl()
{

    m_has_customXml = false;

    if (m_customXml)
    {
        delete m_customXml;
        m_customXml = NULL;
    }
    ;

    m_has_sdt = false;

    if (m_sdt)
    {
        delete m_sdt;
        m_sdt = NULL;
    }
    ;

    m_has_p = false;

    if (m_p)
    {
        delete m_p;
        m_p = NULL;
    }
    ;

    m_has_tbl = true;
    if (!m_tbl)
    {
        m_tbl = new CT_Tbl();
    }
    return m_tbl;
}

const CT_Tbl& CT_Tc::ChildGroup_1::get_tbl() const
{
    if (m_tbl)
    {
        return *m_tbl;
    }
    return CT_Tbl::default_instance();
}


// CT_Tc::ChildGroup_2
CT_Tc::ChildGroup_2::ChildGroup_2()
    :m_has_proofErr(false),
     m_proofErr(NULL),
     m_has_permStart(false),
     m_permStart(NULL),
     m_has_permEnd(false),
     m_permEnd(NULL)
{
}
bool CT_Tc::ChildGroup_2::has_proofErr() const
{
    return m_has_proofErr;
}

CT_ProofErr* CT_Tc::ChildGroup_2::mutable_proofErr()
{

    m_has_permStart = false;

    if (m_permStart)
    {
        delete m_permStart;
        m_permStart = NULL;
    }
    ;

    m_has_permEnd = false;

    if (m_permEnd)
    {
        delete m_permEnd;
        m_permEnd = NULL;
    }
    ;

    m_has_proofErr = true;
    if (!m_proofErr)
    {
        m_proofErr = new CT_ProofErr();
    }
    return m_proofErr;
}

const CT_ProofErr& CT_Tc::ChildGroup_2::get_proofErr() const
{
    if (m_proofErr)
    {
        return *m_proofErr;
    }
    return CT_ProofErr::default_instance();
}

bool CT_Tc::ChildGroup_2::has_permStart() const
{
    return m_has_permStart;
}

CT_PermStart* CT_Tc::ChildGroup_2::mutable_permStart()
{

    m_has_proofErr = false;

    if (m_proofErr)
    {
        delete m_proofErr;
        m_proofErr = NULL;
    }
    ;

    m_has_permEnd = false;

    if (m_permEnd)
    {
        delete m_permEnd;
        m_permEnd = NULL;
    }
    ;

    m_has_permStart = true;
    if (!m_permStart)
    {
        m_permStart = new CT_PermStart();
    }
    return m_permStart;
}

const CT_PermStart& CT_Tc::ChildGroup_2::get_permStart() const
{
    if (m_permStart)
    {
        return *m_permStart;
    }
    return CT_PermStart::default_instance();
}

bool CT_Tc::ChildGroup_2::has_permEnd() const
{
    return m_has_permEnd;
}

CT_Perm* CT_Tc::ChildGroup_2::mutable_permEnd()
{

    m_has_proofErr = false;

    if (m_proofErr)
    {
        delete m_proofErr;
        m_proofErr = NULL;
    }
    ;

    m_has_permStart = false;

    if (m_permStart)
    {
        delete m_permStart;
        m_permStart = NULL;
    }
    ;

    m_has_permEnd = true;
    if (!m_permEnd)
    {
        m_permEnd = new CT_Perm();
    }
    return m_permEnd;
}

const CT_Perm& CT_Tc::ChildGroup_2::get_permEnd() const
{
    if (m_permEnd)
    {
        return *m_permEnd;
    }
    return CT_Perm::default_instance();
}


// CT_Tc::ChildGroup_3
CT_Tc::ChildGroup_3::ChildGroup_3()
    :m_has_bookmarkStart(false),
     m_bookmarkStart(NULL),
     m_has_bookmarkEnd(false),
     m_bookmarkEnd(NULL),
     m_has_moveFromRangeStart(false),
     m_moveFromRangeStart(NULL),
     m_has_moveFromRangeEnd(false),
     m_moveFromRangeEnd(NULL),
     m_has_moveToRangeStart(false),
     m_moveToRangeStart(NULL),
     m_has_moveToRangeEnd(false),
     m_moveToRangeEnd(NULL),
     m_has_commentRangeStart(false),
     m_commentRangeStart(NULL),
     m_has_commentRangeEnd(false),
     m_commentRangeEnd(NULL),
     m_has_customXmlInsRangeStart(false),
     m_customXmlInsRangeStart(NULL),
     m_has_customXmlInsRangeEnd(false),
     m_customXmlInsRangeEnd(NULL),
     m_has_customXmlDelRangeStart(false),
     m_customXmlDelRangeStart(NULL),
     m_has_customXmlDelRangeEnd(false),
     m_customXmlDelRangeEnd(NULL),
     m_has_customXmlMoveFromRangeStart(false),
     m_customXmlMoveFromRangeStart(NULL),
     m_has_customXmlMoveFromRangeEnd(false),
     m_customXmlMoveFromRangeEnd(NULL),
     m_has_customXmlMoveToRangeStart(false),
     m_customXmlMoveToRangeStart(NULL),
     m_has_customXmlMoveToRangeEnd(false),
     m_customXmlMoveToRangeEnd(NULL),
     m_has_ins(false),
     m_ins(NULL),
     m_has_del(false),
     m_del(NULL),
     m_has_moveFrom(false),
     m_moveFrom(NULL),
     m_has_moveTo(false),
     m_moveTo(NULL)
{
}
bool CT_Tc::ChildGroup_3::has_bookmarkStart() const
{
    return m_has_bookmarkStart;
}

CT_Bookmark* CT_Tc::ChildGroup_3::mutable_bookmarkStart()
{

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_bookmarkStart = true;
    if (!m_bookmarkStart)
    {
        m_bookmarkStart = new CT_Bookmark();
    }
    return m_bookmarkStart;
}

const CT_Bookmark& CT_Tc::ChildGroup_3::get_bookmarkStart() const
{
    if (m_bookmarkStart)
    {
        return *m_bookmarkStart;
    }
    return CT_Bookmark::default_instance();
}

bool CT_Tc::ChildGroup_3::has_bookmarkEnd() const
{
    return m_has_bookmarkEnd;
}

CT_MarkupRange* CT_Tc::ChildGroup_3::mutable_bookmarkEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_bookmarkEnd = true;
    if (!m_bookmarkEnd)
    {
        m_bookmarkEnd = new CT_MarkupRange();
    }
    return m_bookmarkEnd;
}

const CT_MarkupRange& CT_Tc::ChildGroup_3::get_bookmarkEnd() const
{
    if (m_bookmarkEnd)
    {
        return *m_bookmarkEnd;
    }
    return CT_MarkupRange::default_instance();
}

bool CT_Tc::ChildGroup_3::has_moveFromRangeStart() const
{
    return m_has_moveFromRangeStart;
}

CT_MoveBookmark* CT_Tc::ChildGroup_3::mutable_moveFromRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_moveFromRangeStart = true;
    if (!m_moveFromRangeStart)
    {
        m_moveFromRangeStart = new CT_MoveBookmark();
    }
    return m_moveFromRangeStart;
}

const CT_MoveBookmark& CT_Tc::ChildGroup_3::get_moveFromRangeStart() const
{
    if (m_moveFromRangeStart)
    {
        return *m_moveFromRangeStart;
    }
    return CT_MoveBookmark::default_instance();
}

bool CT_Tc::ChildGroup_3::has_moveFromRangeEnd() const
{
    return m_has_moveFromRangeEnd;
}

CT_MarkupRange* CT_Tc::ChildGroup_3::mutable_moveFromRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_moveFromRangeEnd = true;
    if (!m_moveFromRangeEnd)
    {
        m_moveFromRangeEnd = new CT_MarkupRange();
    }
    return m_moveFromRangeEnd;
}

const CT_MarkupRange& CT_Tc::ChildGroup_3::get_moveFromRangeEnd() const
{
    if (m_moveFromRangeEnd)
    {
        return *m_moveFromRangeEnd;
    }
    return CT_MarkupRange::default_instance();
}

bool CT_Tc::ChildGroup_3::has_moveToRangeStart() const
{
    return m_has_moveToRangeStart;
}

CT_MoveBookmark* CT_Tc::ChildGroup_3::mutable_moveToRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_moveToRangeStart = true;
    if (!m_moveToRangeStart)
    {
        m_moveToRangeStart = new CT_MoveBookmark();
    }
    return m_moveToRangeStart;
}

const CT_MoveBookmark& CT_Tc::ChildGroup_3::get_moveToRangeStart() const
{
    if (m_moveToRangeStart)
    {
        return *m_moveToRangeStart;
    }
    return CT_MoveBookmark::default_instance();
}

bool CT_Tc::ChildGroup_3::has_moveToRangeEnd() const
{
    return m_has_moveToRangeEnd;
}

CT_MarkupRange* CT_Tc::ChildGroup_3::mutable_moveToRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_moveToRangeEnd = true;
    if (!m_moveToRangeEnd)
    {
        m_moveToRangeEnd = new CT_MarkupRange();
    }
    return m_moveToRangeEnd;
}

const CT_MarkupRange& CT_Tc::ChildGroup_3::get_moveToRangeEnd() const
{
    if (m_moveToRangeEnd)
    {
        return *m_moveToRangeEnd;
    }
    return CT_MarkupRange::default_instance();
}

bool CT_Tc::ChildGroup_3::has_commentRangeStart() const
{
    return m_has_commentRangeStart;
}

CT_MarkupRange* CT_Tc::ChildGroup_3::mutable_commentRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_commentRangeStart = true;
    if (!m_commentRangeStart)
    {
        m_commentRangeStart = new CT_MarkupRange();
    }
    return m_commentRangeStart;
}

const CT_MarkupRange& CT_Tc::ChildGroup_3::get_commentRangeStart() const
{
    if (m_commentRangeStart)
    {
        return *m_commentRangeStart;
    }
    return CT_MarkupRange::default_instance();
}

bool CT_Tc::ChildGroup_3::has_commentRangeEnd() const
{
    return m_has_commentRangeEnd;
}

CT_MarkupRange* CT_Tc::ChildGroup_3::mutable_commentRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_commentRangeEnd = true;
    if (!m_commentRangeEnd)
    {
        m_commentRangeEnd = new CT_MarkupRange();
    }
    return m_commentRangeEnd;
}

const CT_MarkupRange& CT_Tc::ChildGroup_3::get_commentRangeEnd() const
{
    if (m_commentRangeEnd)
    {
        return *m_commentRangeEnd;
    }
    return CT_MarkupRange::default_instance();
}

bool CT_Tc::ChildGroup_3::has_customXmlInsRangeStart() const
{
    return m_has_customXmlInsRangeStart;
}

CT_TrackChange* CT_Tc::ChildGroup_3::mutable_customXmlInsRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = true;
    if (!m_customXmlInsRangeStart)
    {
        m_customXmlInsRangeStart = new CT_TrackChange();
    }
    return m_customXmlInsRangeStart;
}

const CT_TrackChange& CT_Tc::ChildGroup_3::get_customXmlInsRangeStart() const
{
    if (m_customXmlInsRangeStart)
    {
        return *m_customXmlInsRangeStart;
    }
    return CT_TrackChange::default_instance();
}

bool CT_Tc::ChildGroup_3::has_customXmlInsRangeEnd() const
{
    return m_has_customXmlInsRangeEnd;
}

CT_Markup* CT_Tc::ChildGroup_3::mutable_customXmlInsRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = true;
    if (!m_customXmlInsRangeEnd)
    {
        m_customXmlInsRangeEnd = new CT_Markup();
    }
    return m_customXmlInsRangeEnd;
}

const CT_Markup& CT_Tc::ChildGroup_3::get_customXmlInsRangeEnd() const
{
    if (m_customXmlInsRangeEnd)
    {
        return *m_customXmlInsRangeEnd;
    }
    return CT_Markup::default_instance();
}

bool CT_Tc::ChildGroup_3::has_customXmlDelRangeStart() const
{
    return m_has_customXmlDelRangeStart;
}

CT_TrackChange* CT_Tc::ChildGroup_3::mutable_customXmlDelRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = true;
    if (!m_customXmlDelRangeStart)
    {
        m_customXmlDelRangeStart = new CT_TrackChange();
    }
    return m_customXmlDelRangeStart;
}

const CT_TrackChange& CT_Tc::ChildGroup_3::get_customXmlDelRangeStart() const
{
    if (m_customXmlDelRangeStart)
    {
        return *m_customXmlDelRangeStart;
    }
    return CT_TrackChange::default_instance();
}

bool CT_Tc::ChildGroup_3::has_customXmlDelRangeEnd() const
{
    return m_has_customXmlDelRangeEnd;
}

CT_Markup* CT_Tc::ChildGroup_3::mutable_customXmlDelRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = true;
    if (!m_customXmlDelRangeEnd)
    {
        m_customXmlDelRangeEnd = new CT_Markup();
    }
    return m_customXmlDelRangeEnd;
}

const CT_Markup& CT_Tc::ChildGroup_3::get_customXmlDelRangeEnd() const
{
    if (m_customXmlDelRangeEnd)
    {
        return *m_customXmlDelRangeEnd;
    }
    return CT_Markup::default_instance();
}

bool CT_Tc::ChildGroup_3::has_customXmlMoveFromRangeStart() const
{
    return m_has_customXmlMoveFromRangeStart;
}

CT_TrackChange* CT_Tc::ChildGroup_3::mutable_customXmlMoveFromRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = true;
    if (!m_customXmlMoveFromRangeStart)
    {
        m_customXmlMoveFromRangeStart = new CT_TrackChange();
    }
    return m_customXmlMoveFromRangeStart;
}

const CT_TrackChange& CT_Tc::ChildGroup_3::get_customXmlMoveFromRangeStart() const
{
    if (m_customXmlMoveFromRangeStart)
    {
        return *m_customXmlMoveFromRangeStart;
    }
    return CT_TrackChange::default_instance();
}

bool CT_Tc::ChildGroup_3::has_customXmlMoveFromRangeEnd() const
{
    return m_has_customXmlMoveFromRangeEnd;
}

CT_Markup* CT_Tc::ChildGroup_3::mutable_customXmlMoveFromRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = true;
    if (!m_customXmlMoveFromRangeEnd)
    {
        m_customXmlMoveFromRangeEnd = new CT_Markup();
    }
    return m_customXmlMoveFromRangeEnd;
}

const CT_Markup& CT_Tc::ChildGroup_3::get_customXmlMoveFromRangeEnd() const
{
    if (m_customXmlMoveFromRangeEnd)
    {
        return *m_customXmlMoveFromRangeEnd;
    }
    return CT_Markup::default_instance();
}

bool CT_Tc::ChildGroup_3::has_customXmlMoveToRangeStart() const
{
    return m_has_customXmlMoveToRangeStart;
}

CT_TrackChange* CT_Tc::ChildGroup_3::mutable_customXmlMoveToRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = true;
    if (!m_customXmlMoveToRangeStart)
    {
        m_customXmlMoveToRangeStart = new CT_TrackChange();
    }
    return m_customXmlMoveToRangeStart;
}

const CT_TrackChange& CT_Tc::ChildGroup_3::get_customXmlMoveToRangeStart() const
{
    if (m_customXmlMoveToRangeStart)
    {
        return *m_customXmlMoveToRangeStart;
    }
    return CT_TrackChange::default_instance();
}

bool CT_Tc::ChildGroup_3::has_customXmlMoveToRangeEnd() const
{
    return m_has_customXmlMoveToRangeEnd;
}

CT_Markup* CT_Tc::ChildGroup_3::mutable_customXmlMoveToRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = true;
    if (!m_customXmlMoveToRangeEnd)
    {
        m_customXmlMoveToRangeEnd = new CT_Markup();
    }
    return m_customXmlMoveToRangeEnd;
}

const CT_Markup& CT_Tc::ChildGroup_3::get_customXmlMoveToRangeEnd() const
{
    if (m_customXmlMoveToRangeEnd)
    {
        return *m_customXmlMoveToRangeEnd;
    }
    return CT_Markup::default_instance();
}

bool CT_Tc::ChildGroup_3::has_ins() const
{
    return m_has_ins;
}

CT_RunTrackChange* CT_Tc::ChildGroup_3::mutable_ins()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_ins = true;
    if (!m_ins)
    {
        m_ins = new CT_RunTrackChange();
    }
    return m_ins;
}

const CT_RunTrackChange& CT_Tc::ChildGroup_3::get_ins() const
{
    if (m_ins)
    {
        return *m_ins;
    }
    return CT_RunTrackChange::default_instance();
}

bool CT_Tc::ChildGroup_3::has_del() const
{
    return m_has_del;
}

CT_RunTrackChange* CT_Tc::ChildGroup_3::mutable_del()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_del = true;
    if (!m_del)
    {
        m_del = new CT_RunTrackChange();
    }
    return m_del;
}

const CT_RunTrackChange& CT_Tc::ChildGroup_3::get_del() const
{
    if (m_del)
    {
        return *m_del;
    }
    return CT_RunTrackChange::default_instance();
}

bool CT_Tc::ChildGroup_3::has_moveFrom() const
{
    return m_has_moveFrom;
}

CT_RunTrackChange* CT_Tc::ChildGroup_3::mutable_moveFrom()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_moveFrom = true;
    if (!m_moveFrom)
    {
        m_moveFrom = new CT_RunTrackChange();
    }
    return m_moveFrom;
}

const CT_RunTrackChange& CT_Tc::ChildGroup_3::get_moveFrom() const
{
    if (m_moveFrom)
    {
        return *m_moveFrom;
    }
    return CT_RunTrackChange::default_instance();
}

bool CT_Tc::ChildGroup_3::has_moveTo() const
{
    return m_has_moveTo;
}

CT_RunTrackChange* CT_Tc::ChildGroup_3::mutable_moveTo()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = true;
    if (!m_moveTo)
    {
        m_moveTo = new CT_RunTrackChange();
    }
    return m_moveTo;
}

const CT_RunTrackChange& CT_Tc::ChildGroup_3::get_moveTo() const
{
    if (m_moveTo)
    {
        return *m_moveTo;
    }
    return CT_RunTrackChange::default_instance();
}


// CT_Tc::ChildGroup_4
CT_Tc::ChildGroup_4::ChildGroup_4()
    :m_has_m_oMathPara(false),
     m_m_oMathPara(NULL),
     m_has_m_oMath(false),
     m_m_oMath(NULL),
     m_has_altChunk(false),
     m_altChunk(NULL)
{
}
bool CT_Tc::ChildGroup_4::has_m_oMathPara() const
{
    return m_has_m_oMathPara;
}

ns_m::CT_OMathPara* CT_Tc::ChildGroup_4::mutable_m_oMathPara()
{

    m_has_m_oMath = false;

    if (m_m_oMath)
    {
        delete m_m_oMath;
        m_m_oMath = NULL;
    }
    ;

    m_has_altChunk = false;

    if (m_altChunk)
    {
        delete m_altChunk;
        m_altChunk = NULL;
    }
    ;

    m_has_m_oMathPara = true;
    if (!m_m_oMathPara)
    {
        m_m_oMathPara = new ns_m::CT_OMathPara();
    }
    return m_m_oMathPara;
}

const ns_m::CT_OMathPara& CT_Tc::ChildGroup_4::get_m_oMathPara() const
{
    if (m_m_oMathPara)
    {
        return *m_m_oMathPara;
    }
    return ns_m::CT_OMathPara::default_instance();
}

bool CT_Tc::ChildGroup_4::has_m_oMath() const
{
    return m_has_m_oMath;
}

ns_m::CT_OMath* CT_Tc::ChildGroup_4::mutable_m_oMath()
{

    m_has_m_oMathPara = false;

    if (m_m_oMathPara)
    {
        delete m_m_oMathPara;
        m_m_oMathPara = NULL;
    }
    ;

    m_has_altChunk = false;

    if (m_altChunk)
    {
        delete m_altChunk;
        m_altChunk = NULL;
    }
    ;

    m_has_m_oMath = true;
    if (!m_m_oMath)
    {
        m_m_oMath = new ns_m::CT_OMath();
    }
    return m_m_oMath;
}

const ns_m::CT_OMath& CT_Tc::ChildGroup_4::get_m_oMath() const
{
    if (m_m_oMath)
    {
        return *m_m_oMath;
    }
    return ns_m::CT_OMath::default_instance();
}

bool CT_Tc::ChildGroup_4::has_altChunk() const
{
    return m_has_altChunk;
}

CT_AltChunk* CT_Tc::ChildGroup_4::mutable_altChunk()
{

    m_has_m_oMathPara = false;

    if (m_m_oMathPara)
    {
        delete m_m_oMathPara;
        m_m_oMathPara = NULL;
    }
    ;

    m_has_m_oMath = false;

    if (m_m_oMath)
    {
        delete m_m_oMath;
        m_m_oMath = NULL;
    }
    ;

    m_has_altChunk = true;
    if (!m_altChunk)
    {
        m_altChunk = new CT_AltChunk();
    }
    return m_altChunk;
}

const CT_AltChunk& CT_Tc::ChildGroup_4::get_altChunk() const
{
    if (m_altChunk)
    {
        return *m_altChunk;
    }
    return CT_AltChunk::default_instance();
}

CT_Tc* CT_Tc::default_instance_ = NULL;

// CT_Cnf
CT_Cnf::CT_Cnf()
    :m_has_val_attr(false),
     m_val_attr(NULL),
     m_has_firstRow_attr(false),
     m_firstRow_attr(NULL),
     m_has_lastRow_attr(false),
     m_lastRow_attr(NULL),
     m_has_firstColumn_attr(false),
     m_firstColumn_attr(NULL),
     m_has_lastColumn_attr(false),
     m_lastColumn_attr(NULL),
     m_has_oddVBand_attr(false),
     m_oddVBand_attr(NULL),
     m_has_evenVBand_attr(false),
     m_evenVBand_attr(NULL),
     m_has_oddHBand_attr(false),
     m_oddHBand_attr(NULL),
     m_has_evenHBand_attr(false),
     m_evenHBand_attr(NULL),
     m_has_firstRowFirstColumn_attr(false),
     m_firstRowFirstColumn_attr(NULL),
     m_has_firstRowLastColumn_attr(false),
     m_firstRowLastColumn_attr(NULL),
     m_has_lastRowFirstColumn_attr(false),
     m_lastRowFirstColumn_attr(NULL),
     m_has_lastRowLastColumn_attr(false),
     m_lastRowLastColumn_attr(NULL)
{
}
CT_Cnf::~CT_Cnf()
{
    clear();
}
void CT_Cnf::clear()
{
    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }


    m_has_firstRow_attr = false;

    if (m_firstRow_attr)
    {
        delete m_firstRow_attr;
        m_firstRow_attr = NULL;
    }


    m_has_lastRow_attr = false;

    if (m_lastRow_attr)
    {
        delete m_lastRow_attr;
        m_lastRow_attr = NULL;
    }


    m_has_firstColumn_attr = false;

    if (m_firstColumn_attr)
    {
        delete m_firstColumn_attr;
        m_firstColumn_attr = NULL;
    }


    m_has_lastColumn_attr = false;

    if (m_lastColumn_attr)
    {
        delete m_lastColumn_attr;
        m_lastColumn_attr = NULL;
    }


    m_has_oddVBand_attr = false;

    if (m_oddVBand_attr)
    {
        delete m_oddVBand_attr;
        m_oddVBand_attr = NULL;
    }


    m_has_evenVBand_attr = false;

    if (m_evenVBand_attr)
    {
        delete m_evenVBand_attr;
        m_evenVBand_attr = NULL;
    }


    m_has_oddHBand_attr = false;

    if (m_oddHBand_attr)
    {
        delete m_oddHBand_attr;
        m_oddHBand_attr = NULL;
    }


    m_has_evenHBand_attr = false;

    if (m_evenHBand_attr)
    {
        delete m_evenHBand_attr;
        m_evenHBand_attr = NULL;
    }


    m_has_firstRowFirstColumn_attr = false;

    if (m_firstRowFirstColumn_attr)
    {
        delete m_firstRowFirstColumn_attr;
        m_firstRowFirstColumn_attr = NULL;
    }


    m_has_firstRowLastColumn_attr = false;

    if (m_firstRowLastColumn_attr)
    {
        delete m_firstRowLastColumn_attr;
        m_firstRowLastColumn_attr = NULL;
    }


    m_has_lastRowFirstColumn_attr = false;

    if (m_lastRowFirstColumn_attr)
    {
        delete m_lastRowFirstColumn_attr;
        m_lastRowFirstColumn_attr = NULL;
    }


    m_has_lastRowLastColumn_attr = false;

    if (m_lastRowLastColumn_attr)
    {
        delete m_lastRowLastColumn_attr;
        m_lastRowLastColumn_attr = NULL;
    }

}

void CT_Cnf::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }



    if (m_has_firstRow_attr)
    {
        m_firstRow_attr->toXmlAttr("w:firstRow", _outStream);
    }



    if (m_has_lastRow_attr)
    {
        m_lastRow_attr->toXmlAttr("w:lastRow", _outStream);
    }



    if (m_has_firstColumn_attr)
    {
        m_firstColumn_attr->toXmlAttr("w:firstColumn", _outStream);
    }



    if (m_has_lastColumn_attr)
    {
        m_lastColumn_attr->toXmlAttr("w:lastColumn", _outStream);
    }



    if (m_has_oddVBand_attr)
    {
        m_oddVBand_attr->toXmlAttr("w:oddVBand", _outStream);
    }



    if (m_has_evenVBand_attr)
    {
        m_evenVBand_attr->toXmlAttr("w:evenVBand", _outStream);
    }



    if (m_has_oddHBand_attr)
    {
        m_oddHBand_attr->toXmlAttr("w:oddHBand", _outStream);
    }



    if (m_has_evenHBand_attr)
    {
        m_evenHBand_attr->toXmlAttr("w:evenHBand", _outStream);
    }



    if (m_has_firstRowFirstColumn_attr)
    {
        m_firstRowFirstColumn_attr->toXmlAttr("w:firstRowFirstColumn", _outStream);
    }



    if (m_has_firstRowLastColumn_attr)
    {
        m_firstRowLastColumn_attr->toXmlAttr("w:firstRowLastColumn", _outStream);
    }



    if (m_has_lastRowFirstColumn_attr)
    {
        m_lastRowFirstColumn_attr->toXmlAttr("w:lastRowFirstColumn", _outStream);
    }



    if (m_has_lastRowLastColumn_attr)
    {
        m_lastRowLastColumn_attr->toXmlAttr("w:lastRowLastColumn", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_Cnf& CT_Cnf::default_instance()
{
    if (!CT_Cnf::default_instance_)
    {
        CT_Cnf::default_instance_ = new CT_Cnf();
    }
    return *CT_Cnf::default_instance_;
}

bool CT_Cnf::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_Cnf::set_val_attr(const ST_Cnf& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ST_Cnf(_val_attr);
}

const ST_Cnf& CT_Cnf::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ST_Cnf::default_instance();
}

bool CT_Cnf::has_firstRow_attr() const
{
    return m_has_firstRow_attr;
}

void CT_Cnf::set_firstRow_attr(const ns_s::ST_OnOff& _firstRow_attr)
{
    m_has_firstRow_attr = true;
    m_firstRow_attr = new ns_s::ST_OnOff(_firstRow_attr);
}

const ns_s::ST_OnOff& CT_Cnf::get_firstRow_attr() const
{
    if (m_firstRow_attr)
    {
        return *m_firstRow_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

bool CT_Cnf::has_lastRow_attr() const
{
    return m_has_lastRow_attr;
}

void CT_Cnf::set_lastRow_attr(const ns_s::ST_OnOff& _lastRow_attr)
{
    m_has_lastRow_attr = true;
    m_lastRow_attr = new ns_s::ST_OnOff(_lastRow_attr);
}

const ns_s::ST_OnOff& CT_Cnf::get_lastRow_attr() const
{
    if (m_lastRow_attr)
    {
        return *m_lastRow_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

bool CT_Cnf::has_firstColumn_attr() const
{
    return m_has_firstColumn_attr;
}

void CT_Cnf::set_firstColumn_attr(const ns_s::ST_OnOff& _firstColumn_attr)
{
    m_has_firstColumn_attr = true;
    m_firstColumn_attr = new ns_s::ST_OnOff(_firstColumn_attr);
}

const ns_s::ST_OnOff& CT_Cnf::get_firstColumn_attr() const
{
    if (m_firstColumn_attr)
    {
        return *m_firstColumn_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

bool CT_Cnf::has_lastColumn_attr() const
{
    return m_has_lastColumn_attr;
}

void CT_Cnf::set_lastColumn_attr(const ns_s::ST_OnOff& _lastColumn_attr)
{
    m_has_lastColumn_attr = true;
    m_lastColumn_attr = new ns_s::ST_OnOff(_lastColumn_attr);
}

const ns_s::ST_OnOff& CT_Cnf::get_lastColumn_attr() const
{
    if (m_lastColumn_attr)
    {
        return *m_lastColumn_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

bool CT_Cnf::has_oddVBand_attr() const
{
    return m_has_oddVBand_attr;
}

void CT_Cnf::set_oddVBand_attr(const ns_s::ST_OnOff& _oddVBand_attr)
{
    m_has_oddVBand_attr = true;
    m_oddVBand_attr = new ns_s::ST_OnOff(_oddVBand_attr);
}

const ns_s::ST_OnOff& CT_Cnf::get_oddVBand_attr() const
{
    if (m_oddVBand_attr)
    {
        return *m_oddVBand_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

bool CT_Cnf::has_evenVBand_attr() const
{
    return m_has_evenVBand_attr;
}

void CT_Cnf::set_evenVBand_attr(const ns_s::ST_OnOff& _evenVBand_attr)
{
    m_has_evenVBand_attr = true;
    m_evenVBand_attr = new ns_s::ST_OnOff(_evenVBand_attr);
}

const ns_s::ST_OnOff& CT_Cnf::get_evenVBand_attr() const
{
    if (m_evenVBand_attr)
    {
        return *m_evenVBand_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

bool CT_Cnf::has_oddHBand_attr() const
{
    return m_has_oddHBand_attr;
}

void CT_Cnf::set_oddHBand_attr(const ns_s::ST_OnOff& _oddHBand_attr)
{
    m_has_oddHBand_attr = true;
    m_oddHBand_attr = new ns_s::ST_OnOff(_oddHBand_attr);
}

const ns_s::ST_OnOff& CT_Cnf::get_oddHBand_attr() const
{
    if (m_oddHBand_attr)
    {
        return *m_oddHBand_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

bool CT_Cnf::has_evenHBand_attr() const
{
    return m_has_evenHBand_attr;
}

void CT_Cnf::set_evenHBand_attr(const ns_s::ST_OnOff& _evenHBand_attr)
{
    m_has_evenHBand_attr = true;
    m_evenHBand_attr = new ns_s::ST_OnOff(_evenHBand_attr);
}

const ns_s::ST_OnOff& CT_Cnf::get_evenHBand_attr() const
{
    if (m_evenHBand_attr)
    {
        return *m_evenHBand_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

bool CT_Cnf::has_firstRowFirstColumn_attr() const
{
    return m_has_firstRowFirstColumn_attr;
}

void CT_Cnf::set_firstRowFirstColumn_attr(const ns_s::ST_OnOff& _firstRowFirstColumn_attr)
{
    m_has_firstRowFirstColumn_attr = true;
    m_firstRowFirstColumn_attr = new ns_s::ST_OnOff(_firstRowFirstColumn_attr);
}

const ns_s::ST_OnOff& CT_Cnf::get_firstRowFirstColumn_attr() const
{
    if (m_firstRowFirstColumn_attr)
    {
        return *m_firstRowFirstColumn_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

bool CT_Cnf::has_firstRowLastColumn_attr() const
{
    return m_has_firstRowLastColumn_attr;
}

void CT_Cnf::set_firstRowLastColumn_attr(const ns_s::ST_OnOff& _firstRowLastColumn_attr)
{
    m_has_firstRowLastColumn_attr = true;
    m_firstRowLastColumn_attr = new ns_s::ST_OnOff(_firstRowLastColumn_attr);
}

const ns_s::ST_OnOff& CT_Cnf::get_firstRowLastColumn_attr() const
{
    if (m_firstRowLastColumn_attr)
    {
        return *m_firstRowLastColumn_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

bool CT_Cnf::has_lastRowFirstColumn_attr() const
{
    return m_has_lastRowFirstColumn_attr;
}

void CT_Cnf::set_lastRowFirstColumn_attr(const ns_s::ST_OnOff& _lastRowFirstColumn_attr)
{
    m_has_lastRowFirstColumn_attr = true;
    m_lastRowFirstColumn_attr = new ns_s::ST_OnOff(_lastRowFirstColumn_attr);
}

const ns_s::ST_OnOff& CT_Cnf::get_lastRowFirstColumn_attr() const
{
    if (m_lastRowFirstColumn_attr)
    {
        return *m_lastRowFirstColumn_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

bool CT_Cnf::has_lastRowLastColumn_attr() const
{
    return m_has_lastRowLastColumn_attr;
}

void CT_Cnf::set_lastRowLastColumn_attr(const ns_s::ST_OnOff& _lastRowLastColumn_attr)
{
    m_has_lastRowLastColumn_attr = true;
    m_lastRowLastColumn_attr = new ns_s::ST_OnOff(_lastRowLastColumn_attr);
}

const ns_s::ST_OnOff& CT_Cnf::get_lastRowLastColumn_attr() const
{
    if (m_lastRowLastColumn_attr)
    {
        return *m_lastRowLastColumn_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

CT_Cnf* CT_Cnf::default_instance_ = NULL;

// CT_Headers
CT_Headers::CT_Headers()

{
}
CT_Headers::~CT_Headers()
{
    clear();
}
CT_String* CT_Headers::add_header()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_String* pNewChild = pChildGroup->mutable_header();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

void CT_Headers::clear()
{
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
}

void CT_Headers::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";

    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_header())
            {
                (*iter)->get_header().toXmlElem("w:header", "", _outStream);
            }


        }
    }

    _outStream << "</" << _elemName << ">";
}

const CT_Headers& CT_Headers::default_instance()
{
    if (!CT_Headers::default_instance_)
    {
        CT_Headers::default_instance_ = new CT_Headers();
    }
    return *CT_Headers::default_instance_;
}


// CT_Headers::ChildGroup_1
CT_Headers::ChildGroup_1::ChildGroup_1()
    :m_has_header(false),
     m_header(NULL)
{
}
bool CT_Headers::ChildGroup_1::has_header() const
{
    return m_has_header;
}

CT_String* CT_Headers::ChildGroup_1::mutable_header()
{

    m_has_header = true;
    if (!m_header)
    {
        m_header = new CT_String();
    }
    return m_header;
}

const CT_String& CT_Headers::ChildGroup_1::get_header() const
{
    if (m_header)
    {
        return *m_header;
    }
    return CT_String::default_instance();
}

CT_Headers* CT_Headers::default_instance_ = NULL;

// CT_TrPrBase
CT_TrPrBase::CT_TrPrBase()

{
}
CT_TrPrBase::~CT_TrPrBase()
{
    clear();
}
CT_Cnf* CT_TrPrBase::add_cnfStyle()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Cnf* pNewChild = pChildGroup->mutable_cnfStyle();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_DecimalNumber* CT_TrPrBase::add_divId()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_DecimalNumber* pNewChild = pChildGroup->mutable_divId();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_DecimalNumber* CT_TrPrBase::add_gridBefore()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_DecimalNumber* pNewChild = pChildGroup->mutable_gridBefore();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_DecimalNumber* CT_TrPrBase::add_gridAfter()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_DecimalNumber* pNewChild = pChildGroup->mutable_gridAfter();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_TblWidth* CT_TrPrBase::add_wBefore()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_TblWidth* pNewChild = pChildGroup->mutable_wBefore();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_TblWidth* CT_TrPrBase::add_wAfter()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_TblWidth* pNewChild = pChildGroup->mutable_wAfter();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_TrPrBase::add_cantSplit()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_cantSplit();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_Height* CT_TrPrBase::add_trHeight()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Height* pNewChild = pChildGroup->mutable_trHeight();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_TrPrBase::add_tblHeader()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_tblHeader();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_TblWidth* CT_TrPrBase::add_tblCellSpacing()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_TblWidth* pNewChild = pChildGroup->mutable_tblCellSpacing();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_JcTable* CT_TrPrBase::add_jc()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_JcTable* pNewChild = pChildGroup->mutable_jc();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_TrPrBase::add_hidden()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_hidden();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

void CT_TrPrBase::clear()
{
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
}

void CT_TrPrBase::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";

    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_cnfStyle())
            {
                (*iter)->get_cnfStyle().toXmlElem("w:cnfStyle", "", _outStream);
            }


            else if ((*iter)->has_divId())
            {
                (*iter)->get_divId().toXmlElem("w:divId", "", _outStream);
            }


            else if ((*iter)->has_gridBefore())
            {
                (*iter)->get_gridBefore().toXmlElem("w:gridBefore", "", _outStream);
            }


            else if ((*iter)->has_gridAfter())
            {
                (*iter)->get_gridAfter().toXmlElem("w:gridAfter", "", _outStream);
            }


            else if ((*iter)->has_wBefore())
            {
                (*iter)->get_wBefore().toXmlElem("w:wBefore", "", _outStream);
            }


            else if ((*iter)->has_wAfter())
            {
                (*iter)->get_wAfter().toXmlElem("w:wAfter", "", _outStream);
            }


            else if ((*iter)->has_cantSplit())
            {
                (*iter)->get_cantSplit().toXmlElem("w:cantSplit", "", _outStream);
            }


            else if ((*iter)->has_trHeight())
            {
                (*iter)->get_trHeight().toXmlElem("w:trHeight", "", _outStream);
            }


            else if ((*iter)->has_tblHeader())
            {
                (*iter)->get_tblHeader().toXmlElem("w:tblHeader", "", _outStream);
            }


            else if ((*iter)->has_tblCellSpacing())
            {
                (*iter)->get_tblCellSpacing().toXmlElem("w:tblCellSpacing", "", _outStream);
            }


            else if ((*iter)->has_jc())
            {
                (*iter)->get_jc().toXmlElem("w:jc", "", _outStream);
            }


            else if ((*iter)->has_hidden())
            {
                (*iter)->get_hidden().toXmlElem("w:hidden", "", _outStream);
            }


        }
    }

    _outStream << "</" << _elemName << ">";
}

const CT_TrPrBase& CT_TrPrBase::default_instance()
{
    if (!CT_TrPrBase::default_instance_)
    {
        CT_TrPrBase::default_instance_ = new CT_TrPrBase();
    }
    return *CT_TrPrBase::default_instance_;
}


// CT_TrPrBase::ChildGroup_1
CT_TrPrBase::ChildGroup_1::ChildGroup_1()
    :m_has_cnfStyle(false),
     m_cnfStyle(NULL),
     m_has_divId(false),
     m_divId(NULL),
     m_has_gridBefore(false),
     m_gridBefore(NULL),
     m_has_gridAfter(false),
     m_gridAfter(NULL),
     m_has_wBefore(false),
     m_wBefore(NULL),
     m_has_wAfter(false),
     m_wAfter(NULL),
     m_has_cantSplit(false),
     m_cantSplit(NULL),
     m_has_trHeight(false),
     m_trHeight(NULL),
     m_has_tblHeader(false),
     m_tblHeader(NULL),
     m_has_tblCellSpacing(false),
     m_tblCellSpacing(NULL),
     m_has_jc(false),
     m_jc(NULL),
     m_has_hidden(false),
     m_hidden(NULL)
{
}
bool CT_TrPrBase::ChildGroup_1::has_cnfStyle() const
{
    return m_has_cnfStyle;
}

CT_Cnf* CT_TrPrBase::ChildGroup_1::mutable_cnfStyle()
{

    m_has_divId = false;

    if (m_divId)
    {
        delete m_divId;
        m_divId = NULL;
    }
    ;

    m_has_gridBefore = false;

    if (m_gridBefore)
    {
        delete m_gridBefore;
        m_gridBefore = NULL;
    }
    ;

    m_has_gridAfter = false;

    if (m_gridAfter)
    {
        delete m_gridAfter;
        m_gridAfter = NULL;
    }
    ;

    m_has_wBefore = false;

    if (m_wBefore)
    {
        delete m_wBefore;
        m_wBefore = NULL;
    }
    ;

    m_has_wAfter = false;

    if (m_wAfter)
    {
        delete m_wAfter;
        m_wAfter = NULL;
    }
    ;

    m_has_cantSplit = false;

    if (m_cantSplit)
    {
        delete m_cantSplit;
        m_cantSplit = NULL;
    }
    ;

    m_has_trHeight = false;

    if (m_trHeight)
    {
        delete m_trHeight;
        m_trHeight = NULL;
    }
    ;

    m_has_tblHeader = false;

    if (m_tblHeader)
    {
        delete m_tblHeader;
        m_tblHeader = NULL;
    }
    ;

    m_has_tblCellSpacing = false;

    if (m_tblCellSpacing)
    {
        delete m_tblCellSpacing;
        m_tblCellSpacing = NULL;
    }
    ;

    m_has_jc = false;

    if (m_jc)
    {
        delete m_jc;
        m_jc = NULL;
    }
    ;

    m_has_hidden = false;

    if (m_hidden)
    {
        delete m_hidden;
        m_hidden = NULL;
    }
    ;

    m_has_cnfStyle = true;
    if (!m_cnfStyle)
    {
        m_cnfStyle = new CT_Cnf();
    }
    return m_cnfStyle;
}

const CT_Cnf& CT_TrPrBase::ChildGroup_1::get_cnfStyle() const
{
    if (m_cnfStyle)
    {
        return *m_cnfStyle;
    }
    return CT_Cnf::default_instance();
}

bool CT_TrPrBase::ChildGroup_1::has_divId() const
{
    return m_has_divId;
}

CT_DecimalNumber* CT_TrPrBase::ChildGroup_1::mutable_divId()
{

    m_has_cnfStyle = false;

    if (m_cnfStyle)
    {
        delete m_cnfStyle;
        m_cnfStyle = NULL;
    }
    ;

    m_has_gridBefore = false;

    if (m_gridBefore)
    {
        delete m_gridBefore;
        m_gridBefore = NULL;
    }
    ;

    m_has_gridAfter = false;

    if (m_gridAfter)
    {
        delete m_gridAfter;
        m_gridAfter = NULL;
    }
    ;

    m_has_wBefore = false;

    if (m_wBefore)
    {
        delete m_wBefore;
        m_wBefore = NULL;
    }
    ;

    m_has_wAfter = false;

    if (m_wAfter)
    {
        delete m_wAfter;
        m_wAfter = NULL;
    }
    ;

    m_has_cantSplit = false;

    if (m_cantSplit)
    {
        delete m_cantSplit;
        m_cantSplit = NULL;
    }
    ;

    m_has_trHeight = false;

    if (m_trHeight)
    {
        delete m_trHeight;
        m_trHeight = NULL;
    }
    ;

    m_has_tblHeader = false;

    if (m_tblHeader)
    {
        delete m_tblHeader;
        m_tblHeader = NULL;
    }
    ;

    m_has_tblCellSpacing = false;

    if (m_tblCellSpacing)
    {
        delete m_tblCellSpacing;
        m_tblCellSpacing = NULL;
    }
    ;

    m_has_jc = false;

    if (m_jc)
    {
        delete m_jc;
        m_jc = NULL;
    }
    ;

    m_has_hidden = false;

    if (m_hidden)
    {
        delete m_hidden;
        m_hidden = NULL;
    }
    ;

    m_has_divId = true;
    if (!m_divId)
    {
        m_divId = new CT_DecimalNumber();
    }
    return m_divId;
}

const CT_DecimalNumber& CT_TrPrBase::ChildGroup_1::get_divId() const
{
    if (m_divId)
    {
        return *m_divId;
    }
    return CT_DecimalNumber::default_instance();
}

bool CT_TrPrBase::ChildGroup_1::has_gridBefore() const
{
    return m_has_gridBefore;
}

CT_DecimalNumber* CT_TrPrBase::ChildGroup_1::mutable_gridBefore()
{

    m_has_cnfStyle = false;

    if (m_cnfStyle)
    {
        delete m_cnfStyle;
        m_cnfStyle = NULL;
    }
    ;

    m_has_divId = false;

    if (m_divId)
    {
        delete m_divId;
        m_divId = NULL;
    }
    ;

    m_has_gridAfter = false;

    if (m_gridAfter)
    {
        delete m_gridAfter;
        m_gridAfter = NULL;
    }
    ;

    m_has_wBefore = false;

    if (m_wBefore)
    {
        delete m_wBefore;
        m_wBefore = NULL;
    }
    ;

    m_has_wAfter = false;

    if (m_wAfter)
    {
        delete m_wAfter;
        m_wAfter = NULL;
    }
    ;

    m_has_cantSplit = false;

    if (m_cantSplit)
    {
        delete m_cantSplit;
        m_cantSplit = NULL;
    }
    ;

    m_has_trHeight = false;

    if (m_trHeight)
    {
        delete m_trHeight;
        m_trHeight = NULL;
    }
    ;

    m_has_tblHeader = false;

    if (m_tblHeader)
    {
        delete m_tblHeader;
        m_tblHeader = NULL;
    }
    ;

    m_has_tblCellSpacing = false;

    if (m_tblCellSpacing)
    {
        delete m_tblCellSpacing;
        m_tblCellSpacing = NULL;
    }
    ;

    m_has_jc = false;

    if (m_jc)
    {
        delete m_jc;
        m_jc = NULL;
    }
    ;

    m_has_hidden = false;

    if (m_hidden)
    {
        delete m_hidden;
        m_hidden = NULL;
    }
    ;

    m_has_gridBefore = true;
    if (!m_gridBefore)
    {
        m_gridBefore = new CT_DecimalNumber();
    }
    return m_gridBefore;
}

const CT_DecimalNumber& CT_TrPrBase::ChildGroup_1::get_gridBefore() const
{
    if (m_gridBefore)
    {
        return *m_gridBefore;
    }
    return CT_DecimalNumber::default_instance();
}

bool CT_TrPrBase::ChildGroup_1::has_gridAfter() const
{
    return m_has_gridAfter;
}

CT_DecimalNumber* CT_TrPrBase::ChildGroup_1::mutable_gridAfter()
{

    m_has_cnfStyle = false;

    if (m_cnfStyle)
    {
        delete m_cnfStyle;
        m_cnfStyle = NULL;
    }
    ;

    m_has_divId = false;

    if (m_divId)
    {
        delete m_divId;
        m_divId = NULL;
    }
    ;

    m_has_gridBefore = false;

    if (m_gridBefore)
    {
        delete m_gridBefore;
        m_gridBefore = NULL;
    }
    ;

    m_has_wBefore = false;

    if (m_wBefore)
    {
        delete m_wBefore;
        m_wBefore = NULL;
    }
    ;

    m_has_wAfter = false;

    if (m_wAfter)
    {
        delete m_wAfter;
        m_wAfter = NULL;
    }
    ;

    m_has_cantSplit = false;

    if (m_cantSplit)
    {
        delete m_cantSplit;
        m_cantSplit = NULL;
    }
    ;

    m_has_trHeight = false;

    if (m_trHeight)
    {
        delete m_trHeight;
        m_trHeight = NULL;
    }
    ;

    m_has_tblHeader = false;

    if (m_tblHeader)
    {
        delete m_tblHeader;
        m_tblHeader = NULL;
    }
    ;

    m_has_tblCellSpacing = false;

    if (m_tblCellSpacing)
    {
        delete m_tblCellSpacing;
        m_tblCellSpacing = NULL;
    }
    ;

    m_has_jc = false;

    if (m_jc)
    {
        delete m_jc;
        m_jc = NULL;
    }
    ;

    m_has_hidden = false;

    if (m_hidden)
    {
        delete m_hidden;
        m_hidden = NULL;
    }
    ;

    m_has_gridAfter = true;
    if (!m_gridAfter)
    {
        m_gridAfter = new CT_DecimalNumber();
    }
    return m_gridAfter;
}

const CT_DecimalNumber& CT_TrPrBase::ChildGroup_1::get_gridAfter() const
{
    if (m_gridAfter)
    {
        return *m_gridAfter;
    }
    return CT_DecimalNumber::default_instance();
}

bool CT_TrPrBase::ChildGroup_1::has_wBefore() const
{
    return m_has_wBefore;
}

CT_TblWidth* CT_TrPrBase::ChildGroup_1::mutable_wBefore()
{

    m_has_cnfStyle = false;

    if (m_cnfStyle)
    {
        delete m_cnfStyle;
        m_cnfStyle = NULL;
    }
    ;

    m_has_divId = false;

    if (m_divId)
    {
        delete m_divId;
        m_divId = NULL;
    }
    ;

    m_has_gridBefore = false;

    if (m_gridBefore)
    {
        delete m_gridBefore;
        m_gridBefore = NULL;
    }
    ;

    m_has_gridAfter = false;

    if (m_gridAfter)
    {
        delete m_gridAfter;
        m_gridAfter = NULL;
    }
    ;

    m_has_wAfter = false;

    if (m_wAfter)
    {
        delete m_wAfter;
        m_wAfter = NULL;
    }
    ;

    m_has_cantSplit = false;

    if (m_cantSplit)
    {
        delete m_cantSplit;
        m_cantSplit = NULL;
    }
    ;

    m_has_trHeight = false;

    if (m_trHeight)
    {
        delete m_trHeight;
        m_trHeight = NULL;
    }
    ;

    m_has_tblHeader = false;

    if (m_tblHeader)
    {
        delete m_tblHeader;
        m_tblHeader = NULL;
    }
    ;

    m_has_tblCellSpacing = false;

    if (m_tblCellSpacing)
    {
        delete m_tblCellSpacing;
        m_tblCellSpacing = NULL;
    }
    ;

    m_has_jc = false;

    if (m_jc)
    {
        delete m_jc;
        m_jc = NULL;
    }
    ;

    m_has_hidden = false;

    if (m_hidden)
    {
        delete m_hidden;
        m_hidden = NULL;
    }
    ;

    m_has_wBefore = true;
    if (!m_wBefore)
    {
        m_wBefore = new CT_TblWidth();
    }
    return m_wBefore;
}

const CT_TblWidth& CT_TrPrBase::ChildGroup_1::get_wBefore() const
{
    if (m_wBefore)
    {
        return *m_wBefore;
    }
    return CT_TblWidth::default_instance();
}

bool CT_TrPrBase::ChildGroup_1::has_wAfter() const
{
    return m_has_wAfter;
}

CT_TblWidth* CT_TrPrBase::ChildGroup_1::mutable_wAfter()
{

    m_has_cnfStyle = false;

    if (m_cnfStyle)
    {
        delete m_cnfStyle;
        m_cnfStyle = NULL;
    }
    ;

    m_has_divId = false;

    if (m_divId)
    {
        delete m_divId;
        m_divId = NULL;
    }
    ;

    m_has_gridBefore = false;

    if (m_gridBefore)
    {
        delete m_gridBefore;
        m_gridBefore = NULL;
    }
    ;

    m_has_gridAfter = false;

    if (m_gridAfter)
    {
        delete m_gridAfter;
        m_gridAfter = NULL;
    }
    ;

    m_has_wBefore = false;

    if (m_wBefore)
    {
        delete m_wBefore;
        m_wBefore = NULL;
    }
    ;

    m_has_cantSplit = false;

    if (m_cantSplit)
    {
        delete m_cantSplit;
        m_cantSplit = NULL;
    }
    ;

    m_has_trHeight = false;

    if (m_trHeight)
    {
        delete m_trHeight;
        m_trHeight = NULL;
    }
    ;

    m_has_tblHeader = false;

    if (m_tblHeader)
    {
        delete m_tblHeader;
        m_tblHeader = NULL;
    }
    ;

    m_has_tblCellSpacing = false;

    if (m_tblCellSpacing)
    {
        delete m_tblCellSpacing;
        m_tblCellSpacing = NULL;
    }
    ;

    m_has_jc = false;

    if (m_jc)
    {
        delete m_jc;
        m_jc = NULL;
    }
    ;

    m_has_hidden = false;

    if (m_hidden)
    {
        delete m_hidden;
        m_hidden = NULL;
    }
    ;

    m_has_wAfter = true;
    if (!m_wAfter)
    {
        m_wAfter = new CT_TblWidth();
    }
    return m_wAfter;
}

const CT_TblWidth& CT_TrPrBase::ChildGroup_1::get_wAfter() const
{
    if (m_wAfter)
    {
        return *m_wAfter;
    }
    return CT_TblWidth::default_instance();
}

bool CT_TrPrBase::ChildGroup_1::has_cantSplit() const
{
    return m_has_cantSplit;
}

CT_OnOff* CT_TrPrBase::ChildGroup_1::mutable_cantSplit()
{

    m_has_cnfStyle = false;

    if (m_cnfStyle)
    {
        delete m_cnfStyle;
        m_cnfStyle = NULL;
    }
    ;

    m_has_divId = false;

    if (m_divId)
    {
        delete m_divId;
        m_divId = NULL;
    }
    ;

    m_has_gridBefore = false;

    if (m_gridBefore)
    {
        delete m_gridBefore;
        m_gridBefore = NULL;
    }
    ;

    m_has_gridAfter = false;

    if (m_gridAfter)
    {
        delete m_gridAfter;
        m_gridAfter = NULL;
    }
    ;

    m_has_wBefore = false;

    if (m_wBefore)
    {
        delete m_wBefore;
        m_wBefore = NULL;
    }
    ;

    m_has_wAfter = false;

    if (m_wAfter)
    {
        delete m_wAfter;
        m_wAfter = NULL;
    }
    ;

    m_has_trHeight = false;

    if (m_trHeight)
    {
        delete m_trHeight;
        m_trHeight = NULL;
    }
    ;

    m_has_tblHeader = false;

    if (m_tblHeader)
    {
        delete m_tblHeader;
        m_tblHeader = NULL;
    }
    ;

    m_has_tblCellSpacing = false;

    if (m_tblCellSpacing)
    {
        delete m_tblCellSpacing;
        m_tblCellSpacing = NULL;
    }
    ;

    m_has_jc = false;

    if (m_jc)
    {
        delete m_jc;
        m_jc = NULL;
    }
    ;

    m_has_hidden = false;

    if (m_hidden)
    {
        delete m_hidden;
        m_hidden = NULL;
    }
    ;

    m_has_cantSplit = true;
    if (!m_cantSplit)
    {
        m_cantSplit = new CT_OnOff();
    }
    return m_cantSplit;
}

const CT_OnOff& CT_TrPrBase::ChildGroup_1::get_cantSplit() const
{
    if (m_cantSplit)
    {
        return *m_cantSplit;
    }
    return CT_OnOff::default_instance();
}

bool CT_TrPrBase::ChildGroup_1::has_trHeight() const
{
    return m_has_trHeight;
}

CT_Height* CT_TrPrBase::ChildGroup_1::mutable_trHeight()
{

    m_has_cnfStyle = false;

    if (m_cnfStyle)
    {
        delete m_cnfStyle;
        m_cnfStyle = NULL;
    }
    ;

    m_has_divId = false;

    if (m_divId)
    {
        delete m_divId;
        m_divId = NULL;
    }
    ;

    m_has_gridBefore = false;

    if (m_gridBefore)
    {
        delete m_gridBefore;
        m_gridBefore = NULL;
    }
    ;

    m_has_gridAfter = false;

    if (m_gridAfter)
    {
        delete m_gridAfter;
        m_gridAfter = NULL;
    }
    ;

    m_has_wBefore = false;

    if (m_wBefore)
    {
        delete m_wBefore;
        m_wBefore = NULL;
    }
    ;

    m_has_wAfter = false;

    if (m_wAfter)
    {
        delete m_wAfter;
        m_wAfter = NULL;
    }
    ;

    m_has_cantSplit = false;

    if (m_cantSplit)
    {
        delete m_cantSplit;
        m_cantSplit = NULL;
    }
    ;

    m_has_tblHeader = false;

    if (m_tblHeader)
    {
        delete m_tblHeader;
        m_tblHeader = NULL;
    }
    ;

    m_has_tblCellSpacing = false;

    if (m_tblCellSpacing)
    {
        delete m_tblCellSpacing;
        m_tblCellSpacing = NULL;
    }
    ;

    m_has_jc = false;

    if (m_jc)
    {
        delete m_jc;
        m_jc = NULL;
    }
    ;

    m_has_hidden = false;

    if (m_hidden)
    {
        delete m_hidden;
        m_hidden = NULL;
    }
    ;

    m_has_trHeight = true;
    if (!m_trHeight)
    {
        m_trHeight = new CT_Height();
    }
    return m_trHeight;
}

const CT_Height& CT_TrPrBase::ChildGroup_1::get_trHeight() const
{
    if (m_trHeight)
    {
        return *m_trHeight;
    }
    return CT_Height::default_instance();
}

bool CT_TrPrBase::ChildGroup_1::has_tblHeader() const
{
    return m_has_tblHeader;
}

CT_OnOff* CT_TrPrBase::ChildGroup_1::mutable_tblHeader()
{

    m_has_cnfStyle = false;

    if (m_cnfStyle)
    {
        delete m_cnfStyle;
        m_cnfStyle = NULL;
    }
    ;

    m_has_divId = false;

    if (m_divId)
    {
        delete m_divId;
        m_divId = NULL;
    }
    ;

    m_has_gridBefore = false;

    if (m_gridBefore)
    {
        delete m_gridBefore;
        m_gridBefore = NULL;
    }
    ;

    m_has_gridAfter = false;

    if (m_gridAfter)
    {
        delete m_gridAfter;
        m_gridAfter = NULL;
    }
    ;

    m_has_wBefore = false;

    if (m_wBefore)
    {
        delete m_wBefore;
        m_wBefore = NULL;
    }
    ;

    m_has_wAfter = false;

    if (m_wAfter)
    {
        delete m_wAfter;
        m_wAfter = NULL;
    }
    ;

    m_has_cantSplit = false;

    if (m_cantSplit)
    {
        delete m_cantSplit;
        m_cantSplit = NULL;
    }
    ;

    m_has_trHeight = false;

    if (m_trHeight)
    {
        delete m_trHeight;
        m_trHeight = NULL;
    }
    ;

    m_has_tblCellSpacing = false;

    if (m_tblCellSpacing)
    {
        delete m_tblCellSpacing;
        m_tblCellSpacing = NULL;
    }
    ;

    m_has_jc = false;

    if (m_jc)
    {
        delete m_jc;
        m_jc = NULL;
    }
    ;

    m_has_hidden = false;

    if (m_hidden)
    {
        delete m_hidden;
        m_hidden = NULL;
    }
    ;

    m_has_tblHeader = true;
    if (!m_tblHeader)
    {
        m_tblHeader = new CT_OnOff();
    }
    return m_tblHeader;
}

const CT_OnOff& CT_TrPrBase::ChildGroup_1::get_tblHeader() const
{
    if (m_tblHeader)
    {
        return *m_tblHeader;
    }
    return CT_OnOff::default_instance();
}

bool CT_TrPrBase::ChildGroup_1::has_tblCellSpacing() const
{
    return m_has_tblCellSpacing;
}

CT_TblWidth* CT_TrPrBase::ChildGroup_1::mutable_tblCellSpacing()
{

    m_has_cnfStyle = false;

    if (m_cnfStyle)
    {
        delete m_cnfStyle;
        m_cnfStyle = NULL;
    }
    ;

    m_has_divId = false;

    if (m_divId)
    {
        delete m_divId;
        m_divId = NULL;
    }
    ;

    m_has_gridBefore = false;

    if (m_gridBefore)
    {
        delete m_gridBefore;
        m_gridBefore = NULL;
    }
    ;

    m_has_gridAfter = false;

    if (m_gridAfter)
    {
        delete m_gridAfter;
        m_gridAfter = NULL;
    }
    ;

    m_has_wBefore = false;

    if (m_wBefore)
    {
        delete m_wBefore;
        m_wBefore = NULL;
    }
    ;

    m_has_wAfter = false;

    if (m_wAfter)
    {
        delete m_wAfter;
        m_wAfter = NULL;
    }
    ;

    m_has_cantSplit = false;

    if (m_cantSplit)
    {
        delete m_cantSplit;
        m_cantSplit = NULL;
    }
    ;

    m_has_trHeight = false;

    if (m_trHeight)
    {
        delete m_trHeight;
        m_trHeight = NULL;
    }
    ;

    m_has_tblHeader = false;

    if (m_tblHeader)
    {
        delete m_tblHeader;
        m_tblHeader = NULL;
    }
    ;

    m_has_jc = false;

    if (m_jc)
    {
        delete m_jc;
        m_jc = NULL;
    }
    ;

    m_has_hidden = false;

    if (m_hidden)
    {
        delete m_hidden;
        m_hidden = NULL;
    }
    ;

    m_has_tblCellSpacing = true;
    if (!m_tblCellSpacing)
    {
        m_tblCellSpacing = new CT_TblWidth();
    }
    return m_tblCellSpacing;
}

const CT_TblWidth& CT_TrPrBase::ChildGroup_1::get_tblCellSpacing() const
{
    if (m_tblCellSpacing)
    {
        return *m_tblCellSpacing;
    }
    return CT_TblWidth::default_instance();
}

bool CT_TrPrBase::ChildGroup_1::has_jc() const
{
    return m_has_jc;
}

CT_JcTable* CT_TrPrBase::ChildGroup_1::mutable_jc()
{

    m_has_cnfStyle = false;

    if (m_cnfStyle)
    {
        delete m_cnfStyle;
        m_cnfStyle = NULL;
    }
    ;

    m_has_divId = false;

    if (m_divId)
    {
        delete m_divId;
        m_divId = NULL;
    }
    ;

    m_has_gridBefore = false;

    if (m_gridBefore)
    {
        delete m_gridBefore;
        m_gridBefore = NULL;
    }
    ;

    m_has_gridAfter = false;

    if (m_gridAfter)
    {
        delete m_gridAfter;
        m_gridAfter = NULL;
    }
    ;

    m_has_wBefore = false;

    if (m_wBefore)
    {
        delete m_wBefore;
        m_wBefore = NULL;
    }
    ;

    m_has_wAfter = false;

    if (m_wAfter)
    {
        delete m_wAfter;
        m_wAfter = NULL;
    }
    ;

    m_has_cantSplit = false;

    if (m_cantSplit)
    {
        delete m_cantSplit;
        m_cantSplit = NULL;
    }
    ;

    m_has_trHeight = false;

    if (m_trHeight)
    {
        delete m_trHeight;
        m_trHeight = NULL;
    }
    ;

    m_has_tblHeader = false;

    if (m_tblHeader)
    {
        delete m_tblHeader;
        m_tblHeader = NULL;
    }
    ;

    m_has_tblCellSpacing = false;

    if (m_tblCellSpacing)
    {
        delete m_tblCellSpacing;
        m_tblCellSpacing = NULL;
    }
    ;

    m_has_hidden = false;

    if (m_hidden)
    {
        delete m_hidden;
        m_hidden = NULL;
    }
    ;

    m_has_jc = true;
    if (!m_jc)
    {
        m_jc = new CT_JcTable();
    }
    return m_jc;
}

const CT_JcTable& CT_TrPrBase::ChildGroup_1::get_jc() const
{
    if (m_jc)
    {
        return *m_jc;
    }
    return CT_JcTable::default_instance();
}

bool CT_TrPrBase::ChildGroup_1::has_hidden() const
{
    return m_has_hidden;
}

CT_OnOff* CT_TrPrBase::ChildGroup_1::mutable_hidden()
{

    m_has_cnfStyle = false;

    if (m_cnfStyle)
    {
        delete m_cnfStyle;
        m_cnfStyle = NULL;
    }
    ;

    m_has_divId = false;

    if (m_divId)
    {
        delete m_divId;
        m_divId = NULL;
    }
    ;

    m_has_gridBefore = false;

    if (m_gridBefore)
    {
        delete m_gridBefore;
        m_gridBefore = NULL;
    }
    ;

    m_has_gridAfter = false;

    if (m_gridAfter)
    {
        delete m_gridAfter;
        m_gridAfter = NULL;
    }
    ;

    m_has_wBefore = false;

    if (m_wBefore)
    {
        delete m_wBefore;
        m_wBefore = NULL;
    }
    ;

    m_has_wAfter = false;

    if (m_wAfter)
    {
        delete m_wAfter;
        m_wAfter = NULL;
    }
    ;

    m_has_cantSplit = false;

    if (m_cantSplit)
    {
        delete m_cantSplit;
        m_cantSplit = NULL;
    }
    ;

    m_has_trHeight = false;

    if (m_trHeight)
    {
        delete m_trHeight;
        m_trHeight = NULL;
    }
    ;

    m_has_tblHeader = false;

    if (m_tblHeader)
    {
        delete m_tblHeader;
        m_tblHeader = NULL;
    }
    ;

    m_has_tblCellSpacing = false;

    if (m_tblCellSpacing)
    {
        delete m_tblCellSpacing;
        m_tblCellSpacing = NULL;
    }
    ;

    m_has_jc = false;

    if (m_jc)
    {
        delete m_jc;
        m_jc = NULL;
    }
    ;

    m_has_hidden = true;
    if (!m_hidden)
    {
        m_hidden = new CT_OnOff();
    }
    return m_hidden;
}

const CT_OnOff& CT_TrPrBase::ChildGroup_1::get_hidden() const
{
    if (m_hidden)
    {
        return *m_hidden;
    }
    return CT_OnOff::default_instance();
}

CT_TrPrBase* CT_TrPrBase::default_instance_ = NULL;

// CT_TrPr
CT_TrPr::CT_TrPr()
    :m_has_ins(false),
     m_ins(NULL),
     m_has_del(false),
     m_del(NULL),
     m_has_trPrChange(false),
     m_trPrChange(NULL)
{
}
CT_TrPr::~CT_TrPr()
{
    clear();
}
CT_Cnf* CT_TrPr::add_cnfStyle()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Cnf* pNewChild = pChildGroup->mutable_cnfStyle();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_DecimalNumber* CT_TrPr::add_divId()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_DecimalNumber* pNewChild = pChildGroup->mutable_divId();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_DecimalNumber* CT_TrPr::add_gridBefore()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_DecimalNumber* pNewChild = pChildGroup->mutable_gridBefore();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_DecimalNumber* CT_TrPr::add_gridAfter()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_DecimalNumber* pNewChild = pChildGroup->mutable_gridAfter();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_TblWidth* CT_TrPr::add_wBefore()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_TblWidth* pNewChild = pChildGroup->mutable_wBefore();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_TblWidth* CT_TrPr::add_wAfter()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_TblWidth* pNewChild = pChildGroup->mutable_wAfter();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_TrPr::add_cantSplit()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_cantSplit();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_Height* CT_TrPr::add_trHeight()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Height* pNewChild = pChildGroup->mutable_trHeight();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_TrPr::add_tblHeader()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_tblHeader();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_TblWidth* CT_TrPr::add_tblCellSpacing()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_TblWidth* pNewChild = pChildGroup->mutable_tblCellSpacing();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_JcTable* CT_TrPr::add_jc()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_JcTable* pNewChild = pChildGroup->mutable_jc();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_OnOff* CT_TrPr::add_hidden()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OnOff* pNewChild = pChildGroup->mutable_hidden();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

bool CT_TrPr::has_ins() const
{
    return m_has_ins;
}

CT_TrackChange* CT_TrPr::mutable_ins()
{
    m_has_ins = true;
    if (!m_ins)
    {
        m_ins = new CT_TrackChange();
    }
    return m_ins;
}

const CT_TrackChange& CT_TrPr::get_ins() const
{
    if (m_ins)
    {
        return *m_ins;
    }
    return CT_TrackChange::default_instance();
}

bool CT_TrPr::has_del() const
{
    return m_has_del;
}

CT_TrackChange* CT_TrPr::mutable_del()
{
    m_has_del = true;
    if (!m_del)
    {
        m_del = new CT_TrackChange();
    }
    return m_del;
}

const CT_TrackChange& CT_TrPr::get_del() const
{
    if (m_del)
    {
        return *m_del;
    }
    return CT_TrackChange::default_instance();
}

bool CT_TrPr::has_trPrChange() const
{
    return m_has_trPrChange;
}

CT_TrPrChange* CT_TrPr::mutable_trPrChange()
{
    m_has_trPrChange = true;
    if (!m_trPrChange)
    {
        m_trPrChange = new CT_TrPrChange();
    }
    return m_trPrChange;
}

const CT_TrPrChange& CT_TrPr::get_trPrChange() const
{
    if (m_trPrChange)
    {
        return *m_trPrChange;
    }
    return CT_TrPrChange::default_instance();
}

void CT_TrPr::clear()
{
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }


    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }


    m_has_trPrChange = false;

    if (m_trPrChange)
    {
        delete m_trPrChange;
        m_trPrChange = NULL;
    }

}

void CT_TrPr::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";

    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_cnfStyle())
            {
                (*iter)->get_cnfStyle().toXmlElem("w:cnfStyle", "", _outStream);
            }


            else if ((*iter)->has_divId())
            {
                (*iter)->get_divId().toXmlElem("w:divId", "", _outStream);
            }


            else if ((*iter)->has_gridBefore())
            {
                (*iter)->get_gridBefore().toXmlElem("w:gridBefore", "", _outStream);
            }


            else if ((*iter)->has_gridAfter())
            {
                (*iter)->get_gridAfter().toXmlElem("w:gridAfter", "", _outStream);
            }


            else if ((*iter)->has_wBefore())
            {
                (*iter)->get_wBefore().toXmlElem("w:wBefore", "", _outStream);
            }


            else if ((*iter)->has_wAfter())
            {
                (*iter)->get_wAfter().toXmlElem("w:wAfter", "", _outStream);
            }


            else if ((*iter)->has_cantSplit())
            {
                (*iter)->get_cantSplit().toXmlElem("w:cantSplit", "", _outStream);
            }


            else if ((*iter)->has_trHeight())
            {
                (*iter)->get_trHeight().toXmlElem("w:trHeight", "", _outStream);
            }


            else if ((*iter)->has_tblHeader())
            {
                (*iter)->get_tblHeader().toXmlElem("w:tblHeader", "", _outStream);
            }


            else if ((*iter)->has_tblCellSpacing())
            {
                (*iter)->get_tblCellSpacing().toXmlElem("w:tblCellSpacing", "", _outStream);
            }


            else if ((*iter)->has_jc())
            {
                (*iter)->get_jc().toXmlElem("w:jc", "", _outStream);
            }


            else if ((*iter)->has_hidden())
            {
                (*iter)->get_hidden().toXmlElem("w:hidden", "", _outStream);
            }


        }
    }


    if (m_has_ins)
    {
        m_ins->toXmlElem("w:ins", "", _outStream);
    }


    if (m_has_del)
    {
        m_del->toXmlElem("w:del", "", _outStream);
    }


    if (m_has_trPrChange)
    {
        m_trPrChange->toXmlElem("w:trPrChange", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_TrPr& CT_TrPr::default_instance()
{
    if (!CT_TrPr::default_instance_)
    {
        CT_TrPr::default_instance_ = new CT_TrPr();
    }
    return *CT_TrPr::default_instance_;
}


// CT_TrPr::ChildGroup_1
CT_TrPr::ChildGroup_1::ChildGroup_1()
    :m_has_cnfStyle(false),
     m_cnfStyle(NULL),
     m_has_divId(false),
     m_divId(NULL),
     m_has_gridBefore(false),
     m_gridBefore(NULL),
     m_has_gridAfter(false),
     m_gridAfter(NULL),
     m_has_wBefore(false),
     m_wBefore(NULL),
     m_has_wAfter(false),
     m_wAfter(NULL),
     m_has_cantSplit(false),
     m_cantSplit(NULL),
     m_has_trHeight(false),
     m_trHeight(NULL),
     m_has_tblHeader(false),
     m_tblHeader(NULL),
     m_has_tblCellSpacing(false),
     m_tblCellSpacing(NULL),
     m_has_jc(false),
     m_jc(NULL),
     m_has_hidden(false),
     m_hidden(NULL)
{
}
bool CT_TrPr::ChildGroup_1::has_cnfStyle() const
{
    return m_has_cnfStyle;
}

CT_Cnf* CT_TrPr::ChildGroup_1::mutable_cnfStyle()
{

    m_has_divId = false;

    if (m_divId)
    {
        delete m_divId;
        m_divId = NULL;
    }
    ;

    m_has_gridBefore = false;

    if (m_gridBefore)
    {
        delete m_gridBefore;
        m_gridBefore = NULL;
    }
    ;

    m_has_gridAfter = false;

    if (m_gridAfter)
    {
        delete m_gridAfter;
        m_gridAfter = NULL;
    }
    ;

    m_has_wBefore = false;

    if (m_wBefore)
    {
        delete m_wBefore;
        m_wBefore = NULL;
    }
    ;

    m_has_wAfter = false;

    if (m_wAfter)
    {
        delete m_wAfter;
        m_wAfter = NULL;
    }
    ;

    m_has_cantSplit = false;

    if (m_cantSplit)
    {
        delete m_cantSplit;
        m_cantSplit = NULL;
    }
    ;

    m_has_trHeight = false;

    if (m_trHeight)
    {
        delete m_trHeight;
        m_trHeight = NULL;
    }
    ;

    m_has_tblHeader = false;

    if (m_tblHeader)
    {
        delete m_tblHeader;
        m_tblHeader = NULL;
    }
    ;

    m_has_tblCellSpacing = false;

    if (m_tblCellSpacing)
    {
        delete m_tblCellSpacing;
        m_tblCellSpacing = NULL;
    }
    ;

    m_has_jc = false;

    if (m_jc)
    {
        delete m_jc;
        m_jc = NULL;
    }
    ;

    m_has_hidden = false;

    if (m_hidden)
    {
        delete m_hidden;
        m_hidden = NULL;
    }
    ;

    m_has_cnfStyle = true;
    if (!m_cnfStyle)
    {
        m_cnfStyle = new CT_Cnf();
    }
    return m_cnfStyle;
}

const CT_Cnf& CT_TrPr::ChildGroup_1::get_cnfStyle() const
{
    if (m_cnfStyle)
    {
        return *m_cnfStyle;
    }
    return CT_Cnf::default_instance();
}

bool CT_TrPr::ChildGroup_1::has_divId() const
{
    return m_has_divId;
}

CT_DecimalNumber* CT_TrPr::ChildGroup_1::mutable_divId()
{

    m_has_cnfStyle = false;

    if (m_cnfStyle)
    {
        delete m_cnfStyle;
        m_cnfStyle = NULL;
    }
    ;

    m_has_gridBefore = false;

    if (m_gridBefore)
    {
        delete m_gridBefore;
        m_gridBefore = NULL;
    }
    ;

    m_has_gridAfter = false;

    if (m_gridAfter)
    {
        delete m_gridAfter;
        m_gridAfter = NULL;
    }
    ;

    m_has_wBefore = false;

    if (m_wBefore)
    {
        delete m_wBefore;
        m_wBefore = NULL;
    }
    ;

    m_has_wAfter = false;

    if (m_wAfter)
    {
        delete m_wAfter;
        m_wAfter = NULL;
    }
    ;

    m_has_cantSplit = false;

    if (m_cantSplit)
    {
        delete m_cantSplit;
        m_cantSplit = NULL;
    }
    ;

    m_has_trHeight = false;

    if (m_trHeight)
    {
        delete m_trHeight;
        m_trHeight = NULL;
    }
    ;

    m_has_tblHeader = false;

    if (m_tblHeader)
    {
        delete m_tblHeader;
        m_tblHeader = NULL;
    }
    ;

    m_has_tblCellSpacing = false;

    if (m_tblCellSpacing)
    {
        delete m_tblCellSpacing;
        m_tblCellSpacing = NULL;
    }
    ;

    m_has_jc = false;

    if (m_jc)
    {
        delete m_jc;
        m_jc = NULL;
    }
    ;

    m_has_hidden = false;

    if (m_hidden)
    {
        delete m_hidden;
        m_hidden = NULL;
    }
    ;

    m_has_divId = true;
    if (!m_divId)
    {
        m_divId = new CT_DecimalNumber();
    }
    return m_divId;
}

const CT_DecimalNumber& CT_TrPr::ChildGroup_1::get_divId() const
{
    if (m_divId)
    {
        return *m_divId;
    }
    return CT_DecimalNumber::default_instance();
}

bool CT_TrPr::ChildGroup_1::has_gridBefore() const
{
    return m_has_gridBefore;
}

CT_DecimalNumber* CT_TrPr::ChildGroup_1::mutable_gridBefore()
{

    m_has_cnfStyle = false;

    if (m_cnfStyle)
    {
        delete m_cnfStyle;
        m_cnfStyle = NULL;
    }
    ;

    m_has_divId = false;

    if (m_divId)
    {
        delete m_divId;
        m_divId = NULL;
    }
    ;

    m_has_gridAfter = false;

    if (m_gridAfter)
    {
        delete m_gridAfter;
        m_gridAfter = NULL;
    }
    ;

    m_has_wBefore = false;

    if (m_wBefore)
    {
        delete m_wBefore;
        m_wBefore = NULL;
    }
    ;

    m_has_wAfter = false;

    if (m_wAfter)
    {
        delete m_wAfter;
        m_wAfter = NULL;
    }
    ;

    m_has_cantSplit = false;

    if (m_cantSplit)
    {
        delete m_cantSplit;
        m_cantSplit = NULL;
    }
    ;

    m_has_trHeight = false;

    if (m_trHeight)
    {
        delete m_trHeight;
        m_trHeight = NULL;
    }
    ;

    m_has_tblHeader = false;

    if (m_tblHeader)
    {
        delete m_tblHeader;
        m_tblHeader = NULL;
    }
    ;

    m_has_tblCellSpacing = false;

    if (m_tblCellSpacing)
    {
        delete m_tblCellSpacing;
        m_tblCellSpacing = NULL;
    }
    ;

    m_has_jc = false;

    if (m_jc)
    {
        delete m_jc;
        m_jc = NULL;
    }
    ;

    m_has_hidden = false;

    if (m_hidden)
    {
        delete m_hidden;
        m_hidden = NULL;
    }
    ;

    m_has_gridBefore = true;
    if (!m_gridBefore)
    {
        m_gridBefore = new CT_DecimalNumber();
    }
    return m_gridBefore;
}

const CT_DecimalNumber& CT_TrPr::ChildGroup_1::get_gridBefore() const
{
    if (m_gridBefore)
    {
        return *m_gridBefore;
    }
    return CT_DecimalNumber::default_instance();
}

bool CT_TrPr::ChildGroup_1::has_gridAfter() const
{
    return m_has_gridAfter;
}

CT_DecimalNumber* CT_TrPr::ChildGroup_1::mutable_gridAfter()
{

    m_has_cnfStyle = false;

    if (m_cnfStyle)
    {
        delete m_cnfStyle;
        m_cnfStyle = NULL;
    }
    ;

    m_has_divId = false;

    if (m_divId)
    {
        delete m_divId;
        m_divId = NULL;
    }
    ;

    m_has_gridBefore = false;

    if (m_gridBefore)
    {
        delete m_gridBefore;
        m_gridBefore = NULL;
    }
    ;

    m_has_wBefore = false;

    if (m_wBefore)
    {
        delete m_wBefore;
        m_wBefore = NULL;
    }
    ;

    m_has_wAfter = false;

    if (m_wAfter)
    {
        delete m_wAfter;
        m_wAfter = NULL;
    }
    ;

    m_has_cantSplit = false;

    if (m_cantSplit)
    {
        delete m_cantSplit;
        m_cantSplit = NULL;
    }
    ;

    m_has_trHeight = false;

    if (m_trHeight)
    {
        delete m_trHeight;
        m_trHeight = NULL;
    }
    ;

    m_has_tblHeader = false;

    if (m_tblHeader)
    {
        delete m_tblHeader;
        m_tblHeader = NULL;
    }
    ;

    m_has_tblCellSpacing = false;

    if (m_tblCellSpacing)
    {
        delete m_tblCellSpacing;
        m_tblCellSpacing = NULL;
    }
    ;

    m_has_jc = false;

    if (m_jc)
    {
        delete m_jc;
        m_jc = NULL;
    }
    ;

    m_has_hidden = false;

    if (m_hidden)
    {
        delete m_hidden;
        m_hidden = NULL;
    }
    ;

    m_has_gridAfter = true;
    if (!m_gridAfter)
    {
        m_gridAfter = new CT_DecimalNumber();
    }
    return m_gridAfter;
}

const CT_DecimalNumber& CT_TrPr::ChildGroup_1::get_gridAfter() const
{
    if (m_gridAfter)
    {
        return *m_gridAfter;
    }
    return CT_DecimalNumber::default_instance();
}

bool CT_TrPr::ChildGroup_1::has_wBefore() const
{
    return m_has_wBefore;
}

CT_TblWidth* CT_TrPr::ChildGroup_1::mutable_wBefore()
{

    m_has_cnfStyle = false;

    if (m_cnfStyle)
    {
        delete m_cnfStyle;
        m_cnfStyle = NULL;
    }
    ;

    m_has_divId = false;

    if (m_divId)
    {
        delete m_divId;
        m_divId = NULL;
    }
    ;

    m_has_gridBefore = false;

    if (m_gridBefore)
    {
        delete m_gridBefore;
        m_gridBefore = NULL;
    }
    ;

    m_has_gridAfter = false;

    if (m_gridAfter)
    {
        delete m_gridAfter;
        m_gridAfter = NULL;
    }
    ;

    m_has_wAfter = false;

    if (m_wAfter)
    {
        delete m_wAfter;
        m_wAfter = NULL;
    }
    ;

    m_has_cantSplit = false;

    if (m_cantSplit)
    {
        delete m_cantSplit;
        m_cantSplit = NULL;
    }
    ;

    m_has_trHeight = false;

    if (m_trHeight)
    {
        delete m_trHeight;
        m_trHeight = NULL;
    }
    ;

    m_has_tblHeader = false;

    if (m_tblHeader)
    {
        delete m_tblHeader;
        m_tblHeader = NULL;
    }
    ;

    m_has_tblCellSpacing = false;

    if (m_tblCellSpacing)
    {
        delete m_tblCellSpacing;
        m_tblCellSpacing = NULL;
    }
    ;

    m_has_jc = false;

    if (m_jc)
    {
        delete m_jc;
        m_jc = NULL;
    }
    ;

    m_has_hidden = false;

    if (m_hidden)
    {
        delete m_hidden;
        m_hidden = NULL;
    }
    ;

    m_has_wBefore = true;
    if (!m_wBefore)
    {
        m_wBefore = new CT_TblWidth();
    }
    return m_wBefore;
}

const CT_TblWidth& CT_TrPr::ChildGroup_1::get_wBefore() const
{
    if (m_wBefore)
    {
        return *m_wBefore;
    }
    return CT_TblWidth::default_instance();
}

bool CT_TrPr::ChildGroup_1::has_wAfter() const
{
    return m_has_wAfter;
}

CT_TblWidth* CT_TrPr::ChildGroup_1::mutable_wAfter()
{

    m_has_cnfStyle = false;

    if (m_cnfStyle)
    {
        delete m_cnfStyle;
        m_cnfStyle = NULL;
    }
    ;

    m_has_divId = false;

    if (m_divId)
    {
        delete m_divId;
        m_divId = NULL;
    }
    ;

    m_has_gridBefore = false;

    if (m_gridBefore)
    {
        delete m_gridBefore;
        m_gridBefore = NULL;
    }
    ;

    m_has_gridAfter = false;

    if (m_gridAfter)
    {
        delete m_gridAfter;
        m_gridAfter = NULL;
    }
    ;

    m_has_wBefore = false;

    if (m_wBefore)
    {
        delete m_wBefore;
        m_wBefore = NULL;
    }
    ;

    m_has_cantSplit = false;

    if (m_cantSplit)
    {
        delete m_cantSplit;
        m_cantSplit = NULL;
    }
    ;

    m_has_trHeight = false;

    if (m_trHeight)
    {
        delete m_trHeight;
        m_trHeight = NULL;
    }
    ;

    m_has_tblHeader = false;

    if (m_tblHeader)
    {
        delete m_tblHeader;
        m_tblHeader = NULL;
    }
    ;

    m_has_tblCellSpacing = false;

    if (m_tblCellSpacing)
    {
        delete m_tblCellSpacing;
        m_tblCellSpacing = NULL;
    }
    ;

    m_has_jc = false;

    if (m_jc)
    {
        delete m_jc;
        m_jc = NULL;
    }
    ;

    m_has_hidden = false;

    if (m_hidden)
    {
        delete m_hidden;
        m_hidden = NULL;
    }
    ;

    m_has_wAfter = true;
    if (!m_wAfter)
    {
        m_wAfter = new CT_TblWidth();
    }
    return m_wAfter;
}

const CT_TblWidth& CT_TrPr::ChildGroup_1::get_wAfter() const
{
    if (m_wAfter)
    {
        return *m_wAfter;
    }
    return CT_TblWidth::default_instance();
}

bool CT_TrPr::ChildGroup_1::has_cantSplit() const
{
    return m_has_cantSplit;
}

CT_OnOff* CT_TrPr::ChildGroup_1::mutable_cantSplit()
{

    m_has_cnfStyle = false;

    if (m_cnfStyle)
    {
        delete m_cnfStyle;
        m_cnfStyle = NULL;
    }
    ;

    m_has_divId = false;

    if (m_divId)
    {
        delete m_divId;
        m_divId = NULL;
    }
    ;

    m_has_gridBefore = false;

    if (m_gridBefore)
    {
        delete m_gridBefore;
        m_gridBefore = NULL;
    }
    ;

    m_has_gridAfter = false;

    if (m_gridAfter)
    {
        delete m_gridAfter;
        m_gridAfter = NULL;
    }
    ;

    m_has_wBefore = false;

    if (m_wBefore)
    {
        delete m_wBefore;
        m_wBefore = NULL;
    }
    ;

    m_has_wAfter = false;

    if (m_wAfter)
    {
        delete m_wAfter;
        m_wAfter = NULL;
    }
    ;

    m_has_trHeight = false;

    if (m_trHeight)
    {
        delete m_trHeight;
        m_trHeight = NULL;
    }
    ;

    m_has_tblHeader = false;

    if (m_tblHeader)
    {
        delete m_tblHeader;
        m_tblHeader = NULL;
    }
    ;

    m_has_tblCellSpacing = false;

    if (m_tblCellSpacing)
    {
        delete m_tblCellSpacing;
        m_tblCellSpacing = NULL;
    }
    ;

    m_has_jc = false;

    if (m_jc)
    {
        delete m_jc;
        m_jc = NULL;
    }
    ;

    m_has_hidden = false;

    if (m_hidden)
    {
        delete m_hidden;
        m_hidden = NULL;
    }
    ;

    m_has_cantSplit = true;
    if (!m_cantSplit)
    {
        m_cantSplit = new CT_OnOff();
    }
    return m_cantSplit;
}

const CT_OnOff& CT_TrPr::ChildGroup_1::get_cantSplit() const
{
    if (m_cantSplit)
    {
        return *m_cantSplit;
    }
    return CT_OnOff::default_instance();
}

bool CT_TrPr::ChildGroup_1::has_trHeight() const
{
    return m_has_trHeight;
}

CT_Height* CT_TrPr::ChildGroup_1::mutable_trHeight()
{

    m_has_cnfStyle = false;

    if (m_cnfStyle)
    {
        delete m_cnfStyle;
        m_cnfStyle = NULL;
    }
    ;

    m_has_divId = false;

    if (m_divId)
    {
        delete m_divId;
        m_divId = NULL;
    }
    ;

    m_has_gridBefore = false;

    if (m_gridBefore)
    {
        delete m_gridBefore;
        m_gridBefore = NULL;
    }
    ;

    m_has_gridAfter = false;

    if (m_gridAfter)
    {
        delete m_gridAfter;
        m_gridAfter = NULL;
    }
    ;

    m_has_wBefore = false;

    if (m_wBefore)
    {
        delete m_wBefore;
        m_wBefore = NULL;
    }
    ;

    m_has_wAfter = false;

    if (m_wAfter)
    {
        delete m_wAfter;
        m_wAfter = NULL;
    }
    ;

    m_has_cantSplit = false;

    if (m_cantSplit)
    {
        delete m_cantSplit;
        m_cantSplit = NULL;
    }
    ;

    m_has_tblHeader = false;

    if (m_tblHeader)
    {
        delete m_tblHeader;
        m_tblHeader = NULL;
    }
    ;

    m_has_tblCellSpacing = false;

    if (m_tblCellSpacing)
    {
        delete m_tblCellSpacing;
        m_tblCellSpacing = NULL;
    }
    ;

    m_has_jc = false;

    if (m_jc)
    {
        delete m_jc;
        m_jc = NULL;
    }
    ;

    m_has_hidden = false;

    if (m_hidden)
    {
        delete m_hidden;
        m_hidden = NULL;
    }
    ;

    m_has_trHeight = true;
    if (!m_trHeight)
    {
        m_trHeight = new CT_Height();
    }
    return m_trHeight;
}

const CT_Height& CT_TrPr::ChildGroup_1::get_trHeight() const
{
    if (m_trHeight)
    {
        return *m_trHeight;
    }
    return CT_Height::default_instance();
}

bool CT_TrPr::ChildGroup_1::has_tblHeader() const
{
    return m_has_tblHeader;
}

CT_OnOff* CT_TrPr::ChildGroup_1::mutable_tblHeader()
{

    m_has_cnfStyle = false;

    if (m_cnfStyle)
    {
        delete m_cnfStyle;
        m_cnfStyle = NULL;
    }
    ;

    m_has_divId = false;

    if (m_divId)
    {
        delete m_divId;
        m_divId = NULL;
    }
    ;

    m_has_gridBefore = false;

    if (m_gridBefore)
    {
        delete m_gridBefore;
        m_gridBefore = NULL;
    }
    ;

    m_has_gridAfter = false;

    if (m_gridAfter)
    {
        delete m_gridAfter;
        m_gridAfter = NULL;
    }
    ;

    m_has_wBefore = false;

    if (m_wBefore)
    {
        delete m_wBefore;
        m_wBefore = NULL;
    }
    ;

    m_has_wAfter = false;

    if (m_wAfter)
    {
        delete m_wAfter;
        m_wAfter = NULL;
    }
    ;

    m_has_cantSplit = false;

    if (m_cantSplit)
    {
        delete m_cantSplit;
        m_cantSplit = NULL;
    }
    ;

    m_has_trHeight = false;

    if (m_trHeight)
    {
        delete m_trHeight;
        m_trHeight = NULL;
    }
    ;

    m_has_tblCellSpacing = false;

    if (m_tblCellSpacing)
    {
        delete m_tblCellSpacing;
        m_tblCellSpacing = NULL;
    }
    ;

    m_has_jc = false;

    if (m_jc)
    {
        delete m_jc;
        m_jc = NULL;
    }
    ;

    m_has_hidden = false;

    if (m_hidden)
    {
        delete m_hidden;
        m_hidden = NULL;
    }
    ;

    m_has_tblHeader = true;
    if (!m_tblHeader)
    {
        m_tblHeader = new CT_OnOff();
    }
    return m_tblHeader;
}

const CT_OnOff& CT_TrPr::ChildGroup_1::get_tblHeader() const
{
    if (m_tblHeader)
    {
        return *m_tblHeader;
    }
    return CT_OnOff::default_instance();
}

bool CT_TrPr::ChildGroup_1::has_tblCellSpacing() const
{
    return m_has_tblCellSpacing;
}

CT_TblWidth* CT_TrPr::ChildGroup_1::mutable_tblCellSpacing()
{

    m_has_cnfStyle = false;

    if (m_cnfStyle)
    {
        delete m_cnfStyle;
        m_cnfStyle = NULL;
    }
    ;

    m_has_divId = false;

    if (m_divId)
    {
        delete m_divId;
        m_divId = NULL;
    }
    ;

    m_has_gridBefore = false;

    if (m_gridBefore)
    {
        delete m_gridBefore;
        m_gridBefore = NULL;
    }
    ;

    m_has_gridAfter = false;

    if (m_gridAfter)
    {
        delete m_gridAfter;
        m_gridAfter = NULL;
    }
    ;

    m_has_wBefore = false;

    if (m_wBefore)
    {
        delete m_wBefore;
        m_wBefore = NULL;
    }
    ;

    m_has_wAfter = false;

    if (m_wAfter)
    {
        delete m_wAfter;
        m_wAfter = NULL;
    }
    ;

    m_has_cantSplit = false;

    if (m_cantSplit)
    {
        delete m_cantSplit;
        m_cantSplit = NULL;
    }
    ;

    m_has_trHeight = false;

    if (m_trHeight)
    {
        delete m_trHeight;
        m_trHeight = NULL;
    }
    ;

    m_has_tblHeader = false;

    if (m_tblHeader)
    {
        delete m_tblHeader;
        m_tblHeader = NULL;
    }
    ;

    m_has_jc = false;

    if (m_jc)
    {
        delete m_jc;
        m_jc = NULL;
    }
    ;

    m_has_hidden = false;

    if (m_hidden)
    {
        delete m_hidden;
        m_hidden = NULL;
    }
    ;

    m_has_tblCellSpacing = true;
    if (!m_tblCellSpacing)
    {
        m_tblCellSpacing = new CT_TblWidth();
    }
    return m_tblCellSpacing;
}

const CT_TblWidth& CT_TrPr::ChildGroup_1::get_tblCellSpacing() const
{
    if (m_tblCellSpacing)
    {
        return *m_tblCellSpacing;
    }
    return CT_TblWidth::default_instance();
}

bool CT_TrPr::ChildGroup_1::has_jc() const
{
    return m_has_jc;
}

CT_JcTable* CT_TrPr::ChildGroup_1::mutable_jc()
{

    m_has_cnfStyle = false;

    if (m_cnfStyle)
    {
        delete m_cnfStyle;
        m_cnfStyle = NULL;
    }
    ;

    m_has_divId = false;

    if (m_divId)
    {
        delete m_divId;
        m_divId = NULL;
    }
    ;

    m_has_gridBefore = false;

    if (m_gridBefore)
    {
        delete m_gridBefore;
        m_gridBefore = NULL;
    }
    ;

    m_has_gridAfter = false;

    if (m_gridAfter)
    {
        delete m_gridAfter;
        m_gridAfter = NULL;
    }
    ;

    m_has_wBefore = false;

    if (m_wBefore)
    {
        delete m_wBefore;
        m_wBefore = NULL;
    }
    ;

    m_has_wAfter = false;

    if (m_wAfter)
    {
        delete m_wAfter;
        m_wAfter = NULL;
    }
    ;

    m_has_cantSplit = false;

    if (m_cantSplit)
    {
        delete m_cantSplit;
        m_cantSplit = NULL;
    }
    ;

    m_has_trHeight = false;

    if (m_trHeight)
    {
        delete m_trHeight;
        m_trHeight = NULL;
    }
    ;

    m_has_tblHeader = false;

    if (m_tblHeader)
    {
        delete m_tblHeader;
        m_tblHeader = NULL;
    }
    ;

    m_has_tblCellSpacing = false;

    if (m_tblCellSpacing)
    {
        delete m_tblCellSpacing;
        m_tblCellSpacing = NULL;
    }
    ;

    m_has_hidden = false;

    if (m_hidden)
    {
        delete m_hidden;
        m_hidden = NULL;
    }
    ;

    m_has_jc = true;
    if (!m_jc)
    {
        m_jc = new CT_JcTable();
    }
    return m_jc;
}

const CT_JcTable& CT_TrPr::ChildGroup_1::get_jc() const
{
    if (m_jc)
    {
        return *m_jc;
    }
    return CT_JcTable::default_instance();
}

bool CT_TrPr::ChildGroup_1::has_hidden() const
{
    return m_has_hidden;
}

CT_OnOff* CT_TrPr::ChildGroup_1::mutable_hidden()
{

    m_has_cnfStyle = false;

    if (m_cnfStyle)
    {
        delete m_cnfStyle;
        m_cnfStyle = NULL;
    }
    ;

    m_has_divId = false;

    if (m_divId)
    {
        delete m_divId;
        m_divId = NULL;
    }
    ;

    m_has_gridBefore = false;

    if (m_gridBefore)
    {
        delete m_gridBefore;
        m_gridBefore = NULL;
    }
    ;

    m_has_gridAfter = false;

    if (m_gridAfter)
    {
        delete m_gridAfter;
        m_gridAfter = NULL;
    }
    ;

    m_has_wBefore = false;

    if (m_wBefore)
    {
        delete m_wBefore;
        m_wBefore = NULL;
    }
    ;

    m_has_wAfter = false;

    if (m_wAfter)
    {
        delete m_wAfter;
        m_wAfter = NULL;
    }
    ;

    m_has_cantSplit = false;

    if (m_cantSplit)
    {
        delete m_cantSplit;
        m_cantSplit = NULL;
    }
    ;

    m_has_trHeight = false;

    if (m_trHeight)
    {
        delete m_trHeight;
        m_trHeight = NULL;
    }
    ;

    m_has_tblHeader = false;

    if (m_tblHeader)
    {
        delete m_tblHeader;
        m_tblHeader = NULL;
    }
    ;

    m_has_tblCellSpacing = false;

    if (m_tblCellSpacing)
    {
        delete m_tblCellSpacing;
        m_tblCellSpacing = NULL;
    }
    ;

    m_has_jc = false;

    if (m_jc)
    {
        delete m_jc;
        m_jc = NULL;
    }
    ;

    m_has_hidden = true;
    if (!m_hidden)
    {
        m_hidden = new CT_OnOff();
    }
    return m_hidden;
}

const CT_OnOff& CT_TrPr::ChildGroup_1::get_hidden() const
{
    if (m_hidden)
    {
        return *m_hidden;
    }
    return CT_OnOff::default_instance();
}

CT_TrPr* CT_TrPr::default_instance_ = NULL;

// CT_Row
CT_Row::CT_Row()
    :m_has_tblPrEx(false),
     m_tblPrEx(NULL),
     m_has_trPr(false),
     m_trPr(NULL),
     m_has_rsidRPr_attr(false),
     m_rsidRPr_attr(NULL),
     m_has_rsidR_attr(false),
     m_rsidR_attr(NULL),
     m_has_rsidDel_attr(false),
     m_rsidDel_attr(NULL),
     m_has_rsidTr_attr(false),
     m_rsidTr_attr(NULL)
{
}
CT_Row::~CT_Row()
{
    clear();
}
bool CT_Row::has_tblPrEx() const
{
    return m_has_tblPrEx;
}

CT_TblPrEx* CT_Row::mutable_tblPrEx()
{
    m_has_tblPrEx = true;
    if (!m_tblPrEx)
    {
        m_tblPrEx = new CT_TblPrEx();
    }
    return m_tblPrEx;
}

const CT_TblPrEx& CT_Row::get_tblPrEx() const
{
    if (m_tblPrEx)
    {
        return *m_tblPrEx;
    }
    return CT_TblPrEx::default_instance();
}

bool CT_Row::has_trPr() const
{
    return m_has_trPr;
}

CT_TrPr* CT_Row::mutable_trPr()
{
    m_has_trPr = true;
    if (!m_trPr)
    {
        m_trPr = new CT_TrPr();
    }
    return m_trPr;
}

const CT_TrPr& CT_Row::get_trPr() const
{
    if (m_trPr)
    {
        return *m_trPr;
    }
    return CT_TrPr::default_instance();
}

CT_Tc* CT_Row::add_tc()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Tc* pNewChild = pChildGroup->mutable_tc();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_CustomXmlCell* CT_Row::add_customXml()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_CustomXmlCell* pNewChild = pChildGroup->mutable_customXml();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_SdtCell* CT_Row::add_sdt()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_SdtCell* pNewChild = pChildGroup->mutable_sdt();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_ProofErr* CT_Row::add_proofErr()
{
    ChildGroup_2 *pChildGroup = new ChildGroup_2();
    CT_ProofErr* pNewChild = pChildGroup->mutable_proofErr();
    m_childGroupList_2.push_back(pChildGroup);
    return pNewChild;
}

CT_PermStart* CT_Row::add_permStart()
{
    ChildGroup_2 *pChildGroup = new ChildGroup_2();
    CT_PermStart* pNewChild = pChildGroup->mutable_permStart();
    m_childGroupList_2.push_back(pChildGroup);
    return pNewChild;
}

CT_Perm* CT_Row::add_permEnd()
{
    ChildGroup_2 *pChildGroup = new ChildGroup_2();
    CT_Perm* pNewChild = pChildGroup->mutable_permEnd();
    m_childGroupList_2.push_back(pChildGroup);
    return pNewChild;
}

CT_Bookmark* CT_Row::add_bookmarkStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_Bookmark* pNewChild = pChildGroup->mutable_bookmarkStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MarkupRange* CT_Row::add_bookmarkEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MarkupRange* pNewChild = pChildGroup->mutable_bookmarkEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MoveBookmark* CT_Row::add_moveFromRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MoveBookmark* pNewChild = pChildGroup->mutable_moveFromRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MarkupRange* CT_Row::add_moveFromRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MarkupRange* pNewChild = pChildGroup->mutable_moveFromRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MoveBookmark* CT_Row::add_moveToRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MoveBookmark* pNewChild = pChildGroup->mutable_moveToRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MarkupRange* CT_Row::add_moveToRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MarkupRange* pNewChild = pChildGroup->mutable_moveToRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MarkupRange* CT_Row::add_commentRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MarkupRange* pNewChild = pChildGroup->mutable_commentRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MarkupRange* CT_Row::add_commentRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MarkupRange* pNewChild = pChildGroup->mutable_commentRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_TrackChange* CT_Row::add_customXmlInsRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_TrackChange* pNewChild = pChildGroup->mutable_customXmlInsRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_Markup* CT_Row::add_customXmlInsRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_Markup* pNewChild = pChildGroup->mutable_customXmlInsRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_TrackChange* CT_Row::add_customXmlDelRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_TrackChange* pNewChild = pChildGroup->mutable_customXmlDelRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_Markup* CT_Row::add_customXmlDelRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_Markup* pNewChild = pChildGroup->mutable_customXmlDelRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_TrackChange* CT_Row::add_customXmlMoveFromRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_TrackChange* pNewChild = pChildGroup->mutable_customXmlMoveFromRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_Markup* CT_Row::add_customXmlMoveFromRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_Markup* pNewChild = pChildGroup->mutable_customXmlMoveFromRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_TrackChange* CT_Row::add_customXmlMoveToRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_TrackChange* pNewChild = pChildGroup->mutable_customXmlMoveToRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_Markup* CT_Row::add_customXmlMoveToRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_Markup* pNewChild = pChildGroup->mutable_customXmlMoveToRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_RunTrackChange* CT_Row::add_ins()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_RunTrackChange* pNewChild = pChildGroup->mutable_ins();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_RunTrackChange* CT_Row::add_del()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_RunTrackChange* pNewChild = pChildGroup->mutable_del();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_RunTrackChange* CT_Row::add_moveFrom()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_RunTrackChange* pNewChild = pChildGroup->mutable_moveFrom();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_RunTrackChange* CT_Row::add_moveTo()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_RunTrackChange* pNewChild = pChildGroup->mutable_moveTo();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

ns_m::CT_OMathPara* CT_Row::add_m_oMathPara()
{
    ChildGroup_4 *pChildGroup = new ChildGroup_4();
    ns_m::CT_OMathPara* pNewChild = pChildGroup->mutable_m_oMathPara();
    m_childGroupList_4.push_back(pChildGroup);
    return pNewChild;
}

ns_m::CT_OMath* CT_Row::add_m_oMath()
{
    ChildGroup_4 *pChildGroup = new ChildGroup_4();
    ns_m::CT_OMath* pNewChild = pChildGroup->mutable_m_oMath();
    m_childGroupList_4.push_back(pChildGroup);
    return pNewChild;
}

void CT_Row::clear()
{
    m_has_rsidRPr_attr = false;

    if (m_rsidRPr_attr)
    {
        delete m_rsidRPr_attr;
        m_rsidRPr_attr = NULL;
    }


    m_has_rsidR_attr = false;

    if (m_rsidR_attr)
    {
        delete m_rsidR_attr;
        m_rsidR_attr = NULL;
    }


    m_has_rsidDel_attr = false;

    if (m_rsidDel_attr)
    {
        delete m_rsidDel_attr;
        m_rsidDel_attr = NULL;
    }


    m_has_rsidTr_attr = false;

    if (m_rsidTr_attr)
    {
        delete m_rsidTr_attr;
        m_rsidTr_attr = NULL;
    }


    m_has_tblPrEx = false;

    if (m_tblPrEx)
    {
        delete m_tblPrEx;
        m_tblPrEx = NULL;
    }


    m_has_trPr = false;

    if (m_trPr)
    {
        delete m_trPr;
        m_trPr = NULL;
    }


    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }

    {
        vector<ChildGroup_2*>::iterator iter;
        for (iter = m_childGroupList_2.begin(); iter != m_childGroupList_2.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_2.clear();
    }

    {
        vector<ChildGroup_3*>::iterator iter;
        for (iter = m_childGroupList_3.begin(); iter != m_childGroupList_3.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_3.clear();
    }

    {
        vector<ChildGroup_4*>::iterator iter;
        for (iter = m_childGroupList_4.begin(); iter != m_childGroupList_4.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_4.clear();
    }
}

void CT_Row::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_rsidRPr_attr)
    {
        m_rsidRPr_attr->toXmlAttr("w:rsidRPr", _outStream);
    }



    if (m_has_rsidR_attr)
    {
        m_rsidR_attr->toXmlAttr("w:rsidR", _outStream);
    }



    if (m_has_rsidDel_attr)
    {
        m_rsidDel_attr->toXmlAttr("w:rsidDel", _outStream);
    }



    if (m_has_rsidTr_attr)
    {
        m_rsidTr_attr->toXmlAttr("w:rsidTr", _outStream);
    }

    _outStream << ">";


    if (m_has_tblPrEx)
    {
        m_tblPrEx->toXmlElem("w:tblPrEx", "", _outStream);
    }


    if (m_has_trPr)
    {
        m_trPr->toXmlElem("w:trPr", "", _outStream);
    }

    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_tc())
            {
                (*iter)->get_tc().toXmlElem("w:tc", "", _outStream);
            }


            else if ((*iter)->has_customXml())
            {
                (*iter)->get_customXml().toXmlElem("w:customXml", "", _outStream);
            }


            else if ((*iter)->has_sdt())
            {
                (*iter)->get_sdt().toXmlElem("w:sdt", "", _outStream);
            }


        }
    }

    {
        vector<ChildGroup_2*>::const_iterator iter;
        for (iter = m_childGroupList_2.begin(); iter != m_childGroupList_2.end(); ++iter)
        {
            if ((*iter)->has_proofErr())
            {
                (*iter)->get_proofErr().toXmlElem("w:proofErr", "", _outStream);
            }


            else if ((*iter)->has_permStart())
            {
                (*iter)->get_permStart().toXmlElem("w:permStart", "", _outStream);
            }


            else if ((*iter)->has_permEnd())
            {
                (*iter)->get_permEnd().toXmlElem("w:permEnd", "", _outStream);
            }


        }
    }

    {
        vector<ChildGroup_3*>::const_iterator iter;
        for (iter = m_childGroupList_3.begin(); iter != m_childGroupList_3.end(); ++iter)
        {
            if ((*iter)->has_bookmarkStart())
            {
                (*iter)->get_bookmarkStart().toXmlElem("w:bookmarkStart", "", _outStream);
            }


            else if ((*iter)->has_bookmarkEnd())
            {
                (*iter)->get_bookmarkEnd().toXmlElem("w:bookmarkEnd", "", _outStream);
            }


            else if ((*iter)->has_moveFromRangeStart())
            {
                (*iter)->get_moveFromRangeStart().toXmlElem("w:moveFromRangeStart", "", _outStream);
            }


            else if ((*iter)->has_moveFromRangeEnd())
            {
                (*iter)->get_moveFromRangeEnd().toXmlElem("w:moveFromRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_moveToRangeStart())
            {
                (*iter)->get_moveToRangeStart().toXmlElem("w:moveToRangeStart", "", _outStream);
            }


            else if ((*iter)->has_moveToRangeEnd())
            {
                (*iter)->get_moveToRangeEnd().toXmlElem("w:moveToRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_commentRangeStart())
            {
                (*iter)->get_commentRangeStart().toXmlElem("w:commentRangeStart", "", _outStream);
            }


            else if ((*iter)->has_commentRangeEnd())
            {
                (*iter)->get_commentRangeEnd().toXmlElem("w:commentRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_customXmlInsRangeStart())
            {
                (*iter)->get_customXmlInsRangeStart().toXmlElem("w:customXmlInsRangeStart", "", _outStream);
            }


            else if ((*iter)->has_customXmlInsRangeEnd())
            {
                (*iter)->get_customXmlInsRangeEnd().toXmlElem("w:customXmlInsRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_customXmlDelRangeStart())
            {
                (*iter)->get_customXmlDelRangeStart().toXmlElem("w:customXmlDelRangeStart", "", _outStream);
            }


            else if ((*iter)->has_customXmlDelRangeEnd())
            {
                (*iter)->get_customXmlDelRangeEnd().toXmlElem("w:customXmlDelRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_customXmlMoveFromRangeStart())
            {
                (*iter)->get_customXmlMoveFromRangeStart().toXmlElem("w:customXmlMoveFromRangeStart", "", _outStream);
            }


            else if ((*iter)->has_customXmlMoveFromRangeEnd())
            {
                (*iter)->get_customXmlMoveFromRangeEnd().toXmlElem("w:customXmlMoveFromRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_customXmlMoveToRangeStart())
            {
                (*iter)->get_customXmlMoveToRangeStart().toXmlElem("w:customXmlMoveToRangeStart", "", _outStream);
            }


            else if ((*iter)->has_customXmlMoveToRangeEnd())
            {
                (*iter)->get_customXmlMoveToRangeEnd().toXmlElem("w:customXmlMoveToRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_ins())
            {
                (*iter)->get_ins().toXmlElem("w:ins", "", _outStream);
            }


            else if ((*iter)->has_del())
            {
                (*iter)->get_del().toXmlElem("w:del", "", _outStream);
            }


            else if ((*iter)->has_moveFrom())
            {
                (*iter)->get_moveFrom().toXmlElem("w:moveFrom", "", _outStream);
            }


            else if ((*iter)->has_moveTo())
            {
                (*iter)->get_moveTo().toXmlElem("w:moveTo", "", _outStream);
            }


        }
    }

    {
        vector<ChildGroup_4*>::const_iterator iter;
        for (iter = m_childGroupList_4.begin(); iter != m_childGroupList_4.end(); ++iter)
        {
            if ((*iter)->has_m_oMathPara())
            {
                (*iter)->get_m_oMathPara().toXmlElem("m:oMathPara", "", _outStream);
            }


            else if ((*iter)->has_m_oMath())
            {
                (*iter)->get_m_oMath().toXmlElem("m:oMath", "", _outStream);
            }


        }
    }

    _outStream << "</" << _elemName << ">";
}

const CT_Row& CT_Row::default_instance()
{
    if (!CT_Row::default_instance_)
    {
        CT_Row::default_instance_ = new CT_Row();
    }
    return *CT_Row::default_instance_;
}

bool CT_Row::has_rsidRPr_attr() const
{
    return m_has_rsidRPr_attr;
}

void CT_Row::set_rsidRPr_attr(const ST_LongHexNumber& _rsidRPr_attr)
{
    m_has_rsidRPr_attr = true;
    m_rsidRPr_attr = new ST_LongHexNumber(_rsidRPr_attr);
}

const ST_LongHexNumber& CT_Row::get_rsidRPr_attr() const
{
    if (m_rsidRPr_attr)
    {
        return *m_rsidRPr_attr;
    }
    return ST_LongHexNumber::default_instance();
}

bool CT_Row::has_rsidR_attr() const
{
    return m_has_rsidR_attr;
}

void CT_Row::set_rsidR_attr(const ST_LongHexNumber& _rsidR_attr)
{
    m_has_rsidR_attr = true;
    m_rsidR_attr = new ST_LongHexNumber(_rsidR_attr);
}

const ST_LongHexNumber& CT_Row::get_rsidR_attr() const
{
    if (m_rsidR_attr)
    {
        return *m_rsidR_attr;
    }
    return ST_LongHexNumber::default_instance();
}

bool CT_Row::has_rsidDel_attr() const
{
    return m_has_rsidDel_attr;
}

void CT_Row::set_rsidDel_attr(const ST_LongHexNumber& _rsidDel_attr)
{
    m_has_rsidDel_attr = true;
    m_rsidDel_attr = new ST_LongHexNumber(_rsidDel_attr);
}

const ST_LongHexNumber& CT_Row::get_rsidDel_attr() const
{
    if (m_rsidDel_attr)
    {
        return *m_rsidDel_attr;
    }
    return ST_LongHexNumber::default_instance();
}

bool CT_Row::has_rsidTr_attr() const
{
    return m_has_rsidTr_attr;
}

void CT_Row::set_rsidTr_attr(const ST_LongHexNumber& _rsidTr_attr)
{
    m_has_rsidTr_attr = true;
    m_rsidTr_attr = new ST_LongHexNumber(_rsidTr_attr);
}

const ST_LongHexNumber& CT_Row::get_rsidTr_attr() const
{
    if (m_rsidTr_attr)
    {
        return *m_rsidTr_attr;
    }
    return ST_LongHexNumber::default_instance();
}


// CT_Row::ChildGroup_1
CT_Row::ChildGroup_1::ChildGroup_1()
    :m_has_tc(false),
     m_tc(NULL),
     m_has_customXml(false),
     m_customXml(NULL),
     m_has_sdt(false),
     m_sdt(NULL)
{
}
bool CT_Row::ChildGroup_1::has_tc() const
{
    return m_has_tc;
}

CT_Tc* CT_Row::ChildGroup_1::mutable_tc()
{

    m_has_customXml = false;

    if (m_customXml)
    {
        delete m_customXml;
        m_customXml = NULL;
    }
    ;

    m_has_sdt = false;

    if (m_sdt)
    {
        delete m_sdt;
        m_sdt = NULL;
    }
    ;

    m_has_tc = true;
    if (!m_tc)
    {
        m_tc = new CT_Tc();
    }
    return m_tc;
}

const CT_Tc& CT_Row::ChildGroup_1::get_tc() const
{
    if (m_tc)
    {
        return *m_tc;
    }
    return CT_Tc::default_instance();
}

bool CT_Row::ChildGroup_1::has_customXml() const
{
    return m_has_customXml;
}

CT_CustomXmlCell* CT_Row::ChildGroup_1::mutable_customXml()
{

    m_has_tc = false;

    if (m_tc)
    {
        delete m_tc;
        m_tc = NULL;
    }
    ;

    m_has_sdt = false;

    if (m_sdt)
    {
        delete m_sdt;
        m_sdt = NULL;
    }
    ;

    m_has_customXml = true;
    if (!m_customXml)
    {
        m_customXml = new CT_CustomXmlCell();
    }
    return m_customXml;
}

const CT_CustomXmlCell& CT_Row::ChildGroup_1::get_customXml() const
{
    if (m_customXml)
    {
        return *m_customXml;
    }
    return CT_CustomXmlCell::default_instance();
}

bool CT_Row::ChildGroup_1::has_sdt() const
{
    return m_has_sdt;
}

CT_SdtCell* CT_Row::ChildGroup_1::mutable_sdt()
{

    m_has_tc = false;

    if (m_tc)
    {
        delete m_tc;
        m_tc = NULL;
    }
    ;

    m_has_customXml = false;

    if (m_customXml)
    {
        delete m_customXml;
        m_customXml = NULL;
    }
    ;

    m_has_sdt = true;
    if (!m_sdt)
    {
        m_sdt = new CT_SdtCell();
    }
    return m_sdt;
}

const CT_SdtCell& CT_Row::ChildGroup_1::get_sdt() const
{
    if (m_sdt)
    {
        return *m_sdt;
    }
    return CT_SdtCell::default_instance();
}


// CT_Row::ChildGroup_2
CT_Row::ChildGroup_2::ChildGroup_2()
    :m_has_proofErr(false),
     m_proofErr(NULL),
     m_has_permStart(false),
     m_permStart(NULL),
     m_has_permEnd(false),
     m_permEnd(NULL)
{
}
bool CT_Row::ChildGroup_2::has_proofErr() const
{
    return m_has_proofErr;
}

CT_ProofErr* CT_Row::ChildGroup_2::mutable_proofErr()
{

    m_has_permStart = false;

    if (m_permStart)
    {
        delete m_permStart;
        m_permStart = NULL;
    }
    ;

    m_has_permEnd = false;

    if (m_permEnd)
    {
        delete m_permEnd;
        m_permEnd = NULL;
    }
    ;

    m_has_proofErr = true;
    if (!m_proofErr)
    {
        m_proofErr = new CT_ProofErr();
    }
    return m_proofErr;
}

const CT_ProofErr& CT_Row::ChildGroup_2::get_proofErr() const
{
    if (m_proofErr)
    {
        return *m_proofErr;
    }
    return CT_ProofErr::default_instance();
}

bool CT_Row::ChildGroup_2::has_permStart() const
{
    return m_has_permStart;
}

CT_PermStart* CT_Row::ChildGroup_2::mutable_permStart()
{

    m_has_proofErr = false;

    if (m_proofErr)
    {
        delete m_proofErr;
        m_proofErr = NULL;
    }
    ;

    m_has_permEnd = false;

    if (m_permEnd)
    {
        delete m_permEnd;
        m_permEnd = NULL;
    }
    ;

    m_has_permStart = true;
    if (!m_permStart)
    {
        m_permStart = new CT_PermStart();
    }
    return m_permStart;
}

const CT_PermStart& CT_Row::ChildGroup_2::get_permStart() const
{
    if (m_permStart)
    {
        return *m_permStart;
    }
    return CT_PermStart::default_instance();
}

bool CT_Row::ChildGroup_2::has_permEnd() const
{
    return m_has_permEnd;
}

CT_Perm* CT_Row::ChildGroup_2::mutable_permEnd()
{

    m_has_proofErr = false;

    if (m_proofErr)
    {
        delete m_proofErr;
        m_proofErr = NULL;
    }
    ;

    m_has_permStart = false;

    if (m_permStart)
    {
        delete m_permStart;
        m_permStart = NULL;
    }
    ;

    m_has_permEnd = true;
    if (!m_permEnd)
    {
        m_permEnd = new CT_Perm();
    }
    return m_permEnd;
}

const CT_Perm& CT_Row::ChildGroup_2::get_permEnd() const
{
    if (m_permEnd)
    {
        return *m_permEnd;
    }
    return CT_Perm::default_instance();
}


// CT_Row::ChildGroup_3
CT_Row::ChildGroup_3::ChildGroup_3()
    :m_has_bookmarkStart(false),
     m_bookmarkStart(NULL),
     m_has_bookmarkEnd(false),
     m_bookmarkEnd(NULL),
     m_has_moveFromRangeStart(false),
     m_moveFromRangeStart(NULL),
     m_has_moveFromRangeEnd(false),
     m_moveFromRangeEnd(NULL),
     m_has_moveToRangeStart(false),
     m_moveToRangeStart(NULL),
     m_has_moveToRangeEnd(false),
     m_moveToRangeEnd(NULL),
     m_has_commentRangeStart(false),
     m_commentRangeStart(NULL),
     m_has_commentRangeEnd(false),
     m_commentRangeEnd(NULL),
     m_has_customXmlInsRangeStart(false),
     m_customXmlInsRangeStart(NULL),
     m_has_customXmlInsRangeEnd(false),
     m_customXmlInsRangeEnd(NULL),
     m_has_customXmlDelRangeStart(false),
     m_customXmlDelRangeStart(NULL),
     m_has_customXmlDelRangeEnd(false),
     m_customXmlDelRangeEnd(NULL),
     m_has_customXmlMoveFromRangeStart(false),
     m_customXmlMoveFromRangeStart(NULL),
     m_has_customXmlMoveFromRangeEnd(false),
     m_customXmlMoveFromRangeEnd(NULL),
     m_has_customXmlMoveToRangeStart(false),
     m_customXmlMoveToRangeStart(NULL),
     m_has_customXmlMoveToRangeEnd(false),
     m_customXmlMoveToRangeEnd(NULL),
     m_has_ins(false),
     m_ins(NULL),
     m_has_del(false),
     m_del(NULL),
     m_has_moveFrom(false),
     m_moveFrom(NULL),
     m_has_moveTo(false),
     m_moveTo(NULL)
{
}
bool CT_Row::ChildGroup_3::has_bookmarkStart() const
{
    return m_has_bookmarkStart;
}

CT_Bookmark* CT_Row::ChildGroup_3::mutable_bookmarkStart()
{

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_bookmarkStart = true;
    if (!m_bookmarkStart)
    {
        m_bookmarkStart = new CT_Bookmark();
    }
    return m_bookmarkStart;
}

const CT_Bookmark& CT_Row::ChildGroup_3::get_bookmarkStart() const
{
    if (m_bookmarkStart)
    {
        return *m_bookmarkStart;
    }
    return CT_Bookmark::default_instance();
}

bool CT_Row::ChildGroup_3::has_bookmarkEnd() const
{
    return m_has_bookmarkEnd;
}

CT_MarkupRange* CT_Row::ChildGroup_3::mutable_bookmarkEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_bookmarkEnd = true;
    if (!m_bookmarkEnd)
    {
        m_bookmarkEnd = new CT_MarkupRange();
    }
    return m_bookmarkEnd;
}

const CT_MarkupRange& CT_Row::ChildGroup_3::get_bookmarkEnd() const
{
    if (m_bookmarkEnd)
    {
        return *m_bookmarkEnd;
    }
    return CT_MarkupRange::default_instance();
}

bool CT_Row::ChildGroup_3::has_moveFromRangeStart() const
{
    return m_has_moveFromRangeStart;
}

CT_MoveBookmark* CT_Row::ChildGroup_3::mutable_moveFromRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_moveFromRangeStart = true;
    if (!m_moveFromRangeStart)
    {
        m_moveFromRangeStart = new CT_MoveBookmark();
    }
    return m_moveFromRangeStart;
}

const CT_MoveBookmark& CT_Row::ChildGroup_3::get_moveFromRangeStart() const
{
    if (m_moveFromRangeStart)
    {
        return *m_moveFromRangeStart;
    }
    return CT_MoveBookmark::default_instance();
}

bool CT_Row::ChildGroup_3::has_moveFromRangeEnd() const
{
    return m_has_moveFromRangeEnd;
}

CT_MarkupRange* CT_Row::ChildGroup_3::mutable_moveFromRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_moveFromRangeEnd = true;
    if (!m_moveFromRangeEnd)
    {
        m_moveFromRangeEnd = new CT_MarkupRange();
    }
    return m_moveFromRangeEnd;
}

const CT_MarkupRange& CT_Row::ChildGroup_3::get_moveFromRangeEnd() const
{
    if (m_moveFromRangeEnd)
    {
        return *m_moveFromRangeEnd;
    }
    return CT_MarkupRange::default_instance();
}

bool CT_Row::ChildGroup_3::has_moveToRangeStart() const
{
    return m_has_moveToRangeStart;
}

CT_MoveBookmark* CT_Row::ChildGroup_3::mutable_moveToRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_moveToRangeStart = true;
    if (!m_moveToRangeStart)
    {
        m_moveToRangeStart = new CT_MoveBookmark();
    }
    return m_moveToRangeStart;
}

const CT_MoveBookmark& CT_Row::ChildGroup_3::get_moveToRangeStart() const
{
    if (m_moveToRangeStart)
    {
        return *m_moveToRangeStart;
    }
    return CT_MoveBookmark::default_instance();
}

bool CT_Row::ChildGroup_3::has_moveToRangeEnd() const
{
    return m_has_moveToRangeEnd;
}

CT_MarkupRange* CT_Row::ChildGroup_3::mutable_moveToRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_moveToRangeEnd = true;
    if (!m_moveToRangeEnd)
    {
        m_moveToRangeEnd = new CT_MarkupRange();
    }
    return m_moveToRangeEnd;
}

const CT_MarkupRange& CT_Row::ChildGroup_3::get_moveToRangeEnd() const
{
    if (m_moveToRangeEnd)
    {
        return *m_moveToRangeEnd;
    }
    return CT_MarkupRange::default_instance();
}

bool CT_Row::ChildGroup_3::has_commentRangeStart() const
{
    return m_has_commentRangeStart;
}

CT_MarkupRange* CT_Row::ChildGroup_3::mutable_commentRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_commentRangeStart = true;
    if (!m_commentRangeStart)
    {
        m_commentRangeStart = new CT_MarkupRange();
    }
    return m_commentRangeStart;
}

const CT_MarkupRange& CT_Row::ChildGroup_3::get_commentRangeStart() const
{
    if (m_commentRangeStart)
    {
        return *m_commentRangeStart;
    }
    return CT_MarkupRange::default_instance();
}

bool CT_Row::ChildGroup_3::has_commentRangeEnd() const
{
    return m_has_commentRangeEnd;
}

CT_MarkupRange* CT_Row::ChildGroup_3::mutable_commentRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_commentRangeEnd = true;
    if (!m_commentRangeEnd)
    {
        m_commentRangeEnd = new CT_MarkupRange();
    }
    return m_commentRangeEnd;
}

const CT_MarkupRange& CT_Row::ChildGroup_3::get_commentRangeEnd() const
{
    if (m_commentRangeEnd)
    {
        return *m_commentRangeEnd;
    }
    return CT_MarkupRange::default_instance();
}

bool CT_Row::ChildGroup_3::has_customXmlInsRangeStart() const
{
    return m_has_customXmlInsRangeStart;
}

CT_TrackChange* CT_Row::ChildGroup_3::mutable_customXmlInsRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = true;
    if (!m_customXmlInsRangeStart)
    {
        m_customXmlInsRangeStart = new CT_TrackChange();
    }
    return m_customXmlInsRangeStart;
}

const CT_TrackChange& CT_Row::ChildGroup_3::get_customXmlInsRangeStart() const
{
    if (m_customXmlInsRangeStart)
    {
        return *m_customXmlInsRangeStart;
    }
    return CT_TrackChange::default_instance();
}

bool CT_Row::ChildGroup_3::has_customXmlInsRangeEnd() const
{
    return m_has_customXmlInsRangeEnd;
}

CT_Markup* CT_Row::ChildGroup_3::mutable_customXmlInsRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = true;
    if (!m_customXmlInsRangeEnd)
    {
        m_customXmlInsRangeEnd = new CT_Markup();
    }
    return m_customXmlInsRangeEnd;
}

const CT_Markup& CT_Row::ChildGroup_3::get_customXmlInsRangeEnd() const
{
    if (m_customXmlInsRangeEnd)
    {
        return *m_customXmlInsRangeEnd;
    }
    return CT_Markup::default_instance();
}

bool CT_Row::ChildGroup_3::has_customXmlDelRangeStart() const
{
    return m_has_customXmlDelRangeStart;
}

CT_TrackChange* CT_Row::ChildGroup_3::mutable_customXmlDelRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = true;
    if (!m_customXmlDelRangeStart)
    {
        m_customXmlDelRangeStart = new CT_TrackChange();
    }
    return m_customXmlDelRangeStart;
}

const CT_TrackChange& CT_Row::ChildGroup_3::get_customXmlDelRangeStart() const
{
    if (m_customXmlDelRangeStart)
    {
        return *m_customXmlDelRangeStart;
    }
    return CT_TrackChange::default_instance();
}

bool CT_Row::ChildGroup_3::has_customXmlDelRangeEnd() const
{
    return m_has_customXmlDelRangeEnd;
}

CT_Markup* CT_Row::ChildGroup_3::mutable_customXmlDelRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = true;
    if (!m_customXmlDelRangeEnd)
    {
        m_customXmlDelRangeEnd = new CT_Markup();
    }
    return m_customXmlDelRangeEnd;
}

const CT_Markup& CT_Row::ChildGroup_3::get_customXmlDelRangeEnd() const
{
    if (m_customXmlDelRangeEnd)
    {
        return *m_customXmlDelRangeEnd;
    }
    return CT_Markup::default_instance();
}

bool CT_Row::ChildGroup_3::has_customXmlMoveFromRangeStart() const
{
    return m_has_customXmlMoveFromRangeStart;
}

CT_TrackChange* CT_Row::ChildGroup_3::mutable_customXmlMoveFromRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = true;
    if (!m_customXmlMoveFromRangeStart)
    {
        m_customXmlMoveFromRangeStart = new CT_TrackChange();
    }
    return m_customXmlMoveFromRangeStart;
}

const CT_TrackChange& CT_Row::ChildGroup_3::get_customXmlMoveFromRangeStart() const
{
    if (m_customXmlMoveFromRangeStart)
    {
        return *m_customXmlMoveFromRangeStart;
    }
    return CT_TrackChange::default_instance();
}

bool CT_Row::ChildGroup_3::has_customXmlMoveFromRangeEnd() const
{
    return m_has_customXmlMoveFromRangeEnd;
}

CT_Markup* CT_Row::ChildGroup_3::mutable_customXmlMoveFromRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = true;
    if (!m_customXmlMoveFromRangeEnd)
    {
        m_customXmlMoveFromRangeEnd = new CT_Markup();
    }
    return m_customXmlMoveFromRangeEnd;
}

const CT_Markup& CT_Row::ChildGroup_3::get_customXmlMoveFromRangeEnd() const
{
    if (m_customXmlMoveFromRangeEnd)
    {
        return *m_customXmlMoveFromRangeEnd;
    }
    return CT_Markup::default_instance();
}

bool CT_Row::ChildGroup_3::has_customXmlMoveToRangeStart() const
{
    return m_has_customXmlMoveToRangeStart;
}

CT_TrackChange* CT_Row::ChildGroup_3::mutable_customXmlMoveToRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = true;
    if (!m_customXmlMoveToRangeStart)
    {
        m_customXmlMoveToRangeStart = new CT_TrackChange();
    }
    return m_customXmlMoveToRangeStart;
}

const CT_TrackChange& CT_Row::ChildGroup_3::get_customXmlMoveToRangeStart() const
{
    if (m_customXmlMoveToRangeStart)
    {
        return *m_customXmlMoveToRangeStart;
    }
    return CT_TrackChange::default_instance();
}

bool CT_Row::ChildGroup_3::has_customXmlMoveToRangeEnd() const
{
    return m_has_customXmlMoveToRangeEnd;
}

CT_Markup* CT_Row::ChildGroup_3::mutable_customXmlMoveToRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = true;
    if (!m_customXmlMoveToRangeEnd)
    {
        m_customXmlMoveToRangeEnd = new CT_Markup();
    }
    return m_customXmlMoveToRangeEnd;
}

const CT_Markup& CT_Row::ChildGroup_3::get_customXmlMoveToRangeEnd() const
{
    if (m_customXmlMoveToRangeEnd)
    {
        return *m_customXmlMoveToRangeEnd;
    }
    return CT_Markup::default_instance();
}

bool CT_Row::ChildGroup_3::has_ins() const
{
    return m_has_ins;
}

CT_RunTrackChange* CT_Row::ChildGroup_3::mutable_ins()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_ins = true;
    if (!m_ins)
    {
        m_ins = new CT_RunTrackChange();
    }
    return m_ins;
}

const CT_RunTrackChange& CT_Row::ChildGroup_3::get_ins() const
{
    if (m_ins)
    {
        return *m_ins;
    }
    return CT_RunTrackChange::default_instance();
}

bool CT_Row::ChildGroup_3::has_del() const
{
    return m_has_del;
}

CT_RunTrackChange* CT_Row::ChildGroup_3::mutable_del()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_del = true;
    if (!m_del)
    {
        m_del = new CT_RunTrackChange();
    }
    return m_del;
}

const CT_RunTrackChange& CT_Row::ChildGroup_3::get_del() const
{
    if (m_del)
    {
        return *m_del;
    }
    return CT_RunTrackChange::default_instance();
}

bool CT_Row::ChildGroup_3::has_moveFrom() const
{
    return m_has_moveFrom;
}

CT_RunTrackChange* CT_Row::ChildGroup_3::mutable_moveFrom()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_moveFrom = true;
    if (!m_moveFrom)
    {
        m_moveFrom = new CT_RunTrackChange();
    }
    return m_moveFrom;
}

const CT_RunTrackChange& CT_Row::ChildGroup_3::get_moveFrom() const
{
    if (m_moveFrom)
    {
        return *m_moveFrom;
    }
    return CT_RunTrackChange::default_instance();
}

bool CT_Row::ChildGroup_3::has_moveTo() const
{
    return m_has_moveTo;
}

CT_RunTrackChange* CT_Row::ChildGroup_3::mutable_moveTo()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = true;
    if (!m_moveTo)
    {
        m_moveTo = new CT_RunTrackChange();
    }
    return m_moveTo;
}

const CT_RunTrackChange& CT_Row::ChildGroup_3::get_moveTo() const
{
    if (m_moveTo)
    {
        return *m_moveTo;
    }
    return CT_RunTrackChange::default_instance();
}


// CT_Row::ChildGroup_4
CT_Row::ChildGroup_4::ChildGroup_4()
    :m_has_m_oMathPara(false),
     m_m_oMathPara(NULL),
     m_has_m_oMath(false),
     m_m_oMath(NULL)
{
}
bool CT_Row::ChildGroup_4::has_m_oMathPara() const
{
    return m_has_m_oMathPara;
}

ns_m::CT_OMathPara* CT_Row::ChildGroup_4::mutable_m_oMathPara()
{

    m_has_m_oMath = false;

    if (m_m_oMath)
    {
        delete m_m_oMath;
        m_m_oMath = NULL;
    }
    ;

    m_has_m_oMathPara = true;
    if (!m_m_oMathPara)
    {
        m_m_oMathPara = new ns_m::CT_OMathPara();
    }
    return m_m_oMathPara;
}

const ns_m::CT_OMathPara& CT_Row::ChildGroup_4::get_m_oMathPara() const
{
    if (m_m_oMathPara)
    {
        return *m_m_oMathPara;
    }
    return ns_m::CT_OMathPara::default_instance();
}

bool CT_Row::ChildGroup_4::has_m_oMath() const
{
    return m_has_m_oMath;
}

ns_m::CT_OMath* CT_Row::ChildGroup_4::mutable_m_oMath()
{

    m_has_m_oMathPara = false;

    if (m_m_oMathPara)
    {
        delete m_m_oMathPara;
        m_m_oMathPara = NULL;
    }
    ;

    m_has_m_oMath = true;
    if (!m_m_oMath)
    {
        m_m_oMath = new ns_m::CT_OMath();
    }
    return m_m_oMath;
}

const ns_m::CT_OMath& CT_Row::ChildGroup_4::get_m_oMath() const
{
    if (m_m_oMath)
    {
        return *m_m_oMath;
    }
    return ns_m::CT_OMath::default_instance();
}

CT_Row* CT_Row::default_instance_ = NULL;

// CT_TblLayoutType
CT_TblLayoutType::CT_TblLayoutType()
    :m_has_type_attr(false),
     m_type_attr(NULL)
{
}
CT_TblLayoutType::~CT_TblLayoutType()
{
    clear();
}
void CT_TblLayoutType::clear()
{
    m_has_type_attr = false;

    if (m_type_attr)
    {
        delete m_type_attr;
        m_type_attr = NULL;
    }

}

void CT_TblLayoutType::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_type_attr)
    {
        m_type_attr->toXmlAttr("w:type", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_TblLayoutType& CT_TblLayoutType::default_instance()
{
    if (!CT_TblLayoutType::default_instance_)
    {
        CT_TblLayoutType::default_instance_ = new CT_TblLayoutType();
    }
    return *CT_TblLayoutType::default_instance_;
}

bool CT_TblLayoutType::has_type_attr() const
{
    return m_has_type_attr;
}

void CT_TblLayoutType::set_type_attr(const ST_TblLayoutType& _type_attr)
{
    m_has_type_attr = true;
    m_type_attr = new ST_TblLayoutType(_type_attr);
}

const ST_TblLayoutType& CT_TblLayoutType::get_type_attr() const
{
    if (m_type_attr)
    {
        return *m_type_attr;
    }
    return ST_TblLayoutType::default_instance();
}

CT_TblLayoutType* CT_TblLayoutType::default_instance_ = NULL;

// CT_TblOverlap
CT_TblOverlap::CT_TblOverlap()
    :m_has_val_attr(false),
     m_val_attr(NULL)
{
}
CT_TblOverlap::~CT_TblOverlap()
{
    clear();
}
void CT_TblOverlap::clear()
{
    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }

}

void CT_TblOverlap::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_val_attr);
    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_TblOverlap& CT_TblOverlap::default_instance()
{
    if (!CT_TblOverlap::default_instance_)
    {
        CT_TblOverlap::default_instance_ = new CT_TblOverlap();
    }
    return *CT_TblOverlap::default_instance_;
}

bool CT_TblOverlap::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_TblOverlap::set_val_attr(const ST_TblOverlap& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ST_TblOverlap(_val_attr);
}

const ST_TblOverlap& CT_TblOverlap::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ST_TblOverlap::default_instance();
}

CT_TblOverlap* CT_TblOverlap::default_instance_ = NULL;

// CT_TblPPr
CT_TblPPr::CT_TblPPr()
    :m_has_leftFromText_attr(false),
     m_leftFromText_attr(NULL),
     m_has_rightFromText_attr(false),
     m_rightFromText_attr(NULL),
     m_has_topFromText_attr(false),
     m_topFromText_attr(NULL),
     m_has_bottomFromText_attr(false),
     m_bottomFromText_attr(NULL),
     m_has_vertAnchor_attr(false),
     m_vertAnchor_attr(NULL),
     m_has_horzAnchor_attr(false),
     m_horzAnchor_attr(NULL),
     m_has_tblpXSpec_attr(false),
     m_tblpXSpec_attr(NULL),
     m_has_tblpX_attr(false),
     m_tblpX_attr(NULL),
     m_has_tblpYSpec_attr(false),
     m_tblpYSpec_attr(NULL),
     m_has_tblpY_attr(false),
     m_tblpY_attr(NULL)
{
}
CT_TblPPr::~CT_TblPPr()
{
    clear();
}
void CT_TblPPr::clear()
{
    m_has_leftFromText_attr = false;

    if (m_leftFromText_attr)
    {
        delete m_leftFromText_attr;
        m_leftFromText_attr = NULL;
    }


    m_has_rightFromText_attr = false;

    if (m_rightFromText_attr)
    {
        delete m_rightFromText_attr;
        m_rightFromText_attr = NULL;
    }


    m_has_topFromText_attr = false;

    if (m_topFromText_attr)
    {
        delete m_topFromText_attr;
        m_topFromText_attr = NULL;
    }


    m_has_bottomFromText_attr = false;

    if (m_bottomFromText_attr)
    {
        delete m_bottomFromText_attr;
        m_bottomFromText_attr = NULL;
    }


    m_has_vertAnchor_attr = false;

    if (m_vertAnchor_attr)
    {
        delete m_vertAnchor_attr;
        m_vertAnchor_attr = NULL;
    }


    m_has_horzAnchor_attr = false;

    if (m_horzAnchor_attr)
    {
        delete m_horzAnchor_attr;
        m_horzAnchor_attr = NULL;
    }


    m_has_tblpXSpec_attr = false;

    if (m_tblpXSpec_attr)
    {
        delete m_tblpXSpec_attr;
        m_tblpXSpec_attr = NULL;
    }


    m_has_tblpX_attr = false;

    if (m_tblpX_attr)
    {
        delete m_tblpX_attr;
        m_tblpX_attr = NULL;
    }


    m_has_tblpYSpec_attr = false;

    if (m_tblpYSpec_attr)
    {
        delete m_tblpYSpec_attr;
        m_tblpYSpec_attr = NULL;
    }


    m_has_tblpY_attr = false;

    if (m_tblpY_attr)
    {
        delete m_tblpY_attr;
        m_tblpY_attr = NULL;
    }

}

void CT_TblPPr::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_leftFromText_attr)
    {
        m_leftFromText_attr->toXmlAttr("w:leftFromText", _outStream);
    }



    if (m_has_rightFromText_attr)
    {
        m_rightFromText_attr->toXmlAttr("w:rightFromText", _outStream);
    }



    if (m_has_topFromText_attr)
    {
        m_topFromText_attr->toXmlAttr("w:topFromText", _outStream);
    }



    if (m_has_bottomFromText_attr)
    {
        m_bottomFromText_attr->toXmlAttr("w:bottomFromText", _outStream);
    }



    if (m_has_vertAnchor_attr)
    {
        m_vertAnchor_attr->toXmlAttr("w:vertAnchor", _outStream);
    }



    if (m_has_horzAnchor_attr)
    {
        m_horzAnchor_attr->toXmlAttr("w:horzAnchor", _outStream);
    }



    if (m_has_tblpXSpec_attr)
    {
        m_tblpXSpec_attr->toXmlAttr("w:tblpXSpec", _outStream);
    }



    if (m_has_tblpX_attr)
    {
        m_tblpX_attr->toXmlAttr("w:tblpX", _outStream);
    }



    if (m_has_tblpYSpec_attr)
    {
        m_tblpYSpec_attr->toXmlAttr("w:tblpYSpec", _outStream);
    }



    if (m_has_tblpY_attr)
    {
        m_tblpY_attr->toXmlAttr("w:tblpY", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_TblPPr& CT_TblPPr::default_instance()
{
    if (!CT_TblPPr::default_instance_)
    {
        CT_TblPPr::default_instance_ = new CT_TblPPr();
    }
    return *CT_TblPPr::default_instance_;
}

bool CT_TblPPr::has_leftFromText_attr() const
{
    return m_has_leftFromText_attr;
}

void CT_TblPPr::set_leftFromText_attr(const ns_s::ST_TwipsMeasure& _leftFromText_attr)
{
    m_has_leftFromText_attr = true;
    m_leftFromText_attr = new ns_s::ST_TwipsMeasure(_leftFromText_attr);
}

const ns_s::ST_TwipsMeasure& CT_TblPPr::get_leftFromText_attr() const
{
    if (m_leftFromText_attr)
    {
        return *m_leftFromText_attr;
    }
    return ns_s::ST_TwipsMeasure::default_instance();
}

bool CT_TblPPr::has_rightFromText_attr() const
{
    return m_has_rightFromText_attr;
}

void CT_TblPPr::set_rightFromText_attr(const ns_s::ST_TwipsMeasure& _rightFromText_attr)
{
    m_has_rightFromText_attr = true;
    m_rightFromText_attr = new ns_s::ST_TwipsMeasure(_rightFromText_attr);
}

const ns_s::ST_TwipsMeasure& CT_TblPPr::get_rightFromText_attr() const
{
    if (m_rightFromText_attr)
    {
        return *m_rightFromText_attr;
    }
    return ns_s::ST_TwipsMeasure::default_instance();
}

bool CT_TblPPr::has_topFromText_attr() const
{
    return m_has_topFromText_attr;
}

void CT_TblPPr::set_topFromText_attr(const ns_s::ST_TwipsMeasure& _topFromText_attr)
{
    m_has_topFromText_attr = true;
    m_topFromText_attr = new ns_s::ST_TwipsMeasure(_topFromText_attr);
}

const ns_s::ST_TwipsMeasure& CT_TblPPr::get_topFromText_attr() const
{
    if (m_topFromText_attr)
    {
        return *m_topFromText_attr;
    }
    return ns_s::ST_TwipsMeasure::default_instance();
}

bool CT_TblPPr::has_bottomFromText_attr() const
{
    return m_has_bottomFromText_attr;
}

void CT_TblPPr::set_bottomFromText_attr(const ns_s::ST_TwipsMeasure& _bottomFromText_attr)
{
    m_has_bottomFromText_attr = true;
    m_bottomFromText_attr = new ns_s::ST_TwipsMeasure(_bottomFromText_attr);
}

const ns_s::ST_TwipsMeasure& CT_TblPPr::get_bottomFromText_attr() const
{
    if (m_bottomFromText_attr)
    {
        return *m_bottomFromText_attr;
    }
    return ns_s::ST_TwipsMeasure::default_instance();
}

bool CT_TblPPr::has_vertAnchor_attr() const
{
    return m_has_vertAnchor_attr;
}

void CT_TblPPr::set_vertAnchor_attr(const ST_VAnchor& _vertAnchor_attr)
{
    m_has_vertAnchor_attr = true;
    m_vertAnchor_attr = new ST_VAnchor(_vertAnchor_attr);
}

const ST_VAnchor& CT_TblPPr::get_vertAnchor_attr() const
{
    if (m_vertAnchor_attr)
    {
        return *m_vertAnchor_attr;
    }
    return ST_VAnchor::default_instance();
}

bool CT_TblPPr::has_horzAnchor_attr() const
{
    return m_has_horzAnchor_attr;
}

void CT_TblPPr::set_horzAnchor_attr(const ST_HAnchor& _horzAnchor_attr)
{
    m_has_horzAnchor_attr = true;
    m_horzAnchor_attr = new ST_HAnchor(_horzAnchor_attr);
}

const ST_HAnchor& CT_TblPPr::get_horzAnchor_attr() const
{
    if (m_horzAnchor_attr)
    {
        return *m_horzAnchor_attr;
    }
    return ST_HAnchor::default_instance();
}

bool CT_TblPPr::has_tblpXSpec_attr() const
{
    return m_has_tblpXSpec_attr;
}

void CT_TblPPr::set_tblpXSpec_attr(const ns_s::ST_XAlign& _tblpXSpec_attr)
{
    m_has_tblpXSpec_attr = true;
    m_tblpXSpec_attr = new ns_s::ST_XAlign(_tblpXSpec_attr);
}

const ns_s::ST_XAlign& CT_TblPPr::get_tblpXSpec_attr() const
{
    if (m_tblpXSpec_attr)
    {
        return *m_tblpXSpec_attr;
    }
    return ns_s::ST_XAlign::default_instance();
}

bool CT_TblPPr::has_tblpX_attr() const
{
    return m_has_tblpX_attr;
}

void CT_TblPPr::set_tblpX_attr(const ST_SignedTwipsMeasure& _tblpX_attr)
{
    m_has_tblpX_attr = true;
    m_tblpX_attr = new ST_SignedTwipsMeasure(_tblpX_attr);
}

const ST_SignedTwipsMeasure& CT_TblPPr::get_tblpX_attr() const
{
    if (m_tblpX_attr)
    {
        return *m_tblpX_attr;
    }
    return ST_SignedTwipsMeasure::default_instance();
}

bool CT_TblPPr::has_tblpYSpec_attr() const
{
    return m_has_tblpYSpec_attr;
}

void CT_TblPPr::set_tblpYSpec_attr(const ns_s::ST_YAlign& _tblpYSpec_attr)
{
    m_has_tblpYSpec_attr = true;
    m_tblpYSpec_attr = new ns_s::ST_YAlign(_tblpYSpec_attr);
}

const ns_s::ST_YAlign& CT_TblPPr::get_tblpYSpec_attr() const
{
    if (m_tblpYSpec_attr)
    {
        return *m_tblpYSpec_attr;
    }
    return ns_s::ST_YAlign::default_instance();
}

bool CT_TblPPr::has_tblpY_attr() const
{
    return m_has_tblpY_attr;
}

void CT_TblPPr::set_tblpY_attr(const ST_SignedTwipsMeasure& _tblpY_attr)
{
    m_has_tblpY_attr = true;
    m_tblpY_attr = new ST_SignedTwipsMeasure(_tblpY_attr);
}

const ST_SignedTwipsMeasure& CT_TblPPr::get_tblpY_attr() const
{
    if (m_tblpY_attr)
    {
        return *m_tblpY_attr;
    }
    return ST_SignedTwipsMeasure::default_instance();
}

CT_TblPPr* CT_TblPPr::default_instance_ = NULL;

// CT_TblCellMar
CT_TblCellMar::CT_TblCellMar()
    :m_has_top(false),
     m_top(NULL),
     m_has_start(false),
     m_start(NULL),
     m_has_left(false),
     m_left(NULL),
     m_has_bottom(false),
     m_bottom(NULL),
     m_has_end(false),
     m_end(NULL),
     m_has_right(false),
     m_right(NULL)
{
}
CT_TblCellMar::~CT_TblCellMar()
{
    clear();
}
bool CT_TblCellMar::has_top() const
{
    return m_has_top;
}

CT_TblWidth* CT_TblCellMar::mutable_top()
{
    m_has_top = true;
    if (!m_top)
    {
        m_top = new CT_TblWidth();
    }
    return m_top;
}

const CT_TblWidth& CT_TblCellMar::get_top() const
{
    if (m_top)
    {
        return *m_top;
    }
    return CT_TblWidth::default_instance();
}

bool CT_TblCellMar::has_start() const
{
    return m_has_start;
}

CT_TblWidth* CT_TblCellMar::mutable_start()
{
    m_has_start = true;
    if (!m_start)
    {
        m_start = new CT_TblWidth();
    }
    return m_start;
}

const CT_TblWidth& CT_TblCellMar::get_start() const
{
    if (m_start)
    {
        return *m_start;
    }
    return CT_TblWidth::default_instance();
}

bool CT_TblCellMar::has_left() const
{
    return m_has_left;
}

CT_TblWidth* CT_TblCellMar::mutable_left()
{
    m_has_left = true;
    if (!m_left)
    {
        m_left = new CT_TblWidth();
    }
    return m_left;
}

const CT_TblWidth& CT_TblCellMar::get_left() const
{
    if (m_left)
    {
        return *m_left;
    }
    return CT_TblWidth::default_instance();
}

bool CT_TblCellMar::has_bottom() const
{
    return m_has_bottom;
}

CT_TblWidth* CT_TblCellMar::mutable_bottom()
{
    m_has_bottom = true;
    if (!m_bottom)
    {
        m_bottom = new CT_TblWidth();
    }
    return m_bottom;
}

const CT_TblWidth& CT_TblCellMar::get_bottom() const
{
    if (m_bottom)
    {
        return *m_bottom;
    }
    return CT_TblWidth::default_instance();
}

bool CT_TblCellMar::has_end() const
{
    return m_has_end;
}

CT_TblWidth* CT_TblCellMar::mutable_end()
{
    m_has_end = true;
    if (!m_end)
    {
        m_end = new CT_TblWidth();
    }
    return m_end;
}

const CT_TblWidth& CT_TblCellMar::get_end() const
{
    if (m_end)
    {
        return *m_end;
    }
    return CT_TblWidth::default_instance();
}

bool CT_TblCellMar::has_right() const
{
    return m_has_right;
}

CT_TblWidth* CT_TblCellMar::mutable_right()
{
    m_has_right = true;
    if (!m_right)
    {
        m_right = new CT_TblWidth();
    }
    return m_right;
}

const CT_TblWidth& CT_TblCellMar::get_right() const
{
    if (m_right)
    {
        return *m_right;
    }
    return CT_TblWidth::default_instance();
}

void CT_TblCellMar::clear()
{
    m_has_top = false;

    if (m_top)
    {
        delete m_top;
        m_top = NULL;
    }


    m_has_start = false;

    if (m_start)
    {
        delete m_start;
        m_start = NULL;
    }


    m_has_left = false;

    if (m_left)
    {
        delete m_left;
        m_left = NULL;
    }


    m_has_bottom = false;

    if (m_bottom)
    {
        delete m_bottom;
        m_bottom = NULL;
    }


    m_has_end = false;

    if (m_end)
    {
        delete m_end;
        m_end = NULL;
    }


    m_has_right = false;

    if (m_right)
    {
        delete m_right;
        m_right = NULL;
    }

}

void CT_TblCellMar::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";


    if (m_has_top)
    {
        m_top->toXmlElem("w:top", "", _outStream);
    }


    if (m_has_start)
    {
        m_start->toXmlElem("w:start", "", _outStream);
    }


    if (m_has_left)
    {
        m_left->toXmlElem("w:left", "", _outStream);
    }


    if (m_has_bottom)
    {
        m_bottom->toXmlElem("w:bottom", "", _outStream);
    }


    if (m_has_end)
    {
        m_end->toXmlElem("w:end", "", _outStream);
    }


    if (m_has_right)
    {
        m_right->toXmlElem("w:right", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_TblCellMar& CT_TblCellMar::default_instance()
{
    if (!CT_TblCellMar::default_instance_)
    {
        CT_TblCellMar::default_instance_ = new CT_TblCellMar();
    }
    return *CT_TblCellMar::default_instance_;
}

CT_TblCellMar* CT_TblCellMar::default_instance_ = NULL;

// CT_TblBorders
CT_TblBorders::CT_TblBorders()
    :m_has_top(false),
     m_top(NULL),
     m_has_start(false),
     m_start(NULL),
     m_has_left(false),
     m_left(NULL),
     m_has_bottom(false),
     m_bottom(NULL),
     m_has_end(false),
     m_end(NULL),
     m_has_right(false),
     m_right(NULL),
     m_has_insideH(false),
     m_insideH(NULL),
     m_has_insideV(false),
     m_insideV(NULL)
{
}
CT_TblBorders::~CT_TblBorders()
{
    clear();
}
bool CT_TblBorders::has_top() const
{
    return m_has_top;
}

CT_Border* CT_TblBorders::mutable_top()
{
    m_has_top = true;
    if (!m_top)
    {
        m_top = new CT_Border();
    }
    return m_top;
}

const CT_Border& CT_TblBorders::get_top() const
{
    if (m_top)
    {
        return *m_top;
    }
    return CT_Border::default_instance();
}

bool CT_TblBorders::has_start() const
{
    return m_has_start;
}

CT_Border* CT_TblBorders::mutable_start()
{
    m_has_start = true;
    if (!m_start)
    {
        m_start = new CT_Border();
    }
    return m_start;
}

const CT_Border& CT_TblBorders::get_start() const
{
    if (m_start)
    {
        return *m_start;
    }
    return CT_Border::default_instance();
}

bool CT_TblBorders::has_left() const
{
    return m_has_left;
}

CT_Border* CT_TblBorders::mutable_left()
{
    m_has_left = true;
    if (!m_left)
    {
        m_left = new CT_Border();
    }
    return m_left;
}

const CT_Border& CT_TblBorders::get_left() const
{
    if (m_left)
    {
        return *m_left;
    }
    return CT_Border::default_instance();
}

bool CT_TblBorders::has_bottom() const
{
    return m_has_bottom;
}

CT_Border* CT_TblBorders::mutable_bottom()
{
    m_has_bottom = true;
    if (!m_bottom)
    {
        m_bottom = new CT_Border();
    }
    return m_bottom;
}

const CT_Border& CT_TblBorders::get_bottom() const
{
    if (m_bottom)
    {
        return *m_bottom;
    }
    return CT_Border::default_instance();
}

bool CT_TblBorders::has_end() const
{
    return m_has_end;
}

CT_Border* CT_TblBorders::mutable_end()
{
    m_has_end = true;
    if (!m_end)
    {
        m_end = new CT_Border();
    }
    return m_end;
}

const CT_Border& CT_TblBorders::get_end() const
{
    if (m_end)
    {
        return *m_end;
    }
    return CT_Border::default_instance();
}

bool CT_TblBorders::has_right() const
{
    return m_has_right;
}

CT_Border* CT_TblBorders::mutable_right()
{
    m_has_right = true;
    if (!m_right)
    {
        m_right = new CT_Border();
    }
    return m_right;
}

const CT_Border& CT_TblBorders::get_right() const
{
    if (m_right)
    {
        return *m_right;
    }
    return CT_Border::default_instance();
}

bool CT_TblBorders::has_insideH() const
{
    return m_has_insideH;
}

CT_Border* CT_TblBorders::mutable_insideH()
{
    m_has_insideH = true;
    if (!m_insideH)
    {
        m_insideH = new CT_Border();
    }
    return m_insideH;
}

const CT_Border& CT_TblBorders::get_insideH() const
{
    if (m_insideH)
    {
        return *m_insideH;
    }
    return CT_Border::default_instance();
}

bool CT_TblBorders::has_insideV() const
{
    return m_has_insideV;
}

CT_Border* CT_TblBorders::mutable_insideV()
{
    m_has_insideV = true;
    if (!m_insideV)
    {
        m_insideV = new CT_Border();
    }
    return m_insideV;
}

const CT_Border& CT_TblBorders::get_insideV() const
{
    if (m_insideV)
    {
        return *m_insideV;
    }
    return CT_Border::default_instance();
}

void CT_TblBorders::clear()
{
    m_has_top = false;

    if (m_top)
    {
        delete m_top;
        m_top = NULL;
    }


    m_has_start = false;

    if (m_start)
    {
        delete m_start;
        m_start = NULL;
    }


    m_has_left = false;

    if (m_left)
    {
        delete m_left;
        m_left = NULL;
    }


    m_has_bottom = false;

    if (m_bottom)
    {
        delete m_bottom;
        m_bottom = NULL;
    }


    m_has_end = false;

    if (m_end)
    {
        delete m_end;
        m_end = NULL;
    }


    m_has_right = false;

    if (m_right)
    {
        delete m_right;
        m_right = NULL;
    }


    m_has_insideH = false;

    if (m_insideH)
    {
        delete m_insideH;
        m_insideH = NULL;
    }


    m_has_insideV = false;

    if (m_insideV)
    {
        delete m_insideV;
        m_insideV = NULL;
    }

}

void CT_TblBorders::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";


    if (m_has_top)
    {
        m_top->toXmlElem("w:top", "", _outStream);
    }


    if (m_has_start)
    {
        m_start->toXmlElem("w:start", "", _outStream);
    }


    if (m_has_left)
    {
        m_left->toXmlElem("w:left", "", _outStream);
    }


    if (m_has_bottom)
    {
        m_bottom->toXmlElem("w:bottom", "", _outStream);
    }


    if (m_has_end)
    {
        m_end->toXmlElem("w:end", "", _outStream);
    }


    if (m_has_right)
    {
        m_right->toXmlElem("w:right", "", _outStream);
    }


    if (m_has_insideH)
    {
        m_insideH->toXmlElem("w:insideH", "", _outStream);
    }


    if (m_has_insideV)
    {
        m_insideV->toXmlElem("w:insideV", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_TblBorders& CT_TblBorders::default_instance()
{
    if (!CT_TblBorders::default_instance_)
    {
        CT_TblBorders::default_instance_ = new CT_TblBorders();
    }
    return *CT_TblBorders::default_instance_;
}

CT_TblBorders* CT_TblBorders::default_instance_ = NULL;

// CT_TblPrBase
CT_TblPrBase::CT_TblPrBase()
    :m_has_tblStyle(false),
     m_tblStyle(NULL),
     m_has_tblpPr(false),
     m_tblpPr(NULL),
     m_has_tblOverlap(false),
     m_tblOverlap(NULL),
     m_has_bidiVisual(false),
     m_bidiVisual(NULL),
     m_has_tblStyleRowBandSize(false),
     m_tblStyleRowBandSize(NULL),
     m_has_tblStyleColBandSize(false),
     m_tblStyleColBandSize(NULL),
     m_has_tblW(false),
     m_tblW(NULL),
     m_has_jc(false),
     m_jc(NULL),
     m_has_tblCellSpacing(false),
     m_tblCellSpacing(NULL),
     m_has_tblInd(false),
     m_tblInd(NULL),
     m_has_tblBorders(false),
     m_tblBorders(NULL),
     m_has_shd(false),
     m_shd(NULL),
     m_has_tblLayout(false),
     m_tblLayout(NULL),
     m_has_tblCellMar(false),
     m_tblCellMar(NULL),
     m_has_tblLook(false),
     m_tblLook(NULL),
     m_has_tblCaption(false),
     m_tblCaption(NULL),
     m_has_tblDescription(false),
     m_tblDescription(NULL)
{
}
CT_TblPrBase::~CT_TblPrBase()
{
    clear();
}
bool CT_TblPrBase::has_tblStyle() const
{
    return m_has_tblStyle;
}

CT_String* CT_TblPrBase::mutable_tblStyle()
{
    m_has_tblStyle = true;
    if (!m_tblStyle)
    {
        m_tblStyle = new CT_String();
    }
    return m_tblStyle;
}

const CT_String& CT_TblPrBase::get_tblStyle() const
{
    if (m_tblStyle)
    {
        return *m_tblStyle;
    }
    return CT_String::default_instance();
}

bool CT_TblPrBase::has_tblpPr() const
{
    return m_has_tblpPr;
}

CT_TblPPr* CT_TblPrBase::mutable_tblpPr()
{
    m_has_tblpPr = true;
    if (!m_tblpPr)
    {
        m_tblpPr = new CT_TblPPr();
    }
    return m_tblpPr;
}

const CT_TblPPr& CT_TblPrBase::get_tblpPr() const
{
    if (m_tblpPr)
    {
        return *m_tblpPr;
    }
    return CT_TblPPr::default_instance();
}

bool CT_TblPrBase::has_tblOverlap() const
{
    return m_has_tblOverlap;
}

CT_TblOverlap* CT_TblPrBase::mutable_tblOverlap()
{
    m_has_tblOverlap = true;
    if (!m_tblOverlap)
    {
        m_tblOverlap = new CT_TblOverlap();
    }
    return m_tblOverlap;
}

const CT_TblOverlap& CT_TblPrBase::get_tblOverlap() const
{
    if (m_tblOverlap)
    {
        return *m_tblOverlap;
    }
    return CT_TblOverlap::default_instance();
}

bool CT_TblPrBase::has_bidiVisual() const
{
    return m_has_bidiVisual;
}

CT_OnOff* CT_TblPrBase::mutable_bidiVisual()
{
    m_has_bidiVisual = true;
    if (!m_bidiVisual)
    {
        m_bidiVisual = new CT_OnOff();
    }
    return m_bidiVisual;
}

const CT_OnOff& CT_TblPrBase::get_bidiVisual() const
{
    if (m_bidiVisual)
    {
        return *m_bidiVisual;
    }
    return CT_OnOff::default_instance();
}

bool CT_TblPrBase::has_tblStyleRowBandSize() const
{
    return m_has_tblStyleRowBandSize;
}

CT_DecimalNumber* CT_TblPrBase::mutable_tblStyleRowBandSize()
{
    m_has_tblStyleRowBandSize = true;
    if (!m_tblStyleRowBandSize)
    {
        m_tblStyleRowBandSize = new CT_DecimalNumber();
    }
    return m_tblStyleRowBandSize;
}

const CT_DecimalNumber& CT_TblPrBase::get_tblStyleRowBandSize() const
{
    if (m_tblStyleRowBandSize)
    {
        return *m_tblStyleRowBandSize;
    }
    return CT_DecimalNumber::default_instance();
}

bool CT_TblPrBase::has_tblStyleColBandSize() const
{
    return m_has_tblStyleColBandSize;
}

CT_DecimalNumber* CT_TblPrBase::mutable_tblStyleColBandSize()
{
    m_has_tblStyleColBandSize = true;
    if (!m_tblStyleColBandSize)
    {
        m_tblStyleColBandSize = new CT_DecimalNumber();
    }
    return m_tblStyleColBandSize;
}

const CT_DecimalNumber& CT_TblPrBase::get_tblStyleColBandSize() const
{
    if (m_tblStyleColBandSize)
    {
        return *m_tblStyleColBandSize;
    }
    return CT_DecimalNumber::default_instance();
}

bool CT_TblPrBase::has_tblW() const
{
    return m_has_tblW;
}

CT_TblWidth* CT_TblPrBase::mutable_tblW()
{
    m_has_tblW = true;
    if (!m_tblW)
    {
        m_tblW = new CT_TblWidth();
    }
    return m_tblW;
}

const CT_TblWidth& CT_TblPrBase::get_tblW() const
{
    if (m_tblW)
    {
        return *m_tblW;
    }
    return CT_TblWidth::default_instance();
}

bool CT_TblPrBase::has_jc() const
{
    return m_has_jc;
}

CT_JcTable* CT_TblPrBase::mutable_jc()
{
    m_has_jc = true;
    if (!m_jc)
    {
        m_jc = new CT_JcTable();
    }
    return m_jc;
}

const CT_JcTable& CT_TblPrBase::get_jc() const
{
    if (m_jc)
    {
        return *m_jc;
    }
    return CT_JcTable::default_instance();
}

bool CT_TblPrBase::has_tblCellSpacing() const
{
    return m_has_tblCellSpacing;
}

CT_TblWidth* CT_TblPrBase::mutable_tblCellSpacing()
{
    m_has_tblCellSpacing = true;
    if (!m_tblCellSpacing)
    {
        m_tblCellSpacing = new CT_TblWidth();
    }
    return m_tblCellSpacing;
}

const CT_TblWidth& CT_TblPrBase::get_tblCellSpacing() const
{
    if (m_tblCellSpacing)
    {
        return *m_tblCellSpacing;
    }
    return CT_TblWidth::default_instance();
}

bool CT_TblPrBase::has_tblInd() const
{
    return m_has_tblInd;
}

CT_TblWidth* CT_TblPrBase::mutable_tblInd()
{
    m_has_tblInd = true;
    if (!m_tblInd)
    {
        m_tblInd = new CT_TblWidth();
    }
    return m_tblInd;
}

const CT_TblWidth& CT_TblPrBase::get_tblInd() const
{
    if (m_tblInd)
    {
        return *m_tblInd;
    }
    return CT_TblWidth::default_instance();
}

bool CT_TblPrBase::has_tblBorders() const
{
    return m_has_tblBorders;
}

CT_TblBorders* CT_TblPrBase::mutable_tblBorders()
{
    m_has_tblBorders = true;
    if (!m_tblBorders)
    {
        m_tblBorders = new CT_TblBorders();
    }
    return m_tblBorders;
}

const CT_TblBorders& CT_TblPrBase::get_tblBorders() const
{
    if (m_tblBorders)
    {
        return *m_tblBorders;
    }
    return CT_TblBorders::default_instance();
}

bool CT_TblPrBase::has_shd() const
{
    return m_has_shd;
}

CT_Shd* CT_TblPrBase::mutable_shd()
{
    m_has_shd = true;
    if (!m_shd)
    {
        m_shd = new CT_Shd();
    }
    return m_shd;
}

const CT_Shd& CT_TblPrBase::get_shd() const
{
    if (m_shd)
    {
        return *m_shd;
    }
    return CT_Shd::default_instance();
}

bool CT_TblPrBase::has_tblLayout() const
{
    return m_has_tblLayout;
}

CT_TblLayoutType* CT_TblPrBase::mutable_tblLayout()
{
    m_has_tblLayout = true;
    if (!m_tblLayout)
    {
        m_tblLayout = new CT_TblLayoutType();
    }
    return m_tblLayout;
}

const CT_TblLayoutType& CT_TblPrBase::get_tblLayout() const
{
    if (m_tblLayout)
    {
        return *m_tblLayout;
    }
    return CT_TblLayoutType::default_instance();
}

bool CT_TblPrBase::has_tblCellMar() const
{
    return m_has_tblCellMar;
}

CT_TblCellMar* CT_TblPrBase::mutable_tblCellMar()
{
    m_has_tblCellMar = true;
    if (!m_tblCellMar)
    {
        m_tblCellMar = new CT_TblCellMar();
    }
    return m_tblCellMar;
}

const CT_TblCellMar& CT_TblPrBase::get_tblCellMar() const
{
    if (m_tblCellMar)
    {
        return *m_tblCellMar;
    }
    return CT_TblCellMar::default_instance();
}

bool CT_TblPrBase::has_tblLook() const
{
    return m_has_tblLook;
}

CT_TblLook* CT_TblPrBase::mutable_tblLook()
{
    m_has_tblLook = true;
    if (!m_tblLook)
    {
        m_tblLook = new CT_TblLook();
    }
    return m_tblLook;
}

const CT_TblLook& CT_TblPrBase::get_tblLook() const
{
    if (m_tblLook)
    {
        return *m_tblLook;
    }
    return CT_TblLook::default_instance();
}

bool CT_TblPrBase::has_tblCaption() const
{
    return m_has_tblCaption;
}

CT_String* CT_TblPrBase::mutable_tblCaption()
{
    m_has_tblCaption = true;
    if (!m_tblCaption)
    {
        m_tblCaption = new CT_String();
    }
    return m_tblCaption;
}

const CT_String& CT_TblPrBase::get_tblCaption() const
{
    if (m_tblCaption)
    {
        return *m_tblCaption;
    }
    return CT_String::default_instance();
}

bool CT_TblPrBase::has_tblDescription() const
{
    return m_has_tblDescription;
}

CT_String* CT_TblPrBase::mutable_tblDescription()
{
    m_has_tblDescription = true;
    if (!m_tblDescription)
    {
        m_tblDescription = new CT_String();
    }
    return m_tblDescription;
}

const CT_String& CT_TblPrBase::get_tblDescription() const
{
    if (m_tblDescription)
    {
        return *m_tblDescription;
    }
    return CT_String::default_instance();
}

void CT_TblPrBase::clear()
{
    m_has_tblStyle = false;

    if (m_tblStyle)
    {
        delete m_tblStyle;
        m_tblStyle = NULL;
    }


    m_has_tblpPr = false;

    if (m_tblpPr)
    {
        delete m_tblpPr;
        m_tblpPr = NULL;
    }


    m_has_tblOverlap = false;

    if (m_tblOverlap)
    {
        delete m_tblOverlap;
        m_tblOverlap = NULL;
    }


    m_has_bidiVisual = false;

    if (m_bidiVisual)
    {
        delete m_bidiVisual;
        m_bidiVisual = NULL;
    }


    m_has_tblStyleRowBandSize = false;

    if (m_tblStyleRowBandSize)
    {
        delete m_tblStyleRowBandSize;
        m_tblStyleRowBandSize = NULL;
    }


    m_has_tblStyleColBandSize = false;

    if (m_tblStyleColBandSize)
    {
        delete m_tblStyleColBandSize;
        m_tblStyleColBandSize = NULL;
    }


    m_has_tblW = false;

    if (m_tblW)
    {
        delete m_tblW;
        m_tblW = NULL;
    }


    m_has_jc = false;

    if (m_jc)
    {
        delete m_jc;
        m_jc = NULL;
    }


    m_has_tblCellSpacing = false;

    if (m_tblCellSpacing)
    {
        delete m_tblCellSpacing;
        m_tblCellSpacing = NULL;
    }


    m_has_tblInd = false;

    if (m_tblInd)
    {
        delete m_tblInd;
        m_tblInd = NULL;
    }


    m_has_tblBorders = false;

    if (m_tblBorders)
    {
        delete m_tblBorders;
        m_tblBorders = NULL;
    }


    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }


    m_has_tblLayout = false;

    if (m_tblLayout)
    {
        delete m_tblLayout;
        m_tblLayout = NULL;
    }


    m_has_tblCellMar = false;

    if (m_tblCellMar)
    {
        delete m_tblCellMar;
        m_tblCellMar = NULL;
    }


    m_has_tblLook = false;

    if (m_tblLook)
    {
        delete m_tblLook;
        m_tblLook = NULL;
    }


    m_has_tblCaption = false;

    if (m_tblCaption)
    {
        delete m_tblCaption;
        m_tblCaption = NULL;
    }


    m_has_tblDescription = false;

    if (m_tblDescription)
    {
        delete m_tblDescription;
        m_tblDescription = NULL;
    }

}

void CT_TblPrBase::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";


    if (m_has_tblStyle)
    {
        m_tblStyle->toXmlElem("w:tblStyle", "", _outStream);
    }


    if (m_has_tblpPr)
    {
        m_tblpPr->toXmlElem("w:tblpPr", "", _outStream);
    }


    if (m_has_tblOverlap)
    {
        m_tblOverlap->toXmlElem("w:tblOverlap", "", _outStream);
    }


    if (m_has_bidiVisual)
    {
        m_bidiVisual->toXmlElem("w:bidiVisual", "", _outStream);
    }


    if (m_has_tblStyleRowBandSize)
    {
        m_tblStyleRowBandSize->toXmlElem("w:tblStyleRowBandSize", "", _outStream);
    }


    if (m_has_tblStyleColBandSize)
    {
        m_tblStyleColBandSize->toXmlElem("w:tblStyleColBandSize", "", _outStream);
    }


    if (m_has_tblW)
    {
        m_tblW->toXmlElem("w:tblW", "", _outStream);
    }


    if (m_has_jc)
    {
        m_jc->toXmlElem("w:jc", "", _outStream);
    }


    if (m_has_tblCellSpacing)
    {
        m_tblCellSpacing->toXmlElem("w:tblCellSpacing", "", _outStream);
    }


    if (m_has_tblInd)
    {
        m_tblInd->toXmlElem("w:tblInd", "", _outStream);
    }


    if (m_has_tblBorders)
    {
        m_tblBorders->toXmlElem("w:tblBorders", "", _outStream);
    }


    if (m_has_shd)
    {
        m_shd->toXmlElem("w:shd", "", _outStream);
    }


    if (m_has_tblLayout)
    {
        m_tblLayout->toXmlElem("w:tblLayout", "", _outStream);
    }


    if (m_has_tblCellMar)
    {
        m_tblCellMar->toXmlElem("w:tblCellMar", "", _outStream);
    }


    if (m_has_tblLook)
    {
        m_tblLook->toXmlElem("w:tblLook", "", _outStream);
    }


    if (m_has_tblCaption)
    {
        m_tblCaption->toXmlElem("w:tblCaption", "", _outStream);
    }


    if (m_has_tblDescription)
    {
        m_tblDescription->toXmlElem("w:tblDescription", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_TblPrBase& CT_TblPrBase::default_instance()
{
    if (!CT_TblPrBase::default_instance_)
    {
        CT_TblPrBase::default_instance_ = new CT_TblPrBase();
    }
    return *CT_TblPrBase::default_instance_;
}

CT_TblPrBase* CT_TblPrBase::default_instance_ = NULL;

// CT_TblPr
CT_TblPr::CT_TblPr()
    :m_has_tblStyle(false),
     m_tblStyle(NULL),
     m_has_tblpPr(false),
     m_tblpPr(NULL),
     m_has_tblOverlap(false),
     m_tblOverlap(NULL),
     m_has_bidiVisual(false),
     m_bidiVisual(NULL),
     m_has_tblStyleRowBandSize(false),
     m_tblStyleRowBandSize(NULL),
     m_has_tblStyleColBandSize(false),
     m_tblStyleColBandSize(NULL),
     m_has_tblW(false),
     m_tblW(NULL),
     m_has_jc(false),
     m_jc(NULL),
     m_has_tblCellSpacing(false),
     m_tblCellSpacing(NULL),
     m_has_tblInd(false),
     m_tblInd(NULL),
     m_has_tblBorders(false),
     m_tblBorders(NULL),
     m_has_shd(false),
     m_shd(NULL),
     m_has_tblLayout(false),
     m_tblLayout(NULL),
     m_has_tblCellMar(false),
     m_tblCellMar(NULL),
     m_has_tblLook(false),
     m_tblLook(NULL),
     m_has_tblCaption(false),
     m_tblCaption(NULL),
     m_has_tblDescription(false),
     m_tblDescription(NULL),
     m_has_tblPrChange(false),
     m_tblPrChange(NULL)
{
}
CT_TblPr::~CT_TblPr()
{
    clear();
}
bool CT_TblPr::has_tblStyle() const
{
    return m_has_tblStyle;
}

CT_String* CT_TblPr::mutable_tblStyle()
{
    m_has_tblStyle = true;
    if (!m_tblStyle)
    {
        m_tblStyle = new CT_String();
    }
    return m_tblStyle;
}

const CT_String& CT_TblPr::get_tblStyle() const
{
    if (m_tblStyle)
    {
        return *m_tblStyle;
    }
    return CT_String::default_instance();
}

bool CT_TblPr::has_tblpPr() const
{
    return m_has_tblpPr;
}

CT_TblPPr* CT_TblPr::mutable_tblpPr()
{
    m_has_tblpPr = true;
    if (!m_tblpPr)
    {
        m_tblpPr = new CT_TblPPr();
    }
    return m_tblpPr;
}

const CT_TblPPr& CT_TblPr::get_tblpPr() const
{
    if (m_tblpPr)
    {
        return *m_tblpPr;
    }
    return CT_TblPPr::default_instance();
}

bool CT_TblPr::has_tblOverlap() const
{
    return m_has_tblOverlap;
}

CT_TblOverlap* CT_TblPr::mutable_tblOverlap()
{
    m_has_tblOverlap = true;
    if (!m_tblOverlap)
    {
        m_tblOverlap = new CT_TblOverlap();
    }
    return m_tblOverlap;
}

const CT_TblOverlap& CT_TblPr::get_tblOverlap() const
{
    if (m_tblOverlap)
    {
        return *m_tblOverlap;
    }
    return CT_TblOverlap::default_instance();
}

bool CT_TblPr::has_bidiVisual() const
{
    return m_has_bidiVisual;
}

CT_OnOff* CT_TblPr::mutable_bidiVisual()
{
    m_has_bidiVisual = true;
    if (!m_bidiVisual)
    {
        m_bidiVisual = new CT_OnOff();
    }
    return m_bidiVisual;
}

const CT_OnOff& CT_TblPr::get_bidiVisual() const
{
    if (m_bidiVisual)
    {
        return *m_bidiVisual;
    }
    return CT_OnOff::default_instance();
}

bool CT_TblPr::has_tblStyleRowBandSize() const
{
    return m_has_tblStyleRowBandSize;
}

CT_DecimalNumber* CT_TblPr::mutable_tblStyleRowBandSize()
{
    m_has_tblStyleRowBandSize = true;
    if (!m_tblStyleRowBandSize)
    {
        m_tblStyleRowBandSize = new CT_DecimalNumber();
    }
    return m_tblStyleRowBandSize;
}

const CT_DecimalNumber& CT_TblPr::get_tblStyleRowBandSize() const
{
    if (m_tblStyleRowBandSize)
    {
        return *m_tblStyleRowBandSize;
    }
    return CT_DecimalNumber::default_instance();
}

bool CT_TblPr::has_tblStyleColBandSize() const
{
    return m_has_tblStyleColBandSize;
}

CT_DecimalNumber* CT_TblPr::mutable_tblStyleColBandSize()
{
    m_has_tblStyleColBandSize = true;
    if (!m_tblStyleColBandSize)
    {
        m_tblStyleColBandSize = new CT_DecimalNumber();
    }
    return m_tblStyleColBandSize;
}

const CT_DecimalNumber& CT_TblPr::get_tblStyleColBandSize() const
{
    if (m_tblStyleColBandSize)
    {
        return *m_tblStyleColBandSize;
    }
    return CT_DecimalNumber::default_instance();
}

bool CT_TblPr::has_tblW() const
{
    return m_has_tblW;
}

CT_TblWidth* CT_TblPr::mutable_tblW()
{
    m_has_tblW = true;
    if (!m_tblW)
    {
        m_tblW = new CT_TblWidth();
    }
    return m_tblW;
}

const CT_TblWidth& CT_TblPr::get_tblW() const
{
    if (m_tblW)
    {
        return *m_tblW;
    }
    return CT_TblWidth::default_instance();
}

bool CT_TblPr::has_jc() const
{
    return m_has_jc;
}

CT_JcTable* CT_TblPr::mutable_jc()
{
    m_has_jc = true;
    if (!m_jc)
    {
        m_jc = new CT_JcTable();
    }
    return m_jc;
}

const CT_JcTable& CT_TblPr::get_jc() const
{
    if (m_jc)
    {
        return *m_jc;
    }
    return CT_JcTable::default_instance();
}

bool CT_TblPr::has_tblCellSpacing() const
{
    return m_has_tblCellSpacing;
}

CT_TblWidth* CT_TblPr::mutable_tblCellSpacing()
{
    m_has_tblCellSpacing = true;
    if (!m_tblCellSpacing)
    {
        m_tblCellSpacing = new CT_TblWidth();
    }
    return m_tblCellSpacing;
}

const CT_TblWidth& CT_TblPr::get_tblCellSpacing() const
{
    if (m_tblCellSpacing)
    {
        return *m_tblCellSpacing;
    }
    return CT_TblWidth::default_instance();
}

bool CT_TblPr::has_tblInd() const
{
    return m_has_tblInd;
}

CT_TblWidth* CT_TblPr::mutable_tblInd()
{
    m_has_tblInd = true;
    if (!m_tblInd)
    {
        m_tblInd = new CT_TblWidth();
    }
    return m_tblInd;
}

const CT_TblWidth& CT_TblPr::get_tblInd() const
{
    if (m_tblInd)
    {
        return *m_tblInd;
    }
    return CT_TblWidth::default_instance();
}

bool CT_TblPr::has_tblBorders() const
{
    return m_has_tblBorders;
}

CT_TblBorders* CT_TblPr::mutable_tblBorders()
{
    m_has_tblBorders = true;
    if (!m_tblBorders)
    {
        m_tblBorders = new CT_TblBorders();
    }
    return m_tblBorders;
}

const CT_TblBorders& CT_TblPr::get_tblBorders() const
{
    if (m_tblBorders)
    {
        return *m_tblBorders;
    }
    return CT_TblBorders::default_instance();
}

bool CT_TblPr::has_shd() const
{
    return m_has_shd;
}

CT_Shd* CT_TblPr::mutable_shd()
{
    m_has_shd = true;
    if (!m_shd)
    {
        m_shd = new CT_Shd();
    }
    return m_shd;
}

const CT_Shd& CT_TblPr::get_shd() const
{
    if (m_shd)
    {
        return *m_shd;
    }
    return CT_Shd::default_instance();
}

bool CT_TblPr::has_tblLayout() const
{
    return m_has_tblLayout;
}

CT_TblLayoutType* CT_TblPr::mutable_tblLayout()
{
    m_has_tblLayout = true;
    if (!m_tblLayout)
    {
        m_tblLayout = new CT_TblLayoutType();
    }
    return m_tblLayout;
}

const CT_TblLayoutType& CT_TblPr::get_tblLayout() const
{
    if (m_tblLayout)
    {
        return *m_tblLayout;
    }
    return CT_TblLayoutType::default_instance();
}

bool CT_TblPr::has_tblCellMar() const
{
    return m_has_tblCellMar;
}

CT_TblCellMar* CT_TblPr::mutable_tblCellMar()
{
    m_has_tblCellMar = true;
    if (!m_tblCellMar)
    {
        m_tblCellMar = new CT_TblCellMar();
    }
    return m_tblCellMar;
}

const CT_TblCellMar& CT_TblPr::get_tblCellMar() const
{
    if (m_tblCellMar)
    {
        return *m_tblCellMar;
    }
    return CT_TblCellMar::default_instance();
}

bool CT_TblPr::has_tblLook() const
{
    return m_has_tblLook;
}

CT_TblLook* CT_TblPr::mutable_tblLook()
{
    m_has_tblLook = true;
    if (!m_tblLook)
    {
        m_tblLook = new CT_TblLook();
    }
    return m_tblLook;
}

const CT_TblLook& CT_TblPr::get_tblLook() const
{
    if (m_tblLook)
    {
        return *m_tblLook;
    }
    return CT_TblLook::default_instance();
}

bool CT_TblPr::has_tblCaption() const
{
    return m_has_tblCaption;
}

CT_String* CT_TblPr::mutable_tblCaption()
{
    m_has_tblCaption = true;
    if (!m_tblCaption)
    {
        m_tblCaption = new CT_String();
    }
    return m_tblCaption;
}

const CT_String& CT_TblPr::get_tblCaption() const
{
    if (m_tblCaption)
    {
        return *m_tblCaption;
    }
    return CT_String::default_instance();
}

bool CT_TblPr::has_tblDescription() const
{
    return m_has_tblDescription;
}

CT_String* CT_TblPr::mutable_tblDescription()
{
    m_has_tblDescription = true;
    if (!m_tblDescription)
    {
        m_tblDescription = new CT_String();
    }
    return m_tblDescription;
}

const CT_String& CT_TblPr::get_tblDescription() const
{
    if (m_tblDescription)
    {
        return *m_tblDescription;
    }
    return CT_String::default_instance();
}

bool CT_TblPr::has_tblPrChange() const
{
    return m_has_tblPrChange;
}

CT_TblPrChange* CT_TblPr::mutable_tblPrChange()
{
    m_has_tblPrChange = true;
    if (!m_tblPrChange)
    {
        m_tblPrChange = new CT_TblPrChange();
    }
    return m_tblPrChange;
}

const CT_TblPrChange& CT_TblPr::get_tblPrChange() const
{
    if (m_tblPrChange)
    {
        return *m_tblPrChange;
    }
    return CT_TblPrChange::default_instance();
}

void CT_TblPr::clear()
{
    m_has_tblStyle = false;

    if (m_tblStyle)
    {
        delete m_tblStyle;
        m_tblStyle = NULL;
    }


    m_has_tblpPr = false;

    if (m_tblpPr)
    {
        delete m_tblpPr;
        m_tblpPr = NULL;
    }


    m_has_tblOverlap = false;

    if (m_tblOverlap)
    {
        delete m_tblOverlap;
        m_tblOverlap = NULL;
    }


    m_has_bidiVisual = false;

    if (m_bidiVisual)
    {
        delete m_bidiVisual;
        m_bidiVisual = NULL;
    }


    m_has_tblStyleRowBandSize = false;

    if (m_tblStyleRowBandSize)
    {
        delete m_tblStyleRowBandSize;
        m_tblStyleRowBandSize = NULL;
    }


    m_has_tblStyleColBandSize = false;

    if (m_tblStyleColBandSize)
    {
        delete m_tblStyleColBandSize;
        m_tblStyleColBandSize = NULL;
    }


    m_has_tblW = false;

    if (m_tblW)
    {
        delete m_tblW;
        m_tblW = NULL;
    }


    m_has_jc = false;

    if (m_jc)
    {
        delete m_jc;
        m_jc = NULL;
    }


    m_has_tblCellSpacing = false;

    if (m_tblCellSpacing)
    {
        delete m_tblCellSpacing;
        m_tblCellSpacing = NULL;
    }


    m_has_tblInd = false;

    if (m_tblInd)
    {
        delete m_tblInd;
        m_tblInd = NULL;
    }


    m_has_tblBorders = false;

    if (m_tblBorders)
    {
        delete m_tblBorders;
        m_tblBorders = NULL;
    }


    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }


    m_has_tblLayout = false;

    if (m_tblLayout)
    {
        delete m_tblLayout;
        m_tblLayout = NULL;
    }


    m_has_tblCellMar = false;

    if (m_tblCellMar)
    {
        delete m_tblCellMar;
        m_tblCellMar = NULL;
    }


    m_has_tblLook = false;

    if (m_tblLook)
    {
        delete m_tblLook;
        m_tblLook = NULL;
    }


    m_has_tblCaption = false;

    if (m_tblCaption)
    {
        delete m_tblCaption;
        m_tblCaption = NULL;
    }


    m_has_tblDescription = false;

    if (m_tblDescription)
    {
        delete m_tblDescription;
        m_tblDescription = NULL;
    }


    m_has_tblPrChange = false;

    if (m_tblPrChange)
    {
        delete m_tblPrChange;
        m_tblPrChange = NULL;
    }

}

void CT_TblPr::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";


    if (m_has_tblStyle)
    {
        m_tblStyle->toXmlElem("w:tblStyle", "", _outStream);
    }


    if (m_has_tblpPr)
    {
        m_tblpPr->toXmlElem("w:tblpPr", "", _outStream);
    }


    if (m_has_tblOverlap)
    {
        m_tblOverlap->toXmlElem("w:tblOverlap", "", _outStream);
    }


    if (m_has_bidiVisual)
    {
        m_bidiVisual->toXmlElem("w:bidiVisual", "", _outStream);
    }


    if (m_has_tblStyleRowBandSize)
    {
        m_tblStyleRowBandSize->toXmlElem("w:tblStyleRowBandSize", "", _outStream);
    }


    if (m_has_tblStyleColBandSize)
    {
        m_tblStyleColBandSize->toXmlElem("w:tblStyleColBandSize", "", _outStream);
    }


    if (m_has_tblW)
    {
        m_tblW->toXmlElem("w:tblW", "", _outStream);
    }


    if (m_has_jc)
    {
        m_jc->toXmlElem("w:jc", "", _outStream);
    }


    if (m_has_tblCellSpacing)
    {
        m_tblCellSpacing->toXmlElem("w:tblCellSpacing", "", _outStream);
    }


    if (m_has_tblInd)
    {
        m_tblInd->toXmlElem("w:tblInd", "", _outStream);
    }


    if (m_has_tblBorders)
    {
        m_tblBorders->toXmlElem("w:tblBorders", "", _outStream);
    }


    if (m_has_shd)
    {
        m_shd->toXmlElem("w:shd", "", _outStream);
    }


    if (m_has_tblLayout)
    {
        m_tblLayout->toXmlElem("w:tblLayout", "", _outStream);
    }


    if (m_has_tblCellMar)
    {
        m_tblCellMar->toXmlElem("w:tblCellMar", "", _outStream);
    }


    if (m_has_tblLook)
    {
        m_tblLook->toXmlElem("w:tblLook", "", _outStream);
    }


    if (m_has_tblCaption)
    {
        m_tblCaption->toXmlElem("w:tblCaption", "", _outStream);
    }


    if (m_has_tblDescription)
    {
        m_tblDescription->toXmlElem("w:tblDescription", "", _outStream);
    }


    if (m_has_tblPrChange)
    {
        m_tblPrChange->toXmlElem("w:tblPrChange", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_TblPr& CT_TblPr::default_instance()
{
    if (!CT_TblPr::default_instance_)
    {
        CT_TblPr::default_instance_ = new CT_TblPr();
    }
    return *CT_TblPr::default_instance_;
}

CT_TblPr* CT_TblPr::default_instance_ = NULL;

// CT_TblPrExBase
CT_TblPrExBase::CT_TblPrExBase()
    :m_has_tblW(false),
     m_tblW(NULL),
     m_has_jc(false),
     m_jc(NULL),
     m_has_tblCellSpacing(false),
     m_tblCellSpacing(NULL),
     m_has_tblInd(false),
     m_tblInd(NULL),
     m_has_tblBorders(false),
     m_tblBorders(NULL),
     m_has_shd(false),
     m_shd(NULL),
     m_has_tblLayout(false),
     m_tblLayout(NULL),
     m_has_tblCellMar(false),
     m_tblCellMar(NULL),
     m_has_tblLook(false),
     m_tblLook(NULL)
{
}
CT_TblPrExBase::~CT_TblPrExBase()
{
    clear();
}
bool CT_TblPrExBase::has_tblW() const
{
    return m_has_tblW;
}

CT_TblWidth* CT_TblPrExBase::mutable_tblW()
{
    m_has_tblW = true;
    if (!m_tblW)
    {
        m_tblW = new CT_TblWidth();
    }
    return m_tblW;
}

const CT_TblWidth& CT_TblPrExBase::get_tblW() const
{
    if (m_tblW)
    {
        return *m_tblW;
    }
    return CT_TblWidth::default_instance();
}

bool CT_TblPrExBase::has_jc() const
{
    return m_has_jc;
}

CT_JcTable* CT_TblPrExBase::mutable_jc()
{
    m_has_jc = true;
    if (!m_jc)
    {
        m_jc = new CT_JcTable();
    }
    return m_jc;
}

const CT_JcTable& CT_TblPrExBase::get_jc() const
{
    if (m_jc)
    {
        return *m_jc;
    }
    return CT_JcTable::default_instance();
}

bool CT_TblPrExBase::has_tblCellSpacing() const
{
    return m_has_tblCellSpacing;
}

CT_TblWidth* CT_TblPrExBase::mutable_tblCellSpacing()
{
    m_has_tblCellSpacing = true;
    if (!m_tblCellSpacing)
    {
        m_tblCellSpacing = new CT_TblWidth();
    }
    return m_tblCellSpacing;
}

const CT_TblWidth& CT_TblPrExBase::get_tblCellSpacing() const
{
    if (m_tblCellSpacing)
    {
        return *m_tblCellSpacing;
    }
    return CT_TblWidth::default_instance();
}

bool CT_TblPrExBase::has_tblInd() const
{
    return m_has_tblInd;
}

CT_TblWidth* CT_TblPrExBase::mutable_tblInd()
{
    m_has_tblInd = true;
    if (!m_tblInd)
    {
        m_tblInd = new CT_TblWidth();
    }
    return m_tblInd;
}

const CT_TblWidth& CT_TblPrExBase::get_tblInd() const
{
    if (m_tblInd)
    {
        return *m_tblInd;
    }
    return CT_TblWidth::default_instance();
}

bool CT_TblPrExBase::has_tblBorders() const
{
    return m_has_tblBorders;
}

CT_TblBorders* CT_TblPrExBase::mutable_tblBorders()
{
    m_has_tblBorders = true;
    if (!m_tblBorders)
    {
        m_tblBorders = new CT_TblBorders();
    }
    return m_tblBorders;
}

const CT_TblBorders& CT_TblPrExBase::get_tblBorders() const
{
    if (m_tblBorders)
    {
        return *m_tblBorders;
    }
    return CT_TblBorders::default_instance();
}

bool CT_TblPrExBase::has_shd() const
{
    return m_has_shd;
}

CT_Shd* CT_TblPrExBase::mutable_shd()
{
    m_has_shd = true;
    if (!m_shd)
    {
        m_shd = new CT_Shd();
    }
    return m_shd;
}

const CT_Shd& CT_TblPrExBase::get_shd() const
{
    if (m_shd)
    {
        return *m_shd;
    }
    return CT_Shd::default_instance();
}

bool CT_TblPrExBase::has_tblLayout() const
{
    return m_has_tblLayout;
}

CT_TblLayoutType* CT_TblPrExBase::mutable_tblLayout()
{
    m_has_tblLayout = true;
    if (!m_tblLayout)
    {
        m_tblLayout = new CT_TblLayoutType();
    }
    return m_tblLayout;
}

const CT_TblLayoutType& CT_TblPrExBase::get_tblLayout() const
{
    if (m_tblLayout)
    {
        return *m_tblLayout;
    }
    return CT_TblLayoutType::default_instance();
}

bool CT_TblPrExBase::has_tblCellMar() const
{
    return m_has_tblCellMar;
}

CT_TblCellMar* CT_TblPrExBase::mutable_tblCellMar()
{
    m_has_tblCellMar = true;
    if (!m_tblCellMar)
    {
        m_tblCellMar = new CT_TblCellMar();
    }
    return m_tblCellMar;
}

const CT_TblCellMar& CT_TblPrExBase::get_tblCellMar() const
{
    if (m_tblCellMar)
    {
        return *m_tblCellMar;
    }
    return CT_TblCellMar::default_instance();
}

bool CT_TblPrExBase::has_tblLook() const
{
    return m_has_tblLook;
}

CT_TblLook* CT_TblPrExBase::mutable_tblLook()
{
    m_has_tblLook = true;
    if (!m_tblLook)
    {
        m_tblLook = new CT_TblLook();
    }
    return m_tblLook;
}

const CT_TblLook& CT_TblPrExBase::get_tblLook() const
{
    if (m_tblLook)
    {
        return *m_tblLook;
    }
    return CT_TblLook::default_instance();
}

void CT_TblPrExBase::clear()
{
    m_has_tblW = false;

    if (m_tblW)
    {
        delete m_tblW;
        m_tblW = NULL;
    }


    m_has_jc = false;

    if (m_jc)
    {
        delete m_jc;
        m_jc = NULL;
    }


    m_has_tblCellSpacing = false;

    if (m_tblCellSpacing)
    {
        delete m_tblCellSpacing;
        m_tblCellSpacing = NULL;
    }


    m_has_tblInd = false;

    if (m_tblInd)
    {
        delete m_tblInd;
        m_tblInd = NULL;
    }


    m_has_tblBorders = false;

    if (m_tblBorders)
    {
        delete m_tblBorders;
        m_tblBorders = NULL;
    }


    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }


    m_has_tblLayout = false;

    if (m_tblLayout)
    {
        delete m_tblLayout;
        m_tblLayout = NULL;
    }


    m_has_tblCellMar = false;

    if (m_tblCellMar)
    {
        delete m_tblCellMar;
        m_tblCellMar = NULL;
    }


    m_has_tblLook = false;

    if (m_tblLook)
    {
        delete m_tblLook;
        m_tblLook = NULL;
    }

}

void CT_TblPrExBase::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";


    if (m_has_tblW)
    {
        m_tblW->toXmlElem("w:tblW", "", _outStream);
    }


    if (m_has_jc)
    {
        m_jc->toXmlElem("w:jc", "", _outStream);
    }


    if (m_has_tblCellSpacing)
    {
        m_tblCellSpacing->toXmlElem("w:tblCellSpacing", "", _outStream);
    }


    if (m_has_tblInd)
    {
        m_tblInd->toXmlElem("w:tblInd", "", _outStream);
    }


    if (m_has_tblBorders)
    {
        m_tblBorders->toXmlElem("w:tblBorders", "", _outStream);
    }


    if (m_has_shd)
    {
        m_shd->toXmlElem("w:shd", "", _outStream);
    }


    if (m_has_tblLayout)
    {
        m_tblLayout->toXmlElem("w:tblLayout", "", _outStream);
    }


    if (m_has_tblCellMar)
    {
        m_tblCellMar->toXmlElem("w:tblCellMar", "", _outStream);
    }


    if (m_has_tblLook)
    {
        m_tblLook->toXmlElem("w:tblLook", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_TblPrExBase& CT_TblPrExBase::default_instance()
{
    if (!CT_TblPrExBase::default_instance_)
    {
        CT_TblPrExBase::default_instance_ = new CT_TblPrExBase();
    }
    return *CT_TblPrExBase::default_instance_;
}

CT_TblPrExBase* CT_TblPrExBase::default_instance_ = NULL;

// CT_TblPrEx
CT_TblPrEx::CT_TblPrEx()
    :m_has_tblW(false),
     m_tblW(NULL),
     m_has_jc(false),
     m_jc(NULL),
     m_has_tblCellSpacing(false),
     m_tblCellSpacing(NULL),
     m_has_tblInd(false),
     m_tblInd(NULL),
     m_has_tblBorders(false),
     m_tblBorders(NULL),
     m_has_shd(false),
     m_shd(NULL),
     m_has_tblLayout(false),
     m_tblLayout(NULL),
     m_has_tblCellMar(false),
     m_tblCellMar(NULL),
     m_has_tblLook(false),
     m_tblLook(NULL),
     m_has_tblPrExChange(false),
     m_tblPrExChange(NULL)
{
}
CT_TblPrEx::~CT_TblPrEx()
{
    clear();
}
bool CT_TblPrEx::has_tblW() const
{
    return m_has_tblW;
}

CT_TblWidth* CT_TblPrEx::mutable_tblW()
{
    m_has_tblW = true;
    if (!m_tblW)
    {
        m_tblW = new CT_TblWidth();
    }
    return m_tblW;
}

const CT_TblWidth& CT_TblPrEx::get_tblW() const
{
    if (m_tblW)
    {
        return *m_tblW;
    }
    return CT_TblWidth::default_instance();
}

bool CT_TblPrEx::has_jc() const
{
    return m_has_jc;
}

CT_JcTable* CT_TblPrEx::mutable_jc()
{
    m_has_jc = true;
    if (!m_jc)
    {
        m_jc = new CT_JcTable();
    }
    return m_jc;
}

const CT_JcTable& CT_TblPrEx::get_jc() const
{
    if (m_jc)
    {
        return *m_jc;
    }
    return CT_JcTable::default_instance();
}

bool CT_TblPrEx::has_tblCellSpacing() const
{
    return m_has_tblCellSpacing;
}

CT_TblWidth* CT_TblPrEx::mutable_tblCellSpacing()
{
    m_has_tblCellSpacing = true;
    if (!m_tblCellSpacing)
    {
        m_tblCellSpacing = new CT_TblWidth();
    }
    return m_tblCellSpacing;
}

const CT_TblWidth& CT_TblPrEx::get_tblCellSpacing() const
{
    if (m_tblCellSpacing)
    {
        return *m_tblCellSpacing;
    }
    return CT_TblWidth::default_instance();
}

bool CT_TblPrEx::has_tblInd() const
{
    return m_has_tblInd;
}

CT_TblWidth* CT_TblPrEx::mutable_tblInd()
{
    m_has_tblInd = true;
    if (!m_tblInd)
    {
        m_tblInd = new CT_TblWidth();
    }
    return m_tblInd;
}

const CT_TblWidth& CT_TblPrEx::get_tblInd() const
{
    if (m_tblInd)
    {
        return *m_tblInd;
    }
    return CT_TblWidth::default_instance();
}

bool CT_TblPrEx::has_tblBorders() const
{
    return m_has_tblBorders;
}

CT_TblBorders* CT_TblPrEx::mutable_tblBorders()
{
    m_has_tblBorders = true;
    if (!m_tblBorders)
    {
        m_tblBorders = new CT_TblBorders();
    }
    return m_tblBorders;
}

const CT_TblBorders& CT_TblPrEx::get_tblBorders() const
{
    if (m_tblBorders)
    {
        return *m_tblBorders;
    }
    return CT_TblBorders::default_instance();
}

bool CT_TblPrEx::has_shd() const
{
    return m_has_shd;
}

CT_Shd* CT_TblPrEx::mutable_shd()
{
    m_has_shd = true;
    if (!m_shd)
    {
        m_shd = new CT_Shd();
    }
    return m_shd;
}

const CT_Shd& CT_TblPrEx::get_shd() const
{
    if (m_shd)
    {
        return *m_shd;
    }
    return CT_Shd::default_instance();
}

bool CT_TblPrEx::has_tblLayout() const
{
    return m_has_tblLayout;
}

CT_TblLayoutType* CT_TblPrEx::mutable_tblLayout()
{
    m_has_tblLayout = true;
    if (!m_tblLayout)
    {
        m_tblLayout = new CT_TblLayoutType();
    }
    return m_tblLayout;
}

const CT_TblLayoutType& CT_TblPrEx::get_tblLayout() const
{
    if (m_tblLayout)
    {
        return *m_tblLayout;
    }
    return CT_TblLayoutType::default_instance();
}

bool CT_TblPrEx::has_tblCellMar() const
{
    return m_has_tblCellMar;
}

CT_TblCellMar* CT_TblPrEx::mutable_tblCellMar()
{
    m_has_tblCellMar = true;
    if (!m_tblCellMar)
    {
        m_tblCellMar = new CT_TblCellMar();
    }
    return m_tblCellMar;
}

const CT_TblCellMar& CT_TblPrEx::get_tblCellMar() const
{
    if (m_tblCellMar)
    {
        return *m_tblCellMar;
    }
    return CT_TblCellMar::default_instance();
}

bool CT_TblPrEx::has_tblLook() const
{
    return m_has_tblLook;
}

CT_TblLook* CT_TblPrEx::mutable_tblLook()
{
    m_has_tblLook = true;
    if (!m_tblLook)
    {
        m_tblLook = new CT_TblLook();
    }
    return m_tblLook;
}

const CT_TblLook& CT_TblPrEx::get_tblLook() const
{
    if (m_tblLook)
    {
        return *m_tblLook;
    }
    return CT_TblLook::default_instance();
}

bool CT_TblPrEx::has_tblPrExChange() const
{
    return m_has_tblPrExChange;
}

CT_TblPrExChange* CT_TblPrEx::mutable_tblPrExChange()
{
    m_has_tblPrExChange = true;
    if (!m_tblPrExChange)
    {
        m_tblPrExChange = new CT_TblPrExChange();
    }
    return m_tblPrExChange;
}

const CT_TblPrExChange& CT_TblPrEx::get_tblPrExChange() const
{
    if (m_tblPrExChange)
    {
        return *m_tblPrExChange;
    }
    return CT_TblPrExChange::default_instance();
}

void CT_TblPrEx::clear()
{
    m_has_tblW = false;

    if (m_tblW)
    {
        delete m_tblW;
        m_tblW = NULL;
    }


    m_has_jc = false;

    if (m_jc)
    {
        delete m_jc;
        m_jc = NULL;
    }


    m_has_tblCellSpacing = false;

    if (m_tblCellSpacing)
    {
        delete m_tblCellSpacing;
        m_tblCellSpacing = NULL;
    }


    m_has_tblInd = false;

    if (m_tblInd)
    {
        delete m_tblInd;
        m_tblInd = NULL;
    }


    m_has_tblBorders = false;

    if (m_tblBorders)
    {
        delete m_tblBorders;
        m_tblBorders = NULL;
    }


    m_has_shd = false;

    if (m_shd)
    {
        delete m_shd;
        m_shd = NULL;
    }


    m_has_tblLayout = false;

    if (m_tblLayout)
    {
        delete m_tblLayout;
        m_tblLayout = NULL;
    }


    m_has_tblCellMar = false;

    if (m_tblCellMar)
    {
        delete m_tblCellMar;
        m_tblCellMar = NULL;
    }


    m_has_tblLook = false;

    if (m_tblLook)
    {
        delete m_tblLook;
        m_tblLook = NULL;
    }


    m_has_tblPrExChange = false;

    if (m_tblPrExChange)
    {
        delete m_tblPrExChange;
        m_tblPrExChange = NULL;
    }

}

void CT_TblPrEx::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";


    if (m_has_tblW)
    {
        m_tblW->toXmlElem("w:tblW", "", _outStream);
    }


    if (m_has_jc)
    {
        m_jc->toXmlElem("w:jc", "", _outStream);
    }


    if (m_has_tblCellSpacing)
    {
        m_tblCellSpacing->toXmlElem("w:tblCellSpacing", "", _outStream);
    }


    if (m_has_tblInd)
    {
        m_tblInd->toXmlElem("w:tblInd", "", _outStream);
    }


    if (m_has_tblBorders)
    {
        m_tblBorders->toXmlElem("w:tblBorders", "", _outStream);
    }


    if (m_has_shd)
    {
        m_shd->toXmlElem("w:shd", "", _outStream);
    }


    if (m_has_tblLayout)
    {
        m_tblLayout->toXmlElem("w:tblLayout", "", _outStream);
    }


    if (m_has_tblCellMar)
    {
        m_tblCellMar->toXmlElem("w:tblCellMar", "", _outStream);
    }


    if (m_has_tblLook)
    {
        m_tblLook->toXmlElem("w:tblLook", "", _outStream);
    }


    if (m_has_tblPrExChange)
    {
        m_tblPrExChange->toXmlElem("w:tblPrExChange", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_TblPrEx& CT_TblPrEx::default_instance()
{
    if (!CT_TblPrEx::default_instance_)
    {
        CT_TblPrEx::default_instance_ = new CT_TblPrEx();
    }
    return *CT_TblPrEx::default_instance_;
}

CT_TblPrEx* CT_TblPrEx::default_instance_ = NULL;

// CT_Tbl
CT_Tbl::CT_Tbl()
    :m_has_tblPr(false),
     m_tblPr(NULL),
     m_has_tblGrid(false),
     m_tblGrid(NULL)
{
}
CT_Tbl::~CT_Tbl()
{
    clear();
}
bool CT_Tbl::has_tblPr() const
{
    return m_has_tblPr;
}

CT_TblPr* CT_Tbl::mutable_tblPr()
{
    m_has_tblPr = true;
    if (!m_tblPr)
    {
        m_tblPr = new CT_TblPr();
    }
    return m_tblPr;
}

const CT_TblPr& CT_Tbl::get_tblPr() const
{
    if (m_tblPr)
    {
        return *m_tblPr;
    }
    return CT_TblPr::default_instance();
}

bool CT_Tbl::has_tblGrid() const
{
    return m_has_tblGrid;
}

CT_TblGrid* CT_Tbl::mutable_tblGrid()
{
    m_has_tblGrid = true;
    if (!m_tblGrid)
    {
        m_tblGrid = new CT_TblGrid();
    }
    return m_tblGrid;
}

const CT_TblGrid& CT_Tbl::get_tblGrid() const
{
    if (m_tblGrid)
    {
        return *m_tblGrid;
    }
    return CT_TblGrid::default_instance();
}

CT_Row* CT_Tbl::add_tr()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Row* pNewChild = pChildGroup->mutable_tr();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_CustomXmlRow* CT_Tbl::add_customXml()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_CustomXmlRow* pNewChild = pChildGroup->mutable_customXml();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_SdtRow* CT_Tbl::add_sdt()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_SdtRow* pNewChild = pChildGroup->mutable_sdt();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_ProofErr* CT_Tbl::add_proofErr()
{
    ChildGroup_2 *pChildGroup = new ChildGroup_2();
    CT_ProofErr* pNewChild = pChildGroup->mutable_proofErr();
    m_childGroupList_2.push_back(pChildGroup);
    return pNewChild;
}

CT_PermStart* CT_Tbl::add_permStart()
{
    ChildGroup_2 *pChildGroup = new ChildGroup_2();
    CT_PermStart* pNewChild = pChildGroup->mutable_permStart();
    m_childGroupList_2.push_back(pChildGroup);
    return pNewChild;
}

CT_Perm* CT_Tbl::add_permEnd()
{
    ChildGroup_2 *pChildGroup = new ChildGroup_2();
    CT_Perm* pNewChild = pChildGroup->mutable_permEnd();
    m_childGroupList_2.push_back(pChildGroup);
    return pNewChild;
}

CT_Bookmark* CT_Tbl::add_bookmarkStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_Bookmark* pNewChild = pChildGroup->mutable_bookmarkStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MarkupRange* CT_Tbl::add_bookmarkEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MarkupRange* pNewChild = pChildGroup->mutable_bookmarkEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MoveBookmark* CT_Tbl::add_moveFromRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MoveBookmark* pNewChild = pChildGroup->mutable_moveFromRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MarkupRange* CT_Tbl::add_moveFromRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MarkupRange* pNewChild = pChildGroup->mutable_moveFromRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MoveBookmark* CT_Tbl::add_moveToRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MoveBookmark* pNewChild = pChildGroup->mutable_moveToRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MarkupRange* CT_Tbl::add_moveToRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MarkupRange* pNewChild = pChildGroup->mutable_moveToRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MarkupRange* CT_Tbl::add_commentRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MarkupRange* pNewChild = pChildGroup->mutable_commentRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MarkupRange* CT_Tbl::add_commentRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MarkupRange* pNewChild = pChildGroup->mutable_commentRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_TrackChange* CT_Tbl::add_customXmlInsRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_TrackChange* pNewChild = pChildGroup->mutable_customXmlInsRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_Markup* CT_Tbl::add_customXmlInsRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_Markup* pNewChild = pChildGroup->mutable_customXmlInsRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_TrackChange* CT_Tbl::add_customXmlDelRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_TrackChange* pNewChild = pChildGroup->mutable_customXmlDelRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_Markup* CT_Tbl::add_customXmlDelRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_Markup* pNewChild = pChildGroup->mutable_customXmlDelRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_TrackChange* CT_Tbl::add_customXmlMoveFromRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_TrackChange* pNewChild = pChildGroup->mutable_customXmlMoveFromRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_Markup* CT_Tbl::add_customXmlMoveFromRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_Markup* pNewChild = pChildGroup->mutable_customXmlMoveFromRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_TrackChange* CT_Tbl::add_customXmlMoveToRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_TrackChange* pNewChild = pChildGroup->mutable_customXmlMoveToRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_Markup* CT_Tbl::add_customXmlMoveToRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_Markup* pNewChild = pChildGroup->mutable_customXmlMoveToRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_RunTrackChange* CT_Tbl::add_ins()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_RunTrackChange* pNewChild = pChildGroup->mutable_ins();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_RunTrackChange* CT_Tbl::add_del()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_RunTrackChange* pNewChild = pChildGroup->mutable_del();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_RunTrackChange* CT_Tbl::add_moveFrom()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_RunTrackChange* pNewChild = pChildGroup->mutable_moveFrom();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_RunTrackChange* CT_Tbl::add_moveTo()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_RunTrackChange* pNewChild = pChildGroup->mutable_moveTo();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

ns_m::CT_OMathPara* CT_Tbl::add_m_oMathPara()
{
    ChildGroup_4 *pChildGroup = new ChildGroup_4();
    ns_m::CT_OMathPara* pNewChild = pChildGroup->mutable_m_oMathPara();
    m_childGroupList_4.push_back(pChildGroup);
    return pNewChild;
}

ns_m::CT_OMath* CT_Tbl::add_m_oMath()
{
    ChildGroup_4 *pChildGroup = new ChildGroup_4();
    ns_m::CT_OMath* pNewChild = pChildGroup->mutable_m_oMath();
    m_childGroupList_4.push_back(pChildGroup);
    return pNewChild;
}

void CT_Tbl::clear()
{
    m_has_tblPr = false;

    if (m_tblPr)
    {
        delete m_tblPr;
        m_tblPr = NULL;
    }


    m_has_tblGrid = false;

    if (m_tblGrid)
    {
        delete m_tblGrid;
        m_tblGrid = NULL;
    }


    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }

    {
        vector<ChildGroup_2*>::iterator iter;
        for (iter = m_childGroupList_2.begin(); iter != m_childGroupList_2.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_2.clear();
    }

    {
        vector<ChildGroup_3*>::iterator iter;
        for (iter = m_childGroupList_3.begin(); iter != m_childGroupList_3.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_3.clear();
    }

    {
        vector<ChildGroup_4*>::iterator iter;
        for (iter = m_childGroupList_4.begin(); iter != m_childGroupList_4.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_4.clear();
    }
}

void CT_Tbl::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";

    assert(m_has_tblPr);


    assert(m_has_tblGrid);


    if (m_has_tblPr)
    {
        m_tblPr->toXmlElem("w:tblPr", "", _outStream);
    }


    if (m_has_tblGrid)
    {
        m_tblGrid->toXmlElem("w:tblGrid", "", _outStream);
    }

    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_tr())
            {
                (*iter)->get_tr().toXmlElem("w:tr", "", _outStream);
            }


            else if ((*iter)->has_customXml())
            {
                (*iter)->get_customXml().toXmlElem("w:customXml", "", _outStream);
            }


            else if ((*iter)->has_sdt())
            {
                (*iter)->get_sdt().toXmlElem("w:sdt", "", _outStream);
            }


        }
    }

    {
        vector<ChildGroup_2*>::const_iterator iter;
        for (iter = m_childGroupList_2.begin(); iter != m_childGroupList_2.end(); ++iter)
        {
            if ((*iter)->has_proofErr())
            {
                (*iter)->get_proofErr().toXmlElem("w:proofErr", "", _outStream);
            }


            else if ((*iter)->has_permStart())
            {
                (*iter)->get_permStart().toXmlElem("w:permStart", "", _outStream);
            }


            else if ((*iter)->has_permEnd())
            {
                (*iter)->get_permEnd().toXmlElem("w:permEnd", "", _outStream);
            }


        }
    }

    {
        vector<ChildGroup_3*>::const_iterator iter;
        for (iter = m_childGroupList_3.begin(); iter != m_childGroupList_3.end(); ++iter)
        {
            if ((*iter)->has_bookmarkStart())
            {
                (*iter)->get_bookmarkStart().toXmlElem("w:bookmarkStart", "", _outStream);
            }


            else if ((*iter)->has_bookmarkEnd())
            {
                (*iter)->get_bookmarkEnd().toXmlElem("w:bookmarkEnd", "", _outStream);
            }


            else if ((*iter)->has_moveFromRangeStart())
            {
                (*iter)->get_moveFromRangeStart().toXmlElem("w:moveFromRangeStart", "", _outStream);
            }


            else if ((*iter)->has_moveFromRangeEnd())
            {
                (*iter)->get_moveFromRangeEnd().toXmlElem("w:moveFromRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_moveToRangeStart())
            {
                (*iter)->get_moveToRangeStart().toXmlElem("w:moveToRangeStart", "", _outStream);
            }


            else if ((*iter)->has_moveToRangeEnd())
            {
                (*iter)->get_moveToRangeEnd().toXmlElem("w:moveToRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_commentRangeStart())
            {
                (*iter)->get_commentRangeStart().toXmlElem("w:commentRangeStart", "", _outStream);
            }


            else if ((*iter)->has_commentRangeEnd())
            {
                (*iter)->get_commentRangeEnd().toXmlElem("w:commentRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_customXmlInsRangeStart())
            {
                (*iter)->get_customXmlInsRangeStart().toXmlElem("w:customXmlInsRangeStart", "", _outStream);
            }


            else if ((*iter)->has_customXmlInsRangeEnd())
            {
                (*iter)->get_customXmlInsRangeEnd().toXmlElem("w:customXmlInsRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_customXmlDelRangeStart())
            {
                (*iter)->get_customXmlDelRangeStart().toXmlElem("w:customXmlDelRangeStart", "", _outStream);
            }


            else if ((*iter)->has_customXmlDelRangeEnd())
            {
                (*iter)->get_customXmlDelRangeEnd().toXmlElem("w:customXmlDelRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_customXmlMoveFromRangeStart())
            {
                (*iter)->get_customXmlMoveFromRangeStart().toXmlElem("w:customXmlMoveFromRangeStart", "", _outStream);
            }


            else if ((*iter)->has_customXmlMoveFromRangeEnd())
            {
                (*iter)->get_customXmlMoveFromRangeEnd().toXmlElem("w:customXmlMoveFromRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_customXmlMoveToRangeStart())
            {
                (*iter)->get_customXmlMoveToRangeStart().toXmlElem("w:customXmlMoveToRangeStart", "", _outStream);
            }


            else if ((*iter)->has_customXmlMoveToRangeEnd())
            {
                (*iter)->get_customXmlMoveToRangeEnd().toXmlElem("w:customXmlMoveToRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_ins())
            {
                (*iter)->get_ins().toXmlElem("w:ins", "", _outStream);
            }


            else if ((*iter)->has_del())
            {
                (*iter)->get_del().toXmlElem("w:del", "", _outStream);
            }


            else if ((*iter)->has_moveFrom())
            {
                (*iter)->get_moveFrom().toXmlElem("w:moveFrom", "", _outStream);
            }


            else if ((*iter)->has_moveTo())
            {
                (*iter)->get_moveTo().toXmlElem("w:moveTo", "", _outStream);
            }


        }
    }

    {
        vector<ChildGroup_4*>::const_iterator iter;
        for (iter = m_childGroupList_4.begin(); iter != m_childGroupList_4.end(); ++iter)
        {
            if ((*iter)->has_m_oMathPara())
            {
                (*iter)->get_m_oMathPara().toXmlElem("m:oMathPara", "", _outStream);
            }


            else if ((*iter)->has_m_oMath())
            {
                (*iter)->get_m_oMath().toXmlElem("m:oMath", "", _outStream);
            }


        }
    }

    _outStream << "</" << _elemName << ">";
}

const CT_Tbl& CT_Tbl::default_instance()
{
    if (!CT_Tbl::default_instance_)
    {
        CT_Tbl::default_instance_ = new CT_Tbl();
    }
    return *CT_Tbl::default_instance_;
}


// CT_Tbl::ChildGroup_1
CT_Tbl::ChildGroup_1::ChildGroup_1()
    :m_has_tr(false),
     m_tr(NULL),
     m_has_customXml(false),
     m_customXml(NULL),
     m_has_sdt(false),
     m_sdt(NULL)
{
}
bool CT_Tbl::ChildGroup_1::has_tr() const
{
    return m_has_tr;
}

CT_Row* CT_Tbl::ChildGroup_1::mutable_tr()
{

    m_has_customXml = false;

    if (m_customXml)
    {
        delete m_customXml;
        m_customXml = NULL;
    }
    ;

    m_has_sdt = false;

    if (m_sdt)
    {
        delete m_sdt;
        m_sdt = NULL;
    }
    ;

    m_has_tr = true;
    if (!m_tr)
    {
        m_tr = new CT_Row();
    }
    return m_tr;
}

const CT_Row& CT_Tbl::ChildGroup_1::get_tr() const
{
    if (m_tr)
    {
        return *m_tr;
    }
    return CT_Row::default_instance();
}

bool CT_Tbl::ChildGroup_1::has_customXml() const
{
    return m_has_customXml;
}

CT_CustomXmlRow* CT_Tbl::ChildGroup_1::mutable_customXml()
{

    m_has_tr = false;

    if (m_tr)
    {
        delete m_tr;
        m_tr = NULL;
    }
    ;

    m_has_sdt = false;

    if (m_sdt)
    {
        delete m_sdt;
        m_sdt = NULL;
    }
    ;

    m_has_customXml = true;
    if (!m_customXml)
    {
        m_customXml = new CT_CustomXmlRow();
    }
    return m_customXml;
}

const CT_CustomXmlRow& CT_Tbl::ChildGroup_1::get_customXml() const
{
    if (m_customXml)
    {
        return *m_customXml;
    }
    return CT_CustomXmlRow::default_instance();
}

bool CT_Tbl::ChildGroup_1::has_sdt() const
{
    return m_has_sdt;
}

CT_SdtRow* CT_Tbl::ChildGroup_1::mutable_sdt()
{

    m_has_tr = false;

    if (m_tr)
    {
        delete m_tr;
        m_tr = NULL;
    }
    ;

    m_has_customXml = false;

    if (m_customXml)
    {
        delete m_customXml;
        m_customXml = NULL;
    }
    ;

    m_has_sdt = true;
    if (!m_sdt)
    {
        m_sdt = new CT_SdtRow();
    }
    return m_sdt;
}

const CT_SdtRow& CT_Tbl::ChildGroup_1::get_sdt() const
{
    if (m_sdt)
    {
        return *m_sdt;
    }
    return CT_SdtRow::default_instance();
}


// CT_Tbl::ChildGroup_2
CT_Tbl::ChildGroup_2::ChildGroup_2()
    :m_has_proofErr(false),
     m_proofErr(NULL),
     m_has_permStart(false),
     m_permStart(NULL),
     m_has_permEnd(false),
     m_permEnd(NULL)
{
}
bool CT_Tbl::ChildGroup_2::has_proofErr() const
{
    return m_has_proofErr;
}

CT_ProofErr* CT_Tbl::ChildGroup_2::mutable_proofErr()
{

    m_has_permStart = false;

    if (m_permStart)
    {
        delete m_permStart;
        m_permStart = NULL;
    }
    ;

    m_has_permEnd = false;

    if (m_permEnd)
    {
        delete m_permEnd;
        m_permEnd = NULL;
    }
    ;

    m_has_proofErr = true;
    if (!m_proofErr)
    {
        m_proofErr = new CT_ProofErr();
    }
    return m_proofErr;
}

const CT_ProofErr& CT_Tbl::ChildGroup_2::get_proofErr() const
{
    if (m_proofErr)
    {
        return *m_proofErr;
    }
    return CT_ProofErr::default_instance();
}

bool CT_Tbl::ChildGroup_2::has_permStart() const
{
    return m_has_permStart;
}

CT_PermStart* CT_Tbl::ChildGroup_2::mutable_permStart()
{

    m_has_proofErr = false;

    if (m_proofErr)
    {
        delete m_proofErr;
        m_proofErr = NULL;
    }
    ;

    m_has_permEnd = false;

    if (m_permEnd)
    {
        delete m_permEnd;
        m_permEnd = NULL;
    }
    ;

    m_has_permStart = true;
    if (!m_permStart)
    {
        m_permStart = new CT_PermStart();
    }
    return m_permStart;
}

const CT_PermStart& CT_Tbl::ChildGroup_2::get_permStart() const
{
    if (m_permStart)
    {
        return *m_permStart;
    }
    return CT_PermStart::default_instance();
}

bool CT_Tbl::ChildGroup_2::has_permEnd() const
{
    return m_has_permEnd;
}

CT_Perm* CT_Tbl::ChildGroup_2::mutable_permEnd()
{

    m_has_proofErr = false;

    if (m_proofErr)
    {
        delete m_proofErr;
        m_proofErr = NULL;
    }
    ;

    m_has_permStart = false;

    if (m_permStart)
    {
        delete m_permStart;
        m_permStart = NULL;
    }
    ;

    m_has_permEnd = true;
    if (!m_permEnd)
    {
        m_permEnd = new CT_Perm();
    }
    return m_permEnd;
}

const CT_Perm& CT_Tbl::ChildGroup_2::get_permEnd() const
{
    if (m_permEnd)
    {
        return *m_permEnd;
    }
    return CT_Perm::default_instance();
}


// CT_Tbl::ChildGroup_3
CT_Tbl::ChildGroup_3::ChildGroup_3()
    :m_has_bookmarkStart(false),
     m_bookmarkStart(NULL),
     m_has_bookmarkEnd(false),
     m_bookmarkEnd(NULL),
     m_has_moveFromRangeStart(false),
     m_moveFromRangeStart(NULL),
     m_has_moveFromRangeEnd(false),
     m_moveFromRangeEnd(NULL),
     m_has_moveToRangeStart(false),
     m_moveToRangeStart(NULL),
     m_has_moveToRangeEnd(false),
     m_moveToRangeEnd(NULL),
     m_has_commentRangeStart(false),
     m_commentRangeStart(NULL),
     m_has_commentRangeEnd(false),
     m_commentRangeEnd(NULL),
     m_has_customXmlInsRangeStart(false),
     m_customXmlInsRangeStart(NULL),
     m_has_customXmlInsRangeEnd(false),
     m_customXmlInsRangeEnd(NULL),
     m_has_customXmlDelRangeStart(false),
     m_customXmlDelRangeStart(NULL),
     m_has_customXmlDelRangeEnd(false),
     m_customXmlDelRangeEnd(NULL),
     m_has_customXmlMoveFromRangeStart(false),
     m_customXmlMoveFromRangeStart(NULL),
     m_has_customXmlMoveFromRangeEnd(false),
     m_customXmlMoveFromRangeEnd(NULL),
     m_has_customXmlMoveToRangeStart(false),
     m_customXmlMoveToRangeStart(NULL),
     m_has_customXmlMoveToRangeEnd(false),
     m_customXmlMoveToRangeEnd(NULL),
     m_has_ins(false),
     m_ins(NULL),
     m_has_del(false),
     m_del(NULL),
     m_has_moveFrom(false),
     m_moveFrom(NULL),
     m_has_moveTo(false),
     m_moveTo(NULL)
{
}
bool CT_Tbl::ChildGroup_3::has_bookmarkStart() const
{
    return m_has_bookmarkStart;
}

CT_Bookmark* CT_Tbl::ChildGroup_3::mutable_bookmarkStart()
{

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_bookmarkStart = true;
    if (!m_bookmarkStart)
    {
        m_bookmarkStart = new CT_Bookmark();
    }
    return m_bookmarkStart;
}

const CT_Bookmark& CT_Tbl::ChildGroup_3::get_bookmarkStart() const
{
    if (m_bookmarkStart)
    {
        return *m_bookmarkStart;
    }
    return CT_Bookmark::default_instance();
}

bool CT_Tbl::ChildGroup_3::has_bookmarkEnd() const
{
    return m_has_bookmarkEnd;
}

CT_MarkupRange* CT_Tbl::ChildGroup_3::mutable_bookmarkEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_bookmarkEnd = true;
    if (!m_bookmarkEnd)
    {
        m_bookmarkEnd = new CT_MarkupRange();
    }
    return m_bookmarkEnd;
}

const CT_MarkupRange& CT_Tbl::ChildGroup_3::get_bookmarkEnd() const
{
    if (m_bookmarkEnd)
    {
        return *m_bookmarkEnd;
    }
    return CT_MarkupRange::default_instance();
}

bool CT_Tbl::ChildGroup_3::has_moveFromRangeStart() const
{
    return m_has_moveFromRangeStart;
}

CT_MoveBookmark* CT_Tbl::ChildGroup_3::mutable_moveFromRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_moveFromRangeStart = true;
    if (!m_moveFromRangeStart)
    {
        m_moveFromRangeStart = new CT_MoveBookmark();
    }
    return m_moveFromRangeStart;
}

const CT_MoveBookmark& CT_Tbl::ChildGroup_3::get_moveFromRangeStart() const
{
    if (m_moveFromRangeStart)
    {
        return *m_moveFromRangeStart;
    }
    return CT_MoveBookmark::default_instance();
}

bool CT_Tbl::ChildGroup_3::has_moveFromRangeEnd() const
{
    return m_has_moveFromRangeEnd;
}

CT_MarkupRange* CT_Tbl::ChildGroup_3::mutable_moveFromRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_moveFromRangeEnd = true;
    if (!m_moveFromRangeEnd)
    {
        m_moveFromRangeEnd = new CT_MarkupRange();
    }
    return m_moveFromRangeEnd;
}

const CT_MarkupRange& CT_Tbl::ChildGroup_3::get_moveFromRangeEnd() const
{
    if (m_moveFromRangeEnd)
    {
        return *m_moveFromRangeEnd;
    }
    return CT_MarkupRange::default_instance();
}

bool CT_Tbl::ChildGroup_3::has_moveToRangeStart() const
{
    return m_has_moveToRangeStart;
}

CT_MoveBookmark* CT_Tbl::ChildGroup_3::mutable_moveToRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_moveToRangeStart = true;
    if (!m_moveToRangeStart)
    {
        m_moveToRangeStart = new CT_MoveBookmark();
    }
    return m_moveToRangeStart;
}

const CT_MoveBookmark& CT_Tbl::ChildGroup_3::get_moveToRangeStart() const
{
    if (m_moveToRangeStart)
    {
        return *m_moveToRangeStart;
    }
    return CT_MoveBookmark::default_instance();
}

bool CT_Tbl::ChildGroup_3::has_moveToRangeEnd() const
{
    return m_has_moveToRangeEnd;
}

CT_MarkupRange* CT_Tbl::ChildGroup_3::mutable_moveToRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_moveToRangeEnd = true;
    if (!m_moveToRangeEnd)
    {
        m_moveToRangeEnd = new CT_MarkupRange();
    }
    return m_moveToRangeEnd;
}

const CT_MarkupRange& CT_Tbl::ChildGroup_3::get_moveToRangeEnd() const
{
    if (m_moveToRangeEnd)
    {
        return *m_moveToRangeEnd;
    }
    return CT_MarkupRange::default_instance();
}

bool CT_Tbl::ChildGroup_3::has_commentRangeStart() const
{
    return m_has_commentRangeStart;
}

CT_MarkupRange* CT_Tbl::ChildGroup_3::mutable_commentRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_commentRangeStart = true;
    if (!m_commentRangeStart)
    {
        m_commentRangeStart = new CT_MarkupRange();
    }
    return m_commentRangeStart;
}

const CT_MarkupRange& CT_Tbl::ChildGroup_3::get_commentRangeStart() const
{
    if (m_commentRangeStart)
    {
        return *m_commentRangeStart;
    }
    return CT_MarkupRange::default_instance();
}

bool CT_Tbl::ChildGroup_3::has_commentRangeEnd() const
{
    return m_has_commentRangeEnd;
}

CT_MarkupRange* CT_Tbl::ChildGroup_3::mutable_commentRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_commentRangeEnd = true;
    if (!m_commentRangeEnd)
    {
        m_commentRangeEnd = new CT_MarkupRange();
    }
    return m_commentRangeEnd;
}

const CT_MarkupRange& CT_Tbl::ChildGroup_3::get_commentRangeEnd() const
{
    if (m_commentRangeEnd)
    {
        return *m_commentRangeEnd;
    }
    return CT_MarkupRange::default_instance();
}

bool CT_Tbl::ChildGroup_3::has_customXmlInsRangeStart() const
{
    return m_has_customXmlInsRangeStart;
}

CT_TrackChange* CT_Tbl::ChildGroup_3::mutable_customXmlInsRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = true;
    if (!m_customXmlInsRangeStart)
    {
        m_customXmlInsRangeStart = new CT_TrackChange();
    }
    return m_customXmlInsRangeStart;
}

const CT_TrackChange& CT_Tbl::ChildGroup_3::get_customXmlInsRangeStart() const
{
    if (m_customXmlInsRangeStart)
    {
        return *m_customXmlInsRangeStart;
    }
    return CT_TrackChange::default_instance();
}

bool CT_Tbl::ChildGroup_3::has_customXmlInsRangeEnd() const
{
    return m_has_customXmlInsRangeEnd;
}

CT_Markup* CT_Tbl::ChildGroup_3::mutable_customXmlInsRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = true;
    if (!m_customXmlInsRangeEnd)
    {
        m_customXmlInsRangeEnd = new CT_Markup();
    }
    return m_customXmlInsRangeEnd;
}

const CT_Markup& CT_Tbl::ChildGroup_3::get_customXmlInsRangeEnd() const
{
    if (m_customXmlInsRangeEnd)
    {
        return *m_customXmlInsRangeEnd;
    }
    return CT_Markup::default_instance();
}

bool CT_Tbl::ChildGroup_3::has_customXmlDelRangeStart() const
{
    return m_has_customXmlDelRangeStart;
}

CT_TrackChange* CT_Tbl::ChildGroup_3::mutable_customXmlDelRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = true;
    if (!m_customXmlDelRangeStart)
    {
        m_customXmlDelRangeStart = new CT_TrackChange();
    }
    return m_customXmlDelRangeStart;
}

const CT_TrackChange& CT_Tbl::ChildGroup_3::get_customXmlDelRangeStart() const
{
    if (m_customXmlDelRangeStart)
    {
        return *m_customXmlDelRangeStart;
    }
    return CT_TrackChange::default_instance();
}

bool CT_Tbl::ChildGroup_3::has_customXmlDelRangeEnd() const
{
    return m_has_customXmlDelRangeEnd;
}

CT_Markup* CT_Tbl::ChildGroup_3::mutable_customXmlDelRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = true;
    if (!m_customXmlDelRangeEnd)
    {
        m_customXmlDelRangeEnd = new CT_Markup();
    }
    return m_customXmlDelRangeEnd;
}

const CT_Markup& CT_Tbl::ChildGroup_3::get_customXmlDelRangeEnd() const
{
    if (m_customXmlDelRangeEnd)
    {
        return *m_customXmlDelRangeEnd;
    }
    return CT_Markup::default_instance();
}

bool CT_Tbl::ChildGroup_3::has_customXmlMoveFromRangeStart() const
{
    return m_has_customXmlMoveFromRangeStart;
}

CT_TrackChange* CT_Tbl::ChildGroup_3::mutable_customXmlMoveFromRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = true;
    if (!m_customXmlMoveFromRangeStart)
    {
        m_customXmlMoveFromRangeStart = new CT_TrackChange();
    }
    return m_customXmlMoveFromRangeStart;
}

const CT_TrackChange& CT_Tbl::ChildGroup_3::get_customXmlMoveFromRangeStart() const
{
    if (m_customXmlMoveFromRangeStart)
    {
        return *m_customXmlMoveFromRangeStart;
    }
    return CT_TrackChange::default_instance();
}

bool CT_Tbl::ChildGroup_3::has_customXmlMoveFromRangeEnd() const
{
    return m_has_customXmlMoveFromRangeEnd;
}

CT_Markup* CT_Tbl::ChildGroup_3::mutable_customXmlMoveFromRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = true;
    if (!m_customXmlMoveFromRangeEnd)
    {
        m_customXmlMoveFromRangeEnd = new CT_Markup();
    }
    return m_customXmlMoveFromRangeEnd;
}

const CT_Markup& CT_Tbl::ChildGroup_3::get_customXmlMoveFromRangeEnd() const
{
    if (m_customXmlMoveFromRangeEnd)
    {
        return *m_customXmlMoveFromRangeEnd;
    }
    return CT_Markup::default_instance();
}

bool CT_Tbl::ChildGroup_3::has_customXmlMoveToRangeStart() const
{
    return m_has_customXmlMoveToRangeStart;
}

CT_TrackChange* CT_Tbl::ChildGroup_3::mutable_customXmlMoveToRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = true;
    if (!m_customXmlMoveToRangeStart)
    {
        m_customXmlMoveToRangeStart = new CT_TrackChange();
    }
    return m_customXmlMoveToRangeStart;
}

const CT_TrackChange& CT_Tbl::ChildGroup_3::get_customXmlMoveToRangeStart() const
{
    if (m_customXmlMoveToRangeStart)
    {
        return *m_customXmlMoveToRangeStart;
    }
    return CT_TrackChange::default_instance();
}

bool CT_Tbl::ChildGroup_3::has_customXmlMoveToRangeEnd() const
{
    return m_has_customXmlMoveToRangeEnd;
}

CT_Markup* CT_Tbl::ChildGroup_3::mutable_customXmlMoveToRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = true;
    if (!m_customXmlMoveToRangeEnd)
    {
        m_customXmlMoveToRangeEnd = new CT_Markup();
    }
    return m_customXmlMoveToRangeEnd;
}

const CT_Markup& CT_Tbl::ChildGroup_3::get_customXmlMoveToRangeEnd() const
{
    if (m_customXmlMoveToRangeEnd)
    {
        return *m_customXmlMoveToRangeEnd;
    }
    return CT_Markup::default_instance();
}

bool CT_Tbl::ChildGroup_3::has_ins() const
{
    return m_has_ins;
}

CT_RunTrackChange* CT_Tbl::ChildGroup_3::mutable_ins()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_ins = true;
    if (!m_ins)
    {
        m_ins = new CT_RunTrackChange();
    }
    return m_ins;
}

const CT_RunTrackChange& CT_Tbl::ChildGroup_3::get_ins() const
{
    if (m_ins)
    {
        return *m_ins;
    }
    return CT_RunTrackChange::default_instance();
}

bool CT_Tbl::ChildGroup_3::has_del() const
{
    return m_has_del;
}

CT_RunTrackChange* CT_Tbl::ChildGroup_3::mutable_del()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_del = true;
    if (!m_del)
    {
        m_del = new CT_RunTrackChange();
    }
    return m_del;
}

const CT_RunTrackChange& CT_Tbl::ChildGroup_3::get_del() const
{
    if (m_del)
    {
        return *m_del;
    }
    return CT_RunTrackChange::default_instance();
}

bool CT_Tbl::ChildGroup_3::has_moveFrom() const
{
    return m_has_moveFrom;
}

CT_RunTrackChange* CT_Tbl::ChildGroup_3::mutable_moveFrom()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_moveFrom = true;
    if (!m_moveFrom)
    {
        m_moveFrom = new CT_RunTrackChange();
    }
    return m_moveFrom;
}

const CT_RunTrackChange& CT_Tbl::ChildGroup_3::get_moveFrom() const
{
    if (m_moveFrom)
    {
        return *m_moveFrom;
    }
    return CT_RunTrackChange::default_instance();
}

bool CT_Tbl::ChildGroup_3::has_moveTo() const
{
    return m_has_moveTo;
}

CT_RunTrackChange* CT_Tbl::ChildGroup_3::mutable_moveTo()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = true;
    if (!m_moveTo)
    {
        m_moveTo = new CT_RunTrackChange();
    }
    return m_moveTo;
}

const CT_RunTrackChange& CT_Tbl::ChildGroup_3::get_moveTo() const
{
    if (m_moveTo)
    {
        return *m_moveTo;
    }
    return CT_RunTrackChange::default_instance();
}


// CT_Tbl::ChildGroup_4
CT_Tbl::ChildGroup_4::ChildGroup_4()
    :m_has_m_oMathPara(false),
     m_m_oMathPara(NULL),
     m_has_m_oMath(false),
     m_m_oMath(NULL)
{
}
bool CT_Tbl::ChildGroup_4::has_m_oMathPara() const
{
    return m_has_m_oMathPara;
}

ns_m::CT_OMathPara* CT_Tbl::ChildGroup_4::mutable_m_oMathPara()
{

    m_has_m_oMath = false;

    if (m_m_oMath)
    {
        delete m_m_oMath;
        m_m_oMath = NULL;
    }
    ;

    m_has_m_oMathPara = true;
    if (!m_m_oMathPara)
    {
        m_m_oMathPara = new ns_m::CT_OMathPara();
    }
    return m_m_oMathPara;
}

const ns_m::CT_OMathPara& CT_Tbl::ChildGroup_4::get_m_oMathPara() const
{
    if (m_m_oMathPara)
    {
        return *m_m_oMathPara;
    }
    return ns_m::CT_OMathPara::default_instance();
}

bool CT_Tbl::ChildGroup_4::has_m_oMath() const
{
    return m_has_m_oMath;
}

ns_m::CT_OMath* CT_Tbl::ChildGroup_4::mutable_m_oMath()
{

    m_has_m_oMathPara = false;

    if (m_m_oMathPara)
    {
        delete m_m_oMathPara;
        m_m_oMathPara = NULL;
    }
    ;

    m_has_m_oMath = true;
    if (!m_m_oMath)
    {
        m_m_oMath = new ns_m::CT_OMath();
    }
    return m_m_oMath;
}

const ns_m::CT_OMath& CT_Tbl::ChildGroup_4::get_m_oMath() const
{
    if (m_m_oMath)
    {
        return *m_m_oMath;
    }
    return ns_m::CT_OMath::default_instance();
}

CT_Tbl* CT_Tbl::default_instance_ = NULL;

// CT_TblLook
CT_TblLook::CT_TblLook()
    :m_has_firstRow_attr(false),
     m_firstRow_attr(NULL),
     m_has_lastRow_attr(false),
     m_lastRow_attr(NULL),
     m_has_firstColumn_attr(false),
     m_firstColumn_attr(NULL),
     m_has_lastColumn_attr(false),
     m_lastColumn_attr(NULL),
     m_has_noHBand_attr(false),
     m_noHBand_attr(NULL),
     m_has_noVBand_attr(false),
     m_noVBand_attr(NULL),
     m_has_val_attr(false),
     m_val_attr(NULL)
{
}
CT_TblLook::~CT_TblLook()
{
    clear();
}
void CT_TblLook::clear()
{
    m_has_firstRow_attr = false;

    if (m_firstRow_attr)
    {
        delete m_firstRow_attr;
        m_firstRow_attr = NULL;
    }


    m_has_lastRow_attr = false;

    if (m_lastRow_attr)
    {
        delete m_lastRow_attr;
        m_lastRow_attr = NULL;
    }


    m_has_firstColumn_attr = false;

    if (m_firstColumn_attr)
    {
        delete m_firstColumn_attr;
        m_firstColumn_attr = NULL;
    }


    m_has_lastColumn_attr = false;

    if (m_lastColumn_attr)
    {
        delete m_lastColumn_attr;
        m_lastColumn_attr = NULL;
    }


    m_has_noHBand_attr = false;

    if (m_noHBand_attr)
    {
        delete m_noHBand_attr;
        m_noHBand_attr = NULL;
    }


    m_has_noVBand_attr = false;

    if (m_noVBand_attr)
    {
        delete m_noVBand_attr;
        m_noVBand_attr = NULL;
    }


    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }

}

void CT_TblLook::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_firstRow_attr)
    {
        m_firstRow_attr->toXmlAttr("w:firstRow", _outStream);
    }



    if (m_has_lastRow_attr)
    {
        m_lastRow_attr->toXmlAttr("w:lastRow", _outStream);
    }



    if (m_has_firstColumn_attr)
    {
        m_firstColumn_attr->toXmlAttr("w:firstColumn", _outStream);
    }



    if (m_has_lastColumn_attr)
    {
        m_lastColumn_attr->toXmlAttr("w:lastColumn", _outStream);
    }



    if (m_has_noHBand_attr)
    {
        m_noHBand_attr->toXmlAttr("w:noHBand", _outStream);
    }



    if (m_has_noVBand_attr)
    {
        m_noVBand_attr->toXmlAttr("w:noVBand", _outStream);
    }



    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_TblLook& CT_TblLook::default_instance()
{
    if (!CT_TblLook::default_instance_)
    {
        CT_TblLook::default_instance_ = new CT_TblLook();
    }
    return *CT_TblLook::default_instance_;
}

bool CT_TblLook::has_firstRow_attr() const
{
    return m_has_firstRow_attr;
}

void CT_TblLook::set_firstRow_attr(const ns_s::ST_OnOff& _firstRow_attr)
{
    m_has_firstRow_attr = true;
    m_firstRow_attr = new ns_s::ST_OnOff(_firstRow_attr);
}

const ns_s::ST_OnOff& CT_TblLook::get_firstRow_attr() const
{
    if (m_firstRow_attr)
    {
        return *m_firstRow_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

bool CT_TblLook::has_lastRow_attr() const
{
    return m_has_lastRow_attr;
}

void CT_TblLook::set_lastRow_attr(const ns_s::ST_OnOff& _lastRow_attr)
{
    m_has_lastRow_attr = true;
    m_lastRow_attr = new ns_s::ST_OnOff(_lastRow_attr);
}

const ns_s::ST_OnOff& CT_TblLook::get_lastRow_attr() const
{
    if (m_lastRow_attr)
    {
        return *m_lastRow_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

bool CT_TblLook::has_firstColumn_attr() const
{
    return m_has_firstColumn_attr;
}

void CT_TblLook::set_firstColumn_attr(const ns_s::ST_OnOff& _firstColumn_attr)
{
    m_has_firstColumn_attr = true;
    m_firstColumn_attr = new ns_s::ST_OnOff(_firstColumn_attr);
}

const ns_s::ST_OnOff& CT_TblLook::get_firstColumn_attr() const
{
    if (m_firstColumn_attr)
    {
        return *m_firstColumn_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

bool CT_TblLook::has_lastColumn_attr() const
{
    return m_has_lastColumn_attr;
}

void CT_TblLook::set_lastColumn_attr(const ns_s::ST_OnOff& _lastColumn_attr)
{
    m_has_lastColumn_attr = true;
    m_lastColumn_attr = new ns_s::ST_OnOff(_lastColumn_attr);
}

const ns_s::ST_OnOff& CT_TblLook::get_lastColumn_attr() const
{
    if (m_lastColumn_attr)
    {
        return *m_lastColumn_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

bool CT_TblLook::has_noHBand_attr() const
{
    return m_has_noHBand_attr;
}

void CT_TblLook::set_noHBand_attr(const ns_s::ST_OnOff& _noHBand_attr)
{
    m_has_noHBand_attr = true;
    m_noHBand_attr = new ns_s::ST_OnOff(_noHBand_attr);
}

const ns_s::ST_OnOff& CT_TblLook::get_noHBand_attr() const
{
    if (m_noHBand_attr)
    {
        return *m_noHBand_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

bool CT_TblLook::has_noVBand_attr() const
{
    return m_has_noVBand_attr;
}

void CT_TblLook::set_noVBand_attr(const ns_s::ST_OnOff& _noVBand_attr)
{
    m_has_noVBand_attr = true;
    m_noVBand_attr = new ns_s::ST_OnOff(_noVBand_attr);
}

const ns_s::ST_OnOff& CT_TblLook::get_noVBand_attr() const
{
    if (m_noVBand_attr)
    {
        return *m_noVBand_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

bool CT_TblLook::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_TblLook::set_val_attr(const ST_ShortHexNumber& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ST_ShortHexNumber(_val_attr);
}

const ST_ShortHexNumber& CT_TblLook::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ST_ShortHexNumber::default_instance();
}

CT_TblLook* CT_TblLook::default_instance_ = NULL;

// CT_FtnPos
CT_FtnPos::CT_FtnPos()
    :m_has_val_attr(false),
     m_val_attr(NULL)
{
}
CT_FtnPos::~CT_FtnPos()
{
    clear();
}
void CT_FtnPos::clear()
{
    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }

}

void CT_FtnPos::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_val_attr);
    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_FtnPos& CT_FtnPos::default_instance()
{
    if (!CT_FtnPos::default_instance_)
    {
        CT_FtnPos::default_instance_ = new CT_FtnPos();
    }
    return *CT_FtnPos::default_instance_;
}

bool CT_FtnPos::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_FtnPos::set_val_attr(const ST_FtnPos& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ST_FtnPos(_val_attr);
}

const ST_FtnPos& CT_FtnPos::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ST_FtnPos::default_instance();
}

CT_FtnPos* CT_FtnPos::default_instance_ = NULL;

// CT_EdnPos
CT_EdnPos::CT_EdnPos()
    :m_has_val_attr(false),
     m_val_attr(NULL)
{
}
CT_EdnPos::~CT_EdnPos()
{
    clear();
}
void CT_EdnPos::clear()
{
    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }

}

void CT_EdnPos::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_val_attr);
    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_EdnPos& CT_EdnPos::default_instance()
{
    if (!CT_EdnPos::default_instance_)
    {
        CT_EdnPos::default_instance_ = new CT_EdnPos();
    }
    return *CT_EdnPos::default_instance_;
}

bool CT_EdnPos::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_EdnPos::set_val_attr(const ST_EdnPos& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ST_EdnPos(_val_attr);
}

const ST_EdnPos& CT_EdnPos::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ST_EdnPos::default_instance();
}

CT_EdnPos* CT_EdnPos::default_instance_ = NULL;

// CT_NumFmt
CT_NumFmt::CT_NumFmt()
    :m_has_val_attr(false),
     m_val_attr(NULL),
     m_has_format_attr(false),
     m_format_attr(NULL)
{
}
CT_NumFmt::~CT_NumFmt()
{
    clear();
}
void CT_NumFmt::clear()
{
    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }


    m_has_format_attr = false;

    if (m_format_attr)
    {
        delete m_format_attr;
        m_format_attr = NULL;
    }

}

void CT_NumFmt::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_val_attr);
    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }



    if (m_has_format_attr)
    {
        m_format_attr->toXmlAttr("w:format", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_NumFmt& CT_NumFmt::default_instance()
{
    if (!CT_NumFmt::default_instance_)
    {
        CT_NumFmt::default_instance_ = new CT_NumFmt();
    }
    return *CT_NumFmt::default_instance_;
}

bool CT_NumFmt::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_NumFmt::set_val_attr(const ST_NumberFormat& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ST_NumberFormat(_val_attr);
}

const ST_NumberFormat& CT_NumFmt::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ST_NumberFormat::default_instance();
}

bool CT_NumFmt::has_format_attr() const
{
    return m_has_format_attr;
}

void CT_NumFmt::set_format_attr(const ns_s::ST_String& _format_attr)
{
    m_has_format_attr = true;
    m_format_attr = new ns_s::ST_String(_format_attr);
}

const ns_s::ST_String& CT_NumFmt::get_format_attr() const
{
    if (m_format_attr)
    {
        return *m_format_attr;
    }
    return ns_s::ST_String::default_instance();
}

CT_NumFmt* CT_NumFmt::default_instance_ = NULL;

// CT_NumRestart
CT_NumRestart::CT_NumRestart()
    :m_has_val_attr(false),
     m_val_attr(NULL)
{
}
CT_NumRestart::~CT_NumRestart()
{
    clear();
}
void CT_NumRestart::clear()
{
    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }

}

void CT_NumRestart::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_val_attr);
    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_NumRestart& CT_NumRestart::default_instance()
{
    if (!CT_NumRestart::default_instance_)
    {
        CT_NumRestart::default_instance_ = new CT_NumRestart();
    }
    return *CT_NumRestart::default_instance_;
}

bool CT_NumRestart::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_NumRestart::set_val_attr(const ST_RestartNumber& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ST_RestartNumber(_val_attr);
}

const ST_RestartNumber& CT_NumRestart::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ST_RestartNumber::default_instance();
}

CT_NumRestart* CT_NumRestart::default_instance_ = NULL;

// CT_FtnEdnRef
CT_FtnEdnRef::CT_FtnEdnRef()
    :m_has_customMarkFollows_attr(false),
     m_customMarkFollows_attr(NULL),
     m_has_id_attr(false),
     m_id_attr(NULL)
{
}
CT_FtnEdnRef::~CT_FtnEdnRef()
{
    clear();
}
void CT_FtnEdnRef::clear()
{
    m_has_customMarkFollows_attr = false;

    if (m_customMarkFollows_attr)
    {
        delete m_customMarkFollows_attr;
        m_customMarkFollows_attr = NULL;
    }


    m_has_id_attr = false;

    if (m_id_attr)
    {
        delete m_id_attr;
        m_id_attr = NULL;
    }

}

void CT_FtnEdnRef::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_customMarkFollows_attr)
    {
        m_customMarkFollows_attr->toXmlAttr("w:customMarkFollows", _outStream);
    }


    assert(m_has_id_attr);
    if (m_has_id_attr)
    {
        m_id_attr->toXmlAttr("w:id", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_FtnEdnRef& CT_FtnEdnRef::default_instance()
{
    if (!CT_FtnEdnRef::default_instance_)
    {
        CT_FtnEdnRef::default_instance_ = new CT_FtnEdnRef();
    }
    return *CT_FtnEdnRef::default_instance_;
}

bool CT_FtnEdnRef::has_customMarkFollows_attr() const
{
    return m_has_customMarkFollows_attr;
}

void CT_FtnEdnRef::set_customMarkFollows_attr(const ns_s::ST_OnOff& _customMarkFollows_attr)
{
    m_has_customMarkFollows_attr = true;
    m_customMarkFollows_attr = new ns_s::ST_OnOff(_customMarkFollows_attr);
}

const ns_s::ST_OnOff& CT_FtnEdnRef::get_customMarkFollows_attr() const
{
    if (m_customMarkFollows_attr)
    {
        return *m_customMarkFollows_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

bool CT_FtnEdnRef::has_id_attr() const
{
    return m_has_id_attr;
}

void CT_FtnEdnRef::set_id_attr(const ST_DecimalNumber& _id_attr)
{
    m_has_id_attr = true;
    m_id_attr = new ST_DecimalNumber(_id_attr);
}

const ST_DecimalNumber& CT_FtnEdnRef::get_id_attr() const
{
    if (m_id_attr)
    {
        return *m_id_attr;
    }
    return ST_DecimalNumber::default_instance();
}

CT_FtnEdnRef* CT_FtnEdnRef::default_instance_ = NULL;

// CT_FtnEdnSepRef
CT_FtnEdnSepRef::CT_FtnEdnSepRef()
    :m_has_id_attr(false),
     m_id_attr(NULL)
{
}
CT_FtnEdnSepRef::~CT_FtnEdnSepRef()
{
    clear();
}
void CT_FtnEdnSepRef::clear()
{
    m_has_id_attr = false;

    if (m_id_attr)
    {
        delete m_id_attr;
        m_id_attr = NULL;
    }

}

void CT_FtnEdnSepRef::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_id_attr);
    if (m_has_id_attr)
    {
        m_id_attr->toXmlAttr("w:id", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_FtnEdnSepRef& CT_FtnEdnSepRef::default_instance()
{
    if (!CT_FtnEdnSepRef::default_instance_)
    {
        CT_FtnEdnSepRef::default_instance_ = new CT_FtnEdnSepRef();
    }
    return *CT_FtnEdnSepRef::default_instance_;
}

bool CT_FtnEdnSepRef::has_id_attr() const
{
    return m_has_id_attr;
}

void CT_FtnEdnSepRef::set_id_attr(const ST_DecimalNumber& _id_attr)
{
    m_has_id_attr = true;
    m_id_attr = new ST_DecimalNumber(_id_attr);
}

const ST_DecimalNumber& CT_FtnEdnSepRef::get_id_attr() const
{
    if (m_id_attr)
    {
        return *m_id_attr;
    }
    return ST_DecimalNumber::default_instance();
}

CT_FtnEdnSepRef* CT_FtnEdnSepRef::default_instance_ = NULL;

// CT_FtnEdn
CT_FtnEdn::CT_FtnEdn()
    :m_has_type_attr(false),
     m_type_attr(NULL),
     m_has_id_attr(false),
     m_id_attr(NULL)
{
}
CT_FtnEdn::~CT_FtnEdn()
{
    clear();
}
CT_CustomXmlBlock* CT_FtnEdn::add_customXml()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_CustomXmlBlock* pNewChild = pChildGroup->mutable_customXml();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_SdtBlock* CT_FtnEdn::add_sdt()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_SdtBlock* pNewChild = pChildGroup->mutable_sdt();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_P* CT_FtnEdn::add_p()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_P* pNewChild = pChildGroup->mutable_p();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_Tbl* CT_FtnEdn::add_tbl()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Tbl* pNewChild = pChildGroup->mutable_tbl();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_ProofErr* CT_FtnEdn::add_proofErr()
{
    ChildGroup_2 *pChildGroup = new ChildGroup_2();
    CT_ProofErr* pNewChild = pChildGroup->mutable_proofErr();
    m_childGroupList_2.push_back(pChildGroup);
    return pNewChild;
}

CT_PermStart* CT_FtnEdn::add_permStart()
{
    ChildGroup_2 *pChildGroup = new ChildGroup_2();
    CT_PermStart* pNewChild = pChildGroup->mutable_permStart();
    m_childGroupList_2.push_back(pChildGroup);
    return pNewChild;
}

CT_Perm* CT_FtnEdn::add_permEnd()
{
    ChildGroup_2 *pChildGroup = new ChildGroup_2();
    CT_Perm* pNewChild = pChildGroup->mutable_permEnd();
    m_childGroupList_2.push_back(pChildGroup);
    return pNewChild;
}

CT_Bookmark* CT_FtnEdn::add_bookmarkStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_Bookmark* pNewChild = pChildGroup->mutable_bookmarkStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MarkupRange* CT_FtnEdn::add_bookmarkEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MarkupRange* pNewChild = pChildGroup->mutable_bookmarkEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MoveBookmark* CT_FtnEdn::add_moveFromRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MoveBookmark* pNewChild = pChildGroup->mutable_moveFromRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MarkupRange* CT_FtnEdn::add_moveFromRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MarkupRange* pNewChild = pChildGroup->mutable_moveFromRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MoveBookmark* CT_FtnEdn::add_moveToRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MoveBookmark* pNewChild = pChildGroup->mutable_moveToRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MarkupRange* CT_FtnEdn::add_moveToRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MarkupRange* pNewChild = pChildGroup->mutable_moveToRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MarkupRange* CT_FtnEdn::add_commentRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MarkupRange* pNewChild = pChildGroup->mutable_commentRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MarkupRange* CT_FtnEdn::add_commentRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MarkupRange* pNewChild = pChildGroup->mutable_commentRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_TrackChange* CT_FtnEdn::add_customXmlInsRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_TrackChange* pNewChild = pChildGroup->mutable_customXmlInsRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_Markup* CT_FtnEdn::add_customXmlInsRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_Markup* pNewChild = pChildGroup->mutable_customXmlInsRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_TrackChange* CT_FtnEdn::add_customXmlDelRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_TrackChange* pNewChild = pChildGroup->mutable_customXmlDelRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_Markup* CT_FtnEdn::add_customXmlDelRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_Markup* pNewChild = pChildGroup->mutable_customXmlDelRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_TrackChange* CT_FtnEdn::add_customXmlMoveFromRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_TrackChange* pNewChild = pChildGroup->mutable_customXmlMoveFromRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_Markup* CT_FtnEdn::add_customXmlMoveFromRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_Markup* pNewChild = pChildGroup->mutable_customXmlMoveFromRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_TrackChange* CT_FtnEdn::add_customXmlMoveToRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_TrackChange* pNewChild = pChildGroup->mutable_customXmlMoveToRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_Markup* CT_FtnEdn::add_customXmlMoveToRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_Markup* pNewChild = pChildGroup->mutable_customXmlMoveToRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_RunTrackChange* CT_FtnEdn::add_ins()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_RunTrackChange* pNewChild = pChildGroup->mutable_ins();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_RunTrackChange* CT_FtnEdn::add_del()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_RunTrackChange* pNewChild = pChildGroup->mutable_del();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_RunTrackChange* CT_FtnEdn::add_moveFrom()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_RunTrackChange* pNewChild = pChildGroup->mutable_moveFrom();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_RunTrackChange* CT_FtnEdn::add_moveTo()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_RunTrackChange* pNewChild = pChildGroup->mutable_moveTo();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

ns_m::CT_OMathPara* CT_FtnEdn::add_m_oMathPara()
{
    ChildGroup_4 *pChildGroup = new ChildGroup_4();
    ns_m::CT_OMathPara* pNewChild = pChildGroup->mutable_m_oMathPara();
    m_childGroupList_4.push_back(pChildGroup);
    return pNewChild;
}

ns_m::CT_OMath* CT_FtnEdn::add_m_oMath()
{
    ChildGroup_4 *pChildGroup = new ChildGroup_4();
    ns_m::CT_OMath* pNewChild = pChildGroup->mutable_m_oMath();
    m_childGroupList_4.push_back(pChildGroup);
    return pNewChild;
}

CT_AltChunk* CT_FtnEdn::add_altChunk()
{
    ChildGroup_4 *pChildGroup = new ChildGroup_4();
    CT_AltChunk* pNewChild = pChildGroup->mutable_altChunk();
    m_childGroupList_4.push_back(pChildGroup);
    return pNewChild;
}

void CT_FtnEdn::clear()
{
    m_has_type_attr = false;

    if (m_type_attr)
    {
        delete m_type_attr;
        m_type_attr = NULL;
    }


    m_has_id_attr = false;

    if (m_id_attr)
    {
        delete m_id_attr;
        m_id_attr = NULL;
    }


    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }

    {
        vector<ChildGroup_2*>::iterator iter;
        for (iter = m_childGroupList_2.begin(); iter != m_childGroupList_2.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_2.clear();
    }

    {
        vector<ChildGroup_3*>::iterator iter;
        for (iter = m_childGroupList_3.begin(); iter != m_childGroupList_3.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_3.clear();
    }

    {
        vector<ChildGroup_4*>::iterator iter;
        for (iter = m_childGroupList_4.begin(); iter != m_childGroupList_4.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_4.clear();
    }
}

void CT_FtnEdn::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_type_attr)
    {
        m_type_attr->toXmlAttr("w:type", _outStream);
    }


    assert(m_has_id_attr);
    if (m_has_id_attr)
    {
        m_id_attr->toXmlAttr("w:id", _outStream);
    }

    _outStream << ">";

    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_customXml())
            {
                (*iter)->get_customXml().toXmlElem("w:customXml", "", _outStream);
            }


            else if ((*iter)->has_sdt())
            {
                (*iter)->get_sdt().toXmlElem("w:sdt", "", _outStream);
            }


            else if ((*iter)->has_p())
            {
                (*iter)->get_p().toXmlElem("w:p", "", _outStream);
            }


            else if ((*iter)->has_tbl())
            {
                (*iter)->get_tbl().toXmlElem("w:tbl", "", _outStream);
            }


        }
    }

    {
        vector<ChildGroup_2*>::const_iterator iter;
        for (iter = m_childGroupList_2.begin(); iter != m_childGroupList_2.end(); ++iter)
        {
            if ((*iter)->has_proofErr())
            {
                (*iter)->get_proofErr().toXmlElem("w:proofErr", "", _outStream);
            }


            else if ((*iter)->has_permStart())
            {
                (*iter)->get_permStart().toXmlElem("w:permStart", "", _outStream);
            }


            else if ((*iter)->has_permEnd())
            {
                (*iter)->get_permEnd().toXmlElem("w:permEnd", "", _outStream);
            }


        }
    }

    {
        vector<ChildGroup_3*>::const_iterator iter;
        for (iter = m_childGroupList_3.begin(); iter != m_childGroupList_3.end(); ++iter)
        {
            if ((*iter)->has_bookmarkStart())
            {
                (*iter)->get_bookmarkStart().toXmlElem("w:bookmarkStart", "", _outStream);
            }


            else if ((*iter)->has_bookmarkEnd())
            {
                (*iter)->get_bookmarkEnd().toXmlElem("w:bookmarkEnd", "", _outStream);
            }


            else if ((*iter)->has_moveFromRangeStart())
            {
                (*iter)->get_moveFromRangeStart().toXmlElem("w:moveFromRangeStart", "", _outStream);
            }


            else if ((*iter)->has_moveFromRangeEnd())
            {
                (*iter)->get_moveFromRangeEnd().toXmlElem("w:moveFromRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_moveToRangeStart())
            {
                (*iter)->get_moveToRangeStart().toXmlElem("w:moveToRangeStart", "", _outStream);
            }


            else if ((*iter)->has_moveToRangeEnd())
            {
                (*iter)->get_moveToRangeEnd().toXmlElem("w:moveToRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_commentRangeStart())
            {
                (*iter)->get_commentRangeStart().toXmlElem("w:commentRangeStart", "", _outStream);
            }


            else if ((*iter)->has_commentRangeEnd())
            {
                (*iter)->get_commentRangeEnd().toXmlElem("w:commentRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_customXmlInsRangeStart())
            {
                (*iter)->get_customXmlInsRangeStart().toXmlElem("w:customXmlInsRangeStart", "", _outStream);
            }


            else if ((*iter)->has_customXmlInsRangeEnd())
            {
                (*iter)->get_customXmlInsRangeEnd().toXmlElem("w:customXmlInsRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_customXmlDelRangeStart())
            {
                (*iter)->get_customXmlDelRangeStart().toXmlElem("w:customXmlDelRangeStart", "", _outStream);
            }


            else if ((*iter)->has_customXmlDelRangeEnd())
            {
                (*iter)->get_customXmlDelRangeEnd().toXmlElem("w:customXmlDelRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_customXmlMoveFromRangeStart())
            {
                (*iter)->get_customXmlMoveFromRangeStart().toXmlElem("w:customXmlMoveFromRangeStart", "", _outStream);
            }


            else if ((*iter)->has_customXmlMoveFromRangeEnd())
            {
                (*iter)->get_customXmlMoveFromRangeEnd().toXmlElem("w:customXmlMoveFromRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_customXmlMoveToRangeStart())
            {
                (*iter)->get_customXmlMoveToRangeStart().toXmlElem("w:customXmlMoveToRangeStart", "", _outStream);
            }


            else if ((*iter)->has_customXmlMoveToRangeEnd())
            {
                (*iter)->get_customXmlMoveToRangeEnd().toXmlElem("w:customXmlMoveToRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_ins())
            {
                (*iter)->get_ins().toXmlElem("w:ins", "", _outStream);
            }


            else if ((*iter)->has_del())
            {
                (*iter)->get_del().toXmlElem("w:del", "", _outStream);
            }


            else if ((*iter)->has_moveFrom())
            {
                (*iter)->get_moveFrom().toXmlElem("w:moveFrom", "", _outStream);
            }


            else if ((*iter)->has_moveTo())
            {
                (*iter)->get_moveTo().toXmlElem("w:moveTo", "", _outStream);
            }


        }
    }

    {
        vector<ChildGroup_4*>::const_iterator iter;
        for (iter = m_childGroupList_4.begin(); iter != m_childGroupList_4.end(); ++iter)
        {
            if ((*iter)->has_m_oMathPara())
            {
                (*iter)->get_m_oMathPara().toXmlElem("m:oMathPara", "", _outStream);
            }


            else if ((*iter)->has_m_oMath())
            {
                (*iter)->get_m_oMath().toXmlElem("m:oMath", "", _outStream);
            }


            else if ((*iter)->has_altChunk())
            {
                (*iter)->get_altChunk().toXmlElem("w:altChunk", "", _outStream);
            }


        }
    }

    _outStream << "</" << _elemName << ">";
}

const CT_FtnEdn& CT_FtnEdn::default_instance()
{
    if (!CT_FtnEdn::default_instance_)
    {
        CT_FtnEdn::default_instance_ = new CT_FtnEdn();
    }
    return *CT_FtnEdn::default_instance_;
}

bool CT_FtnEdn::has_type_attr() const
{
    return m_has_type_attr;
}

void CT_FtnEdn::set_type_attr(const ST_FtnEdn& _type_attr)
{
    m_has_type_attr = true;
    m_type_attr = new ST_FtnEdn(_type_attr);
}

const ST_FtnEdn& CT_FtnEdn::get_type_attr() const
{
    if (m_type_attr)
    {
        return *m_type_attr;
    }
    return ST_FtnEdn::default_instance();
}

bool CT_FtnEdn::has_id_attr() const
{
    return m_has_id_attr;
}

void CT_FtnEdn::set_id_attr(const ST_DecimalNumber& _id_attr)
{
    m_has_id_attr = true;
    m_id_attr = new ST_DecimalNumber(_id_attr);
}

const ST_DecimalNumber& CT_FtnEdn::get_id_attr() const
{
    if (m_id_attr)
    {
        return *m_id_attr;
    }
    return ST_DecimalNumber::default_instance();
}


// CT_FtnEdn::ChildGroup_1
CT_FtnEdn::ChildGroup_1::ChildGroup_1()
    :m_has_customXml(false),
     m_customXml(NULL),
     m_has_sdt(false),
     m_sdt(NULL),
     m_has_p(false),
     m_p(NULL),
     m_has_tbl(false),
     m_tbl(NULL)
{
}
bool CT_FtnEdn::ChildGroup_1::has_customXml() const
{
    return m_has_customXml;
}

CT_CustomXmlBlock* CT_FtnEdn::ChildGroup_1::mutable_customXml()
{

    m_has_sdt = false;

    if (m_sdt)
    {
        delete m_sdt;
        m_sdt = NULL;
    }
    ;

    m_has_p = false;

    if (m_p)
    {
        delete m_p;
        m_p = NULL;
    }
    ;

    m_has_tbl = false;

    if (m_tbl)
    {
        delete m_tbl;
        m_tbl = NULL;
    }
    ;

    m_has_customXml = true;
    if (!m_customXml)
    {
        m_customXml = new CT_CustomXmlBlock();
    }
    return m_customXml;
}

const CT_CustomXmlBlock& CT_FtnEdn::ChildGroup_1::get_customXml() const
{
    if (m_customXml)
    {
        return *m_customXml;
    }
    return CT_CustomXmlBlock::default_instance();
}

bool CT_FtnEdn::ChildGroup_1::has_sdt() const
{
    return m_has_sdt;
}

CT_SdtBlock* CT_FtnEdn::ChildGroup_1::mutable_sdt()
{

    m_has_customXml = false;

    if (m_customXml)
    {
        delete m_customXml;
        m_customXml = NULL;
    }
    ;

    m_has_p = false;

    if (m_p)
    {
        delete m_p;
        m_p = NULL;
    }
    ;

    m_has_tbl = false;

    if (m_tbl)
    {
        delete m_tbl;
        m_tbl = NULL;
    }
    ;

    m_has_sdt = true;
    if (!m_sdt)
    {
        m_sdt = new CT_SdtBlock();
    }
    return m_sdt;
}

const CT_SdtBlock& CT_FtnEdn::ChildGroup_1::get_sdt() const
{
    if (m_sdt)
    {
        return *m_sdt;
    }
    return CT_SdtBlock::default_instance();
}

bool CT_FtnEdn::ChildGroup_1::has_p() const
{
    return m_has_p;
}

CT_P* CT_FtnEdn::ChildGroup_1::mutable_p()
{

    m_has_customXml = false;

    if (m_customXml)
    {
        delete m_customXml;
        m_customXml = NULL;
    }
    ;

    m_has_sdt = false;

    if (m_sdt)
    {
        delete m_sdt;
        m_sdt = NULL;
    }
    ;

    m_has_tbl = false;

    if (m_tbl)
    {
        delete m_tbl;
        m_tbl = NULL;
    }
    ;

    m_has_p = true;
    if (!m_p)
    {
        m_p = new CT_P();
    }
    return m_p;
}

const CT_P& CT_FtnEdn::ChildGroup_1::get_p() const
{
    if (m_p)
    {
        return *m_p;
    }
    return CT_P::default_instance();
}

bool CT_FtnEdn::ChildGroup_1::has_tbl() const
{
    return m_has_tbl;
}

CT_Tbl* CT_FtnEdn::ChildGroup_1::mutable_tbl()
{

    m_has_customXml = false;

    if (m_customXml)
    {
        delete m_customXml;
        m_customXml = NULL;
    }
    ;

    m_has_sdt = false;

    if (m_sdt)
    {
        delete m_sdt;
        m_sdt = NULL;
    }
    ;

    m_has_p = false;

    if (m_p)
    {
        delete m_p;
        m_p = NULL;
    }
    ;

    m_has_tbl = true;
    if (!m_tbl)
    {
        m_tbl = new CT_Tbl();
    }
    return m_tbl;
}

const CT_Tbl& CT_FtnEdn::ChildGroup_1::get_tbl() const
{
    if (m_tbl)
    {
        return *m_tbl;
    }
    return CT_Tbl::default_instance();
}


// CT_FtnEdn::ChildGroup_2
CT_FtnEdn::ChildGroup_2::ChildGroup_2()
    :m_has_proofErr(false),
     m_proofErr(NULL),
     m_has_permStart(false),
     m_permStart(NULL),
     m_has_permEnd(false),
     m_permEnd(NULL)
{
}
bool CT_FtnEdn::ChildGroup_2::has_proofErr() const
{
    return m_has_proofErr;
}

CT_ProofErr* CT_FtnEdn::ChildGroup_2::mutable_proofErr()
{

    m_has_permStart = false;

    if (m_permStart)
    {
        delete m_permStart;
        m_permStart = NULL;
    }
    ;

    m_has_permEnd = false;

    if (m_permEnd)
    {
        delete m_permEnd;
        m_permEnd = NULL;
    }
    ;

    m_has_proofErr = true;
    if (!m_proofErr)
    {
        m_proofErr = new CT_ProofErr();
    }
    return m_proofErr;
}

const CT_ProofErr& CT_FtnEdn::ChildGroup_2::get_proofErr() const
{
    if (m_proofErr)
    {
        return *m_proofErr;
    }
    return CT_ProofErr::default_instance();
}

bool CT_FtnEdn::ChildGroup_2::has_permStart() const
{
    return m_has_permStart;
}

CT_PermStart* CT_FtnEdn::ChildGroup_2::mutable_permStart()
{

    m_has_proofErr = false;

    if (m_proofErr)
    {
        delete m_proofErr;
        m_proofErr = NULL;
    }
    ;

    m_has_permEnd = false;

    if (m_permEnd)
    {
        delete m_permEnd;
        m_permEnd = NULL;
    }
    ;

    m_has_permStart = true;
    if (!m_permStart)
    {
        m_permStart = new CT_PermStart();
    }
    return m_permStart;
}

const CT_PermStart& CT_FtnEdn::ChildGroup_2::get_permStart() const
{
    if (m_permStart)
    {
        return *m_permStart;
    }
    return CT_PermStart::default_instance();
}

bool CT_FtnEdn::ChildGroup_2::has_permEnd() const
{
    return m_has_permEnd;
}

CT_Perm* CT_FtnEdn::ChildGroup_2::mutable_permEnd()
{

    m_has_proofErr = false;

    if (m_proofErr)
    {
        delete m_proofErr;
        m_proofErr = NULL;
    }
    ;

    m_has_permStart = false;

    if (m_permStart)
    {
        delete m_permStart;
        m_permStart = NULL;
    }
    ;

    m_has_permEnd = true;
    if (!m_permEnd)
    {
        m_permEnd = new CT_Perm();
    }
    return m_permEnd;
}

const CT_Perm& CT_FtnEdn::ChildGroup_2::get_permEnd() const
{
    if (m_permEnd)
    {
        return *m_permEnd;
    }
    return CT_Perm::default_instance();
}


// CT_FtnEdn::ChildGroup_3
CT_FtnEdn::ChildGroup_3::ChildGroup_3()
    :m_has_bookmarkStart(false),
     m_bookmarkStart(NULL),
     m_has_bookmarkEnd(false),
     m_bookmarkEnd(NULL),
     m_has_moveFromRangeStart(false),
     m_moveFromRangeStart(NULL),
     m_has_moveFromRangeEnd(false),
     m_moveFromRangeEnd(NULL),
     m_has_moveToRangeStart(false),
     m_moveToRangeStart(NULL),
     m_has_moveToRangeEnd(false),
     m_moveToRangeEnd(NULL),
     m_has_commentRangeStart(false),
     m_commentRangeStart(NULL),
     m_has_commentRangeEnd(false),
     m_commentRangeEnd(NULL),
     m_has_customXmlInsRangeStart(false),
     m_customXmlInsRangeStart(NULL),
     m_has_customXmlInsRangeEnd(false),
     m_customXmlInsRangeEnd(NULL),
     m_has_customXmlDelRangeStart(false),
     m_customXmlDelRangeStart(NULL),
     m_has_customXmlDelRangeEnd(false),
     m_customXmlDelRangeEnd(NULL),
     m_has_customXmlMoveFromRangeStart(false),
     m_customXmlMoveFromRangeStart(NULL),
     m_has_customXmlMoveFromRangeEnd(false),
     m_customXmlMoveFromRangeEnd(NULL),
     m_has_customXmlMoveToRangeStart(false),
     m_customXmlMoveToRangeStart(NULL),
     m_has_customXmlMoveToRangeEnd(false),
     m_customXmlMoveToRangeEnd(NULL),
     m_has_ins(false),
     m_ins(NULL),
     m_has_del(false),
     m_del(NULL),
     m_has_moveFrom(false),
     m_moveFrom(NULL),
     m_has_moveTo(false),
     m_moveTo(NULL)
{
}
bool CT_FtnEdn::ChildGroup_3::has_bookmarkStart() const
{
    return m_has_bookmarkStart;
}

CT_Bookmark* CT_FtnEdn::ChildGroup_3::mutable_bookmarkStart()
{

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_bookmarkStart = true;
    if (!m_bookmarkStart)
    {
        m_bookmarkStart = new CT_Bookmark();
    }
    return m_bookmarkStart;
}

const CT_Bookmark& CT_FtnEdn::ChildGroup_3::get_bookmarkStart() const
{
    if (m_bookmarkStart)
    {
        return *m_bookmarkStart;
    }
    return CT_Bookmark::default_instance();
}

bool CT_FtnEdn::ChildGroup_3::has_bookmarkEnd() const
{
    return m_has_bookmarkEnd;
}

CT_MarkupRange* CT_FtnEdn::ChildGroup_3::mutable_bookmarkEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_bookmarkEnd = true;
    if (!m_bookmarkEnd)
    {
        m_bookmarkEnd = new CT_MarkupRange();
    }
    return m_bookmarkEnd;
}

const CT_MarkupRange& CT_FtnEdn::ChildGroup_3::get_bookmarkEnd() const
{
    if (m_bookmarkEnd)
    {
        return *m_bookmarkEnd;
    }
    return CT_MarkupRange::default_instance();
}

bool CT_FtnEdn::ChildGroup_3::has_moveFromRangeStart() const
{
    return m_has_moveFromRangeStart;
}

CT_MoveBookmark* CT_FtnEdn::ChildGroup_3::mutable_moveFromRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_moveFromRangeStart = true;
    if (!m_moveFromRangeStart)
    {
        m_moveFromRangeStart = new CT_MoveBookmark();
    }
    return m_moveFromRangeStart;
}

const CT_MoveBookmark& CT_FtnEdn::ChildGroup_3::get_moveFromRangeStart() const
{
    if (m_moveFromRangeStart)
    {
        return *m_moveFromRangeStart;
    }
    return CT_MoveBookmark::default_instance();
}

bool CT_FtnEdn::ChildGroup_3::has_moveFromRangeEnd() const
{
    return m_has_moveFromRangeEnd;
}

CT_MarkupRange* CT_FtnEdn::ChildGroup_3::mutable_moveFromRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_moveFromRangeEnd = true;
    if (!m_moveFromRangeEnd)
    {
        m_moveFromRangeEnd = new CT_MarkupRange();
    }
    return m_moveFromRangeEnd;
}

const CT_MarkupRange& CT_FtnEdn::ChildGroup_3::get_moveFromRangeEnd() const
{
    if (m_moveFromRangeEnd)
    {
        return *m_moveFromRangeEnd;
    }
    return CT_MarkupRange::default_instance();
}

bool CT_FtnEdn::ChildGroup_3::has_moveToRangeStart() const
{
    return m_has_moveToRangeStart;
}

CT_MoveBookmark* CT_FtnEdn::ChildGroup_3::mutable_moveToRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_moveToRangeStart = true;
    if (!m_moveToRangeStart)
    {
        m_moveToRangeStart = new CT_MoveBookmark();
    }
    return m_moveToRangeStart;
}

const CT_MoveBookmark& CT_FtnEdn::ChildGroup_3::get_moveToRangeStart() const
{
    if (m_moveToRangeStart)
    {
        return *m_moveToRangeStart;
    }
    return CT_MoveBookmark::default_instance();
}

bool CT_FtnEdn::ChildGroup_3::has_moveToRangeEnd() const
{
    return m_has_moveToRangeEnd;
}

CT_MarkupRange* CT_FtnEdn::ChildGroup_3::mutable_moveToRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_moveToRangeEnd = true;
    if (!m_moveToRangeEnd)
    {
        m_moveToRangeEnd = new CT_MarkupRange();
    }
    return m_moveToRangeEnd;
}

const CT_MarkupRange& CT_FtnEdn::ChildGroup_3::get_moveToRangeEnd() const
{
    if (m_moveToRangeEnd)
    {
        return *m_moveToRangeEnd;
    }
    return CT_MarkupRange::default_instance();
}

bool CT_FtnEdn::ChildGroup_3::has_commentRangeStart() const
{
    return m_has_commentRangeStart;
}

CT_MarkupRange* CT_FtnEdn::ChildGroup_3::mutable_commentRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_commentRangeStart = true;
    if (!m_commentRangeStart)
    {
        m_commentRangeStart = new CT_MarkupRange();
    }
    return m_commentRangeStart;
}

const CT_MarkupRange& CT_FtnEdn::ChildGroup_3::get_commentRangeStart() const
{
    if (m_commentRangeStart)
    {
        return *m_commentRangeStart;
    }
    return CT_MarkupRange::default_instance();
}

bool CT_FtnEdn::ChildGroup_3::has_commentRangeEnd() const
{
    return m_has_commentRangeEnd;
}

CT_MarkupRange* CT_FtnEdn::ChildGroup_3::mutable_commentRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_commentRangeEnd = true;
    if (!m_commentRangeEnd)
    {
        m_commentRangeEnd = new CT_MarkupRange();
    }
    return m_commentRangeEnd;
}

const CT_MarkupRange& CT_FtnEdn::ChildGroup_3::get_commentRangeEnd() const
{
    if (m_commentRangeEnd)
    {
        return *m_commentRangeEnd;
    }
    return CT_MarkupRange::default_instance();
}

bool CT_FtnEdn::ChildGroup_3::has_customXmlInsRangeStart() const
{
    return m_has_customXmlInsRangeStart;
}

CT_TrackChange* CT_FtnEdn::ChildGroup_3::mutable_customXmlInsRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = true;
    if (!m_customXmlInsRangeStart)
    {
        m_customXmlInsRangeStart = new CT_TrackChange();
    }
    return m_customXmlInsRangeStart;
}

const CT_TrackChange& CT_FtnEdn::ChildGroup_3::get_customXmlInsRangeStart() const
{
    if (m_customXmlInsRangeStart)
    {
        return *m_customXmlInsRangeStart;
    }
    return CT_TrackChange::default_instance();
}

bool CT_FtnEdn::ChildGroup_3::has_customXmlInsRangeEnd() const
{
    return m_has_customXmlInsRangeEnd;
}

CT_Markup* CT_FtnEdn::ChildGroup_3::mutable_customXmlInsRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = true;
    if (!m_customXmlInsRangeEnd)
    {
        m_customXmlInsRangeEnd = new CT_Markup();
    }
    return m_customXmlInsRangeEnd;
}

const CT_Markup& CT_FtnEdn::ChildGroup_3::get_customXmlInsRangeEnd() const
{
    if (m_customXmlInsRangeEnd)
    {
        return *m_customXmlInsRangeEnd;
    }
    return CT_Markup::default_instance();
}

bool CT_FtnEdn::ChildGroup_3::has_customXmlDelRangeStart() const
{
    return m_has_customXmlDelRangeStart;
}

CT_TrackChange* CT_FtnEdn::ChildGroup_3::mutable_customXmlDelRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = true;
    if (!m_customXmlDelRangeStart)
    {
        m_customXmlDelRangeStart = new CT_TrackChange();
    }
    return m_customXmlDelRangeStart;
}

const CT_TrackChange& CT_FtnEdn::ChildGroup_3::get_customXmlDelRangeStart() const
{
    if (m_customXmlDelRangeStart)
    {
        return *m_customXmlDelRangeStart;
    }
    return CT_TrackChange::default_instance();
}

bool CT_FtnEdn::ChildGroup_3::has_customXmlDelRangeEnd() const
{
    return m_has_customXmlDelRangeEnd;
}

CT_Markup* CT_FtnEdn::ChildGroup_3::mutable_customXmlDelRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = true;
    if (!m_customXmlDelRangeEnd)
    {
        m_customXmlDelRangeEnd = new CT_Markup();
    }
    return m_customXmlDelRangeEnd;
}

const CT_Markup& CT_FtnEdn::ChildGroup_3::get_customXmlDelRangeEnd() const
{
    if (m_customXmlDelRangeEnd)
    {
        return *m_customXmlDelRangeEnd;
    }
    return CT_Markup::default_instance();
}

bool CT_FtnEdn::ChildGroup_3::has_customXmlMoveFromRangeStart() const
{
    return m_has_customXmlMoveFromRangeStart;
}

CT_TrackChange* CT_FtnEdn::ChildGroup_3::mutable_customXmlMoveFromRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = true;
    if (!m_customXmlMoveFromRangeStart)
    {
        m_customXmlMoveFromRangeStart = new CT_TrackChange();
    }
    return m_customXmlMoveFromRangeStart;
}

const CT_TrackChange& CT_FtnEdn::ChildGroup_3::get_customXmlMoveFromRangeStart() const
{
    if (m_customXmlMoveFromRangeStart)
    {
        return *m_customXmlMoveFromRangeStart;
    }
    return CT_TrackChange::default_instance();
}

bool CT_FtnEdn::ChildGroup_3::has_customXmlMoveFromRangeEnd() const
{
    return m_has_customXmlMoveFromRangeEnd;
}

CT_Markup* CT_FtnEdn::ChildGroup_3::mutable_customXmlMoveFromRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = true;
    if (!m_customXmlMoveFromRangeEnd)
    {
        m_customXmlMoveFromRangeEnd = new CT_Markup();
    }
    return m_customXmlMoveFromRangeEnd;
}

const CT_Markup& CT_FtnEdn::ChildGroup_3::get_customXmlMoveFromRangeEnd() const
{
    if (m_customXmlMoveFromRangeEnd)
    {
        return *m_customXmlMoveFromRangeEnd;
    }
    return CT_Markup::default_instance();
}

bool CT_FtnEdn::ChildGroup_3::has_customXmlMoveToRangeStart() const
{
    return m_has_customXmlMoveToRangeStart;
}

CT_TrackChange* CT_FtnEdn::ChildGroup_3::mutable_customXmlMoveToRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = true;
    if (!m_customXmlMoveToRangeStart)
    {
        m_customXmlMoveToRangeStart = new CT_TrackChange();
    }
    return m_customXmlMoveToRangeStart;
}

const CT_TrackChange& CT_FtnEdn::ChildGroup_3::get_customXmlMoveToRangeStart() const
{
    if (m_customXmlMoveToRangeStart)
    {
        return *m_customXmlMoveToRangeStart;
    }
    return CT_TrackChange::default_instance();
}

bool CT_FtnEdn::ChildGroup_3::has_customXmlMoveToRangeEnd() const
{
    return m_has_customXmlMoveToRangeEnd;
}

CT_Markup* CT_FtnEdn::ChildGroup_3::mutable_customXmlMoveToRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = true;
    if (!m_customXmlMoveToRangeEnd)
    {
        m_customXmlMoveToRangeEnd = new CT_Markup();
    }
    return m_customXmlMoveToRangeEnd;
}

const CT_Markup& CT_FtnEdn::ChildGroup_3::get_customXmlMoveToRangeEnd() const
{
    if (m_customXmlMoveToRangeEnd)
    {
        return *m_customXmlMoveToRangeEnd;
    }
    return CT_Markup::default_instance();
}

bool CT_FtnEdn::ChildGroup_3::has_ins() const
{
    return m_has_ins;
}

CT_RunTrackChange* CT_FtnEdn::ChildGroup_3::mutable_ins()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_ins = true;
    if (!m_ins)
    {
        m_ins = new CT_RunTrackChange();
    }
    return m_ins;
}

const CT_RunTrackChange& CT_FtnEdn::ChildGroup_3::get_ins() const
{
    if (m_ins)
    {
        return *m_ins;
    }
    return CT_RunTrackChange::default_instance();
}

bool CT_FtnEdn::ChildGroup_3::has_del() const
{
    return m_has_del;
}

CT_RunTrackChange* CT_FtnEdn::ChildGroup_3::mutable_del()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_del = true;
    if (!m_del)
    {
        m_del = new CT_RunTrackChange();
    }
    return m_del;
}

const CT_RunTrackChange& CT_FtnEdn::ChildGroup_3::get_del() const
{
    if (m_del)
    {
        return *m_del;
    }
    return CT_RunTrackChange::default_instance();
}

bool CT_FtnEdn::ChildGroup_3::has_moveFrom() const
{
    return m_has_moveFrom;
}

CT_RunTrackChange* CT_FtnEdn::ChildGroup_3::mutable_moveFrom()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_moveFrom = true;
    if (!m_moveFrom)
    {
        m_moveFrom = new CT_RunTrackChange();
    }
    return m_moveFrom;
}

const CT_RunTrackChange& CT_FtnEdn::ChildGroup_3::get_moveFrom() const
{
    if (m_moveFrom)
    {
        return *m_moveFrom;
    }
    return CT_RunTrackChange::default_instance();
}

bool CT_FtnEdn::ChildGroup_3::has_moveTo() const
{
    return m_has_moveTo;
}

CT_RunTrackChange* CT_FtnEdn::ChildGroup_3::mutable_moveTo()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = true;
    if (!m_moveTo)
    {
        m_moveTo = new CT_RunTrackChange();
    }
    return m_moveTo;
}

const CT_RunTrackChange& CT_FtnEdn::ChildGroup_3::get_moveTo() const
{
    if (m_moveTo)
    {
        return *m_moveTo;
    }
    return CT_RunTrackChange::default_instance();
}


// CT_FtnEdn::ChildGroup_4
CT_FtnEdn::ChildGroup_4::ChildGroup_4()
    :m_has_m_oMathPara(false),
     m_m_oMathPara(NULL),
     m_has_m_oMath(false),
     m_m_oMath(NULL),
     m_has_altChunk(false),
     m_altChunk(NULL)
{
}
bool CT_FtnEdn::ChildGroup_4::has_m_oMathPara() const
{
    return m_has_m_oMathPara;
}

ns_m::CT_OMathPara* CT_FtnEdn::ChildGroup_4::mutable_m_oMathPara()
{

    m_has_m_oMath = false;

    if (m_m_oMath)
    {
        delete m_m_oMath;
        m_m_oMath = NULL;
    }
    ;

    m_has_altChunk = false;

    if (m_altChunk)
    {
        delete m_altChunk;
        m_altChunk = NULL;
    }
    ;

    m_has_m_oMathPara = true;
    if (!m_m_oMathPara)
    {
        m_m_oMathPara = new ns_m::CT_OMathPara();
    }
    return m_m_oMathPara;
}

const ns_m::CT_OMathPara& CT_FtnEdn::ChildGroup_4::get_m_oMathPara() const
{
    if (m_m_oMathPara)
    {
        return *m_m_oMathPara;
    }
    return ns_m::CT_OMathPara::default_instance();
}

bool CT_FtnEdn::ChildGroup_4::has_m_oMath() const
{
    return m_has_m_oMath;
}

ns_m::CT_OMath* CT_FtnEdn::ChildGroup_4::mutable_m_oMath()
{

    m_has_m_oMathPara = false;

    if (m_m_oMathPara)
    {
        delete m_m_oMathPara;
        m_m_oMathPara = NULL;
    }
    ;

    m_has_altChunk = false;

    if (m_altChunk)
    {
        delete m_altChunk;
        m_altChunk = NULL;
    }
    ;

    m_has_m_oMath = true;
    if (!m_m_oMath)
    {
        m_m_oMath = new ns_m::CT_OMath();
    }
    return m_m_oMath;
}

const ns_m::CT_OMath& CT_FtnEdn::ChildGroup_4::get_m_oMath() const
{
    if (m_m_oMath)
    {
        return *m_m_oMath;
    }
    return ns_m::CT_OMath::default_instance();
}

bool CT_FtnEdn::ChildGroup_4::has_altChunk() const
{
    return m_has_altChunk;
}

CT_AltChunk* CT_FtnEdn::ChildGroup_4::mutable_altChunk()
{

    m_has_m_oMathPara = false;

    if (m_m_oMathPara)
    {
        delete m_m_oMathPara;
        m_m_oMathPara = NULL;
    }
    ;

    m_has_m_oMath = false;

    if (m_m_oMath)
    {
        delete m_m_oMath;
        m_m_oMath = NULL;
    }
    ;

    m_has_altChunk = true;
    if (!m_altChunk)
    {
        m_altChunk = new CT_AltChunk();
    }
    return m_altChunk;
}

const CT_AltChunk& CT_FtnEdn::ChildGroup_4::get_altChunk() const
{
    if (m_altChunk)
    {
        return *m_altChunk;
    }
    return CT_AltChunk::default_instance();
}

CT_FtnEdn* CT_FtnEdn::default_instance_ = NULL;

// CT_FtnProps
CT_FtnProps::CT_FtnProps()
    :m_has_pos(false),
     m_pos(NULL),
     m_has_numFmt(false),
     m_numFmt(NULL),
     m_has_numStart(false),
     m_numStart(NULL),
     m_has_numRestart(false),
     m_numRestart(NULL)
{
}
CT_FtnProps::~CT_FtnProps()
{
    clear();
}
bool CT_FtnProps::has_pos() const
{
    return m_has_pos;
}

CT_FtnPos* CT_FtnProps::mutable_pos()
{
    m_has_pos = true;
    if (!m_pos)
    {
        m_pos = new CT_FtnPos();
    }
    return m_pos;
}

const CT_FtnPos& CT_FtnProps::get_pos() const
{
    if (m_pos)
    {
        return *m_pos;
    }
    return CT_FtnPos::default_instance();
}

bool CT_FtnProps::has_numFmt() const
{
    return m_has_numFmt;
}

CT_NumFmt* CT_FtnProps::mutable_numFmt()
{
    m_has_numFmt = true;
    if (!m_numFmt)
    {
        m_numFmt = new CT_NumFmt();
    }
    return m_numFmt;
}

const CT_NumFmt& CT_FtnProps::get_numFmt() const
{
    if (m_numFmt)
    {
        return *m_numFmt;
    }
    return CT_NumFmt::default_instance();
}

bool CT_FtnProps::has_numStart() const
{
    return m_has_numStart;
}

CT_DecimalNumber* CT_FtnProps::mutable_numStart()
{
    m_has_numStart = true;
    if (!m_numStart)
    {
        m_numStart = new CT_DecimalNumber();
    }
    return m_numStart;
}

const CT_DecimalNumber& CT_FtnProps::get_numStart() const
{
    if (m_numStart)
    {
        return *m_numStart;
    }
    return CT_DecimalNumber::default_instance();
}

bool CT_FtnProps::has_numRestart() const
{
    return m_has_numRestart;
}

CT_NumRestart* CT_FtnProps::mutable_numRestart()
{
    m_has_numRestart = true;
    if (!m_numRestart)
    {
        m_numRestart = new CT_NumRestart();
    }
    return m_numRestart;
}

const CT_NumRestart& CT_FtnProps::get_numRestart() const
{
    if (m_numRestart)
    {
        return *m_numRestart;
    }
    return CT_NumRestart::default_instance();
}

void CT_FtnProps::clear()
{
    m_has_pos = false;

    if (m_pos)
    {
        delete m_pos;
        m_pos = NULL;
    }


    m_has_numFmt = false;

    if (m_numFmt)
    {
        delete m_numFmt;
        m_numFmt = NULL;
    }


    m_has_numStart = false;

    if (m_numStart)
    {
        delete m_numStart;
        m_numStart = NULL;
    }


    m_has_numRestart = false;

    if (m_numRestart)
    {
        delete m_numRestart;
        m_numRestart = NULL;
    }

}

void CT_FtnProps::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";


    if (m_has_pos)
    {
        m_pos->toXmlElem("w:pos", "", _outStream);
    }


    if (m_has_numFmt)
    {
        m_numFmt->toXmlElem("w:numFmt", "", _outStream);
    }


    if (m_has_numStart)
    {
        m_numStart->toXmlElem("w:numStart", "", _outStream);
    }


    if (m_has_numRestart)
    {
        m_numRestart->toXmlElem("w:numRestart", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_FtnProps& CT_FtnProps::default_instance()
{
    if (!CT_FtnProps::default_instance_)
    {
        CT_FtnProps::default_instance_ = new CT_FtnProps();
    }
    return *CT_FtnProps::default_instance_;
}

CT_FtnProps* CT_FtnProps::default_instance_ = NULL;

// CT_EdnProps
CT_EdnProps::CT_EdnProps()
    :m_has_pos(false),
     m_pos(NULL),
     m_has_numFmt(false),
     m_numFmt(NULL),
     m_has_numStart(false),
     m_numStart(NULL),
     m_has_numRestart(false),
     m_numRestart(NULL)
{
}
CT_EdnProps::~CT_EdnProps()
{
    clear();
}
bool CT_EdnProps::has_pos() const
{
    return m_has_pos;
}

CT_EdnPos* CT_EdnProps::mutable_pos()
{
    m_has_pos = true;
    if (!m_pos)
    {
        m_pos = new CT_EdnPos();
    }
    return m_pos;
}

const CT_EdnPos& CT_EdnProps::get_pos() const
{
    if (m_pos)
    {
        return *m_pos;
    }
    return CT_EdnPos::default_instance();
}

bool CT_EdnProps::has_numFmt() const
{
    return m_has_numFmt;
}

CT_NumFmt* CT_EdnProps::mutable_numFmt()
{
    m_has_numFmt = true;
    if (!m_numFmt)
    {
        m_numFmt = new CT_NumFmt();
    }
    return m_numFmt;
}

const CT_NumFmt& CT_EdnProps::get_numFmt() const
{
    if (m_numFmt)
    {
        return *m_numFmt;
    }
    return CT_NumFmt::default_instance();
}

bool CT_EdnProps::has_numStart() const
{
    return m_has_numStart;
}

CT_DecimalNumber* CT_EdnProps::mutable_numStart()
{
    m_has_numStart = true;
    if (!m_numStart)
    {
        m_numStart = new CT_DecimalNumber();
    }
    return m_numStart;
}

const CT_DecimalNumber& CT_EdnProps::get_numStart() const
{
    if (m_numStart)
    {
        return *m_numStart;
    }
    return CT_DecimalNumber::default_instance();
}

bool CT_EdnProps::has_numRestart() const
{
    return m_has_numRestart;
}

CT_NumRestart* CT_EdnProps::mutable_numRestart()
{
    m_has_numRestart = true;
    if (!m_numRestart)
    {
        m_numRestart = new CT_NumRestart();
    }
    return m_numRestart;
}

const CT_NumRestart& CT_EdnProps::get_numRestart() const
{
    if (m_numRestart)
    {
        return *m_numRestart;
    }
    return CT_NumRestart::default_instance();
}

void CT_EdnProps::clear()
{
    m_has_pos = false;

    if (m_pos)
    {
        delete m_pos;
        m_pos = NULL;
    }


    m_has_numFmt = false;

    if (m_numFmt)
    {
        delete m_numFmt;
        m_numFmt = NULL;
    }


    m_has_numStart = false;

    if (m_numStart)
    {
        delete m_numStart;
        m_numStart = NULL;
    }


    m_has_numRestart = false;

    if (m_numRestart)
    {
        delete m_numRestart;
        m_numRestart = NULL;
    }

}

void CT_EdnProps::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";


    if (m_has_pos)
    {
        m_pos->toXmlElem("w:pos", "", _outStream);
    }


    if (m_has_numFmt)
    {
        m_numFmt->toXmlElem("w:numFmt", "", _outStream);
    }


    if (m_has_numStart)
    {
        m_numStart->toXmlElem("w:numStart", "", _outStream);
    }


    if (m_has_numRestart)
    {
        m_numRestart->toXmlElem("w:numRestart", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_EdnProps& CT_EdnProps::default_instance()
{
    if (!CT_EdnProps::default_instance_)
    {
        CT_EdnProps::default_instance_ = new CT_EdnProps();
    }
    return *CT_EdnProps::default_instance_;
}

CT_EdnProps* CT_EdnProps::default_instance_ = NULL;

// CT_FtnDocProps
CT_FtnDocProps::CT_FtnDocProps()
    :m_has_pos(false),
     m_pos(NULL),
     m_has_numFmt(false),
     m_numFmt(NULL),
     m_has_numStart(false),
     m_numStart(NULL),
     m_has_numRestart(false),
     m_numRestart(NULL)
{
}
CT_FtnDocProps::~CT_FtnDocProps()
{
    clear();
}
bool CT_FtnDocProps::has_pos() const
{
    return m_has_pos;
}

CT_FtnPos* CT_FtnDocProps::mutable_pos()
{
    m_has_pos = true;
    if (!m_pos)
    {
        m_pos = new CT_FtnPos();
    }
    return m_pos;
}

const CT_FtnPos& CT_FtnDocProps::get_pos() const
{
    if (m_pos)
    {
        return *m_pos;
    }
    return CT_FtnPos::default_instance();
}

bool CT_FtnDocProps::has_numFmt() const
{
    return m_has_numFmt;
}

CT_NumFmt* CT_FtnDocProps::mutable_numFmt()
{
    m_has_numFmt = true;
    if (!m_numFmt)
    {
        m_numFmt = new CT_NumFmt();
    }
    return m_numFmt;
}

const CT_NumFmt& CT_FtnDocProps::get_numFmt() const
{
    if (m_numFmt)
    {
        return *m_numFmt;
    }
    return CT_NumFmt::default_instance();
}

bool CT_FtnDocProps::has_numStart() const
{
    return m_has_numStart;
}

CT_DecimalNumber* CT_FtnDocProps::mutable_numStart()
{
    m_has_numStart = true;
    if (!m_numStart)
    {
        m_numStart = new CT_DecimalNumber();
    }
    return m_numStart;
}

const CT_DecimalNumber& CT_FtnDocProps::get_numStart() const
{
    if (m_numStart)
    {
        return *m_numStart;
    }
    return CT_DecimalNumber::default_instance();
}

bool CT_FtnDocProps::has_numRestart() const
{
    return m_has_numRestart;
}

CT_NumRestart* CT_FtnDocProps::mutable_numRestart()
{
    m_has_numRestart = true;
    if (!m_numRestart)
    {
        m_numRestart = new CT_NumRestart();
    }
    return m_numRestart;
}

const CT_NumRestart& CT_FtnDocProps::get_numRestart() const
{
    if (m_numRestart)
    {
        return *m_numRestart;
    }
    return CT_NumRestart::default_instance();
}

CT_FtnEdnSepRef* CT_FtnDocProps::add_footnote()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_FtnEdnSepRef* pNewChild = pChildGroup->mutable_footnote();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

void CT_FtnDocProps::clear()
{
    m_has_pos = false;

    if (m_pos)
    {
        delete m_pos;
        m_pos = NULL;
    }


    m_has_numFmt = false;

    if (m_numFmt)
    {
        delete m_numFmt;
        m_numFmt = NULL;
    }


    m_has_numStart = false;

    if (m_numStart)
    {
        delete m_numStart;
        m_numStart = NULL;
    }


    m_has_numRestart = false;

    if (m_numRestart)
    {
        delete m_numRestart;
        m_numRestart = NULL;
    }


    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
}

void CT_FtnDocProps::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";


    if (m_has_pos)
    {
        m_pos->toXmlElem("w:pos", "", _outStream);
    }


    if (m_has_numFmt)
    {
        m_numFmt->toXmlElem("w:numFmt", "", _outStream);
    }


    if (m_has_numStart)
    {
        m_numStart->toXmlElem("w:numStart", "", _outStream);
    }


    if (m_has_numRestart)
    {
        m_numRestart->toXmlElem("w:numRestart", "", _outStream);
    }

    {
        int elemCnt = count_if(m_childGroupList_1.begin(), m_childGroupList_1.end(), mem_fun(&ChildGroup_1::has_footnote));
        assert(0 <= elemCnt && elemCnt <= 3);
    }

    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_footnote())
            {
                (*iter)->get_footnote().toXmlElem("w:footnote", "", _outStream);
            }


        }
    }

    _outStream << "</" << _elemName << ">";
}

const CT_FtnDocProps& CT_FtnDocProps::default_instance()
{
    if (!CT_FtnDocProps::default_instance_)
    {
        CT_FtnDocProps::default_instance_ = new CT_FtnDocProps();
    }
    return *CT_FtnDocProps::default_instance_;
}


// CT_FtnDocProps::ChildGroup_1
CT_FtnDocProps::ChildGroup_1::ChildGroup_1()
    :m_has_footnote(false),
     m_footnote(NULL)
{
}
bool CT_FtnDocProps::ChildGroup_1::has_footnote() const
{
    return m_has_footnote;
}

CT_FtnEdnSepRef* CT_FtnDocProps::ChildGroup_1::mutable_footnote()
{

    m_has_footnote = true;
    if (!m_footnote)
    {
        m_footnote = new CT_FtnEdnSepRef();
    }
    return m_footnote;
}

const CT_FtnEdnSepRef& CT_FtnDocProps::ChildGroup_1::get_footnote() const
{
    if (m_footnote)
    {
        return *m_footnote;
    }
    return CT_FtnEdnSepRef::default_instance();
}

CT_FtnDocProps* CT_FtnDocProps::default_instance_ = NULL;

// CT_EdnDocProps
CT_EdnDocProps::CT_EdnDocProps()
    :m_has_pos(false),
     m_pos(NULL),
     m_has_numFmt(false),
     m_numFmt(NULL),
     m_has_numStart(false),
     m_numStart(NULL),
     m_has_numRestart(false),
     m_numRestart(NULL)
{
}
CT_EdnDocProps::~CT_EdnDocProps()
{
    clear();
}
bool CT_EdnDocProps::has_pos() const
{
    return m_has_pos;
}

CT_EdnPos* CT_EdnDocProps::mutable_pos()
{
    m_has_pos = true;
    if (!m_pos)
    {
        m_pos = new CT_EdnPos();
    }
    return m_pos;
}

const CT_EdnPos& CT_EdnDocProps::get_pos() const
{
    if (m_pos)
    {
        return *m_pos;
    }
    return CT_EdnPos::default_instance();
}

bool CT_EdnDocProps::has_numFmt() const
{
    return m_has_numFmt;
}

CT_NumFmt* CT_EdnDocProps::mutable_numFmt()
{
    m_has_numFmt = true;
    if (!m_numFmt)
    {
        m_numFmt = new CT_NumFmt();
    }
    return m_numFmt;
}

const CT_NumFmt& CT_EdnDocProps::get_numFmt() const
{
    if (m_numFmt)
    {
        return *m_numFmt;
    }
    return CT_NumFmt::default_instance();
}

bool CT_EdnDocProps::has_numStart() const
{
    return m_has_numStart;
}

CT_DecimalNumber* CT_EdnDocProps::mutable_numStart()
{
    m_has_numStart = true;
    if (!m_numStart)
    {
        m_numStart = new CT_DecimalNumber();
    }
    return m_numStart;
}

const CT_DecimalNumber& CT_EdnDocProps::get_numStart() const
{
    if (m_numStart)
    {
        return *m_numStart;
    }
    return CT_DecimalNumber::default_instance();
}

bool CT_EdnDocProps::has_numRestart() const
{
    return m_has_numRestart;
}

CT_NumRestart* CT_EdnDocProps::mutable_numRestart()
{
    m_has_numRestart = true;
    if (!m_numRestart)
    {
        m_numRestart = new CT_NumRestart();
    }
    return m_numRestart;
}

const CT_NumRestart& CT_EdnDocProps::get_numRestart() const
{
    if (m_numRestart)
    {
        return *m_numRestart;
    }
    return CT_NumRestart::default_instance();
}

CT_FtnEdnSepRef* CT_EdnDocProps::add_endnote()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_FtnEdnSepRef* pNewChild = pChildGroup->mutable_endnote();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

void CT_EdnDocProps::clear()
{
    m_has_pos = false;

    if (m_pos)
    {
        delete m_pos;
        m_pos = NULL;
    }


    m_has_numFmt = false;

    if (m_numFmt)
    {
        delete m_numFmt;
        m_numFmt = NULL;
    }


    m_has_numStart = false;

    if (m_numStart)
    {
        delete m_numStart;
        m_numStart = NULL;
    }


    m_has_numRestart = false;

    if (m_numRestart)
    {
        delete m_numRestart;
        m_numRestart = NULL;
    }


    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
}

void CT_EdnDocProps::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";


    if (m_has_pos)
    {
        m_pos->toXmlElem("w:pos", "", _outStream);
    }


    if (m_has_numFmt)
    {
        m_numFmt->toXmlElem("w:numFmt", "", _outStream);
    }


    if (m_has_numStart)
    {
        m_numStart->toXmlElem("w:numStart", "", _outStream);
    }


    if (m_has_numRestart)
    {
        m_numRestart->toXmlElem("w:numRestart", "", _outStream);
    }

    {
        int elemCnt = count_if(m_childGroupList_1.begin(), m_childGroupList_1.end(), mem_fun(&ChildGroup_1::has_endnote));
        assert(0 <= elemCnt && elemCnt <= 3);
    }

    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_endnote())
            {
                (*iter)->get_endnote().toXmlElem("w:endnote", "", _outStream);
            }


        }
    }

    _outStream << "</" << _elemName << ">";
}

const CT_EdnDocProps& CT_EdnDocProps::default_instance()
{
    if (!CT_EdnDocProps::default_instance_)
    {
        CT_EdnDocProps::default_instance_ = new CT_EdnDocProps();
    }
    return *CT_EdnDocProps::default_instance_;
}


// CT_EdnDocProps::ChildGroup_1
CT_EdnDocProps::ChildGroup_1::ChildGroup_1()
    :m_has_endnote(false),
     m_endnote(NULL)
{
}
bool CT_EdnDocProps::ChildGroup_1::has_endnote() const
{
    return m_has_endnote;
}

CT_FtnEdnSepRef* CT_EdnDocProps::ChildGroup_1::mutable_endnote()
{

    m_has_endnote = true;
    if (!m_endnote)
    {
        m_endnote = new CT_FtnEdnSepRef();
    }
    return m_endnote;
}

const CT_FtnEdnSepRef& CT_EdnDocProps::ChildGroup_1::get_endnote() const
{
    if (m_endnote)
    {
        return *m_endnote;
    }
    return CT_FtnEdnSepRef::default_instance();
}

CT_EdnDocProps* CT_EdnDocProps::default_instance_ = NULL;

// CT_RecipientData
CT_RecipientData::CT_RecipientData()
    :m_has_active(false),
     m_active(NULL),
     m_has_column(false),
     m_column(NULL),
     m_has_uniqueTag(false),
     m_uniqueTag(NULL)
{
}
CT_RecipientData::~CT_RecipientData()
{
    clear();
}
bool CT_RecipientData::has_active() const
{
    return m_has_active;
}

CT_OnOff* CT_RecipientData::mutable_active()
{
    m_has_active = true;
    if (!m_active)
    {
        m_active = new CT_OnOff();
    }
    return m_active;
}

const CT_OnOff& CT_RecipientData::get_active() const
{
    if (m_active)
    {
        return *m_active;
    }
    return CT_OnOff::default_instance();
}

bool CT_RecipientData::has_column() const
{
    return m_has_column;
}

CT_DecimalNumber* CT_RecipientData::mutable_column()
{
    m_has_column = true;
    if (!m_column)
    {
        m_column = new CT_DecimalNumber();
    }
    return m_column;
}

const CT_DecimalNumber& CT_RecipientData::get_column() const
{
    if (m_column)
    {
        return *m_column;
    }
    return CT_DecimalNumber::default_instance();
}

bool CT_RecipientData::has_uniqueTag() const
{
    return m_has_uniqueTag;
}

CT_Base64Binary* CT_RecipientData::mutable_uniqueTag()
{
    m_has_uniqueTag = true;
    if (!m_uniqueTag)
    {
        m_uniqueTag = new CT_Base64Binary();
    }
    return m_uniqueTag;
}

const CT_Base64Binary& CT_RecipientData::get_uniqueTag() const
{
    if (m_uniqueTag)
    {
        return *m_uniqueTag;
    }
    return CT_Base64Binary::default_instance();
}

void CT_RecipientData::clear()
{
    m_has_active = false;

    if (m_active)
    {
        delete m_active;
        m_active = NULL;
    }


    m_has_column = false;

    if (m_column)
    {
        delete m_column;
        m_column = NULL;
    }


    m_has_uniqueTag = false;

    if (m_uniqueTag)
    {
        delete m_uniqueTag;
        m_uniqueTag = NULL;
    }

}

void CT_RecipientData::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";

    assert(m_has_column);


    assert(m_has_uniqueTag);


    if (m_has_active)
    {
        m_active->toXmlElem("w:active", "", _outStream);
    }


    if (m_has_column)
    {
        m_column->toXmlElem("w:column", "", _outStream);
    }


    if (m_has_uniqueTag)
    {
        m_uniqueTag->toXmlElem("w:uniqueTag", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_RecipientData& CT_RecipientData::default_instance()
{
    if (!CT_RecipientData::default_instance_)
    {
        CT_RecipientData::default_instance_ = new CT_RecipientData();
    }
    return *CT_RecipientData::default_instance_;
}

CT_RecipientData* CT_RecipientData::default_instance_ = NULL;

// CT_Base64Binary
CT_Base64Binary::CT_Base64Binary()
    :m_has_val_attr(false),
     m_val_attr("")
{
}
CT_Base64Binary::~CT_Base64Binary()
{
    clear();
}
void CT_Base64Binary::clear()
{
    m_has_val_attr = false;
    m_val_attr.clear();
}

void CT_Base64Binary::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_val_attr);
    if (m_has_val_attr)
    {
        _outStream << " " << "w:val" << "=\"" << m_val_attr << "\"";
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_Base64Binary& CT_Base64Binary::default_instance()
{
    if (!CT_Base64Binary::default_instance_)
    {
        CT_Base64Binary::default_instance_ = new CT_Base64Binary();
    }
    return *CT_Base64Binary::default_instance_;
}

bool CT_Base64Binary::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_Base64Binary::set_val_attr(const XSD::base64Binary_& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = _val_attr;
}

const XSD::base64Binary_& CT_Base64Binary::get_val_attr() const
{
    return m_val_attr;
}

CT_Base64Binary* CT_Base64Binary::default_instance_ = NULL;

// CT_Recipients
CT_Recipients::CT_Recipients()

{
}
CT_Recipients::~CT_Recipients()
{
    clear();
}
CT_RecipientData* CT_Recipients::add_recipientData()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_RecipientData* pNewChild = pChildGroup->mutable_recipientData();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

void CT_Recipients::clear()
{
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
}

void CT_Recipients::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";

    {
        int elemCnt = count_if(m_childGroupList_1.begin(), m_childGroupList_1.end(), mem_fun(&ChildGroup_1::has_recipientData));
        assert(1 <= elemCnt);
    }

    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_recipientData())
            {
                (*iter)->get_recipientData().toXmlElem("w:recipientData", "", _outStream);
            }


        }
    }

    _outStream << "</" << _elemName << ">";
}

const CT_Recipients& CT_Recipients::default_instance()
{
    if (!CT_Recipients::default_instance_)
    {
        CT_Recipients::default_instance_ = new CT_Recipients();
    }
    return *CT_Recipients::default_instance_;
}


// CT_Recipients::ChildGroup_1
CT_Recipients::ChildGroup_1::ChildGroup_1()
    :m_has_recipientData(false),
     m_recipientData(NULL)
{
}
bool CT_Recipients::ChildGroup_1::has_recipientData() const
{
    return m_has_recipientData;
}

CT_RecipientData* CT_Recipients::ChildGroup_1::mutable_recipientData()
{

    m_has_recipientData = true;
    if (!m_recipientData)
    {
        m_recipientData = new CT_RecipientData();
    }
    return m_recipientData;
}

const CT_RecipientData& CT_Recipients::ChildGroup_1::get_recipientData() const
{
    if (m_recipientData)
    {
        return *m_recipientData;
    }
    return CT_RecipientData::default_instance();
}

CT_Recipients* CT_Recipients::default_instance_ = NULL;

// CT_OdsoFieldMapData
CT_OdsoFieldMapData::CT_OdsoFieldMapData()
    :m_has_type(false),
     m_type(NULL),
     m_has_name(false),
     m_name(NULL),
     m_has_mappedName(false),
     m_mappedName(NULL),
     m_has_column(false),
     m_column(NULL),
     m_has_lid(false),
     m_lid(NULL),
     m_has_dynamicAddress(false),
     m_dynamicAddress(NULL)
{
}
CT_OdsoFieldMapData::~CT_OdsoFieldMapData()
{
    clear();
}
bool CT_OdsoFieldMapData::has_type() const
{
    return m_has_type;
}

CT_MailMergeOdsoFMDFieldType* CT_OdsoFieldMapData::mutable_type()
{
    m_has_type = true;
    if (!m_type)
    {
        m_type = new CT_MailMergeOdsoFMDFieldType();
    }
    return m_type;
}

const CT_MailMergeOdsoFMDFieldType& CT_OdsoFieldMapData::get_type() const
{
    if (m_type)
    {
        return *m_type;
    }
    return CT_MailMergeOdsoFMDFieldType::default_instance();
}

bool CT_OdsoFieldMapData::has_name() const
{
    return m_has_name;
}

CT_String* CT_OdsoFieldMapData::mutable_name()
{
    m_has_name = true;
    if (!m_name)
    {
        m_name = new CT_String();
    }
    return m_name;
}

const CT_String& CT_OdsoFieldMapData::get_name() const
{
    if (m_name)
    {
        return *m_name;
    }
    return CT_String::default_instance();
}

bool CT_OdsoFieldMapData::has_mappedName() const
{
    return m_has_mappedName;
}

CT_String* CT_OdsoFieldMapData::mutable_mappedName()
{
    m_has_mappedName = true;
    if (!m_mappedName)
    {
        m_mappedName = new CT_String();
    }
    return m_mappedName;
}

const CT_String& CT_OdsoFieldMapData::get_mappedName() const
{
    if (m_mappedName)
    {
        return *m_mappedName;
    }
    return CT_String::default_instance();
}

bool CT_OdsoFieldMapData::has_column() const
{
    return m_has_column;
}

CT_DecimalNumber* CT_OdsoFieldMapData::mutable_column()
{
    m_has_column = true;
    if (!m_column)
    {
        m_column = new CT_DecimalNumber();
    }
    return m_column;
}

const CT_DecimalNumber& CT_OdsoFieldMapData::get_column() const
{
    if (m_column)
    {
        return *m_column;
    }
    return CT_DecimalNumber::default_instance();
}

bool CT_OdsoFieldMapData::has_lid() const
{
    return m_has_lid;
}

CT_Lang* CT_OdsoFieldMapData::mutable_lid()
{
    m_has_lid = true;
    if (!m_lid)
    {
        m_lid = new CT_Lang();
    }
    return m_lid;
}

const CT_Lang& CT_OdsoFieldMapData::get_lid() const
{
    if (m_lid)
    {
        return *m_lid;
    }
    return CT_Lang::default_instance();
}

bool CT_OdsoFieldMapData::has_dynamicAddress() const
{
    return m_has_dynamicAddress;
}

CT_OnOff* CT_OdsoFieldMapData::mutable_dynamicAddress()
{
    m_has_dynamicAddress = true;
    if (!m_dynamicAddress)
    {
        m_dynamicAddress = new CT_OnOff();
    }
    return m_dynamicAddress;
}

const CT_OnOff& CT_OdsoFieldMapData::get_dynamicAddress() const
{
    if (m_dynamicAddress)
    {
        return *m_dynamicAddress;
    }
    return CT_OnOff::default_instance();
}

void CT_OdsoFieldMapData::clear()
{
    m_has_type = false;

    if (m_type)
    {
        delete m_type;
        m_type = NULL;
    }


    m_has_name = false;

    if (m_name)
    {
        delete m_name;
        m_name = NULL;
    }


    m_has_mappedName = false;

    if (m_mappedName)
    {
        delete m_mappedName;
        m_mappedName = NULL;
    }


    m_has_column = false;

    if (m_column)
    {
        delete m_column;
        m_column = NULL;
    }


    m_has_lid = false;

    if (m_lid)
    {
        delete m_lid;
        m_lid = NULL;
    }


    m_has_dynamicAddress = false;

    if (m_dynamicAddress)
    {
        delete m_dynamicAddress;
        m_dynamicAddress = NULL;
    }

}

void CT_OdsoFieldMapData::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";


    if (m_has_type)
    {
        m_type->toXmlElem("w:type", "", _outStream);
    }


    if (m_has_name)
    {
        m_name->toXmlElem("w:name", "", _outStream);
    }


    if (m_has_mappedName)
    {
        m_mappedName->toXmlElem("w:mappedName", "", _outStream);
    }


    if (m_has_column)
    {
        m_column->toXmlElem("w:column", "", _outStream);
    }


    if (m_has_lid)
    {
        m_lid->toXmlElem("w:lid", "", _outStream);
    }


    if (m_has_dynamicAddress)
    {
        m_dynamicAddress->toXmlElem("w:dynamicAddress", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_OdsoFieldMapData& CT_OdsoFieldMapData::default_instance()
{
    if (!CT_OdsoFieldMapData::default_instance_)
    {
        CT_OdsoFieldMapData::default_instance_ = new CT_OdsoFieldMapData();
    }
    return *CT_OdsoFieldMapData::default_instance_;
}

CT_OdsoFieldMapData* CT_OdsoFieldMapData::default_instance_ = NULL;

// CT_MailMergeSourceType
CT_MailMergeSourceType::CT_MailMergeSourceType()
    :m_has_val_attr(false),
     m_val_attr(NULL)
{
}
CT_MailMergeSourceType::~CT_MailMergeSourceType()
{
    clear();
}
void CT_MailMergeSourceType::clear()
{
    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }

}

void CT_MailMergeSourceType::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_val_attr);
    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_MailMergeSourceType& CT_MailMergeSourceType::default_instance()
{
    if (!CT_MailMergeSourceType::default_instance_)
    {
        CT_MailMergeSourceType::default_instance_ = new CT_MailMergeSourceType();
    }
    return *CT_MailMergeSourceType::default_instance_;
}

bool CT_MailMergeSourceType::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_MailMergeSourceType::set_val_attr(const ST_MailMergeSourceType& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ST_MailMergeSourceType(_val_attr);
}

const ST_MailMergeSourceType& CT_MailMergeSourceType::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ST_MailMergeSourceType::default_instance();
}

CT_MailMergeSourceType* CT_MailMergeSourceType::default_instance_ = NULL;

// CT_Odso
CT_Odso::CT_Odso()
    :m_has_udl(false),
     m_udl(NULL),
     m_has_table(false),
     m_table(NULL),
     m_has_src(false),
     m_src(NULL),
     m_has_colDelim(false),
     m_colDelim(NULL),
     m_has_type(false),
     m_type(NULL),
     m_has_fHdr(false),
     m_fHdr(NULL)
{
}
CT_Odso::~CT_Odso()
{
    clear();
}
bool CT_Odso::has_udl() const
{
    return m_has_udl;
}

CT_String* CT_Odso::mutable_udl()
{
    m_has_udl = true;
    if (!m_udl)
    {
        m_udl = new CT_String();
    }
    return m_udl;
}

const CT_String& CT_Odso::get_udl() const
{
    if (m_udl)
    {
        return *m_udl;
    }
    return CT_String::default_instance();
}

bool CT_Odso::has_table() const
{
    return m_has_table;
}

CT_String* CT_Odso::mutable_table()
{
    m_has_table = true;
    if (!m_table)
    {
        m_table = new CT_String();
    }
    return m_table;
}

const CT_String& CT_Odso::get_table() const
{
    if (m_table)
    {
        return *m_table;
    }
    return CT_String::default_instance();
}

bool CT_Odso::has_src() const
{
    return m_has_src;
}

CT_Rel* CT_Odso::mutable_src()
{
    m_has_src = true;
    if (!m_src)
    {
        m_src = new CT_Rel();
    }
    return m_src;
}

const CT_Rel& CT_Odso::get_src() const
{
    if (m_src)
    {
        return *m_src;
    }
    return CT_Rel::default_instance();
}

bool CT_Odso::has_colDelim() const
{
    return m_has_colDelim;
}

CT_DecimalNumber* CT_Odso::mutable_colDelim()
{
    m_has_colDelim = true;
    if (!m_colDelim)
    {
        m_colDelim = new CT_DecimalNumber();
    }
    return m_colDelim;
}

const CT_DecimalNumber& CT_Odso::get_colDelim() const
{
    if (m_colDelim)
    {
        return *m_colDelim;
    }
    return CT_DecimalNumber::default_instance();
}

bool CT_Odso::has_type() const
{
    return m_has_type;
}

CT_MailMergeSourceType* CT_Odso::mutable_type()
{
    m_has_type = true;
    if (!m_type)
    {
        m_type = new CT_MailMergeSourceType();
    }
    return m_type;
}

const CT_MailMergeSourceType& CT_Odso::get_type() const
{
    if (m_type)
    {
        return *m_type;
    }
    return CT_MailMergeSourceType::default_instance();
}

bool CT_Odso::has_fHdr() const
{
    return m_has_fHdr;
}

CT_OnOff* CT_Odso::mutable_fHdr()
{
    m_has_fHdr = true;
    if (!m_fHdr)
    {
        m_fHdr = new CT_OnOff();
    }
    return m_fHdr;
}

const CT_OnOff& CT_Odso::get_fHdr() const
{
    if (m_fHdr)
    {
        return *m_fHdr;
    }
    return CT_OnOff::default_instance();
}

CT_OdsoFieldMapData* CT_Odso::add_fieldMapData()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OdsoFieldMapData* pNewChild = pChildGroup->mutable_fieldMapData();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_Rel* CT_Odso::add_recipientData()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Rel* pNewChild = pChildGroup->mutable_recipientData();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

void CT_Odso::clear()
{
    m_has_udl = false;

    if (m_udl)
    {
        delete m_udl;
        m_udl = NULL;
    }


    m_has_table = false;

    if (m_table)
    {
        delete m_table;
        m_table = NULL;
    }


    m_has_src = false;

    if (m_src)
    {
        delete m_src;
        m_src = NULL;
    }


    m_has_colDelim = false;

    if (m_colDelim)
    {
        delete m_colDelim;
        m_colDelim = NULL;
    }


    m_has_type = false;

    if (m_type)
    {
        delete m_type;
        m_type = NULL;
    }


    m_has_fHdr = false;

    if (m_fHdr)
    {
        delete m_fHdr;
        m_fHdr = NULL;
    }


    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
}

void CT_Odso::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";


    if (m_has_udl)
    {
        m_udl->toXmlElem("w:udl", "", _outStream);
    }


    if (m_has_table)
    {
        m_table->toXmlElem("w:table", "", _outStream);
    }


    if (m_has_src)
    {
        m_src->toXmlElem("w:src", "", _outStream);
    }


    if (m_has_colDelim)
    {
        m_colDelim->toXmlElem("w:colDelim", "", _outStream);
    }


    if (m_has_type)
    {
        m_type->toXmlElem("w:type", "", _outStream);
    }


    if (m_has_fHdr)
    {
        m_fHdr->toXmlElem("w:fHdr", "", _outStream);
    }

    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_fieldMapData())
            {
                (*iter)->get_fieldMapData().toXmlElem("w:fieldMapData", "", _outStream);
            }


            else if ((*iter)->has_recipientData())
            {
                (*iter)->get_recipientData().toXmlElem("w:recipientData", "", _outStream);
            }


        }
    }

    _outStream << "</" << _elemName << ">";
}

const CT_Odso& CT_Odso::default_instance()
{
    if (!CT_Odso::default_instance_)
    {
        CT_Odso::default_instance_ = new CT_Odso();
    }
    return *CT_Odso::default_instance_;
}


// CT_Odso::ChildGroup_1
CT_Odso::ChildGroup_1::ChildGroup_1()
    :m_has_fieldMapData(false),
     m_fieldMapData(NULL),
     m_has_recipientData(false),
     m_recipientData(NULL)
{
}
bool CT_Odso::ChildGroup_1::has_fieldMapData() const
{
    return m_has_fieldMapData;
}

CT_OdsoFieldMapData* CT_Odso::ChildGroup_1::mutable_fieldMapData()
{

    m_has_recipientData = false;

    if (m_recipientData)
    {
        delete m_recipientData;
        m_recipientData = NULL;
    }
    ;

    m_has_fieldMapData = true;
    if (!m_fieldMapData)
    {
        m_fieldMapData = new CT_OdsoFieldMapData();
    }
    return m_fieldMapData;
}

const CT_OdsoFieldMapData& CT_Odso::ChildGroup_1::get_fieldMapData() const
{
    if (m_fieldMapData)
    {
        return *m_fieldMapData;
    }
    return CT_OdsoFieldMapData::default_instance();
}

bool CT_Odso::ChildGroup_1::has_recipientData() const
{
    return m_has_recipientData;
}

CT_Rel* CT_Odso::ChildGroup_1::mutable_recipientData()
{

    m_has_fieldMapData = false;

    if (m_fieldMapData)
    {
        delete m_fieldMapData;
        m_fieldMapData = NULL;
    }
    ;

    m_has_recipientData = true;
    if (!m_recipientData)
    {
        m_recipientData = new CT_Rel();
    }
    return m_recipientData;
}

const CT_Rel& CT_Odso::ChildGroup_1::get_recipientData() const
{
    if (m_recipientData)
    {
        return *m_recipientData;
    }
    return CT_Rel::default_instance();
}

CT_Odso* CT_Odso::default_instance_ = NULL;

// CT_MailMerge
CT_MailMerge::CT_MailMerge()
    :m_has_mainDocumentType(false),
     m_mainDocumentType(NULL),
     m_has_linkToQuery(false),
     m_linkToQuery(NULL),
     m_has_dataType(false),
     m_dataType(NULL),
     m_has_connectString(false),
     m_connectString(NULL),
     m_has_query(false),
     m_query(NULL),
     m_has_dataSource(false),
     m_dataSource(NULL),
     m_has_headerSource(false),
     m_headerSource(NULL),
     m_has_doNotSuppressBlankLines(false),
     m_doNotSuppressBlankLines(NULL),
     m_has_destination(false),
     m_destination(NULL),
     m_has_addressFieldName(false),
     m_addressFieldName(NULL),
     m_has_mailSubject(false),
     m_mailSubject(NULL),
     m_has_mailAsAttachment(false),
     m_mailAsAttachment(NULL),
     m_has_viewMergedData(false),
     m_viewMergedData(NULL),
     m_has_activeRecord(false),
     m_activeRecord(NULL),
     m_has_checkErrors(false),
     m_checkErrors(NULL),
     m_has_odso(false),
     m_odso(NULL)
{
}
CT_MailMerge::~CT_MailMerge()
{
    clear();
}
bool CT_MailMerge::has_mainDocumentType() const
{
    return m_has_mainDocumentType;
}

CT_MailMergeDocType* CT_MailMerge::mutable_mainDocumentType()
{
    m_has_mainDocumentType = true;
    if (!m_mainDocumentType)
    {
        m_mainDocumentType = new CT_MailMergeDocType();
    }
    return m_mainDocumentType;
}

const CT_MailMergeDocType& CT_MailMerge::get_mainDocumentType() const
{
    if (m_mainDocumentType)
    {
        return *m_mainDocumentType;
    }
    return CT_MailMergeDocType::default_instance();
}

bool CT_MailMerge::has_linkToQuery() const
{
    return m_has_linkToQuery;
}

CT_OnOff* CT_MailMerge::mutable_linkToQuery()
{
    m_has_linkToQuery = true;
    if (!m_linkToQuery)
    {
        m_linkToQuery = new CT_OnOff();
    }
    return m_linkToQuery;
}

const CT_OnOff& CT_MailMerge::get_linkToQuery() const
{
    if (m_linkToQuery)
    {
        return *m_linkToQuery;
    }
    return CT_OnOff::default_instance();
}

bool CT_MailMerge::has_dataType() const
{
    return m_has_dataType;
}

CT_MailMergeDataType* CT_MailMerge::mutable_dataType()
{
    m_has_dataType = true;
    if (!m_dataType)
    {
        m_dataType = new CT_MailMergeDataType();
    }
    return m_dataType;
}

const CT_MailMergeDataType& CT_MailMerge::get_dataType() const
{
    if (m_dataType)
    {
        return *m_dataType;
    }
    return CT_MailMergeDataType::default_instance();
}

bool CT_MailMerge::has_connectString() const
{
    return m_has_connectString;
}

CT_String* CT_MailMerge::mutable_connectString()
{
    m_has_connectString = true;
    if (!m_connectString)
    {
        m_connectString = new CT_String();
    }
    return m_connectString;
}

const CT_String& CT_MailMerge::get_connectString() const
{
    if (m_connectString)
    {
        return *m_connectString;
    }
    return CT_String::default_instance();
}

bool CT_MailMerge::has_query() const
{
    return m_has_query;
}

CT_String* CT_MailMerge::mutable_query()
{
    m_has_query = true;
    if (!m_query)
    {
        m_query = new CT_String();
    }
    return m_query;
}

const CT_String& CT_MailMerge::get_query() const
{
    if (m_query)
    {
        return *m_query;
    }
    return CT_String::default_instance();
}

bool CT_MailMerge::has_dataSource() const
{
    return m_has_dataSource;
}

CT_Rel* CT_MailMerge::mutable_dataSource()
{
    m_has_dataSource = true;
    if (!m_dataSource)
    {
        m_dataSource = new CT_Rel();
    }
    return m_dataSource;
}

const CT_Rel& CT_MailMerge::get_dataSource() const
{
    if (m_dataSource)
    {
        return *m_dataSource;
    }
    return CT_Rel::default_instance();
}

bool CT_MailMerge::has_headerSource() const
{
    return m_has_headerSource;
}

CT_Rel* CT_MailMerge::mutable_headerSource()
{
    m_has_headerSource = true;
    if (!m_headerSource)
    {
        m_headerSource = new CT_Rel();
    }
    return m_headerSource;
}

const CT_Rel& CT_MailMerge::get_headerSource() const
{
    if (m_headerSource)
    {
        return *m_headerSource;
    }
    return CT_Rel::default_instance();
}

bool CT_MailMerge::has_doNotSuppressBlankLines() const
{
    return m_has_doNotSuppressBlankLines;
}

CT_OnOff* CT_MailMerge::mutable_doNotSuppressBlankLines()
{
    m_has_doNotSuppressBlankLines = true;
    if (!m_doNotSuppressBlankLines)
    {
        m_doNotSuppressBlankLines = new CT_OnOff();
    }
    return m_doNotSuppressBlankLines;
}

const CT_OnOff& CT_MailMerge::get_doNotSuppressBlankLines() const
{
    if (m_doNotSuppressBlankLines)
    {
        return *m_doNotSuppressBlankLines;
    }
    return CT_OnOff::default_instance();
}

bool CT_MailMerge::has_destination() const
{
    return m_has_destination;
}

CT_MailMergeDest* CT_MailMerge::mutable_destination()
{
    m_has_destination = true;
    if (!m_destination)
    {
        m_destination = new CT_MailMergeDest();
    }
    return m_destination;
}

const CT_MailMergeDest& CT_MailMerge::get_destination() const
{
    if (m_destination)
    {
        return *m_destination;
    }
    return CT_MailMergeDest::default_instance();
}

bool CT_MailMerge::has_addressFieldName() const
{
    return m_has_addressFieldName;
}

CT_String* CT_MailMerge::mutable_addressFieldName()
{
    m_has_addressFieldName = true;
    if (!m_addressFieldName)
    {
        m_addressFieldName = new CT_String();
    }
    return m_addressFieldName;
}

const CT_String& CT_MailMerge::get_addressFieldName() const
{
    if (m_addressFieldName)
    {
        return *m_addressFieldName;
    }
    return CT_String::default_instance();
}

bool CT_MailMerge::has_mailSubject() const
{
    return m_has_mailSubject;
}

CT_String* CT_MailMerge::mutable_mailSubject()
{
    m_has_mailSubject = true;
    if (!m_mailSubject)
    {
        m_mailSubject = new CT_String();
    }
    return m_mailSubject;
}

const CT_String& CT_MailMerge::get_mailSubject() const
{
    if (m_mailSubject)
    {
        return *m_mailSubject;
    }
    return CT_String::default_instance();
}

bool CT_MailMerge::has_mailAsAttachment() const
{
    return m_has_mailAsAttachment;
}

CT_OnOff* CT_MailMerge::mutable_mailAsAttachment()
{
    m_has_mailAsAttachment = true;
    if (!m_mailAsAttachment)
    {
        m_mailAsAttachment = new CT_OnOff();
    }
    return m_mailAsAttachment;
}

const CT_OnOff& CT_MailMerge::get_mailAsAttachment() const
{
    if (m_mailAsAttachment)
    {
        return *m_mailAsAttachment;
    }
    return CT_OnOff::default_instance();
}

bool CT_MailMerge::has_viewMergedData() const
{
    return m_has_viewMergedData;
}

CT_OnOff* CT_MailMerge::mutable_viewMergedData()
{
    m_has_viewMergedData = true;
    if (!m_viewMergedData)
    {
        m_viewMergedData = new CT_OnOff();
    }
    return m_viewMergedData;
}

const CT_OnOff& CT_MailMerge::get_viewMergedData() const
{
    if (m_viewMergedData)
    {
        return *m_viewMergedData;
    }
    return CT_OnOff::default_instance();
}

bool CT_MailMerge::has_activeRecord() const
{
    return m_has_activeRecord;
}

CT_DecimalNumber* CT_MailMerge::mutable_activeRecord()
{
    m_has_activeRecord = true;
    if (!m_activeRecord)
    {
        m_activeRecord = new CT_DecimalNumber();
    }
    return m_activeRecord;
}

const CT_DecimalNumber& CT_MailMerge::get_activeRecord() const
{
    if (m_activeRecord)
    {
        return *m_activeRecord;
    }
    return CT_DecimalNumber::default_instance();
}

bool CT_MailMerge::has_checkErrors() const
{
    return m_has_checkErrors;
}

CT_DecimalNumber* CT_MailMerge::mutable_checkErrors()
{
    m_has_checkErrors = true;
    if (!m_checkErrors)
    {
        m_checkErrors = new CT_DecimalNumber();
    }
    return m_checkErrors;
}

const CT_DecimalNumber& CT_MailMerge::get_checkErrors() const
{
    if (m_checkErrors)
    {
        return *m_checkErrors;
    }
    return CT_DecimalNumber::default_instance();
}

bool CT_MailMerge::has_odso() const
{
    return m_has_odso;
}

CT_Odso* CT_MailMerge::mutable_odso()
{
    m_has_odso = true;
    if (!m_odso)
    {
        m_odso = new CT_Odso();
    }
    return m_odso;
}

const CT_Odso& CT_MailMerge::get_odso() const
{
    if (m_odso)
    {
        return *m_odso;
    }
    return CT_Odso::default_instance();
}

void CT_MailMerge::clear()
{
    m_has_mainDocumentType = false;

    if (m_mainDocumentType)
    {
        delete m_mainDocumentType;
        m_mainDocumentType = NULL;
    }


    m_has_linkToQuery = false;

    if (m_linkToQuery)
    {
        delete m_linkToQuery;
        m_linkToQuery = NULL;
    }


    m_has_dataType = false;

    if (m_dataType)
    {
        delete m_dataType;
        m_dataType = NULL;
    }


    m_has_connectString = false;

    if (m_connectString)
    {
        delete m_connectString;
        m_connectString = NULL;
    }


    m_has_query = false;

    if (m_query)
    {
        delete m_query;
        m_query = NULL;
    }


    m_has_dataSource = false;

    if (m_dataSource)
    {
        delete m_dataSource;
        m_dataSource = NULL;
    }


    m_has_headerSource = false;

    if (m_headerSource)
    {
        delete m_headerSource;
        m_headerSource = NULL;
    }


    m_has_doNotSuppressBlankLines = false;

    if (m_doNotSuppressBlankLines)
    {
        delete m_doNotSuppressBlankLines;
        m_doNotSuppressBlankLines = NULL;
    }


    m_has_destination = false;

    if (m_destination)
    {
        delete m_destination;
        m_destination = NULL;
    }


    m_has_addressFieldName = false;

    if (m_addressFieldName)
    {
        delete m_addressFieldName;
        m_addressFieldName = NULL;
    }


    m_has_mailSubject = false;

    if (m_mailSubject)
    {
        delete m_mailSubject;
        m_mailSubject = NULL;
    }


    m_has_mailAsAttachment = false;

    if (m_mailAsAttachment)
    {
        delete m_mailAsAttachment;
        m_mailAsAttachment = NULL;
    }


    m_has_viewMergedData = false;

    if (m_viewMergedData)
    {
        delete m_viewMergedData;
        m_viewMergedData = NULL;
    }


    m_has_activeRecord = false;

    if (m_activeRecord)
    {
        delete m_activeRecord;
        m_activeRecord = NULL;
    }


    m_has_checkErrors = false;

    if (m_checkErrors)
    {
        delete m_checkErrors;
        m_checkErrors = NULL;
    }


    m_has_odso = false;

    if (m_odso)
    {
        delete m_odso;
        m_odso = NULL;
    }

}

void CT_MailMerge::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";

    assert(m_has_mainDocumentType);


    assert(m_has_dataType);


    if (m_has_mainDocumentType)
    {
        m_mainDocumentType->toXmlElem("w:mainDocumentType", "", _outStream);
    }


    if (m_has_linkToQuery)
    {
        m_linkToQuery->toXmlElem("w:linkToQuery", "", _outStream);
    }


    if (m_has_dataType)
    {
        m_dataType->toXmlElem("w:dataType", "", _outStream);
    }


    if (m_has_connectString)
    {
        m_connectString->toXmlElem("w:connectString", "", _outStream);
    }


    if (m_has_query)
    {
        m_query->toXmlElem("w:query", "", _outStream);
    }


    if (m_has_dataSource)
    {
        m_dataSource->toXmlElem("w:dataSource", "", _outStream);
    }


    if (m_has_headerSource)
    {
        m_headerSource->toXmlElem("w:headerSource", "", _outStream);
    }


    if (m_has_doNotSuppressBlankLines)
    {
        m_doNotSuppressBlankLines->toXmlElem("w:doNotSuppressBlankLines", "", _outStream);
    }


    if (m_has_destination)
    {
        m_destination->toXmlElem("w:destination", "", _outStream);
    }


    if (m_has_addressFieldName)
    {
        m_addressFieldName->toXmlElem("w:addressFieldName", "", _outStream);
    }


    if (m_has_mailSubject)
    {
        m_mailSubject->toXmlElem("w:mailSubject", "", _outStream);
    }


    if (m_has_mailAsAttachment)
    {
        m_mailAsAttachment->toXmlElem("w:mailAsAttachment", "", _outStream);
    }


    if (m_has_viewMergedData)
    {
        m_viewMergedData->toXmlElem("w:viewMergedData", "", _outStream);
    }


    if (m_has_activeRecord)
    {
        m_activeRecord->toXmlElem("w:activeRecord", "", _outStream);
    }


    if (m_has_checkErrors)
    {
        m_checkErrors->toXmlElem("w:checkErrors", "", _outStream);
    }


    if (m_has_odso)
    {
        m_odso->toXmlElem("w:odso", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_MailMerge& CT_MailMerge::default_instance()
{
    if (!CT_MailMerge::default_instance_)
    {
        CT_MailMerge::default_instance_ = new CT_MailMerge();
    }
    return *CT_MailMerge::default_instance_;
}

CT_MailMerge* CT_MailMerge::default_instance_ = NULL;

// CT_TargetScreenSz
CT_TargetScreenSz::CT_TargetScreenSz()
    :m_has_val_attr(false),
     m_val_attr(NULL)
{
}
CT_TargetScreenSz::~CT_TargetScreenSz()
{
    clear();
}
void CT_TargetScreenSz::clear()
{
    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }

}

void CT_TargetScreenSz::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_val_attr);
    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_TargetScreenSz& CT_TargetScreenSz::default_instance()
{
    if (!CT_TargetScreenSz::default_instance_)
    {
        CT_TargetScreenSz::default_instance_ = new CT_TargetScreenSz();
    }
    return *CT_TargetScreenSz::default_instance_;
}

bool CT_TargetScreenSz::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_TargetScreenSz::set_val_attr(const ST_TargetScreenSz& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ST_TargetScreenSz(_val_attr);
}

const ST_TargetScreenSz& CT_TargetScreenSz::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ST_TargetScreenSz::default_instance();
}

CT_TargetScreenSz* CT_TargetScreenSz::default_instance_ = NULL;

// CT_Compat
CT_Compat::CT_Compat()
    :m_has_useSingleBorderforContiguousCells(false),
     m_useSingleBorderforContiguousCells(NULL),
     m_has_wpJustification(false),
     m_wpJustification(NULL),
     m_has_noTabHangInd(false),
     m_noTabHangInd(NULL),
     m_has_noLeading(false),
     m_noLeading(NULL),
     m_has_spaceForUL(false),
     m_spaceForUL(NULL),
     m_has_noColumnBalance(false),
     m_noColumnBalance(NULL),
     m_has_balanceSingleByteDoubleByteWidth(false),
     m_balanceSingleByteDoubleByteWidth(NULL),
     m_has_noExtraLineSpacing(false),
     m_noExtraLineSpacing(NULL),
     m_has_doNotLeaveBackslashAlone(false),
     m_doNotLeaveBackslashAlone(NULL),
     m_has_ulTrailSpace(false),
     m_ulTrailSpace(NULL),
     m_has_doNotExpandShiftReturn(false),
     m_doNotExpandShiftReturn(NULL),
     m_has_spacingInWholePoints(false),
     m_spacingInWholePoints(NULL),
     m_has_lineWrapLikeWord6(false),
     m_lineWrapLikeWord6(NULL),
     m_has_printBodyTextBeforeHeader(false),
     m_printBodyTextBeforeHeader(NULL),
     m_has_printColBlack(false),
     m_printColBlack(NULL),
     m_has_wpSpaceWidth(false),
     m_wpSpaceWidth(NULL),
     m_has_showBreaksInFrames(false),
     m_showBreaksInFrames(NULL),
     m_has_subFontBySize(false),
     m_subFontBySize(NULL),
     m_has_suppressBottomSpacing(false),
     m_suppressBottomSpacing(NULL),
     m_has_suppressTopSpacing(false),
     m_suppressTopSpacing(NULL),
     m_has_suppressSpacingAtTopOfPage(false),
     m_suppressSpacingAtTopOfPage(NULL),
     m_has_suppressTopSpacingWP(false),
     m_suppressTopSpacingWP(NULL),
     m_has_suppressSpBfAfterPgBrk(false),
     m_suppressSpBfAfterPgBrk(NULL),
     m_has_swapBordersFacingPages(false),
     m_swapBordersFacingPages(NULL),
     m_has_convMailMergeEsc(false),
     m_convMailMergeEsc(NULL),
     m_has_truncateFontHeightsLikeWP6(false),
     m_truncateFontHeightsLikeWP6(NULL),
     m_has_mwSmallCaps(false),
     m_mwSmallCaps(NULL),
     m_has_usePrinterMetrics(false),
     m_usePrinterMetrics(NULL),
     m_has_doNotSuppressParagraphBorders(false),
     m_doNotSuppressParagraphBorders(NULL),
     m_has_wrapTrailSpaces(false),
     m_wrapTrailSpaces(NULL),
     m_has_footnoteLayoutLikeWW8(false),
     m_footnoteLayoutLikeWW8(NULL),
     m_has_shapeLayoutLikeWW8(false),
     m_shapeLayoutLikeWW8(NULL),
     m_has_alignTablesRowByRow(false),
     m_alignTablesRowByRow(NULL),
     m_has_forgetLastTabAlignment(false),
     m_forgetLastTabAlignment(NULL),
     m_has_adjustLineHeightInTable(false),
     m_adjustLineHeightInTable(NULL),
     m_has_autoSpaceLikeWord95(false),
     m_autoSpaceLikeWord95(NULL),
     m_has_noSpaceRaiseLower(false),
     m_noSpaceRaiseLower(NULL),
     m_has_doNotUseHTMLParagraphAutoSpacing(false),
     m_doNotUseHTMLParagraphAutoSpacing(NULL),
     m_has_layoutRawTableWidth(false),
     m_layoutRawTableWidth(NULL),
     m_has_layoutTableRowsApart(false),
     m_layoutTableRowsApart(NULL),
     m_has_useWord97LineBreakRules(false),
     m_useWord97LineBreakRules(NULL),
     m_has_doNotBreakWrappedTables(false),
     m_doNotBreakWrappedTables(NULL),
     m_has_doNotSnapToGridInCell(false),
     m_doNotSnapToGridInCell(NULL),
     m_has_selectFldWithFirstOrLastChar(false),
     m_selectFldWithFirstOrLastChar(NULL),
     m_has_applyBreakingRules(false),
     m_applyBreakingRules(NULL),
     m_has_doNotWrapTextWithPunct(false),
     m_doNotWrapTextWithPunct(NULL),
     m_has_doNotUseEastAsianBreakRules(false),
     m_doNotUseEastAsianBreakRules(NULL),
     m_has_useWord2002TableStyleRules(false),
     m_useWord2002TableStyleRules(NULL),
     m_has_growAutofit(false),
     m_growAutofit(NULL),
     m_has_useFELayout(false),
     m_useFELayout(NULL),
     m_has_useNormalStyleForList(false),
     m_useNormalStyleForList(NULL),
     m_has_doNotUseIndentAsNumberingTabStop(false),
     m_doNotUseIndentAsNumberingTabStop(NULL),
     m_has_useAltKinsokuLineBreakRules(false),
     m_useAltKinsokuLineBreakRules(NULL),
     m_has_allowSpaceOfSameStyleInTable(false),
     m_allowSpaceOfSameStyleInTable(NULL),
     m_has_doNotSuppressIndentation(false),
     m_doNotSuppressIndentation(NULL),
     m_has_doNotAutofitConstrainedTables(false),
     m_doNotAutofitConstrainedTables(NULL),
     m_has_autofitToFirstFixedWidthCell(false),
     m_autofitToFirstFixedWidthCell(NULL),
     m_has_underlineTabInNumList(false),
     m_underlineTabInNumList(NULL),
     m_has_displayHangulFixedWidth(false),
     m_displayHangulFixedWidth(NULL),
     m_has_splitPgBreakAndParaMark(false),
     m_splitPgBreakAndParaMark(NULL),
     m_has_doNotVertAlignCellWithSp(false),
     m_doNotVertAlignCellWithSp(NULL),
     m_has_doNotBreakConstrainedForcedTable(false),
     m_doNotBreakConstrainedForcedTable(NULL),
     m_has_doNotVertAlignInTxbx(false),
     m_doNotVertAlignInTxbx(NULL),
     m_has_useAnsiKerningPairs(false),
     m_useAnsiKerningPairs(NULL),
     m_has_cachedColBalance(false),
     m_cachedColBalance(NULL)
{
}
CT_Compat::~CT_Compat()
{
    clear();
}
bool CT_Compat::has_useSingleBorderforContiguousCells() const
{
    return m_has_useSingleBorderforContiguousCells;
}

CT_OnOff* CT_Compat::mutable_useSingleBorderforContiguousCells()
{
    m_has_useSingleBorderforContiguousCells = true;
    if (!m_useSingleBorderforContiguousCells)
    {
        m_useSingleBorderforContiguousCells = new CT_OnOff();
    }
    return m_useSingleBorderforContiguousCells;
}

const CT_OnOff& CT_Compat::get_useSingleBorderforContiguousCells() const
{
    if (m_useSingleBorderforContiguousCells)
    {
        return *m_useSingleBorderforContiguousCells;
    }
    return CT_OnOff::default_instance();
}

bool CT_Compat::has_wpJustification() const
{
    return m_has_wpJustification;
}

CT_OnOff* CT_Compat::mutable_wpJustification()
{
    m_has_wpJustification = true;
    if (!m_wpJustification)
    {
        m_wpJustification = new CT_OnOff();
    }
    return m_wpJustification;
}

const CT_OnOff& CT_Compat::get_wpJustification() const
{
    if (m_wpJustification)
    {
        return *m_wpJustification;
    }
    return CT_OnOff::default_instance();
}

bool CT_Compat::has_noTabHangInd() const
{
    return m_has_noTabHangInd;
}

CT_OnOff* CT_Compat::mutable_noTabHangInd()
{
    m_has_noTabHangInd = true;
    if (!m_noTabHangInd)
    {
        m_noTabHangInd = new CT_OnOff();
    }
    return m_noTabHangInd;
}

const CT_OnOff& CT_Compat::get_noTabHangInd() const
{
    if (m_noTabHangInd)
    {
        return *m_noTabHangInd;
    }
    return CT_OnOff::default_instance();
}

bool CT_Compat::has_noLeading() const
{
    return m_has_noLeading;
}

CT_OnOff* CT_Compat::mutable_noLeading()
{
    m_has_noLeading = true;
    if (!m_noLeading)
    {
        m_noLeading = new CT_OnOff();
    }
    return m_noLeading;
}

const CT_OnOff& CT_Compat::get_noLeading() const
{
    if (m_noLeading)
    {
        return *m_noLeading;
    }
    return CT_OnOff::default_instance();
}

bool CT_Compat::has_spaceForUL() const
{
    return m_has_spaceForUL;
}

CT_OnOff* CT_Compat::mutable_spaceForUL()
{
    m_has_spaceForUL = true;
    if (!m_spaceForUL)
    {
        m_spaceForUL = new CT_OnOff();
    }
    return m_spaceForUL;
}

const CT_OnOff& CT_Compat::get_spaceForUL() const
{
    if (m_spaceForUL)
    {
        return *m_spaceForUL;
    }
    return CT_OnOff::default_instance();
}

bool CT_Compat::has_noColumnBalance() const
{
    return m_has_noColumnBalance;
}

CT_OnOff* CT_Compat::mutable_noColumnBalance()
{
    m_has_noColumnBalance = true;
    if (!m_noColumnBalance)
    {
        m_noColumnBalance = new CT_OnOff();
    }
    return m_noColumnBalance;
}

const CT_OnOff& CT_Compat::get_noColumnBalance() const
{
    if (m_noColumnBalance)
    {
        return *m_noColumnBalance;
    }
    return CT_OnOff::default_instance();
}

bool CT_Compat::has_balanceSingleByteDoubleByteWidth() const
{
    return m_has_balanceSingleByteDoubleByteWidth;
}

CT_OnOff* CT_Compat::mutable_balanceSingleByteDoubleByteWidth()
{
    m_has_balanceSingleByteDoubleByteWidth = true;
    if (!m_balanceSingleByteDoubleByteWidth)
    {
        m_balanceSingleByteDoubleByteWidth = new CT_OnOff();
    }
    return m_balanceSingleByteDoubleByteWidth;
}

const CT_OnOff& CT_Compat::get_balanceSingleByteDoubleByteWidth() const
{
    if (m_balanceSingleByteDoubleByteWidth)
    {
        return *m_balanceSingleByteDoubleByteWidth;
    }
    return CT_OnOff::default_instance();
}

bool CT_Compat::has_noExtraLineSpacing() const
{
    return m_has_noExtraLineSpacing;
}

CT_OnOff* CT_Compat::mutable_noExtraLineSpacing()
{
    m_has_noExtraLineSpacing = true;
    if (!m_noExtraLineSpacing)
    {
        m_noExtraLineSpacing = new CT_OnOff();
    }
    return m_noExtraLineSpacing;
}

const CT_OnOff& CT_Compat::get_noExtraLineSpacing() const
{
    if (m_noExtraLineSpacing)
    {
        return *m_noExtraLineSpacing;
    }
    return CT_OnOff::default_instance();
}

bool CT_Compat::has_doNotLeaveBackslashAlone() const
{
    return m_has_doNotLeaveBackslashAlone;
}

CT_OnOff* CT_Compat::mutable_doNotLeaveBackslashAlone()
{
    m_has_doNotLeaveBackslashAlone = true;
    if (!m_doNotLeaveBackslashAlone)
    {
        m_doNotLeaveBackslashAlone = new CT_OnOff();
    }
    return m_doNotLeaveBackslashAlone;
}

const CT_OnOff& CT_Compat::get_doNotLeaveBackslashAlone() const
{
    if (m_doNotLeaveBackslashAlone)
    {
        return *m_doNotLeaveBackslashAlone;
    }
    return CT_OnOff::default_instance();
}

bool CT_Compat::has_ulTrailSpace() const
{
    return m_has_ulTrailSpace;
}

CT_OnOff* CT_Compat::mutable_ulTrailSpace()
{
    m_has_ulTrailSpace = true;
    if (!m_ulTrailSpace)
    {
        m_ulTrailSpace = new CT_OnOff();
    }
    return m_ulTrailSpace;
}

const CT_OnOff& CT_Compat::get_ulTrailSpace() const
{
    if (m_ulTrailSpace)
    {
        return *m_ulTrailSpace;
    }
    return CT_OnOff::default_instance();
}

bool CT_Compat::has_doNotExpandShiftReturn() const
{
    return m_has_doNotExpandShiftReturn;
}

CT_OnOff* CT_Compat::mutable_doNotExpandShiftReturn()
{
    m_has_doNotExpandShiftReturn = true;
    if (!m_doNotExpandShiftReturn)
    {
        m_doNotExpandShiftReturn = new CT_OnOff();
    }
    return m_doNotExpandShiftReturn;
}

const CT_OnOff& CT_Compat::get_doNotExpandShiftReturn() const
{
    if (m_doNotExpandShiftReturn)
    {
        return *m_doNotExpandShiftReturn;
    }
    return CT_OnOff::default_instance();
}

bool CT_Compat::has_spacingInWholePoints() const
{
    return m_has_spacingInWholePoints;
}

CT_OnOff* CT_Compat::mutable_spacingInWholePoints()
{
    m_has_spacingInWholePoints = true;
    if (!m_spacingInWholePoints)
    {
        m_spacingInWholePoints = new CT_OnOff();
    }
    return m_spacingInWholePoints;
}

const CT_OnOff& CT_Compat::get_spacingInWholePoints() const
{
    if (m_spacingInWholePoints)
    {
        return *m_spacingInWholePoints;
    }
    return CT_OnOff::default_instance();
}

bool CT_Compat::has_lineWrapLikeWord6() const
{
    return m_has_lineWrapLikeWord6;
}

CT_OnOff* CT_Compat::mutable_lineWrapLikeWord6()
{
    m_has_lineWrapLikeWord6 = true;
    if (!m_lineWrapLikeWord6)
    {
        m_lineWrapLikeWord6 = new CT_OnOff();
    }
    return m_lineWrapLikeWord6;
}

const CT_OnOff& CT_Compat::get_lineWrapLikeWord6() const
{
    if (m_lineWrapLikeWord6)
    {
        return *m_lineWrapLikeWord6;
    }
    return CT_OnOff::default_instance();
}

bool CT_Compat::has_printBodyTextBeforeHeader() const
{
    return m_has_printBodyTextBeforeHeader;
}

CT_OnOff* CT_Compat::mutable_printBodyTextBeforeHeader()
{
    m_has_printBodyTextBeforeHeader = true;
    if (!m_printBodyTextBeforeHeader)
    {
        m_printBodyTextBeforeHeader = new CT_OnOff();
    }
    return m_printBodyTextBeforeHeader;
}

const CT_OnOff& CT_Compat::get_printBodyTextBeforeHeader() const
{
    if (m_printBodyTextBeforeHeader)
    {
        return *m_printBodyTextBeforeHeader;
    }
    return CT_OnOff::default_instance();
}

bool CT_Compat::has_printColBlack() const
{
    return m_has_printColBlack;
}

CT_OnOff* CT_Compat::mutable_printColBlack()
{
    m_has_printColBlack = true;
    if (!m_printColBlack)
    {
        m_printColBlack = new CT_OnOff();
    }
    return m_printColBlack;
}

const CT_OnOff& CT_Compat::get_printColBlack() const
{
    if (m_printColBlack)
    {
        return *m_printColBlack;
    }
    return CT_OnOff::default_instance();
}

bool CT_Compat::has_wpSpaceWidth() const
{
    return m_has_wpSpaceWidth;
}

CT_OnOff* CT_Compat::mutable_wpSpaceWidth()
{
    m_has_wpSpaceWidth = true;
    if (!m_wpSpaceWidth)
    {
        m_wpSpaceWidth = new CT_OnOff();
    }
    return m_wpSpaceWidth;
}

const CT_OnOff& CT_Compat::get_wpSpaceWidth() const
{
    if (m_wpSpaceWidth)
    {
        return *m_wpSpaceWidth;
    }
    return CT_OnOff::default_instance();
}

bool CT_Compat::has_showBreaksInFrames() const
{
    return m_has_showBreaksInFrames;
}

CT_OnOff* CT_Compat::mutable_showBreaksInFrames()
{
    m_has_showBreaksInFrames = true;
    if (!m_showBreaksInFrames)
    {
        m_showBreaksInFrames = new CT_OnOff();
    }
    return m_showBreaksInFrames;
}

const CT_OnOff& CT_Compat::get_showBreaksInFrames() const
{
    if (m_showBreaksInFrames)
    {
        return *m_showBreaksInFrames;
    }
    return CT_OnOff::default_instance();
}

bool CT_Compat::has_subFontBySize() const
{
    return m_has_subFontBySize;
}

CT_OnOff* CT_Compat::mutable_subFontBySize()
{
    m_has_subFontBySize = true;
    if (!m_subFontBySize)
    {
        m_subFontBySize = new CT_OnOff();
    }
    return m_subFontBySize;
}

const CT_OnOff& CT_Compat::get_subFontBySize() const
{
    if (m_subFontBySize)
    {
        return *m_subFontBySize;
    }
    return CT_OnOff::default_instance();
}

bool CT_Compat::has_suppressBottomSpacing() const
{
    return m_has_suppressBottomSpacing;
}

CT_OnOff* CT_Compat::mutable_suppressBottomSpacing()
{
    m_has_suppressBottomSpacing = true;
    if (!m_suppressBottomSpacing)
    {
        m_suppressBottomSpacing = new CT_OnOff();
    }
    return m_suppressBottomSpacing;
}

const CT_OnOff& CT_Compat::get_suppressBottomSpacing() const
{
    if (m_suppressBottomSpacing)
    {
        return *m_suppressBottomSpacing;
    }
    return CT_OnOff::default_instance();
}

bool CT_Compat::has_suppressTopSpacing() const
{
    return m_has_suppressTopSpacing;
}

CT_OnOff* CT_Compat::mutable_suppressTopSpacing()
{
    m_has_suppressTopSpacing = true;
    if (!m_suppressTopSpacing)
    {
        m_suppressTopSpacing = new CT_OnOff();
    }
    return m_suppressTopSpacing;
}

const CT_OnOff& CT_Compat::get_suppressTopSpacing() const
{
    if (m_suppressTopSpacing)
    {
        return *m_suppressTopSpacing;
    }
    return CT_OnOff::default_instance();
}

bool CT_Compat::has_suppressSpacingAtTopOfPage() const
{
    return m_has_suppressSpacingAtTopOfPage;
}

CT_OnOff* CT_Compat::mutable_suppressSpacingAtTopOfPage()
{
    m_has_suppressSpacingAtTopOfPage = true;
    if (!m_suppressSpacingAtTopOfPage)
    {
        m_suppressSpacingAtTopOfPage = new CT_OnOff();
    }
    return m_suppressSpacingAtTopOfPage;
}

const CT_OnOff& CT_Compat::get_suppressSpacingAtTopOfPage() const
{
    if (m_suppressSpacingAtTopOfPage)
    {
        return *m_suppressSpacingAtTopOfPage;
    }
    return CT_OnOff::default_instance();
}

bool CT_Compat::has_suppressTopSpacingWP() const
{
    return m_has_suppressTopSpacingWP;
}

CT_OnOff* CT_Compat::mutable_suppressTopSpacingWP()
{
    m_has_suppressTopSpacingWP = true;
    if (!m_suppressTopSpacingWP)
    {
        m_suppressTopSpacingWP = new CT_OnOff();
    }
    return m_suppressTopSpacingWP;
}

const CT_OnOff& CT_Compat::get_suppressTopSpacingWP() const
{
    if (m_suppressTopSpacingWP)
    {
        return *m_suppressTopSpacingWP;
    }
    return CT_OnOff::default_instance();
}

bool CT_Compat::has_suppressSpBfAfterPgBrk() const
{
    return m_has_suppressSpBfAfterPgBrk;
}

CT_OnOff* CT_Compat::mutable_suppressSpBfAfterPgBrk()
{
    m_has_suppressSpBfAfterPgBrk = true;
    if (!m_suppressSpBfAfterPgBrk)
    {
        m_suppressSpBfAfterPgBrk = new CT_OnOff();
    }
    return m_suppressSpBfAfterPgBrk;
}

const CT_OnOff& CT_Compat::get_suppressSpBfAfterPgBrk() const
{
    if (m_suppressSpBfAfterPgBrk)
    {
        return *m_suppressSpBfAfterPgBrk;
    }
    return CT_OnOff::default_instance();
}

bool CT_Compat::has_swapBordersFacingPages() const
{
    return m_has_swapBordersFacingPages;
}

CT_OnOff* CT_Compat::mutable_swapBordersFacingPages()
{
    m_has_swapBordersFacingPages = true;
    if (!m_swapBordersFacingPages)
    {
        m_swapBordersFacingPages = new CT_OnOff();
    }
    return m_swapBordersFacingPages;
}

const CT_OnOff& CT_Compat::get_swapBordersFacingPages() const
{
    if (m_swapBordersFacingPages)
    {
        return *m_swapBordersFacingPages;
    }
    return CT_OnOff::default_instance();
}

bool CT_Compat::has_convMailMergeEsc() const
{
    return m_has_convMailMergeEsc;
}

CT_OnOff* CT_Compat::mutable_convMailMergeEsc()
{
    m_has_convMailMergeEsc = true;
    if (!m_convMailMergeEsc)
    {
        m_convMailMergeEsc = new CT_OnOff();
    }
    return m_convMailMergeEsc;
}

const CT_OnOff& CT_Compat::get_convMailMergeEsc() const
{
    if (m_convMailMergeEsc)
    {
        return *m_convMailMergeEsc;
    }
    return CT_OnOff::default_instance();
}

bool CT_Compat::has_truncateFontHeightsLikeWP6() const
{
    return m_has_truncateFontHeightsLikeWP6;
}

CT_OnOff* CT_Compat::mutable_truncateFontHeightsLikeWP6()
{
    m_has_truncateFontHeightsLikeWP6 = true;
    if (!m_truncateFontHeightsLikeWP6)
    {
        m_truncateFontHeightsLikeWP6 = new CT_OnOff();
    }
    return m_truncateFontHeightsLikeWP6;
}

const CT_OnOff& CT_Compat::get_truncateFontHeightsLikeWP6() const
{
    if (m_truncateFontHeightsLikeWP6)
    {
        return *m_truncateFontHeightsLikeWP6;
    }
    return CT_OnOff::default_instance();
}

bool CT_Compat::has_mwSmallCaps() const
{
    return m_has_mwSmallCaps;
}

CT_OnOff* CT_Compat::mutable_mwSmallCaps()
{
    m_has_mwSmallCaps = true;
    if (!m_mwSmallCaps)
    {
        m_mwSmallCaps = new CT_OnOff();
    }
    return m_mwSmallCaps;
}

const CT_OnOff& CT_Compat::get_mwSmallCaps() const
{
    if (m_mwSmallCaps)
    {
        return *m_mwSmallCaps;
    }
    return CT_OnOff::default_instance();
}

bool CT_Compat::has_usePrinterMetrics() const
{
    return m_has_usePrinterMetrics;
}

CT_OnOff* CT_Compat::mutable_usePrinterMetrics()
{
    m_has_usePrinterMetrics = true;
    if (!m_usePrinterMetrics)
    {
        m_usePrinterMetrics = new CT_OnOff();
    }
    return m_usePrinterMetrics;
}

const CT_OnOff& CT_Compat::get_usePrinterMetrics() const
{
    if (m_usePrinterMetrics)
    {
        return *m_usePrinterMetrics;
    }
    return CT_OnOff::default_instance();
}

bool CT_Compat::has_doNotSuppressParagraphBorders() const
{
    return m_has_doNotSuppressParagraphBorders;
}

CT_OnOff* CT_Compat::mutable_doNotSuppressParagraphBorders()
{
    m_has_doNotSuppressParagraphBorders = true;
    if (!m_doNotSuppressParagraphBorders)
    {
        m_doNotSuppressParagraphBorders = new CT_OnOff();
    }
    return m_doNotSuppressParagraphBorders;
}

const CT_OnOff& CT_Compat::get_doNotSuppressParagraphBorders() const
{
    if (m_doNotSuppressParagraphBorders)
    {
        return *m_doNotSuppressParagraphBorders;
    }
    return CT_OnOff::default_instance();
}

bool CT_Compat::has_wrapTrailSpaces() const
{
    return m_has_wrapTrailSpaces;
}

CT_OnOff* CT_Compat::mutable_wrapTrailSpaces()
{
    m_has_wrapTrailSpaces = true;
    if (!m_wrapTrailSpaces)
    {
        m_wrapTrailSpaces = new CT_OnOff();
    }
    return m_wrapTrailSpaces;
}

const CT_OnOff& CT_Compat::get_wrapTrailSpaces() const
{
    if (m_wrapTrailSpaces)
    {
        return *m_wrapTrailSpaces;
    }
    return CT_OnOff::default_instance();
}

bool CT_Compat::has_footnoteLayoutLikeWW8() const
{
    return m_has_footnoteLayoutLikeWW8;
}

CT_OnOff* CT_Compat::mutable_footnoteLayoutLikeWW8()
{
    m_has_footnoteLayoutLikeWW8 = true;
    if (!m_footnoteLayoutLikeWW8)
    {
        m_footnoteLayoutLikeWW8 = new CT_OnOff();
    }
    return m_footnoteLayoutLikeWW8;
}

const CT_OnOff& CT_Compat::get_footnoteLayoutLikeWW8() const
{
    if (m_footnoteLayoutLikeWW8)
    {
        return *m_footnoteLayoutLikeWW8;
    }
    return CT_OnOff::default_instance();
}

bool CT_Compat::has_shapeLayoutLikeWW8() const
{
    return m_has_shapeLayoutLikeWW8;
}

CT_OnOff* CT_Compat::mutable_shapeLayoutLikeWW8()
{
    m_has_shapeLayoutLikeWW8 = true;
    if (!m_shapeLayoutLikeWW8)
    {
        m_shapeLayoutLikeWW8 = new CT_OnOff();
    }
    return m_shapeLayoutLikeWW8;
}

const CT_OnOff& CT_Compat::get_shapeLayoutLikeWW8() const
{
    if (m_shapeLayoutLikeWW8)
    {
        return *m_shapeLayoutLikeWW8;
    }
    return CT_OnOff::default_instance();
}

bool CT_Compat::has_alignTablesRowByRow() const
{
    return m_has_alignTablesRowByRow;
}

CT_OnOff* CT_Compat::mutable_alignTablesRowByRow()
{
    m_has_alignTablesRowByRow = true;
    if (!m_alignTablesRowByRow)
    {
        m_alignTablesRowByRow = new CT_OnOff();
    }
    return m_alignTablesRowByRow;
}

const CT_OnOff& CT_Compat::get_alignTablesRowByRow() const
{
    if (m_alignTablesRowByRow)
    {
        return *m_alignTablesRowByRow;
    }
    return CT_OnOff::default_instance();
}

bool CT_Compat::has_forgetLastTabAlignment() const
{
    return m_has_forgetLastTabAlignment;
}

CT_OnOff* CT_Compat::mutable_forgetLastTabAlignment()
{
    m_has_forgetLastTabAlignment = true;
    if (!m_forgetLastTabAlignment)
    {
        m_forgetLastTabAlignment = new CT_OnOff();
    }
    return m_forgetLastTabAlignment;
}

const CT_OnOff& CT_Compat::get_forgetLastTabAlignment() const
{
    if (m_forgetLastTabAlignment)
    {
        return *m_forgetLastTabAlignment;
    }
    return CT_OnOff::default_instance();
}

bool CT_Compat::has_adjustLineHeightInTable() const
{
    return m_has_adjustLineHeightInTable;
}

CT_OnOff* CT_Compat::mutable_adjustLineHeightInTable()
{
    m_has_adjustLineHeightInTable = true;
    if (!m_adjustLineHeightInTable)
    {
        m_adjustLineHeightInTable = new CT_OnOff();
    }
    return m_adjustLineHeightInTable;
}

const CT_OnOff& CT_Compat::get_adjustLineHeightInTable() const
{
    if (m_adjustLineHeightInTable)
    {
        return *m_adjustLineHeightInTable;
    }
    return CT_OnOff::default_instance();
}

bool CT_Compat::has_autoSpaceLikeWord95() const
{
    return m_has_autoSpaceLikeWord95;
}

CT_OnOff* CT_Compat::mutable_autoSpaceLikeWord95()
{
    m_has_autoSpaceLikeWord95 = true;
    if (!m_autoSpaceLikeWord95)
    {
        m_autoSpaceLikeWord95 = new CT_OnOff();
    }
    return m_autoSpaceLikeWord95;
}

const CT_OnOff& CT_Compat::get_autoSpaceLikeWord95() const
{
    if (m_autoSpaceLikeWord95)
    {
        return *m_autoSpaceLikeWord95;
    }
    return CT_OnOff::default_instance();
}

bool CT_Compat::has_noSpaceRaiseLower() const
{
    return m_has_noSpaceRaiseLower;
}

CT_OnOff* CT_Compat::mutable_noSpaceRaiseLower()
{
    m_has_noSpaceRaiseLower = true;
    if (!m_noSpaceRaiseLower)
    {
        m_noSpaceRaiseLower = new CT_OnOff();
    }
    return m_noSpaceRaiseLower;
}

const CT_OnOff& CT_Compat::get_noSpaceRaiseLower() const
{
    if (m_noSpaceRaiseLower)
    {
        return *m_noSpaceRaiseLower;
    }
    return CT_OnOff::default_instance();
}

bool CT_Compat::has_doNotUseHTMLParagraphAutoSpacing() const
{
    return m_has_doNotUseHTMLParagraphAutoSpacing;
}

CT_OnOff* CT_Compat::mutable_doNotUseHTMLParagraphAutoSpacing()
{
    m_has_doNotUseHTMLParagraphAutoSpacing = true;
    if (!m_doNotUseHTMLParagraphAutoSpacing)
    {
        m_doNotUseHTMLParagraphAutoSpacing = new CT_OnOff();
    }
    return m_doNotUseHTMLParagraphAutoSpacing;
}

const CT_OnOff& CT_Compat::get_doNotUseHTMLParagraphAutoSpacing() const
{
    if (m_doNotUseHTMLParagraphAutoSpacing)
    {
        return *m_doNotUseHTMLParagraphAutoSpacing;
    }
    return CT_OnOff::default_instance();
}

bool CT_Compat::has_layoutRawTableWidth() const
{
    return m_has_layoutRawTableWidth;
}

CT_OnOff* CT_Compat::mutable_layoutRawTableWidth()
{
    m_has_layoutRawTableWidth = true;
    if (!m_layoutRawTableWidth)
    {
        m_layoutRawTableWidth = new CT_OnOff();
    }
    return m_layoutRawTableWidth;
}

const CT_OnOff& CT_Compat::get_layoutRawTableWidth() const
{
    if (m_layoutRawTableWidth)
    {
        return *m_layoutRawTableWidth;
    }
    return CT_OnOff::default_instance();
}

bool CT_Compat::has_layoutTableRowsApart() const
{
    return m_has_layoutTableRowsApart;
}

CT_OnOff* CT_Compat::mutable_layoutTableRowsApart()
{
    m_has_layoutTableRowsApart = true;
    if (!m_layoutTableRowsApart)
    {
        m_layoutTableRowsApart = new CT_OnOff();
    }
    return m_layoutTableRowsApart;
}

const CT_OnOff& CT_Compat::get_layoutTableRowsApart() const
{
    if (m_layoutTableRowsApart)
    {
        return *m_layoutTableRowsApart;
    }
    return CT_OnOff::default_instance();
}

bool CT_Compat::has_useWord97LineBreakRules() const
{
    return m_has_useWord97LineBreakRules;
}

CT_OnOff* CT_Compat::mutable_useWord97LineBreakRules()
{
    m_has_useWord97LineBreakRules = true;
    if (!m_useWord97LineBreakRules)
    {
        m_useWord97LineBreakRules = new CT_OnOff();
    }
    return m_useWord97LineBreakRules;
}

const CT_OnOff& CT_Compat::get_useWord97LineBreakRules() const
{
    if (m_useWord97LineBreakRules)
    {
        return *m_useWord97LineBreakRules;
    }
    return CT_OnOff::default_instance();
}

bool CT_Compat::has_doNotBreakWrappedTables() const
{
    return m_has_doNotBreakWrappedTables;
}

CT_OnOff* CT_Compat::mutable_doNotBreakWrappedTables()
{
    m_has_doNotBreakWrappedTables = true;
    if (!m_doNotBreakWrappedTables)
    {
        m_doNotBreakWrappedTables = new CT_OnOff();
    }
    return m_doNotBreakWrappedTables;
}

const CT_OnOff& CT_Compat::get_doNotBreakWrappedTables() const
{
    if (m_doNotBreakWrappedTables)
    {
        return *m_doNotBreakWrappedTables;
    }
    return CT_OnOff::default_instance();
}

bool CT_Compat::has_doNotSnapToGridInCell() const
{
    return m_has_doNotSnapToGridInCell;
}

CT_OnOff* CT_Compat::mutable_doNotSnapToGridInCell()
{
    m_has_doNotSnapToGridInCell = true;
    if (!m_doNotSnapToGridInCell)
    {
        m_doNotSnapToGridInCell = new CT_OnOff();
    }
    return m_doNotSnapToGridInCell;
}

const CT_OnOff& CT_Compat::get_doNotSnapToGridInCell() const
{
    if (m_doNotSnapToGridInCell)
    {
        return *m_doNotSnapToGridInCell;
    }
    return CT_OnOff::default_instance();
}

bool CT_Compat::has_selectFldWithFirstOrLastChar() const
{
    return m_has_selectFldWithFirstOrLastChar;
}

CT_OnOff* CT_Compat::mutable_selectFldWithFirstOrLastChar()
{
    m_has_selectFldWithFirstOrLastChar = true;
    if (!m_selectFldWithFirstOrLastChar)
    {
        m_selectFldWithFirstOrLastChar = new CT_OnOff();
    }
    return m_selectFldWithFirstOrLastChar;
}

const CT_OnOff& CT_Compat::get_selectFldWithFirstOrLastChar() const
{
    if (m_selectFldWithFirstOrLastChar)
    {
        return *m_selectFldWithFirstOrLastChar;
    }
    return CT_OnOff::default_instance();
}

bool CT_Compat::has_applyBreakingRules() const
{
    return m_has_applyBreakingRules;
}

CT_OnOff* CT_Compat::mutable_applyBreakingRules()
{
    m_has_applyBreakingRules = true;
    if (!m_applyBreakingRules)
    {
        m_applyBreakingRules = new CT_OnOff();
    }
    return m_applyBreakingRules;
}

const CT_OnOff& CT_Compat::get_applyBreakingRules() const
{
    if (m_applyBreakingRules)
    {
        return *m_applyBreakingRules;
    }
    return CT_OnOff::default_instance();
}

bool CT_Compat::has_doNotWrapTextWithPunct() const
{
    return m_has_doNotWrapTextWithPunct;
}

CT_OnOff* CT_Compat::mutable_doNotWrapTextWithPunct()
{
    m_has_doNotWrapTextWithPunct = true;
    if (!m_doNotWrapTextWithPunct)
    {
        m_doNotWrapTextWithPunct = new CT_OnOff();
    }
    return m_doNotWrapTextWithPunct;
}

const CT_OnOff& CT_Compat::get_doNotWrapTextWithPunct() const
{
    if (m_doNotWrapTextWithPunct)
    {
        return *m_doNotWrapTextWithPunct;
    }
    return CT_OnOff::default_instance();
}

bool CT_Compat::has_doNotUseEastAsianBreakRules() const
{
    return m_has_doNotUseEastAsianBreakRules;
}

CT_OnOff* CT_Compat::mutable_doNotUseEastAsianBreakRules()
{
    m_has_doNotUseEastAsianBreakRules = true;
    if (!m_doNotUseEastAsianBreakRules)
    {
        m_doNotUseEastAsianBreakRules = new CT_OnOff();
    }
    return m_doNotUseEastAsianBreakRules;
}

const CT_OnOff& CT_Compat::get_doNotUseEastAsianBreakRules() const
{
    if (m_doNotUseEastAsianBreakRules)
    {
        return *m_doNotUseEastAsianBreakRules;
    }
    return CT_OnOff::default_instance();
}

bool CT_Compat::has_useWord2002TableStyleRules() const
{
    return m_has_useWord2002TableStyleRules;
}

CT_OnOff* CT_Compat::mutable_useWord2002TableStyleRules()
{
    m_has_useWord2002TableStyleRules = true;
    if (!m_useWord2002TableStyleRules)
    {
        m_useWord2002TableStyleRules = new CT_OnOff();
    }
    return m_useWord2002TableStyleRules;
}

const CT_OnOff& CT_Compat::get_useWord2002TableStyleRules() const
{
    if (m_useWord2002TableStyleRules)
    {
        return *m_useWord2002TableStyleRules;
    }
    return CT_OnOff::default_instance();
}

bool CT_Compat::has_growAutofit() const
{
    return m_has_growAutofit;
}

CT_OnOff* CT_Compat::mutable_growAutofit()
{
    m_has_growAutofit = true;
    if (!m_growAutofit)
    {
        m_growAutofit = new CT_OnOff();
    }
    return m_growAutofit;
}

const CT_OnOff& CT_Compat::get_growAutofit() const
{
    if (m_growAutofit)
    {
        return *m_growAutofit;
    }
    return CT_OnOff::default_instance();
}

bool CT_Compat::has_useFELayout() const
{
    return m_has_useFELayout;
}

CT_OnOff* CT_Compat::mutable_useFELayout()
{
    m_has_useFELayout = true;
    if (!m_useFELayout)
    {
        m_useFELayout = new CT_OnOff();
    }
    return m_useFELayout;
}

const CT_OnOff& CT_Compat::get_useFELayout() const
{
    if (m_useFELayout)
    {
        return *m_useFELayout;
    }
    return CT_OnOff::default_instance();
}

bool CT_Compat::has_useNormalStyleForList() const
{
    return m_has_useNormalStyleForList;
}

CT_OnOff* CT_Compat::mutable_useNormalStyleForList()
{
    m_has_useNormalStyleForList = true;
    if (!m_useNormalStyleForList)
    {
        m_useNormalStyleForList = new CT_OnOff();
    }
    return m_useNormalStyleForList;
}

const CT_OnOff& CT_Compat::get_useNormalStyleForList() const
{
    if (m_useNormalStyleForList)
    {
        return *m_useNormalStyleForList;
    }
    return CT_OnOff::default_instance();
}

bool CT_Compat::has_doNotUseIndentAsNumberingTabStop() const
{
    return m_has_doNotUseIndentAsNumberingTabStop;
}

CT_OnOff* CT_Compat::mutable_doNotUseIndentAsNumberingTabStop()
{
    m_has_doNotUseIndentAsNumberingTabStop = true;
    if (!m_doNotUseIndentAsNumberingTabStop)
    {
        m_doNotUseIndentAsNumberingTabStop = new CT_OnOff();
    }
    return m_doNotUseIndentAsNumberingTabStop;
}

const CT_OnOff& CT_Compat::get_doNotUseIndentAsNumberingTabStop() const
{
    if (m_doNotUseIndentAsNumberingTabStop)
    {
        return *m_doNotUseIndentAsNumberingTabStop;
    }
    return CT_OnOff::default_instance();
}

bool CT_Compat::has_useAltKinsokuLineBreakRules() const
{
    return m_has_useAltKinsokuLineBreakRules;
}

CT_OnOff* CT_Compat::mutable_useAltKinsokuLineBreakRules()
{
    m_has_useAltKinsokuLineBreakRules = true;
    if (!m_useAltKinsokuLineBreakRules)
    {
        m_useAltKinsokuLineBreakRules = new CT_OnOff();
    }
    return m_useAltKinsokuLineBreakRules;
}

const CT_OnOff& CT_Compat::get_useAltKinsokuLineBreakRules() const
{
    if (m_useAltKinsokuLineBreakRules)
    {
        return *m_useAltKinsokuLineBreakRules;
    }
    return CT_OnOff::default_instance();
}

bool CT_Compat::has_allowSpaceOfSameStyleInTable() const
{
    return m_has_allowSpaceOfSameStyleInTable;
}

CT_OnOff* CT_Compat::mutable_allowSpaceOfSameStyleInTable()
{
    m_has_allowSpaceOfSameStyleInTable = true;
    if (!m_allowSpaceOfSameStyleInTable)
    {
        m_allowSpaceOfSameStyleInTable = new CT_OnOff();
    }
    return m_allowSpaceOfSameStyleInTable;
}

const CT_OnOff& CT_Compat::get_allowSpaceOfSameStyleInTable() const
{
    if (m_allowSpaceOfSameStyleInTable)
    {
        return *m_allowSpaceOfSameStyleInTable;
    }
    return CT_OnOff::default_instance();
}

bool CT_Compat::has_doNotSuppressIndentation() const
{
    return m_has_doNotSuppressIndentation;
}

CT_OnOff* CT_Compat::mutable_doNotSuppressIndentation()
{
    m_has_doNotSuppressIndentation = true;
    if (!m_doNotSuppressIndentation)
    {
        m_doNotSuppressIndentation = new CT_OnOff();
    }
    return m_doNotSuppressIndentation;
}

const CT_OnOff& CT_Compat::get_doNotSuppressIndentation() const
{
    if (m_doNotSuppressIndentation)
    {
        return *m_doNotSuppressIndentation;
    }
    return CT_OnOff::default_instance();
}

bool CT_Compat::has_doNotAutofitConstrainedTables() const
{
    return m_has_doNotAutofitConstrainedTables;
}

CT_OnOff* CT_Compat::mutable_doNotAutofitConstrainedTables()
{
    m_has_doNotAutofitConstrainedTables = true;
    if (!m_doNotAutofitConstrainedTables)
    {
        m_doNotAutofitConstrainedTables = new CT_OnOff();
    }
    return m_doNotAutofitConstrainedTables;
}

const CT_OnOff& CT_Compat::get_doNotAutofitConstrainedTables() const
{
    if (m_doNotAutofitConstrainedTables)
    {
        return *m_doNotAutofitConstrainedTables;
    }
    return CT_OnOff::default_instance();
}

bool CT_Compat::has_autofitToFirstFixedWidthCell() const
{
    return m_has_autofitToFirstFixedWidthCell;
}

CT_OnOff* CT_Compat::mutable_autofitToFirstFixedWidthCell()
{
    m_has_autofitToFirstFixedWidthCell = true;
    if (!m_autofitToFirstFixedWidthCell)
    {
        m_autofitToFirstFixedWidthCell = new CT_OnOff();
    }
    return m_autofitToFirstFixedWidthCell;
}

const CT_OnOff& CT_Compat::get_autofitToFirstFixedWidthCell() const
{
    if (m_autofitToFirstFixedWidthCell)
    {
        return *m_autofitToFirstFixedWidthCell;
    }
    return CT_OnOff::default_instance();
}

bool CT_Compat::has_underlineTabInNumList() const
{
    return m_has_underlineTabInNumList;
}

CT_OnOff* CT_Compat::mutable_underlineTabInNumList()
{
    m_has_underlineTabInNumList = true;
    if (!m_underlineTabInNumList)
    {
        m_underlineTabInNumList = new CT_OnOff();
    }
    return m_underlineTabInNumList;
}

const CT_OnOff& CT_Compat::get_underlineTabInNumList() const
{
    if (m_underlineTabInNumList)
    {
        return *m_underlineTabInNumList;
    }
    return CT_OnOff::default_instance();
}

bool CT_Compat::has_displayHangulFixedWidth() const
{
    return m_has_displayHangulFixedWidth;
}

CT_OnOff* CT_Compat::mutable_displayHangulFixedWidth()
{
    m_has_displayHangulFixedWidth = true;
    if (!m_displayHangulFixedWidth)
    {
        m_displayHangulFixedWidth = new CT_OnOff();
    }
    return m_displayHangulFixedWidth;
}

const CT_OnOff& CT_Compat::get_displayHangulFixedWidth() const
{
    if (m_displayHangulFixedWidth)
    {
        return *m_displayHangulFixedWidth;
    }
    return CT_OnOff::default_instance();
}

bool CT_Compat::has_splitPgBreakAndParaMark() const
{
    return m_has_splitPgBreakAndParaMark;
}

CT_OnOff* CT_Compat::mutable_splitPgBreakAndParaMark()
{
    m_has_splitPgBreakAndParaMark = true;
    if (!m_splitPgBreakAndParaMark)
    {
        m_splitPgBreakAndParaMark = new CT_OnOff();
    }
    return m_splitPgBreakAndParaMark;
}

const CT_OnOff& CT_Compat::get_splitPgBreakAndParaMark() const
{
    if (m_splitPgBreakAndParaMark)
    {
        return *m_splitPgBreakAndParaMark;
    }
    return CT_OnOff::default_instance();
}

bool CT_Compat::has_doNotVertAlignCellWithSp() const
{
    return m_has_doNotVertAlignCellWithSp;
}

CT_OnOff* CT_Compat::mutable_doNotVertAlignCellWithSp()
{
    m_has_doNotVertAlignCellWithSp = true;
    if (!m_doNotVertAlignCellWithSp)
    {
        m_doNotVertAlignCellWithSp = new CT_OnOff();
    }
    return m_doNotVertAlignCellWithSp;
}

const CT_OnOff& CT_Compat::get_doNotVertAlignCellWithSp() const
{
    if (m_doNotVertAlignCellWithSp)
    {
        return *m_doNotVertAlignCellWithSp;
    }
    return CT_OnOff::default_instance();
}

bool CT_Compat::has_doNotBreakConstrainedForcedTable() const
{
    return m_has_doNotBreakConstrainedForcedTable;
}

CT_OnOff* CT_Compat::mutable_doNotBreakConstrainedForcedTable()
{
    m_has_doNotBreakConstrainedForcedTable = true;
    if (!m_doNotBreakConstrainedForcedTable)
    {
        m_doNotBreakConstrainedForcedTable = new CT_OnOff();
    }
    return m_doNotBreakConstrainedForcedTable;
}

const CT_OnOff& CT_Compat::get_doNotBreakConstrainedForcedTable() const
{
    if (m_doNotBreakConstrainedForcedTable)
    {
        return *m_doNotBreakConstrainedForcedTable;
    }
    return CT_OnOff::default_instance();
}

bool CT_Compat::has_doNotVertAlignInTxbx() const
{
    return m_has_doNotVertAlignInTxbx;
}

CT_OnOff* CT_Compat::mutable_doNotVertAlignInTxbx()
{
    m_has_doNotVertAlignInTxbx = true;
    if (!m_doNotVertAlignInTxbx)
    {
        m_doNotVertAlignInTxbx = new CT_OnOff();
    }
    return m_doNotVertAlignInTxbx;
}

const CT_OnOff& CT_Compat::get_doNotVertAlignInTxbx() const
{
    if (m_doNotVertAlignInTxbx)
    {
        return *m_doNotVertAlignInTxbx;
    }
    return CT_OnOff::default_instance();
}

bool CT_Compat::has_useAnsiKerningPairs() const
{
    return m_has_useAnsiKerningPairs;
}

CT_OnOff* CT_Compat::mutable_useAnsiKerningPairs()
{
    m_has_useAnsiKerningPairs = true;
    if (!m_useAnsiKerningPairs)
    {
        m_useAnsiKerningPairs = new CT_OnOff();
    }
    return m_useAnsiKerningPairs;
}

const CT_OnOff& CT_Compat::get_useAnsiKerningPairs() const
{
    if (m_useAnsiKerningPairs)
    {
        return *m_useAnsiKerningPairs;
    }
    return CT_OnOff::default_instance();
}

bool CT_Compat::has_cachedColBalance() const
{
    return m_has_cachedColBalance;
}

CT_OnOff* CT_Compat::mutable_cachedColBalance()
{
    m_has_cachedColBalance = true;
    if (!m_cachedColBalance)
    {
        m_cachedColBalance = new CT_OnOff();
    }
    return m_cachedColBalance;
}

const CT_OnOff& CT_Compat::get_cachedColBalance() const
{
    if (m_cachedColBalance)
    {
        return *m_cachedColBalance;
    }
    return CT_OnOff::default_instance();
}

CT_CompatSetting* CT_Compat::add_compatSetting()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_CompatSetting* pNewChild = pChildGroup->mutable_compatSetting();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

void CT_Compat::clear()
{
    m_has_useSingleBorderforContiguousCells = false;

    if (m_useSingleBorderforContiguousCells)
    {
        delete m_useSingleBorderforContiguousCells;
        m_useSingleBorderforContiguousCells = NULL;
    }


    m_has_wpJustification = false;

    if (m_wpJustification)
    {
        delete m_wpJustification;
        m_wpJustification = NULL;
    }


    m_has_noTabHangInd = false;

    if (m_noTabHangInd)
    {
        delete m_noTabHangInd;
        m_noTabHangInd = NULL;
    }


    m_has_noLeading = false;

    if (m_noLeading)
    {
        delete m_noLeading;
        m_noLeading = NULL;
    }


    m_has_spaceForUL = false;

    if (m_spaceForUL)
    {
        delete m_spaceForUL;
        m_spaceForUL = NULL;
    }


    m_has_noColumnBalance = false;

    if (m_noColumnBalance)
    {
        delete m_noColumnBalance;
        m_noColumnBalance = NULL;
    }


    m_has_balanceSingleByteDoubleByteWidth = false;

    if (m_balanceSingleByteDoubleByteWidth)
    {
        delete m_balanceSingleByteDoubleByteWidth;
        m_balanceSingleByteDoubleByteWidth = NULL;
    }


    m_has_noExtraLineSpacing = false;

    if (m_noExtraLineSpacing)
    {
        delete m_noExtraLineSpacing;
        m_noExtraLineSpacing = NULL;
    }


    m_has_doNotLeaveBackslashAlone = false;

    if (m_doNotLeaveBackslashAlone)
    {
        delete m_doNotLeaveBackslashAlone;
        m_doNotLeaveBackslashAlone = NULL;
    }


    m_has_ulTrailSpace = false;

    if (m_ulTrailSpace)
    {
        delete m_ulTrailSpace;
        m_ulTrailSpace = NULL;
    }


    m_has_doNotExpandShiftReturn = false;

    if (m_doNotExpandShiftReturn)
    {
        delete m_doNotExpandShiftReturn;
        m_doNotExpandShiftReturn = NULL;
    }


    m_has_spacingInWholePoints = false;

    if (m_spacingInWholePoints)
    {
        delete m_spacingInWholePoints;
        m_spacingInWholePoints = NULL;
    }


    m_has_lineWrapLikeWord6 = false;

    if (m_lineWrapLikeWord6)
    {
        delete m_lineWrapLikeWord6;
        m_lineWrapLikeWord6 = NULL;
    }


    m_has_printBodyTextBeforeHeader = false;

    if (m_printBodyTextBeforeHeader)
    {
        delete m_printBodyTextBeforeHeader;
        m_printBodyTextBeforeHeader = NULL;
    }


    m_has_printColBlack = false;

    if (m_printColBlack)
    {
        delete m_printColBlack;
        m_printColBlack = NULL;
    }


    m_has_wpSpaceWidth = false;

    if (m_wpSpaceWidth)
    {
        delete m_wpSpaceWidth;
        m_wpSpaceWidth = NULL;
    }


    m_has_showBreaksInFrames = false;

    if (m_showBreaksInFrames)
    {
        delete m_showBreaksInFrames;
        m_showBreaksInFrames = NULL;
    }


    m_has_subFontBySize = false;

    if (m_subFontBySize)
    {
        delete m_subFontBySize;
        m_subFontBySize = NULL;
    }


    m_has_suppressBottomSpacing = false;

    if (m_suppressBottomSpacing)
    {
        delete m_suppressBottomSpacing;
        m_suppressBottomSpacing = NULL;
    }


    m_has_suppressTopSpacing = false;

    if (m_suppressTopSpacing)
    {
        delete m_suppressTopSpacing;
        m_suppressTopSpacing = NULL;
    }


    m_has_suppressSpacingAtTopOfPage = false;

    if (m_suppressSpacingAtTopOfPage)
    {
        delete m_suppressSpacingAtTopOfPage;
        m_suppressSpacingAtTopOfPage = NULL;
    }


    m_has_suppressTopSpacingWP = false;

    if (m_suppressTopSpacingWP)
    {
        delete m_suppressTopSpacingWP;
        m_suppressTopSpacingWP = NULL;
    }


    m_has_suppressSpBfAfterPgBrk = false;

    if (m_suppressSpBfAfterPgBrk)
    {
        delete m_suppressSpBfAfterPgBrk;
        m_suppressSpBfAfterPgBrk = NULL;
    }


    m_has_swapBordersFacingPages = false;

    if (m_swapBordersFacingPages)
    {
        delete m_swapBordersFacingPages;
        m_swapBordersFacingPages = NULL;
    }


    m_has_convMailMergeEsc = false;

    if (m_convMailMergeEsc)
    {
        delete m_convMailMergeEsc;
        m_convMailMergeEsc = NULL;
    }


    m_has_truncateFontHeightsLikeWP6 = false;

    if (m_truncateFontHeightsLikeWP6)
    {
        delete m_truncateFontHeightsLikeWP6;
        m_truncateFontHeightsLikeWP6 = NULL;
    }


    m_has_mwSmallCaps = false;

    if (m_mwSmallCaps)
    {
        delete m_mwSmallCaps;
        m_mwSmallCaps = NULL;
    }


    m_has_usePrinterMetrics = false;

    if (m_usePrinterMetrics)
    {
        delete m_usePrinterMetrics;
        m_usePrinterMetrics = NULL;
    }


    m_has_doNotSuppressParagraphBorders = false;

    if (m_doNotSuppressParagraphBorders)
    {
        delete m_doNotSuppressParagraphBorders;
        m_doNotSuppressParagraphBorders = NULL;
    }


    m_has_wrapTrailSpaces = false;

    if (m_wrapTrailSpaces)
    {
        delete m_wrapTrailSpaces;
        m_wrapTrailSpaces = NULL;
    }


    m_has_footnoteLayoutLikeWW8 = false;

    if (m_footnoteLayoutLikeWW8)
    {
        delete m_footnoteLayoutLikeWW8;
        m_footnoteLayoutLikeWW8 = NULL;
    }


    m_has_shapeLayoutLikeWW8 = false;

    if (m_shapeLayoutLikeWW8)
    {
        delete m_shapeLayoutLikeWW8;
        m_shapeLayoutLikeWW8 = NULL;
    }


    m_has_alignTablesRowByRow = false;

    if (m_alignTablesRowByRow)
    {
        delete m_alignTablesRowByRow;
        m_alignTablesRowByRow = NULL;
    }


    m_has_forgetLastTabAlignment = false;

    if (m_forgetLastTabAlignment)
    {
        delete m_forgetLastTabAlignment;
        m_forgetLastTabAlignment = NULL;
    }


    m_has_adjustLineHeightInTable = false;

    if (m_adjustLineHeightInTable)
    {
        delete m_adjustLineHeightInTable;
        m_adjustLineHeightInTable = NULL;
    }


    m_has_autoSpaceLikeWord95 = false;

    if (m_autoSpaceLikeWord95)
    {
        delete m_autoSpaceLikeWord95;
        m_autoSpaceLikeWord95 = NULL;
    }


    m_has_noSpaceRaiseLower = false;

    if (m_noSpaceRaiseLower)
    {
        delete m_noSpaceRaiseLower;
        m_noSpaceRaiseLower = NULL;
    }


    m_has_doNotUseHTMLParagraphAutoSpacing = false;

    if (m_doNotUseHTMLParagraphAutoSpacing)
    {
        delete m_doNotUseHTMLParagraphAutoSpacing;
        m_doNotUseHTMLParagraphAutoSpacing = NULL;
    }


    m_has_layoutRawTableWidth = false;

    if (m_layoutRawTableWidth)
    {
        delete m_layoutRawTableWidth;
        m_layoutRawTableWidth = NULL;
    }


    m_has_layoutTableRowsApart = false;

    if (m_layoutTableRowsApart)
    {
        delete m_layoutTableRowsApart;
        m_layoutTableRowsApart = NULL;
    }


    m_has_useWord97LineBreakRules = false;

    if (m_useWord97LineBreakRules)
    {
        delete m_useWord97LineBreakRules;
        m_useWord97LineBreakRules = NULL;
    }


    m_has_doNotBreakWrappedTables = false;

    if (m_doNotBreakWrappedTables)
    {
        delete m_doNotBreakWrappedTables;
        m_doNotBreakWrappedTables = NULL;
    }


    m_has_doNotSnapToGridInCell = false;

    if (m_doNotSnapToGridInCell)
    {
        delete m_doNotSnapToGridInCell;
        m_doNotSnapToGridInCell = NULL;
    }


    m_has_selectFldWithFirstOrLastChar = false;

    if (m_selectFldWithFirstOrLastChar)
    {
        delete m_selectFldWithFirstOrLastChar;
        m_selectFldWithFirstOrLastChar = NULL;
    }


    m_has_applyBreakingRules = false;

    if (m_applyBreakingRules)
    {
        delete m_applyBreakingRules;
        m_applyBreakingRules = NULL;
    }


    m_has_doNotWrapTextWithPunct = false;

    if (m_doNotWrapTextWithPunct)
    {
        delete m_doNotWrapTextWithPunct;
        m_doNotWrapTextWithPunct = NULL;
    }


    m_has_doNotUseEastAsianBreakRules = false;

    if (m_doNotUseEastAsianBreakRules)
    {
        delete m_doNotUseEastAsianBreakRules;
        m_doNotUseEastAsianBreakRules = NULL;
    }


    m_has_useWord2002TableStyleRules = false;

    if (m_useWord2002TableStyleRules)
    {
        delete m_useWord2002TableStyleRules;
        m_useWord2002TableStyleRules = NULL;
    }


    m_has_growAutofit = false;

    if (m_growAutofit)
    {
        delete m_growAutofit;
        m_growAutofit = NULL;
    }


    m_has_useFELayout = false;

    if (m_useFELayout)
    {
        delete m_useFELayout;
        m_useFELayout = NULL;
    }


    m_has_useNormalStyleForList = false;

    if (m_useNormalStyleForList)
    {
        delete m_useNormalStyleForList;
        m_useNormalStyleForList = NULL;
    }


    m_has_doNotUseIndentAsNumberingTabStop = false;

    if (m_doNotUseIndentAsNumberingTabStop)
    {
        delete m_doNotUseIndentAsNumberingTabStop;
        m_doNotUseIndentAsNumberingTabStop = NULL;
    }


    m_has_useAltKinsokuLineBreakRules = false;

    if (m_useAltKinsokuLineBreakRules)
    {
        delete m_useAltKinsokuLineBreakRules;
        m_useAltKinsokuLineBreakRules = NULL;
    }


    m_has_allowSpaceOfSameStyleInTable = false;

    if (m_allowSpaceOfSameStyleInTable)
    {
        delete m_allowSpaceOfSameStyleInTable;
        m_allowSpaceOfSameStyleInTable = NULL;
    }


    m_has_doNotSuppressIndentation = false;

    if (m_doNotSuppressIndentation)
    {
        delete m_doNotSuppressIndentation;
        m_doNotSuppressIndentation = NULL;
    }


    m_has_doNotAutofitConstrainedTables = false;

    if (m_doNotAutofitConstrainedTables)
    {
        delete m_doNotAutofitConstrainedTables;
        m_doNotAutofitConstrainedTables = NULL;
    }


    m_has_autofitToFirstFixedWidthCell = false;

    if (m_autofitToFirstFixedWidthCell)
    {
        delete m_autofitToFirstFixedWidthCell;
        m_autofitToFirstFixedWidthCell = NULL;
    }


    m_has_underlineTabInNumList = false;

    if (m_underlineTabInNumList)
    {
        delete m_underlineTabInNumList;
        m_underlineTabInNumList = NULL;
    }


    m_has_displayHangulFixedWidth = false;

    if (m_displayHangulFixedWidth)
    {
        delete m_displayHangulFixedWidth;
        m_displayHangulFixedWidth = NULL;
    }


    m_has_splitPgBreakAndParaMark = false;

    if (m_splitPgBreakAndParaMark)
    {
        delete m_splitPgBreakAndParaMark;
        m_splitPgBreakAndParaMark = NULL;
    }


    m_has_doNotVertAlignCellWithSp = false;

    if (m_doNotVertAlignCellWithSp)
    {
        delete m_doNotVertAlignCellWithSp;
        m_doNotVertAlignCellWithSp = NULL;
    }


    m_has_doNotBreakConstrainedForcedTable = false;

    if (m_doNotBreakConstrainedForcedTable)
    {
        delete m_doNotBreakConstrainedForcedTable;
        m_doNotBreakConstrainedForcedTable = NULL;
    }


    m_has_doNotVertAlignInTxbx = false;

    if (m_doNotVertAlignInTxbx)
    {
        delete m_doNotVertAlignInTxbx;
        m_doNotVertAlignInTxbx = NULL;
    }


    m_has_useAnsiKerningPairs = false;

    if (m_useAnsiKerningPairs)
    {
        delete m_useAnsiKerningPairs;
        m_useAnsiKerningPairs = NULL;
    }


    m_has_cachedColBalance = false;

    if (m_cachedColBalance)
    {
        delete m_cachedColBalance;
        m_cachedColBalance = NULL;
    }


    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
}

void CT_Compat::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";


    if (m_has_useSingleBorderforContiguousCells)
    {
        m_useSingleBorderforContiguousCells->toXmlElem("w:useSingleBorderforContiguousCells", "", _outStream);
    }


    if (m_has_wpJustification)
    {
        m_wpJustification->toXmlElem("w:wpJustification", "", _outStream);
    }


    if (m_has_noTabHangInd)
    {
        m_noTabHangInd->toXmlElem("w:noTabHangInd", "", _outStream);
    }


    if (m_has_noLeading)
    {
        m_noLeading->toXmlElem("w:noLeading", "", _outStream);
    }


    if (m_has_spaceForUL)
    {
        m_spaceForUL->toXmlElem("w:spaceForUL", "", _outStream);
    }


    if (m_has_noColumnBalance)
    {
        m_noColumnBalance->toXmlElem("w:noColumnBalance", "", _outStream);
    }


    if (m_has_balanceSingleByteDoubleByteWidth)
    {
        m_balanceSingleByteDoubleByteWidth->toXmlElem("w:balanceSingleByteDoubleByteWidth", "", _outStream);
    }


    if (m_has_noExtraLineSpacing)
    {
        m_noExtraLineSpacing->toXmlElem("w:noExtraLineSpacing", "", _outStream);
    }


    if (m_has_doNotLeaveBackslashAlone)
    {
        m_doNotLeaveBackslashAlone->toXmlElem("w:doNotLeaveBackslashAlone", "", _outStream);
    }


    if (m_has_ulTrailSpace)
    {
        m_ulTrailSpace->toXmlElem("w:ulTrailSpace", "", _outStream);
    }


    if (m_has_doNotExpandShiftReturn)
    {
        m_doNotExpandShiftReturn->toXmlElem("w:doNotExpandShiftReturn", "", _outStream);
    }


    if (m_has_spacingInWholePoints)
    {
        m_spacingInWholePoints->toXmlElem("w:spacingInWholePoints", "", _outStream);
    }


    if (m_has_lineWrapLikeWord6)
    {
        m_lineWrapLikeWord6->toXmlElem("w:lineWrapLikeWord6", "", _outStream);
    }


    if (m_has_printBodyTextBeforeHeader)
    {
        m_printBodyTextBeforeHeader->toXmlElem("w:printBodyTextBeforeHeader", "", _outStream);
    }


    if (m_has_printColBlack)
    {
        m_printColBlack->toXmlElem("w:printColBlack", "", _outStream);
    }


    if (m_has_wpSpaceWidth)
    {
        m_wpSpaceWidth->toXmlElem("w:wpSpaceWidth", "", _outStream);
    }


    if (m_has_showBreaksInFrames)
    {
        m_showBreaksInFrames->toXmlElem("w:showBreaksInFrames", "", _outStream);
    }


    if (m_has_subFontBySize)
    {
        m_subFontBySize->toXmlElem("w:subFontBySize", "", _outStream);
    }


    if (m_has_suppressBottomSpacing)
    {
        m_suppressBottomSpacing->toXmlElem("w:suppressBottomSpacing", "", _outStream);
    }


    if (m_has_suppressTopSpacing)
    {
        m_suppressTopSpacing->toXmlElem("w:suppressTopSpacing", "", _outStream);
    }


    if (m_has_suppressSpacingAtTopOfPage)
    {
        m_suppressSpacingAtTopOfPage->toXmlElem("w:suppressSpacingAtTopOfPage", "", _outStream);
    }


    if (m_has_suppressTopSpacingWP)
    {
        m_suppressTopSpacingWP->toXmlElem("w:suppressTopSpacingWP", "", _outStream);
    }


    if (m_has_suppressSpBfAfterPgBrk)
    {
        m_suppressSpBfAfterPgBrk->toXmlElem("w:suppressSpBfAfterPgBrk", "", _outStream);
    }


    if (m_has_swapBordersFacingPages)
    {
        m_swapBordersFacingPages->toXmlElem("w:swapBordersFacingPages", "", _outStream);
    }


    if (m_has_convMailMergeEsc)
    {
        m_convMailMergeEsc->toXmlElem("w:convMailMergeEsc", "", _outStream);
    }


    if (m_has_truncateFontHeightsLikeWP6)
    {
        m_truncateFontHeightsLikeWP6->toXmlElem("w:truncateFontHeightsLikeWP6", "", _outStream);
    }


    if (m_has_mwSmallCaps)
    {
        m_mwSmallCaps->toXmlElem("w:mwSmallCaps", "", _outStream);
    }


    if (m_has_usePrinterMetrics)
    {
        m_usePrinterMetrics->toXmlElem("w:usePrinterMetrics", "", _outStream);
    }


    if (m_has_doNotSuppressParagraphBorders)
    {
        m_doNotSuppressParagraphBorders->toXmlElem("w:doNotSuppressParagraphBorders", "", _outStream);
    }


    if (m_has_wrapTrailSpaces)
    {
        m_wrapTrailSpaces->toXmlElem("w:wrapTrailSpaces", "", _outStream);
    }


    if (m_has_footnoteLayoutLikeWW8)
    {
        m_footnoteLayoutLikeWW8->toXmlElem("w:footnoteLayoutLikeWW8", "", _outStream);
    }


    if (m_has_shapeLayoutLikeWW8)
    {
        m_shapeLayoutLikeWW8->toXmlElem("w:shapeLayoutLikeWW8", "", _outStream);
    }


    if (m_has_alignTablesRowByRow)
    {
        m_alignTablesRowByRow->toXmlElem("w:alignTablesRowByRow", "", _outStream);
    }


    if (m_has_forgetLastTabAlignment)
    {
        m_forgetLastTabAlignment->toXmlElem("w:forgetLastTabAlignment", "", _outStream);
    }


    if (m_has_adjustLineHeightInTable)
    {
        m_adjustLineHeightInTable->toXmlElem("w:adjustLineHeightInTable", "", _outStream);
    }


    if (m_has_autoSpaceLikeWord95)
    {
        m_autoSpaceLikeWord95->toXmlElem("w:autoSpaceLikeWord95", "", _outStream);
    }


    if (m_has_noSpaceRaiseLower)
    {
        m_noSpaceRaiseLower->toXmlElem("w:noSpaceRaiseLower", "", _outStream);
    }


    if (m_has_doNotUseHTMLParagraphAutoSpacing)
    {
        m_doNotUseHTMLParagraphAutoSpacing->toXmlElem("w:doNotUseHTMLParagraphAutoSpacing", "", _outStream);
    }


    if (m_has_layoutRawTableWidth)
    {
        m_layoutRawTableWidth->toXmlElem("w:layoutRawTableWidth", "", _outStream);
    }


    if (m_has_layoutTableRowsApart)
    {
        m_layoutTableRowsApart->toXmlElem("w:layoutTableRowsApart", "", _outStream);
    }


    if (m_has_useWord97LineBreakRules)
    {
        m_useWord97LineBreakRules->toXmlElem("w:useWord97LineBreakRules", "", _outStream);
    }


    if (m_has_doNotBreakWrappedTables)
    {
        m_doNotBreakWrappedTables->toXmlElem("w:doNotBreakWrappedTables", "", _outStream);
    }


    if (m_has_doNotSnapToGridInCell)
    {
        m_doNotSnapToGridInCell->toXmlElem("w:doNotSnapToGridInCell", "", _outStream);
    }


    if (m_has_selectFldWithFirstOrLastChar)
    {
        m_selectFldWithFirstOrLastChar->toXmlElem("w:selectFldWithFirstOrLastChar", "", _outStream);
    }


    if (m_has_applyBreakingRules)
    {
        m_applyBreakingRules->toXmlElem("w:applyBreakingRules", "", _outStream);
    }


    if (m_has_doNotWrapTextWithPunct)
    {
        m_doNotWrapTextWithPunct->toXmlElem("w:doNotWrapTextWithPunct", "", _outStream);
    }


    if (m_has_doNotUseEastAsianBreakRules)
    {
        m_doNotUseEastAsianBreakRules->toXmlElem("w:doNotUseEastAsianBreakRules", "", _outStream);
    }


    if (m_has_useWord2002TableStyleRules)
    {
        m_useWord2002TableStyleRules->toXmlElem("w:useWord2002TableStyleRules", "", _outStream);
    }


    if (m_has_growAutofit)
    {
        m_growAutofit->toXmlElem("w:growAutofit", "", _outStream);
    }


    if (m_has_useFELayout)
    {
        m_useFELayout->toXmlElem("w:useFELayout", "", _outStream);
    }


    if (m_has_useNormalStyleForList)
    {
        m_useNormalStyleForList->toXmlElem("w:useNormalStyleForList", "", _outStream);
    }


    if (m_has_doNotUseIndentAsNumberingTabStop)
    {
        m_doNotUseIndentAsNumberingTabStop->toXmlElem("w:doNotUseIndentAsNumberingTabStop", "", _outStream);
    }


    if (m_has_useAltKinsokuLineBreakRules)
    {
        m_useAltKinsokuLineBreakRules->toXmlElem("w:useAltKinsokuLineBreakRules", "", _outStream);
    }


    if (m_has_allowSpaceOfSameStyleInTable)
    {
        m_allowSpaceOfSameStyleInTable->toXmlElem("w:allowSpaceOfSameStyleInTable", "", _outStream);
    }


    if (m_has_doNotSuppressIndentation)
    {
        m_doNotSuppressIndentation->toXmlElem("w:doNotSuppressIndentation", "", _outStream);
    }


    if (m_has_doNotAutofitConstrainedTables)
    {
        m_doNotAutofitConstrainedTables->toXmlElem("w:doNotAutofitConstrainedTables", "", _outStream);
    }


    if (m_has_autofitToFirstFixedWidthCell)
    {
        m_autofitToFirstFixedWidthCell->toXmlElem("w:autofitToFirstFixedWidthCell", "", _outStream);
    }


    if (m_has_underlineTabInNumList)
    {
        m_underlineTabInNumList->toXmlElem("w:underlineTabInNumList", "", _outStream);
    }


    if (m_has_displayHangulFixedWidth)
    {
        m_displayHangulFixedWidth->toXmlElem("w:displayHangulFixedWidth", "", _outStream);
    }


    if (m_has_splitPgBreakAndParaMark)
    {
        m_splitPgBreakAndParaMark->toXmlElem("w:splitPgBreakAndParaMark", "", _outStream);
    }


    if (m_has_doNotVertAlignCellWithSp)
    {
        m_doNotVertAlignCellWithSp->toXmlElem("w:doNotVertAlignCellWithSp", "", _outStream);
    }


    if (m_has_doNotBreakConstrainedForcedTable)
    {
        m_doNotBreakConstrainedForcedTable->toXmlElem("w:doNotBreakConstrainedForcedTable", "", _outStream);
    }


    if (m_has_doNotVertAlignInTxbx)
    {
        m_doNotVertAlignInTxbx->toXmlElem("w:doNotVertAlignInTxbx", "", _outStream);
    }


    if (m_has_useAnsiKerningPairs)
    {
        m_useAnsiKerningPairs->toXmlElem("w:useAnsiKerningPairs", "", _outStream);
    }


    if (m_has_cachedColBalance)
    {
        m_cachedColBalance->toXmlElem("w:cachedColBalance", "", _outStream);
    }

    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_compatSetting())
            {
                (*iter)->get_compatSetting().toXmlElem("w:compatSetting", "", _outStream);
            }


        }
    }

    _outStream << "</" << _elemName << ">";
}

const CT_Compat& CT_Compat::default_instance()
{
    if (!CT_Compat::default_instance_)
    {
        CT_Compat::default_instance_ = new CT_Compat();
    }
    return *CT_Compat::default_instance_;
}


// CT_Compat::ChildGroup_1
CT_Compat::ChildGroup_1::ChildGroup_1()
    :m_has_compatSetting(false),
     m_compatSetting(NULL)
{
}
bool CT_Compat::ChildGroup_1::has_compatSetting() const
{
    return m_has_compatSetting;
}

CT_CompatSetting* CT_Compat::ChildGroup_1::mutable_compatSetting()
{

    m_has_compatSetting = true;
    if (!m_compatSetting)
    {
        m_compatSetting = new CT_CompatSetting();
    }
    return m_compatSetting;
}

const CT_CompatSetting& CT_Compat::ChildGroup_1::get_compatSetting() const
{
    if (m_compatSetting)
    {
        return *m_compatSetting;
    }
    return CT_CompatSetting::default_instance();
}

CT_Compat* CT_Compat::default_instance_ = NULL;

// CT_CompatSetting
CT_CompatSetting::CT_CompatSetting()
    :m_has_name_attr(false),
     m_name_attr(NULL),
     m_has_uri_attr(false),
     m_uri_attr(NULL),
     m_has_val_attr(false),
     m_val_attr(NULL)
{
}
CT_CompatSetting::~CT_CompatSetting()
{
    clear();
}
void CT_CompatSetting::clear()
{
    m_has_name_attr = false;

    if (m_name_attr)
    {
        delete m_name_attr;
        m_name_attr = NULL;
    }


    m_has_uri_attr = false;

    if (m_uri_attr)
    {
        delete m_uri_attr;
        m_uri_attr = NULL;
    }


    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }

}

void CT_CompatSetting::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_name_attr)
    {
        m_name_attr->toXmlAttr("w:name", _outStream);
    }



    if (m_has_uri_attr)
    {
        m_uri_attr->toXmlAttr("w:uri", _outStream);
    }



    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_CompatSetting& CT_CompatSetting::default_instance()
{
    if (!CT_CompatSetting::default_instance_)
    {
        CT_CompatSetting::default_instance_ = new CT_CompatSetting();
    }
    return *CT_CompatSetting::default_instance_;
}

bool CT_CompatSetting::has_name_attr() const
{
    return m_has_name_attr;
}

void CT_CompatSetting::set_name_attr(const ns_s::ST_String& _name_attr)
{
    m_has_name_attr = true;
    m_name_attr = new ns_s::ST_String(_name_attr);
}

const ns_s::ST_String& CT_CompatSetting::get_name_attr() const
{
    if (m_name_attr)
    {
        return *m_name_attr;
    }
    return ns_s::ST_String::default_instance();
}

bool CT_CompatSetting::has_uri_attr() const
{
    return m_has_uri_attr;
}

void CT_CompatSetting::set_uri_attr(const ns_s::ST_String& _uri_attr)
{
    m_has_uri_attr = true;
    m_uri_attr = new ns_s::ST_String(_uri_attr);
}

const ns_s::ST_String& CT_CompatSetting::get_uri_attr() const
{
    if (m_uri_attr)
    {
        return *m_uri_attr;
    }
    return ns_s::ST_String::default_instance();
}

bool CT_CompatSetting::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_CompatSetting::set_val_attr(const ns_s::ST_String& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ns_s::ST_String(_val_attr);
}

const ns_s::ST_String& CT_CompatSetting::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ns_s::ST_String::default_instance();
}

CT_CompatSetting* CT_CompatSetting::default_instance_ = NULL;

// CT_DocVar
CT_DocVar::CT_DocVar()
    :m_has_name_attr(false),
     m_name_attr(NULL),
     m_has_val_attr(false),
     m_val_attr(NULL)
{
}
CT_DocVar::~CT_DocVar()
{
    clear();
}
void CT_DocVar::clear()
{
    m_has_name_attr = false;

    if (m_name_attr)
    {
        delete m_name_attr;
        m_name_attr = NULL;
    }


    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }

}

void CT_DocVar::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_name_attr);
    if (m_has_name_attr)
    {
        m_name_attr->toXmlAttr("w:name", _outStream);
    }


    assert(m_has_val_attr);
    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_DocVar& CT_DocVar::default_instance()
{
    if (!CT_DocVar::default_instance_)
    {
        CT_DocVar::default_instance_ = new CT_DocVar();
    }
    return *CT_DocVar::default_instance_;
}

bool CT_DocVar::has_name_attr() const
{
    return m_has_name_attr;
}

void CT_DocVar::set_name_attr(const ns_s::ST_String& _name_attr)
{
    m_has_name_attr = true;
    m_name_attr = new ns_s::ST_String(_name_attr);
}

const ns_s::ST_String& CT_DocVar::get_name_attr() const
{
    if (m_name_attr)
    {
        return *m_name_attr;
    }
    return ns_s::ST_String::default_instance();
}

bool CT_DocVar::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_DocVar::set_val_attr(const ns_s::ST_String& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ns_s::ST_String(_val_attr);
}

const ns_s::ST_String& CT_DocVar::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ns_s::ST_String::default_instance();
}

CT_DocVar* CT_DocVar::default_instance_ = NULL;

// CT_DocVars
CT_DocVars::CT_DocVars()

{
}
CT_DocVars::~CT_DocVars()
{
    clear();
}
CT_DocVar* CT_DocVars::add_docVar()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_DocVar* pNewChild = pChildGroup->mutable_docVar();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

void CT_DocVars::clear()
{
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
}

void CT_DocVars::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";

    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_docVar())
            {
                (*iter)->get_docVar().toXmlElem("w:docVar", "", _outStream);
            }


        }
    }

    _outStream << "</" << _elemName << ">";
}

const CT_DocVars& CT_DocVars::default_instance()
{
    if (!CT_DocVars::default_instance_)
    {
        CT_DocVars::default_instance_ = new CT_DocVars();
    }
    return *CT_DocVars::default_instance_;
}


// CT_DocVars::ChildGroup_1
CT_DocVars::ChildGroup_1::ChildGroup_1()
    :m_has_docVar(false),
     m_docVar(NULL)
{
}
bool CT_DocVars::ChildGroup_1::has_docVar() const
{
    return m_has_docVar;
}

CT_DocVar* CT_DocVars::ChildGroup_1::mutable_docVar()
{

    m_has_docVar = true;
    if (!m_docVar)
    {
        m_docVar = new CT_DocVar();
    }
    return m_docVar;
}

const CT_DocVar& CT_DocVars::ChildGroup_1::get_docVar() const
{
    if (m_docVar)
    {
        return *m_docVar;
    }
    return CT_DocVar::default_instance();
}

CT_DocVars* CT_DocVars::default_instance_ = NULL;

// CT_DocRsids
CT_DocRsids::CT_DocRsids()
    :m_has_rsidRoot(false),
     m_rsidRoot(NULL)
{
}
CT_DocRsids::~CT_DocRsids()
{
    clear();
}
bool CT_DocRsids::has_rsidRoot() const
{
    return m_has_rsidRoot;
}

CT_LongHexNumber* CT_DocRsids::mutable_rsidRoot()
{
    m_has_rsidRoot = true;
    if (!m_rsidRoot)
    {
        m_rsidRoot = new CT_LongHexNumber();
    }
    return m_rsidRoot;
}

const CT_LongHexNumber& CT_DocRsids::get_rsidRoot() const
{
    if (m_rsidRoot)
    {
        return *m_rsidRoot;
    }
    return CT_LongHexNumber::default_instance();
}

CT_LongHexNumber* CT_DocRsids::add_rsid()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_LongHexNumber* pNewChild = pChildGroup->mutable_rsid();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

void CT_DocRsids::clear()
{
    m_has_rsidRoot = false;

    if (m_rsidRoot)
    {
        delete m_rsidRoot;
        m_rsidRoot = NULL;
    }


    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
}

void CT_DocRsids::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";


    if (m_has_rsidRoot)
    {
        m_rsidRoot->toXmlElem("w:rsidRoot", "", _outStream);
    }

    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_rsid())
            {
                (*iter)->get_rsid().toXmlElem("w:rsid", "", _outStream);
            }


        }
    }

    _outStream << "</" << _elemName << ">";
}

const CT_DocRsids& CT_DocRsids::default_instance()
{
    if (!CT_DocRsids::default_instance_)
    {
        CT_DocRsids::default_instance_ = new CT_DocRsids();
    }
    return *CT_DocRsids::default_instance_;
}


// CT_DocRsids::ChildGroup_1
CT_DocRsids::ChildGroup_1::ChildGroup_1()
    :m_has_rsid(false),
     m_rsid(NULL)
{
}
bool CT_DocRsids::ChildGroup_1::has_rsid() const
{
    return m_has_rsid;
}

CT_LongHexNumber* CT_DocRsids::ChildGroup_1::mutable_rsid()
{

    m_has_rsid = true;
    if (!m_rsid)
    {
        m_rsid = new CT_LongHexNumber();
    }
    return m_rsid;
}

const CT_LongHexNumber& CT_DocRsids::ChildGroup_1::get_rsid() const
{
    if (m_rsid)
    {
        return *m_rsid;
    }
    return CT_LongHexNumber::default_instance();
}

CT_DocRsids* CT_DocRsids::default_instance_ = NULL;

// CT_CharacterSpacing
CT_CharacterSpacing::CT_CharacterSpacing()
    :m_has_val_attr(false),
     m_val_attr(NULL)
{
}
CT_CharacterSpacing::~CT_CharacterSpacing()
{
    clear();
}
void CT_CharacterSpacing::clear()
{
    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }

}

void CT_CharacterSpacing::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_val_attr);
    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_CharacterSpacing& CT_CharacterSpacing::default_instance()
{
    if (!CT_CharacterSpacing::default_instance_)
    {
        CT_CharacterSpacing::default_instance_ = new CT_CharacterSpacing();
    }
    return *CT_CharacterSpacing::default_instance_;
}

bool CT_CharacterSpacing::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_CharacterSpacing::set_val_attr(const ST_CharacterSpacing& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ST_CharacterSpacing(_val_attr);
}

const ST_CharacterSpacing& CT_CharacterSpacing::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ST_CharacterSpacing::default_instance();
}

CT_CharacterSpacing* CT_CharacterSpacing::default_instance_ = NULL;

// CT_SaveThroughXslt
CT_SaveThroughXslt::CT_SaveThroughXslt()
    :m_has_r_id_attr(false),
     m_r_id_attr(NULL),
     m_has_solutionID_attr(false),
     m_solutionID_attr(NULL)
{
}
CT_SaveThroughXslt::~CT_SaveThroughXslt()
{
    clear();
}
void CT_SaveThroughXslt::clear()
{
    m_has_r_id_attr = false;

    if (m_r_id_attr)
    {
        delete m_r_id_attr;
        m_r_id_attr = NULL;
    }


    m_has_solutionID_attr = false;

    if (m_solutionID_attr)
    {
        delete m_solutionID_attr;
        m_solutionID_attr = NULL;
    }

}

void CT_SaveThroughXslt::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_r_id_attr)
    {
        m_r_id_attr->toXmlAttr("r:id", _outStream);
    }



    if (m_has_solutionID_attr)
    {
        m_solutionID_attr->toXmlAttr("w:solutionID", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_SaveThroughXslt& CT_SaveThroughXslt::default_instance()
{
    if (!CT_SaveThroughXslt::default_instance_)
    {
        CT_SaveThroughXslt::default_instance_ = new CT_SaveThroughXslt();
    }
    return *CT_SaveThroughXslt::default_instance_;
}

bool CT_SaveThroughXslt::has_r_id_attr() const
{
    return m_has_r_id_attr;
}

void CT_SaveThroughXslt::set_r_id_attr(const ns_r::ST_RelationshipId& _r_id_attr)
{
    m_has_r_id_attr = true;
    m_r_id_attr = new ns_r::ST_RelationshipId(_r_id_attr);
}

const ns_r::ST_RelationshipId& CT_SaveThroughXslt::get_r_id_attr() const
{
    if (m_r_id_attr)
    {
        return *m_r_id_attr;
    }
    return ns_r::ST_RelationshipId::default_instance();
}

bool CT_SaveThroughXslt::has_solutionID_attr() const
{
    return m_has_solutionID_attr;
}

void CT_SaveThroughXslt::set_solutionID_attr(const ns_s::ST_String& _solutionID_attr)
{
    m_has_solutionID_attr = true;
    m_solutionID_attr = new ns_s::ST_String(_solutionID_attr);
}

const ns_s::ST_String& CT_SaveThroughXslt::get_solutionID_attr() const
{
    if (m_solutionID_attr)
    {
        return *m_solutionID_attr;
    }
    return ns_s::ST_String::default_instance();
}

CT_SaveThroughXslt* CT_SaveThroughXslt::default_instance_ = NULL;

// CT_RPrDefault
CT_RPrDefault::CT_RPrDefault()
    :m_has_rPr(false),
     m_rPr(NULL)
{
}
CT_RPrDefault::~CT_RPrDefault()
{
    clear();
}
bool CT_RPrDefault::has_rPr() const
{
    return m_has_rPr;
}

CT_RPr* CT_RPrDefault::mutable_rPr()
{
    m_has_rPr = true;
    if (!m_rPr)
    {
        m_rPr = new CT_RPr();
    }
    return m_rPr;
}

const CT_RPr& CT_RPrDefault::get_rPr() const
{
    if (m_rPr)
    {
        return *m_rPr;
    }
    return CT_RPr::default_instance();
}

void CT_RPrDefault::clear()
{
    m_has_rPr = false;

    if (m_rPr)
    {
        delete m_rPr;
        m_rPr = NULL;
    }

}

void CT_RPrDefault::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";


    if (m_has_rPr)
    {
        m_rPr->toXmlElem("w:rPr", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_RPrDefault& CT_RPrDefault::default_instance()
{
    if (!CT_RPrDefault::default_instance_)
    {
        CT_RPrDefault::default_instance_ = new CT_RPrDefault();
    }
    return *CT_RPrDefault::default_instance_;
}

CT_RPrDefault* CT_RPrDefault::default_instance_ = NULL;

// CT_PPrDefault
CT_PPrDefault::CT_PPrDefault()
    :m_has_pPr(false),
     m_pPr(NULL)
{
}
CT_PPrDefault::~CT_PPrDefault()
{
    clear();
}
bool CT_PPrDefault::has_pPr() const
{
    return m_has_pPr;
}

CT_PPrGeneral* CT_PPrDefault::mutable_pPr()
{
    m_has_pPr = true;
    if (!m_pPr)
    {
        m_pPr = new CT_PPrGeneral();
    }
    return m_pPr;
}

const CT_PPrGeneral& CT_PPrDefault::get_pPr() const
{
    if (m_pPr)
    {
        return *m_pPr;
    }
    return CT_PPrGeneral::default_instance();
}

void CT_PPrDefault::clear()
{
    m_has_pPr = false;

    if (m_pPr)
    {
        delete m_pPr;
        m_pPr = NULL;
    }

}

void CT_PPrDefault::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";


    if (m_has_pPr)
    {
        m_pPr->toXmlElem("w:pPr", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_PPrDefault& CT_PPrDefault::default_instance()
{
    if (!CT_PPrDefault::default_instance_)
    {
        CT_PPrDefault::default_instance_ = new CT_PPrDefault();
    }
    return *CT_PPrDefault::default_instance_;
}

CT_PPrDefault* CT_PPrDefault::default_instance_ = NULL;

// CT_DocDefaults
CT_DocDefaults::CT_DocDefaults()
    :m_has_rPrDefault(false),
     m_rPrDefault(NULL),
     m_has_pPrDefault(false),
     m_pPrDefault(NULL)
{
}
CT_DocDefaults::~CT_DocDefaults()
{
    clear();
}
bool CT_DocDefaults::has_rPrDefault() const
{
    return m_has_rPrDefault;
}

CT_RPrDefault* CT_DocDefaults::mutable_rPrDefault()
{
    m_has_rPrDefault = true;
    if (!m_rPrDefault)
    {
        m_rPrDefault = new CT_RPrDefault();
    }
    return m_rPrDefault;
}

const CT_RPrDefault& CT_DocDefaults::get_rPrDefault() const
{
    if (m_rPrDefault)
    {
        return *m_rPrDefault;
    }
    return CT_RPrDefault::default_instance();
}

bool CT_DocDefaults::has_pPrDefault() const
{
    return m_has_pPrDefault;
}

CT_PPrDefault* CT_DocDefaults::mutable_pPrDefault()
{
    m_has_pPrDefault = true;
    if (!m_pPrDefault)
    {
        m_pPrDefault = new CT_PPrDefault();
    }
    return m_pPrDefault;
}

const CT_PPrDefault& CT_DocDefaults::get_pPrDefault() const
{
    if (m_pPrDefault)
    {
        return *m_pPrDefault;
    }
    return CT_PPrDefault::default_instance();
}

void CT_DocDefaults::clear()
{
    m_has_rPrDefault = false;

    if (m_rPrDefault)
    {
        delete m_rPrDefault;
        m_rPrDefault = NULL;
    }


    m_has_pPrDefault = false;

    if (m_pPrDefault)
    {
        delete m_pPrDefault;
        m_pPrDefault = NULL;
    }

}

void CT_DocDefaults::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";


    if (m_has_rPrDefault)
    {
        m_rPrDefault->toXmlElem("w:rPrDefault", "", _outStream);
    }


    if (m_has_pPrDefault)
    {
        m_pPrDefault->toXmlElem("w:pPrDefault", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_DocDefaults& CT_DocDefaults::default_instance()
{
    if (!CT_DocDefaults::default_instance_)
    {
        CT_DocDefaults::default_instance_ = new CT_DocDefaults();
    }
    return *CT_DocDefaults::default_instance_;
}

CT_DocDefaults* CT_DocDefaults::default_instance_ = NULL;

// CT_ColorSchemeMapping
CT_ColorSchemeMapping::CT_ColorSchemeMapping()
    :m_has_bg1_attr(false),
     m_bg1_attr(NULL),
     m_has_t1_attr(false),
     m_t1_attr(NULL),
     m_has_bg2_attr(false),
     m_bg2_attr(NULL),
     m_has_t2_attr(false),
     m_t2_attr(NULL),
     m_has_accent1_attr(false),
     m_accent1_attr(NULL),
     m_has_accent2_attr(false),
     m_accent2_attr(NULL),
     m_has_accent3_attr(false),
     m_accent3_attr(NULL),
     m_has_accent4_attr(false),
     m_accent4_attr(NULL),
     m_has_accent5_attr(false),
     m_accent5_attr(NULL),
     m_has_accent6_attr(false),
     m_accent6_attr(NULL),
     m_has_hyperlink_attr(false),
     m_hyperlink_attr(NULL),
     m_has_followedHyperlink_attr(false),
     m_followedHyperlink_attr(NULL)
{
}
CT_ColorSchemeMapping::~CT_ColorSchemeMapping()
{
    clear();
}
void CT_ColorSchemeMapping::clear()
{
    m_has_bg1_attr = false;

    if (m_bg1_attr)
    {
        delete m_bg1_attr;
        m_bg1_attr = NULL;
    }


    m_has_t1_attr = false;

    if (m_t1_attr)
    {
        delete m_t1_attr;
        m_t1_attr = NULL;
    }


    m_has_bg2_attr = false;

    if (m_bg2_attr)
    {
        delete m_bg2_attr;
        m_bg2_attr = NULL;
    }


    m_has_t2_attr = false;

    if (m_t2_attr)
    {
        delete m_t2_attr;
        m_t2_attr = NULL;
    }


    m_has_accent1_attr = false;

    if (m_accent1_attr)
    {
        delete m_accent1_attr;
        m_accent1_attr = NULL;
    }


    m_has_accent2_attr = false;

    if (m_accent2_attr)
    {
        delete m_accent2_attr;
        m_accent2_attr = NULL;
    }


    m_has_accent3_attr = false;

    if (m_accent3_attr)
    {
        delete m_accent3_attr;
        m_accent3_attr = NULL;
    }


    m_has_accent4_attr = false;

    if (m_accent4_attr)
    {
        delete m_accent4_attr;
        m_accent4_attr = NULL;
    }


    m_has_accent5_attr = false;

    if (m_accent5_attr)
    {
        delete m_accent5_attr;
        m_accent5_attr = NULL;
    }


    m_has_accent6_attr = false;

    if (m_accent6_attr)
    {
        delete m_accent6_attr;
        m_accent6_attr = NULL;
    }


    m_has_hyperlink_attr = false;

    if (m_hyperlink_attr)
    {
        delete m_hyperlink_attr;
        m_hyperlink_attr = NULL;
    }


    m_has_followedHyperlink_attr = false;

    if (m_followedHyperlink_attr)
    {
        delete m_followedHyperlink_attr;
        m_followedHyperlink_attr = NULL;
    }

}

void CT_ColorSchemeMapping::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_bg1_attr)
    {
        m_bg1_attr->toXmlAttr("w:bg1", _outStream);
    }



    if (m_has_t1_attr)
    {
        m_t1_attr->toXmlAttr("w:t1", _outStream);
    }



    if (m_has_bg2_attr)
    {
        m_bg2_attr->toXmlAttr("w:bg2", _outStream);
    }



    if (m_has_t2_attr)
    {
        m_t2_attr->toXmlAttr("w:t2", _outStream);
    }



    if (m_has_accent1_attr)
    {
        m_accent1_attr->toXmlAttr("w:accent1", _outStream);
    }



    if (m_has_accent2_attr)
    {
        m_accent2_attr->toXmlAttr("w:accent2", _outStream);
    }



    if (m_has_accent3_attr)
    {
        m_accent3_attr->toXmlAttr("w:accent3", _outStream);
    }



    if (m_has_accent4_attr)
    {
        m_accent4_attr->toXmlAttr("w:accent4", _outStream);
    }



    if (m_has_accent5_attr)
    {
        m_accent5_attr->toXmlAttr("w:accent5", _outStream);
    }



    if (m_has_accent6_attr)
    {
        m_accent6_attr->toXmlAttr("w:accent6", _outStream);
    }



    if (m_has_hyperlink_attr)
    {
        m_hyperlink_attr->toXmlAttr("w:hyperlink", _outStream);
    }



    if (m_has_followedHyperlink_attr)
    {
        m_followedHyperlink_attr->toXmlAttr("w:followedHyperlink", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_ColorSchemeMapping& CT_ColorSchemeMapping::default_instance()
{
    if (!CT_ColorSchemeMapping::default_instance_)
    {
        CT_ColorSchemeMapping::default_instance_ = new CT_ColorSchemeMapping();
    }
    return *CT_ColorSchemeMapping::default_instance_;
}

bool CT_ColorSchemeMapping::has_bg1_attr() const
{
    return m_has_bg1_attr;
}

void CT_ColorSchemeMapping::set_bg1_attr(const ST_WmlColorSchemeIndex& _bg1_attr)
{
    m_has_bg1_attr = true;
    m_bg1_attr = new ST_WmlColorSchemeIndex(_bg1_attr);
}

const ST_WmlColorSchemeIndex& CT_ColorSchemeMapping::get_bg1_attr() const
{
    if (m_bg1_attr)
    {
        return *m_bg1_attr;
    }
    return ST_WmlColorSchemeIndex::default_instance();
}

bool CT_ColorSchemeMapping::has_t1_attr() const
{
    return m_has_t1_attr;
}

void CT_ColorSchemeMapping::set_t1_attr(const ST_WmlColorSchemeIndex& _t1_attr)
{
    m_has_t1_attr = true;
    m_t1_attr = new ST_WmlColorSchemeIndex(_t1_attr);
}

const ST_WmlColorSchemeIndex& CT_ColorSchemeMapping::get_t1_attr() const
{
    if (m_t1_attr)
    {
        return *m_t1_attr;
    }
    return ST_WmlColorSchemeIndex::default_instance();
}

bool CT_ColorSchemeMapping::has_bg2_attr() const
{
    return m_has_bg2_attr;
}

void CT_ColorSchemeMapping::set_bg2_attr(const ST_WmlColorSchemeIndex& _bg2_attr)
{
    m_has_bg2_attr = true;
    m_bg2_attr = new ST_WmlColorSchemeIndex(_bg2_attr);
}

const ST_WmlColorSchemeIndex& CT_ColorSchemeMapping::get_bg2_attr() const
{
    if (m_bg2_attr)
    {
        return *m_bg2_attr;
    }
    return ST_WmlColorSchemeIndex::default_instance();
}

bool CT_ColorSchemeMapping::has_t2_attr() const
{
    return m_has_t2_attr;
}

void CT_ColorSchemeMapping::set_t2_attr(const ST_WmlColorSchemeIndex& _t2_attr)
{
    m_has_t2_attr = true;
    m_t2_attr = new ST_WmlColorSchemeIndex(_t2_attr);
}

const ST_WmlColorSchemeIndex& CT_ColorSchemeMapping::get_t2_attr() const
{
    if (m_t2_attr)
    {
        return *m_t2_attr;
    }
    return ST_WmlColorSchemeIndex::default_instance();
}

bool CT_ColorSchemeMapping::has_accent1_attr() const
{
    return m_has_accent1_attr;
}

void CT_ColorSchemeMapping::set_accent1_attr(const ST_WmlColorSchemeIndex& _accent1_attr)
{
    m_has_accent1_attr = true;
    m_accent1_attr = new ST_WmlColorSchemeIndex(_accent1_attr);
}

const ST_WmlColorSchemeIndex& CT_ColorSchemeMapping::get_accent1_attr() const
{
    if (m_accent1_attr)
    {
        return *m_accent1_attr;
    }
    return ST_WmlColorSchemeIndex::default_instance();
}

bool CT_ColorSchemeMapping::has_accent2_attr() const
{
    return m_has_accent2_attr;
}

void CT_ColorSchemeMapping::set_accent2_attr(const ST_WmlColorSchemeIndex& _accent2_attr)
{
    m_has_accent2_attr = true;
    m_accent2_attr = new ST_WmlColorSchemeIndex(_accent2_attr);
}

const ST_WmlColorSchemeIndex& CT_ColorSchemeMapping::get_accent2_attr() const
{
    if (m_accent2_attr)
    {
        return *m_accent2_attr;
    }
    return ST_WmlColorSchemeIndex::default_instance();
}

bool CT_ColorSchemeMapping::has_accent3_attr() const
{
    return m_has_accent3_attr;
}

void CT_ColorSchemeMapping::set_accent3_attr(const ST_WmlColorSchemeIndex& _accent3_attr)
{
    m_has_accent3_attr = true;
    m_accent3_attr = new ST_WmlColorSchemeIndex(_accent3_attr);
}

const ST_WmlColorSchemeIndex& CT_ColorSchemeMapping::get_accent3_attr() const
{
    if (m_accent3_attr)
    {
        return *m_accent3_attr;
    }
    return ST_WmlColorSchemeIndex::default_instance();
}

bool CT_ColorSchemeMapping::has_accent4_attr() const
{
    return m_has_accent4_attr;
}

void CT_ColorSchemeMapping::set_accent4_attr(const ST_WmlColorSchemeIndex& _accent4_attr)
{
    m_has_accent4_attr = true;
    m_accent4_attr = new ST_WmlColorSchemeIndex(_accent4_attr);
}

const ST_WmlColorSchemeIndex& CT_ColorSchemeMapping::get_accent4_attr() const
{
    if (m_accent4_attr)
    {
        return *m_accent4_attr;
    }
    return ST_WmlColorSchemeIndex::default_instance();
}

bool CT_ColorSchemeMapping::has_accent5_attr() const
{
    return m_has_accent5_attr;
}

void CT_ColorSchemeMapping::set_accent5_attr(const ST_WmlColorSchemeIndex& _accent5_attr)
{
    m_has_accent5_attr = true;
    m_accent5_attr = new ST_WmlColorSchemeIndex(_accent5_attr);
}

const ST_WmlColorSchemeIndex& CT_ColorSchemeMapping::get_accent5_attr() const
{
    if (m_accent5_attr)
    {
        return *m_accent5_attr;
    }
    return ST_WmlColorSchemeIndex::default_instance();
}

bool CT_ColorSchemeMapping::has_accent6_attr() const
{
    return m_has_accent6_attr;
}

void CT_ColorSchemeMapping::set_accent6_attr(const ST_WmlColorSchemeIndex& _accent6_attr)
{
    m_has_accent6_attr = true;
    m_accent6_attr = new ST_WmlColorSchemeIndex(_accent6_attr);
}

const ST_WmlColorSchemeIndex& CT_ColorSchemeMapping::get_accent6_attr() const
{
    if (m_accent6_attr)
    {
        return *m_accent6_attr;
    }
    return ST_WmlColorSchemeIndex::default_instance();
}

bool CT_ColorSchemeMapping::has_hyperlink_attr() const
{
    return m_has_hyperlink_attr;
}

void CT_ColorSchemeMapping::set_hyperlink_attr(const ST_WmlColorSchemeIndex& _hyperlink_attr)
{
    m_has_hyperlink_attr = true;
    m_hyperlink_attr = new ST_WmlColorSchemeIndex(_hyperlink_attr);
}

const ST_WmlColorSchemeIndex& CT_ColorSchemeMapping::get_hyperlink_attr() const
{
    if (m_hyperlink_attr)
    {
        return *m_hyperlink_attr;
    }
    return ST_WmlColorSchemeIndex::default_instance();
}

bool CT_ColorSchemeMapping::has_followedHyperlink_attr() const
{
    return m_has_followedHyperlink_attr;
}

void CT_ColorSchemeMapping::set_followedHyperlink_attr(const ST_WmlColorSchemeIndex& _followedHyperlink_attr)
{
    m_has_followedHyperlink_attr = true;
    m_followedHyperlink_attr = new ST_WmlColorSchemeIndex(_followedHyperlink_attr);
}

const ST_WmlColorSchemeIndex& CT_ColorSchemeMapping::get_followedHyperlink_attr() const
{
    if (m_followedHyperlink_attr)
    {
        return *m_followedHyperlink_attr;
    }
    return ST_WmlColorSchemeIndex::default_instance();
}

CT_ColorSchemeMapping* CT_ColorSchemeMapping::default_instance_ = NULL;

// CT_ReadingModeInkLockDown
CT_ReadingModeInkLockDown::CT_ReadingModeInkLockDown()
    :m_has_actualPg_attr(false),
     m_actualPg_attr(NULL),
     m_has_w_attr(false),
     m_w_attr(NULL),
     m_has_h_attr(false),
     m_h_attr(NULL),
     m_has_fontSz_attr(false),
     m_fontSz_attr(NULL)
{
}
CT_ReadingModeInkLockDown::~CT_ReadingModeInkLockDown()
{
    clear();
}
void CT_ReadingModeInkLockDown::clear()
{
    m_has_actualPg_attr = false;

    if (m_actualPg_attr)
    {
        delete m_actualPg_attr;
        m_actualPg_attr = NULL;
    }


    m_has_w_attr = false;

    if (m_w_attr)
    {
        delete m_w_attr;
        m_w_attr = NULL;
    }


    m_has_h_attr = false;

    if (m_h_attr)
    {
        delete m_h_attr;
        m_h_attr = NULL;
    }


    m_has_fontSz_attr = false;

    if (m_fontSz_attr)
    {
        delete m_fontSz_attr;
        m_fontSz_attr = NULL;
    }

}

void CT_ReadingModeInkLockDown::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_actualPg_attr);
    if (m_has_actualPg_attr)
    {
        m_actualPg_attr->toXmlAttr("w:actualPg", _outStream);
    }


    assert(m_has_w_attr);
    if (m_has_w_attr)
    {
        m_w_attr->toXmlAttr("w:w", _outStream);
    }


    assert(m_has_h_attr);
    if (m_has_h_attr)
    {
        m_h_attr->toXmlAttr("w:h", _outStream);
    }


    assert(m_has_fontSz_attr);
    if (m_has_fontSz_attr)
    {
        m_fontSz_attr->toXmlAttr("w:fontSz", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_ReadingModeInkLockDown& CT_ReadingModeInkLockDown::default_instance()
{
    if (!CT_ReadingModeInkLockDown::default_instance_)
    {
        CT_ReadingModeInkLockDown::default_instance_ = new CT_ReadingModeInkLockDown();
    }
    return *CT_ReadingModeInkLockDown::default_instance_;
}

bool CT_ReadingModeInkLockDown::has_actualPg_attr() const
{
    return m_has_actualPg_attr;
}

void CT_ReadingModeInkLockDown::set_actualPg_attr(const ns_s::ST_OnOff& _actualPg_attr)
{
    m_has_actualPg_attr = true;
    m_actualPg_attr = new ns_s::ST_OnOff(_actualPg_attr);
}

const ns_s::ST_OnOff& CT_ReadingModeInkLockDown::get_actualPg_attr() const
{
    if (m_actualPg_attr)
    {
        return *m_actualPg_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

bool CT_ReadingModeInkLockDown::has_w_attr() const
{
    return m_has_w_attr;
}

void CT_ReadingModeInkLockDown::set_w_attr(const ST_PixelsMeasure& _w_attr)
{
    m_has_w_attr = true;
    m_w_attr = new ST_PixelsMeasure(_w_attr);
}

const ST_PixelsMeasure& CT_ReadingModeInkLockDown::get_w_attr() const
{
    if (m_w_attr)
    {
        return *m_w_attr;
    }
    return ST_PixelsMeasure::default_instance();
}

bool CT_ReadingModeInkLockDown::has_h_attr() const
{
    return m_has_h_attr;
}

void CT_ReadingModeInkLockDown::set_h_attr(const ST_PixelsMeasure& _h_attr)
{
    m_has_h_attr = true;
    m_h_attr = new ST_PixelsMeasure(_h_attr);
}

const ST_PixelsMeasure& CT_ReadingModeInkLockDown::get_h_attr() const
{
    if (m_h_attr)
    {
        return *m_h_attr;
    }
    return ST_PixelsMeasure::default_instance();
}

bool CT_ReadingModeInkLockDown::has_fontSz_attr() const
{
    return m_has_fontSz_attr;
}

void CT_ReadingModeInkLockDown::set_fontSz_attr(const ST_DecimalNumberOrPercent& _fontSz_attr)
{
    m_has_fontSz_attr = true;
    m_fontSz_attr = new ST_DecimalNumberOrPercent(_fontSz_attr);
}

const ST_DecimalNumberOrPercent& CT_ReadingModeInkLockDown::get_fontSz_attr() const
{
    if (m_fontSz_attr)
    {
        return *m_fontSz_attr;
    }
    return ST_DecimalNumberOrPercent::default_instance();
}

CT_ReadingModeInkLockDown* CT_ReadingModeInkLockDown::default_instance_ = NULL;

// CT_WriteProtection
CT_WriteProtection::CT_WriteProtection()
    :m_has_recommended_attr(false),
     m_recommended_attr(NULL),
     m_has_algorithmName_attr(false),
     m_algorithmName_attr(NULL),
     m_has_hashValue_attr(false),
     m_hashValue_attr(""),
     m_has_saltValue_attr(false),
     m_saltValue_attr(""),
     m_has_spinCount_attr(false),
     m_spinCount_attr(NULL),
     m_has_cryptProviderType_attr(false),
     m_cryptProviderType_attr(NULL),
     m_has_cryptAlgorithmClass_attr(false),
     m_cryptAlgorithmClass_attr(NULL),
     m_has_cryptAlgorithmType_attr(false),
     m_cryptAlgorithmType_attr(NULL),
     m_has_cryptAlgorithmSid_attr(false),
     m_cryptAlgorithmSid_attr(NULL),
     m_has_cryptSpinCount_attr(false),
     m_cryptSpinCount_attr(NULL),
     m_has_cryptProvider_attr(false),
     m_cryptProvider_attr(NULL),
     m_has_algIdExt_attr(false),
     m_algIdExt_attr(NULL),
     m_has_algIdExtSource_attr(false),
     m_algIdExtSource_attr(NULL),
     m_has_cryptProviderTypeExt_attr(false),
     m_cryptProviderTypeExt_attr(NULL),
     m_has_cryptProviderTypeExtSource_attr(false),
     m_cryptProviderTypeExtSource_attr(NULL),
     m_has_hash_attr(false),
     m_hash_attr(""),
     m_has_salt_attr(false),
     m_salt_attr("")
{
}
CT_WriteProtection::~CT_WriteProtection()
{
    clear();
}
void CT_WriteProtection::clear()
{
    m_has_recommended_attr = false;

    if (m_recommended_attr)
    {
        delete m_recommended_attr;
        m_recommended_attr = NULL;
    }


    m_has_algorithmName_attr = false;

    if (m_algorithmName_attr)
    {
        delete m_algorithmName_attr;
        m_algorithmName_attr = NULL;
    }


    m_has_hashValue_attr = false;
    m_hashValue_attr.clear();

    m_has_saltValue_attr = false;
    m_saltValue_attr.clear();

    m_has_spinCount_attr = false;

    if (m_spinCount_attr)
    {
        delete m_spinCount_attr;
        m_spinCount_attr = NULL;
    }


    m_has_cryptProviderType_attr = false;

    if (m_cryptProviderType_attr)
    {
        delete m_cryptProviderType_attr;
        m_cryptProviderType_attr = NULL;
    }


    m_has_cryptAlgorithmClass_attr = false;

    if (m_cryptAlgorithmClass_attr)
    {
        delete m_cryptAlgorithmClass_attr;
        m_cryptAlgorithmClass_attr = NULL;
    }


    m_has_cryptAlgorithmType_attr = false;

    if (m_cryptAlgorithmType_attr)
    {
        delete m_cryptAlgorithmType_attr;
        m_cryptAlgorithmType_attr = NULL;
    }


    m_has_cryptAlgorithmSid_attr = false;

    if (m_cryptAlgorithmSid_attr)
    {
        delete m_cryptAlgorithmSid_attr;
        m_cryptAlgorithmSid_attr = NULL;
    }


    m_has_cryptSpinCount_attr = false;

    if (m_cryptSpinCount_attr)
    {
        delete m_cryptSpinCount_attr;
        m_cryptSpinCount_attr = NULL;
    }


    m_has_cryptProvider_attr = false;

    if (m_cryptProvider_attr)
    {
        delete m_cryptProvider_attr;
        m_cryptProvider_attr = NULL;
    }


    m_has_algIdExt_attr = false;

    if (m_algIdExt_attr)
    {
        delete m_algIdExt_attr;
        m_algIdExt_attr = NULL;
    }


    m_has_algIdExtSource_attr = false;

    if (m_algIdExtSource_attr)
    {
        delete m_algIdExtSource_attr;
        m_algIdExtSource_attr = NULL;
    }


    m_has_cryptProviderTypeExt_attr = false;

    if (m_cryptProviderTypeExt_attr)
    {
        delete m_cryptProviderTypeExt_attr;
        m_cryptProviderTypeExt_attr = NULL;
    }


    m_has_cryptProviderTypeExtSource_attr = false;

    if (m_cryptProviderTypeExtSource_attr)
    {
        delete m_cryptProviderTypeExtSource_attr;
        m_cryptProviderTypeExtSource_attr = NULL;
    }


    m_has_hash_attr = false;
    m_hash_attr.clear();

    m_has_salt_attr = false;
    m_salt_attr.clear();
}

void CT_WriteProtection::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_recommended_attr)
    {
        m_recommended_attr->toXmlAttr("w:recommended", _outStream);
    }



    if (m_has_algorithmName_attr)
    {
        m_algorithmName_attr->toXmlAttr("w:algorithmName", _outStream);
    }



    if (m_has_hashValue_attr)
    {
        _outStream << " " << "w:hashValue" << "=\"" << m_hashValue_attr << "\"";
    }



    if (m_has_saltValue_attr)
    {
        _outStream << " " << "w:saltValue" << "=\"" << m_saltValue_attr << "\"";
    }



    if (m_has_spinCount_attr)
    {
        m_spinCount_attr->toXmlAttr("w:spinCount", _outStream);
    }



    if (m_has_cryptProviderType_attr)
    {
        m_cryptProviderType_attr->toXmlAttr("w:cryptProviderType", _outStream);
    }



    if (m_has_cryptAlgorithmClass_attr)
    {
        m_cryptAlgorithmClass_attr->toXmlAttr("w:cryptAlgorithmClass", _outStream);
    }



    if (m_has_cryptAlgorithmType_attr)
    {
        m_cryptAlgorithmType_attr->toXmlAttr("w:cryptAlgorithmType", _outStream);
    }



    if (m_has_cryptAlgorithmSid_attr)
    {
        m_cryptAlgorithmSid_attr->toXmlAttr("w:cryptAlgorithmSid", _outStream);
    }



    if (m_has_cryptSpinCount_attr)
    {
        m_cryptSpinCount_attr->toXmlAttr("w:cryptSpinCount", _outStream);
    }



    if (m_has_cryptProvider_attr)
    {
        m_cryptProvider_attr->toXmlAttr("w:cryptProvider", _outStream);
    }



    if (m_has_algIdExt_attr)
    {
        m_algIdExt_attr->toXmlAttr("w:algIdExt", _outStream);
    }



    if (m_has_algIdExtSource_attr)
    {
        m_algIdExtSource_attr->toXmlAttr("w:algIdExtSource", _outStream);
    }



    if (m_has_cryptProviderTypeExt_attr)
    {
        m_cryptProviderTypeExt_attr->toXmlAttr("w:cryptProviderTypeExt", _outStream);
    }



    if (m_has_cryptProviderTypeExtSource_attr)
    {
        m_cryptProviderTypeExtSource_attr->toXmlAttr("w:cryptProviderTypeExtSource", _outStream);
    }



    if (m_has_hash_attr)
    {
        _outStream << " " << "w:hash" << "=\"" << m_hash_attr << "\"";
    }



    if (m_has_salt_attr)
    {
        _outStream << " " << "w:salt" << "=\"" << m_salt_attr << "\"";
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_WriteProtection& CT_WriteProtection::default_instance()
{
    if (!CT_WriteProtection::default_instance_)
    {
        CT_WriteProtection::default_instance_ = new CT_WriteProtection();
    }
    return *CT_WriteProtection::default_instance_;
}

bool CT_WriteProtection::has_recommended_attr() const
{
    return m_has_recommended_attr;
}

void CT_WriteProtection::set_recommended_attr(const ns_s::ST_OnOff& _recommended_attr)
{
    m_has_recommended_attr = true;
    m_recommended_attr = new ns_s::ST_OnOff(_recommended_attr);
}

const ns_s::ST_OnOff& CT_WriteProtection::get_recommended_attr() const
{
    if (m_recommended_attr)
    {
        return *m_recommended_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

bool CT_WriteProtection::has_algorithmName_attr() const
{
    return m_has_algorithmName_attr;
}

void CT_WriteProtection::set_algorithmName_attr(const ns_s::ST_String& _algorithmName_attr)
{
    m_has_algorithmName_attr = true;
    m_algorithmName_attr = new ns_s::ST_String(_algorithmName_attr);
}

const ns_s::ST_String& CT_WriteProtection::get_algorithmName_attr() const
{
    if (m_algorithmName_attr)
    {
        return *m_algorithmName_attr;
    }
    return ns_s::ST_String::default_instance();
}

bool CT_WriteProtection::has_hashValue_attr() const
{
    return m_has_hashValue_attr;
}

void CT_WriteProtection::set_hashValue_attr(const XSD::base64Binary_& _hashValue_attr)
{
    m_has_hashValue_attr = true;
    m_hashValue_attr = _hashValue_attr;
}

const XSD::base64Binary_& CT_WriteProtection::get_hashValue_attr() const
{
    return m_hashValue_attr;
}

bool CT_WriteProtection::has_saltValue_attr() const
{
    return m_has_saltValue_attr;
}

void CT_WriteProtection::set_saltValue_attr(const XSD::base64Binary_& _saltValue_attr)
{
    m_has_saltValue_attr = true;
    m_saltValue_attr = _saltValue_attr;
}

const XSD::base64Binary_& CT_WriteProtection::get_saltValue_attr() const
{
    return m_saltValue_attr;
}

bool CT_WriteProtection::has_spinCount_attr() const
{
    return m_has_spinCount_attr;
}

void CT_WriteProtection::set_spinCount_attr(const ST_DecimalNumber& _spinCount_attr)
{
    m_has_spinCount_attr = true;
    m_spinCount_attr = new ST_DecimalNumber(_spinCount_attr);
}

const ST_DecimalNumber& CT_WriteProtection::get_spinCount_attr() const
{
    if (m_spinCount_attr)
    {
        return *m_spinCount_attr;
    }
    return ST_DecimalNumber::default_instance();
}

bool CT_WriteProtection::has_cryptProviderType_attr() const
{
    return m_has_cryptProviderType_attr;
}

void CT_WriteProtection::set_cryptProviderType_attr(const ns_s::ST_CryptProv& _cryptProviderType_attr)
{
    m_has_cryptProviderType_attr = true;
    m_cryptProviderType_attr = new ns_s::ST_CryptProv(_cryptProviderType_attr);
}

const ns_s::ST_CryptProv& CT_WriteProtection::get_cryptProviderType_attr() const
{
    if (m_cryptProviderType_attr)
    {
        return *m_cryptProviderType_attr;
    }
    return ns_s::ST_CryptProv::default_instance();
}

bool CT_WriteProtection::has_cryptAlgorithmClass_attr() const
{
    return m_has_cryptAlgorithmClass_attr;
}

void CT_WriteProtection::set_cryptAlgorithmClass_attr(const ns_s::ST_AlgClass& _cryptAlgorithmClass_attr)
{
    m_has_cryptAlgorithmClass_attr = true;
    m_cryptAlgorithmClass_attr = new ns_s::ST_AlgClass(_cryptAlgorithmClass_attr);
}

const ns_s::ST_AlgClass& CT_WriteProtection::get_cryptAlgorithmClass_attr() const
{
    if (m_cryptAlgorithmClass_attr)
    {
        return *m_cryptAlgorithmClass_attr;
    }
    return ns_s::ST_AlgClass::default_instance();
}

bool CT_WriteProtection::has_cryptAlgorithmType_attr() const
{
    return m_has_cryptAlgorithmType_attr;
}

void CT_WriteProtection::set_cryptAlgorithmType_attr(const ns_s::ST_AlgType& _cryptAlgorithmType_attr)
{
    m_has_cryptAlgorithmType_attr = true;
    m_cryptAlgorithmType_attr = new ns_s::ST_AlgType(_cryptAlgorithmType_attr);
}

const ns_s::ST_AlgType& CT_WriteProtection::get_cryptAlgorithmType_attr() const
{
    if (m_cryptAlgorithmType_attr)
    {
        return *m_cryptAlgorithmType_attr;
    }
    return ns_s::ST_AlgType::default_instance();
}

bool CT_WriteProtection::has_cryptAlgorithmSid_attr() const
{
    return m_has_cryptAlgorithmSid_attr;
}

void CT_WriteProtection::set_cryptAlgorithmSid_attr(const ST_DecimalNumber& _cryptAlgorithmSid_attr)
{
    m_has_cryptAlgorithmSid_attr = true;
    m_cryptAlgorithmSid_attr = new ST_DecimalNumber(_cryptAlgorithmSid_attr);
}

const ST_DecimalNumber& CT_WriteProtection::get_cryptAlgorithmSid_attr() const
{
    if (m_cryptAlgorithmSid_attr)
    {
        return *m_cryptAlgorithmSid_attr;
    }
    return ST_DecimalNumber::default_instance();
}

bool CT_WriteProtection::has_cryptSpinCount_attr() const
{
    return m_has_cryptSpinCount_attr;
}

void CT_WriteProtection::set_cryptSpinCount_attr(const ST_DecimalNumber& _cryptSpinCount_attr)
{
    m_has_cryptSpinCount_attr = true;
    m_cryptSpinCount_attr = new ST_DecimalNumber(_cryptSpinCount_attr);
}

const ST_DecimalNumber& CT_WriteProtection::get_cryptSpinCount_attr() const
{
    if (m_cryptSpinCount_attr)
    {
        return *m_cryptSpinCount_attr;
    }
    return ST_DecimalNumber::default_instance();
}

bool CT_WriteProtection::has_cryptProvider_attr() const
{
    return m_has_cryptProvider_attr;
}

void CT_WriteProtection::set_cryptProvider_attr(const ns_s::ST_String& _cryptProvider_attr)
{
    m_has_cryptProvider_attr = true;
    m_cryptProvider_attr = new ns_s::ST_String(_cryptProvider_attr);
}

const ns_s::ST_String& CT_WriteProtection::get_cryptProvider_attr() const
{
    if (m_cryptProvider_attr)
    {
        return *m_cryptProvider_attr;
    }
    return ns_s::ST_String::default_instance();
}

bool CT_WriteProtection::has_algIdExt_attr() const
{
    return m_has_algIdExt_attr;
}

void CT_WriteProtection::set_algIdExt_attr(const ST_LongHexNumber& _algIdExt_attr)
{
    m_has_algIdExt_attr = true;
    m_algIdExt_attr = new ST_LongHexNumber(_algIdExt_attr);
}

const ST_LongHexNumber& CT_WriteProtection::get_algIdExt_attr() const
{
    if (m_algIdExt_attr)
    {
        return *m_algIdExt_attr;
    }
    return ST_LongHexNumber::default_instance();
}

bool CT_WriteProtection::has_algIdExtSource_attr() const
{
    return m_has_algIdExtSource_attr;
}

void CT_WriteProtection::set_algIdExtSource_attr(const ns_s::ST_String& _algIdExtSource_attr)
{
    m_has_algIdExtSource_attr = true;
    m_algIdExtSource_attr = new ns_s::ST_String(_algIdExtSource_attr);
}

const ns_s::ST_String& CT_WriteProtection::get_algIdExtSource_attr() const
{
    if (m_algIdExtSource_attr)
    {
        return *m_algIdExtSource_attr;
    }
    return ns_s::ST_String::default_instance();
}

bool CT_WriteProtection::has_cryptProviderTypeExt_attr() const
{
    return m_has_cryptProviderTypeExt_attr;
}

void CT_WriteProtection::set_cryptProviderTypeExt_attr(const ST_LongHexNumber& _cryptProviderTypeExt_attr)
{
    m_has_cryptProviderTypeExt_attr = true;
    m_cryptProviderTypeExt_attr = new ST_LongHexNumber(_cryptProviderTypeExt_attr);
}

const ST_LongHexNumber& CT_WriteProtection::get_cryptProviderTypeExt_attr() const
{
    if (m_cryptProviderTypeExt_attr)
    {
        return *m_cryptProviderTypeExt_attr;
    }
    return ST_LongHexNumber::default_instance();
}

bool CT_WriteProtection::has_cryptProviderTypeExtSource_attr() const
{
    return m_has_cryptProviderTypeExtSource_attr;
}

void CT_WriteProtection::set_cryptProviderTypeExtSource_attr(const ns_s::ST_String& _cryptProviderTypeExtSource_attr)
{
    m_has_cryptProviderTypeExtSource_attr = true;
    m_cryptProviderTypeExtSource_attr = new ns_s::ST_String(_cryptProviderTypeExtSource_attr);
}

const ns_s::ST_String& CT_WriteProtection::get_cryptProviderTypeExtSource_attr() const
{
    if (m_cryptProviderTypeExtSource_attr)
    {
        return *m_cryptProviderTypeExtSource_attr;
    }
    return ns_s::ST_String::default_instance();
}

bool CT_WriteProtection::has_hash_attr() const
{
    return m_has_hash_attr;
}

void CT_WriteProtection::set_hash_attr(const XSD::base64Binary_& _hash_attr)
{
    m_has_hash_attr = true;
    m_hash_attr = _hash_attr;
}

const XSD::base64Binary_& CT_WriteProtection::get_hash_attr() const
{
    return m_hash_attr;
}

bool CT_WriteProtection::has_salt_attr() const
{
    return m_has_salt_attr;
}

void CT_WriteProtection::set_salt_attr(const XSD::base64Binary_& _salt_attr)
{
    m_has_salt_attr = true;
    m_salt_attr = _salt_attr;
}

const XSD::base64Binary_& CT_WriteProtection::get_salt_attr() const
{
    return m_salt_attr;
}

CT_WriteProtection* CT_WriteProtection::default_instance_ = NULL;

// CT_Settings
CT_Settings::CT_Settings()
    :m_has_writeProtection(false),
     m_writeProtection(NULL),
     m_has_view(false),
     m_view(NULL),
     m_has_zoom(false),
     m_zoom(NULL),
     m_has_removePersonalInformation(false),
     m_removePersonalInformation(NULL),
     m_has_removeDateAndTime(false),
     m_removeDateAndTime(NULL),
     m_has_doNotDisplayPageBoundaries(false),
     m_doNotDisplayPageBoundaries(NULL),
     m_has_displayBackgroundShape(false),
     m_displayBackgroundShape(NULL),
     m_has_printPostScriptOverText(false),
     m_printPostScriptOverText(NULL),
     m_has_printFractionalCharacterWidth(false),
     m_printFractionalCharacterWidth(NULL),
     m_has_printFormsData(false),
     m_printFormsData(NULL),
     m_has_embedTrueTypeFonts(false),
     m_embedTrueTypeFonts(NULL),
     m_has_embedSystemFonts(false),
     m_embedSystemFonts(NULL),
     m_has_saveSubsetFonts(false),
     m_saveSubsetFonts(NULL),
     m_has_saveFormsData(false),
     m_saveFormsData(NULL),
     m_has_mirrorMargins(false),
     m_mirrorMargins(NULL),
     m_has_alignBordersAndEdges(false),
     m_alignBordersAndEdges(NULL),
     m_has_bordersDoNotSurroundHeader(false),
     m_bordersDoNotSurroundHeader(NULL),
     m_has_bordersDoNotSurroundFooter(false),
     m_bordersDoNotSurroundFooter(NULL),
     m_has_gutterAtTop(false),
     m_gutterAtTop(NULL),
     m_has_hideSpellingErrors(false),
     m_hideSpellingErrors(NULL),
     m_has_hideGrammaticalErrors(false),
     m_hideGrammaticalErrors(NULL),
     m_has_proofState(false),
     m_proofState(NULL),
     m_has_formsDesign(false),
     m_formsDesign(NULL),
     m_has_attachedTemplate(false),
     m_attachedTemplate(NULL),
     m_has_linkStyles(false),
     m_linkStyles(NULL),
     m_has_stylePaneFormatFilter(false),
     m_stylePaneFormatFilter(NULL),
     m_has_stylePaneSortMethod(false),
     m_stylePaneSortMethod(NULL),
     m_has_documentType(false),
     m_documentType(NULL),
     m_has_mailMerge(false),
     m_mailMerge(NULL),
     m_has_revisionView(false),
     m_revisionView(NULL),
     m_has_trackRevisions(false),
     m_trackRevisions(NULL),
     m_has_doNotTrackMoves(false),
     m_doNotTrackMoves(NULL),
     m_has_doNotTrackFormatting(false),
     m_doNotTrackFormatting(NULL),
     m_has_documentProtection(false),
     m_documentProtection(NULL),
     m_has_autoFormatOverride(false),
     m_autoFormatOverride(NULL),
     m_has_styleLockTheme(false),
     m_styleLockTheme(NULL),
     m_has_styleLockQFSet(false),
     m_styleLockQFSet(NULL),
     m_has_defaultTabStop(false),
     m_defaultTabStop(NULL),
     m_has_autoHyphenation(false),
     m_autoHyphenation(NULL),
     m_has_consecutiveHyphenLimit(false),
     m_consecutiveHyphenLimit(NULL),
     m_has_hyphenationZone(false),
     m_hyphenationZone(NULL),
     m_has_doNotHyphenateCaps(false),
     m_doNotHyphenateCaps(NULL),
     m_has_showEnvelope(false),
     m_showEnvelope(NULL),
     m_has_summaryLength(false),
     m_summaryLength(NULL),
     m_has_clickAndTypeStyle(false),
     m_clickAndTypeStyle(NULL),
     m_has_defaultTableStyle(false),
     m_defaultTableStyle(NULL),
     m_has_evenAndOddHeaders(false),
     m_evenAndOddHeaders(NULL),
     m_has_bookFoldRevPrinting(false),
     m_bookFoldRevPrinting(NULL),
     m_has_bookFoldPrinting(false),
     m_bookFoldPrinting(NULL),
     m_has_bookFoldPrintingSheets(false),
     m_bookFoldPrintingSheets(NULL),
     m_has_drawingGridHorizontalSpacing(false),
     m_drawingGridHorizontalSpacing(NULL),
     m_has_drawingGridVerticalSpacing(false),
     m_drawingGridVerticalSpacing(NULL),
     m_has_displayHorizontalDrawingGridEvery(false),
     m_displayHorizontalDrawingGridEvery(NULL),
     m_has_displayVerticalDrawingGridEvery(false),
     m_displayVerticalDrawingGridEvery(NULL),
     m_has_doNotUseMarginsForDrawingGridOrigin(false),
     m_doNotUseMarginsForDrawingGridOrigin(NULL),
     m_has_drawingGridHorizontalOrigin(false),
     m_drawingGridHorizontalOrigin(NULL),
     m_has_drawingGridVerticalOrigin(false),
     m_drawingGridVerticalOrigin(NULL),
     m_has_doNotShadeFormData(false),
     m_doNotShadeFormData(NULL),
     m_has_noPunctuationKerning(false),
     m_noPunctuationKerning(NULL),
     m_has_characterSpacingControl(false),
     m_characterSpacingControl(NULL),
     m_has_printTwoOnOne(false),
     m_printTwoOnOne(NULL),
     m_has_strictFirstAndLastChars(false),
     m_strictFirstAndLastChars(NULL),
     m_has_noLineBreaksAfter(false),
     m_noLineBreaksAfter(NULL),
     m_has_noLineBreaksBefore(false),
     m_noLineBreaksBefore(NULL),
     m_has_savePreviewPicture(false),
     m_savePreviewPicture(NULL),
     m_has_doNotValidateAgainstSchema(false),
     m_doNotValidateAgainstSchema(NULL),
     m_has_saveInvalidXml(false),
     m_saveInvalidXml(NULL),
     m_has_ignoreMixedContent(false),
     m_ignoreMixedContent(NULL),
     m_has_alwaysShowPlaceholderText(false),
     m_alwaysShowPlaceholderText(NULL),
     m_has_doNotDemarcateInvalidXml(false),
     m_doNotDemarcateInvalidXml(NULL),
     m_has_saveXmlDataOnly(false),
     m_saveXmlDataOnly(NULL),
     m_has_useXSLTWhenSaving(false),
     m_useXSLTWhenSaving(NULL),
     m_has_saveThroughXslt(false),
     m_saveThroughXslt(NULL),
     m_has_showXMLTags(false),
     m_showXMLTags(NULL),
     m_has_alwaysMergeEmptyNamespace(false),
     m_alwaysMergeEmptyNamespace(NULL),
     m_has_updateFields(false),
     m_updateFields(NULL),
     m_has_hdrShapeDefaults(false),
     m_hdrShapeDefaults(NULL),
     m_has_footnotePr(false),
     m_footnotePr(NULL),
     m_has_endnotePr(false),
     m_endnotePr(NULL),
     m_has_compat(false),
     m_compat(NULL),
     m_has_docVars(false),
     m_docVars(NULL),
     m_has_rsids(false),
     m_rsids(NULL),
     m_has_m_mathPr(false),
     m_m_mathPr(NULL),
     m_has_themeFontLang(false),
     m_themeFontLang(NULL),
     m_has_clrSchemeMapping(false),
     m_clrSchemeMapping(NULL),
     m_has_doNotIncludeSubdocsInStats(false),
     m_doNotIncludeSubdocsInStats(NULL),
     m_has_doNotAutoCompressPictures(false),
     m_doNotAutoCompressPictures(NULL),
     m_has_forceUpgrade(false),
     m_forceUpgrade(NULL),
     m_has_captions(false),
     m_captions(NULL),
     m_has_readModeInkLockDown(false),
     m_readModeInkLockDown(NULL),
     m_has_sl_schemaLibrary(false),
     m_sl_schemaLibrary(NULL),
     m_has_shapeDefaults(false),
     m_shapeDefaults(NULL),
     m_has_doNotEmbedSmartTags(false),
     m_doNotEmbedSmartTags(NULL),
     m_has_decimalSymbol(false),
     m_decimalSymbol(NULL),
     m_has_listSeparator(false),
     m_listSeparator(NULL)
{
}
CT_Settings::~CT_Settings()
{
    clear();
}
bool CT_Settings::has_writeProtection() const
{
    return m_has_writeProtection;
}

CT_WriteProtection* CT_Settings::mutable_writeProtection()
{
    m_has_writeProtection = true;
    if (!m_writeProtection)
    {
        m_writeProtection = new CT_WriteProtection();
    }
    return m_writeProtection;
}

const CT_WriteProtection& CT_Settings::get_writeProtection() const
{
    if (m_writeProtection)
    {
        return *m_writeProtection;
    }
    return CT_WriteProtection::default_instance();
}

bool CT_Settings::has_view() const
{
    return m_has_view;
}

CT_View* CT_Settings::mutable_view()
{
    m_has_view = true;
    if (!m_view)
    {
        m_view = new CT_View();
    }
    return m_view;
}

const CT_View& CT_Settings::get_view() const
{
    if (m_view)
    {
        return *m_view;
    }
    return CT_View::default_instance();
}

bool CT_Settings::has_zoom() const
{
    return m_has_zoom;
}

CT_Zoom* CT_Settings::mutable_zoom()
{
    m_has_zoom = true;
    if (!m_zoom)
    {
        m_zoom = new CT_Zoom();
    }
    return m_zoom;
}

const CT_Zoom& CT_Settings::get_zoom() const
{
    if (m_zoom)
    {
        return *m_zoom;
    }
    return CT_Zoom::default_instance();
}

bool CT_Settings::has_removePersonalInformation() const
{
    return m_has_removePersonalInformation;
}

CT_OnOff* CT_Settings::mutable_removePersonalInformation()
{
    m_has_removePersonalInformation = true;
    if (!m_removePersonalInformation)
    {
        m_removePersonalInformation = new CT_OnOff();
    }
    return m_removePersonalInformation;
}

const CT_OnOff& CT_Settings::get_removePersonalInformation() const
{
    if (m_removePersonalInformation)
    {
        return *m_removePersonalInformation;
    }
    return CT_OnOff::default_instance();
}

bool CT_Settings::has_removeDateAndTime() const
{
    return m_has_removeDateAndTime;
}

CT_OnOff* CT_Settings::mutable_removeDateAndTime()
{
    m_has_removeDateAndTime = true;
    if (!m_removeDateAndTime)
    {
        m_removeDateAndTime = new CT_OnOff();
    }
    return m_removeDateAndTime;
}

const CT_OnOff& CT_Settings::get_removeDateAndTime() const
{
    if (m_removeDateAndTime)
    {
        return *m_removeDateAndTime;
    }
    return CT_OnOff::default_instance();
}

bool CT_Settings::has_doNotDisplayPageBoundaries() const
{
    return m_has_doNotDisplayPageBoundaries;
}

CT_OnOff* CT_Settings::mutable_doNotDisplayPageBoundaries()
{
    m_has_doNotDisplayPageBoundaries = true;
    if (!m_doNotDisplayPageBoundaries)
    {
        m_doNotDisplayPageBoundaries = new CT_OnOff();
    }
    return m_doNotDisplayPageBoundaries;
}

const CT_OnOff& CT_Settings::get_doNotDisplayPageBoundaries() const
{
    if (m_doNotDisplayPageBoundaries)
    {
        return *m_doNotDisplayPageBoundaries;
    }
    return CT_OnOff::default_instance();
}

bool CT_Settings::has_displayBackgroundShape() const
{
    return m_has_displayBackgroundShape;
}

CT_OnOff* CT_Settings::mutable_displayBackgroundShape()
{
    m_has_displayBackgroundShape = true;
    if (!m_displayBackgroundShape)
    {
        m_displayBackgroundShape = new CT_OnOff();
    }
    return m_displayBackgroundShape;
}

const CT_OnOff& CT_Settings::get_displayBackgroundShape() const
{
    if (m_displayBackgroundShape)
    {
        return *m_displayBackgroundShape;
    }
    return CT_OnOff::default_instance();
}

bool CT_Settings::has_printPostScriptOverText() const
{
    return m_has_printPostScriptOverText;
}

CT_OnOff* CT_Settings::mutable_printPostScriptOverText()
{
    m_has_printPostScriptOverText = true;
    if (!m_printPostScriptOverText)
    {
        m_printPostScriptOverText = new CT_OnOff();
    }
    return m_printPostScriptOverText;
}

const CT_OnOff& CT_Settings::get_printPostScriptOverText() const
{
    if (m_printPostScriptOverText)
    {
        return *m_printPostScriptOverText;
    }
    return CT_OnOff::default_instance();
}

bool CT_Settings::has_printFractionalCharacterWidth() const
{
    return m_has_printFractionalCharacterWidth;
}

CT_OnOff* CT_Settings::mutable_printFractionalCharacterWidth()
{
    m_has_printFractionalCharacterWidth = true;
    if (!m_printFractionalCharacterWidth)
    {
        m_printFractionalCharacterWidth = new CT_OnOff();
    }
    return m_printFractionalCharacterWidth;
}

const CT_OnOff& CT_Settings::get_printFractionalCharacterWidth() const
{
    if (m_printFractionalCharacterWidth)
    {
        return *m_printFractionalCharacterWidth;
    }
    return CT_OnOff::default_instance();
}

bool CT_Settings::has_printFormsData() const
{
    return m_has_printFormsData;
}

CT_OnOff* CT_Settings::mutable_printFormsData()
{
    m_has_printFormsData = true;
    if (!m_printFormsData)
    {
        m_printFormsData = new CT_OnOff();
    }
    return m_printFormsData;
}

const CT_OnOff& CT_Settings::get_printFormsData() const
{
    if (m_printFormsData)
    {
        return *m_printFormsData;
    }
    return CT_OnOff::default_instance();
}

bool CT_Settings::has_embedTrueTypeFonts() const
{
    return m_has_embedTrueTypeFonts;
}

CT_OnOff* CT_Settings::mutable_embedTrueTypeFonts()
{
    m_has_embedTrueTypeFonts = true;
    if (!m_embedTrueTypeFonts)
    {
        m_embedTrueTypeFonts = new CT_OnOff();
    }
    return m_embedTrueTypeFonts;
}

const CT_OnOff& CT_Settings::get_embedTrueTypeFonts() const
{
    if (m_embedTrueTypeFonts)
    {
        return *m_embedTrueTypeFonts;
    }
    return CT_OnOff::default_instance();
}

bool CT_Settings::has_embedSystemFonts() const
{
    return m_has_embedSystemFonts;
}

CT_OnOff* CT_Settings::mutable_embedSystemFonts()
{
    m_has_embedSystemFonts = true;
    if (!m_embedSystemFonts)
    {
        m_embedSystemFonts = new CT_OnOff();
    }
    return m_embedSystemFonts;
}

const CT_OnOff& CT_Settings::get_embedSystemFonts() const
{
    if (m_embedSystemFonts)
    {
        return *m_embedSystemFonts;
    }
    return CT_OnOff::default_instance();
}

bool CT_Settings::has_saveSubsetFonts() const
{
    return m_has_saveSubsetFonts;
}

CT_OnOff* CT_Settings::mutable_saveSubsetFonts()
{
    m_has_saveSubsetFonts = true;
    if (!m_saveSubsetFonts)
    {
        m_saveSubsetFonts = new CT_OnOff();
    }
    return m_saveSubsetFonts;
}

const CT_OnOff& CT_Settings::get_saveSubsetFonts() const
{
    if (m_saveSubsetFonts)
    {
        return *m_saveSubsetFonts;
    }
    return CT_OnOff::default_instance();
}

bool CT_Settings::has_saveFormsData() const
{
    return m_has_saveFormsData;
}

CT_OnOff* CT_Settings::mutable_saveFormsData()
{
    m_has_saveFormsData = true;
    if (!m_saveFormsData)
    {
        m_saveFormsData = new CT_OnOff();
    }
    return m_saveFormsData;
}

const CT_OnOff& CT_Settings::get_saveFormsData() const
{
    if (m_saveFormsData)
    {
        return *m_saveFormsData;
    }
    return CT_OnOff::default_instance();
}

bool CT_Settings::has_mirrorMargins() const
{
    return m_has_mirrorMargins;
}

CT_OnOff* CT_Settings::mutable_mirrorMargins()
{
    m_has_mirrorMargins = true;
    if (!m_mirrorMargins)
    {
        m_mirrorMargins = new CT_OnOff();
    }
    return m_mirrorMargins;
}

const CT_OnOff& CT_Settings::get_mirrorMargins() const
{
    if (m_mirrorMargins)
    {
        return *m_mirrorMargins;
    }
    return CT_OnOff::default_instance();
}

bool CT_Settings::has_alignBordersAndEdges() const
{
    return m_has_alignBordersAndEdges;
}

CT_OnOff* CT_Settings::mutable_alignBordersAndEdges()
{
    m_has_alignBordersAndEdges = true;
    if (!m_alignBordersAndEdges)
    {
        m_alignBordersAndEdges = new CT_OnOff();
    }
    return m_alignBordersAndEdges;
}

const CT_OnOff& CT_Settings::get_alignBordersAndEdges() const
{
    if (m_alignBordersAndEdges)
    {
        return *m_alignBordersAndEdges;
    }
    return CT_OnOff::default_instance();
}

bool CT_Settings::has_bordersDoNotSurroundHeader() const
{
    return m_has_bordersDoNotSurroundHeader;
}

CT_OnOff* CT_Settings::mutable_bordersDoNotSurroundHeader()
{
    m_has_bordersDoNotSurroundHeader = true;
    if (!m_bordersDoNotSurroundHeader)
    {
        m_bordersDoNotSurroundHeader = new CT_OnOff();
    }
    return m_bordersDoNotSurroundHeader;
}

const CT_OnOff& CT_Settings::get_bordersDoNotSurroundHeader() const
{
    if (m_bordersDoNotSurroundHeader)
    {
        return *m_bordersDoNotSurroundHeader;
    }
    return CT_OnOff::default_instance();
}

bool CT_Settings::has_bordersDoNotSurroundFooter() const
{
    return m_has_bordersDoNotSurroundFooter;
}

CT_OnOff* CT_Settings::mutable_bordersDoNotSurroundFooter()
{
    m_has_bordersDoNotSurroundFooter = true;
    if (!m_bordersDoNotSurroundFooter)
    {
        m_bordersDoNotSurroundFooter = new CT_OnOff();
    }
    return m_bordersDoNotSurroundFooter;
}

const CT_OnOff& CT_Settings::get_bordersDoNotSurroundFooter() const
{
    if (m_bordersDoNotSurroundFooter)
    {
        return *m_bordersDoNotSurroundFooter;
    }
    return CT_OnOff::default_instance();
}

bool CT_Settings::has_gutterAtTop() const
{
    return m_has_gutterAtTop;
}

CT_OnOff* CT_Settings::mutable_gutterAtTop()
{
    m_has_gutterAtTop = true;
    if (!m_gutterAtTop)
    {
        m_gutterAtTop = new CT_OnOff();
    }
    return m_gutterAtTop;
}

const CT_OnOff& CT_Settings::get_gutterAtTop() const
{
    if (m_gutterAtTop)
    {
        return *m_gutterAtTop;
    }
    return CT_OnOff::default_instance();
}

bool CT_Settings::has_hideSpellingErrors() const
{
    return m_has_hideSpellingErrors;
}

CT_OnOff* CT_Settings::mutable_hideSpellingErrors()
{
    m_has_hideSpellingErrors = true;
    if (!m_hideSpellingErrors)
    {
        m_hideSpellingErrors = new CT_OnOff();
    }
    return m_hideSpellingErrors;
}

const CT_OnOff& CT_Settings::get_hideSpellingErrors() const
{
    if (m_hideSpellingErrors)
    {
        return *m_hideSpellingErrors;
    }
    return CT_OnOff::default_instance();
}

bool CT_Settings::has_hideGrammaticalErrors() const
{
    return m_has_hideGrammaticalErrors;
}

CT_OnOff* CT_Settings::mutable_hideGrammaticalErrors()
{
    m_has_hideGrammaticalErrors = true;
    if (!m_hideGrammaticalErrors)
    {
        m_hideGrammaticalErrors = new CT_OnOff();
    }
    return m_hideGrammaticalErrors;
}

const CT_OnOff& CT_Settings::get_hideGrammaticalErrors() const
{
    if (m_hideGrammaticalErrors)
    {
        return *m_hideGrammaticalErrors;
    }
    return CT_OnOff::default_instance();
}

CT_WritingStyle* CT_Settings::add_activeWritingStyle()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_WritingStyle* pNewChild = pChildGroup->mutable_activeWritingStyle();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

bool CT_Settings::has_proofState() const
{
    return m_has_proofState;
}

CT_Proof* CT_Settings::mutable_proofState()
{
    m_has_proofState = true;
    if (!m_proofState)
    {
        m_proofState = new CT_Proof();
    }
    return m_proofState;
}

const CT_Proof& CT_Settings::get_proofState() const
{
    if (m_proofState)
    {
        return *m_proofState;
    }
    return CT_Proof::default_instance();
}

bool CT_Settings::has_formsDesign() const
{
    return m_has_formsDesign;
}

CT_OnOff* CT_Settings::mutable_formsDesign()
{
    m_has_formsDesign = true;
    if (!m_formsDesign)
    {
        m_formsDesign = new CT_OnOff();
    }
    return m_formsDesign;
}

const CT_OnOff& CT_Settings::get_formsDesign() const
{
    if (m_formsDesign)
    {
        return *m_formsDesign;
    }
    return CT_OnOff::default_instance();
}

bool CT_Settings::has_attachedTemplate() const
{
    return m_has_attachedTemplate;
}

CT_Rel* CT_Settings::mutable_attachedTemplate()
{
    m_has_attachedTemplate = true;
    if (!m_attachedTemplate)
    {
        m_attachedTemplate = new CT_Rel();
    }
    return m_attachedTemplate;
}

const CT_Rel& CT_Settings::get_attachedTemplate() const
{
    if (m_attachedTemplate)
    {
        return *m_attachedTemplate;
    }
    return CT_Rel::default_instance();
}

bool CT_Settings::has_linkStyles() const
{
    return m_has_linkStyles;
}

CT_OnOff* CT_Settings::mutable_linkStyles()
{
    m_has_linkStyles = true;
    if (!m_linkStyles)
    {
        m_linkStyles = new CT_OnOff();
    }
    return m_linkStyles;
}

const CT_OnOff& CT_Settings::get_linkStyles() const
{
    if (m_linkStyles)
    {
        return *m_linkStyles;
    }
    return CT_OnOff::default_instance();
}

bool CT_Settings::has_stylePaneFormatFilter() const
{
    return m_has_stylePaneFormatFilter;
}

CT_StylePaneFilter* CT_Settings::mutable_stylePaneFormatFilter()
{
    m_has_stylePaneFormatFilter = true;
    if (!m_stylePaneFormatFilter)
    {
        m_stylePaneFormatFilter = new CT_StylePaneFilter();
    }
    return m_stylePaneFormatFilter;
}

const CT_StylePaneFilter& CT_Settings::get_stylePaneFormatFilter() const
{
    if (m_stylePaneFormatFilter)
    {
        return *m_stylePaneFormatFilter;
    }
    return CT_StylePaneFilter::default_instance();
}

bool CT_Settings::has_stylePaneSortMethod() const
{
    return m_has_stylePaneSortMethod;
}

CT_StyleSort* CT_Settings::mutable_stylePaneSortMethod()
{
    m_has_stylePaneSortMethod = true;
    if (!m_stylePaneSortMethod)
    {
        m_stylePaneSortMethod = new CT_StyleSort();
    }
    return m_stylePaneSortMethod;
}

const CT_StyleSort& CT_Settings::get_stylePaneSortMethod() const
{
    if (m_stylePaneSortMethod)
    {
        return *m_stylePaneSortMethod;
    }
    return CT_StyleSort::default_instance();
}

bool CT_Settings::has_documentType() const
{
    return m_has_documentType;
}

CT_DocType* CT_Settings::mutable_documentType()
{
    m_has_documentType = true;
    if (!m_documentType)
    {
        m_documentType = new CT_DocType();
    }
    return m_documentType;
}

const CT_DocType& CT_Settings::get_documentType() const
{
    if (m_documentType)
    {
        return *m_documentType;
    }
    return CT_DocType::default_instance();
}

bool CT_Settings::has_mailMerge() const
{
    return m_has_mailMerge;
}

CT_MailMerge* CT_Settings::mutable_mailMerge()
{
    m_has_mailMerge = true;
    if (!m_mailMerge)
    {
        m_mailMerge = new CT_MailMerge();
    }
    return m_mailMerge;
}

const CT_MailMerge& CT_Settings::get_mailMerge() const
{
    if (m_mailMerge)
    {
        return *m_mailMerge;
    }
    return CT_MailMerge::default_instance();
}

bool CT_Settings::has_revisionView() const
{
    return m_has_revisionView;
}

CT_TrackChangesView* CT_Settings::mutable_revisionView()
{
    m_has_revisionView = true;
    if (!m_revisionView)
    {
        m_revisionView = new CT_TrackChangesView();
    }
    return m_revisionView;
}

const CT_TrackChangesView& CT_Settings::get_revisionView() const
{
    if (m_revisionView)
    {
        return *m_revisionView;
    }
    return CT_TrackChangesView::default_instance();
}

bool CT_Settings::has_trackRevisions() const
{
    return m_has_trackRevisions;
}

CT_OnOff* CT_Settings::mutable_trackRevisions()
{
    m_has_trackRevisions = true;
    if (!m_trackRevisions)
    {
        m_trackRevisions = new CT_OnOff();
    }
    return m_trackRevisions;
}

const CT_OnOff& CT_Settings::get_trackRevisions() const
{
    if (m_trackRevisions)
    {
        return *m_trackRevisions;
    }
    return CT_OnOff::default_instance();
}

bool CT_Settings::has_doNotTrackMoves() const
{
    return m_has_doNotTrackMoves;
}

CT_OnOff* CT_Settings::mutable_doNotTrackMoves()
{
    m_has_doNotTrackMoves = true;
    if (!m_doNotTrackMoves)
    {
        m_doNotTrackMoves = new CT_OnOff();
    }
    return m_doNotTrackMoves;
}

const CT_OnOff& CT_Settings::get_doNotTrackMoves() const
{
    if (m_doNotTrackMoves)
    {
        return *m_doNotTrackMoves;
    }
    return CT_OnOff::default_instance();
}

bool CT_Settings::has_doNotTrackFormatting() const
{
    return m_has_doNotTrackFormatting;
}

CT_OnOff* CT_Settings::mutable_doNotTrackFormatting()
{
    m_has_doNotTrackFormatting = true;
    if (!m_doNotTrackFormatting)
    {
        m_doNotTrackFormatting = new CT_OnOff();
    }
    return m_doNotTrackFormatting;
}

const CT_OnOff& CT_Settings::get_doNotTrackFormatting() const
{
    if (m_doNotTrackFormatting)
    {
        return *m_doNotTrackFormatting;
    }
    return CT_OnOff::default_instance();
}

bool CT_Settings::has_documentProtection() const
{
    return m_has_documentProtection;
}

CT_DocProtect* CT_Settings::mutable_documentProtection()
{
    m_has_documentProtection = true;
    if (!m_documentProtection)
    {
        m_documentProtection = new CT_DocProtect();
    }
    return m_documentProtection;
}

const CT_DocProtect& CT_Settings::get_documentProtection() const
{
    if (m_documentProtection)
    {
        return *m_documentProtection;
    }
    return CT_DocProtect::default_instance();
}

bool CT_Settings::has_autoFormatOverride() const
{
    return m_has_autoFormatOverride;
}

CT_OnOff* CT_Settings::mutable_autoFormatOverride()
{
    m_has_autoFormatOverride = true;
    if (!m_autoFormatOverride)
    {
        m_autoFormatOverride = new CT_OnOff();
    }
    return m_autoFormatOverride;
}

const CT_OnOff& CT_Settings::get_autoFormatOverride() const
{
    if (m_autoFormatOverride)
    {
        return *m_autoFormatOverride;
    }
    return CT_OnOff::default_instance();
}

bool CT_Settings::has_styleLockTheme() const
{
    return m_has_styleLockTheme;
}

CT_OnOff* CT_Settings::mutable_styleLockTheme()
{
    m_has_styleLockTheme = true;
    if (!m_styleLockTheme)
    {
        m_styleLockTheme = new CT_OnOff();
    }
    return m_styleLockTheme;
}

const CT_OnOff& CT_Settings::get_styleLockTheme() const
{
    if (m_styleLockTheme)
    {
        return *m_styleLockTheme;
    }
    return CT_OnOff::default_instance();
}

bool CT_Settings::has_styleLockQFSet() const
{
    return m_has_styleLockQFSet;
}

CT_OnOff* CT_Settings::mutable_styleLockQFSet()
{
    m_has_styleLockQFSet = true;
    if (!m_styleLockQFSet)
    {
        m_styleLockQFSet = new CT_OnOff();
    }
    return m_styleLockQFSet;
}

const CT_OnOff& CT_Settings::get_styleLockQFSet() const
{
    if (m_styleLockQFSet)
    {
        return *m_styleLockQFSet;
    }
    return CT_OnOff::default_instance();
}

bool CT_Settings::has_defaultTabStop() const
{
    return m_has_defaultTabStop;
}

CT_TwipsMeasure* CT_Settings::mutable_defaultTabStop()
{
    m_has_defaultTabStop = true;
    if (!m_defaultTabStop)
    {
        m_defaultTabStop = new CT_TwipsMeasure();
    }
    return m_defaultTabStop;
}

const CT_TwipsMeasure& CT_Settings::get_defaultTabStop() const
{
    if (m_defaultTabStop)
    {
        return *m_defaultTabStop;
    }
    return CT_TwipsMeasure::default_instance();
}

bool CT_Settings::has_autoHyphenation() const
{
    return m_has_autoHyphenation;
}

CT_OnOff* CT_Settings::mutable_autoHyphenation()
{
    m_has_autoHyphenation = true;
    if (!m_autoHyphenation)
    {
        m_autoHyphenation = new CT_OnOff();
    }
    return m_autoHyphenation;
}

const CT_OnOff& CT_Settings::get_autoHyphenation() const
{
    if (m_autoHyphenation)
    {
        return *m_autoHyphenation;
    }
    return CT_OnOff::default_instance();
}

bool CT_Settings::has_consecutiveHyphenLimit() const
{
    return m_has_consecutiveHyphenLimit;
}

CT_DecimalNumber* CT_Settings::mutable_consecutiveHyphenLimit()
{
    m_has_consecutiveHyphenLimit = true;
    if (!m_consecutiveHyphenLimit)
    {
        m_consecutiveHyphenLimit = new CT_DecimalNumber();
    }
    return m_consecutiveHyphenLimit;
}

const CT_DecimalNumber& CT_Settings::get_consecutiveHyphenLimit() const
{
    if (m_consecutiveHyphenLimit)
    {
        return *m_consecutiveHyphenLimit;
    }
    return CT_DecimalNumber::default_instance();
}

bool CT_Settings::has_hyphenationZone() const
{
    return m_has_hyphenationZone;
}

CT_TwipsMeasure* CT_Settings::mutable_hyphenationZone()
{
    m_has_hyphenationZone = true;
    if (!m_hyphenationZone)
    {
        m_hyphenationZone = new CT_TwipsMeasure();
    }
    return m_hyphenationZone;
}

const CT_TwipsMeasure& CT_Settings::get_hyphenationZone() const
{
    if (m_hyphenationZone)
    {
        return *m_hyphenationZone;
    }
    return CT_TwipsMeasure::default_instance();
}

bool CT_Settings::has_doNotHyphenateCaps() const
{
    return m_has_doNotHyphenateCaps;
}

CT_OnOff* CT_Settings::mutable_doNotHyphenateCaps()
{
    m_has_doNotHyphenateCaps = true;
    if (!m_doNotHyphenateCaps)
    {
        m_doNotHyphenateCaps = new CT_OnOff();
    }
    return m_doNotHyphenateCaps;
}

const CT_OnOff& CT_Settings::get_doNotHyphenateCaps() const
{
    if (m_doNotHyphenateCaps)
    {
        return *m_doNotHyphenateCaps;
    }
    return CT_OnOff::default_instance();
}

bool CT_Settings::has_showEnvelope() const
{
    return m_has_showEnvelope;
}

CT_OnOff* CT_Settings::mutable_showEnvelope()
{
    m_has_showEnvelope = true;
    if (!m_showEnvelope)
    {
        m_showEnvelope = new CT_OnOff();
    }
    return m_showEnvelope;
}

const CT_OnOff& CT_Settings::get_showEnvelope() const
{
    if (m_showEnvelope)
    {
        return *m_showEnvelope;
    }
    return CT_OnOff::default_instance();
}

bool CT_Settings::has_summaryLength() const
{
    return m_has_summaryLength;
}

CT_DecimalNumberOrPrecent* CT_Settings::mutable_summaryLength()
{
    m_has_summaryLength = true;
    if (!m_summaryLength)
    {
        m_summaryLength = new CT_DecimalNumberOrPrecent();
    }
    return m_summaryLength;
}

const CT_DecimalNumberOrPrecent& CT_Settings::get_summaryLength() const
{
    if (m_summaryLength)
    {
        return *m_summaryLength;
    }
    return CT_DecimalNumberOrPrecent::default_instance();
}

bool CT_Settings::has_clickAndTypeStyle() const
{
    return m_has_clickAndTypeStyle;
}

CT_String* CT_Settings::mutable_clickAndTypeStyle()
{
    m_has_clickAndTypeStyle = true;
    if (!m_clickAndTypeStyle)
    {
        m_clickAndTypeStyle = new CT_String();
    }
    return m_clickAndTypeStyle;
}

const CT_String& CT_Settings::get_clickAndTypeStyle() const
{
    if (m_clickAndTypeStyle)
    {
        return *m_clickAndTypeStyle;
    }
    return CT_String::default_instance();
}

bool CT_Settings::has_defaultTableStyle() const
{
    return m_has_defaultTableStyle;
}

CT_String* CT_Settings::mutable_defaultTableStyle()
{
    m_has_defaultTableStyle = true;
    if (!m_defaultTableStyle)
    {
        m_defaultTableStyle = new CT_String();
    }
    return m_defaultTableStyle;
}

const CT_String& CT_Settings::get_defaultTableStyle() const
{
    if (m_defaultTableStyle)
    {
        return *m_defaultTableStyle;
    }
    return CT_String::default_instance();
}

bool CT_Settings::has_evenAndOddHeaders() const
{
    return m_has_evenAndOddHeaders;
}

CT_OnOff* CT_Settings::mutable_evenAndOddHeaders()
{
    m_has_evenAndOddHeaders = true;
    if (!m_evenAndOddHeaders)
    {
        m_evenAndOddHeaders = new CT_OnOff();
    }
    return m_evenAndOddHeaders;
}

const CT_OnOff& CT_Settings::get_evenAndOddHeaders() const
{
    if (m_evenAndOddHeaders)
    {
        return *m_evenAndOddHeaders;
    }
    return CT_OnOff::default_instance();
}

bool CT_Settings::has_bookFoldRevPrinting() const
{
    return m_has_bookFoldRevPrinting;
}

CT_OnOff* CT_Settings::mutable_bookFoldRevPrinting()
{
    m_has_bookFoldRevPrinting = true;
    if (!m_bookFoldRevPrinting)
    {
        m_bookFoldRevPrinting = new CT_OnOff();
    }
    return m_bookFoldRevPrinting;
}

const CT_OnOff& CT_Settings::get_bookFoldRevPrinting() const
{
    if (m_bookFoldRevPrinting)
    {
        return *m_bookFoldRevPrinting;
    }
    return CT_OnOff::default_instance();
}

bool CT_Settings::has_bookFoldPrinting() const
{
    return m_has_bookFoldPrinting;
}

CT_OnOff* CT_Settings::mutable_bookFoldPrinting()
{
    m_has_bookFoldPrinting = true;
    if (!m_bookFoldPrinting)
    {
        m_bookFoldPrinting = new CT_OnOff();
    }
    return m_bookFoldPrinting;
}

const CT_OnOff& CT_Settings::get_bookFoldPrinting() const
{
    if (m_bookFoldPrinting)
    {
        return *m_bookFoldPrinting;
    }
    return CT_OnOff::default_instance();
}

bool CT_Settings::has_bookFoldPrintingSheets() const
{
    return m_has_bookFoldPrintingSheets;
}

CT_DecimalNumber* CT_Settings::mutable_bookFoldPrintingSheets()
{
    m_has_bookFoldPrintingSheets = true;
    if (!m_bookFoldPrintingSheets)
    {
        m_bookFoldPrintingSheets = new CT_DecimalNumber();
    }
    return m_bookFoldPrintingSheets;
}

const CT_DecimalNumber& CT_Settings::get_bookFoldPrintingSheets() const
{
    if (m_bookFoldPrintingSheets)
    {
        return *m_bookFoldPrintingSheets;
    }
    return CT_DecimalNumber::default_instance();
}

bool CT_Settings::has_drawingGridHorizontalSpacing() const
{
    return m_has_drawingGridHorizontalSpacing;
}

CT_TwipsMeasure* CT_Settings::mutable_drawingGridHorizontalSpacing()
{
    m_has_drawingGridHorizontalSpacing = true;
    if (!m_drawingGridHorizontalSpacing)
    {
        m_drawingGridHorizontalSpacing = new CT_TwipsMeasure();
    }
    return m_drawingGridHorizontalSpacing;
}

const CT_TwipsMeasure& CT_Settings::get_drawingGridHorizontalSpacing() const
{
    if (m_drawingGridHorizontalSpacing)
    {
        return *m_drawingGridHorizontalSpacing;
    }
    return CT_TwipsMeasure::default_instance();
}

bool CT_Settings::has_drawingGridVerticalSpacing() const
{
    return m_has_drawingGridVerticalSpacing;
}

CT_TwipsMeasure* CT_Settings::mutable_drawingGridVerticalSpacing()
{
    m_has_drawingGridVerticalSpacing = true;
    if (!m_drawingGridVerticalSpacing)
    {
        m_drawingGridVerticalSpacing = new CT_TwipsMeasure();
    }
    return m_drawingGridVerticalSpacing;
}

const CT_TwipsMeasure& CT_Settings::get_drawingGridVerticalSpacing() const
{
    if (m_drawingGridVerticalSpacing)
    {
        return *m_drawingGridVerticalSpacing;
    }
    return CT_TwipsMeasure::default_instance();
}

bool CT_Settings::has_displayHorizontalDrawingGridEvery() const
{
    return m_has_displayHorizontalDrawingGridEvery;
}

CT_DecimalNumber* CT_Settings::mutable_displayHorizontalDrawingGridEvery()
{
    m_has_displayHorizontalDrawingGridEvery = true;
    if (!m_displayHorizontalDrawingGridEvery)
    {
        m_displayHorizontalDrawingGridEvery = new CT_DecimalNumber();
    }
    return m_displayHorizontalDrawingGridEvery;
}

const CT_DecimalNumber& CT_Settings::get_displayHorizontalDrawingGridEvery() const
{
    if (m_displayHorizontalDrawingGridEvery)
    {
        return *m_displayHorizontalDrawingGridEvery;
    }
    return CT_DecimalNumber::default_instance();
}

bool CT_Settings::has_displayVerticalDrawingGridEvery() const
{
    return m_has_displayVerticalDrawingGridEvery;
}

CT_DecimalNumber* CT_Settings::mutable_displayVerticalDrawingGridEvery()
{
    m_has_displayVerticalDrawingGridEvery = true;
    if (!m_displayVerticalDrawingGridEvery)
    {
        m_displayVerticalDrawingGridEvery = new CT_DecimalNumber();
    }
    return m_displayVerticalDrawingGridEvery;
}

const CT_DecimalNumber& CT_Settings::get_displayVerticalDrawingGridEvery() const
{
    if (m_displayVerticalDrawingGridEvery)
    {
        return *m_displayVerticalDrawingGridEvery;
    }
    return CT_DecimalNumber::default_instance();
}

bool CT_Settings::has_doNotUseMarginsForDrawingGridOrigin() const
{
    return m_has_doNotUseMarginsForDrawingGridOrigin;
}

CT_OnOff* CT_Settings::mutable_doNotUseMarginsForDrawingGridOrigin()
{
    m_has_doNotUseMarginsForDrawingGridOrigin = true;
    if (!m_doNotUseMarginsForDrawingGridOrigin)
    {
        m_doNotUseMarginsForDrawingGridOrigin = new CT_OnOff();
    }
    return m_doNotUseMarginsForDrawingGridOrigin;
}

const CT_OnOff& CT_Settings::get_doNotUseMarginsForDrawingGridOrigin() const
{
    if (m_doNotUseMarginsForDrawingGridOrigin)
    {
        return *m_doNotUseMarginsForDrawingGridOrigin;
    }
    return CT_OnOff::default_instance();
}

bool CT_Settings::has_drawingGridHorizontalOrigin() const
{
    return m_has_drawingGridHorizontalOrigin;
}

CT_TwipsMeasure* CT_Settings::mutable_drawingGridHorizontalOrigin()
{
    m_has_drawingGridHorizontalOrigin = true;
    if (!m_drawingGridHorizontalOrigin)
    {
        m_drawingGridHorizontalOrigin = new CT_TwipsMeasure();
    }
    return m_drawingGridHorizontalOrigin;
}

const CT_TwipsMeasure& CT_Settings::get_drawingGridHorizontalOrigin() const
{
    if (m_drawingGridHorizontalOrigin)
    {
        return *m_drawingGridHorizontalOrigin;
    }
    return CT_TwipsMeasure::default_instance();
}

bool CT_Settings::has_drawingGridVerticalOrigin() const
{
    return m_has_drawingGridVerticalOrigin;
}

CT_TwipsMeasure* CT_Settings::mutable_drawingGridVerticalOrigin()
{
    m_has_drawingGridVerticalOrigin = true;
    if (!m_drawingGridVerticalOrigin)
    {
        m_drawingGridVerticalOrigin = new CT_TwipsMeasure();
    }
    return m_drawingGridVerticalOrigin;
}

const CT_TwipsMeasure& CT_Settings::get_drawingGridVerticalOrigin() const
{
    if (m_drawingGridVerticalOrigin)
    {
        return *m_drawingGridVerticalOrigin;
    }
    return CT_TwipsMeasure::default_instance();
}

bool CT_Settings::has_doNotShadeFormData() const
{
    return m_has_doNotShadeFormData;
}

CT_OnOff* CT_Settings::mutable_doNotShadeFormData()
{
    m_has_doNotShadeFormData = true;
    if (!m_doNotShadeFormData)
    {
        m_doNotShadeFormData = new CT_OnOff();
    }
    return m_doNotShadeFormData;
}

const CT_OnOff& CT_Settings::get_doNotShadeFormData() const
{
    if (m_doNotShadeFormData)
    {
        return *m_doNotShadeFormData;
    }
    return CT_OnOff::default_instance();
}

bool CT_Settings::has_noPunctuationKerning() const
{
    return m_has_noPunctuationKerning;
}

CT_OnOff* CT_Settings::mutable_noPunctuationKerning()
{
    m_has_noPunctuationKerning = true;
    if (!m_noPunctuationKerning)
    {
        m_noPunctuationKerning = new CT_OnOff();
    }
    return m_noPunctuationKerning;
}

const CT_OnOff& CT_Settings::get_noPunctuationKerning() const
{
    if (m_noPunctuationKerning)
    {
        return *m_noPunctuationKerning;
    }
    return CT_OnOff::default_instance();
}

bool CT_Settings::has_characterSpacingControl() const
{
    return m_has_characterSpacingControl;
}

CT_CharacterSpacing* CT_Settings::mutable_characterSpacingControl()
{
    m_has_characterSpacingControl = true;
    if (!m_characterSpacingControl)
    {
        m_characterSpacingControl = new CT_CharacterSpacing();
    }
    return m_characterSpacingControl;
}

const CT_CharacterSpacing& CT_Settings::get_characterSpacingControl() const
{
    if (m_characterSpacingControl)
    {
        return *m_characterSpacingControl;
    }
    return CT_CharacterSpacing::default_instance();
}

bool CT_Settings::has_printTwoOnOne() const
{
    return m_has_printTwoOnOne;
}

CT_OnOff* CT_Settings::mutable_printTwoOnOne()
{
    m_has_printTwoOnOne = true;
    if (!m_printTwoOnOne)
    {
        m_printTwoOnOne = new CT_OnOff();
    }
    return m_printTwoOnOne;
}

const CT_OnOff& CT_Settings::get_printTwoOnOne() const
{
    if (m_printTwoOnOne)
    {
        return *m_printTwoOnOne;
    }
    return CT_OnOff::default_instance();
}

bool CT_Settings::has_strictFirstAndLastChars() const
{
    return m_has_strictFirstAndLastChars;
}

CT_OnOff* CT_Settings::mutable_strictFirstAndLastChars()
{
    m_has_strictFirstAndLastChars = true;
    if (!m_strictFirstAndLastChars)
    {
        m_strictFirstAndLastChars = new CT_OnOff();
    }
    return m_strictFirstAndLastChars;
}

const CT_OnOff& CT_Settings::get_strictFirstAndLastChars() const
{
    if (m_strictFirstAndLastChars)
    {
        return *m_strictFirstAndLastChars;
    }
    return CT_OnOff::default_instance();
}

bool CT_Settings::has_noLineBreaksAfter() const
{
    return m_has_noLineBreaksAfter;
}

CT_Kinsoku* CT_Settings::mutable_noLineBreaksAfter()
{
    m_has_noLineBreaksAfter = true;
    if (!m_noLineBreaksAfter)
    {
        m_noLineBreaksAfter = new CT_Kinsoku();
    }
    return m_noLineBreaksAfter;
}

const CT_Kinsoku& CT_Settings::get_noLineBreaksAfter() const
{
    if (m_noLineBreaksAfter)
    {
        return *m_noLineBreaksAfter;
    }
    return CT_Kinsoku::default_instance();
}

bool CT_Settings::has_noLineBreaksBefore() const
{
    return m_has_noLineBreaksBefore;
}

CT_Kinsoku* CT_Settings::mutable_noLineBreaksBefore()
{
    m_has_noLineBreaksBefore = true;
    if (!m_noLineBreaksBefore)
    {
        m_noLineBreaksBefore = new CT_Kinsoku();
    }
    return m_noLineBreaksBefore;
}

const CT_Kinsoku& CT_Settings::get_noLineBreaksBefore() const
{
    if (m_noLineBreaksBefore)
    {
        return *m_noLineBreaksBefore;
    }
    return CT_Kinsoku::default_instance();
}

bool CT_Settings::has_savePreviewPicture() const
{
    return m_has_savePreviewPicture;
}

CT_OnOff* CT_Settings::mutable_savePreviewPicture()
{
    m_has_savePreviewPicture = true;
    if (!m_savePreviewPicture)
    {
        m_savePreviewPicture = new CT_OnOff();
    }
    return m_savePreviewPicture;
}

const CT_OnOff& CT_Settings::get_savePreviewPicture() const
{
    if (m_savePreviewPicture)
    {
        return *m_savePreviewPicture;
    }
    return CT_OnOff::default_instance();
}

bool CT_Settings::has_doNotValidateAgainstSchema() const
{
    return m_has_doNotValidateAgainstSchema;
}

CT_OnOff* CT_Settings::mutable_doNotValidateAgainstSchema()
{
    m_has_doNotValidateAgainstSchema = true;
    if (!m_doNotValidateAgainstSchema)
    {
        m_doNotValidateAgainstSchema = new CT_OnOff();
    }
    return m_doNotValidateAgainstSchema;
}

const CT_OnOff& CT_Settings::get_doNotValidateAgainstSchema() const
{
    if (m_doNotValidateAgainstSchema)
    {
        return *m_doNotValidateAgainstSchema;
    }
    return CT_OnOff::default_instance();
}

bool CT_Settings::has_saveInvalidXml() const
{
    return m_has_saveInvalidXml;
}

CT_OnOff* CT_Settings::mutable_saveInvalidXml()
{
    m_has_saveInvalidXml = true;
    if (!m_saveInvalidXml)
    {
        m_saveInvalidXml = new CT_OnOff();
    }
    return m_saveInvalidXml;
}

const CT_OnOff& CT_Settings::get_saveInvalidXml() const
{
    if (m_saveInvalidXml)
    {
        return *m_saveInvalidXml;
    }
    return CT_OnOff::default_instance();
}

bool CT_Settings::has_ignoreMixedContent() const
{
    return m_has_ignoreMixedContent;
}

CT_OnOff* CT_Settings::mutable_ignoreMixedContent()
{
    m_has_ignoreMixedContent = true;
    if (!m_ignoreMixedContent)
    {
        m_ignoreMixedContent = new CT_OnOff();
    }
    return m_ignoreMixedContent;
}

const CT_OnOff& CT_Settings::get_ignoreMixedContent() const
{
    if (m_ignoreMixedContent)
    {
        return *m_ignoreMixedContent;
    }
    return CT_OnOff::default_instance();
}

bool CT_Settings::has_alwaysShowPlaceholderText() const
{
    return m_has_alwaysShowPlaceholderText;
}

CT_OnOff* CT_Settings::mutable_alwaysShowPlaceholderText()
{
    m_has_alwaysShowPlaceholderText = true;
    if (!m_alwaysShowPlaceholderText)
    {
        m_alwaysShowPlaceholderText = new CT_OnOff();
    }
    return m_alwaysShowPlaceholderText;
}

const CT_OnOff& CT_Settings::get_alwaysShowPlaceholderText() const
{
    if (m_alwaysShowPlaceholderText)
    {
        return *m_alwaysShowPlaceholderText;
    }
    return CT_OnOff::default_instance();
}

bool CT_Settings::has_doNotDemarcateInvalidXml() const
{
    return m_has_doNotDemarcateInvalidXml;
}

CT_OnOff* CT_Settings::mutable_doNotDemarcateInvalidXml()
{
    m_has_doNotDemarcateInvalidXml = true;
    if (!m_doNotDemarcateInvalidXml)
    {
        m_doNotDemarcateInvalidXml = new CT_OnOff();
    }
    return m_doNotDemarcateInvalidXml;
}

const CT_OnOff& CT_Settings::get_doNotDemarcateInvalidXml() const
{
    if (m_doNotDemarcateInvalidXml)
    {
        return *m_doNotDemarcateInvalidXml;
    }
    return CT_OnOff::default_instance();
}

bool CT_Settings::has_saveXmlDataOnly() const
{
    return m_has_saveXmlDataOnly;
}

CT_OnOff* CT_Settings::mutable_saveXmlDataOnly()
{
    m_has_saveXmlDataOnly = true;
    if (!m_saveXmlDataOnly)
    {
        m_saveXmlDataOnly = new CT_OnOff();
    }
    return m_saveXmlDataOnly;
}

const CT_OnOff& CT_Settings::get_saveXmlDataOnly() const
{
    if (m_saveXmlDataOnly)
    {
        return *m_saveXmlDataOnly;
    }
    return CT_OnOff::default_instance();
}

bool CT_Settings::has_useXSLTWhenSaving() const
{
    return m_has_useXSLTWhenSaving;
}

CT_OnOff* CT_Settings::mutable_useXSLTWhenSaving()
{
    m_has_useXSLTWhenSaving = true;
    if (!m_useXSLTWhenSaving)
    {
        m_useXSLTWhenSaving = new CT_OnOff();
    }
    return m_useXSLTWhenSaving;
}

const CT_OnOff& CT_Settings::get_useXSLTWhenSaving() const
{
    if (m_useXSLTWhenSaving)
    {
        return *m_useXSLTWhenSaving;
    }
    return CT_OnOff::default_instance();
}

bool CT_Settings::has_saveThroughXslt() const
{
    return m_has_saveThroughXslt;
}

CT_SaveThroughXslt* CT_Settings::mutable_saveThroughXslt()
{
    m_has_saveThroughXslt = true;
    if (!m_saveThroughXslt)
    {
        m_saveThroughXslt = new CT_SaveThroughXslt();
    }
    return m_saveThroughXslt;
}

const CT_SaveThroughXslt& CT_Settings::get_saveThroughXslt() const
{
    if (m_saveThroughXslt)
    {
        return *m_saveThroughXslt;
    }
    return CT_SaveThroughXslt::default_instance();
}

bool CT_Settings::has_showXMLTags() const
{
    return m_has_showXMLTags;
}

CT_OnOff* CT_Settings::mutable_showXMLTags()
{
    m_has_showXMLTags = true;
    if (!m_showXMLTags)
    {
        m_showXMLTags = new CT_OnOff();
    }
    return m_showXMLTags;
}

const CT_OnOff& CT_Settings::get_showXMLTags() const
{
    if (m_showXMLTags)
    {
        return *m_showXMLTags;
    }
    return CT_OnOff::default_instance();
}

bool CT_Settings::has_alwaysMergeEmptyNamespace() const
{
    return m_has_alwaysMergeEmptyNamespace;
}

CT_OnOff* CT_Settings::mutable_alwaysMergeEmptyNamespace()
{
    m_has_alwaysMergeEmptyNamespace = true;
    if (!m_alwaysMergeEmptyNamespace)
    {
        m_alwaysMergeEmptyNamespace = new CT_OnOff();
    }
    return m_alwaysMergeEmptyNamespace;
}

const CT_OnOff& CT_Settings::get_alwaysMergeEmptyNamespace() const
{
    if (m_alwaysMergeEmptyNamespace)
    {
        return *m_alwaysMergeEmptyNamespace;
    }
    return CT_OnOff::default_instance();
}

bool CT_Settings::has_updateFields() const
{
    return m_has_updateFields;
}

CT_OnOff* CT_Settings::mutable_updateFields()
{
    m_has_updateFields = true;
    if (!m_updateFields)
    {
        m_updateFields = new CT_OnOff();
    }
    return m_updateFields;
}

const CT_OnOff& CT_Settings::get_updateFields() const
{
    if (m_updateFields)
    {
        return *m_updateFields;
    }
    return CT_OnOff::default_instance();
}

bool CT_Settings::has_hdrShapeDefaults() const
{
    return m_has_hdrShapeDefaults;
}

CT_ShapeDefaults* CT_Settings::mutable_hdrShapeDefaults()
{
    m_has_hdrShapeDefaults = true;
    if (!m_hdrShapeDefaults)
    {
        m_hdrShapeDefaults = new CT_ShapeDefaults();
    }
    return m_hdrShapeDefaults;
}

const CT_ShapeDefaults& CT_Settings::get_hdrShapeDefaults() const
{
    if (m_hdrShapeDefaults)
    {
        return *m_hdrShapeDefaults;
    }
    return CT_ShapeDefaults::default_instance();
}

bool CT_Settings::has_footnotePr() const
{
    return m_has_footnotePr;
}

CT_FtnDocProps* CT_Settings::mutable_footnotePr()
{
    m_has_footnotePr = true;
    if (!m_footnotePr)
    {
        m_footnotePr = new CT_FtnDocProps();
    }
    return m_footnotePr;
}

const CT_FtnDocProps& CT_Settings::get_footnotePr() const
{
    if (m_footnotePr)
    {
        return *m_footnotePr;
    }
    return CT_FtnDocProps::default_instance();
}

bool CT_Settings::has_endnotePr() const
{
    return m_has_endnotePr;
}

CT_EdnDocProps* CT_Settings::mutable_endnotePr()
{
    m_has_endnotePr = true;
    if (!m_endnotePr)
    {
        m_endnotePr = new CT_EdnDocProps();
    }
    return m_endnotePr;
}

const CT_EdnDocProps& CT_Settings::get_endnotePr() const
{
    if (m_endnotePr)
    {
        return *m_endnotePr;
    }
    return CT_EdnDocProps::default_instance();
}

bool CT_Settings::has_compat() const
{
    return m_has_compat;
}

CT_Compat* CT_Settings::mutable_compat()
{
    m_has_compat = true;
    if (!m_compat)
    {
        m_compat = new CT_Compat();
    }
    return m_compat;
}

const CT_Compat& CT_Settings::get_compat() const
{
    if (m_compat)
    {
        return *m_compat;
    }
    return CT_Compat::default_instance();
}

bool CT_Settings::has_docVars() const
{
    return m_has_docVars;
}

CT_DocVars* CT_Settings::mutable_docVars()
{
    m_has_docVars = true;
    if (!m_docVars)
    {
        m_docVars = new CT_DocVars();
    }
    return m_docVars;
}

const CT_DocVars& CT_Settings::get_docVars() const
{
    if (m_docVars)
    {
        return *m_docVars;
    }
    return CT_DocVars::default_instance();
}

bool CT_Settings::has_rsids() const
{
    return m_has_rsids;
}

CT_DocRsids* CT_Settings::mutable_rsids()
{
    m_has_rsids = true;
    if (!m_rsids)
    {
        m_rsids = new CT_DocRsids();
    }
    return m_rsids;
}

const CT_DocRsids& CT_Settings::get_rsids() const
{
    if (m_rsids)
    {
        return *m_rsids;
    }
    return CT_DocRsids::default_instance();
}

bool CT_Settings::has_m_mathPr() const
{
    return m_has_m_mathPr;
}

ns_m::CT_MathPr* CT_Settings::mutable_m_mathPr()
{
    m_has_m_mathPr = true;
    if (!m_m_mathPr)
    {
        m_m_mathPr = new ns_m::CT_MathPr();
    }
    return m_m_mathPr;
}

const ns_m::CT_MathPr& CT_Settings::get_m_mathPr() const
{
    if (m_m_mathPr)
    {
        return *m_m_mathPr;
    }
    return ns_m::CT_MathPr::default_instance();
}

CT_String* CT_Settings::add_attachedSchema()
{
    ChildGroup_2 *pChildGroup = new ChildGroup_2();
    CT_String* pNewChild = pChildGroup->mutable_attachedSchema();
    m_childGroupList_2.push_back(pChildGroup);
    return pNewChild;
}

bool CT_Settings::has_themeFontLang() const
{
    return m_has_themeFontLang;
}

CT_Language* CT_Settings::mutable_themeFontLang()
{
    m_has_themeFontLang = true;
    if (!m_themeFontLang)
    {
        m_themeFontLang = new CT_Language();
    }
    return m_themeFontLang;
}

const CT_Language& CT_Settings::get_themeFontLang() const
{
    if (m_themeFontLang)
    {
        return *m_themeFontLang;
    }
    return CT_Language::default_instance();
}

bool CT_Settings::has_clrSchemeMapping() const
{
    return m_has_clrSchemeMapping;
}

CT_ColorSchemeMapping* CT_Settings::mutable_clrSchemeMapping()
{
    m_has_clrSchemeMapping = true;
    if (!m_clrSchemeMapping)
    {
        m_clrSchemeMapping = new CT_ColorSchemeMapping();
    }
    return m_clrSchemeMapping;
}

const CT_ColorSchemeMapping& CT_Settings::get_clrSchemeMapping() const
{
    if (m_clrSchemeMapping)
    {
        return *m_clrSchemeMapping;
    }
    return CT_ColorSchemeMapping::default_instance();
}

bool CT_Settings::has_doNotIncludeSubdocsInStats() const
{
    return m_has_doNotIncludeSubdocsInStats;
}

CT_OnOff* CT_Settings::mutable_doNotIncludeSubdocsInStats()
{
    m_has_doNotIncludeSubdocsInStats = true;
    if (!m_doNotIncludeSubdocsInStats)
    {
        m_doNotIncludeSubdocsInStats = new CT_OnOff();
    }
    return m_doNotIncludeSubdocsInStats;
}

const CT_OnOff& CT_Settings::get_doNotIncludeSubdocsInStats() const
{
    if (m_doNotIncludeSubdocsInStats)
    {
        return *m_doNotIncludeSubdocsInStats;
    }
    return CT_OnOff::default_instance();
}

bool CT_Settings::has_doNotAutoCompressPictures() const
{
    return m_has_doNotAutoCompressPictures;
}

CT_OnOff* CT_Settings::mutable_doNotAutoCompressPictures()
{
    m_has_doNotAutoCompressPictures = true;
    if (!m_doNotAutoCompressPictures)
    {
        m_doNotAutoCompressPictures = new CT_OnOff();
    }
    return m_doNotAutoCompressPictures;
}

const CT_OnOff& CT_Settings::get_doNotAutoCompressPictures() const
{
    if (m_doNotAutoCompressPictures)
    {
        return *m_doNotAutoCompressPictures;
    }
    return CT_OnOff::default_instance();
}

bool CT_Settings::has_forceUpgrade() const
{
    return m_has_forceUpgrade;
}

CT_Empty* CT_Settings::mutable_forceUpgrade()
{
    m_has_forceUpgrade = true;
    if (!m_forceUpgrade)
    {
        m_forceUpgrade = new CT_Empty();
    }
    return m_forceUpgrade;
}

const CT_Empty& CT_Settings::get_forceUpgrade() const
{
    if (m_forceUpgrade)
    {
        return *m_forceUpgrade;
    }
    return CT_Empty::default_instance();
}

bool CT_Settings::has_captions() const
{
    return m_has_captions;
}

CT_Captions* CT_Settings::mutable_captions()
{
    m_has_captions = true;
    if (!m_captions)
    {
        m_captions = new CT_Captions();
    }
    return m_captions;
}

const CT_Captions& CT_Settings::get_captions() const
{
    if (m_captions)
    {
        return *m_captions;
    }
    return CT_Captions::default_instance();
}

bool CT_Settings::has_readModeInkLockDown() const
{
    return m_has_readModeInkLockDown;
}

CT_ReadingModeInkLockDown* CT_Settings::mutable_readModeInkLockDown()
{
    m_has_readModeInkLockDown = true;
    if (!m_readModeInkLockDown)
    {
        m_readModeInkLockDown = new CT_ReadingModeInkLockDown();
    }
    return m_readModeInkLockDown;
}

const CT_ReadingModeInkLockDown& CT_Settings::get_readModeInkLockDown() const
{
    if (m_readModeInkLockDown)
    {
        return *m_readModeInkLockDown;
    }
    return CT_ReadingModeInkLockDown::default_instance();
}

CT_SmartTagType* CT_Settings::add_smartTagType()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_SmartTagType* pNewChild = pChildGroup->mutable_smartTagType();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

bool CT_Settings::has_sl_schemaLibrary() const
{
    return m_has_sl_schemaLibrary;
}

ns_sl::CT_SchemaLibrary* CT_Settings::mutable_sl_schemaLibrary()
{
    m_has_sl_schemaLibrary = true;
    if (!m_sl_schemaLibrary)
    {
        m_sl_schemaLibrary = new ns_sl::CT_SchemaLibrary();
    }
    return m_sl_schemaLibrary;
}

const ns_sl::CT_SchemaLibrary& CT_Settings::get_sl_schemaLibrary() const
{
    if (m_sl_schemaLibrary)
    {
        return *m_sl_schemaLibrary;
    }
    return ns_sl::CT_SchemaLibrary::default_instance();
}

bool CT_Settings::has_shapeDefaults() const
{
    return m_has_shapeDefaults;
}

CT_ShapeDefaults* CT_Settings::mutable_shapeDefaults()
{
    m_has_shapeDefaults = true;
    if (!m_shapeDefaults)
    {
        m_shapeDefaults = new CT_ShapeDefaults();
    }
    return m_shapeDefaults;
}

const CT_ShapeDefaults& CT_Settings::get_shapeDefaults() const
{
    if (m_shapeDefaults)
    {
        return *m_shapeDefaults;
    }
    return CT_ShapeDefaults::default_instance();
}

bool CT_Settings::has_doNotEmbedSmartTags() const
{
    return m_has_doNotEmbedSmartTags;
}

CT_OnOff* CT_Settings::mutable_doNotEmbedSmartTags()
{
    m_has_doNotEmbedSmartTags = true;
    if (!m_doNotEmbedSmartTags)
    {
        m_doNotEmbedSmartTags = new CT_OnOff();
    }
    return m_doNotEmbedSmartTags;
}

const CT_OnOff& CT_Settings::get_doNotEmbedSmartTags() const
{
    if (m_doNotEmbedSmartTags)
    {
        return *m_doNotEmbedSmartTags;
    }
    return CT_OnOff::default_instance();
}

bool CT_Settings::has_decimalSymbol() const
{
    return m_has_decimalSymbol;
}

CT_String* CT_Settings::mutable_decimalSymbol()
{
    m_has_decimalSymbol = true;
    if (!m_decimalSymbol)
    {
        m_decimalSymbol = new CT_String();
    }
    return m_decimalSymbol;
}

const CT_String& CT_Settings::get_decimalSymbol() const
{
    if (m_decimalSymbol)
    {
        return *m_decimalSymbol;
    }
    return CT_String::default_instance();
}

bool CT_Settings::has_listSeparator() const
{
    return m_has_listSeparator;
}

CT_String* CT_Settings::mutable_listSeparator()
{
    m_has_listSeparator = true;
    if (!m_listSeparator)
    {
        m_listSeparator = new CT_String();
    }
    return m_listSeparator;
}

const CT_String& CT_Settings::get_listSeparator() const
{
    if (m_listSeparator)
    {
        return *m_listSeparator;
    }
    return CT_String::default_instance();
}

void CT_Settings::clear()
{
    m_has_writeProtection = false;

    if (m_writeProtection)
    {
        delete m_writeProtection;
        m_writeProtection = NULL;
    }


    m_has_view = false;

    if (m_view)
    {
        delete m_view;
        m_view = NULL;
    }


    m_has_zoom = false;

    if (m_zoom)
    {
        delete m_zoom;
        m_zoom = NULL;
    }


    m_has_removePersonalInformation = false;

    if (m_removePersonalInformation)
    {
        delete m_removePersonalInformation;
        m_removePersonalInformation = NULL;
    }


    m_has_removeDateAndTime = false;

    if (m_removeDateAndTime)
    {
        delete m_removeDateAndTime;
        m_removeDateAndTime = NULL;
    }


    m_has_doNotDisplayPageBoundaries = false;

    if (m_doNotDisplayPageBoundaries)
    {
        delete m_doNotDisplayPageBoundaries;
        m_doNotDisplayPageBoundaries = NULL;
    }


    m_has_displayBackgroundShape = false;

    if (m_displayBackgroundShape)
    {
        delete m_displayBackgroundShape;
        m_displayBackgroundShape = NULL;
    }


    m_has_printPostScriptOverText = false;

    if (m_printPostScriptOverText)
    {
        delete m_printPostScriptOverText;
        m_printPostScriptOverText = NULL;
    }


    m_has_printFractionalCharacterWidth = false;

    if (m_printFractionalCharacterWidth)
    {
        delete m_printFractionalCharacterWidth;
        m_printFractionalCharacterWidth = NULL;
    }


    m_has_printFormsData = false;

    if (m_printFormsData)
    {
        delete m_printFormsData;
        m_printFormsData = NULL;
    }


    m_has_embedTrueTypeFonts = false;

    if (m_embedTrueTypeFonts)
    {
        delete m_embedTrueTypeFonts;
        m_embedTrueTypeFonts = NULL;
    }


    m_has_embedSystemFonts = false;

    if (m_embedSystemFonts)
    {
        delete m_embedSystemFonts;
        m_embedSystemFonts = NULL;
    }


    m_has_saveSubsetFonts = false;

    if (m_saveSubsetFonts)
    {
        delete m_saveSubsetFonts;
        m_saveSubsetFonts = NULL;
    }


    m_has_saveFormsData = false;

    if (m_saveFormsData)
    {
        delete m_saveFormsData;
        m_saveFormsData = NULL;
    }


    m_has_mirrorMargins = false;

    if (m_mirrorMargins)
    {
        delete m_mirrorMargins;
        m_mirrorMargins = NULL;
    }


    m_has_alignBordersAndEdges = false;

    if (m_alignBordersAndEdges)
    {
        delete m_alignBordersAndEdges;
        m_alignBordersAndEdges = NULL;
    }


    m_has_bordersDoNotSurroundHeader = false;

    if (m_bordersDoNotSurroundHeader)
    {
        delete m_bordersDoNotSurroundHeader;
        m_bordersDoNotSurroundHeader = NULL;
    }


    m_has_bordersDoNotSurroundFooter = false;

    if (m_bordersDoNotSurroundFooter)
    {
        delete m_bordersDoNotSurroundFooter;
        m_bordersDoNotSurroundFooter = NULL;
    }


    m_has_gutterAtTop = false;

    if (m_gutterAtTop)
    {
        delete m_gutterAtTop;
        m_gutterAtTop = NULL;
    }


    m_has_hideSpellingErrors = false;

    if (m_hideSpellingErrors)
    {
        delete m_hideSpellingErrors;
        m_hideSpellingErrors = NULL;
    }


    m_has_hideGrammaticalErrors = false;

    if (m_hideGrammaticalErrors)
    {
        delete m_hideGrammaticalErrors;
        m_hideGrammaticalErrors = NULL;
    }


    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }

    m_has_proofState = false;

    if (m_proofState)
    {
        delete m_proofState;
        m_proofState = NULL;
    }


    m_has_formsDesign = false;

    if (m_formsDesign)
    {
        delete m_formsDesign;
        m_formsDesign = NULL;
    }


    m_has_attachedTemplate = false;

    if (m_attachedTemplate)
    {
        delete m_attachedTemplate;
        m_attachedTemplate = NULL;
    }


    m_has_linkStyles = false;

    if (m_linkStyles)
    {
        delete m_linkStyles;
        m_linkStyles = NULL;
    }


    m_has_stylePaneFormatFilter = false;

    if (m_stylePaneFormatFilter)
    {
        delete m_stylePaneFormatFilter;
        m_stylePaneFormatFilter = NULL;
    }


    m_has_stylePaneSortMethod = false;

    if (m_stylePaneSortMethod)
    {
        delete m_stylePaneSortMethod;
        m_stylePaneSortMethod = NULL;
    }


    m_has_documentType = false;

    if (m_documentType)
    {
        delete m_documentType;
        m_documentType = NULL;
    }


    m_has_mailMerge = false;

    if (m_mailMerge)
    {
        delete m_mailMerge;
        m_mailMerge = NULL;
    }


    m_has_revisionView = false;

    if (m_revisionView)
    {
        delete m_revisionView;
        m_revisionView = NULL;
    }


    m_has_trackRevisions = false;

    if (m_trackRevisions)
    {
        delete m_trackRevisions;
        m_trackRevisions = NULL;
    }


    m_has_doNotTrackMoves = false;

    if (m_doNotTrackMoves)
    {
        delete m_doNotTrackMoves;
        m_doNotTrackMoves = NULL;
    }


    m_has_doNotTrackFormatting = false;

    if (m_doNotTrackFormatting)
    {
        delete m_doNotTrackFormatting;
        m_doNotTrackFormatting = NULL;
    }


    m_has_documentProtection = false;

    if (m_documentProtection)
    {
        delete m_documentProtection;
        m_documentProtection = NULL;
    }


    m_has_autoFormatOverride = false;

    if (m_autoFormatOverride)
    {
        delete m_autoFormatOverride;
        m_autoFormatOverride = NULL;
    }


    m_has_styleLockTheme = false;

    if (m_styleLockTheme)
    {
        delete m_styleLockTheme;
        m_styleLockTheme = NULL;
    }


    m_has_styleLockQFSet = false;

    if (m_styleLockQFSet)
    {
        delete m_styleLockQFSet;
        m_styleLockQFSet = NULL;
    }


    m_has_defaultTabStop = false;

    if (m_defaultTabStop)
    {
        delete m_defaultTabStop;
        m_defaultTabStop = NULL;
    }


    m_has_autoHyphenation = false;

    if (m_autoHyphenation)
    {
        delete m_autoHyphenation;
        m_autoHyphenation = NULL;
    }


    m_has_consecutiveHyphenLimit = false;

    if (m_consecutiveHyphenLimit)
    {
        delete m_consecutiveHyphenLimit;
        m_consecutiveHyphenLimit = NULL;
    }


    m_has_hyphenationZone = false;

    if (m_hyphenationZone)
    {
        delete m_hyphenationZone;
        m_hyphenationZone = NULL;
    }


    m_has_doNotHyphenateCaps = false;

    if (m_doNotHyphenateCaps)
    {
        delete m_doNotHyphenateCaps;
        m_doNotHyphenateCaps = NULL;
    }


    m_has_showEnvelope = false;

    if (m_showEnvelope)
    {
        delete m_showEnvelope;
        m_showEnvelope = NULL;
    }


    m_has_summaryLength = false;

    if (m_summaryLength)
    {
        delete m_summaryLength;
        m_summaryLength = NULL;
    }


    m_has_clickAndTypeStyle = false;

    if (m_clickAndTypeStyle)
    {
        delete m_clickAndTypeStyle;
        m_clickAndTypeStyle = NULL;
    }


    m_has_defaultTableStyle = false;

    if (m_defaultTableStyle)
    {
        delete m_defaultTableStyle;
        m_defaultTableStyle = NULL;
    }


    m_has_evenAndOddHeaders = false;

    if (m_evenAndOddHeaders)
    {
        delete m_evenAndOddHeaders;
        m_evenAndOddHeaders = NULL;
    }


    m_has_bookFoldRevPrinting = false;

    if (m_bookFoldRevPrinting)
    {
        delete m_bookFoldRevPrinting;
        m_bookFoldRevPrinting = NULL;
    }


    m_has_bookFoldPrinting = false;

    if (m_bookFoldPrinting)
    {
        delete m_bookFoldPrinting;
        m_bookFoldPrinting = NULL;
    }


    m_has_bookFoldPrintingSheets = false;

    if (m_bookFoldPrintingSheets)
    {
        delete m_bookFoldPrintingSheets;
        m_bookFoldPrintingSheets = NULL;
    }


    m_has_drawingGridHorizontalSpacing = false;

    if (m_drawingGridHorizontalSpacing)
    {
        delete m_drawingGridHorizontalSpacing;
        m_drawingGridHorizontalSpacing = NULL;
    }


    m_has_drawingGridVerticalSpacing = false;

    if (m_drawingGridVerticalSpacing)
    {
        delete m_drawingGridVerticalSpacing;
        m_drawingGridVerticalSpacing = NULL;
    }


    m_has_displayHorizontalDrawingGridEvery = false;

    if (m_displayHorizontalDrawingGridEvery)
    {
        delete m_displayHorizontalDrawingGridEvery;
        m_displayHorizontalDrawingGridEvery = NULL;
    }


    m_has_displayVerticalDrawingGridEvery = false;

    if (m_displayVerticalDrawingGridEvery)
    {
        delete m_displayVerticalDrawingGridEvery;
        m_displayVerticalDrawingGridEvery = NULL;
    }


    m_has_doNotUseMarginsForDrawingGridOrigin = false;

    if (m_doNotUseMarginsForDrawingGridOrigin)
    {
        delete m_doNotUseMarginsForDrawingGridOrigin;
        m_doNotUseMarginsForDrawingGridOrigin = NULL;
    }


    m_has_drawingGridHorizontalOrigin = false;

    if (m_drawingGridHorizontalOrigin)
    {
        delete m_drawingGridHorizontalOrigin;
        m_drawingGridHorizontalOrigin = NULL;
    }


    m_has_drawingGridVerticalOrigin = false;

    if (m_drawingGridVerticalOrigin)
    {
        delete m_drawingGridVerticalOrigin;
        m_drawingGridVerticalOrigin = NULL;
    }


    m_has_doNotShadeFormData = false;

    if (m_doNotShadeFormData)
    {
        delete m_doNotShadeFormData;
        m_doNotShadeFormData = NULL;
    }


    m_has_noPunctuationKerning = false;

    if (m_noPunctuationKerning)
    {
        delete m_noPunctuationKerning;
        m_noPunctuationKerning = NULL;
    }


    m_has_characterSpacingControl = false;

    if (m_characterSpacingControl)
    {
        delete m_characterSpacingControl;
        m_characterSpacingControl = NULL;
    }


    m_has_printTwoOnOne = false;

    if (m_printTwoOnOne)
    {
        delete m_printTwoOnOne;
        m_printTwoOnOne = NULL;
    }


    m_has_strictFirstAndLastChars = false;

    if (m_strictFirstAndLastChars)
    {
        delete m_strictFirstAndLastChars;
        m_strictFirstAndLastChars = NULL;
    }


    m_has_noLineBreaksAfter = false;

    if (m_noLineBreaksAfter)
    {
        delete m_noLineBreaksAfter;
        m_noLineBreaksAfter = NULL;
    }


    m_has_noLineBreaksBefore = false;

    if (m_noLineBreaksBefore)
    {
        delete m_noLineBreaksBefore;
        m_noLineBreaksBefore = NULL;
    }


    m_has_savePreviewPicture = false;

    if (m_savePreviewPicture)
    {
        delete m_savePreviewPicture;
        m_savePreviewPicture = NULL;
    }


    m_has_doNotValidateAgainstSchema = false;

    if (m_doNotValidateAgainstSchema)
    {
        delete m_doNotValidateAgainstSchema;
        m_doNotValidateAgainstSchema = NULL;
    }


    m_has_saveInvalidXml = false;

    if (m_saveInvalidXml)
    {
        delete m_saveInvalidXml;
        m_saveInvalidXml = NULL;
    }


    m_has_ignoreMixedContent = false;

    if (m_ignoreMixedContent)
    {
        delete m_ignoreMixedContent;
        m_ignoreMixedContent = NULL;
    }


    m_has_alwaysShowPlaceholderText = false;

    if (m_alwaysShowPlaceholderText)
    {
        delete m_alwaysShowPlaceholderText;
        m_alwaysShowPlaceholderText = NULL;
    }


    m_has_doNotDemarcateInvalidXml = false;

    if (m_doNotDemarcateInvalidXml)
    {
        delete m_doNotDemarcateInvalidXml;
        m_doNotDemarcateInvalidXml = NULL;
    }


    m_has_saveXmlDataOnly = false;

    if (m_saveXmlDataOnly)
    {
        delete m_saveXmlDataOnly;
        m_saveXmlDataOnly = NULL;
    }


    m_has_useXSLTWhenSaving = false;

    if (m_useXSLTWhenSaving)
    {
        delete m_useXSLTWhenSaving;
        m_useXSLTWhenSaving = NULL;
    }


    m_has_saveThroughXslt = false;

    if (m_saveThroughXslt)
    {
        delete m_saveThroughXslt;
        m_saveThroughXslt = NULL;
    }


    m_has_showXMLTags = false;

    if (m_showXMLTags)
    {
        delete m_showXMLTags;
        m_showXMLTags = NULL;
    }


    m_has_alwaysMergeEmptyNamespace = false;

    if (m_alwaysMergeEmptyNamespace)
    {
        delete m_alwaysMergeEmptyNamespace;
        m_alwaysMergeEmptyNamespace = NULL;
    }


    m_has_updateFields = false;

    if (m_updateFields)
    {
        delete m_updateFields;
        m_updateFields = NULL;
    }


    m_has_hdrShapeDefaults = false;

    if (m_hdrShapeDefaults)
    {
        delete m_hdrShapeDefaults;
        m_hdrShapeDefaults = NULL;
    }


    m_has_footnotePr = false;

    if (m_footnotePr)
    {
        delete m_footnotePr;
        m_footnotePr = NULL;
    }


    m_has_endnotePr = false;

    if (m_endnotePr)
    {
        delete m_endnotePr;
        m_endnotePr = NULL;
    }


    m_has_compat = false;

    if (m_compat)
    {
        delete m_compat;
        m_compat = NULL;
    }


    m_has_docVars = false;

    if (m_docVars)
    {
        delete m_docVars;
        m_docVars = NULL;
    }


    m_has_rsids = false;

    if (m_rsids)
    {
        delete m_rsids;
        m_rsids = NULL;
    }


    m_has_m_mathPr = false;

    if (m_m_mathPr)
    {
        delete m_m_mathPr;
        m_m_mathPr = NULL;
    }


    {
        vector<ChildGroup_2*>::iterator iter;
        for (iter = m_childGroupList_2.begin(); iter != m_childGroupList_2.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_2.clear();
    }

    m_has_themeFontLang = false;

    if (m_themeFontLang)
    {
        delete m_themeFontLang;
        m_themeFontLang = NULL;
    }


    m_has_clrSchemeMapping = false;

    if (m_clrSchemeMapping)
    {
        delete m_clrSchemeMapping;
        m_clrSchemeMapping = NULL;
    }


    m_has_doNotIncludeSubdocsInStats = false;

    if (m_doNotIncludeSubdocsInStats)
    {
        delete m_doNotIncludeSubdocsInStats;
        m_doNotIncludeSubdocsInStats = NULL;
    }


    m_has_doNotAutoCompressPictures = false;

    if (m_doNotAutoCompressPictures)
    {
        delete m_doNotAutoCompressPictures;
        m_doNotAutoCompressPictures = NULL;
    }


    m_has_forceUpgrade = false;

    if (m_forceUpgrade)
    {
        delete m_forceUpgrade;
        m_forceUpgrade = NULL;
    }


    m_has_captions = false;

    if (m_captions)
    {
        delete m_captions;
        m_captions = NULL;
    }


    m_has_readModeInkLockDown = false;

    if (m_readModeInkLockDown)
    {
        delete m_readModeInkLockDown;
        m_readModeInkLockDown = NULL;
    }


    {
        vector<ChildGroup_3*>::iterator iter;
        for (iter = m_childGroupList_3.begin(); iter != m_childGroupList_3.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_3.clear();
    }

    m_has_sl_schemaLibrary = false;

    if (m_sl_schemaLibrary)
    {
        delete m_sl_schemaLibrary;
        m_sl_schemaLibrary = NULL;
    }


    m_has_shapeDefaults = false;

    if (m_shapeDefaults)
    {
        delete m_shapeDefaults;
        m_shapeDefaults = NULL;
    }


    m_has_doNotEmbedSmartTags = false;

    if (m_doNotEmbedSmartTags)
    {
        delete m_doNotEmbedSmartTags;
        m_doNotEmbedSmartTags = NULL;
    }


    m_has_decimalSymbol = false;

    if (m_decimalSymbol)
    {
        delete m_decimalSymbol;
        m_decimalSymbol = NULL;
    }


    m_has_listSeparator = false;

    if (m_listSeparator)
    {
        delete m_listSeparator;
        m_listSeparator = NULL;
    }

}

void CT_Settings::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";


    if (m_has_writeProtection)
    {
        m_writeProtection->toXmlElem("w:writeProtection", "", _outStream);
    }


    if (m_has_view)
    {
        m_view->toXmlElem("w:view", "", _outStream);
    }


    if (m_has_zoom)
    {
        m_zoom->toXmlElem("w:zoom", "", _outStream);
    }


    if (m_has_removePersonalInformation)
    {
        m_removePersonalInformation->toXmlElem("w:removePersonalInformation", "", _outStream);
    }


    if (m_has_removeDateAndTime)
    {
        m_removeDateAndTime->toXmlElem("w:removeDateAndTime", "", _outStream);
    }


    if (m_has_doNotDisplayPageBoundaries)
    {
        m_doNotDisplayPageBoundaries->toXmlElem("w:doNotDisplayPageBoundaries", "", _outStream);
    }


    if (m_has_displayBackgroundShape)
    {
        m_displayBackgroundShape->toXmlElem("w:displayBackgroundShape", "", _outStream);
    }


    if (m_has_printPostScriptOverText)
    {
        m_printPostScriptOverText->toXmlElem("w:printPostScriptOverText", "", _outStream);
    }


    if (m_has_printFractionalCharacterWidth)
    {
        m_printFractionalCharacterWidth->toXmlElem("w:printFractionalCharacterWidth", "", _outStream);
    }


    if (m_has_printFormsData)
    {
        m_printFormsData->toXmlElem("w:printFormsData", "", _outStream);
    }


    if (m_has_embedTrueTypeFonts)
    {
        m_embedTrueTypeFonts->toXmlElem("w:embedTrueTypeFonts", "", _outStream);
    }


    if (m_has_embedSystemFonts)
    {
        m_embedSystemFonts->toXmlElem("w:embedSystemFonts", "", _outStream);
    }


    if (m_has_saveSubsetFonts)
    {
        m_saveSubsetFonts->toXmlElem("w:saveSubsetFonts", "", _outStream);
    }


    if (m_has_saveFormsData)
    {
        m_saveFormsData->toXmlElem("w:saveFormsData", "", _outStream);
    }


    if (m_has_mirrorMargins)
    {
        m_mirrorMargins->toXmlElem("w:mirrorMargins", "", _outStream);
    }


    if (m_has_alignBordersAndEdges)
    {
        m_alignBordersAndEdges->toXmlElem("w:alignBordersAndEdges", "", _outStream);
    }


    if (m_has_bordersDoNotSurroundHeader)
    {
        m_bordersDoNotSurroundHeader->toXmlElem("w:bordersDoNotSurroundHeader", "", _outStream);
    }


    if (m_has_bordersDoNotSurroundFooter)
    {
        m_bordersDoNotSurroundFooter->toXmlElem("w:bordersDoNotSurroundFooter", "", _outStream);
    }


    if (m_has_gutterAtTop)
    {
        m_gutterAtTop->toXmlElem("w:gutterAtTop", "", _outStream);
    }


    if (m_has_hideSpellingErrors)
    {
        m_hideSpellingErrors->toXmlElem("w:hideSpellingErrors", "", _outStream);
    }


    if (m_has_hideGrammaticalErrors)
    {
        m_hideGrammaticalErrors->toXmlElem("w:hideGrammaticalErrors", "", _outStream);
    }

    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_activeWritingStyle())
            {
                (*iter)->get_activeWritingStyle().toXmlElem("w:activeWritingStyle", "", _outStream);
            }


        }
    }


    if (m_has_proofState)
    {
        m_proofState->toXmlElem("w:proofState", "", _outStream);
    }


    if (m_has_formsDesign)
    {
        m_formsDesign->toXmlElem("w:formsDesign", "", _outStream);
    }


    if (m_has_attachedTemplate)
    {
        m_attachedTemplate->toXmlElem("w:attachedTemplate", "", _outStream);
    }


    if (m_has_linkStyles)
    {
        m_linkStyles->toXmlElem("w:linkStyles", "", _outStream);
    }


    if (m_has_stylePaneFormatFilter)
    {
        m_stylePaneFormatFilter->toXmlElem("w:stylePaneFormatFilter", "", _outStream);
    }


    if (m_has_stylePaneSortMethod)
    {
        m_stylePaneSortMethod->toXmlElem("w:stylePaneSortMethod", "", _outStream);
    }


    if (m_has_documentType)
    {
        m_documentType->toXmlElem("w:documentType", "", _outStream);
    }


    if (m_has_mailMerge)
    {
        m_mailMerge->toXmlElem("w:mailMerge", "", _outStream);
    }


    if (m_has_revisionView)
    {
        m_revisionView->toXmlElem("w:revisionView", "", _outStream);
    }


    if (m_has_trackRevisions)
    {
        m_trackRevisions->toXmlElem("w:trackRevisions", "", _outStream);
    }


    if (m_has_doNotTrackMoves)
    {
        m_doNotTrackMoves->toXmlElem("w:doNotTrackMoves", "", _outStream);
    }


    if (m_has_doNotTrackFormatting)
    {
        m_doNotTrackFormatting->toXmlElem("w:doNotTrackFormatting", "", _outStream);
    }


    if (m_has_documentProtection)
    {
        m_documentProtection->toXmlElem("w:documentProtection", "", _outStream);
    }


    if (m_has_autoFormatOverride)
    {
        m_autoFormatOverride->toXmlElem("w:autoFormatOverride", "", _outStream);
    }


    if (m_has_styleLockTheme)
    {
        m_styleLockTheme->toXmlElem("w:styleLockTheme", "", _outStream);
    }


    if (m_has_styleLockQFSet)
    {
        m_styleLockQFSet->toXmlElem("w:styleLockQFSet", "", _outStream);
    }


    if (m_has_defaultTabStop)
    {
        m_defaultTabStop->toXmlElem("w:defaultTabStop", "", _outStream);
    }


    if (m_has_autoHyphenation)
    {
        m_autoHyphenation->toXmlElem("w:autoHyphenation", "", _outStream);
    }


    if (m_has_consecutiveHyphenLimit)
    {
        m_consecutiveHyphenLimit->toXmlElem("w:consecutiveHyphenLimit", "", _outStream);
    }


    if (m_has_hyphenationZone)
    {
        m_hyphenationZone->toXmlElem("w:hyphenationZone", "", _outStream);
    }


    if (m_has_doNotHyphenateCaps)
    {
        m_doNotHyphenateCaps->toXmlElem("w:doNotHyphenateCaps", "", _outStream);
    }


    if (m_has_showEnvelope)
    {
        m_showEnvelope->toXmlElem("w:showEnvelope", "", _outStream);
    }


    if (m_has_summaryLength)
    {
        m_summaryLength->toXmlElem("w:summaryLength", "", _outStream);
    }


    if (m_has_clickAndTypeStyle)
    {
        m_clickAndTypeStyle->toXmlElem("w:clickAndTypeStyle", "", _outStream);
    }


    if (m_has_defaultTableStyle)
    {
        m_defaultTableStyle->toXmlElem("w:defaultTableStyle", "", _outStream);
    }


    if (m_has_evenAndOddHeaders)
    {
        m_evenAndOddHeaders->toXmlElem("w:evenAndOddHeaders", "", _outStream);
    }


    if (m_has_bookFoldRevPrinting)
    {
        m_bookFoldRevPrinting->toXmlElem("w:bookFoldRevPrinting", "", _outStream);
    }


    if (m_has_bookFoldPrinting)
    {
        m_bookFoldPrinting->toXmlElem("w:bookFoldPrinting", "", _outStream);
    }


    if (m_has_bookFoldPrintingSheets)
    {
        m_bookFoldPrintingSheets->toXmlElem("w:bookFoldPrintingSheets", "", _outStream);
    }


    if (m_has_drawingGridHorizontalSpacing)
    {
        m_drawingGridHorizontalSpacing->toXmlElem("w:drawingGridHorizontalSpacing", "", _outStream);
    }


    if (m_has_drawingGridVerticalSpacing)
    {
        m_drawingGridVerticalSpacing->toXmlElem("w:drawingGridVerticalSpacing", "", _outStream);
    }


    if (m_has_displayHorizontalDrawingGridEvery)
    {
        m_displayHorizontalDrawingGridEvery->toXmlElem("w:displayHorizontalDrawingGridEvery", "", _outStream);
    }


    if (m_has_displayVerticalDrawingGridEvery)
    {
        m_displayVerticalDrawingGridEvery->toXmlElem("w:displayVerticalDrawingGridEvery", "", _outStream);
    }


    if (m_has_doNotUseMarginsForDrawingGridOrigin)
    {
        m_doNotUseMarginsForDrawingGridOrigin->toXmlElem("w:doNotUseMarginsForDrawingGridOrigin", "", _outStream);
    }


    if (m_has_drawingGridHorizontalOrigin)
    {
        m_drawingGridHorizontalOrigin->toXmlElem("w:drawingGridHorizontalOrigin", "", _outStream);
    }


    if (m_has_drawingGridVerticalOrigin)
    {
        m_drawingGridVerticalOrigin->toXmlElem("w:drawingGridVerticalOrigin", "", _outStream);
    }


    if (m_has_doNotShadeFormData)
    {
        m_doNotShadeFormData->toXmlElem("w:doNotShadeFormData", "", _outStream);
    }


    if (m_has_noPunctuationKerning)
    {
        m_noPunctuationKerning->toXmlElem("w:noPunctuationKerning", "", _outStream);
    }


    if (m_has_characterSpacingControl)
    {
        m_characterSpacingControl->toXmlElem("w:characterSpacingControl", "", _outStream);
    }


    if (m_has_printTwoOnOne)
    {
        m_printTwoOnOne->toXmlElem("w:printTwoOnOne", "", _outStream);
    }


    if (m_has_strictFirstAndLastChars)
    {
        m_strictFirstAndLastChars->toXmlElem("w:strictFirstAndLastChars", "", _outStream);
    }


    if (m_has_noLineBreaksAfter)
    {
        m_noLineBreaksAfter->toXmlElem("w:noLineBreaksAfter", "", _outStream);
    }


    if (m_has_noLineBreaksBefore)
    {
        m_noLineBreaksBefore->toXmlElem("w:noLineBreaksBefore", "", _outStream);
    }


    if (m_has_savePreviewPicture)
    {
        m_savePreviewPicture->toXmlElem("w:savePreviewPicture", "", _outStream);
    }


    if (m_has_doNotValidateAgainstSchema)
    {
        m_doNotValidateAgainstSchema->toXmlElem("w:doNotValidateAgainstSchema", "", _outStream);
    }


    if (m_has_saveInvalidXml)
    {
        m_saveInvalidXml->toXmlElem("w:saveInvalidXml", "", _outStream);
    }


    if (m_has_ignoreMixedContent)
    {
        m_ignoreMixedContent->toXmlElem("w:ignoreMixedContent", "", _outStream);
    }


    if (m_has_alwaysShowPlaceholderText)
    {
        m_alwaysShowPlaceholderText->toXmlElem("w:alwaysShowPlaceholderText", "", _outStream);
    }


    if (m_has_doNotDemarcateInvalidXml)
    {
        m_doNotDemarcateInvalidXml->toXmlElem("w:doNotDemarcateInvalidXml", "", _outStream);
    }


    if (m_has_saveXmlDataOnly)
    {
        m_saveXmlDataOnly->toXmlElem("w:saveXmlDataOnly", "", _outStream);
    }


    if (m_has_useXSLTWhenSaving)
    {
        m_useXSLTWhenSaving->toXmlElem("w:useXSLTWhenSaving", "", _outStream);
    }


    if (m_has_saveThroughXslt)
    {
        m_saveThroughXslt->toXmlElem("w:saveThroughXslt", "", _outStream);
    }


    if (m_has_showXMLTags)
    {
        m_showXMLTags->toXmlElem("w:showXMLTags", "", _outStream);
    }


    if (m_has_alwaysMergeEmptyNamespace)
    {
        m_alwaysMergeEmptyNamespace->toXmlElem("w:alwaysMergeEmptyNamespace", "", _outStream);
    }


    if (m_has_updateFields)
    {
        m_updateFields->toXmlElem("w:updateFields", "", _outStream);
    }


    if (m_has_hdrShapeDefaults)
    {
        m_hdrShapeDefaults->toXmlElem("w:hdrShapeDefaults", "", _outStream);
    }


    if (m_has_footnotePr)
    {
        m_footnotePr->toXmlElem("w:footnotePr", "", _outStream);
    }


    if (m_has_endnotePr)
    {
        m_endnotePr->toXmlElem("w:endnotePr", "", _outStream);
    }


    if (m_has_compat)
    {
        m_compat->toXmlElem("w:compat", "", _outStream);
    }


    if (m_has_docVars)
    {
        m_docVars->toXmlElem("w:docVars", "", _outStream);
    }


    if (m_has_rsids)
    {
        m_rsids->toXmlElem("w:rsids", "", _outStream);
    }


    if (m_has_m_mathPr)
    {
        m_m_mathPr->toXmlElem("m:mathPr", "", _outStream);
    }

    {
        vector<ChildGroup_2*>::const_iterator iter;
        for (iter = m_childGroupList_2.begin(); iter != m_childGroupList_2.end(); ++iter)
        {
            if ((*iter)->has_attachedSchema())
            {
                (*iter)->get_attachedSchema().toXmlElem("w:attachedSchema", "", _outStream);
            }


        }
    }


    if (m_has_themeFontLang)
    {
        m_themeFontLang->toXmlElem("w:themeFontLang", "", _outStream);
    }


    if (m_has_clrSchemeMapping)
    {
        m_clrSchemeMapping->toXmlElem("w:clrSchemeMapping", "", _outStream);
    }


    if (m_has_doNotIncludeSubdocsInStats)
    {
        m_doNotIncludeSubdocsInStats->toXmlElem("w:doNotIncludeSubdocsInStats", "", _outStream);
    }


    if (m_has_doNotAutoCompressPictures)
    {
        m_doNotAutoCompressPictures->toXmlElem("w:doNotAutoCompressPictures", "", _outStream);
    }


    if (m_has_forceUpgrade)
    {
        m_forceUpgrade->toXmlElem("w:forceUpgrade", "", _outStream);
    }


    if (m_has_captions)
    {
        m_captions->toXmlElem("w:captions", "", _outStream);
    }


    if (m_has_readModeInkLockDown)
    {
        m_readModeInkLockDown->toXmlElem("w:readModeInkLockDown", "", _outStream);
    }

    {
        vector<ChildGroup_3*>::const_iterator iter;
        for (iter = m_childGroupList_3.begin(); iter != m_childGroupList_3.end(); ++iter)
        {
            if ((*iter)->has_smartTagType())
            {
                (*iter)->get_smartTagType().toXmlElem("w:smartTagType", "", _outStream);
            }


        }
    }


    if (m_has_sl_schemaLibrary)
    {
        m_sl_schemaLibrary->toXmlElem("sl:schemaLibrary", "", _outStream);
    }


    if (m_has_shapeDefaults)
    {
        m_shapeDefaults->toXmlElem("w:shapeDefaults", "", _outStream);
    }


    if (m_has_doNotEmbedSmartTags)
    {
        m_doNotEmbedSmartTags->toXmlElem("w:doNotEmbedSmartTags", "", _outStream);
    }


    if (m_has_decimalSymbol)
    {
        m_decimalSymbol->toXmlElem("w:decimalSymbol", "", _outStream);
    }


    if (m_has_listSeparator)
    {
        m_listSeparator->toXmlElem("w:listSeparator", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_Settings& CT_Settings::default_instance()
{
    if (!CT_Settings::default_instance_)
    {
        CT_Settings::default_instance_ = new CT_Settings();
    }
    return *CT_Settings::default_instance_;
}


// CT_Settings::ChildGroup_1
CT_Settings::ChildGroup_1::ChildGroup_1()
    :m_has_activeWritingStyle(false),
     m_activeWritingStyle(NULL)
{
}
bool CT_Settings::ChildGroup_1::has_activeWritingStyle() const
{
    return m_has_activeWritingStyle;
}

CT_WritingStyle* CT_Settings::ChildGroup_1::mutable_activeWritingStyle()
{

    m_has_activeWritingStyle = true;
    if (!m_activeWritingStyle)
    {
        m_activeWritingStyle = new CT_WritingStyle();
    }
    return m_activeWritingStyle;
}

const CT_WritingStyle& CT_Settings::ChildGroup_1::get_activeWritingStyle() const
{
    if (m_activeWritingStyle)
    {
        return *m_activeWritingStyle;
    }
    return CT_WritingStyle::default_instance();
}


// CT_Settings::ChildGroup_2
CT_Settings::ChildGroup_2::ChildGroup_2()
    :m_has_attachedSchema(false),
     m_attachedSchema(NULL)
{
}
bool CT_Settings::ChildGroup_2::has_attachedSchema() const
{
    return m_has_attachedSchema;
}

CT_String* CT_Settings::ChildGroup_2::mutable_attachedSchema()
{

    m_has_attachedSchema = true;
    if (!m_attachedSchema)
    {
        m_attachedSchema = new CT_String();
    }
    return m_attachedSchema;
}

const CT_String& CT_Settings::ChildGroup_2::get_attachedSchema() const
{
    if (m_attachedSchema)
    {
        return *m_attachedSchema;
    }
    return CT_String::default_instance();
}


// CT_Settings::ChildGroup_3
CT_Settings::ChildGroup_3::ChildGroup_3()
    :m_has_smartTagType(false),
     m_smartTagType(NULL)
{
}
bool CT_Settings::ChildGroup_3::has_smartTagType() const
{
    return m_has_smartTagType;
}

CT_SmartTagType* CT_Settings::ChildGroup_3::mutable_smartTagType()
{

    m_has_smartTagType = true;
    if (!m_smartTagType)
    {
        m_smartTagType = new CT_SmartTagType();
    }
    return m_smartTagType;
}

const CT_SmartTagType& CT_Settings::ChildGroup_3::get_smartTagType() const
{
    if (m_smartTagType)
    {
        return *m_smartTagType;
    }
    return CT_SmartTagType::default_instance();
}

CT_Settings* CT_Settings::default_instance_ = NULL;

// CT_StyleSort
CT_StyleSort::CT_StyleSort()
    :m_has_val_attr(false),
     m_val_attr(NULL)
{
}
CT_StyleSort::~CT_StyleSort()
{
    clear();
}
void CT_StyleSort::clear()
{
    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }

}

void CT_StyleSort::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_val_attr);
    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_StyleSort& CT_StyleSort::default_instance()
{
    if (!CT_StyleSort::default_instance_)
    {
        CT_StyleSort::default_instance_ = new CT_StyleSort();
    }
    return *CT_StyleSort::default_instance_;
}

bool CT_StyleSort::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_StyleSort::set_val_attr(const ST_StyleSort& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ST_StyleSort(_val_attr);
}

const ST_StyleSort& CT_StyleSort::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ST_StyleSort::default_instance();
}

CT_StyleSort* CT_StyleSort::default_instance_ = NULL;

// CT_StylePaneFilter
CT_StylePaneFilter::CT_StylePaneFilter()
    :m_has_allStyles_attr(false),
     m_allStyles_attr(NULL),
     m_has_customStyles_attr(false),
     m_customStyles_attr(NULL),
     m_has_latentStyles_attr(false),
     m_latentStyles_attr(NULL),
     m_has_stylesInUse_attr(false),
     m_stylesInUse_attr(NULL),
     m_has_headingStyles_attr(false),
     m_headingStyles_attr(NULL),
     m_has_numberingStyles_attr(false),
     m_numberingStyles_attr(NULL),
     m_has_tableStyles_attr(false),
     m_tableStyles_attr(NULL),
     m_has_directFormattingOnRuns_attr(false),
     m_directFormattingOnRuns_attr(NULL),
     m_has_directFormattingOnParagraphs_attr(false),
     m_directFormattingOnParagraphs_attr(NULL),
     m_has_directFormattingOnNumbering_attr(false),
     m_directFormattingOnNumbering_attr(NULL),
     m_has_directFormattingOnTables_attr(false),
     m_directFormattingOnTables_attr(NULL),
     m_has_clearFormatting_attr(false),
     m_clearFormatting_attr(NULL),
     m_has_top3HeadingStyles_attr(false),
     m_top3HeadingStyles_attr(NULL),
     m_has_visibleStyles_attr(false),
     m_visibleStyles_attr(NULL),
     m_has_alternateStyleNames_attr(false),
     m_alternateStyleNames_attr(NULL),
     m_has_val_attr(false),
     m_val_attr(NULL)
{
}
CT_StylePaneFilter::~CT_StylePaneFilter()
{
    clear();
}
void CT_StylePaneFilter::clear()
{
    m_has_allStyles_attr = false;

    if (m_allStyles_attr)
    {
        delete m_allStyles_attr;
        m_allStyles_attr = NULL;
    }


    m_has_customStyles_attr = false;

    if (m_customStyles_attr)
    {
        delete m_customStyles_attr;
        m_customStyles_attr = NULL;
    }


    m_has_latentStyles_attr = false;

    if (m_latentStyles_attr)
    {
        delete m_latentStyles_attr;
        m_latentStyles_attr = NULL;
    }


    m_has_stylesInUse_attr = false;

    if (m_stylesInUse_attr)
    {
        delete m_stylesInUse_attr;
        m_stylesInUse_attr = NULL;
    }


    m_has_headingStyles_attr = false;

    if (m_headingStyles_attr)
    {
        delete m_headingStyles_attr;
        m_headingStyles_attr = NULL;
    }


    m_has_numberingStyles_attr = false;

    if (m_numberingStyles_attr)
    {
        delete m_numberingStyles_attr;
        m_numberingStyles_attr = NULL;
    }


    m_has_tableStyles_attr = false;

    if (m_tableStyles_attr)
    {
        delete m_tableStyles_attr;
        m_tableStyles_attr = NULL;
    }


    m_has_directFormattingOnRuns_attr = false;

    if (m_directFormattingOnRuns_attr)
    {
        delete m_directFormattingOnRuns_attr;
        m_directFormattingOnRuns_attr = NULL;
    }


    m_has_directFormattingOnParagraphs_attr = false;

    if (m_directFormattingOnParagraphs_attr)
    {
        delete m_directFormattingOnParagraphs_attr;
        m_directFormattingOnParagraphs_attr = NULL;
    }


    m_has_directFormattingOnNumbering_attr = false;

    if (m_directFormattingOnNumbering_attr)
    {
        delete m_directFormattingOnNumbering_attr;
        m_directFormattingOnNumbering_attr = NULL;
    }


    m_has_directFormattingOnTables_attr = false;

    if (m_directFormattingOnTables_attr)
    {
        delete m_directFormattingOnTables_attr;
        m_directFormattingOnTables_attr = NULL;
    }


    m_has_clearFormatting_attr = false;

    if (m_clearFormatting_attr)
    {
        delete m_clearFormatting_attr;
        m_clearFormatting_attr = NULL;
    }


    m_has_top3HeadingStyles_attr = false;

    if (m_top3HeadingStyles_attr)
    {
        delete m_top3HeadingStyles_attr;
        m_top3HeadingStyles_attr = NULL;
    }


    m_has_visibleStyles_attr = false;

    if (m_visibleStyles_attr)
    {
        delete m_visibleStyles_attr;
        m_visibleStyles_attr = NULL;
    }


    m_has_alternateStyleNames_attr = false;

    if (m_alternateStyleNames_attr)
    {
        delete m_alternateStyleNames_attr;
        m_alternateStyleNames_attr = NULL;
    }


    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }

}

void CT_StylePaneFilter::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_allStyles_attr)
    {
        m_allStyles_attr->toXmlAttr("w:allStyles", _outStream);
    }



    if (m_has_customStyles_attr)
    {
        m_customStyles_attr->toXmlAttr("w:customStyles", _outStream);
    }



    if (m_has_latentStyles_attr)
    {
        m_latentStyles_attr->toXmlAttr("w:latentStyles", _outStream);
    }



    if (m_has_stylesInUse_attr)
    {
        m_stylesInUse_attr->toXmlAttr("w:stylesInUse", _outStream);
    }



    if (m_has_headingStyles_attr)
    {
        m_headingStyles_attr->toXmlAttr("w:headingStyles", _outStream);
    }



    if (m_has_numberingStyles_attr)
    {
        m_numberingStyles_attr->toXmlAttr("w:numberingStyles", _outStream);
    }



    if (m_has_tableStyles_attr)
    {
        m_tableStyles_attr->toXmlAttr("w:tableStyles", _outStream);
    }



    if (m_has_directFormattingOnRuns_attr)
    {
        m_directFormattingOnRuns_attr->toXmlAttr("w:directFormattingOnRuns", _outStream);
    }



    if (m_has_directFormattingOnParagraphs_attr)
    {
        m_directFormattingOnParagraphs_attr->toXmlAttr("w:directFormattingOnParagraphs", _outStream);
    }



    if (m_has_directFormattingOnNumbering_attr)
    {
        m_directFormattingOnNumbering_attr->toXmlAttr("w:directFormattingOnNumbering", _outStream);
    }



    if (m_has_directFormattingOnTables_attr)
    {
        m_directFormattingOnTables_attr->toXmlAttr("w:directFormattingOnTables", _outStream);
    }



    if (m_has_clearFormatting_attr)
    {
        m_clearFormatting_attr->toXmlAttr("w:clearFormatting", _outStream);
    }



    if (m_has_top3HeadingStyles_attr)
    {
        m_top3HeadingStyles_attr->toXmlAttr("w:top3HeadingStyles", _outStream);
    }



    if (m_has_visibleStyles_attr)
    {
        m_visibleStyles_attr->toXmlAttr("w:visibleStyles", _outStream);
    }



    if (m_has_alternateStyleNames_attr)
    {
        m_alternateStyleNames_attr->toXmlAttr("w:alternateStyleNames", _outStream);
    }



    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_StylePaneFilter& CT_StylePaneFilter::default_instance()
{
    if (!CT_StylePaneFilter::default_instance_)
    {
        CT_StylePaneFilter::default_instance_ = new CT_StylePaneFilter();
    }
    return *CT_StylePaneFilter::default_instance_;
}

bool CT_StylePaneFilter::has_allStyles_attr() const
{
    return m_has_allStyles_attr;
}

void CT_StylePaneFilter::set_allStyles_attr(const ns_s::ST_OnOff& _allStyles_attr)
{
    m_has_allStyles_attr = true;
    m_allStyles_attr = new ns_s::ST_OnOff(_allStyles_attr);
}

const ns_s::ST_OnOff& CT_StylePaneFilter::get_allStyles_attr() const
{
    if (m_allStyles_attr)
    {
        return *m_allStyles_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

bool CT_StylePaneFilter::has_customStyles_attr() const
{
    return m_has_customStyles_attr;
}

void CT_StylePaneFilter::set_customStyles_attr(const ns_s::ST_OnOff& _customStyles_attr)
{
    m_has_customStyles_attr = true;
    m_customStyles_attr = new ns_s::ST_OnOff(_customStyles_attr);
}

const ns_s::ST_OnOff& CT_StylePaneFilter::get_customStyles_attr() const
{
    if (m_customStyles_attr)
    {
        return *m_customStyles_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

bool CT_StylePaneFilter::has_latentStyles_attr() const
{
    return m_has_latentStyles_attr;
}

void CT_StylePaneFilter::set_latentStyles_attr(const ns_s::ST_OnOff& _latentStyles_attr)
{
    m_has_latentStyles_attr = true;
    m_latentStyles_attr = new ns_s::ST_OnOff(_latentStyles_attr);
}

const ns_s::ST_OnOff& CT_StylePaneFilter::get_latentStyles_attr() const
{
    if (m_latentStyles_attr)
    {
        return *m_latentStyles_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

bool CT_StylePaneFilter::has_stylesInUse_attr() const
{
    return m_has_stylesInUse_attr;
}

void CT_StylePaneFilter::set_stylesInUse_attr(const ns_s::ST_OnOff& _stylesInUse_attr)
{
    m_has_stylesInUse_attr = true;
    m_stylesInUse_attr = new ns_s::ST_OnOff(_stylesInUse_attr);
}

const ns_s::ST_OnOff& CT_StylePaneFilter::get_stylesInUse_attr() const
{
    if (m_stylesInUse_attr)
    {
        return *m_stylesInUse_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

bool CT_StylePaneFilter::has_headingStyles_attr() const
{
    return m_has_headingStyles_attr;
}

void CT_StylePaneFilter::set_headingStyles_attr(const ns_s::ST_OnOff& _headingStyles_attr)
{
    m_has_headingStyles_attr = true;
    m_headingStyles_attr = new ns_s::ST_OnOff(_headingStyles_attr);
}

const ns_s::ST_OnOff& CT_StylePaneFilter::get_headingStyles_attr() const
{
    if (m_headingStyles_attr)
    {
        return *m_headingStyles_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

bool CT_StylePaneFilter::has_numberingStyles_attr() const
{
    return m_has_numberingStyles_attr;
}

void CT_StylePaneFilter::set_numberingStyles_attr(const ns_s::ST_OnOff& _numberingStyles_attr)
{
    m_has_numberingStyles_attr = true;
    m_numberingStyles_attr = new ns_s::ST_OnOff(_numberingStyles_attr);
}

const ns_s::ST_OnOff& CT_StylePaneFilter::get_numberingStyles_attr() const
{
    if (m_numberingStyles_attr)
    {
        return *m_numberingStyles_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

bool CT_StylePaneFilter::has_tableStyles_attr() const
{
    return m_has_tableStyles_attr;
}

void CT_StylePaneFilter::set_tableStyles_attr(const ns_s::ST_OnOff& _tableStyles_attr)
{
    m_has_tableStyles_attr = true;
    m_tableStyles_attr = new ns_s::ST_OnOff(_tableStyles_attr);
}

const ns_s::ST_OnOff& CT_StylePaneFilter::get_tableStyles_attr() const
{
    if (m_tableStyles_attr)
    {
        return *m_tableStyles_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

bool CT_StylePaneFilter::has_directFormattingOnRuns_attr() const
{
    return m_has_directFormattingOnRuns_attr;
}

void CT_StylePaneFilter::set_directFormattingOnRuns_attr(const ns_s::ST_OnOff& _directFormattingOnRuns_attr)
{
    m_has_directFormattingOnRuns_attr = true;
    m_directFormattingOnRuns_attr = new ns_s::ST_OnOff(_directFormattingOnRuns_attr);
}

const ns_s::ST_OnOff& CT_StylePaneFilter::get_directFormattingOnRuns_attr() const
{
    if (m_directFormattingOnRuns_attr)
    {
        return *m_directFormattingOnRuns_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

bool CT_StylePaneFilter::has_directFormattingOnParagraphs_attr() const
{
    return m_has_directFormattingOnParagraphs_attr;
}

void CT_StylePaneFilter::set_directFormattingOnParagraphs_attr(const ns_s::ST_OnOff& _directFormattingOnParagraphs_attr)
{
    m_has_directFormattingOnParagraphs_attr = true;
    m_directFormattingOnParagraphs_attr = new ns_s::ST_OnOff(_directFormattingOnParagraphs_attr);
}

const ns_s::ST_OnOff& CT_StylePaneFilter::get_directFormattingOnParagraphs_attr() const
{
    if (m_directFormattingOnParagraphs_attr)
    {
        return *m_directFormattingOnParagraphs_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

bool CT_StylePaneFilter::has_directFormattingOnNumbering_attr() const
{
    return m_has_directFormattingOnNumbering_attr;
}

void CT_StylePaneFilter::set_directFormattingOnNumbering_attr(const ns_s::ST_OnOff& _directFormattingOnNumbering_attr)
{
    m_has_directFormattingOnNumbering_attr = true;
    m_directFormattingOnNumbering_attr = new ns_s::ST_OnOff(_directFormattingOnNumbering_attr);
}

const ns_s::ST_OnOff& CT_StylePaneFilter::get_directFormattingOnNumbering_attr() const
{
    if (m_directFormattingOnNumbering_attr)
    {
        return *m_directFormattingOnNumbering_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

bool CT_StylePaneFilter::has_directFormattingOnTables_attr() const
{
    return m_has_directFormattingOnTables_attr;
}

void CT_StylePaneFilter::set_directFormattingOnTables_attr(const ns_s::ST_OnOff& _directFormattingOnTables_attr)
{
    m_has_directFormattingOnTables_attr = true;
    m_directFormattingOnTables_attr = new ns_s::ST_OnOff(_directFormattingOnTables_attr);
}

const ns_s::ST_OnOff& CT_StylePaneFilter::get_directFormattingOnTables_attr() const
{
    if (m_directFormattingOnTables_attr)
    {
        return *m_directFormattingOnTables_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

bool CT_StylePaneFilter::has_clearFormatting_attr() const
{
    return m_has_clearFormatting_attr;
}

void CT_StylePaneFilter::set_clearFormatting_attr(const ns_s::ST_OnOff& _clearFormatting_attr)
{
    m_has_clearFormatting_attr = true;
    m_clearFormatting_attr = new ns_s::ST_OnOff(_clearFormatting_attr);
}

const ns_s::ST_OnOff& CT_StylePaneFilter::get_clearFormatting_attr() const
{
    if (m_clearFormatting_attr)
    {
        return *m_clearFormatting_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

bool CT_StylePaneFilter::has_top3HeadingStyles_attr() const
{
    return m_has_top3HeadingStyles_attr;
}

void CT_StylePaneFilter::set_top3HeadingStyles_attr(const ns_s::ST_OnOff& _top3HeadingStyles_attr)
{
    m_has_top3HeadingStyles_attr = true;
    m_top3HeadingStyles_attr = new ns_s::ST_OnOff(_top3HeadingStyles_attr);
}

const ns_s::ST_OnOff& CT_StylePaneFilter::get_top3HeadingStyles_attr() const
{
    if (m_top3HeadingStyles_attr)
    {
        return *m_top3HeadingStyles_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

bool CT_StylePaneFilter::has_visibleStyles_attr() const
{
    return m_has_visibleStyles_attr;
}

void CT_StylePaneFilter::set_visibleStyles_attr(const ns_s::ST_OnOff& _visibleStyles_attr)
{
    m_has_visibleStyles_attr = true;
    m_visibleStyles_attr = new ns_s::ST_OnOff(_visibleStyles_attr);
}

const ns_s::ST_OnOff& CT_StylePaneFilter::get_visibleStyles_attr() const
{
    if (m_visibleStyles_attr)
    {
        return *m_visibleStyles_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

bool CT_StylePaneFilter::has_alternateStyleNames_attr() const
{
    return m_has_alternateStyleNames_attr;
}

void CT_StylePaneFilter::set_alternateStyleNames_attr(const ns_s::ST_OnOff& _alternateStyleNames_attr)
{
    m_has_alternateStyleNames_attr = true;
    m_alternateStyleNames_attr = new ns_s::ST_OnOff(_alternateStyleNames_attr);
}

const ns_s::ST_OnOff& CT_StylePaneFilter::get_alternateStyleNames_attr() const
{
    if (m_alternateStyleNames_attr)
    {
        return *m_alternateStyleNames_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

bool CT_StylePaneFilter::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_StylePaneFilter::set_val_attr(const ST_ShortHexNumber& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ST_ShortHexNumber(_val_attr);
}

const ST_ShortHexNumber& CT_StylePaneFilter::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ST_ShortHexNumber::default_instance();
}

CT_StylePaneFilter* CT_StylePaneFilter::default_instance_ = NULL;

// CT_WebSettings
CT_WebSettings::CT_WebSettings()
    :m_has_frameset(false),
     m_frameset(NULL),
     m_has_divs(false),
     m_divs(NULL),
     m_has_encoding(false),
     m_encoding(NULL),
     m_has_optimizeForBrowser(false),
     m_optimizeForBrowser(NULL),
     m_has_relyOnVML(false),
     m_relyOnVML(NULL),
     m_has_allowPNG(false),
     m_allowPNG(NULL),
     m_has_doNotRelyOnCSS(false),
     m_doNotRelyOnCSS(NULL),
     m_has_doNotSaveAsSingleFile(false),
     m_doNotSaveAsSingleFile(NULL),
     m_has_doNotOrganizeInFolder(false),
     m_doNotOrganizeInFolder(NULL),
     m_has_doNotUseLongFileNames(false),
     m_doNotUseLongFileNames(NULL),
     m_has_pixelsPerInch(false),
     m_pixelsPerInch(NULL),
     m_has_targetScreenSz(false),
     m_targetScreenSz(NULL),
     m_has_saveSmartTagsAsXml(false),
     m_saveSmartTagsAsXml(NULL)
{
}
CT_WebSettings::~CT_WebSettings()
{
    clear();
}
bool CT_WebSettings::has_frameset() const
{
    return m_has_frameset;
}

CT_Frameset* CT_WebSettings::mutable_frameset()
{
    m_has_frameset = true;
    if (!m_frameset)
    {
        m_frameset = new CT_Frameset();
    }
    return m_frameset;
}

const CT_Frameset& CT_WebSettings::get_frameset() const
{
    if (m_frameset)
    {
        return *m_frameset;
    }
    return CT_Frameset::default_instance();
}

bool CT_WebSettings::has_divs() const
{
    return m_has_divs;
}

CT_Divs* CT_WebSettings::mutable_divs()
{
    m_has_divs = true;
    if (!m_divs)
    {
        m_divs = new CT_Divs();
    }
    return m_divs;
}

const CT_Divs& CT_WebSettings::get_divs() const
{
    if (m_divs)
    {
        return *m_divs;
    }
    return CT_Divs::default_instance();
}

bool CT_WebSettings::has_encoding() const
{
    return m_has_encoding;
}

CT_String* CT_WebSettings::mutable_encoding()
{
    m_has_encoding = true;
    if (!m_encoding)
    {
        m_encoding = new CT_String();
    }
    return m_encoding;
}

const CT_String& CT_WebSettings::get_encoding() const
{
    if (m_encoding)
    {
        return *m_encoding;
    }
    return CT_String::default_instance();
}

bool CT_WebSettings::has_optimizeForBrowser() const
{
    return m_has_optimizeForBrowser;
}

CT_OptimizeForBrowser* CT_WebSettings::mutable_optimizeForBrowser()
{
    m_has_optimizeForBrowser = true;
    if (!m_optimizeForBrowser)
    {
        m_optimizeForBrowser = new CT_OptimizeForBrowser();
    }
    return m_optimizeForBrowser;
}

const CT_OptimizeForBrowser& CT_WebSettings::get_optimizeForBrowser() const
{
    if (m_optimizeForBrowser)
    {
        return *m_optimizeForBrowser;
    }
    return CT_OptimizeForBrowser::default_instance();
}

bool CT_WebSettings::has_relyOnVML() const
{
    return m_has_relyOnVML;
}

CT_OnOff* CT_WebSettings::mutable_relyOnVML()
{
    m_has_relyOnVML = true;
    if (!m_relyOnVML)
    {
        m_relyOnVML = new CT_OnOff();
    }
    return m_relyOnVML;
}

const CT_OnOff& CT_WebSettings::get_relyOnVML() const
{
    if (m_relyOnVML)
    {
        return *m_relyOnVML;
    }
    return CT_OnOff::default_instance();
}

bool CT_WebSettings::has_allowPNG() const
{
    return m_has_allowPNG;
}

CT_OnOff* CT_WebSettings::mutable_allowPNG()
{
    m_has_allowPNG = true;
    if (!m_allowPNG)
    {
        m_allowPNG = new CT_OnOff();
    }
    return m_allowPNG;
}

const CT_OnOff& CT_WebSettings::get_allowPNG() const
{
    if (m_allowPNG)
    {
        return *m_allowPNG;
    }
    return CT_OnOff::default_instance();
}

bool CT_WebSettings::has_doNotRelyOnCSS() const
{
    return m_has_doNotRelyOnCSS;
}

CT_OnOff* CT_WebSettings::mutable_doNotRelyOnCSS()
{
    m_has_doNotRelyOnCSS = true;
    if (!m_doNotRelyOnCSS)
    {
        m_doNotRelyOnCSS = new CT_OnOff();
    }
    return m_doNotRelyOnCSS;
}

const CT_OnOff& CT_WebSettings::get_doNotRelyOnCSS() const
{
    if (m_doNotRelyOnCSS)
    {
        return *m_doNotRelyOnCSS;
    }
    return CT_OnOff::default_instance();
}

bool CT_WebSettings::has_doNotSaveAsSingleFile() const
{
    return m_has_doNotSaveAsSingleFile;
}

CT_OnOff* CT_WebSettings::mutable_doNotSaveAsSingleFile()
{
    m_has_doNotSaveAsSingleFile = true;
    if (!m_doNotSaveAsSingleFile)
    {
        m_doNotSaveAsSingleFile = new CT_OnOff();
    }
    return m_doNotSaveAsSingleFile;
}

const CT_OnOff& CT_WebSettings::get_doNotSaveAsSingleFile() const
{
    if (m_doNotSaveAsSingleFile)
    {
        return *m_doNotSaveAsSingleFile;
    }
    return CT_OnOff::default_instance();
}

bool CT_WebSettings::has_doNotOrganizeInFolder() const
{
    return m_has_doNotOrganizeInFolder;
}

CT_OnOff* CT_WebSettings::mutable_doNotOrganizeInFolder()
{
    m_has_doNotOrganizeInFolder = true;
    if (!m_doNotOrganizeInFolder)
    {
        m_doNotOrganizeInFolder = new CT_OnOff();
    }
    return m_doNotOrganizeInFolder;
}

const CT_OnOff& CT_WebSettings::get_doNotOrganizeInFolder() const
{
    if (m_doNotOrganizeInFolder)
    {
        return *m_doNotOrganizeInFolder;
    }
    return CT_OnOff::default_instance();
}

bool CT_WebSettings::has_doNotUseLongFileNames() const
{
    return m_has_doNotUseLongFileNames;
}

CT_OnOff* CT_WebSettings::mutable_doNotUseLongFileNames()
{
    m_has_doNotUseLongFileNames = true;
    if (!m_doNotUseLongFileNames)
    {
        m_doNotUseLongFileNames = new CT_OnOff();
    }
    return m_doNotUseLongFileNames;
}

const CT_OnOff& CT_WebSettings::get_doNotUseLongFileNames() const
{
    if (m_doNotUseLongFileNames)
    {
        return *m_doNotUseLongFileNames;
    }
    return CT_OnOff::default_instance();
}

bool CT_WebSettings::has_pixelsPerInch() const
{
    return m_has_pixelsPerInch;
}

CT_DecimalNumber* CT_WebSettings::mutable_pixelsPerInch()
{
    m_has_pixelsPerInch = true;
    if (!m_pixelsPerInch)
    {
        m_pixelsPerInch = new CT_DecimalNumber();
    }
    return m_pixelsPerInch;
}

const CT_DecimalNumber& CT_WebSettings::get_pixelsPerInch() const
{
    if (m_pixelsPerInch)
    {
        return *m_pixelsPerInch;
    }
    return CT_DecimalNumber::default_instance();
}

bool CT_WebSettings::has_targetScreenSz() const
{
    return m_has_targetScreenSz;
}

CT_TargetScreenSz* CT_WebSettings::mutable_targetScreenSz()
{
    m_has_targetScreenSz = true;
    if (!m_targetScreenSz)
    {
        m_targetScreenSz = new CT_TargetScreenSz();
    }
    return m_targetScreenSz;
}

const CT_TargetScreenSz& CT_WebSettings::get_targetScreenSz() const
{
    if (m_targetScreenSz)
    {
        return *m_targetScreenSz;
    }
    return CT_TargetScreenSz::default_instance();
}

bool CT_WebSettings::has_saveSmartTagsAsXml() const
{
    return m_has_saveSmartTagsAsXml;
}

CT_OnOff* CT_WebSettings::mutable_saveSmartTagsAsXml()
{
    m_has_saveSmartTagsAsXml = true;
    if (!m_saveSmartTagsAsXml)
    {
        m_saveSmartTagsAsXml = new CT_OnOff();
    }
    return m_saveSmartTagsAsXml;
}

const CT_OnOff& CT_WebSettings::get_saveSmartTagsAsXml() const
{
    if (m_saveSmartTagsAsXml)
    {
        return *m_saveSmartTagsAsXml;
    }
    return CT_OnOff::default_instance();
}

void CT_WebSettings::clear()
{
    m_has_frameset = false;

    if (m_frameset)
    {
        delete m_frameset;
        m_frameset = NULL;
    }


    m_has_divs = false;

    if (m_divs)
    {
        delete m_divs;
        m_divs = NULL;
    }


    m_has_encoding = false;

    if (m_encoding)
    {
        delete m_encoding;
        m_encoding = NULL;
    }


    m_has_optimizeForBrowser = false;

    if (m_optimizeForBrowser)
    {
        delete m_optimizeForBrowser;
        m_optimizeForBrowser = NULL;
    }


    m_has_relyOnVML = false;

    if (m_relyOnVML)
    {
        delete m_relyOnVML;
        m_relyOnVML = NULL;
    }


    m_has_allowPNG = false;

    if (m_allowPNG)
    {
        delete m_allowPNG;
        m_allowPNG = NULL;
    }


    m_has_doNotRelyOnCSS = false;

    if (m_doNotRelyOnCSS)
    {
        delete m_doNotRelyOnCSS;
        m_doNotRelyOnCSS = NULL;
    }


    m_has_doNotSaveAsSingleFile = false;

    if (m_doNotSaveAsSingleFile)
    {
        delete m_doNotSaveAsSingleFile;
        m_doNotSaveAsSingleFile = NULL;
    }


    m_has_doNotOrganizeInFolder = false;

    if (m_doNotOrganizeInFolder)
    {
        delete m_doNotOrganizeInFolder;
        m_doNotOrganizeInFolder = NULL;
    }


    m_has_doNotUseLongFileNames = false;

    if (m_doNotUseLongFileNames)
    {
        delete m_doNotUseLongFileNames;
        m_doNotUseLongFileNames = NULL;
    }


    m_has_pixelsPerInch = false;

    if (m_pixelsPerInch)
    {
        delete m_pixelsPerInch;
        m_pixelsPerInch = NULL;
    }


    m_has_targetScreenSz = false;

    if (m_targetScreenSz)
    {
        delete m_targetScreenSz;
        m_targetScreenSz = NULL;
    }


    m_has_saveSmartTagsAsXml = false;

    if (m_saveSmartTagsAsXml)
    {
        delete m_saveSmartTagsAsXml;
        m_saveSmartTagsAsXml = NULL;
    }

}

void CT_WebSettings::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";


    if (m_has_frameset)
    {
        m_frameset->toXmlElem("w:frameset", "", _outStream);
    }


    if (m_has_divs)
    {
        m_divs->toXmlElem("w:divs", "", _outStream);
    }


    if (m_has_encoding)
    {
        m_encoding->toXmlElem("w:encoding", "", _outStream);
    }


    if (m_has_optimizeForBrowser)
    {
        m_optimizeForBrowser->toXmlElem("w:optimizeForBrowser", "", _outStream);
    }


    if (m_has_relyOnVML)
    {
        m_relyOnVML->toXmlElem("w:relyOnVML", "", _outStream);
    }


    if (m_has_allowPNG)
    {
        m_allowPNG->toXmlElem("w:allowPNG", "", _outStream);
    }


    if (m_has_doNotRelyOnCSS)
    {
        m_doNotRelyOnCSS->toXmlElem("w:doNotRelyOnCSS", "", _outStream);
    }


    if (m_has_doNotSaveAsSingleFile)
    {
        m_doNotSaveAsSingleFile->toXmlElem("w:doNotSaveAsSingleFile", "", _outStream);
    }


    if (m_has_doNotOrganizeInFolder)
    {
        m_doNotOrganizeInFolder->toXmlElem("w:doNotOrganizeInFolder", "", _outStream);
    }


    if (m_has_doNotUseLongFileNames)
    {
        m_doNotUseLongFileNames->toXmlElem("w:doNotUseLongFileNames", "", _outStream);
    }


    if (m_has_pixelsPerInch)
    {
        m_pixelsPerInch->toXmlElem("w:pixelsPerInch", "", _outStream);
    }


    if (m_has_targetScreenSz)
    {
        m_targetScreenSz->toXmlElem("w:targetScreenSz", "", _outStream);
    }


    if (m_has_saveSmartTagsAsXml)
    {
        m_saveSmartTagsAsXml->toXmlElem("w:saveSmartTagsAsXml", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_WebSettings& CT_WebSettings::default_instance()
{
    if (!CT_WebSettings::default_instance_)
    {
        CT_WebSettings::default_instance_ = new CT_WebSettings();
    }
    return *CT_WebSettings::default_instance_;
}

CT_WebSettings* CT_WebSettings::default_instance_ = NULL;

// CT_FrameScrollbar
CT_FrameScrollbar::CT_FrameScrollbar()
    :m_has_val_attr(false),
     m_val_attr(NULL)
{
}
CT_FrameScrollbar::~CT_FrameScrollbar()
{
    clear();
}
void CT_FrameScrollbar::clear()
{
    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }

}

void CT_FrameScrollbar::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_val_attr);
    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_FrameScrollbar& CT_FrameScrollbar::default_instance()
{
    if (!CT_FrameScrollbar::default_instance_)
    {
        CT_FrameScrollbar::default_instance_ = new CT_FrameScrollbar();
    }
    return *CT_FrameScrollbar::default_instance_;
}

bool CT_FrameScrollbar::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_FrameScrollbar::set_val_attr(const ST_FrameScrollbar& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ST_FrameScrollbar(_val_attr);
}

const ST_FrameScrollbar& CT_FrameScrollbar::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ST_FrameScrollbar::default_instance();
}

CT_FrameScrollbar* CT_FrameScrollbar::default_instance_ = NULL;

// CT_OptimizeForBrowser
CT_OptimizeForBrowser::CT_OptimizeForBrowser()
    :m_has_val_attr(false),
     m_val_attr(NULL),
     m_has_target_attr(false),
     m_target_attr(NULL)
{
}
CT_OptimizeForBrowser::~CT_OptimizeForBrowser()
{
    clear();
}
void CT_OptimizeForBrowser::clear()
{
    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }


    m_has_target_attr = false;

    if (m_target_attr)
    {
        delete m_target_attr;
        m_target_attr = NULL;
    }

}

void CT_OptimizeForBrowser::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }



    if (m_has_target_attr)
    {
        m_target_attr->toXmlAttr("w:target", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_OptimizeForBrowser& CT_OptimizeForBrowser::default_instance()
{
    if (!CT_OptimizeForBrowser::default_instance_)
    {
        CT_OptimizeForBrowser::default_instance_ = new CT_OptimizeForBrowser();
    }
    return *CT_OptimizeForBrowser::default_instance_;
}

bool CT_OptimizeForBrowser::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_OptimizeForBrowser::set_val_attr(const ns_s::ST_OnOff& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ns_s::ST_OnOff(_val_attr);
}

const ns_s::ST_OnOff& CT_OptimizeForBrowser::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

bool CT_OptimizeForBrowser::has_target_attr() const
{
    return m_has_target_attr;
}

void CT_OptimizeForBrowser::set_target_attr(const ns_s::ST_String& _target_attr)
{
    m_has_target_attr = true;
    m_target_attr = new ns_s::ST_String(_target_attr);
}

const ns_s::ST_String& CT_OptimizeForBrowser::get_target_attr() const
{
    if (m_target_attr)
    {
        return *m_target_attr;
    }
    return ns_s::ST_String::default_instance();
}

CT_OptimizeForBrowser* CT_OptimizeForBrowser::default_instance_ = NULL;

// CT_Frame
CT_Frame::CT_Frame()
    :m_has_sz(false),
     m_sz(NULL),
     m_has_name(false),
     m_name(NULL),
     m_has_title(false),
     m_title(NULL),
     m_has_longDesc(false),
     m_longDesc(NULL),
     m_has_sourceFileName(false),
     m_sourceFileName(NULL),
     m_has_marW(false),
     m_marW(NULL),
     m_has_marH(false),
     m_marH(NULL),
     m_has_scrollbar(false),
     m_scrollbar(NULL),
     m_has_noResizeAllowed(false),
     m_noResizeAllowed(NULL),
     m_has_linkedToFile(false),
     m_linkedToFile(NULL)
{
}
CT_Frame::~CT_Frame()
{
    clear();
}
bool CT_Frame::has_sz() const
{
    return m_has_sz;
}

CT_String* CT_Frame::mutable_sz()
{
    m_has_sz = true;
    if (!m_sz)
    {
        m_sz = new CT_String();
    }
    return m_sz;
}

const CT_String& CT_Frame::get_sz() const
{
    if (m_sz)
    {
        return *m_sz;
    }
    return CT_String::default_instance();
}

bool CT_Frame::has_name() const
{
    return m_has_name;
}

CT_String* CT_Frame::mutable_name()
{
    m_has_name = true;
    if (!m_name)
    {
        m_name = new CT_String();
    }
    return m_name;
}

const CT_String& CT_Frame::get_name() const
{
    if (m_name)
    {
        return *m_name;
    }
    return CT_String::default_instance();
}

bool CT_Frame::has_title() const
{
    return m_has_title;
}

CT_String* CT_Frame::mutable_title()
{
    m_has_title = true;
    if (!m_title)
    {
        m_title = new CT_String();
    }
    return m_title;
}

const CT_String& CT_Frame::get_title() const
{
    if (m_title)
    {
        return *m_title;
    }
    return CT_String::default_instance();
}

bool CT_Frame::has_longDesc() const
{
    return m_has_longDesc;
}

CT_Rel* CT_Frame::mutable_longDesc()
{
    m_has_longDesc = true;
    if (!m_longDesc)
    {
        m_longDesc = new CT_Rel();
    }
    return m_longDesc;
}

const CT_Rel& CT_Frame::get_longDesc() const
{
    if (m_longDesc)
    {
        return *m_longDesc;
    }
    return CT_Rel::default_instance();
}

bool CT_Frame::has_sourceFileName() const
{
    return m_has_sourceFileName;
}

CT_Rel* CT_Frame::mutable_sourceFileName()
{
    m_has_sourceFileName = true;
    if (!m_sourceFileName)
    {
        m_sourceFileName = new CT_Rel();
    }
    return m_sourceFileName;
}

const CT_Rel& CT_Frame::get_sourceFileName() const
{
    if (m_sourceFileName)
    {
        return *m_sourceFileName;
    }
    return CT_Rel::default_instance();
}

bool CT_Frame::has_marW() const
{
    return m_has_marW;
}

CT_PixelsMeasure* CT_Frame::mutable_marW()
{
    m_has_marW = true;
    if (!m_marW)
    {
        m_marW = new CT_PixelsMeasure();
    }
    return m_marW;
}

const CT_PixelsMeasure& CT_Frame::get_marW() const
{
    if (m_marW)
    {
        return *m_marW;
    }
    return CT_PixelsMeasure::default_instance();
}

bool CT_Frame::has_marH() const
{
    return m_has_marH;
}

CT_PixelsMeasure* CT_Frame::mutable_marH()
{
    m_has_marH = true;
    if (!m_marH)
    {
        m_marH = new CT_PixelsMeasure();
    }
    return m_marH;
}

const CT_PixelsMeasure& CT_Frame::get_marH() const
{
    if (m_marH)
    {
        return *m_marH;
    }
    return CT_PixelsMeasure::default_instance();
}

bool CT_Frame::has_scrollbar() const
{
    return m_has_scrollbar;
}

CT_FrameScrollbar* CT_Frame::mutable_scrollbar()
{
    m_has_scrollbar = true;
    if (!m_scrollbar)
    {
        m_scrollbar = new CT_FrameScrollbar();
    }
    return m_scrollbar;
}

const CT_FrameScrollbar& CT_Frame::get_scrollbar() const
{
    if (m_scrollbar)
    {
        return *m_scrollbar;
    }
    return CT_FrameScrollbar::default_instance();
}

bool CT_Frame::has_noResizeAllowed() const
{
    return m_has_noResizeAllowed;
}

CT_OnOff* CT_Frame::mutable_noResizeAllowed()
{
    m_has_noResizeAllowed = true;
    if (!m_noResizeAllowed)
    {
        m_noResizeAllowed = new CT_OnOff();
    }
    return m_noResizeAllowed;
}

const CT_OnOff& CT_Frame::get_noResizeAllowed() const
{
    if (m_noResizeAllowed)
    {
        return *m_noResizeAllowed;
    }
    return CT_OnOff::default_instance();
}

bool CT_Frame::has_linkedToFile() const
{
    return m_has_linkedToFile;
}

CT_OnOff* CT_Frame::mutable_linkedToFile()
{
    m_has_linkedToFile = true;
    if (!m_linkedToFile)
    {
        m_linkedToFile = new CT_OnOff();
    }
    return m_linkedToFile;
}

const CT_OnOff& CT_Frame::get_linkedToFile() const
{
    if (m_linkedToFile)
    {
        return *m_linkedToFile;
    }
    return CT_OnOff::default_instance();
}

void CT_Frame::clear()
{
    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }


    m_has_name = false;

    if (m_name)
    {
        delete m_name;
        m_name = NULL;
    }


    m_has_title = false;

    if (m_title)
    {
        delete m_title;
        m_title = NULL;
    }


    m_has_longDesc = false;

    if (m_longDesc)
    {
        delete m_longDesc;
        m_longDesc = NULL;
    }


    m_has_sourceFileName = false;

    if (m_sourceFileName)
    {
        delete m_sourceFileName;
        m_sourceFileName = NULL;
    }


    m_has_marW = false;

    if (m_marW)
    {
        delete m_marW;
        m_marW = NULL;
    }


    m_has_marH = false;

    if (m_marH)
    {
        delete m_marH;
        m_marH = NULL;
    }


    m_has_scrollbar = false;

    if (m_scrollbar)
    {
        delete m_scrollbar;
        m_scrollbar = NULL;
    }


    m_has_noResizeAllowed = false;

    if (m_noResizeAllowed)
    {
        delete m_noResizeAllowed;
        m_noResizeAllowed = NULL;
    }


    m_has_linkedToFile = false;

    if (m_linkedToFile)
    {
        delete m_linkedToFile;
        m_linkedToFile = NULL;
    }

}

void CT_Frame::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";


    if (m_has_sz)
    {
        m_sz->toXmlElem("w:sz", "", _outStream);
    }


    if (m_has_name)
    {
        m_name->toXmlElem("w:name", "", _outStream);
    }


    if (m_has_title)
    {
        m_title->toXmlElem("w:title", "", _outStream);
    }


    if (m_has_longDesc)
    {
        m_longDesc->toXmlElem("w:longDesc", "", _outStream);
    }


    if (m_has_sourceFileName)
    {
        m_sourceFileName->toXmlElem("w:sourceFileName", "", _outStream);
    }


    if (m_has_marW)
    {
        m_marW->toXmlElem("w:marW", "", _outStream);
    }


    if (m_has_marH)
    {
        m_marH->toXmlElem("w:marH", "", _outStream);
    }


    if (m_has_scrollbar)
    {
        m_scrollbar->toXmlElem("w:scrollbar", "", _outStream);
    }


    if (m_has_noResizeAllowed)
    {
        m_noResizeAllowed->toXmlElem("w:noResizeAllowed", "", _outStream);
    }


    if (m_has_linkedToFile)
    {
        m_linkedToFile->toXmlElem("w:linkedToFile", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_Frame& CT_Frame::default_instance()
{
    if (!CT_Frame::default_instance_)
    {
        CT_Frame::default_instance_ = new CT_Frame();
    }
    return *CT_Frame::default_instance_;
}

CT_Frame* CT_Frame::default_instance_ = NULL;

// CT_FrameLayout
CT_FrameLayout::CT_FrameLayout()
    :m_has_val_attr(false),
     m_val_attr(NULL)
{
}
CT_FrameLayout::~CT_FrameLayout()
{
    clear();
}
void CT_FrameLayout::clear()
{
    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }

}

void CT_FrameLayout::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_val_attr);
    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_FrameLayout& CT_FrameLayout::default_instance()
{
    if (!CT_FrameLayout::default_instance_)
    {
        CT_FrameLayout::default_instance_ = new CT_FrameLayout();
    }
    return *CT_FrameLayout::default_instance_;
}

bool CT_FrameLayout::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_FrameLayout::set_val_attr(const ST_FrameLayout& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ST_FrameLayout(_val_attr);
}

const ST_FrameLayout& CT_FrameLayout::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ST_FrameLayout::default_instance();
}

CT_FrameLayout* CT_FrameLayout::default_instance_ = NULL;

// CT_FramesetSplitbar
CT_FramesetSplitbar::CT_FramesetSplitbar()
    :m_has_w(false),
     m_w(NULL),
     m_has_color(false),
     m_color(NULL),
     m_has_noBorder(false),
     m_noBorder(NULL),
     m_has_flatBorders(false),
     m_flatBorders(NULL)
{
}
CT_FramesetSplitbar::~CT_FramesetSplitbar()
{
    clear();
}
bool CT_FramesetSplitbar::has_w() const
{
    return m_has_w;
}

CT_TwipsMeasure* CT_FramesetSplitbar::mutable_w()
{
    m_has_w = true;
    if (!m_w)
    {
        m_w = new CT_TwipsMeasure();
    }
    return m_w;
}

const CT_TwipsMeasure& CT_FramesetSplitbar::get_w() const
{
    if (m_w)
    {
        return *m_w;
    }
    return CT_TwipsMeasure::default_instance();
}

bool CT_FramesetSplitbar::has_color() const
{
    return m_has_color;
}

CT_Color* CT_FramesetSplitbar::mutable_color()
{
    m_has_color = true;
    if (!m_color)
    {
        m_color = new CT_Color();
    }
    return m_color;
}

const CT_Color& CT_FramesetSplitbar::get_color() const
{
    if (m_color)
    {
        return *m_color;
    }
    return CT_Color::default_instance();
}

bool CT_FramesetSplitbar::has_noBorder() const
{
    return m_has_noBorder;
}

CT_OnOff* CT_FramesetSplitbar::mutable_noBorder()
{
    m_has_noBorder = true;
    if (!m_noBorder)
    {
        m_noBorder = new CT_OnOff();
    }
    return m_noBorder;
}

const CT_OnOff& CT_FramesetSplitbar::get_noBorder() const
{
    if (m_noBorder)
    {
        return *m_noBorder;
    }
    return CT_OnOff::default_instance();
}

bool CT_FramesetSplitbar::has_flatBorders() const
{
    return m_has_flatBorders;
}

CT_OnOff* CT_FramesetSplitbar::mutable_flatBorders()
{
    m_has_flatBorders = true;
    if (!m_flatBorders)
    {
        m_flatBorders = new CT_OnOff();
    }
    return m_flatBorders;
}

const CT_OnOff& CT_FramesetSplitbar::get_flatBorders() const
{
    if (m_flatBorders)
    {
        return *m_flatBorders;
    }
    return CT_OnOff::default_instance();
}

void CT_FramesetSplitbar::clear()
{
    m_has_w = false;

    if (m_w)
    {
        delete m_w;
        m_w = NULL;
    }


    m_has_color = false;

    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }


    m_has_noBorder = false;

    if (m_noBorder)
    {
        delete m_noBorder;
        m_noBorder = NULL;
    }


    m_has_flatBorders = false;

    if (m_flatBorders)
    {
        delete m_flatBorders;
        m_flatBorders = NULL;
    }

}

void CT_FramesetSplitbar::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";


    if (m_has_w)
    {
        m_w->toXmlElem("w:w", "", _outStream);
    }


    if (m_has_color)
    {
        m_color->toXmlElem("w:color", "", _outStream);
    }


    if (m_has_noBorder)
    {
        m_noBorder->toXmlElem("w:noBorder", "", _outStream);
    }


    if (m_has_flatBorders)
    {
        m_flatBorders->toXmlElem("w:flatBorders", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_FramesetSplitbar& CT_FramesetSplitbar::default_instance()
{
    if (!CT_FramesetSplitbar::default_instance_)
    {
        CT_FramesetSplitbar::default_instance_ = new CT_FramesetSplitbar();
    }
    return *CT_FramesetSplitbar::default_instance_;
}

CT_FramesetSplitbar* CT_FramesetSplitbar::default_instance_ = NULL;

// CT_Frameset
CT_Frameset::CT_Frameset()
    :m_has_sz(false),
     m_sz(NULL),
     m_has_framesetSplitbar(false),
     m_framesetSplitbar(NULL),
     m_has_frameLayout(false),
     m_frameLayout(NULL),
     m_has_title(false),
     m_title(NULL)
{
}
CT_Frameset::~CT_Frameset()
{
    clear();
}
bool CT_Frameset::has_sz() const
{
    return m_has_sz;
}

CT_String* CT_Frameset::mutable_sz()
{
    m_has_sz = true;
    if (!m_sz)
    {
        m_sz = new CT_String();
    }
    return m_sz;
}

const CT_String& CT_Frameset::get_sz() const
{
    if (m_sz)
    {
        return *m_sz;
    }
    return CT_String::default_instance();
}

bool CT_Frameset::has_framesetSplitbar() const
{
    return m_has_framesetSplitbar;
}

CT_FramesetSplitbar* CT_Frameset::mutable_framesetSplitbar()
{
    m_has_framesetSplitbar = true;
    if (!m_framesetSplitbar)
    {
        m_framesetSplitbar = new CT_FramesetSplitbar();
    }
    return m_framesetSplitbar;
}

const CT_FramesetSplitbar& CT_Frameset::get_framesetSplitbar() const
{
    if (m_framesetSplitbar)
    {
        return *m_framesetSplitbar;
    }
    return CT_FramesetSplitbar::default_instance();
}

bool CT_Frameset::has_frameLayout() const
{
    return m_has_frameLayout;
}

CT_FrameLayout* CT_Frameset::mutable_frameLayout()
{
    m_has_frameLayout = true;
    if (!m_frameLayout)
    {
        m_frameLayout = new CT_FrameLayout();
    }
    return m_frameLayout;
}

const CT_FrameLayout& CT_Frameset::get_frameLayout() const
{
    if (m_frameLayout)
    {
        return *m_frameLayout;
    }
    return CT_FrameLayout::default_instance();
}

bool CT_Frameset::has_title() const
{
    return m_has_title;
}

CT_String* CT_Frameset::mutable_title()
{
    m_has_title = true;
    if (!m_title)
    {
        m_title = new CT_String();
    }
    return m_title;
}

const CT_String& CT_Frameset::get_title() const
{
    if (m_title)
    {
        return *m_title;
    }
    return CT_String::default_instance();
}

CT_Frameset* CT_Frameset::add_frameset()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Frameset* pNewChild = pChildGroup->mutable_frameset();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_Frame* CT_Frameset::add_frame()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Frame* pNewChild = pChildGroup->mutable_frame();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

void CT_Frameset::clear()
{
    m_has_sz = false;

    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }


    m_has_framesetSplitbar = false;

    if (m_framesetSplitbar)
    {
        delete m_framesetSplitbar;
        m_framesetSplitbar = NULL;
    }


    m_has_frameLayout = false;

    if (m_frameLayout)
    {
        delete m_frameLayout;
        m_frameLayout = NULL;
    }


    m_has_title = false;

    if (m_title)
    {
        delete m_title;
        m_title = NULL;
    }


    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
}

void CT_Frameset::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";


    if (m_has_sz)
    {
        m_sz->toXmlElem("w:sz", "", _outStream);
    }


    if (m_has_framesetSplitbar)
    {
        m_framesetSplitbar->toXmlElem("w:framesetSplitbar", "", _outStream);
    }


    if (m_has_frameLayout)
    {
        m_frameLayout->toXmlElem("w:frameLayout", "", _outStream);
    }


    if (m_has_title)
    {
        m_title->toXmlElem("w:title", "", _outStream);
    }

    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_frameset())
            {
                (*iter)->get_frameset().toXmlElem("w:frameset", "", _outStream);
            }


            else if ((*iter)->has_frame())
            {
                (*iter)->get_frame().toXmlElem("w:frame", "", _outStream);
            }


        }
    }

    _outStream << "</" << _elemName << ">";
}

const CT_Frameset& CT_Frameset::default_instance()
{
    if (!CT_Frameset::default_instance_)
    {
        CT_Frameset::default_instance_ = new CT_Frameset();
    }
    return *CT_Frameset::default_instance_;
}


// CT_Frameset::ChildGroup_1
CT_Frameset::ChildGroup_1::ChildGroup_1()
    :m_has_frameset(false),
     m_frameset(NULL),
     m_has_frame(false),
     m_frame(NULL)
{
}
bool CT_Frameset::ChildGroup_1::has_frameset() const
{
    return m_has_frameset;
}

CT_Frameset* CT_Frameset::ChildGroup_1::mutable_frameset()
{

    m_has_frame = false;

    if (m_frame)
    {
        delete m_frame;
        m_frame = NULL;
    }
    ;

    m_has_frameset = true;
    if (!m_frameset)
    {
        m_frameset = new CT_Frameset();
    }
    return m_frameset;
}

const CT_Frameset& CT_Frameset::ChildGroup_1::get_frameset() const
{
    if (m_frameset)
    {
        return *m_frameset;
    }
    return CT_Frameset::default_instance();
}

bool CT_Frameset::ChildGroup_1::has_frame() const
{
    return m_has_frame;
}

CT_Frame* CT_Frameset::ChildGroup_1::mutable_frame()
{

    m_has_frameset = false;

    if (m_frameset)
    {
        delete m_frameset;
        m_frameset = NULL;
    }
    ;

    m_has_frame = true;
    if (!m_frame)
    {
        m_frame = new CT_Frame();
    }
    return m_frame;
}

const CT_Frame& CT_Frameset::ChildGroup_1::get_frame() const
{
    if (m_frame)
    {
        return *m_frame;
    }
    return CT_Frame::default_instance();
}

CT_Frameset* CT_Frameset::default_instance_ = NULL;

// CT_NumPicBullet
CT_NumPicBullet::CT_NumPicBullet()
    :m_has_pict(false),
     m_pict(NULL),
     m_has_drawing(false),
     m_drawing(NULL),
     m_has_numPicBulletId_attr(false),
     m_numPicBulletId_attr(NULL)
{
}
CT_NumPicBullet::~CT_NumPicBullet()
{
    clear();
}
bool CT_NumPicBullet::has_pict() const
{
    return m_has_pict;
}

CT_Picture* CT_NumPicBullet::mutable_pict()
{

    m_has_drawing = false;

    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;

    m_has_pict = true;
    if (!m_pict)
    {
        m_pict = new CT_Picture();
    }
    return m_pict;
}

const CT_Picture& CT_NumPicBullet::get_pict() const
{
    if (m_pict)
    {
        return *m_pict;
    }
    return CT_Picture::default_instance();
}

bool CT_NumPicBullet::has_drawing() const
{
    return m_has_drawing;
}

CT_Drawing* CT_NumPicBullet::mutable_drawing()
{

    m_has_pict = false;

    if (m_pict)
    {
        delete m_pict;
        m_pict = NULL;
    }
    ;

    m_has_drawing = true;
    if (!m_drawing)
    {
        m_drawing = new CT_Drawing();
    }
    return m_drawing;
}

const CT_Drawing& CT_NumPicBullet::get_drawing() const
{
    if (m_drawing)
    {
        return *m_drawing;
    }
    return CT_Drawing::default_instance();
}

void CT_NumPicBullet::clear()
{
    m_has_numPicBulletId_attr = false;

    if (m_numPicBulletId_attr)
    {
        delete m_numPicBulletId_attr;
        m_numPicBulletId_attr = NULL;
    }


    m_has_pict = false;

    if (m_pict)
    {
        delete m_pict;
        m_pict = NULL;
    }


    m_has_drawing = false;

    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }

}

void CT_NumPicBullet::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_numPicBulletId_attr);
    if (m_has_numPicBulletId_attr)
    {
        m_numPicBulletId_attr->toXmlAttr("w:numPicBulletId", _outStream);
    }

    _outStream << ">";

    {
        bool elemHasValueList[2] = {m_has_pict, m_has_drawing};
        int cnt = count(elemHasValueList, elemHasValueList + 2, true);
        assert(cnt == 1);
    }


    if (m_has_pict)
    {
        m_pict->toXmlElem("w:pict", "", _outStream);
    }


    if (m_has_drawing)
    {
        m_drawing->toXmlElem("w:drawing", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_NumPicBullet& CT_NumPicBullet::default_instance()
{
    if (!CT_NumPicBullet::default_instance_)
    {
        CT_NumPicBullet::default_instance_ = new CT_NumPicBullet();
    }
    return *CT_NumPicBullet::default_instance_;
}

bool CT_NumPicBullet::has_numPicBulletId_attr() const
{
    return m_has_numPicBulletId_attr;
}

void CT_NumPicBullet::set_numPicBulletId_attr(const ST_DecimalNumber& _numPicBulletId_attr)
{
    m_has_numPicBulletId_attr = true;
    m_numPicBulletId_attr = new ST_DecimalNumber(_numPicBulletId_attr);
}

const ST_DecimalNumber& CT_NumPicBullet::get_numPicBulletId_attr() const
{
    if (m_numPicBulletId_attr)
    {
        return *m_numPicBulletId_attr;
    }
    return ST_DecimalNumber::default_instance();
}

CT_NumPicBullet* CT_NumPicBullet::default_instance_ = NULL;

// CT_LevelSuffix
CT_LevelSuffix::CT_LevelSuffix()
    :m_has_val_attr(false),
     m_val_attr(NULL)
{
}
CT_LevelSuffix::~CT_LevelSuffix()
{
    clear();
}
void CT_LevelSuffix::clear()
{
    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }

}

void CT_LevelSuffix::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_val_attr);
    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_LevelSuffix& CT_LevelSuffix::default_instance()
{
    if (!CT_LevelSuffix::default_instance_)
    {
        CT_LevelSuffix::default_instance_ = new CT_LevelSuffix();
    }
    return *CT_LevelSuffix::default_instance_;
}

bool CT_LevelSuffix::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_LevelSuffix::set_val_attr(const ST_LevelSuffix& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ST_LevelSuffix(_val_attr);
}

const ST_LevelSuffix& CT_LevelSuffix::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ST_LevelSuffix::default_instance();
}

CT_LevelSuffix* CT_LevelSuffix::default_instance_ = NULL;

// CT_LevelText
CT_LevelText::CT_LevelText()
    :m_has_val_attr(false),
     m_val_attr(NULL),
     m_has_null_attr(false),
     m_null_attr(NULL)
{
}
CT_LevelText::~CT_LevelText()
{
    clear();
}
void CT_LevelText::clear()
{
    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }


    m_has_null_attr = false;

    if (m_null_attr)
    {
        delete m_null_attr;
        m_null_attr = NULL;
    }

}

void CT_LevelText::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }



    if (m_has_null_attr)
    {
        m_null_attr->toXmlAttr("w:null", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_LevelText& CT_LevelText::default_instance()
{
    if (!CT_LevelText::default_instance_)
    {
        CT_LevelText::default_instance_ = new CT_LevelText();
    }
    return *CT_LevelText::default_instance_;
}

bool CT_LevelText::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_LevelText::set_val_attr(const ns_s::ST_String& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ns_s::ST_String(_val_attr);
}

const ns_s::ST_String& CT_LevelText::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ns_s::ST_String::default_instance();
}

bool CT_LevelText::has_null_attr() const
{
    return m_has_null_attr;
}

void CT_LevelText::set_null_attr(const ns_s::ST_OnOff& _null_attr)
{
    m_has_null_attr = true;
    m_null_attr = new ns_s::ST_OnOff(_null_attr);
}

const ns_s::ST_OnOff& CT_LevelText::get_null_attr() const
{
    if (m_null_attr)
    {
        return *m_null_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

CT_LevelText* CT_LevelText::default_instance_ = NULL;

// CT_LvlLegacy
CT_LvlLegacy::CT_LvlLegacy()
    :m_has_legacy_attr(false),
     m_legacy_attr(NULL),
     m_has_legacySpace_attr(false),
     m_legacySpace_attr(NULL),
     m_has_legacyIndent_attr(false),
     m_legacyIndent_attr(NULL)
{
}
CT_LvlLegacy::~CT_LvlLegacy()
{
    clear();
}
void CT_LvlLegacy::clear()
{
    m_has_legacy_attr = false;

    if (m_legacy_attr)
    {
        delete m_legacy_attr;
        m_legacy_attr = NULL;
    }


    m_has_legacySpace_attr = false;

    if (m_legacySpace_attr)
    {
        delete m_legacySpace_attr;
        m_legacySpace_attr = NULL;
    }


    m_has_legacyIndent_attr = false;

    if (m_legacyIndent_attr)
    {
        delete m_legacyIndent_attr;
        m_legacyIndent_attr = NULL;
    }

}

void CT_LvlLegacy::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_legacy_attr)
    {
        m_legacy_attr->toXmlAttr("w:legacy", _outStream);
    }



    if (m_has_legacySpace_attr)
    {
        m_legacySpace_attr->toXmlAttr("w:legacySpace", _outStream);
    }



    if (m_has_legacyIndent_attr)
    {
        m_legacyIndent_attr->toXmlAttr("w:legacyIndent", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_LvlLegacy& CT_LvlLegacy::default_instance()
{
    if (!CT_LvlLegacy::default_instance_)
    {
        CT_LvlLegacy::default_instance_ = new CT_LvlLegacy();
    }
    return *CT_LvlLegacy::default_instance_;
}

bool CT_LvlLegacy::has_legacy_attr() const
{
    return m_has_legacy_attr;
}

void CT_LvlLegacy::set_legacy_attr(const ns_s::ST_OnOff& _legacy_attr)
{
    m_has_legacy_attr = true;
    m_legacy_attr = new ns_s::ST_OnOff(_legacy_attr);
}

const ns_s::ST_OnOff& CT_LvlLegacy::get_legacy_attr() const
{
    if (m_legacy_attr)
    {
        return *m_legacy_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

bool CT_LvlLegacy::has_legacySpace_attr() const
{
    return m_has_legacySpace_attr;
}

void CT_LvlLegacy::set_legacySpace_attr(const ns_s::ST_TwipsMeasure& _legacySpace_attr)
{
    m_has_legacySpace_attr = true;
    m_legacySpace_attr = new ns_s::ST_TwipsMeasure(_legacySpace_attr);
}

const ns_s::ST_TwipsMeasure& CT_LvlLegacy::get_legacySpace_attr() const
{
    if (m_legacySpace_attr)
    {
        return *m_legacySpace_attr;
    }
    return ns_s::ST_TwipsMeasure::default_instance();
}

bool CT_LvlLegacy::has_legacyIndent_attr() const
{
    return m_has_legacyIndent_attr;
}

void CT_LvlLegacy::set_legacyIndent_attr(const ST_SignedTwipsMeasure& _legacyIndent_attr)
{
    m_has_legacyIndent_attr = true;
    m_legacyIndent_attr = new ST_SignedTwipsMeasure(_legacyIndent_attr);
}

const ST_SignedTwipsMeasure& CT_LvlLegacy::get_legacyIndent_attr() const
{
    if (m_legacyIndent_attr)
    {
        return *m_legacyIndent_attr;
    }
    return ST_SignedTwipsMeasure::default_instance();
}

CT_LvlLegacy* CT_LvlLegacy::default_instance_ = NULL;

// CT_Lvl
CT_Lvl::CT_Lvl()
    :m_has_start(false),
     m_start(NULL),
     m_has_numFmt(false),
     m_numFmt(NULL),
     m_has_lvlRestart(false),
     m_lvlRestart(NULL),
     m_has_pStyle(false),
     m_pStyle(NULL),
     m_has_isLgl(false),
     m_isLgl(NULL),
     m_has_suff(false),
     m_suff(NULL),
     m_has_lvlText(false),
     m_lvlText(NULL),
     m_has_lvlPicBulletId(false),
     m_lvlPicBulletId(NULL),
     m_has_legacy(false),
     m_legacy(NULL),
     m_has_lvlJc(false),
     m_lvlJc(NULL),
     m_has_pPr(false),
     m_pPr(NULL),
     m_has_rPr(false),
     m_rPr(NULL),
     m_has_ilvl_attr(false),
     m_ilvl_attr(NULL),
     m_has_tplc_attr(false),
     m_tplc_attr(NULL),
     m_has_tentative_attr(false),
     m_tentative_attr(NULL)
{
}
CT_Lvl::~CT_Lvl()
{
    clear();
}
bool CT_Lvl::has_start() const
{
    return m_has_start;
}

CT_DecimalNumber* CT_Lvl::mutable_start()
{
    m_has_start = true;
    if (!m_start)
    {
        m_start = new CT_DecimalNumber();
    }
    return m_start;
}

const CT_DecimalNumber& CT_Lvl::get_start() const
{
    if (m_start)
    {
        return *m_start;
    }
    return CT_DecimalNumber::default_instance();
}

bool CT_Lvl::has_numFmt() const
{
    return m_has_numFmt;
}

CT_NumFmt* CT_Lvl::mutable_numFmt()
{
    m_has_numFmt = true;
    if (!m_numFmt)
    {
        m_numFmt = new CT_NumFmt();
    }
    return m_numFmt;
}

const CT_NumFmt& CT_Lvl::get_numFmt() const
{
    if (m_numFmt)
    {
        return *m_numFmt;
    }
    return CT_NumFmt::default_instance();
}

bool CT_Lvl::has_lvlRestart() const
{
    return m_has_lvlRestart;
}

CT_DecimalNumber* CT_Lvl::mutable_lvlRestart()
{
    m_has_lvlRestart = true;
    if (!m_lvlRestart)
    {
        m_lvlRestart = new CT_DecimalNumber();
    }
    return m_lvlRestart;
}

const CT_DecimalNumber& CT_Lvl::get_lvlRestart() const
{
    if (m_lvlRestart)
    {
        return *m_lvlRestart;
    }
    return CT_DecimalNumber::default_instance();
}

bool CT_Lvl::has_pStyle() const
{
    return m_has_pStyle;
}

CT_String* CT_Lvl::mutable_pStyle()
{
    m_has_pStyle = true;
    if (!m_pStyle)
    {
        m_pStyle = new CT_String();
    }
    return m_pStyle;
}

const CT_String& CT_Lvl::get_pStyle() const
{
    if (m_pStyle)
    {
        return *m_pStyle;
    }
    return CT_String::default_instance();
}

bool CT_Lvl::has_isLgl() const
{
    return m_has_isLgl;
}

CT_OnOff* CT_Lvl::mutable_isLgl()
{
    m_has_isLgl = true;
    if (!m_isLgl)
    {
        m_isLgl = new CT_OnOff();
    }
    return m_isLgl;
}

const CT_OnOff& CT_Lvl::get_isLgl() const
{
    if (m_isLgl)
    {
        return *m_isLgl;
    }
    return CT_OnOff::default_instance();
}

bool CT_Lvl::has_suff() const
{
    return m_has_suff;
}

CT_LevelSuffix* CT_Lvl::mutable_suff()
{
    m_has_suff = true;
    if (!m_suff)
    {
        m_suff = new CT_LevelSuffix();
    }
    return m_suff;
}

const CT_LevelSuffix& CT_Lvl::get_suff() const
{
    if (m_suff)
    {
        return *m_suff;
    }
    return CT_LevelSuffix::default_instance();
}

bool CT_Lvl::has_lvlText() const
{
    return m_has_lvlText;
}

CT_LevelText* CT_Lvl::mutable_lvlText()
{
    m_has_lvlText = true;
    if (!m_lvlText)
    {
        m_lvlText = new CT_LevelText();
    }
    return m_lvlText;
}

const CT_LevelText& CT_Lvl::get_lvlText() const
{
    if (m_lvlText)
    {
        return *m_lvlText;
    }
    return CT_LevelText::default_instance();
}

bool CT_Lvl::has_lvlPicBulletId() const
{
    return m_has_lvlPicBulletId;
}

CT_DecimalNumber* CT_Lvl::mutable_lvlPicBulletId()
{
    m_has_lvlPicBulletId = true;
    if (!m_lvlPicBulletId)
    {
        m_lvlPicBulletId = new CT_DecimalNumber();
    }
    return m_lvlPicBulletId;
}

const CT_DecimalNumber& CT_Lvl::get_lvlPicBulletId() const
{
    if (m_lvlPicBulletId)
    {
        return *m_lvlPicBulletId;
    }
    return CT_DecimalNumber::default_instance();
}

bool CT_Lvl::has_legacy() const
{
    return m_has_legacy;
}

CT_LvlLegacy* CT_Lvl::mutable_legacy()
{
    m_has_legacy = true;
    if (!m_legacy)
    {
        m_legacy = new CT_LvlLegacy();
    }
    return m_legacy;
}

const CT_LvlLegacy& CT_Lvl::get_legacy() const
{
    if (m_legacy)
    {
        return *m_legacy;
    }
    return CT_LvlLegacy::default_instance();
}

bool CT_Lvl::has_lvlJc() const
{
    return m_has_lvlJc;
}

CT_Jc* CT_Lvl::mutable_lvlJc()
{
    m_has_lvlJc = true;
    if (!m_lvlJc)
    {
        m_lvlJc = new CT_Jc();
    }
    return m_lvlJc;
}

const CT_Jc& CT_Lvl::get_lvlJc() const
{
    if (m_lvlJc)
    {
        return *m_lvlJc;
    }
    return CT_Jc::default_instance();
}

bool CT_Lvl::has_pPr() const
{
    return m_has_pPr;
}

CT_PPrGeneral* CT_Lvl::mutable_pPr()
{
    m_has_pPr = true;
    if (!m_pPr)
    {
        m_pPr = new CT_PPrGeneral();
    }
    return m_pPr;
}

const CT_PPrGeneral& CT_Lvl::get_pPr() const
{
    if (m_pPr)
    {
        return *m_pPr;
    }
    return CT_PPrGeneral::default_instance();
}

bool CT_Lvl::has_rPr() const
{
    return m_has_rPr;
}

CT_RPr* CT_Lvl::mutable_rPr()
{
    m_has_rPr = true;
    if (!m_rPr)
    {
        m_rPr = new CT_RPr();
    }
    return m_rPr;
}

const CT_RPr& CT_Lvl::get_rPr() const
{
    if (m_rPr)
    {
        return *m_rPr;
    }
    return CT_RPr::default_instance();
}

void CT_Lvl::clear()
{
    m_has_ilvl_attr = false;

    if (m_ilvl_attr)
    {
        delete m_ilvl_attr;
        m_ilvl_attr = NULL;
    }


    m_has_tplc_attr = false;

    if (m_tplc_attr)
    {
        delete m_tplc_attr;
        m_tplc_attr = NULL;
    }


    m_has_tentative_attr = false;

    if (m_tentative_attr)
    {
        delete m_tentative_attr;
        m_tentative_attr = NULL;
    }


    m_has_start = false;

    if (m_start)
    {
        delete m_start;
        m_start = NULL;
    }


    m_has_numFmt = false;

    if (m_numFmt)
    {
        delete m_numFmt;
        m_numFmt = NULL;
    }


    m_has_lvlRestart = false;

    if (m_lvlRestart)
    {
        delete m_lvlRestart;
        m_lvlRestart = NULL;
    }


    m_has_pStyle = false;

    if (m_pStyle)
    {
        delete m_pStyle;
        m_pStyle = NULL;
    }


    m_has_isLgl = false;

    if (m_isLgl)
    {
        delete m_isLgl;
        m_isLgl = NULL;
    }


    m_has_suff = false;

    if (m_suff)
    {
        delete m_suff;
        m_suff = NULL;
    }


    m_has_lvlText = false;

    if (m_lvlText)
    {
        delete m_lvlText;
        m_lvlText = NULL;
    }


    m_has_lvlPicBulletId = false;

    if (m_lvlPicBulletId)
    {
        delete m_lvlPicBulletId;
        m_lvlPicBulletId = NULL;
    }


    m_has_legacy = false;

    if (m_legacy)
    {
        delete m_legacy;
        m_legacy = NULL;
    }


    m_has_lvlJc = false;

    if (m_lvlJc)
    {
        delete m_lvlJc;
        m_lvlJc = NULL;
    }


    m_has_pPr = false;

    if (m_pPr)
    {
        delete m_pPr;
        m_pPr = NULL;
    }


    m_has_rPr = false;

    if (m_rPr)
    {
        delete m_rPr;
        m_rPr = NULL;
    }

}

void CT_Lvl::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_ilvl_attr);
    if (m_has_ilvl_attr)
    {
        m_ilvl_attr->toXmlAttr("w:ilvl", _outStream);
    }



    if (m_has_tplc_attr)
    {
        m_tplc_attr->toXmlAttr("w:tplc", _outStream);
    }



    if (m_has_tentative_attr)
    {
        m_tentative_attr->toXmlAttr("w:tentative", _outStream);
    }

    _outStream << ">";


    if (m_has_start)
    {
        m_start->toXmlElem("w:start", "", _outStream);
    }


    if (m_has_numFmt)
    {
        m_numFmt->toXmlElem("w:numFmt", "", _outStream);
    }


    if (m_has_lvlRestart)
    {
        m_lvlRestart->toXmlElem("w:lvlRestart", "", _outStream);
    }


    if (m_has_pStyle)
    {
        m_pStyle->toXmlElem("w:pStyle", "", _outStream);
    }


    if (m_has_isLgl)
    {
        m_isLgl->toXmlElem("w:isLgl", "", _outStream);
    }


    if (m_has_suff)
    {
        m_suff->toXmlElem("w:suff", "", _outStream);
    }


    if (m_has_lvlText)
    {
        m_lvlText->toXmlElem("w:lvlText", "", _outStream);
    }


    if (m_has_lvlPicBulletId)
    {
        m_lvlPicBulletId->toXmlElem("w:lvlPicBulletId", "", _outStream);
    }


    if (m_has_legacy)
    {
        m_legacy->toXmlElem("w:legacy", "", _outStream);
    }


    if (m_has_lvlJc)
    {
        m_lvlJc->toXmlElem("w:lvlJc", "", _outStream);
    }


    if (m_has_pPr)
    {
        m_pPr->toXmlElem("w:pPr", "", _outStream);
    }


    if (m_has_rPr)
    {
        m_rPr->toXmlElem("w:rPr", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_Lvl& CT_Lvl::default_instance()
{
    if (!CT_Lvl::default_instance_)
    {
        CT_Lvl::default_instance_ = new CT_Lvl();
    }
    return *CT_Lvl::default_instance_;
}

bool CT_Lvl::has_ilvl_attr() const
{
    return m_has_ilvl_attr;
}

void CT_Lvl::set_ilvl_attr(const ST_DecimalNumber& _ilvl_attr)
{
    m_has_ilvl_attr = true;
    m_ilvl_attr = new ST_DecimalNumber(_ilvl_attr);
}

const ST_DecimalNumber& CT_Lvl::get_ilvl_attr() const
{
    if (m_ilvl_attr)
    {
        return *m_ilvl_attr;
    }
    return ST_DecimalNumber::default_instance();
}

bool CT_Lvl::has_tplc_attr() const
{
    return m_has_tplc_attr;
}

void CT_Lvl::set_tplc_attr(const ST_LongHexNumber& _tplc_attr)
{
    m_has_tplc_attr = true;
    m_tplc_attr = new ST_LongHexNumber(_tplc_attr);
}

const ST_LongHexNumber& CT_Lvl::get_tplc_attr() const
{
    if (m_tplc_attr)
    {
        return *m_tplc_attr;
    }
    return ST_LongHexNumber::default_instance();
}

bool CT_Lvl::has_tentative_attr() const
{
    return m_has_tentative_attr;
}

void CT_Lvl::set_tentative_attr(const ns_s::ST_OnOff& _tentative_attr)
{
    m_has_tentative_attr = true;
    m_tentative_attr = new ns_s::ST_OnOff(_tentative_attr);
}

const ns_s::ST_OnOff& CT_Lvl::get_tentative_attr() const
{
    if (m_tentative_attr)
    {
        return *m_tentative_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

CT_Lvl* CT_Lvl::default_instance_ = NULL;

// CT_MultiLevelType
CT_MultiLevelType::CT_MultiLevelType()
    :m_has_val_attr(false),
     m_val_attr(NULL)
{
}
CT_MultiLevelType::~CT_MultiLevelType()
{
    clear();
}
void CT_MultiLevelType::clear()
{
    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }

}

void CT_MultiLevelType::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_val_attr);
    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_MultiLevelType& CT_MultiLevelType::default_instance()
{
    if (!CT_MultiLevelType::default_instance_)
    {
        CT_MultiLevelType::default_instance_ = new CT_MultiLevelType();
    }
    return *CT_MultiLevelType::default_instance_;
}

bool CT_MultiLevelType::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_MultiLevelType::set_val_attr(const ST_MultiLevelType& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ST_MultiLevelType(_val_attr);
}

const ST_MultiLevelType& CT_MultiLevelType::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ST_MultiLevelType::default_instance();
}

CT_MultiLevelType* CT_MultiLevelType::default_instance_ = NULL;

// CT_AbstractNum
CT_AbstractNum::CT_AbstractNum()
    :m_has_nsid(false),
     m_nsid(NULL),
     m_has_multiLevelType(false),
     m_multiLevelType(NULL),
     m_has_tmpl(false),
     m_tmpl(NULL),
     m_has_name(false),
     m_name(NULL),
     m_has_styleLink(false),
     m_styleLink(NULL),
     m_has_numStyleLink(false),
     m_numStyleLink(NULL),
     m_has_abstractNumId_attr(false),
     m_abstractNumId_attr(NULL)
{
}
CT_AbstractNum::~CT_AbstractNum()
{
    clear();
}
bool CT_AbstractNum::has_nsid() const
{
    return m_has_nsid;
}

CT_LongHexNumber* CT_AbstractNum::mutable_nsid()
{
    m_has_nsid = true;
    if (!m_nsid)
    {
        m_nsid = new CT_LongHexNumber();
    }
    return m_nsid;
}

const CT_LongHexNumber& CT_AbstractNum::get_nsid() const
{
    if (m_nsid)
    {
        return *m_nsid;
    }
    return CT_LongHexNumber::default_instance();
}

bool CT_AbstractNum::has_multiLevelType() const
{
    return m_has_multiLevelType;
}

CT_MultiLevelType* CT_AbstractNum::mutable_multiLevelType()
{
    m_has_multiLevelType = true;
    if (!m_multiLevelType)
    {
        m_multiLevelType = new CT_MultiLevelType();
    }
    return m_multiLevelType;
}

const CT_MultiLevelType& CT_AbstractNum::get_multiLevelType() const
{
    if (m_multiLevelType)
    {
        return *m_multiLevelType;
    }
    return CT_MultiLevelType::default_instance();
}

bool CT_AbstractNum::has_tmpl() const
{
    return m_has_tmpl;
}

CT_LongHexNumber* CT_AbstractNum::mutable_tmpl()
{
    m_has_tmpl = true;
    if (!m_tmpl)
    {
        m_tmpl = new CT_LongHexNumber();
    }
    return m_tmpl;
}

const CT_LongHexNumber& CT_AbstractNum::get_tmpl() const
{
    if (m_tmpl)
    {
        return *m_tmpl;
    }
    return CT_LongHexNumber::default_instance();
}

bool CT_AbstractNum::has_name() const
{
    return m_has_name;
}

CT_String* CT_AbstractNum::mutable_name()
{
    m_has_name = true;
    if (!m_name)
    {
        m_name = new CT_String();
    }
    return m_name;
}

const CT_String& CT_AbstractNum::get_name() const
{
    if (m_name)
    {
        return *m_name;
    }
    return CT_String::default_instance();
}

bool CT_AbstractNum::has_styleLink() const
{
    return m_has_styleLink;
}

CT_String* CT_AbstractNum::mutable_styleLink()
{
    m_has_styleLink = true;
    if (!m_styleLink)
    {
        m_styleLink = new CT_String();
    }
    return m_styleLink;
}

const CT_String& CT_AbstractNum::get_styleLink() const
{
    if (m_styleLink)
    {
        return *m_styleLink;
    }
    return CT_String::default_instance();
}

bool CT_AbstractNum::has_numStyleLink() const
{
    return m_has_numStyleLink;
}

CT_String* CT_AbstractNum::mutable_numStyleLink()
{
    m_has_numStyleLink = true;
    if (!m_numStyleLink)
    {
        m_numStyleLink = new CT_String();
    }
    return m_numStyleLink;
}

const CT_String& CT_AbstractNum::get_numStyleLink() const
{
    if (m_numStyleLink)
    {
        return *m_numStyleLink;
    }
    return CT_String::default_instance();
}

CT_Lvl* CT_AbstractNum::add_lvl()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Lvl* pNewChild = pChildGroup->mutable_lvl();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

void CT_AbstractNum::clear()
{
    m_has_abstractNumId_attr = false;

    if (m_abstractNumId_attr)
    {
        delete m_abstractNumId_attr;
        m_abstractNumId_attr = NULL;
    }


    m_has_nsid = false;

    if (m_nsid)
    {
        delete m_nsid;
        m_nsid = NULL;
    }


    m_has_multiLevelType = false;

    if (m_multiLevelType)
    {
        delete m_multiLevelType;
        m_multiLevelType = NULL;
    }


    m_has_tmpl = false;

    if (m_tmpl)
    {
        delete m_tmpl;
        m_tmpl = NULL;
    }


    m_has_name = false;

    if (m_name)
    {
        delete m_name;
        m_name = NULL;
    }


    m_has_styleLink = false;

    if (m_styleLink)
    {
        delete m_styleLink;
        m_styleLink = NULL;
    }


    m_has_numStyleLink = false;

    if (m_numStyleLink)
    {
        delete m_numStyleLink;
        m_numStyleLink = NULL;
    }


    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
}

void CT_AbstractNum::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_abstractNumId_attr);
    if (m_has_abstractNumId_attr)
    {
        m_abstractNumId_attr->toXmlAttr("w:abstractNumId", _outStream);
    }

    _outStream << ">";


    if (m_has_nsid)
    {
        m_nsid->toXmlElem("w:nsid", "", _outStream);
    }


    if (m_has_multiLevelType)
    {
        m_multiLevelType->toXmlElem("w:multiLevelType", "", _outStream);
    }


    if (m_has_tmpl)
    {
        m_tmpl->toXmlElem("w:tmpl", "", _outStream);
    }


    if (m_has_name)
    {
        m_name->toXmlElem("w:name", "", _outStream);
    }


    if (m_has_styleLink)
    {
        m_styleLink->toXmlElem("w:styleLink", "", _outStream);
    }


    if (m_has_numStyleLink)
    {
        m_numStyleLink->toXmlElem("w:numStyleLink", "", _outStream);
    }

    {
        int elemCnt = count_if(m_childGroupList_1.begin(), m_childGroupList_1.end(), mem_fun(&ChildGroup_1::has_lvl));
        assert(0 <= elemCnt && elemCnt <= 9);
    }

    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_lvl())
            {
                (*iter)->get_lvl().toXmlElem("w:lvl", "", _outStream);
            }


        }
    }

    _outStream << "</" << _elemName << ">";
}

const CT_AbstractNum& CT_AbstractNum::default_instance()
{
    if (!CT_AbstractNum::default_instance_)
    {
        CT_AbstractNum::default_instance_ = new CT_AbstractNum();
    }
    return *CT_AbstractNum::default_instance_;
}

bool CT_AbstractNum::has_abstractNumId_attr() const
{
    return m_has_abstractNumId_attr;
}

void CT_AbstractNum::set_abstractNumId_attr(const ST_DecimalNumber& _abstractNumId_attr)
{
    m_has_abstractNumId_attr = true;
    m_abstractNumId_attr = new ST_DecimalNumber(_abstractNumId_attr);
}

const ST_DecimalNumber& CT_AbstractNum::get_abstractNumId_attr() const
{
    if (m_abstractNumId_attr)
    {
        return *m_abstractNumId_attr;
    }
    return ST_DecimalNumber::default_instance();
}


// CT_AbstractNum::ChildGroup_1
CT_AbstractNum::ChildGroup_1::ChildGroup_1()
    :m_has_lvl(false),
     m_lvl(NULL)
{
}
bool CT_AbstractNum::ChildGroup_1::has_lvl() const
{
    return m_has_lvl;
}

CT_Lvl* CT_AbstractNum::ChildGroup_1::mutable_lvl()
{

    m_has_lvl = true;
    if (!m_lvl)
    {
        m_lvl = new CT_Lvl();
    }
    return m_lvl;
}

const CT_Lvl& CT_AbstractNum::ChildGroup_1::get_lvl() const
{
    if (m_lvl)
    {
        return *m_lvl;
    }
    return CT_Lvl::default_instance();
}

CT_AbstractNum* CT_AbstractNum::default_instance_ = NULL;

// CT_NumLvl
CT_NumLvl::CT_NumLvl()
    :m_has_startOverride(false),
     m_startOverride(NULL),
     m_has_lvl(false),
     m_lvl(NULL),
     m_has_ilvl_attr(false),
     m_ilvl_attr(NULL)
{
}
CT_NumLvl::~CT_NumLvl()
{
    clear();
}
bool CT_NumLvl::has_startOverride() const
{
    return m_has_startOverride;
}

CT_DecimalNumber* CT_NumLvl::mutable_startOverride()
{
    m_has_startOverride = true;
    if (!m_startOverride)
    {
        m_startOverride = new CT_DecimalNumber();
    }
    return m_startOverride;
}

const CT_DecimalNumber& CT_NumLvl::get_startOverride() const
{
    if (m_startOverride)
    {
        return *m_startOverride;
    }
    return CT_DecimalNumber::default_instance();
}

bool CT_NumLvl::has_lvl() const
{
    return m_has_lvl;
}

CT_Lvl* CT_NumLvl::mutable_lvl()
{
    m_has_lvl = true;
    if (!m_lvl)
    {
        m_lvl = new CT_Lvl();
    }
    return m_lvl;
}

const CT_Lvl& CT_NumLvl::get_lvl() const
{
    if (m_lvl)
    {
        return *m_lvl;
    }
    return CT_Lvl::default_instance();
}

void CT_NumLvl::clear()
{
    m_has_ilvl_attr = false;

    if (m_ilvl_attr)
    {
        delete m_ilvl_attr;
        m_ilvl_attr = NULL;
    }


    m_has_startOverride = false;

    if (m_startOverride)
    {
        delete m_startOverride;
        m_startOverride = NULL;
    }


    m_has_lvl = false;

    if (m_lvl)
    {
        delete m_lvl;
        m_lvl = NULL;
    }

}

void CT_NumLvl::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_ilvl_attr);
    if (m_has_ilvl_attr)
    {
        m_ilvl_attr->toXmlAttr("w:ilvl", _outStream);
    }

    _outStream << ">";


    if (m_has_startOverride)
    {
        m_startOverride->toXmlElem("w:startOverride", "", _outStream);
    }


    if (m_has_lvl)
    {
        m_lvl->toXmlElem("w:lvl", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_NumLvl& CT_NumLvl::default_instance()
{
    if (!CT_NumLvl::default_instance_)
    {
        CT_NumLvl::default_instance_ = new CT_NumLvl();
    }
    return *CT_NumLvl::default_instance_;
}

bool CT_NumLvl::has_ilvl_attr() const
{
    return m_has_ilvl_attr;
}

void CT_NumLvl::set_ilvl_attr(const ST_DecimalNumber& _ilvl_attr)
{
    m_has_ilvl_attr = true;
    m_ilvl_attr = new ST_DecimalNumber(_ilvl_attr);
}

const ST_DecimalNumber& CT_NumLvl::get_ilvl_attr() const
{
    if (m_ilvl_attr)
    {
        return *m_ilvl_attr;
    }
    return ST_DecimalNumber::default_instance();
}

CT_NumLvl* CT_NumLvl::default_instance_ = NULL;

// CT_Num
CT_Num::CT_Num()
    :m_has_abstractNumId(false),
     m_abstractNumId(NULL),
     m_has_numId_attr(false),
     m_numId_attr(NULL)
{
}
CT_Num::~CT_Num()
{
    clear();
}
bool CT_Num::has_abstractNumId() const
{
    return m_has_abstractNumId;
}

CT_DecimalNumber* CT_Num::mutable_abstractNumId()
{
    m_has_abstractNumId = true;
    if (!m_abstractNumId)
    {
        m_abstractNumId = new CT_DecimalNumber();
    }
    return m_abstractNumId;
}

const CT_DecimalNumber& CT_Num::get_abstractNumId() const
{
    if (m_abstractNumId)
    {
        return *m_abstractNumId;
    }
    return CT_DecimalNumber::default_instance();
}

CT_NumLvl* CT_Num::add_lvlOverride()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_NumLvl* pNewChild = pChildGroup->mutable_lvlOverride();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

void CT_Num::clear()
{
    m_has_numId_attr = false;

    if (m_numId_attr)
    {
        delete m_numId_attr;
        m_numId_attr = NULL;
    }


    m_has_abstractNumId = false;

    if (m_abstractNumId)
    {
        delete m_abstractNumId;
        m_abstractNumId = NULL;
    }


    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
}

void CT_Num::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_numId_attr);
    if (m_has_numId_attr)
    {
        m_numId_attr->toXmlAttr("w:numId", _outStream);
    }

    _outStream << ">";

    assert(m_has_abstractNumId);


    if (m_has_abstractNumId)
    {
        m_abstractNumId->toXmlElem("w:abstractNumId", "", _outStream);
    }

    {
        int elemCnt = count_if(m_childGroupList_1.begin(), m_childGroupList_1.end(), mem_fun(&ChildGroup_1::has_lvlOverride));
        assert(0 <= elemCnt && elemCnt <= 9);
    }

    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_lvlOverride())
            {
                (*iter)->get_lvlOverride().toXmlElem("w:lvlOverride", "", _outStream);
            }


        }
    }

    _outStream << "</" << _elemName << ">";
}

const CT_Num& CT_Num::default_instance()
{
    if (!CT_Num::default_instance_)
    {
        CT_Num::default_instance_ = new CT_Num();
    }
    return *CT_Num::default_instance_;
}

bool CT_Num::has_numId_attr() const
{
    return m_has_numId_attr;
}

void CT_Num::set_numId_attr(const ST_DecimalNumber& _numId_attr)
{
    m_has_numId_attr = true;
    m_numId_attr = new ST_DecimalNumber(_numId_attr);
}

const ST_DecimalNumber& CT_Num::get_numId_attr() const
{
    if (m_numId_attr)
    {
        return *m_numId_attr;
    }
    return ST_DecimalNumber::default_instance();
}


// CT_Num::ChildGroup_1
CT_Num::ChildGroup_1::ChildGroup_1()
    :m_has_lvlOverride(false),
     m_lvlOverride(NULL)
{
}
bool CT_Num::ChildGroup_1::has_lvlOverride() const
{
    return m_has_lvlOverride;
}

CT_NumLvl* CT_Num::ChildGroup_1::mutable_lvlOverride()
{

    m_has_lvlOverride = true;
    if (!m_lvlOverride)
    {
        m_lvlOverride = new CT_NumLvl();
    }
    return m_lvlOverride;
}

const CT_NumLvl& CT_Num::ChildGroup_1::get_lvlOverride() const
{
    if (m_lvlOverride)
    {
        return *m_lvlOverride;
    }
    return CT_NumLvl::default_instance();
}

CT_Num* CT_Num::default_instance_ = NULL;

// CT_Numbering
CT_Numbering::CT_Numbering()
    :m_has_numIdMacAtCleanup(false),
     m_numIdMacAtCleanup(NULL)
{
}
CT_Numbering::~CT_Numbering()
{
    clear();
}
CT_NumPicBullet* CT_Numbering::add_numPicBullet()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_NumPicBullet* pNewChild = pChildGroup->mutable_numPicBullet();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_AbstractNum* CT_Numbering::add_abstractNum()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_AbstractNum* pNewChild = pChildGroup->mutable_abstractNum();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_Num* CT_Numbering::add_num()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Num* pNewChild = pChildGroup->mutable_num();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

bool CT_Numbering::has_numIdMacAtCleanup() const
{
    return m_has_numIdMacAtCleanup;
}

CT_DecimalNumber* CT_Numbering::mutable_numIdMacAtCleanup()
{
    m_has_numIdMacAtCleanup = true;
    if (!m_numIdMacAtCleanup)
    {
        m_numIdMacAtCleanup = new CT_DecimalNumber();
    }
    return m_numIdMacAtCleanup;
}

const CT_DecimalNumber& CT_Numbering::get_numIdMacAtCleanup() const
{
    if (m_numIdMacAtCleanup)
    {
        return *m_numIdMacAtCleanup;
    }
    return CT_DecimalNumber::default_instance();
}

void CT_Numbering::clear()
{
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }

    m_has_numIdMacAtCleanup = false;

    if (m_numIdMacAtCleanup)
    {
        delete m_numIdMacAtCleanup;
        m_numIdMacAtCleanup = NULL;
    }

}

void CT_Numbering::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";

    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_numPicBullet())
            {
                (*iter)->get_numPicBullet().toXmlElem("w:numPicBullet", "", _outStream);
            }


            else if ((*iter)->has_abstractNum())
            {
                (*iter)->get_abstractNum().toXmlElem("w:abstractNum", "", _outStream);
            }


            else if ((*iter)->has_num())
            {
                (*iter)->get_num().toXmlElem("w:num", "", _outStream);
            }


        }
    }


    if (m_has_numIdMacAtCleanup)
    {
        m_numIdMacAtCleanup->toXmlElem("w:numIdMacAtCleanup", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_Numbering& CT_Numbering::default_instance()
{
    if (!CT_Numbering::default_instance_)
    {
        CT_Numbering::default_instance_ = new CT_Numbering();
    }
    return *CT_Numbering::default_instance_;
}


// CT_Numbering::ChildGroup_1
CT_Numbering::ChildGroup_1::ChildGroup_1()
    :m_has_numPicBullet(false),
     m_numPicBullet(NULL),
     m_has_abstractNum(false),
     m_abstractNum(NULL),
     m_has_num(false),
     m_num(NULL)
{
}
bool CT_Numbering::ChildGroup_1::has_numPicBullet() const
{
    return m_has_numPicBullet;
}

CT_NumPicBullet* CT_Numbering::ChildGroup_1::mutable_numPicBullet()
{

    m_has_abstractNum = false;

    if (m_abstractNum)
    {
        delete m_abstractNum;
        m_abstractNum = NULL;
    }
    ;

    m_has_num = false;

    if (m_num)
    {
        delete m_num;
        m_num = NULL;
    }
    ;

    m_has_numPicBullet = true;
    if (!m_numPicBullet)
    {
        m_numPicBullet = new CT_NumPicBullet();
    }
    return m_numPicBullet;
}

const CT_NumPicBullet& CT_Numbering::ChildGroup_1::get_numPicBullet() const
{
    if (m_numPicBullet)
    {
        return *m_numPicBullet;
    }
    return CT_NumPicBullet::default_instance();
}

bool CT_Numbering::ChildGroup_1::has_abstractNum() const
{
    return m_has_abstractNum;
}

CT_AbstractNum* CT_Numbering::ChildGroup_1::mutable_abstractNum()
{

    m_has_numPicBullet = false;

    if (m_numPicBullet)
    {
        delete m_numPicBullet;
        m_numPicBullet = NULL;
    }
    ;

    m_has_num = false;

    if (m_num)
    {
        delete m_num;
        m_num = NULL;
    }
    ;

    m_has_abstractNum = true;
    if (!m_abstractNum)
    {
        m_abstractNum = new CT_AbstractNum();
    }
    return m_abstractNum;
}

const CT_AbstractNum& CT_Numbering::ChildGroup_1::get_abstractNum() const
{
    if (m_abstractNum)
    {
        return *m_abstractNum;
    }
    return CT_AbstractNum::default_instance();
}

bool CT_Numbering::ChildGroup_1::has_num() const
{
    return m_has_num;
}

CT_Num* CT_Numbering::ChildGroup_1::mutable_num()
{

    m_has_numPicBullet = false;

    if (m_numPicBullet)
    {
        delete m_numPicBullet;
        m_numPicBullet = NULL;
    }
    ;

    m_has_abstractNum = false;

    if (m_abstractNum)
    {
        delete m_abstractNum;
        m_abstractNum = NULL;
    }
    ;

    m_has_num = true;
    if (!m_num)
    {
        m_num = new CT_Num();
    }
    return m_num;
}

const CT_Num& CT_Numbering::ChildGroup_1::get_num() const
{
    if (m_num)
    {
        return *m_num;
    }
    return CT_Num::default_instance();
}

CT_Numbering* CT_Numbering::default_instance_ = NULL;

// CT_TblStylePr
CT_TblStylePr::CT_TblStylePr()
    :m_has_pPr(false),
     m_pPr(NULL),
     m_has_rPr(false),
     m_rPr(NULL),
     m_has_tblPr(false),
     m_tblPr(NULL),
     m_has_trPr(false),
     m_trPr(NULL),
     m_has_tcPr(false),
     m_tcPr(NULL),
     m_has_type_attr(false),
     m_type_attr(NULL)
{
}
CT_TblStylePr::~CT_TblStylePr()
{
    clear();
}
bool CT_TblStylePr::has_pPr() const
{
    return m_has_pPr;
}

CT_PPrGeneral* CT_TblStylePr::mutable_pPr()
{
    m_has_pPr = true;
    if (!m_pPr)
    {
        m_pPr = new CT_PPrGeneral();
    }
    return m_pPr;
}

const CT_PPrGeneral& CT_TblStylePr::get_pPr() const
{
    if (m_pPr)
    {
        return *m_pPr;
    }
    return CT_PPrGeneral::default_instance();
}

bool CT_TblStylePr::has_rPr() const
{
    return m_has_rPr;
}

CT_RPr* CT_TblStylePr::mutable_rPr()
{
    m_has_rPr = true;
    if (!m_rPr)
    {
        m_rPr = new CT_RPr();
    }
    return m_rPr;
}

const CT_RPr& CT_TblStylePr::get_rPr() const
{
    if (m_rPr)
    {
        return *m_rPr;
    }
    return CT_RPr::default_instance();
}

bool CT_TblStylePr::has_tblPr() const
{
    return m_has_tblPr;
}

CT_TblPrBase* CT_TblStylePr::mutable_tblPr()
{
    m_has_tblPr = true;
    if (!m_tblPr)
    {
        m_tblPr = new CT_TblPrBase();
    }
    return m_tblPr;
}

const CT_TblPrBase& CT_TblStylePr::get_tblPr() const
{
    if (m_tblPr)
    {
        return *m_tblPr;
    }
    return CT_TblPrBase::default_instance();
}

bool CT_TblStylePr::has_trPr() const
{
    return m_has_trPr;
}

CT_TrPr* CT_TblStylePr::mutable_trPr()
{
    m_has_trPr = true;
    if (!m_trPr)
    {
        m_trPr = new CT_TrPr();
    }
    return m_trPr;
}

const CT_TrPr& CT_TblStylePr::get_trPr() const
{
    if (m_trPr)
    {
        return *m_trPr;
    }
    return CT_TrPr::default_instance();
}

bool CT_TblStylePr::has_tcPr() const
{
    return m_has_tcPr;
}

CT_TcPr* CT_TblStylePr::mutable_tcPr()
{
    m_has_tcPr = true;
    if (!m_tcPr)
    {
        m_tcPr = new CT_TcPr();
    }
    return m_tcPr;
}

const CT_TcPr& CT_TblStylePr::get_tcPr() const
{
    if (m_tcPr)
    {
        return *m_tcPr;
    }
    return CT_TcPr::default_instance();
}

void CT_TblStylePr::clear()
{
    m_has_type_attr = false;

    if (m_type_attr)
    {
        delete m_type_attr;
        m_type_attr = NULL;
    }


    m_has_pPr = false;

    if (m_pPr)
    {
        delete m_pPr;
        m_pPr = NULL;
    }


    m_has_rPr = false;

    if (m_rPr)
    {
        delete m_rPr;
        m_rPr = NULL;
    }


    m_has_tblPr = false;

    if (m_tblPr)
    {
        delete m_tblPr;
        m_tblPr = NULL;
    }


    m_has_trPr = false;

    if (m_trPr)
    {
        delete m_trPr;
        m_trPr = NULL;
    }


    m_has_tcPr = false;

    if (m_tcPr)
    {
        delete m_tcPr;
        m_tcPr = NULL;
    }

}

void CT_TblStylePr::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_type_attr);
    if (m_has_type_attr)
    {
        m_type_attr->toXmlAttr("w:type", _outStream);
    }

    _outStream << ">";


    if (m_has_pPr)
    {
        m_pPr->toXmlElem("w:pPr", "", _outStream);
    }


    if (m_has_rPr)
    {
        m_rPr->toXmlElem("w:rPr", "", _outStream);
    }


    if (m_has_tblPr)
    {
        m_tblPr->toXmlElem("w:tblPr", "", _outStream);
    }


    if (m_has_trPr)
    {
        m_trPr->toXmlElem("w:trPr", "", _outStream);
    }


    if (m_has_tcPr)
    {
        m_tcPr->toXmlElem("w:tcPr", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_TblStylePr& CT_TblStylePr::default_instance()
{
    if (!CT_TblStylePr::default_instance_)
    {
        CT_TblStylePr::default_instance_ = new CT_TblStylePr();
    }
    return *CT_TblStylePr::default_instance_;
}

bool CT_TblStylePr::has_type_attr() const
{
    return m_has_type_attr;
}

void CT_TblStylePr::set_type_attr(const ST_TblStyleOverrideType& _type_attr)
{
    m_has_type_attr = true;
    m_type_attr = new ST_TblStyleOverrideType(_type_attr);
}

const ST_TblStyleOverrideType& CT_TblStylePr::get_type_attr() const
{
    if (m_type_attr)
    {
        return *m_type_attr;
    }
    return ST_TblStyleOverrideType::default_instance();
}

CT_TblStylePr* CT_TblStylePr::default_instance_ = NULL;

// CT_Style
CT_Style::CT_Style()
    :m_has_name(false),
     m_name(NULL),
     m_has_aliases(false),
     m_aliases(NULL),
     m_has_basedOn(false),
     m_basedOn(NULL),
     m_has_next(false),
     m_next(NULL),
     m_has_link(false),
     m_link(NULL),
     m_has_autoRedefine(false),
     m_autoRedefine(NULL),
     m_has_hidden(false),
     m_hidden(NULL),
     m_has_uiPriority(false),
     m_uiPriority(NULL),
     m_has_semiHidden(false),
     m_semiHidden(NULL),
     m_has_unhideWhenUsed(false),
     m_unhideWhenUsed(NULL),
     m_has_qFormat(false),
     m_qFormat(NULL),
     m_has_locked(false),
     m_locked(NULL),
     m_has_personal(false),
     m_personal(NULL),
     m_has_personalCompose(false),
     m_personalCompose(NULL),
     m_has_personalReply(false),
     m_personalReply(NULL),
     m_has_rsid(false),
     m_rsid(NULL),
     m_has_pPr(false),
     m_pPr(NULL),
     m_has_rPr(false),
     m_rPr(NULL),
     m_has_tblPr(false),
     m_tblPr(NULL),
     m_has_trPr(false),
     m_trPr(NULL),
     m_has_tcPr(false),
     m_tcPr(NULL),
     m_has_type_attr(false),
     m_type_attr(NULL),
     m_has_styleId_attr(false),
     m_styleId_attr(NULL),
     m_has_default_attr(false),
     m_default_attr(NULL),
     m_has_customStyle_attr(false),
     m_customStyle_attr(NULL)
{
}
CT_Style::~CT_Style()
{
    clear();
}
bool CT_Style::has_name() const
{
    return m_has_name;
}

CT_String* CT_Style::mutable_name()
{
    m_has_name = true;
    if (!m_name)
    {
        m_name = new CT_String();
    }
    return m_name;
}

const CT_String& CT_Style::get_name() const
{
    if (m_name)
    {
        return *m_name;
    }
    return CT_String::default_instance();
}

bool CT_Style::has_aliases() const
{
    return m_has_aliases;
}

CT_String* CT_Style::mutable_aliases()
{
    m_has_aliases = true;
    if (!m_aliases)
    {
        m_aliases = new CT_String();
    }
    return m_aliases;
}

const CT_String& CT_Style::get_aliases() const
{
    if (m_aliases)
    {
        return *m_aliases;
    }
    return CT_String::default_instance();
}

bool CT_Style::has_basedOn() const
{
    return m_has_basedOn;
}

CT_String* CT_Style::mutable_basedOn()
{
    m_has_basedOn = true;
    if (!m_basedOn)
    {
        m_basedOn = new CT_String();
    }
    return m_basedOn;
}

const CT_String& CT_Style::get_basedOn() const
{
    if (m_basedOn)
    {
        return *m_basedOn;
    }
    return CT_String::default_instance();
}

bool CT_Style::has_next() const
{
    return m_has_next;
}

CT_String* CT_Style::mutable_next()
{
    m_has_next = true;
    if (!m_next)
    {
        m_next = new CT_String();
    }
    return m_next;
}

const CT_String& CT_Style::get_next() const
{
    if (m_next)
    {
        return *m_next;
    }
    return CT_String::default_instance();
}

bool CT_Style::has_link() const
{
    return m_has_link;
}

CT_String* CT_Style::mutable_link()
{
    m_has_link = true;
    if (!m_link)
    {
        m_link = new CT_String();
    }
    return m_link;
}

const CT_String& CT_Style::get_link() const
{
    if (m_link)
    {
        return *m_link;
    }
    return CT_String::default_instance();
}

bool CT_Style::has_autoRedefine() const
{
    return m_has_autoRedefine;
}

CT_OnOff* CT_Style::mutable_autoRedefine()
{
    m_has_autoRedefine = true;
    if (!m_autoRedefine)
    {
        m_autoRedefine = new CT_OnOff();
    }
    return m_autoRedefine;
}

const CT_OnOff& CT_Style::get_autoRedefine() const
{
    if (m_autoRedefine)
    {
        return *m_autoRedefine;
    }
    return CT_OnOff::default_instance();
}

bool CT_Style::has_hidden() const
{
    return m_has_hidden;
}

CT_OnOff* CT_Style::mutable_hidden()
{
    m_has_hidden = true;
    if (!m_hidden)
    {
        m_hidden = new CT_OnOff();
    }
    return m_hidden;
}

const CT_OnOff& CT_Style::get_hidden() const
{
    if (m_hidden)
    {
        return *m_hidden;
    }
    return CT_OnOff::default_instance();
}

bool CT_Style::has_uiPriority() const
{
    return m_has_uiPriority;
}

CT_DecimalNumber* CT_Style::mutable_uiPriority()
{
    m_has_uiPriority = true;
    if (!m_uiPriority)
    {
        m_uiPriority = new CT_DecimalNumber();
    }
    return m_uiPriority;
}

const CT_DecimalNumber& CT_Style::get_uiPriority() const
{
    if (m_uiPriority)
    {
        return *m_uiPriority;
    }
    return CT_DecimalNumber::default_instance();
}

bool CT_Style::has_semiHidden() const
{
    return m_has_semiHidden;
}

CT_OnOff* CT_Style::mutable_semiHidden()
{
    m_has_semiHidden = true;
    if (!m_semiHidden)
    {
        m_semiHidden = new CT_OnOff();
    }
    return m_semiHidden;
}

const CT_OnOff& CT_Style::get_semiHidden() const
{
    if (m_semiHidden)
    {
        return *m_semiHidden;
    }
    return CT_OnOff::default_instance();
}

bool CT_Style::has_unhideWhenUsed() const
{
    return m_has_unhideWhenUsed;
}

CT_OnOff* CT_Style::mutable_unhideWhenUsed()
{
    m_has_unhideWhenUsed = true;
    if (!m_unhideWhenUsed)
    {
        m_unhideWhenUsed = new CT_OnOff();
    }
    return m_unhideWhenUsed;
}

const CT_OnOff& CT_Style::get_unhideWhenUsed() const
{
    if (m_unhideWhenUsed)
    {
        return *m_unhideWhenUsed;
    }
    return CT_OnOff::default_instance();
}

bool CT_Style::has_qFormat() const
{
    return m_has_qFormat;
}

CT_OnOff* CT_Style::mutable_qFormat()
{
    m_has_qFormat = true;
    if (!m_qFormat)
    {
        m_qFormat = new CT_OnOff();
    }
    return m_qFormat;
}

const CT_OnOff& CT_Style::get_qFormat() const
{
    if (m_qFormat)
    {
        return *m_qFormat;
    }
    return CT_OnOff::default_instance();
}

bool CT_Style::has_locked() const
{
    return m_has_locked;
}

CT_OnOff* CT_Style::mutable_locked()
{
    m_has_locked = true;
    if (!m_locked)
    {
        m_locked = new CT_OnOff();
    }
    return m_locked;
}

const CT_OnOff& CT_Style::get_locked() const
{
    if (m_locked)
    {
        return *m_locked;
    }
    return CT_OnOff::default_instance();
}

bool CT_Style::has_personal() const
{
    return m_has_personal;
}

CT_OnOff* CT_Style::mutable_personal()
{
    m_has_personal = true;
    if (!m_personal)
    {
        m_personal = new CT_OnOff();
    }
    return m_personal;
}

const CT_OnOff& CT_Style::get_personal() const
{
    if (m_personal)
    {
        return *m_personal;
    }
    return CT_OnOff::default_instance();
}

bool CT_Style::has_personalCompose() const
{
    return m_has_personalCompose;
}

CT_OnOff* CT_Style::mutable_personalCompose()
{
    m_has_personalCompose = true;
    if (!m_personalCompose)
    {
        m_personalCompose = new CT_OnOff();
    }
    return m_personalCompose;
}

const CT_OnOff& CT_Style::get_personalCompose() const
{
    if (m_personalCompose)
    {
        return *m_personalCompose;
    }
    return CT_OnOff::default_instance();
}

bool CT_Style::has_personalReply() const
{
    return m_has_personalReply;
}

CT_OnOff* CT_Style::mutable_personalReply()
{
    m_has_personalReply = true;
    if (!m_personalReply)
    {
        m_personalReply = new CT_OnOff();
    }
    return m_personalReply;
}

const CT_OnOff& CT_Style::get_personalReply() const
{
    if (m_personalReply)
    {
        return *m_personalReply;
    }
    return CT_OnOff::default_instance();
}

bool CT_Style::has_rsid() const
{
    return m_has_rsid;
}

CT_LongHexNumber* CT_Style::mutable_rsid()
{
    m_has_rsid = true;
    if (!m_rsid)
    {
        m_rsid = new CT_LongHexNumber();
    }
    return m_rsid;
}

const CT_LongHexNumber& CT_Style::get_rsid() const
{
    if (m_rsid)
    {
        return *m_rsid;
    }
    return CT_LongHexNumber::default_instance();
}

bool CT_Style::has_pPr() const
{
    return m_has_pPr;
}

CT_PPrGeneral* CT_Style::mutable_pPr()
{
    m_has_pPr = true;
    if (!m_pPr)
    {
        m_pPr = new CT_PPrGeneral();
    }
    return m_pPr;
}

const CT_PPrGeneral& CT_Style::get_pPr() const
{
    if (m_pPr)
    {
        return *m_pPr;
    }
    return CT_PPrGeneral::default_instance();
}

bool CT_Style::has_rPr() const
{
    return m_has_rPr;
}

CT_RPr* CT_Style::mutable_rPr()
{
    m_has_rPr = true;
    if (!m_rPr)
    {
        m_rPr = new CT_RPr();
    }
    return m_rPr;
}

const CT_RPr& CT_Style::get_rPr() const
{
    if (m_rPr)
    {
        return *m_rPr;
    }
    return CT_RPr::default_instance();
}

bool CT_Style::has_tblPr() const
{
    return m_has_tblPr;
}

CT_TblPrBase* CT_Style::mutable_tblPr()
{
    m_has_tblPr = true;
    if (!m_tblPr)
    {
        m_tblPr = new CT_TblPrBase();
    }
    return m_tblPr;
}

const CT_TblPrBase& CT_Style::get_tblPr() const
{
    if (m_tblPr)
    {
        return *m_tblPr;
    }
    return CT_TblPrBase::default_instance();
}

bool CT_Style::has_trPr() const
{
    return m_has_trPr;
}

CT_TrPr* CT_Style::mutable_trPr()
{
    m_has_trPr = true;
    if (!m_trPr)
    {
        m_trPr = new CT_TrPr();
    }
    return m_trPr;
}

const CT_TrPr& CT_Style::get_trPr() const
{
    if (m_trPr)
    {
        return *m_trPr;
    }
    return CT_TrPr::default_instance();
}

bool CT_Style::has_tcPr() const
{
    return m_has_tcPr;
}

CT_TcPr* CT_Style::mutable_tcPr()
{
    m_has_tcPr = true;
    if (!m_tcPr)
    {
        m_tcPr = new CT_TcPr();
    }
    return m_tcPr;
}

const CT_TcPr& CT_Style::get_tcPr() const
{
    if (m_tcPr)
    {
        return *m_tcPr;
    }
    return CT_TcPr::default_instance();
}

CT_TblStylePr* CT_Style::add_tblStylePr()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_TblStylePr* pNewChild = pChildGroup->mutable_tblStylePr();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

void CT_Style::clear()
{
    m_has_type_attr = false;

    if (m_type_attr)
    {
        delete m_type_attr;
        m_type_attr = NULL;
    }


    m_has_styleId_attr = false;

    if (m_styleId_attr)
    {
        delete m_styleId_attr;
        m_styleId_attr = NULL;
    }


    m_has_default_attr = false;

    if (m_default_attr)
    {
        delete m_default_attr;
        m_default_attr = NULL;
    }


    m_has_customStyle_attr = false;

    if (m_customStyle_attr)
    {
        delete m_customStyle_attr;
        m_customStyle_attr = NULL;
    }


    m_has_name = false;

    if (m_name)
    {
        delete m_name;
        m_name = NULL;
    }


    m_has_aliases = false;

    if (m_aliases)
    {
        delete m_aliases;
        m_aliases = NULL;
    }


    m_has_basedOn = false;

    if (m_basedOn)
    {
        delete m_basedOn;
        m_basedOn = NULL;
    }


    m_has_next = false;

    if (m_next)
    {
        delete m_next;
        m_next = NULL;
    }


    m_has_link = false;

    if (m_link)
    {
        delete m_link;
        m_link = NULL;
    }


    m_has_autoRedefine = false;

    if (m_autoRedefine)
    {
        delete m_autoRedefine;
        m_autoRedefine = NULL;
    }


    m_has_hidden = false;

    if (m_hidden)
    {
        delete m_hidden;
        m_hidden = NULL;
    }


    m_has_uiPriority = false;

    if (m_uiPriority)
    {
        delete m_uiPriority;
        m_uiPriority = NULL;
    }


    m_has_semiHidden = false;

    if (m_semiHidden)
    {
        delete m_semiHidden;
        m_semiHidden = NULL;
    }


    m_has_unhideWhenUsed = false;

    if (m_unhideWhenUsed)
    {
        delete m_unhideWhenUsed;
        m_unhideWhenUsed = NULL;
    }


    m_has_qFormat = false;

    if (m_qFormat)
    {
        delete m_qFormat;
        m_qFormat = NULL;
    }


    m_has_locked = false;

    if (m_locked)
    {
        delete m_locked;
        m_locked = NULL;
    }


    m_has_personal = false;

    if (m_personal)
    {
        delete m_personal;
        m_personal = NULL;
    }


    m_has_personalCompose = false;

    if (m_personalCompose)
    {
        delete m_personalCompose;
        m_personalCompose = NULL;
    }


    m_has_personalReply = false;

    if (m_personalReply)
    {
        delete m_personalReply;
        m_personalReply = NULL;
    }


    m_has_rsid = false;

    if (m_rsid)
    {
        delete m_rsid;
        m_rsid = NULL;
    }


    m_has_pPr = false;

    if (m_pPr)
    {
        delete m_pPr;
        m_pPr = NULL;
    }


    m_has_rPr = false;

    if (m_rPr)
    {
        delete m_rPr;
        m_rPr = NULL;
    }


    m_has_tblPr = false;

    if (m_tblPr)
    {
        delete m_tblPr;
        m_tblPr = NULL;
    }


    m_has_trPr = false;

    if (m_trPr)
    {
        delete m_trPr;
        m_trPr = NULL;
    }


    m_has_tcPr = false;

    if (m_tcPr)
    {
        delete m_tcPr;
        m_tcPr = NULL;
    }


    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
}

void CT_Style::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_type_attr)
    {
        m_type_attr->toXmlAttr("w:type", _outStream);
    }



    if (m_has_styleId_attr)
    {
        m_styleId_attr->toXmlAttr("w:styleId", _outStream);
    }



    if (m_has_default_attr)
    {
        m_default_attr->toXmlAttr("w:default", _outStream);
    }



    if (m_has_customStyle_attr)
    {
        m_customStyle_attr->toXmlAttr("w:customStyle", _outStream);
    }

    _outStream << ">";


    if (m_has_name)
    {
        m_name->toXmlElem("w:name", "", _outStream);
    }


    if (m_has_aliases)
    {
        m_aliases->toXmlElem("w:aliases", "", _outStream);
    }


    if (m_has_basedOn)
    {
        m_basedOn->toXmlElem("w:basedOn", "", _outStream);
    }


    if (m_has_next)
    {
        m_next->toXmlElem("w:next", "", _outStream);
    }


    if (m_has_link)
    {
        m_link->toXmlElem("w:link", "", _outStream);
    }


    if (m_has_autoRedefine)
    {
        m_autoRedefine->toXmlElem("w:autoRedefine", "", _outStream);
    }


    if (m_has_hidden)
    {
        m_hidden->toXmlElem("w:hidden", "", _outStream);
    }


    if (m_has_uiPriority)
    {
        m_uiPriority->toXmlElem("w:uiPriority", "", _outStream);
    }


    if (m_has_semiHidden)
    {
        m_semiHidden->toXmlElem("w:semiHidden", "", _outStream);
    }


    if (m_has_unhideWhenUsed)
    {
        m_unhideWhenUsed->toXmlElem("w:unhideWhenUsed", "", _outStream);
    }


    if (m_has_qFormat)
    {
        m_qFormat->toXmlElem("w:qFormat", "", _outStream);
    }


    if (m_has_locked)
    {
        m_locked->toXmlElem("w:locked", "", _outStream);
    }


    if (m_has_personal)
    {
        m_personal->toXmlElem("w:personal", "", _outStream);
    }


    if (m_has_personalCompose)
    {
        m_personalCompose->toXmlElem("w:personalCompose", "", _outStream);
    }


    if (m_has_personalReply)
    {
        m_personalReply->toXmlElem("w:personalReply", "", _outStream);
    }


    if (m_has_rsid)
    {
        m_rsid->toXmlElem("w:rsid", "", _outStream);
    }


    if (m_has_pPr)
    {
        m_pPr->toXmlElem("w:pPr", "", _outStream);
    }


    if (m_has_rPr)
    {
        m_rPr->toXmlElem("w:rPr", "", _outStream);
    }


    if (m_has_tblPr)
    {
        m_tblPr->toXmlElem("w:tblPr", "", _outStream);
    }


    if (m_has_trPr)
    {
        m_trPr->toXmlElem("w:trPr", "", _outStream);
    }


    if (m_has_tcPr)
    {
        m_tcPr->toXmlElem("w:tcPr", "", _outStream);
    }

    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_tblStylePr())
            {
                (*iter)->get_tblStylePr().toXmlElem("w:tblStylePr", "", _outStream);
            }


        }
    }

    _outStream << "</" << _elemName << ">";
}

const CT_Style& CT_Style::default_instance()
{
    if (!CT_Style::default_instance_)
    {
        CT_Style::default_instance_ = new CT_Style();
    }
    return *CT_Style::default_instance_;
}

bool CT_Style::has_type_attr() const
{
    return m_has_type_attr;
}

void CT_Style::set_type_attr(const ST_StyleType& _type_attr)
{
    m_has_type_attr = true;
    m_type_attr = new ST_StyleType(_type_attr);
}

const ST_StyleType& CT_Style::get_type_attr() const
{
    if (m_type_attr)
    {
        return *m_type_attr;
    }
    return ST_StyleType::default_instance();
}

bool CT_Style::has_styleId_attr() const
{
    return m_has_styleId_attr;
}

void CT_Style::set_styleId_attr(const ns_s::ST_String& _styleId_attr)
{
    m_has_styleId_attr = true;
    m_styleId_attr = new ns_s::ST_String(_styleId_attr);
}

const ns_s::ST_String& CT_Style::get_styleId_attr() const
{
    if (m_styleId_attr)
    {
        return *m_styleId_attr;
    }
    return ns_s::ST_String::default_instance();
}

bool CT_Style::has_default_attr() const
{
    return m_has_default_attr;
}

void CT_Style::set_default_attr(const ns_s::ST_OnOff& _default_attr)
{
    m_has_default_attr = true;
    m_default_attr = new ns_s::ST_OnOff(_default_attr);
}

const ns_s::ST_OnOff& CT_Style::get_default_attr() const
{
    if (m_default_attr)
    {
        return *m_default_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

bool CT_Style::has_customStyle_attr() const
{
    return m_has_customStyle_attr;
}

void CT_Style::set_customStyle_attr(const ns_s::ST_OnOff& _customStyle_attr)
{
    m_has_customStyle_attr = true;
    m_customStyle_attr = new ns_s::ST_OnOff(_customStyle_attr);
}

const ns_s::ST_OnOff& CT_Style::get_customStyle_attr() const
{
    if (m_customStyle_attr)
    {
        return *m_customStyle_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}


// CT_Style::ChildGroup_1
CT_Style::ChildGroup_1::ChildGroup_1()
    :m_has_tblStylePr(false),
     m_tblStylePr(NULL)
{
}
bool CT_Style::ChildGroup_1::has_tblStylePr() const
{
    return m_has_tblStylePr;
}

CT_TblStylePr* CT_Style::ChildGroup_1::mutable_tblStylePr()
{

    m_has_tblStylePr = true;
    if (!m_tblStylePr)
    {
        m_tblStylePr = new CT_TblStylePr();
    }
    return m_tblStylePr;
}

const CT_TblStylePr& CT_Style::ChildGroup_1::get_tblStylePr() const
{
    if (m_tblStylePr)
    {
        return *m_tblStylePr;
    }
    return CT_TblStylePr::default_instance();
}

CT_Style* CT_Style::default_instance_ = NULL;

// CT_LsdException
CT_LsdException::CT_LsdException()
    :m_has_name_attr(false),
     m_name_attr(NULL),
     m_has_locked_attr(false),
     m_locked_attr(NULL),
     m_has_uiPriority_attr(false),
     m_uiPriority_attr(NULL),
     m_has_semiHidden_attr(false),
     m_semiHidden_attr(NULL),
     m_has_unhideWhenUsed_attr(false),
     m_unhideWhenUsed_attr(NULL),
     m_has_qFormat_attr(false),
     m_qFormat_attr(NULL)
{
}
CT_LsdException::~CT_LsdException()
{
    clear();
}
void CT_LsdException::clear()
{
    m_has_name_attr = false;

    if (m_name_attr)
    {
        delete m_name_attr;
        m_name_attr = NULL;
    }


    m_has_locked_attr = false;

    if (m_locked_attr)
    {
        delete m_locked_attr;
        m_locked_attr = NULL;
    }


    m_has_uiPriority_attr = false;

    if (m_uiPriority_attr)
    {
        delete m_uiPriority_attr;
        m_uiPriority_attr = NULL;
    }


    m_has_semiHidden_attr = false;

    if (m_semiHidden_attr)
    {
        delete m_semiHidden_attr;
        m_semiHidden_attr = NULL;
    }


    m_has_unhideWhenUsed_attr = false;

    if (m_unhideWhenUsed_attr)
    {
        delete m_unhideWhenUsed_attr;
        m_unhideWhenUsed_attr = NULL;
    }


    m_has_qFormat_attr = false;

    if (m_qFormat_attr)
    {
        delete m_qFormat_attr;
        m_qFormat_attr = NULL;
    }

}

void CT_LsdException::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_name_attr);
    if (m_has_name_attr)
    {
        m_name_attr->toXmlAttr("w:name", _outStream);
    }



    if (m_has_locked_attr)
    {
        m_locked_attr->toXmlAttr("w:locked", _outStream);
    }



    if (m_has_uiPriority_attr)
    {
        m_uiPriority_attr->toXmlAttr("w:uiPriority", _outStream);
    }



    if (m_has_semiHidden_attr)
    {
        m_semiHidden_attr->toXmlAttr("w:semiHidden", _outStream);
    }



    if (m_has_unhideWhenUsed_attr)
    {
        m_unhideWhenUsed_attr->toXmlAttr("w:unhideWhenUsed", _outStream);
    }



    if (m_has_qFormat_attr)
    {
        m_qFormat_attr->toXmlAttr("w:qFormat", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_LsdException& CT_LsdException::default_instance()
{
    if (!CT_LsdException::default_instance_)
    {
        CT_LsdException::default_instance_ = new CT_LsdException();
    }
    return *CT_LsdException::default_instance_;
}

bool CT_LsdException::has_name_attr() const
{
    return m_has_name_attr;
}

void CT_LsdException::set_name_attr(const ns_s::ST_String& _name_attr)
{
    m_has_name_attr = true;
    m_name_attr = new ns_s::ST_String(_name_attr);
}

const ns_s::ST_String& CT_LsdException::get_name_attr() const
{
    if (m_name_attr)
    {
        return *m_name_attr;
    }
    return ns_s::ST_String::default_instance();
}

bool CT_LsdException::has_locked_attr() const
{
    return m_has_locked_attr;
}

void CT_LsdException::set_locked_attr(const ns_s::ST_OnOff& _locked_attr)
{
    m_has_locked_attr = true;
    m_locked_attr = new ns_s::ST_OnOff(_locked_attr);
}

const ns_s::ST_OnOff& CT_LsdException::get_locked_attr() const
{
    if (m_locked_attr)
    {
        return *m_locked_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

bool CT_LsdException::has_uiPriority_attr() const
{
    return m_has_uiPriority_attr;
}

void CT_LsdException::set_uiPriority_attr(const ST_DecimalNumber& _uiPriority_attr)
{
    m_has_uiPriority_attr = true;
    m_uiPriority_attr = new ST_DecimalNumber(_uiPriority_attr);
}

const ST_DecimalNumber& CT_LsdException::get_uiPriority_attr() const
{
    if (m_uiPriority_attr)
    {
        return *m_uiPriority_attr;
    }
    return ST_DecimalNumber::default_instance();
}

bool CT_LsdException::has_semiHidden_attr() const
{
    return m_has_semiHidden_attr;
}

void CT_LsdException::set_semiHidden_attr(const ns_s::ST_OnOff& _semiHidden_attr)
{
    m_has_semiHidden_attr = true;
    m_semiHidden_attr = new ns_s::ST_OnOff(_semiHidden_attr);
}

const ns_s::ST_OnOff& CT_LsdException::get_semiHidden_attr() const
{
    if (m_semiHidden_attr)
    {
        return *m_semiHidden_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

bool CT_LsdException::has_unhideWhenUsed_attr() const
{
    return m_has_unhideWhenUsed_attr;
}

void CT_LsdException::set_unhideWhenUsed_attr(const ns_s::ST_OnOff& _unhideWhenUsed_attr)
{
    m_has_unhideWhenUsed_attr = true;
    m_unhideWhenUsed_attr = new ns_s::ST_OnOff(_unhideWhenUsed_attr);
}

const ns_s::ST_OnOff& CT_LsdException::get_unhideWhenUsed_attr() const
{
    if (m_unhideWhenUsed_attr)
    {
        return *m_unhideWhenUsed_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

bool CT_LsdException::has_qFormat_attr() const
{
    return m_has_qFormat_attr;
}

void CT_LsdException::set_qFormat_attr(const ns_s::ST_OnOff& _qFormat_attr)
{
    m_has_qFormat_attr = true;
    m_qFormat_attr = new ns_s::ST_OnOff(_qFormat_attr);
}

const ns_s::ST_OnOff& CT_LsdException::get_qFormat_attr() const
{
    if (m_qFormat_attr)
    {
        return *m_qFormat_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

CT_LsdException* CT_LsdException::default_instance_ = NULL;

// CT_LatentStyles
CT_LatentStyles::CT_LatentStyles()
    :m_has_defLockedState_attr(false),
     m_defLockedState_attr(NULL),
     m_has_defUIPriority_attr(false),
     m_defUIPriority_attr(NULL),
     m_has_defSemiHidden_attr(false),
     m_defSemiHidden_attr(NULL),
     m_has_defUnhideWhenUsed_attr(false),
     m_defUnhideWhenUsed_attr(NULL),
     m_has_defQFormat_attr(false),
     m_defQFormat_attr(NULL),
     m_has_count_attr(false),
     m_count_attr(NULL)
{
}
CT_LatentStyles::~CT_LatentStyles()
{
    clear();
}
CT_LsdException* CT_LatentStyles::add_lsdException()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_LsdException* pNewChild = pChildGroup->mutable_lsdException();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

void CT_LatentStyles::clear()
{
    m_has_defLockedState_attr = false;

    if (m_defLockedState_attr)
    {
        delete m_defLockedState_attr;
        m_defLockedState_attr = NULL;
    }


    m_has_defUIPriority_attr = false;

    if (m_defUIPriority_attr)
    {
        delete m_defUIPriority_attr;
        m_defUIPriority_attr = NULL;
    }


    m_has_defSemiHidden_attr = false;

    if (m_defSemiHidden_attr)
    {
        delete m_defSemiHidden_attr;
        m_defSemiHidden_attr = NULL;
    }


    m_has_defUnhideWhenUsed_attr = false;

    if (m_defUnhideWhenUsed_attr)
    {
        delete m_defUnhideWhenUsed_attr;
        m_defUnhideWhenUsed_attr = NULL;
    }


    m_has_defQFormat_attr = false;

    if (m_defQFormat_attr)
    {
        delete m_defQFormat_attr;
        m_defQFormat_attr = NULL;
    }


    m_has_count_attr = false;

    if (m_count_attr)
    {
        delete m_count_attr;
        m_count_attr = NULL;
    }


    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
}

void CT_LatentStyles::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_defLockedState_attr)
    {
        m_defLockedState_attr->toXmlAttr("w:defLockedState", _outStream);
    }



    if (m_has_defUIPriority_attr)
    {
        m_defUIPriority_attr->toXmlAttr("w:defUIPriority", _outStream);
    }



    if (m_has_defSemiHidden_attr)
    {
        m_defSemiHidden_attr->toXmlAttr("w:defSemiHidden", _outStream);
    }



    if (m_has_defUnhideWhenUsed_attr)
    {
        m_defUnhideWhenUsed_attr->toXmlAttr("w:defUnhideWhenUsed", _outStream);
    }



    if (m_has_defQFormat_attr)
    {
        m_defQFormat_attr->toXmlAttr("w:defQFormat", _outStream);
    }



    if (m_has_count_attr)
    {
        m_count_attr->toXmlAttr("w:count", _outStream);
    }

    _outStream << ">";

    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_lsdException())
            {
                (*iter)->get_lsdException().toXmlElem("w:lsdException", "", _outStream);
            }


        }
    }

    _outStream << "</" << _elemName << ">";
}

const CT_LatentStyles& CT_LatentStyles::default_instance()
{
    if (!CT_LatentStyles::default_instance_)
    {
        CT_LatentStyles::default_instance_ = new CT_LatentStyles();
    }
    return *CT_LatentStyles::default_instance_;
}

bool CT_LatentStyles::has_defLockedState_attr() const
{
    return m_has_defLockedState_attr;
}

void CT_LatentStyles::set_defLockedState_attr(const ns_s::ST_OnOff& _defLockedState_attr)
{
    m_has_defLockedState_attr = true;
    m_defLockedState_attr = new ns_s::ST_OnOff(_defLockedState_attr);
}

const ns_s::ST_OnOff& CT_LatentStyles::get_defLockedState_attr() const
{
    if (m_defLockedState_attr)
    {
        return *m_defLockedState_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

bool CT_LatentStyles::has_defUIPriority_attr() const
{
    return m_has_defUIPriority_attr;
}

void CT_LatentStyles::set_defUIPriority_attr(const ST_DecimalNumber& _defUIPriority_attr)
{
    m_has_defUIPriority_attr = true;
    m_defUIPriority_attr = new ST_DecimalNumber(_defUIPriority_attr);
}

const ST_DecimalNumber& CT_LatentStyles::get_defUIPriority_attr() const
{
    if (m_defUIPriority_attr)
    {
        return *m_defUIPriority_attr;
    }
    return ST_DecimalNumber::default_instance();
}

bool CT_LatentStyles::has_defSemiHidden_attr() const
{
    return m_has_defSemiHidden_attr;
}

void CT_LatentStyles::set_defSemiHidden_attr(const ns_s::ST_OnOff& _defSemiHidden_attr)
{
    m_has_defSemiHidden_attr = true;
    m_defSemiHidden_attr = new ns_s::ST_OnOff(_defSemiHidden_attr);
}

const ns_s::ST_OnOff& CT_LatentStyles::get_defSemiHidden_attr() const
{
    if (m_defSemiHidden_attr)
    {
        return *m_defSemiHidden_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

bool CT_LatentStyles::has_defUnhideWhenUsed_attr() const
{
    return m_has_defUnhideWhenUsed_attr;
}

void CT_LatentStyles::set_defUnhideWhenUsed_attr(const ns_s::ST_OnOff& _defUnhideWhenUsed_attr)
{
    m_has_defUnhideWhenUsed_attr = true;
    m_defUnhideWhenUsed_attr = new ns_s::ST_OnOff(_defUnhideWhenUsed_attr);
}

const ns_s::ST_OnOff& CT_LatentStyles::get_defUnhideWhenUsed_attr() const
{
    if (m_defUnhideWhenUsed_attr)
    {
        return *m_defUnhideWhenUsed_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

bool CT_LatentStyles::has_defQFormat_attr() const
{
    return m_has_defQFormat_attr;
}

void CT_LatentStyles::set_defQFormat_attr(const ns_s::ST_OnOff& _defQFormat_attr)
{
    m_has_defQFormat_attr = true;
    m_defQFormat_attr = new ns_s::ST_OnOff(_defQFormat_attr);
}

const ns_s::ST_OnOff& CT_LatentStyles::get_defQFormat_attr() const
{
    if (m_defQFormat_attr)
    {
        return *m_defQFormat_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

bool CT_LatentStyles::has_count_attr() const
{
    return m_has_count_attr;
}

void CT_LatentStyles::set_count_attr(const ST_DecimalNumber& _count_attr)
{
    m_has_count_attr = true;
    m_count_attr = new ST_DecimalNumber(_count_attr);
}

const ST_DecimalNumber& CT_LatentStyles::get_count_attr() const
{
    if (m_count_attr)
    {
        return *m_count_attr;
    }
    return ST_DecimalNumber::default_instance();
}


// CT_LatentStyles::ChildGroup_1
CT_LatentStyles::ChildGroup_1::ChildGroup_1()
    :m_has_lsdException(false),
     m_lsdException(NULL)
{
}
bool CT_LatentStyles::ChildGroup_1::has_lsdException() const
{
    return m_has_lsdException;
}

CT_LsdException* CT_LatentStyles::ChildGroup_1::mutable_lsdException()
{

    m_has_lsdException = true;
    if (!m_lsdException)
    {
        m_lsdException = new CT_LsdException();
    }
    return m_lsdException;
}

const CT_LsdException& CT_LatentStyles::ChildGroup_1::get_lsdException() const
{
    if (m_lsdException)
    {
        return *m_lsdException;
    }
    return CT_LsdException::default_instance();
}

CT_LatentStyles* CT_LatentStyles::default_instance_ = NULL;

// CT_Styles
CT_Styles::CT_Styles()
    :m_has_docDefaults(false),
     m_docDefaults(NULL),
     m_has_latentStyles(false),
     m_latentStyles(NULL)
{
}
CT_Styles::~CT_Styles()
{
    clear();
}
bool CT_Styles::has_docDefaults() const
{
    return m_has_docDefaults;
}

CT_DocDefaults* CT_Styles::mutable_docDefaults()
{
    m_has_docDefaults = true;
    if (!m_docDefaults)
    {
        m_docDefaults = new CT_DocDefaults();
    }
    return m_docDefaults;
}

const CT_DocDefaults& CT_Styles::get_docDefaults() const
{
    if (m_docDefaults)
    {
        return *m_docDefaults;
    }
    return CT_DocDefaults::default_instance();
}

bool CT_Styles::has_latentStyles() const
{
    return m_has_latentStyles;
}

CT_LatentStyles* CT_Styles::mutable_latentStyles()
{
    m_has_latentStyles = true;
    if (!m_latentStyles)
    {
        m_latentStyles = new CT_LatentStyles();
    }
    return m_latentStyles;
}

const CT_LatentStyles& CT_Styles::get_latentStyles() const
{
    if (m_latentStyles)
    {
        return *m_latentStyles;
    }
    return CT_LatentStyles::default_instance();
}

CT_Style* CT_Styles::add_style()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Style* pNewChild = pChildGroup->mutable_style();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

void CT_Styles::clear()
{
    m_has_docDefaults = false;

    if (m_docDefaults)
    {
        delete m_docDefaults;
        m_docDefaults = NULL;
    }


    m_has_latentStyles = false;

    if (m_latentStyles)
    {
        delete m_latentStyles;
        m_latentStyles = NULL;
    }


    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
}

void CT_Styles::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";


    if (m_has_docDefaults)
    {
        m_docDefaults->toXmlElem("w:docDefaults", "", _outStream);
    }


    if (m_has_latentStyles)
    {
        m_latentStyles->toXmlElem("w:latentStyles", "", _outStream);
    }

    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_style())
            {
                (*iter)->get_style().toXmlElem("w:style", "", _outStream);
            }


        }
    }

    _outStream << "</" << _elemName << ">";
}

const CT_Styles& CT_Styles::default_instance()
{
    if (!CT_Styles::default_instance_)
    {
        CT_Styles::default_instance_ = new CT_Styles();
    }
    return *CT_Styles::default_instance_;
}


// CT_Styles::ChildGroup_1
CT_Styles::ChildGroup_1::ChildGroup_1()
    :m_has_style(false),
     m_style(NULL)
{
}
bool CT_Styles::ChildGroup_1::has_style() const
{
    return m_has_style;
}

CT_Style* CT_Styles::ChildGroup_1::mutable_style()
{

    m_has_style = true;
    if (!m_style)
    {
        m_style = new CT_Style();
    }
    return m_style;
}

const CT_Style& CT_Styles::ChildGroup_1::get_style() const
{
    if (m_style)
    {
        return *m_style;
    }
    return CT_Style::default_instance();
}

CT_Styles* CT_Styles::default_instance_ = NULL;

// CT_Panose
CT_Panose::CT_Panose()
    :m_has_val_attr(false),
     m_val_attr(NULL)
{
}
CT_Panose::~CT_Panose()
{
    clear();
}
void CT_Panose::clear()
{
    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }

}

void CT_Panose::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_val_attr);
    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_Panose& CT_Panose::default_instance()
{
    if (!CT_Panose::default_instance_)
    {
        CT_Panose::default_instance_ = new CT_Panose();
    }
    return *CT_Panose::default_instance_;
}

bool CT_Panose::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_Panose::set_val_attr(const ns_s::ST_Panose& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ns_s::ST_Panose(_val_attr);
}

const ns_s::ST_Panose& CT_Panose::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ns_s::ST_Panose::default_instance();
}

CT_Panose* CT_Panose::default_instance_ = NULL;

// CT_FontFamily
CT_FontFamily::CT_FontFamily()
    :m_has_val_attr(false),
     m_val_attr(NULL)
{
}
CT_FontFamily::~CT_FontFamily()
{
    clear();
}
void CT_FontFamily::clear()
{
    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }

}

void CT_FontFamily::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_val_attr);
    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_FontFamily& CT_FontFamily::default_instance()
{
    if (!CT_FontFamily::default_instance_)
    {
        CT_FontFamily::default_instance_ = new CT_FontFamily();
    }
    return *CT_FontFamily::default_instance_;
}

bool CT_FontFamily::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_FontFamily::set_val_attr(const ST_FontFamily& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ST_FontFamily(_val_attr);
}

const ST_FontFamily& CT_FontFamily::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ST_FontFamily::default_instance();
}

CT_FontFamily* CT_FontFamily::default_instance_ = NULL;

// CT_Pitch
CT_Pitch::CT_Pitch()
    :m_has_val_attr(false),
     m_val_attr(NULL)
{
}
CT_Pitch::~CT_Pitch()
{
    clear();
}
void CT_Pitch::clear()
{
    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }

}

void CT_Pitch::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_val_attr);
    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_Pitch& CT_Pitch::default_instance()
{
    if (!CT_Pitch::default_instance_)
    {
        CT_Pitch::default_instance_ = new CT_Pitch();
    }
    return *CT_Pitch::default_instance_;
}

bool CT_Pitch::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_Pitch::set_val_attr(const ST_Pitch& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ST_Pitch(_val_attr);
}

const ST_Pitch& CT_Pitch::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ST_Pitch::default_instance();
}

CT_Pitch* CT_Pitch::default_instance_ = NULL;

// CT_FontSig
CT_FontSig::CT_FontSig()
    :m_has_usb0_attr(false),
     m_usb0_attr(NULL),
     m_has_usb1_attr(false),
     m_usb1_attr(NULL),
     m_has_usb2_attr(false),
     m_usb2_attr(NULL),
     m_has_usb3_attr(false),
     m_usb3_attr(NULL),
     m_has_csb0_attr(false),
     m_csb0_attr(NULL),
     m_has_csb1_attr(false),
     m_csb1_attr(NULL)
{
}
CT_FontSig::~CT_FontSig()
{
    clear();
}
void CT_FontSig::clear()
{
    m_has_usb0_attr = false;

    if (m_usb0_attr)
    {
        delete m_usb0_attr;
        m_usb0_attr = NULL;
    }


    m_has_usb1_attr = false;

    if (m_usb1_attr)
    {
        delete m_usb1_attr;
        m_usb1_attr = NULL;
    }


    m_has_usb2_attr = false;

    if (m_usb2_attr)
    {
        delete m_usb2_attr;
        m_usb2_attr = NULL;
    }


    m_has_usb3_attr = false;

    if (m_usb3_attr)
    {
        delete m_usb3_attr;
        m_usb3_attr = NULL;
    }


    m_has_csb0_attr = false;

    if (m_csb0_attr)
    {
        delete m_csb0_attr;
        m_csb0_attr = NULL;
    }


    m_has_csb1_attr = false;

    if (m_csb1_attr)
    {
        delete m_csb1_attr;
        m_csb1_attr = NULL;
    }

}

void CT_FontSig::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_usb0_attr);
    if (m_has_usb0_attr)
    {
        m_usb0_attr->toXmlAttr("w:usb0", _outStream);
    }


    assert(m_has_usb1_attr);
    if (m_has_usb1_attr)
    {
        m_usb1_attr->toXmlAttr("w:usb1", _outStream);
    }


    assert(m_has_usb2_attr);
    if (m_has_usb2_attr)
    {
        m_usb2_attr->toXmlAttr("w:usb2", _outStream);
    }


    assert(m_has_usb3_attr);
    if (m_has_usb3_attr)
    {
        m_usb3_attr->toXmlAttr("w:usb3", _outStream);
    }


    assert(m_has_csb0_attr);
    if (m_has_csb0_attr)
    {
        m_csb0_attr->toXmlAttr("w:csb0", _outStream);
    }


    assert(m_has_csb1_attr);
    if (m_has_csb1_attr)
    {
        m_csb1_attr->toXmlAttr("w:csb1", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_FontSig& CT_FontSig::default_instance()
{
    if (!CT_FontSig::default_instance_)
    {
        CT_FontSig::default_instance_ = new CT_FontSig();
    }
    return *CT_FontSig::default_instance_;
}

bool CT_FontSig::has_usb0_attr() const
{
    return m_has_usb0_attr;
}

void CT_FontSig::set_usb0_attr(const ST_LongHexNumber& _usb0_attr)
{
    m_has_usb0_attr = true;
    m_usb0_attr = new ST_LongHexNumber(_usb0_attr);
}

const ST_LongHexNumber& CT_FontSig::get_usb0_attr() const
{
    if (m_usb0_attr)
    {
        return *m_usb0_attr;
    }
    return ST_LongHexNumber::default_instance();
}

bool CT_FontSig::has_usb1_attr() const
{
    return m_has_usb1_attr;
}

void CT_FontSig::set_usb1_attr(const ST_LongHexNumber& _usb1_attr)
{
    m_has_usb1_attr = true;
    m_usb1_attr = new ST_LongHexNumber(_usb1_attr);
}

const ST_LongHexNumber& CT_FontSig::get_usb1_attr() const
{
    if (m_usb1_attr)
    {
        return *m_usb1_attr;
    }
    return ST_LongHexNumber::default_instance();
}

bool CT_FontSig::has_usb2_attr() const
{
    return m_has_usb2_attr;
}

void CT_FontSig::set_usb2_attr(const ST_LongHexNumber& _usb2_attr)
{
    m_has_usb2_attr = true;
    m_usb2_attr = new ST_LongHexNumber(_usb2_attr);
}

const ST_LongHexNumber& CT_FontSig::get_usb2_attr() const
{
    if (m_usb2_attr)
    {
        return *m_usb2_attr;
    }
    return ST_LongHexNumber::default_instance();
}

bool CT_FontSig::has_usb3_attr() const
{
    return m_has_usb3_attr;
}

void CT_FontSig::set_usb3_attr(const ST_LongHexNumber& _usb3_attr)
{
    m_has_usb3_attr = true;
    m_usb3_attr = new ST_LongHexNumber(_usb3_attr);
}

const ST_LongHexNumber& CT_FontSig::get_usb3_attr() const
{
    if (m_usb3_attr)
    {
        return *m_usb3_attr;
    }
    return ST_LongHexNumber::default_instance();
}

bool CT_FontSig::has_csb0_attr() const
{
    return m_has_csb0_attr;
}

void CT_FontSig::set_csb0_attr(const ST_LongHexNumber& _csb0_attr)
{
    m_has_csb0_attr = true;
    m_csb0_attr = new ST_LongHexNumber(_csb0_attr);
}

const ST_LongHexNumber& CT_FontSig::get_csb0_attr() const
{
    if (m_csb0_attr)
    {
        return *m_csb0_attr;
    }
    return ST_LongHexNumber::default_instance();
}

bool CT_FontSig::has_csb1_attr() const
{
    return m_has_csb1_attr;
}

void CT_FontSig::set_csb1_attr(const ST_LongHexNumber& _csb1_attr)
{
    m_has_csb1_attr = true;
    m_csb1_attr = new ST_LongHexNumber(_csb1_attr);
}

const ST_LongHexNumber& CT_FontSig::get_csb1_attr() const
{
    if (m_csb1_attr)
    {
        return *m_csb1_attr;
    }
    return ST_LongHexNumber::default_instance();
}

CT_FontSig* CT_FontSig::default_instance_ = NULL;

// CT_FontRel
CT_FontRel::CT_FontRel()
    :m_has_r_id_attr(false),
     m_r_id_attr(NULL),
     m_has_fontKey_attr(false),
     m_fontKey_attr(NULL),
     m_has_subsetted_attr(false),
     m_subsetted_attr(NULL)
{
}
CT_FontRel::~CT_FontRel()
{
    clear();
}
void CT_FontRel::clear()
{
    m_has_r_id_attr = false;

    if (m_r_id_attr)
    {
        delete m_r_id_attr;
        m_r_id_attr = NULL;
    }


    m_has_fontKey_attr = false;

    if (m_fontKey_attr)
    {
        delete m_fontKey_attr;
        m_fontKey_attr = NULL;
    }


    m_has_subsetted_attr = false;

    if (m_subsetted_attr)
    {
        delete m_subsetted_attr;
        m_subsetted_attr = NULL;
    }

}

void CT_FontRel::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_r_id_attr);
    if (m_has_r_id_attr)
    {
        m_r_id_attr->toXmlAttr("r:id", _outStream);
    }



    if (m_has_fontKey_attr)
    {
        m_fontKey_attr->toXmlAttr("w:fontKey", _outStream);
    }



    if (m_has_subsetted_attr)
    {
        m_subsetted_attr->toXmlAttr("w:subsetted", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_FontRel& CT_FontRel::default_instance()
{
    if (!CT_FontRel::default_instance_)
    {
        CT_FontRel::default_instance_ = new CT_FontRel();
    }
    return *CT_FontRel::default_instance_;
}

bool CT_FontRel::has_r_id_attr() const
{
    return m_has_r_id_attr;
}

void CT_FontRel::set_r_id_attr(const ns_r::ST_RelationshipId& _r_id_attr)
{
    m_has_r_id_attr = true;
    m_r_id_attr = new ns_r::ST_RelationshipId(_r_id_attr);
}

const ns_r::ST_RelationshipId& CT_FontRel::get_r_id_attr() const
{
    if (m_r_id_attr)
    {
        return *m_r_id_attr;
    }
    return ns_r::ST_RelationshipId::default_instance();
}

bool CT_FontRel::has_fontKey_attr() const
{
    return m_has_fontKey_attr;
}

void CT_FontRel::set_fontKey_attr(const ns_s::ST_Guid& _fontKey_attr)
{
    m_has_fontKey_attr = true;
    m_fontKey_attr = new ns_s::ST_Guid(_fontKey_attr);
}

const ns_s::ST_Guid& CT_FontRel::get_fontKey_attr() const
{
    if (m_fontKey_attr)
    {
        return *m_fontKey_attr;
    }
    return ns_s::ST_Guid::default_instance();
}

bool CT_FontRel::has_subsetted_attr() const
{
    return m_has_subsetted_attr;
}

void CT_FontRel::set_subsetted_attr(const ns_s::ST_OnOff& _subsetted_attr)
{
    m_has_subsetted_attr = true;
    m_subsetted_attr = new ns_s::ST_OnOff(_subsetted_attr);
}

const ns_s::ST_OnOff& CT_FontRel::get_subsetted_attr() const
{
    if (m_subsetted_attr)
    {
        return *m_subsetted_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

CT_FontRel* CT_FontRel::default_instance_ = NULL;

// CT_Font
CT_Font::CT_Font()
    :m_has_altName(false),
     m_altName(NULL),
     m_has_panose1(false),
     m_panose1(NULL),
     m_has_charset(false),
     m_charset(NULL),
     m_has_family(false),
     m_family(NULL),
     m_has_notTrueType(false),
     m_notTrueType(NULL),
     m_has_pitch(false),
     m_pitch(NULL),
     m_has_sig(false),
     m_sig(NULL),
     m_has_embedRegular(false),
     m_embedRegular(NULL),
     m_has_embedBold(false),
     m_embedBold(NULL),
     m_has_embedItalic(false),
     m_embedItalic(NULL),
     m_has_embedBoldItalic(false),
     m_embedBoldItalic(NULL),
     m_has_name_attr(false),
     m_name_attr(NULL)
{
}
CT_Font::~CT_Font()
{
    clear();
}
bool CT_Font::has_altName() const
{
    return m_has_altName;
}

CT_String* CT_Font::mutable_altName()
{
    m_has_altName = true;
    if (!m_altName)
    {
        m_altName = new CT_String();
    }
    return m_altName;
}

const CT_String& CT_Font::get_altName() const
{
    if (m_altName)
    {
        return *m_altName;
    }
    return CT_String::default_instance();
}

bool CT_Font::has_panose1() const
{
    return m_has_panose1;
}

CT_Panose* CT_Font::mutable_panose1()
{
    m_has_panose1 = true;
    if (!m_panose1)
    {
        m_panose1 = new CT_Panose();
    }
    return m_panose1;
}

const CT_Panose& CT_Font::get_panose1() const
{
    if (m_panose1)
    {
        return *m_panose1;
    }
    return CT_Panose::default_instance();
}

bool CT_Font::has_charset() const
{
    return m_has_charset;
}

CT_Charset* CT_Font::mutable_charset()
{
    m_has_charset = true;
    if (!m_charset)
    {
        m_charset = new CT_Charset();
    }
    return m_charset;
}

const CT_Charset& CT_Font::get_charset() const
{
    if (m_charset)
    {
        return *m_charset;
    }
    return CT_Charset::default_instance();
}

bool CT_Font::has_family() const
{
    return m_has_family;
}

CT_FontFamily* CT_Font::mutable_family()
{
    m_has_family = true;
    if (!m_family)
    {
        m_family = new CT_FontFamily();
    }
    return m_family;
}

const CT_FontFamily& CT_Font::get_family() const
{
    if (m_family)
    {
        return *m_family;
    }
    return CT_FontFamily::default_instance();
}

bool CT_Font::has_notTrueType() const
{
    return m_has_notTrueType;
}

CT_OnOff* CT_Font::mutable_notTrueType()
{
    m_has_notTrueType = true;
    if (!m_notTrueType)
    {
        m_notTrueType = new CT_OnOff();
    }
    return m_notTrueType;
}

const CT_OnOff& CT_Font::get_notTrueType() const
{
    if (m_notTrueType)
    {
        return *m_notTrueType;
    }
    return CT_OnOff::default_instance();
}

bool CT_Font::has_pitch() const
{
    return m_has_pitch;
}

CT_Pitch* CT_Font::mutable_pitch()
{
    m_has_pitch = true;
    if (!m_pitch)
    {
        m_pitch = new CT_Pitch();
    }
    return m_pitch;
}

const CT_Pitch& CT_Font::get_pitch() const
{
    if (m_pitch)
    {
        return *m_pitch;
    }
    return CT_Pitch::default_instance();
}

bool CT_Font::has_sig() const
{
    return m_has_sig;
}

CT_FontSig* CT_Font::mutable_sig()
{
    m_has_sig = true;
    if (!m_sig)
    {
        m_sig = new CT_FontSig();
    }
    return m_sig;
}

const CT_FontSig& CT_Font::get_sig() const
{
    if (m_sig)
    {
        return *m_sig;
    }
    return CT_FontSig::default_instance();
}

bool CT_Font::has_embedRegular() const
{
    return m_has_embedRegular;
}

CT_FontRel* CT_Font::mutable_embedRegular()
{
    m_has_embedRegular = true;
    if (!m_embedRegular)
    {
        m_embedRegular = new CT_FontRel();
    }
    return m_embedRegular;
}

const CT_FontRel& CT_Font::get_embedRegular() const
{
    if (m_embedRegular)
    {
        return *m_embedRegular;
    }
    return CT_FontRel::default_instance();
}

bool CT_Font::has_embedBold() const
{
    return m_has_embedBold;
}

CT_FontRel* CT_Font::mutable_embedBold()
{
    m_has_embedBold = true;
    if (!m_embedBold)
    {
        m_embedBold = new CT_FontRel();
    }
    return m_embedBold;
}

const CT_FontRel& CT_Font::get_embedBold() const
{
    if (m_embedBold)
    {
        return *m_embedBold;
    }
    return CT_FontRel::default_instance();
}

bool CT_Font::has_embedItalic() const
{
    return m_has_embedItalic;
}

CT_FontRel* CT_Font::mutable_embedItalic()
{
    m_has_embedItalic = true;
    if (!m_embedItalic)
    {
        m_embedItalic = new CT_FontRel();
    }
    return m_embedItalic;
}

const CT_FontRel& CT_Font::get_embedItalic() const
{
    if (m_embedItalic)
    {
        return *m_embedItalic;
    }
    return CT_FontRel::default_instance();
}

bool CT_Font::has_embedBoldItalic() const
{
    return m_has_embedBoldItalic;
}

CT_FontRel* CT_Font::mutable_embedBoldItalic()
{
    m_has_embedBoldItalic = true;
    if (!m_embedBoldItalic)
    {
        m_embedBoldItalic = new CT_FontRel();
    }
    return m_embedBoldItalic;
}

const CT_FontRel& CT_Font::get_embedBoldItalic() const
{
    if (m_embedBoldItalic)
    {
        return *m_embedBoldItalic;
    }
    return CT_FontRel::default_instance();
}

void CT_Font::clear()
{
    m_has_name_attr = false;

    if (m_name_attr)
    {
        delete m_name_attr;
        m_name_attr = NULL;
    }


    m_has_altName = false;

    if (m_altName)
    {
        delete m_altName;
        m_altName = NULL;
    }


    m_has_panose1 = false;

    if (m_panose1)
    {
        delete m_panose1;
        m_panose1 = NULL;
    }


    m_has_charset = false;

    if (m_charset)
    {
        delete m_charset;
        m_charset = NULL;
    }


    m_has_family = false;

    if (m_family)
    {
        delete m_family;
        m_family = NULL;
    }


    m_has_notTrueType = false;

    if (m_notTrueType)
    {
        delete m_notTrueType;
        m_notTrueType = NULL;
    }


    m_has_pitch = false;

    if (m_pitch)
    {
        delete m_pitch;
        m_pitch = NULL;
    }


    m_has_sig = false;

    if (m_sig)
    {
        delete m_sig;
        m_sig = NULL;
    }


    m_has_embedRegular = false;

    if (m_embedRegular)
    {
        delete m_embedRegular;
        m_embedRegular = NULL;
    }


    m_has_embedBold = false;

    if (m_embedBold)
    {
        delete m_embedBold;
        m_embedBold = NULL;
    }


    m_has_embedItalic = false;

    if (m_embedItalic)
    {
        delete m_embedItalic;
        m_embedItalic = NULL;
    }


    m_has_embedBoldItalic = false;

    if (m_embedBoldItalic)
    {
        delete m_embedBoldItalic;
        m_embedBoldItalic = NULL;
    }

}

void CT_Font::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_name_attr);
    if (m_has_name_attr)
    {
        m_name_attr->toXmlAttr("w:name", _outStream);
    }

    _outStream << ">";


    if (m_has_altName)
    {
        m_altName->toXmlElem("w:altName", "", _outStream);
    }


    if (m_has_panose1)
    {
        m_panose1->toXmlElem("w:panose1", "", _outStream);
    }


    if (m_has_charset)
    {
        m_charset->toXmlElem("w:charset", "", _outStream);
    }


    if (m_has_family)
    {
        m_family->toXmlElem("w:family", "", _outStream);
    }


    if (m_has_notTrueType)
    {
        m_notTrueType->toXmlElem("w:notTrueType", "", _outStream);
    }


    if (m_has_pitch)
    {
        m_pitch->toXmlElem("w:pitch", "", _outStream);
    }


    if (m_has_sig)
    {
        m_sig->toXmlElem("w:sig", "", _outStream);
    }


    if (m_has_embedRegular)
    {
        m_embedRegular->toXmlElem("w:embedRegular", "", _outStream);
    }


    if (m_has_embedBold)
    {
        m_embedBold->toXmlElem("w:embedBold", "", _outStream);
    }


    if (m_has_embedItalic)
    {
        m_embedItalic->toXmlElem("w:embedItalic", "", _outStream);
    }


    if (m_has_embedBoldItalic)
    {
        m_embedBoldItalic->toXmlElem("w:embedBoldItalic", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_Font& CT_Font::default_instance()
{
    if (!CT_Font::default_instance_)
    {
        CT_Font::default_instance_ = new CT_Font();
    }
    return *CT_Font::default_instance_;
}

bool CT_Font::has_name_attr() const
{
    return m_has_name_attr;
}

void CT_Font::set_name_attr(const ns_s::ST_String& _name_attr)
{
    m_has_name_attr = true;
    m_name_attr = new ns_s::ST_String(_name_attr);
}

const ns_s::ST_String& CT_Font::get_name_attr() const
{
    if (m_name_attr)
    {
        return *m_name_attr;
    }
    return ns_s::ST_String::default_instance();
}

CT_Font* CT_Font::default_instance_ = NULL;

// CT_FontsList
CT_FontsList::CT_FontsList()

{
}
CT_FontsList::~CT_FontsList()
{
    clear();
}
CT_Font* CT_FontsList::add_font()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Font* pNewChild = pChildGroup->mutable_font();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

void CT_FontsList::clear()
{
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
}

void CT_FontsList::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";

    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_font())
            {
                (*iter)->get_font().toXmlElem("w:font", "", _outStream);
            }


        }
    }

    _outStream << "</" << _elemName << ">";
}

const CT_FontsList& CT_FontsList::default_instance()
{
    if (!CT_FontsList::default_instance_)
    {
        CT_FontsList::default_instance_ = new CT_FontsList();
    }
    return *CT_FontsList::default_instance_;
}


// CT_FontsList::ChildGroup_1
CT_FontsList::ChildGroup_1::ChildGroup_1()
    :m_has_font(false),
     m_font(NULL)
{
}
bool CT_FontsList::ChildGroup_1::has_font() const
{
    return m_has_font;
}

CT_Font* CT_FontsList::ChildGroup_1::mutable_font()
{

    m_has_font = true;
    if (!m_font)
    {
        m_font = new CT_Font();
    }
    return m_font;
}

const CT_Font& CT_FontsList::ChildGroup_1::get_font() const
{
    if (m_font)
    {
        return *m_font;
    }
    return CT_Font::default_instance();
}

CT_FontsList* CT_FontsList::default_instance_ = NULL;

// CT_DivBdr
CT_DivBdr::CT_DivBdr()
    :m_has_top(false),
     m_top(NULL),
     m_has_left(false),
     m_left(NULL),
     m_has_bottom(false),
     m_bottom(NULL),
     m_has_right(false),
     m_right(NULL)
{
}
CT_DivBdr::~CT_DivBdr()
{
    clear();
}
bool CT_DivBdr::has_top() const
{
    return m_has_top;
}

CT_Border* CT_DivBdr::mutable_top()
{
    m_has_top = true;
    if (!m_top)
    {
        m_top = new CT_Border();
    }
    return m_top;
}

const CT_Border& CT_DivBdr::get_top() const
{
    if (m_top)
    {
        return *m_top;
    }
    return CT_Border::default_instance();
}

bool CT_DivBdr::has_left() const
{
    return m_has_left;
}

CT_Border* CT_DivBdr::mutable_left()
{
    m_has_left = true;
    if (!m_left)
    {
        m_left = new CT_Border();
    }
    return m_left;
}

const CT_Border& CT_DivBdr::get_left() const
{
    if (m_left)
    {
        return *m_left;
    }
    return CT_Border::default_instance();
}

bool CT_DivBdr::has_bottom() const
{
    return m_has_bottom;
}

CT_Border* CT_DivBdr::mutable_bottom()
{
    m_has_bottom = true;
    if (!m_bottom)
    {
        m_bottom = new CT_Border();
    }
    return m_bottom;
}

const CT_Border& CT_DivBdr::get_bottom() const
{
    if (m_bottom)
    {
        return *m_bottom;
    }
    return CT_Border::default_instance();
}

bool CT_DivBdr::has_right() const
{
    return m_has_right;
}

CT_Border* CT_DivBdr::mutable_right()
{
    m_has_right = true;
    if (!m_right)
    {
        m_right = new CT_Border();
    }
    return m_right;
}

const CT_Border& CT_DivBdr::get_right() const
{
    if (m_right)
    {
        return *m_right;
    }
    return CT_Border::default_instance();
}

void CT_DivBdr::clear()
{
    m_has_top = false;

    if (m_top)
    {
        delete m_top;
        m_top = NULL;
    }


    m_has_left = false;

    if (m_left)
    {
        delete m_left;
        m_left = NULL;
    }


    m_has_bottom = false;

    if (m_bottom)
    {
        delete m_bottom;
        m_bottom = NULL;
    }


    m_has_right = false;

    if (m_right)
    {
        delete m_right;
        m_right = NULL;
    }

}

void CT_DivBdr::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";


    if (m_has_top)
    {
        m_top->toXmlElem("w:top", "", _outStream);
    }


    if (m_has_left)
    {
        m_left->toXmlElem("w:left", "", _outStream);
    }


    if (m_has_bottom)
    {
        m_bottom->toXmlElem("w:bottom", "", _outStream);
    }


    if (m_has_right)
    {
        m_right->toXmlElem("w:right", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_DivBdr& CT_DivBdr::default_instance()
{
    if (!CT_DivBdr::default_instance_)
    {
        CT_DivBdr::default_instance_ = new CT_DivBdr();
    }
    return *CT_DivBdr::default_instance_;
}

CT_DivBdr* CT_DivBdr::default_instance_ = NULL;

// CT_Div
CT_Div::CT_Div()
    :m_has_blockQuote(false),
     m_blockQuote(NULL),
     m_has_bodyDiv(false),
     m_bodyDiv(NULL),
     m_has_marLeft(false),
     m_marLeft(NULL),
     m_has_marRight(false),
     m_marRight(NULL),
     m_has_marTop(false),
     m_marTop(NULL),
     m_has_marBottom(false),
     m_marBottom(NULL),
     m_has_divBdr(false),
     m_divBdr(NULL),
     m_has_id_attr(false),
     m_id_attr(NULL)
{
}
CT_Div::~CT_Div()
{
    clear();
}
bool CT_Div::has_blockQuote() const
{
    return m_has_blockQuote;
}

CT_OnOff* CT_Div::mutable_blockQuote()
{
    m_has_blockQuote = true;
    if (!m_blockQuote)
    {
        m_blockQuote = new CT_OnOff();
    }
    return m_blockQuote;
}

const CT_OnOff& CT_Div::get_blockQuote() const
{
    if (m_blockQuote)
    {
        return *m_blockQuote;
    }
    return CT_OnOff::default_instance();
}

bool CT_Div::has_bodyDiv() const
{
    return m_has_bodyDiv;
}

CT_OnOff* CT_Div::mutable_bodyDiv()
{
    m_has_bodyDiv = true;
    if (!m_bodyDiv)
    {
        m_bodyDiv = new CT_OnOff();
    }
    return m_bodyDiv;
}

const CT_OnOff& CT_Div::get_bodyDiv() const
{
    if (m_bodyDiv)
    {
        return *m_bodyDiv;
    }
    return CT_OnOff::default_instance();
}

bool CT_Div::has_marLeft() const
{
    return m_has_marLeft;
}

CT_SignedTwipsMeasure* CT_Div::mutable_marLeft()
{
    m_has_marLeft = true;
    if (!m_marLeft)
    {
        m_marLeft = new CT_SignedTwipsMeasure();
    }
    return m_marLeft;
}

const CT_SignedTwipsMeasure& CT_Div::get_marLeft() const
{
    if (m_marLeft)
    {
        return *m_marLeft;
    }
    return CT_SignedTwipsMeasure::default_instance();
}

bool CT_Div::has_marRight() const
{
    return m_has_marRight;
}

CT_SignedTwipsMeasure* CT_Div::mutable_marRight()
{
    m_has_marRight = true;
    if (!m_marRight)
    {
        m_marRight = new CT_SignedTwipsMeasure();
    }
    return m_marRight;
}

const CT_SignedTwipsMeasure& CT_Div::get_marRight() const
{
    if (m_marRight)
    {
        return *m_marRight;
    }
    return CT_SignedTwipsMeasure::default_instance();
}

bool CT_Div::has_marTop() const
{
    return m_has_marTop;
}

CT_SignedTwipsMeasure* CT_Div::mutable_marTop()
{
    m_has_marTop = true;
    if (!m_marTop)
    {
        m_marTop = new CT_SignedTwipsMeasure();
    }
    return m_marTop;
}

const CT_SignedTwipsMeasure& CT_Div::get_marTop() const
{
    if (m_marTop)
    {
        return *m_marTop;
    }
    return CT_SignedTwipsMeasure::default_instance();
}

bool CT_Div::has_marBottom() const
{
    return m_has_marBottom;
}

CT_SignedTwipsMeasure* CT_Div::mutable_marBottom()
{
    m_has_marBottom = true;
    if (!m_marBottom)
    {
        m_marBottom = new CT_SignedTwipsMeasure();
    }
    return m_marBottom;
}

const CT_SignedTwipsMeasure& CT_Div::get_marBottom() const
{
    if (m_marBottom)
    {
        return *m_marBottom;
    }
    return CT_SignedTwipsMeasure::default_instance();
}

bool CT_Div::has_divBdr() const
{
    return m_has_divBdr;
}

CT_DivBdr* CT_Div::mutable_divBdr()
{
    m_has_divBdr = true;
    if (!m_divBdr)
    {
        m_divBdr = new CT_DivBdr();
    }
    return m_divBdr;
}

const CT_DivBdr& CT_Div::get_divBdr() const
{
    if (m_divBdr)
    {
        return *m_divBdr;
    }
    return CT_DivBdr::default_instance();
}

CT_Divs* CT_Div::add_divsChild()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Divs* pNewChild = pChildGroup->mutable_divsChild();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

void CT_Div::clear()
{
    m_has_id_attr = false;

    if (m_id_attr)
    {
        delete m_id_attr;
        m_id_attr = NULL;
    }


    m_has_blockQuote = false;

    if (m_blockQuote)
    {
        delete m_blockQuote;
        m_blockQuote = NULL;
    }


    m_has_bodyDiv = false;

    if (m_bodyDiv)
    {
        delete m_bodyDiv;
        m_bodyDiv = NULL;
    }


    m_has_marLeft = false;

    if (m_marLeft)
    {
        delete m_marLeft;
        m_marLeft = NULL;
    }


    m_has_marRight = false;

    if (m_marRight)
    {
        delete m_marRight;
        m_marRight = NULL;
    }


    m_has_marTop = false;

    if (m_marTop)
    {
        delete m_marTop;
        m_marTop = NULL;
    }


    m_has_marBottom = false;

    if (m_marBottom)
    {
        delete m_marBottom;
        m_marBottom = NULL;
    }


    m_has_divBdr = false;

    if (m_divBdr)
    {
        delete m_divBdr;
        m_divBdr = NULL;
    }


    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
}

void CT_Div::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_id_attr);
    if (m_has_id_attr)
    {
        m_id_attr->toXmlAttr("w:id", _outStream);
    }

    _outStream << ">";

    assert(m_has_marLeft);


    assert(m_has_marRight);


    assert(m_has_marTop);


    assert(m_has_marBottom);


    if (m_has_blockQuote)
    {
        m_blockQuote->toXmlElem("w:blockQuote", "", _outStream);
    }


    if (m_has_bodyDiv)
    {
        m_bodyDiv->toXmlElem("w:bodyDiv", "", _outStream);
    }


    if (m_has_marLeft)
    {
        m_marLeft->toXmlElem("w:marLeft", "", _outStream);
    }


    if (m_has_marRight)
    {
        m_marRight->toXmlElem("w:marRight", "", _outStream);
    }


    if (m_has_marTop)
    {
        m_marTop->toXmlElem("w:marTop", "", _outStream);
    }


    if (m_has_marBottom)
    {
        m_marBottom->toXmlElem("w:marBottom", "", _outStream);
    }


    if (m_has_divBdr)
    {
        m_divBdr->toXmlElem("w:divBdr", "", _outStream);
    }

    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_divsChild())
            {
                (*iter)->get_divsChild().toXmlElem("w:divsChild", "", _outStream);
            }


        }
    }

    _outStream << "</" << _elemName << ">";
}

const CT_Div& CT_Div::default_instance()
{
    if (!CT_Div::default_instance_)
    {
        CT_Div::default_instance_ = new CT_Div();
    }
    return *CT_Div::default_instance_;
}

bool CT_Div::has_id_attr() const
{
    return m_has_id_attr;
}

void CT_Div::set_id_attr(const ST_DecimalNumber& _id_attr)
{
    m_has_id_attr = true;
    m_id_attr = new ST_DecimalNumber(_id_attr);
}

const ST_DecimalNumber& CT_Div::get_id_attr() const
{
    if (m_id_attr)
    {
        return *m_id_attr;
    }
    return ST_DecimalNumber::default_instance();
}


// CT_Div::ChildGroup_1
CT_Div::ChildGroup_1::ChildGroup_1()
    :m_has_divsChild(false),
     m_divsChild(NULL)
{
}
bool CT_Div::ChildGroup_1::has_divsChild() const
{
    return m_has_divsChild;
}

CT_Divs* CT_Div::ChildGroup_1::mutable_divsChild()
{

    m_has_divsChild = true;
    if (!m_divsChild)
    {
        m_divsChild = new CT_Divs();
    }
    return m_divsChild;
}

const CT_Divs& CT_Div::ChildGroup_1::get_divsChild() const
{
    if (m_divsChild)
    {
        return *m_divsChild;
    }
    return CT_Divs::default_instance();
}

CT_Div* CT_Div::default_instance_ = NULL;

// CT_Divs
CT_Divs::CT_Divs()

{
}
CT_Divs::~CT_Divs()
{
    clear();
}
CT_Div* CT_Divs::add_div()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Div* pNewChild = pChildGroup->mutable_div();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

void CT_Divs::clear()
{
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
}

void CT_Divs::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";

    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_div())
            {
                (*iter)->get_div().toXmlElem("w:div", "", _outStream);
            }


        }
    }

    _outStream << "</" << _elemName << ">";
}

const CT_Divs& CT_Divs::default_instance()
{
    if (!CT_Divs::default_instance_)
    {
        CT_Divs::default_instance_ = new CT_Divs();
    }
    return *CT_Divs::default_instance_;
}


// CT_Divs::ChildGroup_1
CT_Divs::ChildGroup_1::ChildGroup_1()
    :m_has_div(false),
     m_div(NULL)
{
}
bool CT_Divs::ChildGroup_1::has_div() const
{
    return m_has_div;
}

CT_Div* CT_Divs::ChildGroup_1::mutable_div()
{

    m_has_div = true;
    if (!m_div)
    {
        m_div = new CT_Div();
    }
    return m_div;
}

const CT_Div& CT_Divs::ChildGroup_1::get_div() const
{
    if (m_div)
    {
        return *m_div;
    }
    return CT_Div::default_instance();
}

CT_Divs* CT_Divs::default_instance_ = NULL;

// CT_TxbxContent
CT_TxbxContent::CT_TxbxContent()

{
}
CT_TxbxContent::~CT_TxbxContent()
{
    clear();
}
void CT_TxbxContent::clear()
{    }

void CT_TxbxContent::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_TxbxContent& CT_TxbxContent::default_instance()
{
    if (!CT_TxbxContent::default_instance_)
    {
        CT_TxbxContent::default_instance_ = new CT_TxbxContent();
    }
    return *CT_TxbxContent::default_instance_;
}

CT_TxbxContent* CT_TxbxContent::default_instance_ = NULL;

// CT_Body
CT_Body::CT_Body()
    :m_has_sectPr(false),
     m_sectPr(NULL)
{
}
CT_Body::~CT_Body()
{
    clear();
}
CT_CustomXmlBlock* CT_Body::add_customXml()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_CustomXmlBlock* pNewChild = pChildGroup->mutable_customXml();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_SdtBlock* CT_Body::add_sdt()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_SdtBlock* pNewChild = pChildGroup->mutable_sdt();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_P* CT_Body::add_p()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_P* pNewChild = pChildGroup->mutable_p();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_Tbl* CT_Body::add_tbl()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Tbl* pNewChild = pChildGroup->mutable_tbl();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_ProofErr* CT_Body::add_proofErr()
{
    ChildGroup_2 *pChildGroup = new ChildGroup_2();
    CT_ProofErr* pNewChild = pChildGroup->mutable_proofErr();
    m_childGroupList_2.push_back(pChildGroup);
    return pNewChild;
}

CT_PermStart* CT_Body::add_permStart()
{
    ChildGroup_2 *pChildGroup = new ChildGroup_2();
    CT_PermStart* pNewChild = pChildGroup->mutable_permStart();
    m_childGroupList_2.push_back(pChildGroup);
    return pNewChild;
}

CT_Perm* CT_Body::add_permEnd()
{
    ChildGroup_2 *pChildGroup = new ChildGroup_2();
    CT_Perm* pNewChild = pChildGroup->mutable_permEnd();
    m_childGroupList_2.push_back(pChildGroup);
    return pNewChild;
}

CT_Bookmark* CT_Body::add_bookmarkStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_Bookmark* pNewChild = pChildGroup->mutable_bookmarkStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MarkupRange* CT_Body::add_bookmarkEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MarkupRange* pNewChild = pChildGroup->mutable_bookmarkEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MoveBookmark* CT_Body::add_moveFromRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MoveBookmark* pNewChild = pChildGroup->mutable_moveFromRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MarkupRange* CT_Body::add_moveFromRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MarkupRange* pNewChild = pChildGroup->mutable_moveFromRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MoveBookmark* CT_Body::add_moveToRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MoveBookmark* pNewChild = pChildGroup->mutable_moveToRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MarkupRange* CT_Body::add_moveToRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MarkupRange* pNewChild = pChildGroup->mutable_moveToRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MarkupRange* CT_Body::add_commentRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MarkupRange* pNewChild = pChildGroup->mutable_commentRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_MarkupRange* CT_Body::add_commentRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_MarkupRange* pNewChild = pChildGroup->mutable_commentRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_TrackChange* CT_Body::add_customXmlInsRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_TrackChange* pNewChild = pChildGroup->mutable_customXmlInsRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_Markup* CT_Body::add_customXmlInsRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_Markup* pNewChild = pChildGroup->mutable_customXmlInsRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_TrackChange* CT_Body::add_customXmlDelRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_TrackChange* pNewChild = pChildGroup->mutable_customXmlDelRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_Markup* CT_Body::add_customXmlDelRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_Markup* pNewChild = pChildGroup->mutable_customXmlDelRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_TrackChange* CT_Body::add_customXmlMoveFromRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_TrackChange* pNewChild = pChildGroup->mutable_customXmlMoveFromRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_Markup* CT_Body::add_customXmlMoveFromRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_Markup* pNewChild = pChildGroup->mutable_customXmlMoveFromRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_TrackChange* CT_Body::add_customXmlMoveToRangeStart()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_TrackChange* pNewChild = pChildGroup->mutable_customXmlMoveToRangeStart();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_Markup* CT_Body::add_customXmlMoveToRangeEnd()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_Markup* pNewChild = pChildGroup->mutable_customXmlMoveToRangeEnd();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_RunTrackChange* CT_Body::add_ins()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_RunTrackChange* pNewChild = pChildGroup->mutable_ins();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_RunTrackChange* CT_Body::add_del()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_RunTrackChange* pNewChild = pChildGroup->mutable_del();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_RunTrackChange* CT_Body::add_moveFrom()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_RunTrackChange* pNewChild = pChildGroup->mutable_moveFrom();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

CT_RunTrackChange* CT_Body::add_moveTo()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_RunTrackChange* pNewChild = pChildGroup->mutable_moveTo();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

ns_m::CT_OMathPara* CT_Body::add_m_oMathPara()
{
    ChildGroup_4 *pChildGroup = new ChildGroup_4();
    ns_m::CT_OMathPara* pNewChild = pChildGroup->mutable_m_oMathPara();
    m_childGroupList_4.push_back(pChildGroup);
    return pNewChild;
}

ns_m::CT_OMath* CT_Body::add_m_oMath()
{
    ChildGroup_4 *pChildGroup = new ChildGroup_4();
    ns_m::CT_OMath* pNewChild = pChildGroup->mutable_m_oMath();
    m_childGroupList_4.push_back(pChildGroup);
    return pNewChild;
}

CT_AltChunk* CT_Body::add_altChunk()
{
    ChildGroup_4 *pChildGroup = new ChildGroup_4();
    CT_AltChunk* pNewChild = pChildGroup->mutable_altChunk();
    m_childGroupList_4.push_back(pChildGroup);
    return pNewChild;
}

bool CT_Body::has_sectPr() const
{
    return m_has_sectPr;
}

CT_SectPr* CT_Body::mutable_sectPr()
{
    m_has_sectPr = true;
    if (!m_sectPr)
    {
        m_sectPr = new CT_SectPr();
    }
    return m_sectPr;
}

const CT_SectPr& CT_Body::get_sectPr() const
{
    if (m_sectPr)
    {
        return *m_sectPr;
    }
    return CT_SectPr::default_instance();
}

void CT_Body::clear()
{
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }

    {
        vector<ChildGroup_2*>::iterator iter;
        for (iter = m_childGroupList_2.begin(); iter != m_childGroupList_2.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_2.clear();
    }

    {
        vector<ChildGroup_3*>::iterator iter;
        for (iter = m_childGroupList_3.begin(); iter != m_childGroupList_3.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_3.clear();
    }

    {
        vector<ChildGroup_4*>::iterator iter;
        for (iter = m_childGroupList_4.begin(); iter != m_childGroupList_4.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_4.clear();
    }

    m_has_sectPr = false;

    if (m_sectPr)
    {
        delete m_sectPr;
        m_sectPr = NULL;
    }

}

void CT_Body::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";

    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_customXml())
            {
                (*iter)->get_customXml().toXmlElem("w:customXml", "", _outStream);
            }


            else if ((*iter)->has_sdt())
            {
                (*iter)->get_sdt().toXmlElem("w:sdt", "", _outStream);
            }


            else if ((*iter)->has_p())
            {
                (*iter)->get_p().toXmlElem("w:p", "", _outStream);
            }


            else if ((*iter)->has_tbl())
            {
                (*iter)->get_tbl().toXmlElem("w:tbl", "", _outStream);
            }


        }
    }

    {
        vector<ChildGroup_2*>::const_iterator iter;
        for (iter = m_childGroupList_2.begin(); iter != m_childGroupList_2.end(); ++iter)
        {
            if ((*iter)->has_proofErr())
            {
                (*iter)->get_proofErr().toXmlElem("w:proofErr", "", _outStream);
            }


            else if ((*iter)->has_permStart())
            {
                (*iter)->get_permStart().toXmlElem("w:permStart", "", _outStream);
            }


            else if ((*iter)->has_permEnd())
            {
                (*iter)->get_permEnd().toXmlElem("w:permEnd", "", _outStream);
            }


        }
    }

    {
        vector<ChildGroup_3*>::const_iterator iter;
        for (iter = m_childGroupList_3.begin(); iter != m_childGroupList_3.end(); ++iter)
        {
            if ((*iter)->has_bookmarkStart())
            {
                (*iter)->get_bookmarkStart().toXmlElem("w:bookmarkStart", "", _outStream);
            }


            else if ((*iter)->has_bookmarkEnd())
            {
                (*iter)->get_bookmarkEnd().toXmlElem("w:bookmarkEnd", "", _outStream);
            }


            else if ((*iter)->has_moveFromRangeStart())
            {
                (*iter)->get_moveFromRangeStart().toXmlElem("w:moveFromRangeStart", "", _outStream);
            }


            else if ((*iter)->has_moveFromRangeEnd())
            {
                (*iter)->get_moveFromRangeEnd().toXmlElem("w:moveFromRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_moveToRangeStart())
            {
                (*iter)->get_moveToRangeStart().toXmlElem("w:moveToRangeStart", "", _outStream);
            }


            else if ((*iter)->has_moveToRangeEnd())
            {
                (*iter)->get_moveToRangeEnd().toXmlElem("w:moveToRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_commentRangeStart())
            {
                (*iter)->get_commentRangeStart().toXmlElem("w:commentRangeStart", "", _outStream);
            }


            else if ((*iter)->has_commentRangeEnd())
            {
                (*iter)->get_commentRangeEnd().toXmlElem("w:commentRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_customXmlInsRangeStart())
            {
                (*iter)->get_customXmlInsRangeStart().toXmlElem("w:customXmlInsRangeStart", "", _outStream);
            }


            else if ((*iter)->has_customXmlInsRangeEnd())
            {
                (*iter)->get_customXmlInsRangeEnd().toXmlElem("w:customXmlInsRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_customXmlDelRangeStart())
            {
                (*iter)->get_customXmlDelRangeStart().toXmlElem("w:customXmlDelRangeStart", "", _outStream);
            }


            else if ((*iter)->has_customXmlDelRangeEnd())
            {
                (*iter)->get_customXmlDelRangeEnd().toXmlElem("w:customXmlDelRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_customXmlMoveFromRangeStart())
            {
                (*iter)->get_customXmlMoveFromRangeStart().toXmlElem("w:customXmlMoveFromRangeStart", "", _outStream);
            }


            else if ((*iter)->has_customXmlMoveFromRangeEnd())
            {
                (*iter)->get_customXmlMoveFromRangeEnd().toXmlElem("w:customXmlMoveFromRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_customXmlMoveToRangeStart())
            {
                (*iter)->get_customXmlMoveToRangeStart().toXmlElem("w:customXmlMoveToRangeStart", "", _outStream);
            }


            else if ((*iter)->has_customXmlMoveToRangeEnd())
            {
                (*iter)->get_customXmlMoveToRangeEnd().toXmlElem("w:customXmlMoveToRangeEnd", "", _outStream);
            }


            else if ((*iter)->has_ins())
            {
                (*iter)->get_ins().toXmlElem("w:ins", "", _outStream);
            }


            else if ((*iter)->has_del())
            {
                (*iter)->get_del().toXmlElem("w:del", "", _outStream);
            }


            else if ((*iter)->has_moveFrom())
            {
                (*iter)->get_moveFrom().toXmlElem("w:moveFrom", "", _outStream);
            }


            else if ((*iter)->has_moveTo())
            {
                (*iter)->get_moveTo().toXmlElem("w:moveTo", "", _outStream);
            }


        }
    }

    {
        vector<ChildGroup_4*>::const_iterator iter;
        for (iter = m_childGroupList_4.begin(); iter != m_childGroupList_4.end(); ++iter)
        {
            if ((*iter)->has_m_oMathPara())
            {
                (*iter)->get_m_oMathPara().toXmlElem("m:oMathPara", "", _outStream);
            }


            else if ((*iter)->has_m_oMath())
            {
                (*iter)->get_m_oMath().toXmlElem("m:oMath", "", _outStream);
            }


            else if ((*iter)->has_altChunk())
            {
                (*iter)->get_altChunk().toXmlElem("w:altChunk", "", _outStream);
            }


        }
    }


    if (m_has_sectPr)
    {
        m_sectPr->toXmlElem("w:sectPr", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_Body& CT_Body::default_instance()
{
    if (!CT_Body::default_instance_)
    {
        CT_Body::default_instance_ = new CT_Body();
    }
    return *CT_Body::default_instance_;
}


// CT_Body::ChildGroup_1
CT_Body::ChildGroup_1::ChildGroup_1()
    :m_has_customXml(false),
     m_customXml(NULL),
     m_has_sdt(false),
     m_sdt(NULL),
     m_has_p(false),
     m_p(NULL),
     m_has_tbl(false),
     m_tbl(NULL)
{
}
bool CT_Body::ChildGroup_1::has_customXml() const
{
    return m_has_customXml;
}

CT_CustomXmlBlock* CT_Body::ChildGroup_1::mutable_customXml()
{

    m_has_sdt = false;

    if (m_sdt)
    {
        delete m_sdt;
        m_sdt = NULL;
    }
    ;

    m_has_p = false;

    if (m_p)
    {
        delete m_p;
        m_p = NULL;
    }
    ;

    m_has_tbl = false;

    if (m_tbl)
    {
        delete m_tbl;
        m_tbl = NULL;
    }
    ;

    m_has_customXml = true;
    if (!m_customXml)
    {
        m_customXml = new CT_CustomXmlBlock();
    }
    return m_customXml;
}

const CT_CustomXmlBlock& CT_Body::ChildGroup_1::get_customXml() const
{
    if (m_customXml)
    {
        return *m_customXml;
    }
    return CT_CustomXmlBlock::default_instance();
}

bool CT_Body::ChildGroup_1::has_sdt() const
{
    return m_has_sdt;
}

CT_SdtBlock* CT_Body::ChildGroup_1::mutable_sdt()
{

    m_has_customXml = false;

    if (m_customXml)
    {
        delete m_customXml;
        m_customXml = NULL;
    }
    ;

    m_has_p = false;

    if (m_p)
    {
        delete m_p;
        m_p = NULL;
    }
    ;

    m_has_tbl = false;

    if (m_tbl)
    {
        delete m_tbl;
        m_tbl = NULL;
    }
    ;

    m_has_sdt = true;
    if (!m_sdt)
    {
        m_sdt = new CT_SdtBlock();
    }
    return m_sdt;
}

const CT_SdtBlock& CT_Body::ChildGroup_1::get_sdt() const
{
    if (m_sdt)
    {
        return *m_sdt;
    }
    return CT_SdtBlock::default_instance();
}

bool CT_Body::ChildGroup_1::has_p() const
{
    return m_has_p;
}

CT_P* CT_Body::ChildGroup_1::mutable_p()
{

    m_has_customXml = false;

    if (m_customXml)
    {
        delete m_customXml;
        m_customXml = NULL;
    }
    ;

    m_has_sdt = false;

    if (m_sdt)
    {
        delete m_sdt;
        m_sdt = NULL;
    }
    ;

    m_has_tbl = false;

    if (m_tbl)
    {
        delete m_tbl;
        m_tbl = NULL;
    }
    ;

    m_has_p = true;
    if (!m_p)
    {
        m_p = new CT_P();
    }
    return m_p;
}

const CT_P& CT_Body::ChildGroup_1::get_p() const
{
    if (m_p)
    {
        return *m_p;
    }
    return CT_P::default_instance();
}

bool CT_Body::ChildGroup_1::has_tbl() const
{
    return m_has_tbl;
}

CT_Tbl* CT_Body::ChildGroup_1::mutable_tbl()
{

    m_has_customXml = false;

    if (m_customXml)
    {
        delete m_customXml;
        m_customXml = NULL;
    }
    ;

    m_has_sdt = false;

    if (m_sdt)
    {
        delete m_sdt;
        m_sdt = NULL;
    }
    ;

    m_has_p = false;

    if (m_p)
    {
        delete m_p;
        m_p = NULL;
    }
    ;

    m_has_tbl = true;
    if (!m_tbl)
    {
        m_tbl = new CT_Tbl();
    }
    return m_tbl;
}

const CT_Tbl& CT_Body::ChildGroup_1::get_tbl() const
{
    if (m_tbl)
    {
        return *m_tbl;
    }
    return CT_Tbl::default_instance();
}


// CT_Body::ChildGroup_2
CT_Body::ChildGroup_2::ChildGroup_2()
    :m_has_proofErr(false),
     m_proofErr(NULL),
     m_has_permStart(false),
     m_permStart(NULL),
     m_has_permEnd(false),
     m_permEnd(NULL)
{
}
bool CT_Body::ChildGroup_2::has_proofErr() const
{
    return m_has_proofErr;
}

CT_ProofErr* CT_Body::ChildGroup_2::mutable_proofErr()
{

    m_has_permStart = false;

    if (m_permStart)
    {
        delete m_permStart;
        m_permStart = NULL;
    }
    ;

    m_has_permEnd = false;

    if (m_permEnd)
    {
        delete m_permEnd;
        m_permEnd = NULL;
    }
    ;

    m_has_proofErr = true;
    if (!m_proofErr)
    {
        m_proofErr = new CT_ProofErr();
    }
    return m_proofErr;
}

const CT_ProofErr& CT_Body::ChildGroup_2::get_proofErr() const
{
    if (m_proofErr)
    {
        return *m_proofErr;
    }
    return CT_ProofErr::default_instance();
}

bool CT_Body::ChildGroup_2::has_permStart() const
{
    return m_has_permStart;
}

CT_PermStart* CT_Body::ChildGroup_2::mutable_permStart()
{

    m_has_proofErr = false;

    if (m_proofErr)
    {
        delete m_proofErr;
        m_proofErr = NULL;
    }
    ;

    m_has_permEnd = false;

    if (m_permEnd)
    {
        delete m_permEnd;
        m_permEnd = NULL;
    }
    ;

    m_has_permStart = true;
    if (!m_permStart)
    {
        m_permStart = new CT_PermStart();
    }
    return m_permStart;
}

const CT_PermStart& CT_Body::ChildGroup_2::get_permStart() const
{
    if (m_permStart)
    {
        return *m_permStart;
    }
    return CT_PermStart::default_instance();
}

bool CT_Body::ChildGroup_2::has_permEnd() const
{
    return m_has_permEnd;
}

CT_Perm* CT_Body::ChildGroup_2::mutable_permEnd()
{

    m_has_proofErr = false;

    if (m_proofErr)
    {
        delete m_proofErr;
        m_proofErr = NULL;
    }
    ;

    m_has_permStart = false;

    if (m_permStart)
    {
        delete m_permStart;
        m_permStart = NULL;
    }
    ;

    m_has_permEnd = true;
    if (!m_permEnd)
    {
        m_permEnd = new CT_Perm();
    }
    return m_permEnd;
}

const CT_Perm& CT_Body::ChildGroup_2::get_permEnd() const
{
    if (m_permEnd)
    {
        return *m_permEnd;
    }
    return CT_Perm::default_instance();
}


// CT_Body::ChildGroup_3
CT_Body::ChildGroup_3::ChildGroup_3()
    :m_has_bookmarkStart(false),
     m_bookmarkStart(NULL),
     m_has_bookmarkEnd(false),
     m_bookmarkEnd(NULL),
     m_has_moveFromRangeStart(false),
     m_moveFromRangeStart(NULL),
     m_has_moveFromRangeEnd(false),
     m_moveFromRangeEnd(NULL),
     m_has_moveToRangeStart(false),
     m_moveToRangeStart(NULL),
     m_has_moveToRangeEnd(false),
     m_moveToRangeEnd(NULL),
     m_has_commentRangeStart(false),
     m_commentRangeStart(NULL),
     m_has_commentRangeEnd(false),
     m_commentRangeEnd(NULL),
     m_has_customXmlInsRangeStart(false),
     m_customXmlInsRangeStart(NULL),
     m_has_customXmlInsRangeEnd(false),
     m_customXmlInsRangeEnd(NULL),
     m_has_customXmlDelRangeStart(false),
     m_customXmlDelRangeStart(NULL),
     m_has_customXmlDelRangeEnd(false),
     m_customXmlDelRangeEnd(NULL),
     m_has_customXmlMoveFromRangeStart(false),
     m_customXmlMoveFromRangeStart(NULL),
     m_has_customXmlMoveFromRangeEnd(false),
     m_customXmlMoveFromRangeEnd(NULL),
     m_has_customXmlMoveToRangeStart(false),
     m_customXmlMoveToRangeStart(NULL),
     m_has_customXmlMoveToRangeEnd(false),
     m_customXmlMoveToRangeEnd(NULL),
     m_has_ins(false),
     m_ins(NULL),
     m_has_del(false),
     m_del(NULL),
     m_has_moveFrom(false),
     m_moveFrom(NULL),
     m_has_moveTo(false),
     m_moveTo(NULL)
{
}
bool CT_Body::ChildGroup_3::has_bookmarkStart() const
{
    return m_has_bookmarkStart;
}

CT_Bookmark* CT_Body::ChildGroup_3::mutable_bookmarkStart()
{

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_bookmarkStart = true;
    if (!m_bookmarkStart)
    {
        m_bookmarkStart = new CT_Bookmark();
    }
    return m_bookmarkStart;
}

const CT_Bookmark& CT_Body::ChildGroup_3::get_bookmarkStart() const
{
    if (m_bookmarkStart)
    {
        return *m_bookmarkStart;
    }
    return CT_Bookmark::default_instance();
}

bool CT_Body::ChildGroup_3::has_bookmarkEnd() const
{
    return m_has_bookmarkEnd;
}

CT_MarkupRange* CT_Body::ChildGroup_3::mutable_bookmarkEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_bookmarkEnd = true;
    if (!m_bookmarkEnd)
    {
        m_bookmarkEnd = new CT_MarkupRange();
    }
    return m_bookmarkEnd;
}

const CT_MarkupRange& CT_Body::ChildGroup_3::get_bookmarkEnd() const
{
    if (m_bookmarkEnd)
    {
        return *m_bookmarkEnd;
    }
    return CT_MarkupRange::default_instance();
}

bool CT_Body::ChildGroup_3::has_moveFromRangeStart() const
{
    return m_has_moveFromRangeStart;
}

CT_MoveBookmark* CT_Body::ChildGroup_3::mutable_moveFromRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_moveFromRangeStart = true;
    if (!m_moveFromRangeStart)
    {
        m_moveFromRangeStart = new CT_MoveBookmark();
    }
    return m_moveFromRangeStart;
}

const CT_MoveBookmark& CT_Body::ChildGroup_3::get_moveFromRangeStart() const
{
    if (m_moveFromRangeStart)
    {
        return *m_moveFromRangeStart;
    }
    return CT_MoveBookmark::default_instance();
}

bool CT_Body::ChildGroup_3::has_moveFromRangeEnd() const
{
    return m_has_moveFromRangeEnd;
}

CT_MarkupRange* CT_Body::ChildGroup_3::mutable_moveFromRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_moveFromRangeEnd = true;
    if (!m_moveFromRangeEnd)
    {
        m_moveFromRangeEnd = new CT_MarkupRange();
    }
    return m_moveFromRangeEnd;
}

const CT_MarkupRange& CT_Body::ChildGroup_3::get_moveFromRangeEnd() const
{
    if (m_moveFromRangeEnd)
    {
        return *m_moveFromRangeEnd;
    }
    return CT_MarkupRange::default_instance();
}

bool CT_Body::ChildGroup_3::has_moveToRangeStart() const
{
    return m_has_moveToRangeStart;
}

CT_MoveBookmark* CT_Body::ChildGroup_3::mutable_moveToRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_moveToRangeStart = true;
    if (!m_moveToRangeStart)
    {
        m_moveToRangeStart = new CT_MoveBookmark();
    }
    return m_moveToRangeStart;
}

const CT_MoveBookmark& CT_Body::ChildGroup_3::get_moveToRangeStart() const
{
    if (m_moveToRangeStart)
    {
        return *m_moveToRangeStart;
    }
    return CT_MoveBookmark::default_instance();
}

bool CT_Body::ChildGroup_3::has_moveToRangeEnd() const
{
    return m_has_moveToRangeEnd;
}

CT_MarkupRange* CT_Body::ChildGroup_3::mutable_moveToRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_moveToRangeEnd = true;
    if (!m_moveToRangeEnd)
    {
        m_moveToRangeEnd = new CT_MarkupRange();
    }
    return m_moveToRangeEnd;
}

const CT_MarkupRange& CT_Body::ChildGroup_3::get_moveToRangeEnd() const
{
    if (m_moveToRangeEnd)
    {
        return *m_moveToRangeEnd;
    }
    return CT_MarkupRange::default_instance();
}

bool CT_Body::ChildGroup_3::has_commentRangeStart() const
{
    return m_has_commentRangeStart;
}

CT_MarkupRange* CT_Body::ChildGroup_3::mutable_commentRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_commentRangeStart = true;
    if (!m_commentRangeStart)
    {
        m_commentRangeStart = new CT_MarkupRange();
    }
    return m_commentRangeStart;
}

const CT_MarkupRange& CT_Body::ChildGroup_3::get_commentRangeStart() const
{
    if (m_commentRangeStart)
    {
        return *m_commentRangeStart;
    }
    return CT_MarkupRange::default_instance();
}

bool CT_Body::ChildGroup_3::has_commentRangeEnd() const
{
    return m_has_commentRangeEnd;
}

CT_MarkupRange* CT_Body::ChildGroup_3::mutable_commentRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_commentRangeEnd = true;
    if (!m_commentRangeEnd)
    {
        m_commentRangeEnd = new CT_MarkupRange();
    }
    return m_commentRangeEnd;
}

const CT_MarkupRange& CT_Body::ChildGroup_3::get_commentRangeEnd() const
{
    if (m_commentRangeEnd)
    {
        return *m_commentRangeEnd;
    }
    return CT_MarkupRange::default_instance();
}

bool CT_Body::ChildGroup_3::has_customXmlInsRangeStart() const
{
    return m_has_customXmlInsRangeStart;
}

CT_TrackChange* CT_Body::ChildGroup_3::mutable_customXmlInsRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = true;
    if (!m_customXmlInsRangeStart)
    {
        m_customXmlInsRangeStart = new CT_TrackChange();
    }
    return m_customXmlInsRangeStart;
}

const CT_TrackChange& CT_Body::ChildGroup_3::get_customXmlInsRangeStart() const
{
    if (m_customXmlInsRangeStart)
    {
        return *m_customXmlInsRangeStart;
    }
    return CT_TrackChange::default_instance();
}

bool CT_Body::ChildGroup_3::has_customXmlInsRangeEnd() const
{
    return m_has_customXmlInsRangeEnd;
}

CT_Markup* CT_Body::ChildGroup_3::mutable_customXmlInsRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = true;
    if (!m_customXmlInsRangeEnd)
    {
        m_customXmlInsRangeEnd = new CT_Markup();
    }
    return m_customXmlInsRangeEnd;
}

const CT_Markup& CT_Body::ChildGroup_3::get_customXmlInsRangeEnd() const
{
    if (m_customXmlInsRangeEnd)
    {
        return *m_customXmlInsRangeEnd;
    }
    return CT_Markup::default_instance();
}

bool CT_Body::ChildGroup_3::has_customXmlDelRangeStart() const
{
    return m_has_customXmlDelRangeStart;
}

CT_TrackChange* CT_Body::ChildGroup_3::mutable_customXmlDelRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = true;
    if (!m_customXmlDelRangeStart)
    {
        m_customXmlDelRangeStart = new CT_TrackChange();
    }
    return m_customXmlDelRangeStart;
}

const CT_TrackChange& CT_Body::ChildGroup_3::get_customXmlDelRangeStart() const
{
    if (m_customXmlDelRangeStart)
    {
        return *m_customXmlDelRangeStart;
    }
    return CT_TrackChange::default_instance();
}

bool CT_Body::ChildGroup_3::has_customXmlDelRangeEnd() const
{
    return m_has_customXmlDelRangeEnd;
}

CT_Markup* CT_Body::ChildGroup_3::mutable_customXmlDelRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = true;
    if (!m_customXmlDelRangeEnd)
    {
        m_customXmlDelRangeEnd = new CT_Markup();
    }
    return m_customXmlDelRangeEnd;
}

const CT_Markup& CT_Body::ChildGroup_3::get_customXmlDelRangeEnd() const
{
    if (m_customXmlDelRangeEnd)
    {
        return *m_customXmlDelRangeEnd;
    }
    return CT_Markup::default_instance();
}

bool CT_Body::ChildGroup_3::has_customXmlMoveFromRangeStart() const
{
    return m_has_customXmlMoveFromRangeStart;
}

CT_TrackChange* CT_Body::ChildGroup_3::mutable_customXmlMoveFromRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = true;
    if (!m_customXmlMoveFromRangeStart)
    {
        m_customXmlMoveFromRangeStart = new CT_TrackChange();
    }
    return m_customXmlMoveFromRangeStart;
}

const CT_TrackChange& CT_Body::ChildGroup_3::get_customXmlMoveFromRangeStart() const
{
    if (m_customXmlMoveFromRangeStart)
    {
        return *m_customXmlMoveFromRangeStart;
    }
    return CT_TrackChange::default_instance();
}

bool CT_Body::ChildGroup_3::has_customXmlMoveFromRangeEnd() const
{
    return m_has_customXmlMoveFromRangeEnd;
}

CT_Markup* CT_Body::ChildGroup_3::mutable_customXmlMoveFromRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = true;
    if (!m_customXmlMoveFromRangeEnd)
    {
        m_customXmlMoveFromRangeEnd = new CT_Markup();
    }
    return m_customXmlMoveFromRangeEnd;
}

const CT_Markup& CT_Body::ChildGroup_3::get_customXmlMoveFromRangeEnd() const
{
    if (m_customXmlMoveFromRangeEnd)
    {
        return *m_customXmlMoveFromRangeEnd;
    }
    return CT_Markup::default_instance();
}

bool CT_Body::ChildGroup_3::has_customXmlMoveToRangeStart() const
{
    return m_has_customXmlMoveToRangeStart;
}

CT_TrackChange* CT_Body::ChildGroup_3::mutable_customXmlMoveToRangeStart()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = true;
    if (!m_customXmlMoveToRangeStart)
    {
        m_customXmlMoveToRangeStart = new CT_TrackChange();
    }
    return m_customXmlMoveToRangeStart;
}

const CT_TrackChange& CT_Body::ChildGroup_3::get_customXmlMoveToRangeStart() const
{
    if (m_customXmlMoveToRangeStart)
    {
        return *m_customXmlMoveToRangeStart;
    }
    return CT_TrackChange::default_instance();
}

bool CT_Body::ChildGroup_3::has_customXmlMoveToRangeEnd() const
{
    return m_has_customXmlMoveToRangeEnd;
}

CT_Markup* CT_Body::ChildGroup_3::mutable_customXmlMoveToRangeEnd()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = true;
    if (!m_customXmlMoveToRangeEnd)
    {
        m_customXmlMoveToRangeEnd = new CT_Markup();
    }
    return m_customXmlMoveToRangeEnd;
}

const CT_Markup& CT_Body::ChildGroup_3::get_customXmlMoveToRangeEnd() const
{
    if (m_customXmlMoveToRangeEnd)
    {
        return *m_customXmlMoveToRangeEnd;
    }
    return CT_Markup::default_instance();
}

bool CT_Body::ChildGroup_3::has_ins() const
{
    return m_has_ins;
}

CT_RunTrackChange* CT_Body::ChildGroup_3::mutable_ins()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_ins = true;
    if (!m_ins)
    {
        m_ins = new CT_RunTrackChange();
    }
    return m_ins;
}

const CT_RunTrackChange& CT_Body::ChildGroup_3::get_ins() const
{
    if (m_ins)
    {
        return *m_ins;
    }
    return CT_RunTrackChange::default_instance();
}

bool CT_Body::ChildGroup_3::has_del() const
{
    return m_has_del;
}

CT_RunTrackChange* CT_Body::ChildGroup_3::mutable_del()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_del = true;
    if (!m_del)
    {
        m_del = new CT_RunTrackChange();
    }
    return m_del;
}

const CT_RunTrackChange& CT_Body::ChildGroup_3::get_del() const
{
    if (m_del)
    {
        return *m_del;
    }
    return CT_RunTrackChange::default_instance();
}

bool CT_Body::ChildGroup_3::has_moveFrom() const
{
    return m_has_moveFrom;
}

CT_RunTrackChange* CT_Body::ChildGroup_3::mutable_moveFrom()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveTo = false;

    if (m_moveTo)
    {
        delete m_moveTo;
        m_moveTo = NULL;
    }
    ;

    m_has_moveFrom = true;
    if (!m_moveFrom)
    {
        m_moveFrom = new CT_RunTrackChange();
    }
    return m_moveFrom;
}

const CT_RunTrackChange& CT_Body::ChildGroup_3::get_moveFrom() const
{
    if (m_moveFrom)
    {
        return *m_moveFrom;
    }
    return CT_RunTrackChange::default_instance();
}

bool CT_Body::ChildGroup_3::has_moveTo() const
{
    return m_has_moveTo;
}

CT_RunTrackChange* CT_Body::ChildGroup_3::mutable_moveTo()
{

    m_has_bookmarkStart = false;

    if (m_bookmarkStart)
    {
        delete m_bookmarkStart;
        m_bookmarkStart = NULL;
    }
    ;

    m_has_bookmarkEnd = false;

    if (m_bookmarkEnd)
    {
        delete m_bookmarkEnd;
        m_bookmarkEnd = NULL;
    }
    ;

    m_has_moveFromRangeStart = false;

    if (m_moveFromRangeStart)
    {
        delete m_moveFromRangeStart;
        m_moveFromRangeStart = NULL;
    }
    ;

    m_has_moveFromRangeEnd = false;

    if (m_moveFromRangeEnd)
    {
        delete m_moveFromRangeEnd;
        m_moveFromRangeEnd = NULL;
    }
    ;

    m_has_moveToRangeStart = false;

    if (m_moveToRangeStart)
    {
        delete m_moveToRangeStart;
        m_moveToRangeStart = NULL;
    }
    ;

    m_has_moveToRangeEnd = false;

    if (m_moveToRangeEnd)
    {
        delete m_moveToRangeEnd;
        m_moveToRangeEnd = NULL;
    }
    ;

    m_has_commentRangeStart = false;

    if (m_commentRangeStart)
    {
        delete m_commentRangeStart;
        m_commentRangeStart = NULL;
    }
    ;

    m_has_commentRangeEnd = false;

    if (m_commentRangeEnd)
    {
        delete m_commentRangeEnd;
        m_commentRangeEnd = NULL;
    }
    ;

    m_has_customXmlInsRangeStart = false;

    if (m_customXmlInsRangeStart)
    {
        delete m_customXmlInsRangeStart;
        m_customXmlInsRangeStart = NULL;
    }
    ;

    m_has_customXmlInsRangeEnd = false;

    if (m_customXmlInsRangeEnd)
    {
        delete m_customXmlInsRangeEnd;
        m_customXmlInsRangeEnd = NULL;
    }
    ;

    m_has_customXmlDelRangeStart = false;

    if (m_customXmlDelRangeStart)
    {
        delete m_customXmlDelRangeStart;
        m_customXmlDelRangeStart = NULL;
    }
    ;

    m_has_customXmlDelRangeEnd = false;

    if (m_customXmlDelRangeEnd)
    {
        delete m_customXmlDelRangeEnd;
        m_customXmlDelRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeStart = false;

    if (m_customXmlMoveFromRangeStart)
    {
        delete m_customXmlMoveFromRangeStart;
        m_customXmlMoveFromRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveFromRangeEnd = false;

    if (m_customXmlMoveFromRangeEnd)
    {
        delete m_customXmlMoveFromRangeEnd;
        m_customXmlMoveFromRangeEnd = NULL;
    }
    ;

    m_has_customXmlMoveToRangeStart = false;

    if (m_customXmlMoveToRangeStart)
    {
        delete m_customXmlMoveToRangeStart;
        m_customXmlMoveToRangeStart = NULL;
    }
    ;

    m_has_customXmlMoveToRangeEnd = false;

    if (m_customXmlMoveToRangeEnd)
    {
        delete m_customXmlMoveToRangeEnd;
        m_customXmlMoveToRangeEnd = NULL;
    }
    ;

    m_has_ins = false;

    if (m_ins)
    {
        delete m_ins;
        m_ins = NULL;
    }
    ;

    m_has_del = false;

    if (m_del)
    {
        delete m_del;
        m_del = NULL;
    }
    ;

    m_has_moveFrom = false;

    if (m_moveFrom)
    {
        delete m_moveFrom;
        m_moveFrom = NULL;
    }
    ;

    m_has_moveTo = true;
    if (!m_moveTo)
    {
        m_moveTo = new CT_RunTrackChange();
    }
    return m_moveTo;
}

const CT_RunTrackChange& CT_Body::ChildGroup_3::get_moveTo() const
{
    if (m_moveTo)
    {
        return *m_moveTo;
    }
    return CT_RunTrackChange::default_instance();
}


// CT_Body::ChildGroup_4
CT_Body::ChildGroup_4::ChildGroup_4()
    :m_has_m_oMathPara(false),
     m_m_oMathPara(NULL),
     m_has_m_oMath(false),
     m_m_oMath(NULL),
     m_has_altChunk(false),
     m_altChunk(NULL)
{
}
bool CT_Body::ChildGroup_4::has_m_oMathPara() const
{
    return m_has_m_oMathPara;
}

ns_m::CT_OMathPara* CT_Body::ChildGroup_4::mutable_m_oMathPara()
{

    m_has_m_oMath = false;

    if (m_m_oMath)
    {
        delete m_m_oMath;
        m_m_oMath = NULL;
    }
    ;

    m_has_altChunk = false;

    if (m_altChunk)
    {
        delete m_altChunk;
        m_altChunk = NULL;
    }
    ;

    m_has_m_oMathPara = true;
    if (!m_m_oMathPara)
    {
        m_m_oMathPara = new ns_m::CT_OMathPara();
    }
    return m_m_oMathPara;
}

const ns_m::CT_OMathPara& CT_Body::ChildGroup_4::get_m_oMathPara() const
{
    if (m_m_oMathPara)
    {
        return *m_m_oMathPara;
    }
    return ns_m::CT_OMathPara::default_instance();
}

bool CT_Body::ChildGroup_4::has_m_oMath() const
{
    return m_has_m_oMath;
}

ns_m::CT_OMath* CT_Body::ChildGroup_4::mutable_m_oMath()
{

    m_has_m_oMathPara = false;

    if (m_m_oMathPara)
    {
        delete m_m_oMathPara;
        m_m_oMathPara = NULL;
    }
    ;

    m_has_altChunk = false;

    if (m_altChunk)
    {
        delete m_altChunk;
        m_altChunk = NULL;
    }
    ;

    m_has_m_oMath = true;
    if (!m_m_oMath)
    {
        m_m_oMath = new ns_m::CT_OMath();
    }
    return m_m_oMath;
}

const ns_m::CT_OMath& CT_Body::ChildGroup_4::get_m_oMath() const
{
    if (m_m_oMath)
    {
        return *m_m_oMath;
    }
    return ns_m::CT_OMath::default_instance();
}

bool CT_Body::ChildGroup_4::has_altChunk() const
{
    return m_has_altChunk;
}

CT_AltChunk* CT_Body::ChildGroup_4::mutable_altChunk()
{

    m_has_m_oMathPara = false;

    if (m_m_oMathPara)
    {
        delete m_m_oMathPara;
        m_m_oMathPara = NULL;
    }
    ;

    m_has_m_oMath = false;

    if (m_m_oMath)
    {
        delete m_m_oMath;
        m_m_oMath = NULL;
    }
    ;

    m_has_altChunk = true;
    if (!m_altChunk)
    {
        m_altChunk = new CT_AltChunk();
    }
    return m_altChunk;
}

const CT_AltChunk& CT_Body::ChildGroup_4::get_altChunk() const
{
    if (m_altChunk)
    {
        return *m_altChunk;
    }
    return CT_AltChunk::default_instance();
}

CT_Body* CT_Body::default_instance_ = NULL;

// CT_ShapeDefaults
CT_ShapeDefaults::CT_ShapeDefaults()

{
}
CT_ShapeDefaults::~CT_ShapeDefaults()
{
    clear();
}
void CT_ShapeDefaults::append_o_any(ns_o::Element* _o_any)
{
    m_o_any_list.push_back(_o_any);
}

void CT_ShapeDefaults::clear()
{    }

void CT_ShapeDefaults::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";

    {
        vector<ns_o::Element*>::const_iterator iter;
        for (iter = m_o_any_list.begin(); iter != m_o_any_list.end(); ++iter)
        {
            (*iter)->toXml(_outStream);
        }
    }

    _outStream << "</" << _elemName << ">";
}

const CT_ShapeDefaults& CT_ShapeDefaults::default_instance()
{
    if (!CT_ShapeDefaults::default_instance_)
    {
        CT_ShapeDefaults::default_instance_ = new CT_ShapeDefaults();
    }
    return *CT_ShapeDefaults::default_instance_;
}

CT_ShapeDefaults* CT_ShapeDefaults::default_instance_ = NULL;

// CT_Comments
CT_Comments::CT_Comments()

{
}
CT_Comments::~CT_Comments()
{
    clear();
}
CT_Comment* CT_Comments::add_comment()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Comment* pNewChild = pChildGroup->mutable_comment();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

void CT_Comments::clear()
{
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
}

void CT_Comments::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";

    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_comment())
            {
                (*iter)->get_comment().toXmlElem("w:comment", "", _outStream);
            }


        }
    }

    _outStream << "</" << _elemName << ">";
}

const CT_Comments& CT_Comments::default_instance()
{
    if (!CT_Comments::default_instance_)
    {
        CT_Comments::default_instance_ = new CT_Comments();
    }
    return *CT_Comments::default_instance_;
}


// CT_Comments::ChildGroup_1
CT_Comments::ChildGroup_1::ChildGroup_1()
    :m_has_comment(false),
     m_comment(NULL)
{
}
bool CT_Comments::ChildGroup_1::has_comment() const
{
    return m_has_comment;
}

CT_Comment* CT_Comments::ChildGroup_1::mutable_comment()
{

    m_has_comment = true;
    if (!m_comment)
    {
        m_comment = new CT_Comment();
    }
    return m_comment;
}

const CT_Comment& CT_Comments::ChildGroup_1::get_comment() const
{
    if (m_comment)
    {
        return *m_comment;
    }
    return CT_Comment::default_instance();
}

CT_Comments* CT_Comments::default_instance_ = NULL;

// CT_Footnotes
CT_Footnotes::CT_Footnotes()

{
}
CT_Footnotes::~CT_Footnotes()
{
    clear();
}
CT_FtnEdn* CT_Footnotes::add_footnote()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_FtnEdn* pNewChild = pChildGroup->mutable_footnote();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

void CT_Footnotes::clear()
{
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
}

void CT_Footnotes::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";

    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_footnote())
            {
                (*iter)->get_footnote().toXmlElem("w:footnote", "", _outStream);
            }


        }
    }

    _outStream << "</" << _elemName << ">";
}

const CT_Footnotes& CT_Footnotes::default_instance()
{
    if (!CT_Footnotes::default_instance_)
    {
        CT_Footnotes::default_instance_ = new CT_Footnotes();
    }
    return *CT_Footnotes::default_instance_;
}


// CT_Footnotes::ChildGroup_1
CT_Footnotes::ChildGroup_1::ChildGroup_1()
    :m_has_footnote(false),
     m_footnote(NULL)
{
}
bool CT_Footnotes::ChildGroup_1::has_footnote() const
{
    return m_has_footnote;
}

CT_FtnEdn* CT_Footnotes::ChildGroup_1::mutable_footnote()
{

    m_has_footnote = true;
    if (!m_footnote)
    {
        m_footnote = new CT_FtnEdn();
    }
    return m_footnote;
}

const CT_FtnEdn& CT_Footnotes::ChildGroup_1::get_footnote() const
{
    if (m_footnote)
    {
        return *m_footnote;
    }
    return CT_FtnEdn::default_instance();
}

CT_Footnotes* CT_Footnotes::default_instance_ = NULL;

// CT_Endnotes
CT_Endnotes::CT_Endnotes()

{
}
CT_Endnotes::~CT_Endnotes()
{
    clear();
}
CT_FtnEdn* CT_Endnotes::add_endnote()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_FtnEdn* pNewChild = pChildGroup->mutable_endnote();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

void CT_Endnotes::clear()
{
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
}

void CT_Endnotes::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";

    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_endnote())
            {
                (*iter)->get_endnote().toXmlElem("w:endnote", "", _outStream);
            }


        }
    }

    _outStream << "</" << _elemName << ">";
}

const CT_Endnotes& CT_Endnotes::default_instance()
{
    if (!CT_Endnotes::default_instance_)
    {
        CT_Endnotes::default_instance_ = new CT_Endnotes();
    }
    return *CT_Endnotes::default_instance_;
}


// CT_Endnotes::ChildGroup_1
CT_Endnotes::ChildGroup_1::ChildGroup_1()
    :m_has_endnote(false),
     m_endnote(NULL)
{
}
bool CT_Endnotes::ChildGroup_1::has_endnote() const
{
    return m_has_endnote;
}

CT_FtnEdn* CT_Endnotes::ChildGroup_1::mutable_endnote()
{

    m_has_endnote = true;
    if (!m_endnote)
    {
        m_endnote = new CT_FtnEdn();
    }
    return m_endnote;
}

const CT_FtnEdn& CT_Endnotes::ChildGroup_1::get_endnote() const
{
    if (m_endnote)
    {
        return *m_endnote;
    }
    return CT_FtnEdn::default_instance();
}

CT_Endnotes* CT_Endnotes::default_instance_ = NULL;

// CT_SmartTagType
CT_SmartTagType::CT_SmartTagType()
    :m_has_namespaceuri_attr(false),
     m_namespaceuri_attr(NULL),
     m_has_name_attr(false),
     m_name_attr(NULL),
     m_has_url_attr(false),
     m_url_attr(NULL)
{
}
CT_SmartTagType::~CT_SmartTagType()
{
    clear();
}
void CT_SmartTagType::clear()
{
    m_has_namespaceuri_attr = false;

    if (m_namespaceuri_attr)
    {
        delete m_namespaceuri_attr;
        m_namespaceuri_attr = NULL;
    }


    m_has_name_attr = false;

    if (m_name_attr)
    {
        delete m_name_attr;
        m_name_attr = NULL;
    }


    m_has_url_attr = false;

    if (m_url_attr)
    {
        delete m_url_attr;
        m_url_attr = NULL;
    }

}

void CT_SmartTagType::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_namespaceuri_attr)
    {
        m_namespaceuri_attr->toXmlAttr("w:namespaceuri", _outStream);
    }



    if (m_has_name_attr)
    {
        m_name_attr->toXmlAttr("w:name", _outStream);
    }



    if (m_has_url_attr)
    {
        m_url_attr->toXmlAttr("w:url", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_SmartTagType& CT_SmartTagType::default_instance()
{
    if (!CT_SmartTagType::default_instance_)
    {
        CT_SmartTagType::default_instance_ = new CT_SmartTagType();
    }
    return *CT_SmartTagType::default_instance_;
}

bool CT_SmartTagType::has_namespaceuri_attr() const
{
    return m_has_namespaceuri_attr;
}

void CT_SmartTagType::set_namespaceuri_attr(const ns_s::ST_String& _namespaceuri_attr)
{
    m_has_namespaceuri_attr = true;
    m_namespaceuri_attr = new ns_s::ST_String(_namespaceuri_attr);
}

const ns_s::ST_String& CT_SmartTagType::get_namespaceuri_attr() const
{
    if (m_namespaceuri_attr)
    {
        return *m_namespaceuri_attr;
    }
    return ns_s::ST_String::default_instance();
}

bool CT_SmartTagType::has_name_attr() const
{
    return m_has_name_attr;
}

void CT_SmartTagType::set_name_attr(const ns_s::ST_String& _name_attr)
{
    m_has_name_attr = true;
    m_name_attr = new ns_s::ST_String(_name_attr);
}

const ns_s::ST_String& CT_SmartTagType::get_name_attr() const
{
    if (m_name_attr)
    {
        return *m_name_attr;
    }
    return ns_s::ST_String::default_instance();
}

bool CT_SmartTagType::has_url_attr() const
{
    return m_has_url_attr;
}

void CT_SmartTagType::set_url_attr(const ns_s::ST_String& _url_attr)
{
    m_has_url_attr = true;
    m_url_attr = new ns_s::ST_String(_url_attr);
}

const ns_s::ST_String& CT_SmartTagType::get_url_attr() const
{
    if (m_url_attr)
    {
        return *m_url_attr;
    }
    return ns_s::ST_String::default_instance();
}

CT_SmartTagType* CT_SmartTagType::default_instance_ = NULL;

// CT_DocPartBehavior
CT_DocPartBehavior::CT_DocPartBehavior()
    :m_has_val_attr(false),
     m_val_attr(NULL)
{
}
CT_DocPartBehavior::~CT_DocPartBehavior()
{
    clear();
}
void CT_DocPartBehavior::clear()
{
    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }

}

void CT_DocPartBehavior::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_val_attr);
    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_DocPartBehavior& CT_DocPartBehavior::default_instance()
{
    if (!CT_DocPartBehavior::default_instance_)
    {
        CT_DocPartBehavior::default_instance_ = new CT_DocPartBehavior();
    }
    return *CT_DocPartBehavior::default_instance_;
}

bool CT_DocPartBehavior::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_DocPartBehavior::set_val_attr(const ST_DocPartBehavior& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ST_DocPartBehavior(_val_attr);
}

const ST_DocPartBehavior& CT_DocPartBehavior::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ST_DocPartBehavior::default_instance();
}

CT_DocPartBehavior* CT_DocPartBehavior::default_instance_ = NULL;

// CT_DocPartBehaviors
CT_DocPartBehaviors::CT_DocPartBehaviors()
    :m_has_behavior(false),
     m_behavior(NULL)
{
}
CT_DocPartBehaviors::~CT_DocPartBehaviors()
{
    clear();
}
bool CT_DocPartBehaviors::has_behavior() const
{
    return m_has_behavior;
}

CT_DocPartBehavior* CT_DocPartBehaviors::mutable_behavior()
{

    m_has_behavior = true;
    if (!m_behavior)
    {
        m_behavior = new CT_DocPartBehavior();
    }
    return m_behavior;
}

const CT_DocPartBehavior& CT_DocPartBehaviors::get_behavior() const
{
    if (m_behavior)
    {
        return *m_behavior;
    }
    return CT_DocPartBehavior::default_instance();
}

void CT_DocPartBehaviors::clear()
{
    m_has_behavior = false;

    if (m_behavior)
    {
        delete m_behavior;
        m_behavior = NULL;
    }

}

void CT_DocPartBehaviors::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";

    {
        bool elemHasValueList[1] = {m_has_behavior};
        int cnt = count(elemHasValueList, elemHasValueList + 1, true);
        assert(cnt == 1);
    }


    if (m_has_behavior)
    {
        m_behavior->toXmlElem("w:behavior", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_DocPartBehaviors& CT_DocPartBehaviors::default_instance()
{
    if (!CT_DocPartBehaviors::default_instance_)
    {
        CT_DocPartBehaviors::default_instance_ = new CT_DocPartBehaviors();
    }
    return *CT_DocPartBehaviors::default_instance_;
}

CT_DocPartBehaviors* CT_DocPartBehaviors::default_instance_ = NULL;

// CT_DocPartType
CT_DocPartType::CT_DocPartType()
    :m_has_val_attr(false),
     m_val_attr(NULL)
{
}
CT_DocPartType::~CT_DocPartType()
{
    clear();
}
void CT_DocPartType::clear()
{
    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }

}

void CT_DocPartType::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_val_attr);
    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_DocPartType& CT_DocPartType::default_instance()
{
    if (!CT_DocPartType::default_instance_)
    {
        CT_DocPartType::default_instance_ = new CT_DocPartType();
    }
    return *CT_DocPartType::default_instance_;
}

bool CT_DocPartType::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_DocPartType::set_val_attr(const ST_DocPartType& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ST_DocPartType(_val_attr);
}

const ST_DocPartType& CT_DocPartType::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ST_DocPartType::default_instance();
}

CT_DocPartType* CT_DocPartType::default_instance_ = NULL;

// CT_DocPartTypes
CT_DocPartTypes::CT_DocPartTypes()
    :m_has_type(false),
     m_type(NULL),
     m_has_all_attr(false),
     m_all_attr(NULL)
{
}
CT_DocPartTypes::~CT_DocPartTypes()
{
    clear();
}
bool CT_DocPartTypes::has_type() const
{
    return m_has_type;
}

CT_DocPartType* CT_DocPartTypes::mutable_type()
{

    m_has_type = true;
    if (!m_type)
    {
        m_type = new CT_DocPartType();
    }
    return m_type;
}

const CT_DocPartType& CT_DocPartTypes::get_type() const
{
    if (m_type)
    {
        return *m_type;
    }
    return CT_DocPartType::default_instance();
}

void CT_DocPartTypes::clear()
{
    m_has_all_attr = false;

    if (m_all_attr)
    {
        delete m_all_attr;
        m_all_attr = NULL;
    }


    m_has_type = false;

    if (m_type)
    {
        delete m_type;
        m_type = NULL;
    }

}

void CT_DocPartTypes::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_all_attr)
    {
        m_all_attr->toXmlAttr("w:all", _outStream);
    }

    _outStream << ">";

    {
        bool elemHasValueList[1] = {m_has_type};
        int cnt = count(elemHasValueList, elemHasValueList + 1, true);
        assert(cnt == 1);
    }


    if (m_has_type)
    {
        m_type->toXmlElem("w:type", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_DocPartTypes& CT_DocPartTypes::default_instance()
{
    if (!CT_DocPartTypes::default_instance_)
    {
        CT_DocPartTypes::default_instance_ = new CT_DocPartTypes();
    }
    return *CT_DocPartTypes::default_instance_;
}

bool CT_DocPartTypes::has_all_attr() const
{
    return m_has_all_attr;
}

void CT_DocPartTypes::set_all_attr(const ns_s::ST_OnOff& _all_attr)
{
    m_has_all_attr = true;
    m_all_attr = new ns_s::ST_OnOff(_all_attr);
}

const ns_s::ST_OnOff& CT_DocPartTypes::get_all_attr() const
{
    if (m_all_attr)
    {
        return *m_all_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

CT_DocPartTypes* CT_DocPartTypes::default_instance_ = NULL;

// CT_DocPartGallery
CT_DocPartGallery::CT_DocPartGallery()
    :m_has_val_attr(false),
     m_val_attr(NULL)
{
}
CT_DocPartGallery::~CT_DocPartGallery()
{
    clear();
}
void CT_DocPartGallery::clear()
{
    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }

}

void CT_DocPartGallery::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_val_attr);
    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_DocPartGallery& CT_DocPartGallery::default_instance()
{
    if (!CT_DocPartGallery::default_instance_)
    {
        CT_DocPartGallery::default_instance_ = new CT_DocPartGallery();
    }
    return *CT_DocPartGallery::default_instance_;
}

bool CT_DocPartGallery::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_DocPartGallery::set_val_attr(const ST_DocPartGallery& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ST_DocPartGallery(_val_attr);
}

const ST_DocPartGallery& CT_DocPartGallery::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ST_DocPartGallery::default_instance();
}

CT_DocPartGallery* CT_DocPartGallery::default_instance_ = NULL;

// CT_DocPartCategory
CT_DocPartCategory::CT_DocPartCategory()
    :m_has_name(false),
     m_name(NULL),
     m_has_gallery(false),
     m_gallery(NULL)
{
}
CT_DocPartCategory::~CT_DocPartCategory()
{
    clear();
}
bool CT_DocPartCategory::has_name() const
{
    return m_has_name;
}

CT_String* CT_DocPartCategory::mutable_name()
{
    m_has_name = true;
    if (!m_name)
    {
        m_name = new CT_String();
    }
    return m_name;
}

const CT_String& CT_DocPartCategory::get_name() const
{
    if (m_name)
    {
        return *m_name;
    }
    return CT_String::default_instance();
}

bool CT_DocPartCategory::has_gallery() const
{
    return m_has_gallery;
}

CT_DocPartGallery* CT_DocPartCategory::mutable_gallery()
{
    m_has_gallery = true;
    if (!m_gallery)
    {
        m_gallery = new CT_DocPartGallery();
    }
    return m_gallery;
}

const CT_DocPartGallery& CT_DocPartCategory::get_gallery() const
{
    if (m_gallery)
    {
        return *m_gallery;
    }
    return CT_DocPartGallery::default_instance();
}

void CT_DocPartCategory::clear()
{
    m_has_name = false;

    if (m_name)
    {
        delete m_name;
        m_name = NULL;
    }


    m_has_gallery = false;

    if (m_gallery)
    {
        delete m_gallery;
        m_gallery = NULL;
    }

}

void CT_DocPartCategory::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";

    assert(m_has_name);


    assert(m_has_gallery);


    if (m_has_name)
    {
        m_name->toXmlElem("w:name", "", _outStream);
    }


    if (m_has_gallery)
    {
        m_gallery->toXmlElem("w:gallery", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_DocPartCategory& CT_DocPartCategory::default_instance()
{
    if (!CT_DocPartCategory::default_instance_)
    {
        CT_DocPartCategory::default_instance_ = new CT_DocPartCategory();
    }
    return *CT_DocPartCategory::default_instance_;
}

CT_DocPartCategory* CT_DocPartCategory::default_instance_ = NULL;

// CT_DocPartName
CT_DocPartName::CT_DocPartName()
    :m_has_val_attr(false),
     m_val_attr(NULL),
     m_has_decorated_attr(false),
     m_decorated_attr(NULL)
{
}
CT_DocPartName::~CT_DocPartName()
{
    clear();
}
void CT_DocPartName::clear()
{
    m_has_val_attr = false;

    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }


    m_has_decorated_attr = false;

    if (m_decorated_attr)
    {
        delete m_decorated_attr;
        m_decorated_attr = NULL;
    }

}

void CT_DocPartName::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_val_attr);
    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("w:val", _outStream);
    }



    if (m_has_decorated_attr)
    {
        m_decorated_attr->toXmlAttr("w:decorated", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_DocPartName& CT_DocPartName::default_instance()
{
    if (!CT_DocPartName::default_instance_)
    {
        CT_DocPartName::default_instance_ = new CT_DocPartName();
    }
    return *CT_DocPartName::default_instance_;
}

bool CT_DocPartName::has_val_attr() const
{
    return m_has_val_attr;
}

void CT_DocPartName::set_val_attr(const ns_s::ST_String& _val_attr)
{
    m_has_val_attr = true;
    m_val_attr = new ns_s::ST_String(_val_attr);
}

const ns_s::ST_String& CT_DocPartName::get_val_attr() const
{
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ns_s::ST_String::default_instance();
}

bool CT_DocPartName::has_decorated_attr() const
{
    return m_has_decorated_attr;
}

void CT_DocPartName::set_decorated_attr(const ns_s::ST_OnOff& _decorated_attr)
{
    m_has_decorated_attr = true;
    m_decorated_attr = new ns_s::ST_OnOff(_decorated_attr);
}

const ns_s::ST_OnOff& CT_DocPartName::get_decorated_attr() const
{
    if (m_decorated_attr)
    {
        return *m_decorated_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

CT_DocPartName* CT_DocPartName::default_instance_ = NULL;

// CT_DocPartPr
CT_DocPartPr::CT_DocPartPr()
    :m_has_name(false),
     m_name(NULL),
     m_has_style(false),
     m_style(NULL),
     m_has_category(false),
     m_category(NULL),
     m_has_types(false),
     m_types(NULL),
     m_has_behaviors(false),
     m_behaviors(NULL),
     m_has_description(false),
     m_description(NULL),
     m_has_guid(false),
     m_guid(NULL)
{
}
CT_DocPartPr::~CT_DocPartPr()
{
    clear();
}
bool CT_DocPartPr::has_name() const
{
    return m_has_name;
}

CT_DocPartName* CT_DocPartPr::mutable_name()
{
    m_has_name = true;
    if (!m_name)
    {
        m_name = new CT_DocPartName();
    }
    return m_name;
}

const CT_DocPartName& CT_DocPartPr::get_name() const
{
    if (m_name)
    {
        return *m_name;
    }
    return CT_DocPartName::default_instance();
}

bool CT_DocPartPr::has_style() const
{
    return m_has_style;
}

CT_String* CT_DocPartPr::mutable_style()
{
    m_has_style = true;
    if (!m_style)
    {
        m_style = new CT_String();
    }
    return m_style;
}

const CT_String& CT_DocPartPr::get_style() const
{
    if (m_style)
    {
        return *m_style;
    }
    return CT_String::default_instance();
}

bool CT_DocPartPr::has_category() const
{
    return m_has_category;
}

CT_DocPartCategory* CT_DocPartPr::mutable_category()
{
    m_has_category = true;
    if (!m_category)
    {
        m_category = new CT_DocPartCategory();
    }
    return m_category;
}

const CT_DocPartCategory& CT_DocPartPr::get_category() const
{
    if (m_category)
    {
        return *m_category;
    }
    return CT_DocPartCategory::default_instance();
}

bool CT_DocPartPr::has_types() const
{
    return m_has_types;
}

CT_DocPartTypes* CT_DocPartPr::mutable_types()
{
    m_has_types = true;
    if (!m_types)
    {
        m_types = new CT_DocPartTypes();
    }
    return m_types;
}

const CT_DocPartTypes& CT_DocPartPr::get_types() const
{
    if (m_types)
    {
        return *m_types;
    }
    return CT_DocPartTypes::default_instance();
}

bool CT_DocPartPr::has_behaviors() const
{
    return m_has_behaviors;
}

CT_DocPartBehaviors* CT_DocPartPr::mutable_behaviors()
{
    m_has_behaviors = true;
    if (!m_behaviors)
    {
        m_behaviors = new CT_DocPartBehaviors();
    }
    return m_behaviors;
}

const CT_DocPartBehaviors& CT_DocPartPr::get_behaviors() const
{
    if (m_behaviors)
    {
        return *m_behaviors;
    }
    return CT_DocPartBehaviors::default_instance();
}

bool CT_DocPartPr::has_description() const
{
    return m_has_description;
}

CT_String* CT_DocPartPr::mutable_description()
{
    m_has_description = true;
    if (!m_description)
    {
        m_description = new CT_String();
    }
    return m_description;
}

const CT_String& CT_DocPartPr::get_description() const
{
    if (m_description)
    {
        return *m_description;
    }
    return CT_String::default_instance();
}

bool CT_DocPartPr::has_guid() const
{
    return m_has_guid;
}

CT_Guid* CT_DocPartPr::mutable_guid()
{
    m_has_guid = true;
    if (!m_guid)
    {
        m_guid = new CT_Guid();
    }
    return m_guid;
}

const CT_Guid& CT_DocPartPr::get_guid() const
{
    if (m_guid)
    {
        return *m_guid;
    }
    return CT_Guid::default_instance();
}

void CT_DocPartPr::clear()
{
    m_has_name = false;

    if (m_name)
    {
        delete m_name;
        m_name = NULL;
    }


    m_has_style = false;

    if (m_style)
    {
        delete m_style;
        m_style = NULL;
    }


    m_has_category = false;

    if (m_category)
    {
        delete m_category;
        m_category = NULL;
    }


    m_has_types = false;

    if (m_types)
    {
        delete m_types;
        m_types = NULL;
    }


    m_has_behaviors = false;

    if (m_behaviors)
    {
        delete m_behaviors;
        m_behaviors = NULL;
    }


    m_has_description = false;

    if (m_description)
    {
        delete m_description;
        m_description = NULL;
    }


    m_has_guid = false;

    if (m_guid)
    {
        delete m_guid;
        m_guid = NULL;
    }

}

void CT_DocPartPr::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";

    assert(m_has_name);


    if (m_has_name)
    {
        m_name->toXmlElem("w:name", "", _outStream);
    }


    if (m_has_style)
    {
        m_style->toXmlElem("w:style", "", _outStream);
    }


    if (m_has_category)
    {
        m_category->toXmlElem("w:category", "", _outStream);
    }


    if (m_has_types)
    {
        m_types->toXmlElem("w:types", "", _outStream);
    }


    if (m_has_behaviors)
    {
        m_behaviors->toXmlElem("w:behaviors", "", _outStream);
    }


    if (m_has_description)
    {
        m_description->toXmlElem("w:description", "", _outStream);
    }


    if (m_has_guid)
    {
        m_guid->toXmlElem("w:guid", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_DocPartPr& CT_DocPartPr::default_instance()
{
    if (!CT_DocPartPr::default_instance_)
    {
        CT_DocPartPr::default_instance_ = new CT_DocPartPr();
    }
    return *CT_DocPartPr::default_instance_;
}

CT_DocPartPr* CT_DocPartPr::default_instance_ = NULL;

// CT_DocPart
CT_DocPart::CT_DocPart()
    :m_has_docPartPr(false),
     m_docPartPr(NULL),
     m_has_docPartBody(false),
     m_docPartBody(NULL)
{
}
CT_DocPart::~CT_DocPart()
{
    clear();
}
bool CT_DocPart::has_docPartPr() const
{
    return m_has_docPartPr;
}

CT_DocPartPr* CT_DocPart::mutable_docPartPr()
{
    m_has_docPartPr = true;
    if (!m_docPartPr)
    {
        m_docPartPr = new CT_DocPartPr();
    }
    return m_docPartPr;
}

const CT_DocPartPr& CT_DocPart::get_docPartPr() const
{
    if (m_docPartPr)
    {
        return *m_docPartPr;
    }
    return CT_DocPartPr::default_instance();
}

bool CT_DocPart::has_docPartBody() const
{
    return m_has_docPartBody;
}

CT_Body* CT_DocPart::mutable_docPartBody()
{
    m_has_docPartBody = true;
    if (!m_docPartBody)
    {
        m_docPartBody = new CT_Body();
    }
    return m_docPartBody;
}

const CT_Body& CT_DocPart::get_docPartBody() const
{
    if (m_docPartBody)
    {
        return *m_docPartBody;
    }
    return CT_Body::default_instance();
}

void CT_DocPart::clear()
{
    m_has_docPartPr = false;

    if (m_docPartPr)
    {
        delete m_docPartPr;
        m_docPartPr = NULL;
    }


    m_has_docPartBody = false;

    if (m_docPartBody)
    {
        delete m_docPartBody;
        m_docPartBody = NULL;
    }

}

void CT_DocPart::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";


    if (m_has_docPartPr)
    {
        m_docPartPr->toXmlElem("w:docPartPr", "", _outStream);
    }


    if (m_has_docPartBody)
    {
        m_docPartBody->toXmlElem("w:docPartBody", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_DocPart& CT_DocPart::default_instance()
{
    if (!CT_DocPart::default_instance_)
    {
        CT_DocPart::default_instance_ = new CT_DocPart();
    }
    return *CT_DocPart::default_instance_;
}

CT_DocPart* CT_DocPart::default_instance_ = NULL;

// CT_DocParts
CT_DocParts::CT_DocParts()
    :m_has_docPart(false),
     m_docPart(NULL)
{
}
CT_DocParts::~CT_DocParts()
{
    clear();
}
bool CT_DocParts::has_docPart() const
{
    return m_has_docPart;
}

CT_DocPart* CT_DocParts::mutable_docPart()
{

    m_has_docPart = true;
    if (!m_docPart)
    {
        m_docPart = new CT_DocPart();
    }
    return m_docPart;
}

const CT_DocPart& CT_DocParts::get_docPart() const
{
    if (m_docPart)
    {
        return *m_docPart;
    }
    return CT_DocPart::default_instance();
}

void CT_DocParts::clear()
{
    m_has_docPart = false;

    if (m_docPart)
    {
        delete m_docPart;
        m_docPart = NULL;
    }

}

void CT_DocParts::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";

    {
        bool elemHasValueList[1] = {m_has_docPart};
        int cnt = count(elemHasValueList, elemHasValueList + 1, true);
        assert(cnt == 1);
    }


    if (m_has_docPart)
    {
        m_docPart->toXmlElem("w:docPart", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_DocParts& CT_DocParts::default_instance()
{
    if (!CT_DocParts::default_instance_)
    {
        CT_DocParts::default_instance_ = new CT_DocParts();
    }
    return *CT_DocParts::default_instance_;
}

CT_DocParts* CT_DocParts::default_instance_ = NULL;

// CT_Caption
CT_Caption::CT_Caption()
    :m_has_name_attr(false),
     m_name_attr(NULL),
     m_has_pos_attr(false),
     m_pos_attr(NULL),
     m_has_chapNum_attr(false),
     m_chapNum_attr(NULL),
     m_has_heading_attr(false),
     m_heading_attr(NULL),
     m_has_noLabel_attr(false),
     m_noLabel_attr(NULL),
     m_has_numFmt_attr(false),
     m_numFmt_attr(NULL),
     m_has_sep_attr(false),
     m_sep_attr(NULL)
{
}
CT_Caption::~CT_Caption()
{
    clear();
}
void CT_Caption::clear()
{
    m_has_name_attr = false;

    if (m_name_attr)
    {
        delete m_name_attr;
        m_name_attr = NULL;
    }


    m_has_pos_attr = false;

    if (m_pos_attr)
    {
        delete m_pos_attr;
        m_pos_attr = NULL;
    }


    m_has_chapNum_attr = false;

    if (m_chapNum_attr)
    {
        delete m_chapNum_attr;
        m_chapNum_attr = NULL;
    }


    m_has_heading_attr = false;

    if (m_heading_attr)
    {
        delete m_heading_attr;
        m_heading_attr = NULL;
    }


    m_has_noLabel_attr = false;

    if (m_noLabel_attr)
    {
        delete m_noLabel_attr;
        m_noLabel_attr = NULL;
    }


    m_has_numFmt_attr = false;

    if (m_numFmt_attr)
    {
        delete m_numFmt_attr;
        m_numFmt_attr = NULL;
    }


    m_has_sep_attr = false;

    if (m_sep_attr)
    {
        delete m_sep_attr;
        m_sep_attr = NULL;
    }

}

void CT_Caption::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_name_attr);
    if (m_has_name_attr)
    {
        m_name_attr->toXmlAttr("w:name", _outStream);
    }



    if (m_has_pos_attr)
    {
        m_pos_attr->toXmlAttr("w:pos", _outStream);
    }



    if (m_has_chapNum_attr)
    {
        m_chapNum_attr->toXmlAttr("w:chapNum", _outStream);
    }



    if (m_has_heading_attr)
    {
        m_heading_attr->toXmlAttr("w:heading", _outStream);
    }



    if (m_has_noLabel_attr)
    {
        m_noLabel_attr->toXmlAttr("w:noLabel", _outStream);
    }



    if (m_has_numFmt_attr)
    {
        m_numFmt_attr->toXmlAttr("w:numFmt", _outStream);
    }



    if (m_has_sep_attr)
    {
        m_sep_attr->toXmlAttr("w:sep", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_Caption& CT_Caption::default_instance()
{
    if (!CT_Caption::default_instance_)
    {
        CT_Caption::default_instance_ = new CT_Caption();
    }
    return *CT_Caption::default_instance_;
}

bool CT_Caption::has_name_attr() const
{
    return m_has_name_attr;
}

void CT_Caption::set_name_attr(const ns_s::ST_String& _name_attr)
{
    m_has_name_attr = true;
    m_name_attr = new ns_s::ST_String(_name_attr);
}

const ns_s::ST_String& CT_Caption::get_name_attr() const
{
    if (m_name_attr)
    {
        return *m_name_attr;
    }
    return ns_s::ST_String::default_instance();
}

bool CT_Caption::has_pos_attr() const
{
    return m_has_pos_attr;
}

void CT_Caption::set_pos_attr(const ST_CaptionPos& _pos_attr)
{
    m_has_pos_attr = true;
    m_pos_attr = new ST_CaptionPos(_pos_attr);
}

const ST_CaptionPos& CT_Caption::get_pos_attr() const
{
    if (m_pos_attr)
    {
        return *m_pos_attr;
    }
    return ST_CaptionPos::default_instance();
}

bool CT_Caption::has_chapNum_attr() const
{
    return m_has_chapNum_attr;
}

void CT_Caption::set_chapNum_attr(const ns_s::ST_OnOff& _chapNum_attr)
{
    m_has_chapNum_attr = true;
    m_chapNum_attr = new ns_s::ST_OnOff(_chapNum_attr);
}

const ns_s::ST_OnOff& CT_Caption::get_chapNum_attr() const
{
    if (m_chapNum_attr)
    {
        return *m_chapNum_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

bool CT_Caption::has_heading_attr() const
{
    return m_has_heading_attr;
}

void CT_Caption::set_heading_attr(const ST_DecimalNumber& _heading_attr)
{
    m_has_heading_attr = true;
    m_heading_attr = new ST_DecimalNumber(_heading_attr);
}

const ST_DecimalNumber& CT_Caption::get_heading_attr() const
{
    if (m_heading_attr)
    {
        return *m_heading_attr;
    }
    return ST_DecimalNumber::default_instance();
}

bool CT_Caption::has_noLabel_attr() const
{
    return m_has_noLabel_attr;
}

void CT_Caption::set_noLabel_attr(const ns_s::ST_OnOff& _noLabel_attr)
{
    m_has_noLabel_attr = true;
    m_noLabel_attr = new ns_s::ST_OnOff(_noLabel_attr);
}

const ns_s::ST_OnOff& CT_Caption::get_noLabel_attr() const
{
    if (m_noLabel_attr)
    {
        return *m_noLabel_attr;
    }
    return ns_s::ST_OnOff::default_instance();
}

bool CT_Caption::has_numFmt_attr() const
{
    return m_has_numFmt_attr;
}

void CT_Caption::set_numFmt_attr(const ST_NumberFormat& _numFmt_attr)
{
    m_has_numFmt_attr = true;
    m_numFmt_attr = new ST_NumberFormat(_numFmt_attr);
}

const ST_NumberFormat& CT_Caption::get_numFmt_attr() const
{
    if (m_numFmt_attr)
    {
        return *m_numFmt_attr;
    }
    return ST_NumberFormat::default_instance();
}

bool CT_Caption::has_sep_attr() const
{
    return m_has_sep_attr;
}

void CT_Caption::set_sep_attr(const ST_ChapterSep& _sep_attr)
{
    m_has_sep_attr = true;
    m_sep_attr = new ST_ChapterSep(_sep_attr);
}

const ST_ChapterSep& CT_Caption::get_sep_attr() const
{
    if (m_sep_attr)
    {
        return *m_sep_attr;
    }
    return ST_ChapterSep::default_instance();
}

CT_Caption* CT_Caption::default_instance_ = NULL;

// CT_AutoCaption
CT_AutoCaption::CT_AutoCaption()
    :m_has_name_attr(false),
     m_name_attr(NULL),
     m_has_caption_attr(false),
     m_caption_attr(NULL)
{
}
CT_AutoCaption::~CT_AutoCaption()
{
    clear();
}
void CT_AutoCaption::clear()
{
    m_has_name_attr = false;

    if (m_name_attr)
    {
        delete m_name_attr;
        m_name_attr = NULL;
    }


    m_has_caption_attr = false;

    if (m_caption_attr)
    {
        delete m_caption_attr;
        m_caption_attr = NULL;
    }

}

void CT_AutoCaption::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    assert(m_has_name_attr);
    if (m_has_name_attr)
    {
        m_name_attr->toXmlAttr("w:name", _outStream);
    }


    assert(m_has_caption_attr);
    if (m_has_caption_attr)
    {
        m_caption_attr->toXmlAttr("w:caption", _outStream);
    }

    _outStream << ">";

    _outStream << "</" << _elemName << ">";
}

const CT_AutoCaption& CT_AutoCaption::default_instance()
{
    if (!CT_AutoCaption::default_instance_)
    {
        CT_AutoCaption::default_instance_ = new CT_AutoCaption();
    }
    return *CT_AutoCaption::default_instance_;
}

bool CT_AutoCaption::has_name_attr() const
{
    return m_has_name_attr;
}

void CT_AutoCaption::set_name_attr(const ns_s::ST_String& _name_attr)
{
    m_has_name_attr = true;
    m_name_attr = new ns_s::ST_String(_name_attr);
}

const ns_s::ST_String& CT_AutoCaption::get_name_attr() const
{
    if (m_name_attr)
    {
        return *m_name_attr;
    }
    return ns_s::ST_String::default_instance();
}

bool CT_AutoCaption::has_caption_attr() const
{
    return m_has_caption_attr;
}

void CT_AutoCaption::set_caption_attr(const ns_s::ST_String& _caption_attr)
{
    m_has_caption_attr = true;
    m_caption_attr = new ns_s::ST_String(_caption_attr);
}

const ns_s::ST_String& CT_AutoCaption::get_caption_attr() const
{
    if (m_caption_attr)
    {
        return *m_caption_attr;
    }
    return ns_s::ST_String::default_instance();
}

CT_AutoCaption* CT_AutoCaption::default_instance_ = NULL;

// CT_AutoCaptions
CT_AutoCaptions::CT_AutoCaptions()

{
}
CT_AutoCaptions::~CT_AutoCaptions()
{
    clear();
}
CT_AutoCaption* CT_AutoCaptions::add_autoCaption()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_AutoCaption* pNewChild = pChildGroup->mutable_autoCaption();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

void CT_AutoCaptions::clear()
{
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
}

void CT_AutoCaptions::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";

    {
        int elemCnt = count_if(m_childGroupList_1.begin(), m_childGroupList_1.end(), mem_fun(&ChildGroup_1::has_autoCaption));
        assert(1 <= elemCnt);
    }

    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_autoCaption())
            {
                (*iter)->get_autoCaption().toXmlElem("w:autoCaption", "", _outStream);
            }


        }
    }

    _outStream << "</" << _elemName << ">";
}

const CT_AutoCaptions& CT_AutoCaptions::default_instance()
{
    if (!CT_AutoCaptions::default_instance_)
    {
        CT_AutoCaptions::default_instance_ = new CT_AutoCaptions();
    }
    return *CT_AutoCaptions::default_instance_;
}


// CT_AutoCaptions::ChildGroup_1
CT_AutoCaptions::ChildGroup_1::ChildGroup_1()
    :m_has_autoCaption(false),
     m_autoCaption(NULL)
{
}
bool CT_AutoCaptions::ChildGroup_1::has_autoCaption() const
{
    return m_has_autoCaption;
}

CT_AutoCaption* CT_AutoCaptions::ChildGroup_1::mutable_autoCaption()
{

    m_has_autoCaption = true;
    if (!m_autoCaption)
    {
        m_autoCaption = new CT_AutoCaption();
    }
    return m_autoCaption;
}

const CT_AutoCaption& CT_AutoCaptions::ChildGroup_1::get_autoCaption() const
{
    if (m_autoCaption)
    {
        return *m_autoCaption;
    }
    return CT_AutoCaption::default_instance();
}

CT_AutoCaptions* CT_AutoCaptions::default_instance_ = NULL;

// CT_Captions
CT_Captions::CT_Captions()
    :m_has_autoCaptions(false),
     m_autoCaptions(NULL)
{
}
CT_Captions::~CT_Captions()
{
    clear();
}
CT_Caption* CT_Captions::add_caption()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Caption* pNewChild = pChildGroup->mutable_caption();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

bool CT_Captions::has_autoCaptions() const
{
    return m_has_autoCaptions;
}

CT_AutoCaptions* CT_Captions::mutable_autoCaptions()
{
    m_has_autoCaptions = true;
    if (!m_autoCaptions)
    {
        m_autoCaptions = new CT_AutoCaptions();
    }
    return m_autoCaptions;
}

const CT_AutoCaptions& CT_Captions::get_autoCaptions() const
{
    if (m_autoCaptions)
    {
        return *m_autoCaptions;
    }
    return CT_AutoCaptions::default_instance();
}

void CT_Captions::clear()
{
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }

    m_has_autoCaptions = false;

    if (m_autoCaptions)
    {
        delete m_autoCaptions;
        m_autoCaptions = NULL;
    }

}

void CT_Captions::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";

    {
        int elemCnt = count_if(m_childGroupList_1.begin(), m_childGroupList_1.end(), mem_fun(&ChildGroup_1::has_caption));
        assert(1 <= elemCnt);
    }

    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_caption())
            {
                (*iter)->get_caption().toXmlElem("w:caption", "", _outStream);
            }


        }
    }


    if (m_has_autoCaptions)
    {
        m_autoCaptions->toXmlElem("w:autoCaptions", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_Captions& CT_Captions::default_instance()
{
    if (!CT_Captions::default_instance_)
    {
        CT_Captions::default_instance_ = new CT_Captions();
    }
    return *CT_Captions::default_instance_;
}


// CT_Captions::ChildGroup_1
CT_Captions::ChildGroup_1::ChildGroup_1()
    :m_has_caption(false),
     m_caption(NULL)
{
}
bool CT_Captions::ChildGroup_1::has_caption() const
{
    return m_has_caption;
}

CT_Caption* CT_Captions::ChildGroup_1::mutable_caption()
{

    m_has_caption = true;
    if (!m_caption)
    {
        m_caption = new CT_Caption();
    }
    return m_caption;
}

const CT_Caption& CT_Captions::ChildGroup_1::get_caption() const
{
    if (m_caption)
    {
        return *m_caption;
    }
    return CT_Caption::default_instance();
}

CT_Captions* CT_Captions::default_instance_ = NULL;

// CT_DocumentBase
CT_DocumentBase::CT_DocumentBase()
    :m_has_background(false),
     m_background(NULL)
{
}
CT_DocumentBase::~CT_DocumentBase()
{
    clear();
}
bool CT_DocumentBase::has_background() const
{
    return m_has_background;
}

CT_Background* CT_DocumentBase::mutable_background()
{
    m_has_background = true;
    if (!m_background)
    {
        m_background = new CT_Background();
    }
    return m_background;
}

const CT_Background& CT_DocumentBase::get_background() const
{
    if (m_background)
    {
        return *m_background;
    }
    return CT_Background::default_instance();
}

void CT_DocumentBase::clear()
{
    m_has_background = false;

    if (m_background)
    {
        delete m_background;
        m_background = NULL;
    }

}

void CT_DocumentBase::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";


    if (m_has_background)
    {
        m_background->toXmlElem("w:background", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_DocumentBase& CT_DocumentBase::default_instance()
{
    if (!CT_DocumentBase::default_instance_)
    {
        CT_DocumentBase::default_instance_ = new CT_DocumentBase();
    }
    return *CT_DocumentBase::default_instance_;
}

CT_DocumentBase* CT_DocumentBase::default_instance_ = NULL;

// CT_Document
CT_Document::CT_Document()
    :m_has_background(false),
     m_background(NULL),
     m_has_body(false),
     m_body(NULL),
     m_has_conformance_attr(false),
     m_conformance_attr(NULL)
{
}
CT_Document::~CT_Document()
{
    clear();
}
bool CT_Document::has_background() const
{
    return m_has_background;
}

CT_Background* CT_Document::mutable_background()
{
    m_has_background = true;
    if (!m_background)
    {
        m_background = new CT_Background();
    }
    return m_background;
}

const CT_Background& CT_Document::get_background() const
{
    if (m_background)
    {
        return *m_background;
    }
    return CT_Background::default_instance();
}

bool CT_Document::has_body() const
{
    return m_has_body;
}

CT_Body* CT_Document::mutable_body()
{
    m_has_body = true;
    if (!m_body)
    {
        m_body = new CT_Body();
    }
    return m_body;
}

const CT_Body& CT_Document::get_body() const
{
    if (m_body)
    {
        return *m_body;
    }
    return CT_Body::default_instance();
}

void CT_Document::clear()
{
    m_has_conformance_attr = false;

    if (m_conformance_attr)
    {
        delete m_conformance_attr;
        m_conformance_attr = NULL;
    }


    m_has_background = false;

    if (m_background)
    {
        delete m_background;
        m_background = NULL;
    }


    m_has_body = false;

    if (m_body)
    {
        delete m_body;
        m_body = NULL;
    }

}

void CT_Document::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }


    if (m_has_conformance_attr)
    {
        m_conformance_attr->toXmlAttr("w:conformance", _outStream);
    }

    _outStream << ">";


    if (m_has_background)
    {
        m_background->toXmlElem("w:background", "", _outStream);
    }


    if (m_has_body)
    {
        m_body->toXmlElem("w:body", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_Document& CT_Document::default_instance()
{
    if (!CT_Document::default_instance_)
    {
        CT_Document::default_instance_ = new CT_Document();
    }
    return *CT_Document::default_instance_;
}

bool CT_Document::has_conformance_attr() const
{
    return m_has_conformance_attr;
}

void CT_Document::set_conformance_attr(const ns_s::ST_ConformanceClass& _conformance_attr)
{
    m_has_conformance_attr = true;
    m_conformance_attr = new ns_s::ST_ConformanceClass(_conformance_attr);
}

const ns_s::ST_ConformanceClass& CT_Document::get_conformance_attr() const
{
    if (m_conformance_attr)
    {
        return *m_conformance_attr;
    }
    return ns_s::ST_ConformanceClass::default_instance();
}

CT_Document* CT_Document::default_instance_ = NULL;

// CT_GlossaryDocument
CT_GlossaryDocument::CT_GlossaryDocument()
    :m_has_background(false),
     m_background(NULL),
     m_has_docParts(false),
     m_docParts(NULL)
{
}
CT_GlossaryDocument::~CT_GlossaryDocument()
{
    clear();
}
bool CT_GlossaryDocument::has_background() const
{
    return m_has_background;
}

CT_Background* CT_GlossaryDocument::mutable_background()
{
    m_has_background = true;
    if (!m_background)
    {
        m_background = new CT_Background();
    }
    return m_background;
}

const CT_Background& CT_GlossaryDocument::get_background() const
{
    if (m_background)
    {
        return *m_background;
    }
    return CT_Background::default_instance();
}

bool CT_GlossaryDocument::has_docParts() const
{
    return m_has_docParts;
}

CT_DocParts* CT_GlossaryDocument::mutable_docParts()
{
    m_has_docParts = true;
    if (!m_docParts)
    {
        m_docParts = new CT_DocParts();
    }
    return m_docParts;
}

const CT_DocParts& CT_GlossaryDocument::get_docParts() const
{
    if (m_docParts)
    {
        return *m_docParts;
    }
    return CT_DocParts::default_instance();
}

void CT_GlossaryDocument::clear()
{
    m_has_background = false;

    if (m_background)
    {
        delete m_background;
        m_background = NULL;
    }


    m_has_docParts = false;

    if (m_docParts)
    {
        delete m_docParts;
        m_docParts = NULL;
    }

}

void CT_GlossaryDocument::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
{
    _outStream << "<" << _elemName;

    if (!_xmlNsStr.empty())
    {
        _outStream << _xmlNsStr;
    }

    _outStream << ">";


    if (m_has_background)
    {
        m_background->toXmlElem("w:background", "", _outStream);
    }


    if (m_has_docParts)
    {
        m_docParts->toXmlElem("w:docParts", "", _outStream);
    }

    _outStream << "</" << _elemName << ">";
}

const CT_GlossaryDocument& CT_GlossaryDocument::default_instance()
{
    if (!CT_GlossaryDocument::default_instance_)
    {
        CT_GlossaryDocument::default_instance_ = new CT_GlossaryDocument();
    }
    return *CT_GlossaryDocument::default_instance_;
}

CT_GlossaryDocument* CT_GlossaryDocument::default_instance_ = NULL;

// recipients_element
recipients_element::recipients_element()

{
}
recipients_element::~recipients_element()
{
    clear();
}
CT_RecipientData* recipients_element::add_recipientData()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_RecipientData* pNewChild = pChildGroup->mutable_recipientData();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

void recipients_element::clear()
{
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
}

void recipients_element::toXml(std::ostream& _outStream) const
{
    _outStream << "<w:recipients";

    _outStream << " " << "xmlns:w=\"http://schemas.openxmlformats.org/wordprocessingml/2006/main\"";
    _outStream << " " << "xmlns:sl=\"http://schemas.openxmlformats.org/schemaLibrary/2006/main\"";
    _outStream << " " << "xmlns:s=\"http://schemas.openxmlformats.org/officeDocument/2006/sharedTypes\"";
    _outStream << " " << "xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\"";
    _outStream << " " << "xmlns:m=\"http://schemas.openxmlformats.org/officeDocument/2006/math\"";
    _outStream << " " << "xmlns:wp=\"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing\"";
    _outStream << " " << "xmlns:v=\"urn:schemas-microsoft-com:vml\"";
    _outStream << " " << "xmlns:o=\"urn:schemas-microsoft-com:office:office\"";

    _outStream << ">";

    {
        int elemCnt = count_if(m_childGroupList_1.begin(), m_childGroupList_1.end(), mem_fun(&ChildGroup_1::has_recipientData));
        assert(1 <= elemCnt);
    }

    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_recipientData())
            {
                (*iter)->get_recipientData().toXmlElem("w:recipientData", "", _outStream);
            }


        }
    }

    _outStream << "</w:recipients>";
}

const recipients_element& recipients_element::default_instance()
{
    if (!recipients_element::default_instance_)
    {
        recipients_element::default_instance_ = new recipients_element();
    }
    return *recipients_element::default_instance_;
}


// recipients_element::ChildGroup_1
recipients_element::ChildGroup_1::ChildGroup_1()
    :m_has_recipientData(false),
     m_recipientData(NULL)
{
}
bool recipients_element::ChildGroup_1::has_recipientData() const
{
    return m_has_recipientData;
}

CT_RecipientData* recipients_element::ChildGroup_1::mutable_recipientData()
{

    m_has_recipientData = true;
    if (!m_recipientData)
    {
        m_recipientData = new CT_RecipientData();
    }
    return m_recipientData;
}

const CT_RecipientData& recipients_element::ChildGroup_1::get_recipientData() const
{
    if (m_recipientData)
    {
        return *m_recipientData;
    }
    return CT_RecipientData::default_instance();
}

recipients_element* recipients_element::default_instance_ = NULL;

// txbxContent_element
txbxContent_element::txbxContent_element()

{
}
txbxContent_element::~txbxContent_element()
{
    clear();
}
void txbxContent_element::clear()
{    }

void txbxContent_element::toXml(std::ostream& _outStream) const
{
    _outStream << "<w:txbxContent";

    _outStream << " " << "xmlns:w=\"http://schemas.openxmlformats.org/wordprocessingml/2006/main\"";
    _outStream << " " << "xmlns:sl=\"http://schemas.openxmlformats.org/schemaLibrary/2006/main\"";
    _outStream << " " << "xmlns:s=\"http://schemas.openxmlformats.org/officeDocument/2006/sharedTypes\"";
    _outStream << " " << "xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\"";
    _outStream << " " << "xmlns:m=\"http://schemas.openxmlformats.org/officeDocument/2006/math\"";
    _outStream << " " << "xmlns:wp=\"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing\"";
    _outStream << " " << "xmlns:v=\"urn:schemas-microsoft-com:vml\"";
    _outStream << " " << "xmlns:o=\"urn:schemas-microsoft-com:office:office\"";

    _outStream << ">";

    _outStream << "</w:txbxContent>";
}

const txbxContent_element& txbxContent_element::default_instance()
{
    if (!txbxContent_element::default_instance_)
    {
        txbxContent_element::default_instance_ = new txbxContent_element();
    }
    return *txbxContent_element::default_instance_;
}

txbxContent_element* txbxContent_element::default_instance_ = NULL;

// comments_element
comments_element::comments_element()

{
}
comments_element::~comments_element()
{
    clear();
}
CT_Comment* comments_element::add_comment()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Comment* pNewChild = pChildGroup->mutable_comment();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

void comments_element::clear()
{
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
}

void comments_element::toXml(std::ostream& _outStream) const
{
    _outStream << "<w:comments";

    _outStream << " " << "xmlns:w=\"http://schemas.openxmlformats.org/wordprocessingml/2006/main\"";
    _outStream << " " << "xmlns:sl=\"http://schemas.openxmlformats.org/schemaLibrary/2006/main\"";
    _outStream << " " << "xmlns:s=\"http://schemas.openxmlformats.org/officeDocument/2006/sharedTypes\"";
    _outStream << " " << "xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\"";
    _outStream << " " << "xmlns:m=\"http://schemas.openxmlformats.org/officeDocument/2006/math\"";
    _outStream << " " << "xmlns:wp=\"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing\"";
    _outStream << " " << "xmlns:v=\"urn:schemas-microsoft-com:vml\"";
    _outStream << " " << "xmlns:o=\"urn:schemas-microsoft-com:office:office\"";

    _outStream << ">";

    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_comment())
            {
                (*iter)->get_comment().toXmlElem("w:comment", "", _outStream);
            }


        }
    }

    _outStream << "</w:comments>";
}

const comments_element& comments_element::default_instance()
{
    if (!comments_element::default_instance_)
    {
        comments_element::default_instance_ = new comments_element();
    }
    return *comments_element::default_instance_;
}


// comments_element::ChildGroup_1
comments_element::ChildGroup_1::ChildGroup_1()
    :m_has_comment(false),
     m_comment(NULL)
{
}
bool comments_element::ChildGroup_1::has_comment() const
{
    return m_has_comment;
}

CT_Comment* comments_element::ChildGroup_1::mutable_comment()
{

    m_has_comment = true;
    if (!m_comment)
    {
        m_comment = new CT_Comment();
    }
    return m_comment;
}

const CT_Comment& comments_element::ChildGroup_1::get_comment() const
{
    if (m_comment)
    {
        return *m_comment;
    }
    return CT_Comment::default_instance();
}

comments_element* comments_element::default_instance_ = NULL;

// footnotes_element
footnotes_element::footnotes_element()

{
}
footnotes_element::~footnotes_element()
{
    clear();
}
CT_FtnEdn* footnotes_element::add_footnote()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_FtnEdn* pNewChild = pChildGroup->mutable_footnote();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

void footnotes_element::clear()
{
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
}

void footnotes_element::toXml(std::ostream& _outStream) const
{
    _outStream << "<w:footnotes";

    _outStream << " " << "xmlns:w=\"http://schemas.openxmlformats.org/wordprocessingml/2006/main\"";
    _outStream << " " << "xmlns:sl=\"http://schemas.openxmlformats.org/schemaLibrary/2006/main\"";
    _outStream << " " << "xmlns:s=\"http://schemas.openxmlformats.org/officeDocument/2006/sharedTypes\"";
    _outStream << " " << "xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\"";
    _outStream << " " << "xmlns:m=\"http://schemas.openxmlformats.org/officeDocument/2006/math\"";
    _outStream << " " << "xmlns:wp=\"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing\"";
    _outStream << " " << "xmlns:v=\"urn:schemas-microsoft-com:vml\"";
    _outStream << " " << "xmlns:o=\"urn:schemas-microsoft-com:office:office\"";

    _outStream << ">";

    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_footnote())
            {
                (*iter)->get_footnote().toXmlElem("w:footnote", "", _outStream);
            }


        }
    }

    _outStream << "</w:footnotes>";
}

const footnotes_element& footnotes_element::default_instance()
{
    if (!footnotes_element::default_instance_)
    {
        footnotes_element::default_instance_ = new footnotes_element();
    }
    return *footnotes_element::default_instance_;
}


// footnotes_element::ChildGroup_1
footnotes_element::ChildGroup_1::ChildGroup_1()
    :m_has_footnote(false),
     m_footnote(NULL)
{
}
bool footnotes_element::ChildGroup_1::has_footnote() const
{
    return m_has_footnote;
}

CT_FtnEdn* footnotes_element::ChildGroup_1::mutable_footnote()
{

    m_has_footnote = true;
    if (!m_footnote)
    {
        m_footnote = new CT_FtnEdn();
    }
    return m_footnote;
}

const CT_FtnEdn& footnotes_element::ChildGroup_1::get_footnote() const
{
    if (m_footnote)
    {
        return *m_footnote;
    }
    return CT_FtnEdn::default_instance();
}

footnotes_element* footnotes_element::default_instance_ = NULL;

// endnotes_element
endnotes_element::endnotes_element()

{
}
endnotes_element::~endnotes_element()
{
    clear();
}
CT_FtnEdn* endnotes_element::add_endnote()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_FtnEdn* pNewChild = pChildGroup->mutable_endnote();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

void endnotes_element::clear()
{
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
}

void endnotes_element::toXml(std::ostream& _outStream) const
{
    _outStream << "<w:endnotes";

    _outStream << " " << "xmlns:w=\"http://schemas.openxmlformats.org/wordprocessingml/2006/main\"";
    _outStream << " " << "xmlns:sl=\"http://schemas.openxmlformats.org/schemaLibrary/2006/main\"";
    _outStream << " " << "xmlns:s=\"http://schemas.openxmlformats.org/officeDocument/2006/sharedTypes\"";
    _outStream << " " << "xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\"";
    _outStream << " " << "xmlns:m=\"http://schemas.openxmlformats.org/officeDocument/2006/math\"";
    _outStream << " " << "xmlns:wp=\"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing\"";
    _outStream << " " << "xmlns:v=\"urn:schemas-microsoft-com:vml\"";
    _outStream << " " << "xmlns:o=\"urn:schemas-microsoft-com:office:office\"";

    _outStream << ">";

    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_endnote())
            {
                (*iter)->get_endnote().toXmlElem("w:endnote", "", _outStream);
            }


        }
    }

    _outStream << "</w:endnotes>";
}

const endnotes_element& endnotes_element::default_instance()
{
    if (!endnotes_element::default_instance_)
    {
        endnotes_element::default_instance_ = new endnotes_element();
    }
    return *endnotes_element::default_instance_;
}


// endnotes_element::ChildGroup_1
endnotes_element::ChildGroup_1::ChildGroup_1()
    :m_has_endnote(false),
     m_endnote(NULL)
{
}
bool endnotes_element::ChildGroup_1::has_endnote() const
{
    return m_has_endnote;
}

CT_FtnEdn* endnotes_element::ChildGroup_1::mutable_endnote()
{

    m_has_endnote = true;
    if (!m_endnote)
    {
        m_endnote = new CT_FtnEdn();
    }
    return m_endnote;
}

const CT_FtnEdn& endnotes_element::ChildGroup_1::get_endnote() const
{
    if (m_endnote)
    {
        return *m_endnote;
    }
    return CT_FtnEdn::default_instance();
}

endnotes_element* endnotes_element::default_instance_ = NULL;

// hdr_element
hdr_element::hdr_element()

{
}
hdr_element::~hdr_element()
{
    clear();
}
void hdr_element::clear()
{    }

void hdr_element::toXml(std::ostream& _outStream) const
{
    _outStream << "<w:hdr";

    _outStream << " " << "xmlns:w=\"http://schemas.openxmlformats.org/wordprocessingml/2006/main\"";
    _outStream << " " << "xmlns:sl=\"http://schemas.openxmlformats.org/schemaLibrary/2006/main\"";
    _outStream << " " << "xmlns:s=\"http://schemas.openxmlformats.org/officeDocument/2006/sharedTypes\"";
    _outStream << " " << "xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\"";
    _outStream << " " << "xmlns:m=\"http://schemas.openxmlformats.org/officeDocument/2006/math\"";
    _outStream << " " << "xmlns:wp=\"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing\"";
    _outStream << " " << "xmlns:v=\"urn:schemas-microsoft-com:vml\"";
    _outStream << " " << "xmlns:o=\"urn:schemas-microsoft-com:office:office\"";

    _outStream << ">";

    _outStream << "</w:hdr>";
}

const hdr_element& hdr_element::default_instance()
{
    if (!hdr_element::default_instance_)
    {
        hdr_element::default_instance_ = new hdr_element();
    }
    return *hdr_element::default_instance_;
}

hdr_element* hdr_element::default_instance_ = NULL;

// ftr_element
ftr_element::ftr_element()

{
}
ftr_element::~ftr_element()
{
    clear();
}
void ftr_element::clear()
{    }

void ftr_element::toXml(std::ostream& _outStream) const
{
    _outStream << "<w:ftr";

    _outStream << " " << "xmlns:w=\"http://schemas.openxmlformats.org/wordprocessingml/2006/main\"";
    _outStream << " " << "xmlns:sl=\"http://schemas.openxmlformats.org/schemaLibrary/2006/main\"";
    _outStream << " " << "xmlns:s=\"http://schemas.openxmlformats.org/officeDocument/2006/sharedTypes\"";
    _outStream << " " << "xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\"";
    _outStream << " " << "xmlns:m=\"http://schemas.openxmlformats.org/officeDocument/2006/math\"";
    _outStream << " " << "xmlns:wp=\"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing\"";
    _outStream << " " << "xmlns:v=\"urn:schemas-microsoft-com:vml\"";
    _outStream << " " << "xmlns:o=\"urn:schemas-microsoft-com:office:office\"";

    _outStream << ">";

    _outStream << "</w:ftr>";
}

const ftr_element& ftr_element::default_instance()
{
    if (!ftr_element::default_instance_)
    {
        ftr_element::default_instance_ = new ftr_element();
    }
    return *ftr_element::default_instance_;
}

ftr_element* ftr_element::default_instance_ = NULL;

// settings_element
settings_element::settings_element()
    :m_has_writeProtection(false),
     m_writeProtection(NULL),
     m_has_view(false),
     m_view(NULL),
     m_has_zoom(false),
     m_zoom(NULL),
     m_has_removePersonalInformation(false),
     m_removePersonalInformation(NULL),
     m_has_removeDateAndTime(false),
     m_removeDateAndTime(NULL),
     m_has_doNotDisplayPageBoundaries(false),
     m_doNotDisplayPageBoundaries(NULL),
     m_has_displayBackgroundShape(false),
     m_displayBackgroundShape(NULL),
     m_has_printPostScriptOverText(false),
     m_printPostScriptOverText(NULL),
     m_has_printFractionalCharacterWidth(false),
     m_printFractionalCharacterWidth(NULL),
     m_has_printFormsData(false),
     m_printFormsData(NULL),
     m_has_embedTrueTypeFonts(false),
     m_embedTrueTypeFonts(NULL),
     m_has_embedSystemFonts(false),
     m_embedSystemFonts(NULL),
     m_has_saveSubsetFonts(false),
     m_saveSubsetFonts(NULL),
     m_has_saveFormsData(false),
     m_saveFormsData(NULL),
     m_has_mirrorMargins(false),
     m_mirrorMargins(NULL),
     m_has_alignBordersAndEdges(false),
     m_alignBordersAndEdges(NULL),
     m_has_bordersDoNotSurroundHeader(false),
     m_bordersDoNotSurroundHeader(NULL),
     m_has_bordersDoNotSurroundFooter(false),
     m_bordersDoNotSurroundFooter(NULL),
     m_has_gutterAtTop(false),
     m_gutterAtTop(NULL),
     m_has_hideSpellingErrors(false),
     m_hideSpellingErrors(NULL),
     m_has_hideGrammaticalErrors(false),
     m_hideGrammaticalErrors(NULL),
     m_has_proofState(false),
     m_proofState(NULL),
     m_has_formsDesign(false),
     m_formsDesign(NULL),
     m_has_attachedTemplate(false),
     m_attachedTemplate(NULL),
     m_has_linkStyles(false),
     m_linkStyles(NULL),
     m_has_stylePaneFormatFilter(false),
     m_stylePaneFormatFilter(NULL),
     m_has_stylePaneSortMethod(false),
     m_stylePaneSortMethod(NULL),
     m_has_documentType(false),
     m_documentType(NULL),
     m_has_mailMerge(false),
     m_mailMerge(NULL),
     m_has_revisionView(false),
     m_revisionView(NULL),
     m_has_trackRevisions(false),
     m_trackRevisions(NULL),
     m_has_doNotTrackMoves(false),
     m_doNotTrackMoves(NULL),
     m_has_doNotTrackFormatting(false),
     m_doNotTrackFormatting(NULL),
     m_has_documentProtection(false),
     m_documentProtection(NULL),
     m_has_autoFormatOverride(false),
     m_autoFormatOverride(NULL),
     m_has_styleLockTheme(false),
     m_styleLockTheme(NULL),
     m_has_styleLockQFSet(false),
     m_styleLockQFSet(NULL),
     m_has_defaultTabStop(false),
     m_defaultTabStop(NULL),
     m_has_autoHyphenation(false),
     m_autoHyphenation(NULL),
     m_has_consecutiveHyphenLimit(false),
     m_consecutiveHyphenLimit(NULL),
     m_has_hyphenationZone(false),
     m_hyphenationZone(NULL),
     m_has_doNotHyphenateCaps(false),
     m_doNotHyphenateCaps(NULL),
     m_has_showEnvelope(false),
     m_showEnvelope(NULL),
     m_has_summaryLength(false),
     m_summaryLength(NULL),
     m_has_clickAndTypeStyle(false),
     m_clickAndTypeStyle(NULL),
     m_has_defaultTableStyle(false),
     m_defaultTableStyle(NULL),
     m_has_evenAndOddHeaders(false),
     m_evenAndOddHeaders(NULL),
     m_has_bookFoldRevPrinting(false),
     m_bookFoldRevPrinting(NULL),
     m_has_bookFoldPrinting(false),
     m_bookFoldPrinting(NULL),
     m_has_bookFoldPrintingSheets(false),
     m_bookFoldPrintingSheets(NULL),
     m_has_drawingGridHorizontalSpacing(false),
     m_drawingGridHorizontalSpacing(NULL),
     m_has_drawingGridVerticalSpacing(false),
     m_drawingGridVerticalSpacing(NULL),
     m_has_displayHorizontalDrawingGridEvery(false),
     m_displayHorizontalDrawingGridEvery(NULL),
     m_has_displayVerticalDrawingGridEvery(false),
     m_displayVerticalDrawingGridEvery(NULL),
     m_has_doNotUseMarginsForDrawingGridOrigin(false),
     m_doNotUseMarginsForDrawingGridOrigin(NULL),
     m_has_drawingGridHorizontalOrigin(false),
     m_drawingGridHorizontalOrigin(NULL),
     m_has_drawingGridVerticalOrigin(false),
     m_drawingGridVerticalOrigin(NULL),
     m_has_doNotShadeFormData(false),
     m_doNotShadeFormData(NULL),
     m_has_noPunctuationKerning(false),
     m_noPunctuationKerning(NULL),
     m_has_characterSpacingControl(false),
     m_characterSpacingControl(NULL),
     m_has_printTwoOnOne(false),
     m_printTwoOnOne(NULL),
     m_has_strictFirstAndLastChars(false),
     m_strictFirstAndLastChars(NULL),
     m_has_noLineBreaksAfter(false),
     m_noLineBreaksAfter(NULL),
     m_has_noLineBreaksBefore(false),
     m_noLineBreaksBefore(NULL),
     m_has_savePreviewPicture(false),
     m_savePreviewPicture(NULL),
     m_has_doNotValidateAgainstSchema(false),
     m_doNotValidateAgainstSchema(NULL),
     m_has_saveInvalidXml(false),
     m_saveInvalidXml(NULL),
     m_has_ignoreMixedContent(false),
     m_ignoreMixedContent(NULL),
     m_has_alwaysShowPlaceholderText(false),
     m_alwaysShowPlaceholderText(NULL),
     m_has_doNotDemarcateInvalidXml(false),
     m_doNotDemarcateInvalidXml(NULL),
     m_has_saveXmlDataOnly(false),
     m_saveXmlDataOnly(NULL),
     m_has_useXSLTWhenSaving(false),
     m_useXSLTWhenSaving(NULL),
     m_has_saveThroughXslt(false),
     m_saveThroughXslt(NULL),
     m_has_showXMLTags(false),
     m_showXMLTags(NULL),
     m_has_alwaysMergeEmptyNamespace(false),
     m_alwaysMergeEmptyNamespace(NULL),
     m_has_updateFields(false),
     m_updateFields(NULL),
     m_has_hdrShapeDefaults(false),
     m_hdrShapeDefaults(NULL),
     m_has_footnotePr(false),
     m_footnotePr(NULL),
     m_has_endnotePr(false),
     m_endnotePr(NULL),
     m_has_compat(false),
     m_compat(NULL),
     m_has_docVars(false),
     m_docVars(NULL),
     m_has_rsids(false),
     m_rsids(NULL),
     m_has_m_mathPr(false),
     m_m_mathPr(NULL),
     m_has_themeFontLang(false),
     m_themeFontLang(NULL),
     m_has_clrSchemeMapping(false),
     m_clrSchemeMapping(NULL),
     m_has_doNotIncludeSubdocsInStats(false),
     m_doNotIncludeSubdocsInStats(NULL),
     m_has_doNotAutoCompressPictures(false),
     m_doNotAutoCompressPictures(NULL),
     m_has_forceUpgrade(false),
     m_forceUpgrade(NULL),
     m_has_captions(false),
     m_captions(NULL),
     m_has_readModeInkLockDown(false),
     m_readModeInkLockDown(NULL),
     m_has_sl_schemaLibrary(false),
     m_sl_schemaLibrary(NULL),
     m_has_shapeDefaults(false),
     m_shapeDefaults(NULL),
     m_has_doNotEmbedSmartTags(false),
     m_doNotEmbedSmartTags(NULL),
     m_has_decimalSymbol(false),
     m_decimalSymbol(NULL),
     m_has_listSeparator(false),
     m_listSeparator(NULL)
{
}
settings_element::~settings_element()
{
    clear();
}
bool settings_element::has_writeProtection() const
{
    return m_has_writeProtection;
}

CT_WriteProtection* settings_element::mutable_writeProtection()
{
    m_has_writeProtection = true;
    if (!m_writeProtection)
    {
        m_writeProtection = new CT_WriteProtection();
    }
    return m_writeProtection;
}

const CT_WriteProtection& settings_element::get_writeProtection() const
{
    if (m_writeProtection)
    {
        return *m_writeProtection;
    }
    return CT_WriteProtection::default_instance();
}

bool settings_element::has_view() const
{
    return m_has_view;
}

CT_View* settings_element::mutable_view()
{
    m_has_view = true;
    if (!m_view)
    {
        m_view = new CT_View();
    }
    return m_view;
}

const CT_View& settings_element::get_view() const
{
    if (m_view)
    {
        return *m_view;
    }
    return CT_View::default_instance();
}

bool settings_element::has_zoom() const
{
    return m_has_zoom;
}

CT_Zoom* settings_element::mutable_zoom()
{
    m_has_zoom = true;
    if (!m_zoom)
    {
        m_zoom = new CT_Zoom();
    }
    return m_zoom;
}

const CT_Zoom& settings_element::get_zoom() const
{
    if (m_zoom)
    {
        return *m_zoom;
    }
    return CT_Zoom::default_instance();
}

bool settings_element::has_removePersonalInformation() const
{
    return m_has_removePersonalInformation;
}

CT_OnOff* settings_element::mutable_removePersonalInformation()
{
    m_has_removePersonalInformation = true;
    if (!m_removePersonalInformation)
    {
        m_removePersonalInformation = new CT_OnOff();
    }
    return m_removePersonalInformation;
}

const CT_OnOff& settings_element::get_removePersonalInformation() const
{
    if (m_removePersonalInformation)
    {
        return *m_removePersonalInformation;
    }
    return CT_OnOff::default_instance();
}

bool settings_element::has_removeDateAndTime() const
{
    return m_has_removeDateAndTime;
}

CT_OnOff* settings_element::mutable_removeDateAndTime()
{
    m_has_removeDateAndTime = true;
    if (!m_removeDateAndTime)
    {
        m_removeDateAndTime = new CT_OnOff();
    }
    return m_removeDateAndTime;
}

const CT_OnOff& settings_element::get_removeDateAndTime() const
{
    if (m_removeDateAndTime)
    {
        return *m_removeDateAndTime;
    }
    return CT_OnOff::default_instance();
}

bool settings_element::has_doNotDisplayPageBoundaries() const
{
    return m_has_doNotDisplayPageBoundaries;
}

CT_OnOff* settings_element::mutable_doNotDisplayPageBoundaries()
{
    m_has_doNotDisplayPageBoundaries = true;
    if (!m_doNotDisplayPageBoundaries)
    {
        m_doNotDisplayPageBoundaries = new CT_OnOff();
    }
    return m_doNotDisplayPageBoundaries;
}

const CT_OnOff& settings_element::get_doNotDisplayPageBoundaries() const
{
    if (m_doNotDisplayPageBoundaries)
    {
        return *m_doNotDisplayPageBoundaries;
    }
    return CT_OnOff::default_instance();
}

bool settings_element::has_displayBackgroundShape() const
{
    return m_has_displayBackgroundShape;
}

CT_OnOff* settings_element::mutable_displayBackgroundShape()
{
    m_has_displayBackgroundShape = true;
    if (!m_displayBackgroundShape)
    {
        m_displayBackgroundShape = new CT_OnOff();
    }
    return m_displayBackgroundShape;
}

const CT_OnOff& settings_element::get_displayBackgroundShape() const
{
    if (m_displayBackgroundShape)
    {
        return *m_displayBackgroundShape;
    }
    return CT_OnOff::default_instance();
}

bool settings_element::has_printPostScriptOverText() const
{
    return m_has_printPostScriptOverText;
}

CT_OnOff* settings_element::mutable_printPostScriptOverText()
{
    m_has_printPostScriptOverText = true;
    if (!m_printPostScriptOverText)
    {
        m_printPostScriptOverText = new CT_OnOff();
    }
    return m_printPostScriptOverText;
}

const CT_OnOff& settings_element::get_printPostScriptOverText() const
{
    if (m_printPostScriptOverText)
    {
        return *m_printPostScriptOverText;
    }
    return CT_OnOff::default_instance();
}

bool settings_element::has_printFractionalCharacterWidth() const
{
    return m_has_printFractionalCharacterWidth;
}

CT_OnOff* settings_element::mutable_printFractionalCharacterWidth()
{
    m_has_printFractionalCharacterWidth = true;
    if (!m_printFractionalCharacterWidth)
    {
        m_printFractionalCharacterWidth = new CT_OnOff();
    }
    return m_printFractionalCharacterWidth;
}

const CT_OnOff& settings_element::get_printFractionalCharacterWidth() const
{
    if (m_printFractionalCharacterWidth)
    {
        return *m_printFractionalCharacterWidth;
    }
    return CT_OnOff::default_instance();
}

bool settings_element::has_printFormsData() const
{
    return m_has_printFormsData;
}

CT_OnOff* settings_element::mutable_printFormsData()
{
    m_has_printFormsData = true;
    if (!m_printFormsData)
    {
        m_printFormsData = new CT_OnOff();
    }
    return m_printFormsData;
}

const CT_OnOff& settings_element::get_printFormsData() const
{
    if (m_printFormsData)
    {
        return *m_printFormsData;
    }
    return CT_OnOff::default_instance();
}

bool settings_element::has_embedTrueTypeFonts() const
{
    return m_has_embedTrueTypeFonts;
}

CT_OnOff* settings_element::mutable_embedTrueTypeFonts()
{
    m_has_embedTrueTypeFonts = true;
    if (!m_embedTrueTypeFonts)
    {
        m_embedTrueTypeFonts = new CT_OnOff();
    }
    return m_embedTrueTypeFonts;
}

const CT_OnOff& settings_element::get_embedTrueTypeFonts() const
{
    if (m_embedTrueTypeFonts)
    {
        return *m_embedTrueTypeFonts;
    }
    return CT_OnOff::default_instance();
}

bool settings_element::has_embedSystemFonts() const
{
    return m_has_embedSystemFonts;
}

CT_OnOff* settings_element::mutable_embedSystemFonts()
{
    m_has_embedSystemFonts = true;
    if (!m_embedSystemFonts)
    {
        m_embedSystemFonts = new CT_OnOff();
    }
    return m_embedSystemFonts;
}

const CT_OnOff& settings_element::get_embedSystemFonts() const
{
    if (m_embedSystemFonts)
    {
        return *m_embedSystemFonts;
    }
    return CT_OnOff::default_instance();
}

bool settings_element::has_saveSubsetFonts() const
{
    return m_has_saveSubsetFonts;
}

CT_OnOff* settings_element::mutable_saveSubsetFonts()
{
    m_has_saveSubsetFonts = true;
    if (!m_saveSubsetFonts)
    {
        m_saveSubsetFonts = new CT_OnOff();
    }
    return m_saveSubsetFonts;
}

const CT_OnOff& settings_element::get_saveSubsetFonts() const
{
    if (m_saveSubsetFonts)
    {
        return *m_saveSubsetFonts;
    }
    return CT_OnOff::default_instance();
}

bool settings_element::has_saveFormsData() const
{
    return m_has_saveFormsData;
}

CT_OnOff* settings_element::mutable_saveFormsData()
{
    m_has_saveFormsData = true;
    if (!m_saveFormsData)
    {
        m_saveFormsData = new CT_OnOff();
    }
    return m_saveFormsData;
}

const CT_OnOff& settings_element::get_saveFormsData() const
{
    if (m_saveFormsData)
    {
        return *m_saveFormsData;
    }
    return CT_OnOff::default_instance();
}

bool settings_element::has_mirrorMargins() const
{
    return m_has_mirrorMargins;
}

CT_OnOff* settings_element::mutable_mirrorMargins()
{
    m_has_mirrorMargins = true;
    if (!m_mirrorMargins)
    {
        m_mirrorMargins = new CT_OnOff();
    }
    return m_mirrorMargins;
}

const CT_OnOff& settings_element::get_mirrorMargins() const
{
    if (m_mirrorMargins)
    {
        return *m_mirrorMargins;
    }
    return CT_OnOff::default_instance();
}

bool settings_element::has_alignBordersAndEdges() const
{
    return m_has_alignBordersAndEdges;
}

CT_OnOff* settings_element::mutable_alignBordersAndEdges()
{
    m_has_alignBordersAndEdges = true;
    if (!m_alignBordersAndEdges)
    {
        m_alignBordersAndEdges = new CT_OnOff();
    }
    return m_alignBordersAndEdges;
}

const CT_OnOff& settings_element::get_alignBordersAndEdges() const
{
    if (m_alignBordersAndEdges)
    {
        return *m_alignBordersAndEdges;
    }
    return CT_OnOff::default_instance();
}

bool settings_element::has_bordersDoNotSurroundHeader() const
{
    return m_has_bordersDoNotSurroundHeader;
}

CT_OnOff* settings_element::mutable_bordersDoNotSurroundHeader()
{
    m_has_bordersDoNotSurroundHeader = true;
    if (!m_bordersDoNotSurroundHeader)
    {
        m_bordersDoNotSurroundHeader = new CT_OnOff();
    }
    return m_bordersDoNotSurroundHeader;
}

const CT_OnOff& settings_element::get_bordersDoNotSurroundHeader() const
{
    if (m_bordersDoNotSurroundHeader)
    {
        return *m_bordersDoNotSurroundHeader;
    }
    return CT_OnOff::default_instance();
}

bool settings_element::has_bordersDoNotSurroundFooter() const
{
    return m_has_bordersDoNotSurroundFooter;
}

CT_OnOff* settings_element::mutable_bordersDoNotSurroundFooter()
{
    m_has_bordersDoNotSurroundFooter = true;
    if (!m_bordersDoNotSurroundFooter)
    {
        m_bordersDoNotSurroundFooter = new CT_OnOff();
    }
    return m_bordersDoNotSurroundFooter;
}

const CT_OnOff& settings_element::get_bordersDoNotSurroundFooter() const
{
    if (m_bordersDoNotSurroundFooter)
    {
        return *m_bordersDoNotSurroundFooter;
    }
    return CT_OnOff::default_instance();
}

bool settings_element::has_gutterAtTop() const
{
    return m_has_gutterAtTop;
}

CT_OnOff* settings_element::mutable_gutterAtTop()
{
    m_has_gutterAtTop = true;
    if (!m_gutterAtTop)
    {
        m_gutterAtTop = new CT_OnOff();
    }
    return m_gutterAtTop;
}

const CT_OnOff& settings_element::get_gutterAtTop() const
{
    if (m_gutterAtTop)
    {
        return *m_gutterAtTop;
    }
    return CT_OnOff::default_instance();
}

bool settings_element::has_hideSpellingErrors() const
{
    return m_has_hideSpellingErrors;
}

CT_OnOff* settings_element::mutable_hideSpellingErrors()
{
    m_has_hideSpellingErrors = true;
    if (!m_hideSpellingErrors)
    {
        m_hideSpellingErrors = new CT_OnOff();
    }
    return m_hideSpellingErrors;
}

const CT_OnOff& settings_element::get_hideSpellingErrors() const
{
    if (m_hideSpellingErrors)
    {
        return *m_hideSpellingErrors;
    }
    return CT_OnOff::default_instance();
}

bool settings_element::has_hideGrammaticalErrors() const
{
    return m_has_hideGrammaticalErrors;
}

CT_OnOff* settings_element::mutable_hideGrammaticalErrors()
{
    m_has_hideGrammaticalErrors = true;
    if (!m_hideGrammaticalErrors)
    {
        m_hideGrammaticalErrors = new CT_OnOff();
    }
    return m_hideGrammaticalErrors;
}

const CT_OnOff& settings_element::get_hideGrammaticalErrors() const
{
    if (m_hideGrammaticalErrors)
    {
        return *m_hideGrammaticalErrors;
    }
    return CT_OnOff::default_instance();
}

CT_WritingStyle* settings_element::add_activeWritingStyle()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_WritingStyle* pNewChild = pChildGroup->mutable_activeWritingStyle();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

bool settings_element::has_proofState() const
{
    return m_has_proofState;
}

CT_Proof* settings_element::mutable_proofState()
{
    m_has_proofState = true;
    if (!m_proofState)
    {
        m_proofState = new CT_Proof();
    }
    return m_proofState;
}

const CT_Proof& settings_element::get_proofState() const
{
    if (m_proofState)
    {
        return *m_proofState;
    }
    return CT_Proof::default_instance();
}

bool settings_element::has_formsDesign() const
{
    return m_has_formsDesign;
}

CT_OnOff* settings_element::mutable_formsDesign()
{
    m_has_formsDesign = true;
    if (!m_formsDesign)
    {
        m_formsDesign = new CT_OnOff();
    }
    return m_formsDesign;
}

const CT_OnOff& settings_element::get_formsDesign() const
{
    if (m_formsDesign)
    {
        return *m_formsDesign;
    }
    return CT_OnOff::default_instance();
}

bool settings_element::has_attachedTemplate() const
{
    return m_has_attachedTemplate;
}

CT_Rel* settings_element::mutable_attachedTemplate()
{
    m_has_attachedTemplate = true;
    if (!m_attachedTemplate)
    {
        m_attachedTemplate = new CT_Rel();
    }
    return m_attachedTemplate;
}

const CT_Rel& settings_element::get_attachedTemplate() const
{
    if (m_attachedTemplate)
    {
        return *m_attachedTemplate;
    }
    return CT_Rel::default_instance();
}

bool settings_element::has_linkStyles() const
{
    return m_has_linkStyles;
}

CT_OnOff* settings_element::mutable_linkStyles()
{
    m_has_linkStyles = true;
    if (!m_linkStyles)
    {
        m_linkStyles = new CT_OnOff();
    }
    return m_linkStyles;
}

const CT_OnOff& settings_element::get_linkStyles() const
{
    if (m_linkStyles)
    {
        return *m_linkStyles;
    }
    return CT_OnOff::default_instance();
}

bool settings_element::has_stylePaneFormatFilter() const
{
    return m_has_stylePaneFormatFilter;
}

CT_StylePaneFilter* settings_element::mutable_stylePaneFormatFilter()
{
    m_has_stylePaneFormatFilter = true;
    if (!m_stylePaneFormatFilter)
    {
        m_stylePaneFormatFilter = new CT_StylePaneFilter();
    }
    return m_stylePaneFormatFilter;
}

const CT_StylePaneFilter& settings_element::get_stylePaneFormatFilter() const
{
    if (m_stylePaneFormatFilter)
    {
        return *m_stylePaneFormatFilter;
    }
    return CT_StylePaneFilter::default_instance();
}

bool settings_element::has_stylePaneSortMethod() const
{
    return m_has_stylePaneSortMethod;
}

CT_StyleSort* settings_element::mutable_stylePaneSortMethod()
{
    m_has_stylePaneSortMethod = true;
    if (!m_stylePaneSortMethod)
    {
        m_stylePaneSortMethod = new CT_StyleSort();
    }
    return m_stylePaneSortMethod;
}

const CT_StyleSort& settings_element::get_stylePaneSortMethod() const
{
    if (m_stylePaneSortMethod)
    {
        return *m_stylePaneSortMethod;
    }
    return CT_StyleSort::default_instance();
}

bool settings_element::has_documentType() const
{
    return m_has_documentType;
}

CT_DocType* settings_element::mutable_documentType()
{
    m_has_documentType = true;
    if (!m_documentType)
    {
        m_documentType = new CT_DocType();
    }
    return m_documentType;
}

const CT_DocType& settings_element::get_documentType() const
{
    if (m_documentType)
    {
        return *m_documentType;
    }
    return CT_DocType::default_instance();
}

bool settings_element::has_mailMerge() const
{
    return m_has_mailMerge;
}

CT_MailMerge* settings_element::mutable_mailMerge()
{
    m_has_mailMerge = true;
    if (!m_mailMerge)
    {
        m_mailMerge = new CT_MailMerge();
    }
    return m_mailMerge;
}

const CT_MailMerge& settings_element::get_mailMerge() const
{
    if (m_mailMerge)
    {
        return *m_mailMerge;
    }
    return CT_MailMerge::default_instance();
}

bool settings_element::has_revisionView() const
{
    return m_has_revisionView;
}

CT_TrackChangesView* settings_element::mutable_revisionView()
{
    m_has_revisionView = true;
    if (!m_revisionView)
    {
        m_revisionView = new CT_TrackChangesView();
    }
    return m_revisionView;
}

const CT_TrackChangesView& settings_element::get_revisionView() const
{
    if (m_revisionView)
    {
        return *m_revisionView;
    }
    return CT_TrackChangesView::default_instance();
}

bool settings_element::has_trackRevisions() const
{
    return m_has_trackRevisions;
}

CT_OnOff* settings_element::mutable_trackRevisions()
{
    m_has_trackRevisions = true;
    if (!m_trackRevisions)
    {
        m_trackRevisions = new CT_OnOff();
    }
    return m_trackRevisions;
}

const CT_OnOff& settings_element::get_trackRevisions() const
{
    if (m_trackRevisions)
    {
        return *m_trackRevisions;
    }
    return CT_OnOff::default_instance();
}

bool settings_element::has_doNotTrackMoves() const
{
    return m_has_doNotTrackMoves;
}

CT_OnOff* settings_element::mutable_doNotTrackMoves()
{
    m_has_doNotTrackMoves = true;
    if (!m_doNotTrackMoves)
    {
        m_doNotTrackMoves = new CT_OnOff();
    }
    return m_doNotTrackMoves;
}

const CT_OnOff& settings_element::get_doNotTrackMoves() const
{
    if (m_doNotTrackMoves)
    {
        return *m_doNotTrackMoves;
    }
    return CT_OnOff::default_instance();
}

bool settings_element::has_doNotTrackFormatting() const
{
    return m_has_doNotTrackFormatting;
}

CT_OnOff* settings_element::mutable_doNotTrackFormatting()
{
    m_has_doNotTrackFormatting = true;
    if (!m_doNotTrackFormatting)
    {
        m_doNotTrackFormatting = new CT_OnOff();
    }
    return m_doNotTrackFormatting;
}

const CT_OnOff& settings_element::get_doNotTrackFormatting() const
{
    if (m_doNotTrackFormatting)
    {
        return *m_doNotTrackFormatting;
    }
    return CT_OnOff::default_instance();
}

bool settings_element::has_documentProtection() const
{
    return m_has_documentProtection;
}

CT_DocProtect* settings_element::mutable_documentProtection()
{
    m_has_documentProtection = true;
    if (!m_documentProtection)
    {
        m_documentProtection = new CT_DocProtect();
    }
    return m_documentProtection;
}

const CT_DocProtect& settings_element::get_documentProtection() const
{
    if (m_documentProtection)
    {
        return *m_documentProtection;
    }
    return CT_DocProtect::default_instance();
}

bool settings_element::has_autoFormatOverride() const
{
    return m_has_autoFormatOverride;
}

CT_OnOff* settings_element::mutable_autoFormatOverride()
{
    m_has_autoFormatOverride = true;
    if (!m_autoFormatOverride)
    {
        m_autoFormatOverride = new CT_OnOff();
    }
    return m_autoFormatOverride;
}

const CT_OnOff& settings_element::get_autoFormatOverride() const
{
    if (m_autoFormatOverride)
    {
        return *m_autoFormatOverride;
    }
    return CT_OnOff::default_instance();
}

bool settings_element::has_styleLockTheme() const
{
    return m_has_styleLockTheme;
}

CT_OnOff* settings_element::mutable_styleLockTheme()
{
    m_has_styleLockTheme = true;
    if (!m_styleLockTheme)
    {
        m_styleLockTheme = new CT_OnOff();
    }
    return m_styleLockTheme;
}

const CT_OnOff& settings_element::get_styleLockTheme() const
{
    if (m_styleLockTheme)
    {
        return *m_styleLockTheme;
    }
    return CT_OnOff::default_instance();
}

bool settings_element::has_styleLockQFSet() const
{
    return m_has_styleLockQFSet;
}

CT_OnOff* settings_element::mutable_styleLockQFSet()
{
    m_has_styleLockQFSet = true;
    if (!m_styleLockQFSet)
    {
        m_styleLockQFSet = new CT_OnOff();
    }
    return m_styleLockQFSet;
}

const CT_OnOff& settings_element::get_styleLockQFSet() const
{
    if (m_styleLockQFSet)
    {
        return *m_styleLockQFSet;
    }
    return CT_OnOff::default_instance();
}

bool settings_element::has_defaultTabStop() const
{
    return m_has_defaultTabStop;
}

CT_TwipsMeasure* settings_element::mutable_defaultTabStop()
{
    m_has_defaultTabStop = true;
    if (!m_defaultTabStop)
    {
        m_defaultTabStop = new CT_TwipsMeasure();
    }
    return m_defaultTabStop;
}

const CT_TwipsMeasure& settings_element::get_defaultTabStop() const
{
    if (m_defaultTabStop)
    {
        return *m_defaultTabStop;
    }
    return CT_TwipsMeasure::default_instance();
}

bool settings_element::has_autoHyphenation() const
{
    return m_has_autoHyphenation;
}

CT_OnOff* settings_element::mutable_autoHyphenation()
{
    m_has_autoHyphenation = true;
    if (!m_autoHyphenation)
    {
        m_autoHyphenation = new CT_OnOff();
    }
    return m_autoHyphenation;
}

const CT_OnOff& settings_element::get_autoHyphenation() const
{
    if (m_autoHyphenation)
    {
        return *m_autoHyphenation;
    }
    return CT_OnOff::default_instance();
}

bool settings_element::has_consecutiveHyphenLimit() const
{
    return m_has_consecutiveHyphenLimit;
}

CT_DecimalNumber* settings_element::mutable_consecutiveHyphenLimit()
{
    m_has_consecutiveHyphenLimit = true;
    if (!m_consecutiveHyphenLimit)
    {
        m_consecutiveHyphenLimit = new CT_DecimalNumber();
    }
    return m_consecutiveHyphenLimit;
}

const CT_DecimalNumber& settings_element::get_consecutiveHyphenLimit() const
{
    if (m_consecutiveHyphenLimit)
    {
        return *m_consecutiveHyphenLimit;
    }
    return CT_DecimalNumber::default_instance();
}

bool settings_element::has_hyphenationZone() const
{
    return m_has_hyphenationZone;
}

CT_TwipsMeasure* settings_element::mutable_hyphenationZone()
{
    m_has_hyphenationZone = true;
    if (!m_hyphenationZone)
    {
        m_hyphenationZone = new CT_TwipsMeasure();
    }
    return m_hyphenationZone;
}

const CT_TwipsMeasure& settings_element::get_hyphenationZone() const
{
    if (m_hyphenationZone)
    {
        return *m_hyphenationZone;
    }
    return CT_TwipsMeasure::default_instance();
}

bool settings_element::has_doNotHyphenateCaps() const
{
    return m_has_doNotHyphenateCaps;
}

CT_OnOff* settings_element::mutable_doNotHyphenateCaps()
{
    m_has_doNotHyphenateCaps = true;
    if (!m_doNotHyphenateCaps)
    {
        m_doNotHyphenateCaps = new CT_OnOff();
    }
    return m_doNotHyphenateCaps;
}

const CT_OnOff& settings_element::get_doNotHyphenateCaps() const
{
    if (m_doNotHyphenateCaps)
    {
        return *m_doNotHyphenateCaps;
    }
    return CT_OnOff::default_instance();
}

bool settings_element::has_showEnvelope() const
{
    return m_has_showEnvelope;
}

CT_OnOff* settings_element::mutable_showEnvelope()
{
    m_has_showEnvelope = true;
    if (!m_showEnvelope)
    {
        m_showEnvelope = new CT_OnOff();
    }
    return m_showEnvelope;
}

const CT_OnOff& settings_element::get_showEnvelope() const
{
    if (m_showEnvelope)
    {
        return *m_showEnvelope;
    }
    return CT_OnOff::default_instance();
}

bool settings_element::has_summaryLength() const
{
    return m_has_summaryLength;
}

CT_DecimalNumberOrPrecent* settings_element::mutable_summaryLength()
{
    m_has_summaryLength = true;
    if (!m_summaryLength)
    {
        m_summaryLength = new CT_DecimalNumberOrPrecent();
    }
    return m_summaryLength;
}

const CT_DecimalNumberOrPrecent& settings_element::get_summaryLength() const
{
    if (m_summaryLength)
    {
        return *m_summaryLength;
    }
    return CT_DecimalNumberOrPrecent::default_instance();
}

bool settings_element::has_clickAndTypeStyle() const
{
    return m_has_clickAndTypeStyle;
}

CT_String* settings_element::mutable_clickAndTypeStyle()
{
    m_has_clickAndTypeStyle = true;
    if (!m_clickAndTypeStyle)
    {
        m_clickAndTypeStyle = new CT_String();
    }
    return m_clickAndTypeStyle;
}

const CT_String& settings_element::get_clickAndTypeStyle() const
{
    if (m_clickAndTypeStyle)
    {
        return *m_clickAndTypeStyle;
    }
    return CT_String::default_instance();
}

bool settings_element::has_defaultTableStyle() const
{
    return m_has_defaultTableStyle;
}

CT_String* settings_element::mutable_defaultTableStyle()
{
    m_has_defaultTableStyle = true;
    if (!m_defaultTableStyle)
    {
        m_defaultTableStyle = new CT_String();
    }
    return m_defaultTableStyle;
}

const CT_String& settings_element::get_defaultTableStyle() const
{
    if (m_defaultTableStyle)
    {
        return *m_defaultTableStyle;
    }
    return CT_String::default_instance();
}

bool settings_element::has_evenAndOddHeaders() const
{
    return m_has_evenAndOddHeaders;
}

CT_OnOff* settings_element::mutable_evenAndOddHeaders()
{
    m_has_evenAndOddHeaders = true;
    if (!m_evenAndOddHeaders)
    {
        m_evenAndOddHeaders = new CT_OnOff();
    }
    return m_evenAndOddHeaders;
}

const CT_OnOff& settings_element::get_evenAndOddHeaders() const
{
    if (m_evenAndOddHeaders)
    {
        return *m_evenAndOddHeaders;
    }
    return CT_OnOff::default_instance();
}

bool settings_element::has_bookFoldRevPrinting() const
{
    return m_has_bookFoldRevPrinting;
}

CT_OnOff* settings_element::mutable_bookFoldRevPrinting()
{
    m_has_bookFoldRevPrinting = true;
    if (!m_bookFoldRevPrinting)
    {
        m_bookFoldRevPrinting = new CT_OnOff();
    }
    return m_bookFoldRevPrinting;
}

const CT_OnOff& settings_element::get_bookFoldRevPrinting() const
{
    if (m_bookFoldRevPrinting)
    {
        return *m_bookFoldRevPrinting;
    }
    return CT_OnOff::default_instance();
}

bool settings_element::has_bookFoldPrinting() const
{
    return m_has_bookFoldPrinting;
}

CT_OnOff* settings_element::mutable_bookFoldPrinting()
{
    m_has_bookFoldPrinting = true;
    if (!m_bookFoldPrinting)
    {
        m_bookFoldPrinting = new CT_OnOff();
    }
    return m_bookFoldPrinting;
}

const CT_OnOff& settings_element::get_bookFoldPrinting() const
{
    if (m_bookFoldPrinting)
    {
        return *m_bookFoldPrinting;
    }
    return CT_OnOff::default_instance();
}

bool settings_element::has_bookFoldPrintingSheets() const
{
    return m_has_bookFoldPrintingSheets;
}

CT_DecimalNumber* settings_element::mutable_bookFoldPrintingSheets()
{
    m_has_bookFoldPrintingSheets = true;
    if (!m_bookFoldPrintingSheets)
    {
        m_bookFoldPrintingSheets = new CT_DecimalNumber();
    }
    return m_bookFoldPrintingSheets;
}

const CT_DecimalNumber& settings_element::get_bookFoldPrintingSheets() const
{
    if (m_bookFoldPrintingSheets)
    {
        return *m_bookFoldPrintingSheets;
    }
    return CT_DecimalNumber::default_instance();
}

bool settings_element::has_drawingGridHorizontalSpacing() const
{
    return m_has_drawingGridHorizontalSpacing;
}

CT_TwipsMeasure* settings_element::mutable_drawingGridHorizontalSpacing()
{
    m_has_drawingGridHorizontalSpacing = true;
    if (!m_drawingGridHorizontalSpacing)
    {
        m_drawingGridHorizontalSpacing = new CT_TwipsMeasure();
    }
    return m_drawingGridHorizontalSpacing;
}

const CT_TwipsMeasure& settings_element::get_drawingGridHorizontalSpacing() const
{
    if (m_drawingGridHorizontalSpacing)
    {
        return *m_drawingGridHorizontalSpacing;
    }
    return CT_TwipsMeasure::default_instance();
}

bool settings_element::has_drawingGridVerticalSpacing() const
{
    return m_has_drawingGridVerticalSpacing;
}

CT_TwipsMeasure* settings_element::mutable_drawingGridVerticalSpacing()
{
    m_has_drawingGridVerticalSpacing = true;
    if (!m_drawingGridVerticalSpacing)
    {
        m_drawingGridVerticalSpacing = new CT_TwipsMeasure();
    }
    return m_drawingGridVerticalSpacing;
}

const CT_TwipsMeasure& settings_element::get_drawingGridVerticalSpacing() const
{
    if (m_drawingGridVerticalSpacing)
    {
        return *m_drawingGridVerticalSpacing;
    }
    return CT_TwipsMeasure::default_instance();
}

bool settings_element::has_displayHorizontalDrawingGridEvery() const
{
    return m_has_displayHorizontalDrawingGridEvery;
}

CT_DecimalNumber* settings_element::mutable_displayHorizontalDrawingGridEvery()
{
    m_has_displayHorizontalDrawingGridEvery = true;
    if (!m_displayHorizontalDrawingGridEvery)
    {
        m_displayHorizontalDrawingGridEvery = new CT_DecimalNumber();
    }
    return m_displayHorizontalDrawingGridEvery;
}

const CT_DecimalNumber& settings_element::get_displayHorizontalDrawingGridEvery() const
{
    if (m_displayHorizontalDrawingGridEvery)
    {
        return *m_displayHorizontalDrawingGridEvery;
    }
    return CT_DecimalNumber::default_instance();
}

bool settings_element::has_displayVerticalDrawingGridEvery() const
{
    return m_has_displayVerticalDrawingGridEvery;
}

CT_DecimalNumber* settings_element::mutable_displayVerticalDrawingGridEvery()
{
    m_has_displayVerticalDrawingGridEvery = true;
    if (!m_displayVerticalDrawingGridEvery)
    {
        m_displayVerticalDrawingGridEvery = new CT_DecimalNumber();
    }
    return m_displayVerticalDrawingGridEvery;
}

const CT_DecimalNumber& settings_element::get_displayVerticalDrawingGridEvery() const
{
    if (m_displayVerticalDrawingGridEvery)
    {
        return *m_displayVerticalDrawingGridEvery;
    }
    return CT_DecimalNumber::default_instance();
}

bool settings_element::has_doNotUseMarginsForDrawingGridOrigin() const
{
    return m_has_doNotUseMarginsForDrawingGridOrigin;
}

CT_OnOff* settings_element::mutable_doNotUseMarginsForDrawingGridOrigin()
{
    m_has_doNotUseMarginsForDrawingGridOrigin = true;
    if (!m_doNotUseMarginsForDrawingGridOrigin)
    {
        m_doNotUseMarginsForDrawingGridOrigin = new CT_OnOff();
    }
    return m_doNotUseMarginsForDrawingGridOrigin;
}

const CT_OnOff& settings_element::get_doNotUseMarginsForDrawingGridOrigin() const
{
    if (m_doNotUseMarginsForDrawingGridOrigin)
    {
        return *m_doNotUseMarginsForDrawingGridOrigin;
    }
    return CT_OnOff::default_instance();
}

bool settings_element::has_drawingGridHorizontalOrigin() const
{
    return m_has_drawingGridHorizontalOrigin;
}

CT_TwipsMeasure* settings_element::mutable_drawingGridHorizontalOrigin()
{
    m_has_drawingGridHorizontalOrigin = true;
    if (!m_drawingGridHorizontalOrigin)
    {
        m_drawingGridHorizontalOrigin = new CT_TwipsMeasure();
    }
    return m_drawingGridHorizontalOrigin;
}

const CT_TwipsMeasure& settings_element::get_drawingGridHorizontalOrigin() const
{
    if (m_drawingGridHorizontalOrigin)
    {
        return *m_drawingGridHorizontalOrigin;
    }
    return CT_TwipsMeasure::default_instance();
}

bool settings_element::has_drawingGridVerticalOrigin() const
{
    return m_has_drawingGridVerticalOrigin;
}

CT_TwipsMeasure* settings_element::mutable_drawingGridVerticalOrigin()
{
    m_has_drawingGridVerticalOrigin = true;
    if (!m_drawingGridVerticalOrigin)
    {
        m_drawingGridVerticalOrigin = new CT_TwipsMeasure();
    }
    return m_drawingGridVerticalOrigin;
}

const CT_TwipsMeasure& settings_element::get_drawingGridVerticalOrigin() const
{
    if (m_drawingGridVerticalOrigin)
    {
        return *m_drawingGridVerticalOrigin;
    }
    return CT_TwipsMeasure::default_instance();
}

bool settings_element::has_doNotShadeFormData() const
{
    return m_has_doNotShadeFormData;
}

CT_OnOff* settings_element::mutable_doNotShadeFormData()
{
    m_has_doNotShadeFormData = true;
    if (!m_doNotShadeFormData)
    {
        m_doNotShadeFormData = new CT_OnOff();
    }
    return m_doNotShadeFormData;
}

const CT_OnOff& settings_element::get_doNotShadeFormData() const
{
    if (m_doNotShadeFormData)
    {
        return *m_doNotShadeFormData;
    }
    return CT_OnOff::default_instance();
}

bool settings_element::has_noPunctuationKerning() const
{
    return m_has_noPunctuationKerning;
}

CT_OnOff* settings_element::mutable_noPunctuationKerning()
{
    m_has_noPunctuationKerning = true;
    if (!m_noPunctuationKerning)
    {
        m_noPunctuationKerning = new CT_OnOff();
    }
    return m_noPunctuationKerning;
}

const CT_OnOff& settings_element::get_noPunctuationKerning() const
{
    if (m_noPunctuationKerning)
    {
        return *m_noPunctuationKerning;
    }
    return CT_OnOff::default_instance();
}

bool settings_element::has_characterSpacingControl() const
{
    return m_has_characterSpacingControl;
}

CT_CharacterSpacing* settings_element::mutable_characterSpacingControl()
{
    m_has_characterSpacingControl = true;
    if (!m_characterSpacingControl)
    {
        m_characterSpacingControl = new CT_CharacterSpacing();
    }
    return m_characterSpacingControl;
}

const CT_CharacterSpacing& settings_element::get_characterSpacingControl() const
{
    if (m_characterSpacingControl)
    {
        return *m_characterSpacingControl;
    }
    return CT_CharacterSpacing::default_instance();
}

bool settings_element::has_printTwoOnOne() const
{
    return m_has_printTwoOnOne;
}

CT_OnOff* settings_element::mutable_printTwoOnOne()
{
    m_has_printTwoOnOne = true;
    if (!m_printTwoOnOne)
    {
        m_printTwoOnOne = new CT_OnOff();
    }
    return m_printTwoOnOne;
}

const CT_OnOff& settings_element::get_printTwoOnOne() const
{
    if (m_printTwoOnOne)
    {
        return *m_printTwoOnOne;
    }
    return CT_OnOff::default_instance();
}

bool settings_element::has_strictFirstAndLastChars() const
{
    return m_has_strictFirstAndLastChars;
}

CT_OnOff* settings_element::mutable_strictFirstAndLastChars()
{
    m_has_strictFirstAndLastChars = true;
    if (!m_strictFirstAndLastChars)
    {
        m_strictFirstAndLastChars = new CT_OnOff();
    }
    return m_strictFirstAndLastChars;
}

const CT_OnOff& settings_element::get_strictFirstAndLastChars() const
{
    if (m_strictFirstAndLastChars)
    {
        return *m_strictFirstAndLastChars;
    }
    return CT_OnOff::default_instance();
}

bool settings_element::has_noLineBreaksAfter() const
{
    return m_has_noLineBreaksAfter;
}

CT_Kinsoku* settings_element::mutable_noLineBreaksAfter()
{
    m_has_noLineBreaksAfter = true;
    if (!m_noLineBreaksAfter)
    {
        m_noLineBreaksAfter = new CT_Kinsoku();
    }
    return m_noLineBreaksAfter;
}

const CT_Kinsoku& settings_element::get_noLineBreaksAfter() const
{
    if (m_noLineBreaksAfter)
    {
        return *m_noLineBreaksAfter;
    }
    return CT_Kinsoku::default_instance();
}

bool settings_element::has_noLineBreaksBefore() const
{
    return m_has_noLineBreaksBefore;
}

CT_Kinsoku* settings_element::mutable_noLineBreaksBefore()
{
    m_has_noLineBreaksBefore = true;
    if (!m_noLineBreaksBefore)
    {
        m_noLineBreaksBefore = new CT_Kinsoku();
    }
    return m_noLineBreaksBefore;
}

const CT_Kinsoku& settings_element::get_noLineBreaksBefore() const
{
    if (m_noLineBreaksBefore)
    {
        return *m_noLineBreaksBefore;
    }
    return CT_Kinsoku::default_instance();
}

bool settings_element::has_savePreviewPicture() const
{
    return m_has_savePreviewPicture;
}

CT_OnOff* settings_element::mutable_savePreviewPicture()
{
    m_has_savePreviewPicture = true;
    if (!m_savePreviewPicture)
    {
        m_savePreviewPicture = new CT_OnOff();
    }
    return m_savePreviewPicture;
}

const CT_OnOff& settings_element::get_savePreviewPicture() const
{
    if (m_savePreviewPicture)
    {
        return *m_savePreviewPicture;
    }
    return CT_OnOff::default_instance();
}

bool settings_element::has_doNotValidateAgainstSchema() const
{
    return m_has_doNotValidateAgainstSchema;
}

CT_OnOff* settings_element::mutable_doNotValidateAgainstSchema()
{
    m_has_doNotValidateAgainstSchema = true;
    if (!m_doNotValidateAgainstSchema)
    {
        m_doNotValidateAgainstSchema = new CT_OnOff();
    }
    return m_doNotValidateAgainstSchema;
}

const CT_OnOff& settings_element::get_doNotValidateAgainstSchema() const
{
    if (m_doNotValidateAgainstSchema)
    {
        return *m_doNotValidateAgainstSchema;
    }
    return CT_OnOff::default_instance();
}

bool settings_element::has_saveInvalidXml() const
{
    return m_has_saveInvalidXml;
}

CT_OnOff* settings_element::mutable_saveInvalidXml()
{
    m_has_saveInvalidXml = true;
    if (!m_saveInvalidXml)
    {
        m_saveInvalidXml = new CT_OnOff();
    }
    return m_saveInvalidXml;
}

const CT_OnOff& settings_element::get_saveInvalidXml() const
{
    if (m_saveInvalidXml)
    {
        return *m_saveInvalidXml;
    }
    return CT_OnOff::default_instance();
}

bool settings_element::has_ignoreMixedContent() const
{
    return m_has_ignoreMixedContent;
}

CT_OnOff* settings_element::mutable_ignoreMixedContent()
{
    m_has_ignoreMixedContent = true;
    if (!m_ignoreMixedContent)
    {
        m_ignoreMixedContent = new CT_OnOff();
    }
    return m_ignoreMixedContent;
}

const CT_OnOff& settings_element::get_ignoreMixedContent() const
{
    if (m_ignoreMixedContent)
    {
        return *m_ignoreMixedContent;
    }
    return CT_OnOff::default_instance();
}

bool settings_element::has_alwaysShowPlaceholderText() const
{
    return m_has_alwaysShowPlaceholderText;
}

CT_OnOff* settings_element::mutable_alwaysShowPlaceholderText()
{
    m_has_alwaysShowPlaceholderText = true;
    if (!m_alwaysShowPlaceholderText)
    {
        m_alwaysShowPlaceholderText = new CT_OnOff();
    }
    return m_alwaysShowPlaceholderText;
}

const CT_OnOff& settings_element::get_alwaysShowPlaceholderText() const
{
    if (m_alwaysShowPlaceholderText)
    {
        return *m_alwaysShowPlaceholderText;
    }
    return CT_OnOff::default_instance();
}

bool settings_element::has_doNotDemarcateInvalidXml() const
{
    return m_has_doNotDemarcateInvalidXml;
}

CT_OnOff* settings_element::mutable_doNotDemarcateInvalidXml()
{
    m_has_doNotDemarcateInvalidXml = true;
    if (!m_doNotDemarcateInvalidXml)
    {
        m_doNotDemarcateInvalidXml = new CT_OnOff();
    }
    return m_doNotDemarcateInvalidXml;
}

const CT_OnOff& settings_element::get_doNotDemarcateInvalidXml() const
{
    if (m_doNotDemarcateInvalidXml)
    {
        return *m_doNotDemarcateInvalidXml;
    }
    return CT_OnOff::default_instance();
}

bool settings_element::has_saveXmlDataOnly() const
{
    return m_has_saveXmlDataOnly;
}

CT_OnOff* settings_element::mutable_saveXmlDataOnly()
{
    m_has_saveXmlDataOnly = true;
    if (!m_saveXmlDataOnly)
    {
        m_saveXmlDataOnly = new CT_OnOff();
    }
    return m_saveXmlDataOnly;
}

const CT_OnOff& settings_element::get_saveXmlDataOnly() const
{
    if (m_saveXmlDataOnly)
    {
        return *m_saveXmlDataOnly;
    }
    return CT_OnOff::default_instance();
}

bool settings_element::has_useXSLTWhenSaving() const
{
    return m_has_useXSLTWhenSaving;
}

CT_OnOff* settings_element::mutable_useXSLTWhenSaving()
{
    m_has_useXSLTWhenSaving = true;
    if (!m_useXSLTWhenSaving)
    {
        m_useXSLTWhenSaving = new CT_OnOff();
    }
    return m_useXSLTWhenSaving;
}

const CT_OnOff& settings_element::get_useXSLTWhenSaving() const
{
    if (m_useXSLTWhenSaving)
    {
        return *m_useXSLTWhenSaving;
    }
    return CT_OnOff::default_instance();
}

bool settings_element::has_saveThroughXslt() const
{
    return m_has_saveThroughXslt;
}

CT_SaveThroughXslt* settings_element::mutable_saveThroughXslt()
{
    m_has_saveThroughXslt = true;
    if (!m_saveThroughXslt)
    {
        m_saveThroughXslt = new CT_SaveThroughXslt();
    }
    return m_saveThroughXslt;
}

const CT_SaveThroughXslt& settings_element::get_saveThroughXslt() const
{
    if (m_saveThroughXslt)
    {
        return *m_saveThroughXslt;
    }
    return CT_SaveThroughXslt::default_instance();
}

bool settings_element::has_showXMLTags() const
{
    return m_has_showXMLTags;
}

CT_OnOff* settings_element::mutable_showXMLTags()
{
    m_has_showXMLTags = true;
    if (!m_showXMLTags)
    {
        m_showXMLTags = new CT_OnOff();
    }
    return m_showXMLTags;
}

const CT_OnOff& settings_element::get_showXMLTags() const
{
    if (m_showXMLTags)
    {
        return *m_showXMLTags;
    }
    return CT_OnOff::default_instance();
}

bool settings_element::has_alwaysMergeEmptyNamespace() const
{
    return m_has_alwaysMergeEmptyNamespace;
}

CT_OnOff* settings_element::mutable_alwaysMergeEmptyNamespace()
{
    m_has_alwaysMergeEmptyNamespace = true;
    if (!m_alwaysMergeEmptyNamespace)
    {
        m_alwaysMergeEmptyNamespace = new CT_OnOff();
    }
    return m_alwaysMergeEmptyNamespace;
}

const CT_OnOff& settings_element::get_alwaysMergeEmptyNamespace() const
{
    if (m_alwaysMergeEmptyNamespace)
    {
        return *m_alwaysMergeEmptyNamespace;
    }
    return CT_OnOff::default_instance();
}

bool settings_element::has_updateFields() const
{
    return m_has_updateFields;
}

CT_OnOff* settings_element::mutable_updateFields()
{
    m_has_updateFields = true;
    if (!m_updateFields)
    {
        m_updateFields = new CT_OnOff();
    }
    return m_updateFields;
}

const CT_OnOff& settings_element::get_updateFields() const
{
    if (m_updateFields)
    {
        return *m_updateFields;
    }
    return CT_OnOff::default_instance();
}

bool settings_element::has_hdrShapeDefaults() const
{
    return m_has_hdrShapeDefaults;
}

CT_ShapeDefaults* settings_element::mutable_hdrShapeDefaults()
{
    m_has_hdrShapeDefaults = true;
    if (!m_hdrShapeDefaults)
    {
        m_hdrShapeDefaults = new CT_ShapeDefaults();
    }
    return m_hdrShapeDefaults;
}

const CT_ShapeDefaults& settings_element::get_hdrShapeDefaults() const
{
    if (m_hdrShapeDefaults)
    {
        return *m_hdrShapeDefaults;
    }
    return CT_ShapeDefaults::default_instance();
}

bool settings_element::has_footnotePr() const
{
    return m_has_footnotePr;
}

CT_FtnDocProps* settings_element::mutable_footnotePr()
{
    m_has_footnotePr = true;
    if (!m_footnotePr)
    {
        m_footnotePr = new CT_FtnDocProps();
    }
    return m_footnotePr;
}

const CT_FtnDocProps& settings_element::get_footnotePr() const
{
    if (m_footnotePr)
    {
        return *m_footnotePr;
    }
    return CT_FtnDocProps::default_instance();
}

bool settings_element::has_endnotePr() const
{
    return m_has_endnotePr;
}

CT_EdnDocProps* settings_element::mutable_endnotePr()
{
    m_has_endnotePr = true;
    if (!m_endnotePr)
    {
        m_endnotePr = new CT_EdnDocProps();
    }
    return m_endnotePr;
}

const CT_EdnDocProps& settings_element::get_endnotePr() const
{
    if (m_endnotePr)
    {
        return *m_endnotePr;
    }
    return CT_EdnDocProps::default_instance();
}

bool settings_element::has_compat() const
{
    return m_has_compat;
}

CT_Compat* settings_element::mutable_compat()
{
    m_has_compat = true;
    if (!m_compat)
    {
        m_compat = new CT_Compat();
    }
    return m_compat;
}

const CT_Compat& settings_element::get_compat() const
{
    if (m_compat)
    {
        return *m_compat;
    }
    return CT_Compat::default_instance();
}

bool settings_element::has_docVars() const
{
    return m_has_docVars;
}

CT_DocVars* settings_element::mutable_docVars()
{
    m_has_docVars = true;
    if (!m_docVars)
    {
        m_docVars = new CT_DocVars();
    }
    return m_docVars;
}

const CT_DocVars& settings_element::get_docVars() const
{
    if (m_docVars)
    {
        return *m_docVars;
    }
    return CT_DocVars::default_instance();
}

bool settings_element::has_rsids() const
{
    return m_has_rsids;
}

CT_DocRsids* settings_element::mutable_rsids()
{
    m_has_rsids = true;
    if (!m_rsids)
    {
        m_rsids = new CT_DocRsids();
    }
    return m_rsids;
}

const CT_DocRsids& settings_element::get_rsids() const
{
    if (m_rsids)
    {
        return *m_rsids;
    }
    return CT_DocRsids::default_instance();
}

bool settings_element::has_m_mathPr() const
{
    return m_has_m_mathPr;
}

ns_m::CT_MathPr* settings_element::mutable_m_mathPr()
{
    m_has_m_mathPr = true;
    if (!m_m_mathPr)
    {
        m_m_mathPr = new ns_m::CT_MathPr();
    }
    return m_m_mathPr;
}

const ns_m::CT_MathPr& settings_element::get_m_mathPr() const
{
    if (m_m_mathPr)
    {
        return *m_m_mathPr;
    }
    return ns_m::CT_MathPr::default_instance();
}

CT_String* settings_element::add_attachedSchema()
{
    ChildGroup_2 *pChildGroup = new ChildGroup_2();
    CT_String* pNewChild = pChildGroup->mutable_attachedSchema();
    m_childGroupList_2.push_back(pChildGroup);
    return pNewChild;
}

bool settings_element::has_themeFontLang() const
{
    return m_has_themeFontLang;
}

CT_Language* settings_element::mutable_themeFontLang()
{
    m_has_themeFontLang = true;
    if (!m_themeFontLang)
    {
        m_themeFontLang = new CT_Language();
    }
    return m_themeFontLang;
}

const CT_Language& settings_element::get_themeFontLang() const
{
    if (m_themeFontLang)
    {
        return *m_themeFontLang;
    }
    return CT_Language::default_instance();
}

bool settings_element::has_clrSchemeMapping() const
{
    return m_has_clrSchemeMapping;
}

CT_ColorSchemeMapping* settings_element::mutable_clrSchemeMapping()
{
    m_has_clrSchemeMapping = true;
    if (!m_clrSchemeMapping)
    {
        m_clrSchemeMapping = new CT_ColorSchemeMapping();
    }
    return m_clrSchemeMapping;
}

const CT_ColorSchemeMapping& settings_element::get_clrSchemeMapping() const
{
    if (m_clrSchemeMapping)
    {
        return *m_clrSchemeMapping;
    }
    return CT_ColorSchemeMapping::default_instance();
}

bool settings_element::has_doNotIncludeSubdocsInStats() const
{
    return m_has_doNotIncludeSubdocsInStats;
}

CT_OnOff* settings_element::mutable_doNotIncludeSubdocsInStats()
{
    m_has_doNotIncludeSubdocsInStats = true;
    if (!m_doNotIncludeSubdocsInStats)
    {
        m_doNotIncludeSubdocsInStats = new CT_OnOff();
    }
    return m_doNotIncludeSubdocsInStats;
}

const CT_OnOff& settings_element::get_doNotIncludeSubdocsInStats() const
{
    if (m_doNotIncludeSubdocsInStats)
    {
        return *m_doNotIncludeSubdocsInStats;
    }
    return CT_OnOff::default_instance();
}

bool settings_element::has_doNotAutoCompressPictures() const
{
    return m_has_doNotAutoCompressPictures;
}

CT_OnOff* settings_element::mutable_doNotAutoCompressPictures()
{
    m_has_doNotAutoCompressPictures = true;
    if (!m_doNotAutoCompressPictures)
    {
        m_doNotAutoCompressPictures = new CT_OnOff();
    }
    return m_doNotAutoCompressPictures;
}

const CT_OnOff& settings_element::get_doNotAutoCompressPictures() const
{
    if (m_doNotAutoCompressPictures)
    {
        return *m_doNotAutoCompressPictures;
    }
    return CT_OnOff::default_instance();
}

bool settings_element::has_forceUpgrade() const
{
    return m_has_forceUpgrade;
}

CT_Empty* settings_element::mutable_forceUpgrade()
{
    m_has_forceUpgrade = true;
    if (!m_forceUpgrade)
    {
        m_forceUpgrade = new CT_Empty();
    }
    return m_forceUpgrade;
}

const CT_Empty& settings_element::get_forceUpgrade() const
{
    if (m_forceUpgrade)
    {
        return *m_forceUpgrade;
    }
    return CT_Empty::default_instance();
}

bool settings_element::has_captions() const
{
    return m_has_captions;
}

CT_Captions* settings_element::mutable_captions()
{
    m_has_captions = true;
    if (!m_captions)
    {
        m_captions = new CT_Captions();
    }
    return m_captions;
}

const CT_Captions& settings_element::get_captions() const
{
    if (m_captions)
    {
        return *m_captions;
    }
    return CT_Captions::default_instance();
}

bool settings_element::has_readModeInkLockDown() const
{
    return m_has_readModeInkLockDown;
}

CT_ReadingModeInkLockDown* settings_element::mutable_readModeInkLockDown()
{
    m_has_readModeInkLockDown = true;
    if (!m_readModeInkLockDown)
    {
        m_readModeInkLockDown = new CT_ReadingModeInkLockDown();
    }
    return m_readModeInkLockDown;
}

const CT_ReadingModeInkLockDown& settings_element::get_readModeInkLockDown() const
{
    if (m_readModeInkLockDown)
    {
        return *m_readModeInkLockDown;
    }
    return CT_ReadingModeInkLockDown::default_instance();
}

CT_SmartTagType* settings_element::add_smartTagType()
{
    ChildGroup_3 *pChildGroup = new ChildGroup_3();
    CT_SmartTagType* pNewChild = pChildGroup->mutable_smartTagType();
    m_childGroupList_3.push_back(pChildGroup);
    return pNewChild;
}

bool settings_element::has_sl_schemaLibrary() const
{
    return m_has_sl_schemaLibrary;
}

ns_sl::CT_SchemaLibrary* settings_element::mutable_sl_schemaLibrary()
{
    m_has_sl_schemaLibrary = true;
    if (!m_sl_schemaLibrary)
    {
        m_sl_schemaLibrary = new ns_sl::CT_SchemaLibrary();
    }
    return m_sl_schemaLibrary;
}

const ns_sl::CT_SchemaLibrary& settings_element::get_sl_schemaLibrary() const
{
    if (m_sl_schemaLibrary)
    {
        return *m_sl_schemaLibrary;
    }
    return ns_sl::CT_SchemaLibrary::default_instance();
}

bool settings_element::has_shapeDefaults() const
{
    return m_has_shapeDefaults;
}

CT_ShapeDefaults* settings_element::mutable_shapeDefaults()
{
    m_has_shapeDefaults = true;
    if (!m_shapeDefaults)
    {
        m_shapeDefaults = new CT_ShapeDefaults();
    }
    return m_shapeDefaults;
}

const CT_ShapeDefaults& settings_element::get_shapeDefaults() const
{
    if (m_shapeDefaults)
    {
        return *m_shapeDefaults;
    }
    return CT_ShapeDefaults::default_instance();
}

bool settings_element::has_doNotEmbedSmartTags() const
{
    return m_has_doNotEmbedSmartTags;
}

CT_OnOff* settings_element::mutable_doNotEmbedSmartTags()
{
    m_has_doNotEmbedSmartTags = true;
    if (!m_doNotEmbedSmartTags)
    {
        m_doNotEmbedSmartTags = new CT_OnOff();
    }
    return m_doNotEmbedSmartTags;
}

const CT_OnOff& settings_element::get_doNotEmbedSmartTags() const
{
    if (m_doNotEmbedSmartTags)
    {
        return *m_doNotEmbedSmartTags;
    }
    return CT_OnOff::default_instance();
}

bool settings_element::has_decimalSymbol() const
{
    return m_has_decimalSymbol;
}

CT_String* settings_element::mutable_decimalSymbol()
{
    m_has_decimalSymbol = true;
    if (!m_decimalSymbol)
    {
        m_decimalSymbol = new CT_String();
    }
    return m_decimalSymbol;
}

const CT_String& settings_element::get_decimalSymbol() const
{
    if (m_decimalSymbol)
    {
        return *m_decimalSymbol;
    }
    return CT_String::default_instance();
}

bool settings_element::has_listSeparator() const
{
    return m_has_listSeparator;
}

CT_String* settings_element::mutable_listSeparator()
{
    m_has_listSeparator = true;
    if (!m_listSeparator)
    {
        m_listSeparator = new CT_String();
    }
    return m_listSeparator;
}

const CT_String& settings_element::get_listSeparator() const
{
    if (m_listSeparator)
    {
        return *m_listSeparator;
    }
    return CT_String::default_instance();
}

void settings_element::clear()
{
    m_has_writeProtection = false;

    if (m_writeProtection)
    {
        delete m_writeProtection;
        m_writeProtection = NULL;
    }


    m_has_view = false;

    if (m_view)
    {
        delete m_view;
        m_view = NULL;
    }


    m_has_zoom = false;

    if (m_zoom)
    {
        delete m_zoom;
        m_zoom = NULL;
    }


    m_has_removePersonalInformation = false;

    if (m_removePersonalInformation)
    {
        delete m_removePersonalInformation;
        m_removePersonalInformation = NULL;
    }


    m_has_removeDateAndTime = false;

    if (m_removeDateAndTime)
    {
        delete m_removeDateAndTime;
        m_removeDateAndTime = NULL;
    }


    m_has_doNotDisplayPageBoundaries = false;

    if (m_doNotDisplayPageBoundaries)
    {
        delete m_doNotDisplayPageBoundaries;
        m_doNotDisplayPageBoundaries = NULL;
    }


    m_has_displayBackgroundShape = false;

    if (m_displayBackgroundShape)
    {
        delete m_displayBackgroundShape;
        m_displayBackgroundShape = NULL;
    }


    m_has_printPostScriptOverText = false;

    if (m_printPostScriptOverText)
    {
        delete m_printPostScriptOverText;
        m_printPostScriptOverText = NULL;
    }


    m_has_printFractionalCharacterWidth = false;

    if (m_printFractionalCharacterWidth)
    {
        delete m_printFractionalCharacterWidth;
        m_printFractionalCharacterWidth = NULL;
    }


    m_has_printFormsData = false;

    if (m_printFormsData)
    {
        delete m_printFormsData;
        m_printFormsData = NULL;
    }


    m_has_embedTrueTypeFonts = false;

    if (m_embedTrueTypeFonts)
    {
        delete m_embedTrueTypeFonts;
        m_embedTrueTypeFonts = NULL;
    }


    m_has_embedSystemFonts = false;

    if (m_embedSystemFonts)
    {
        delete m_embedSystemFonts;
        m_embedSystemFonts = NULL;
    }


    m_has_saveSubsetFonts = false;

    if (m_saveSubsetFonts)
    {
        delete m_saveSubsetFonts;
        m_saveSubsetFonts = NULL;
    }


    m_has_saveFormsData = false;

    if (m_saveFormsData)
    {
        delete m_saveFormsData;
        m_saveFormsData = NULL;
    }


    m_has_mirrorMargins = false;

    if (m_mirrorMargins)
    {
        delete m_mirrorMargins;
        m_mirrorMargins = NULL;
    }


    m_has_alignBordersAndEdges = false;

    if (m_alignBordersAndEdges)
    {
        delete m_alignBordersAndEdges;
        m_alignBordersAndEdges = NULL;
    }


    m_has_bordersDoNotSurroundHeader = false;

    if (m_bordersDoNotSurroundHeader)
    {
        delete m_bordersDoNotSurroundHeader;
        m_bordersDoNotSurroundHeader = NULL;
    }


    m_has_bordersDoNotSurroundFooter = false;

    if (m_bordersDoNotSurroundFooter)
    {
        delete m_bordersDoNotSurroundFooter;
        m_bordersDoNotSurroundFooter = NULL;
    }


    m_has_gutterAtTop = false;

    if (m_gutterAtTop)
    {
        delete m_gutterAtTop;
        m_gutterAtTop = NULL;
    }


    m_has_hideSpellingErrors = false;

    if (m_hideSpellingErrors)
    {
        delete m_hideSpellingErrors;
        m_hideSpellingErrors = NULL;
    }


    m_has_hideGrammaticalErrors = false;

    if (m_hideGrammaticalErrors)
    {
        delete m_hideGrammaticalErrors;
        m_hideGrammaticalErrors = NULL;
    }


    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }

    m_has_proofState = false;

    if (m_proofState)
    {
        delete m_proofState;
        m_proofState = NULL;
    }


    m_has_formsDesign = false;

    if (m_formsDesign)
    {
        delete m_formsDesign;
        m_formsDesign = NULL;
    }


    m_has_attachedTemplate = false;

    if (m_attachedTemplate)
    {
        delete m_attachedTemplate;
        m_attachedTemplate = NULL;
    }


    m_has_linkStyles = false;

    if (m_linkStyles)
    {
        delete m_linkStyles;
        m_linkStyles = NULL;
    }


    m_has_stylePaneFormatFilter = false;

    if (m_stylePaneFormatFilter)
    {
        delete m_stylePaneFormatFilter;
        m_stylePaneFormatFilter = NULL;
    }


    m_has_stylePaneSortMethod = false;

    if (m_stylePaneSortMethod)
    {
        delete m_stylePaneSortMethod;
        m_stylePaneSortMethod = NULL;
    }


    m_has_documentType = false;

    if (m_documentType)
    {
        delete m_documentType;
        m_documentType = NULL;
    }


    m_has_mailMerge = false;

    if (m_mailMerge)
    {
        delete m_mailMerge;
        m_mailMerge = NULL;
    }


    m_has_revisionView = false;

    if (m_revisionView)
    {
        delete m_revisionView;
        m_revisionView = NULL;
    }


    m_has_trackRevisions = false;

    if (m_trackRevisions)
    {
        delete m_trackRevisions;
        m_trackRevisions = NULL;
    }


    m_has_doNotTrackMoves = false;

    if (m_doNotTrackMoves)
    {
        delete m_doNotTrackMoves;
        m_doNotTrackMoves = NULL;
    }


    m_has_doNotTrackFormatting = false;

    if (m_doNotTrackFormatting)
    {
        delete m_doNotTrackFormatting;
        m_doNotTrackFormatting = NULL;
    }


    m_has_documentProtection = false;

    if (m_documentProtection)
    {
        delete m_documentProtection;
        m_documentProtection = NULL;
    }


    m_has_autoFormatOverride = false;

    if (m_autoFormatOverride)
    {
        delete m_autoFormatOverride;
        m_autoFormatOverride = NULL;
    }


    m_has_styleLockTheme = false;

    if (m_styleLockTheme)
    {
        delete m_styleLockTheme;
        m_styleLockTheme = NULL;
    }


    m_has_styleLockQFSet = false;

    if (m_styleLockQFSet)
    {
        delete m_styleLockQFSet;
        m_styleLockQFSet = NULL;
    }


    m_has_defaultTabStop = false;

    if (m_defaultTabStop)
    {
        delete m_defaultTabStop;
        m_defaultTabStop = NULL;
    }


    m_has_autoHyphenation = false;

    if (m_autoHyphenation)
    {
        delete m_autoHyphenation;
        m_autoHyphenation = NULL;
    }


    m_has_consecutiveHyphenLimit = false;

    if (m_consecutiveHyphenLimit)
    {
        delete m_consecutiveHyphenLimit;
        m_consecutiveHyphenLimit = NULL;
    }


    m_has_hyphenationZone = false;

    if (m_hyphenationZone)
    {
        delete m_hyphenationZone;
        m_hyphenationZone = NULL;
    }


    m_has_doNotHyphenateCaps = false;

    if (m_doNotHyphenateCaps)
    {
        delete m_doNotHyphenateCaps;
        m_doNotHyphenateCaps = NULL;
    }


    m_has_showEnvelope = false;

    if (m_showEnvelope)
    {
        delete m_showEnvelope;
        m_showEnvelope = NULL;
    }


    m_has_summaryLength = false;

    if (m_summaryLength)
    {
        delete m_summaryLength;
        m_summaryLength = NULL;
    }


    m_has_clickAndTypeStyle = false;

    if (m_clickAndTypeStyle)
    {
        delete m_clickAndTypeStyle;
        m_clickAndTypeStyle = NULL;
    }


    m_has_defaultTableStyle = false;

    if (m_defaultTableStyle)
    {
        delete m_defaultTableStyle;
        m_defaultTableStyle = NULL;
    }


    m_has_evenAndOddHeaders = false;

    if (m_evenAndOddHeaders)
    {
        delete m_evenAndOddHeaders;
        m_evenAndOddHeaders = NULL;
    }


    m_has_bookFoldRevPrinting = false;

    if (m_bookFoldRevPrinting)
    {
        delete m_bookFoldRevPrinting;
        m_bookFoldRevPrinting = NULL;
    }


    m_has_bookFoldPrinting = false;

    if (m_bookFoldPrinting)
    {
        delete m_bookFoldPrinting;
        m_bookFoldPrinting = NULL;
    }


    m_has_bookFoldPrintingSheets = false;

    if (m_bookFoldPrintingSheets)
    {
        delete m_bookFoldPrintingSheets;
        m_bookFoldPrintingSheets = NULL;
    }


    m_has_drawingGridHorizontalSpacing = false;

    if (m_drawingGridHorizontalSpacing)
    {
        delete m_drawingGridHorizontalSpacing;
        m_drawingGridHorizontalSpacing = NULL;
    }


    m_has_drawingGridVerticalSpacing = false;

    if (m_drawingGridVerticalSpacing)
    {
        delete m_drawingGridVerticalSpacing;
        m_drawingGridVerticalSpacing = NULL;
    }


    m_has_displayHorizontalDrawingGridEvery = false;

    if (m_displayHorizontalDrawingGridEvery)
    {
        delete m_displayHorizontalDrawingGridEvery;
        m_displayHorizontalDrawingGridEvery = NULL;
    }


    m_has_displayVerticalDrawingGridEvery = false;

    if (m_displayVerticalDrawingGridEvery)
    {
        delete m_displayVerticalDrawingGridEvery;
        m_displayVerticalDrawingGridEvery = NULL;
    }


    m_has_doNotUseMarginsForDrawingGridOrigin = false;

    if (m_doNotUseMarginsForDrawingGridOrigin)
    {
        delete m_doNotUseMarginsForDrawingGridOrigin;
        m_doNotUseMarginsForDrawingGridOrigin = NULL;
    }


    m_has_drawingGridHorizontalOrigin = false;

    if (m_drawingGridHorizontalOrigin)
    {
        delete m_drawingGridHorizontalOrigin;
        m_drawingGridHorizontalOrigin = NULL;
    }


    m_has_drawingGridVerticalOrigin = false;

    if (m_drawingGridVerticalOrigin)
    {
        delete m_drawingGridVerticalOrigin;
        m_drawingGridVerticalOrigin = NULL;
    }


    m_has_doNotShadeFormData = false;

    if (m_doNotShadeFormData)
    {
        delete m_doNotShadeFormData;
        m_doNotShadeFormData = NULL;
    }


    m_has_noPunctuationKerning = false;

    if (m_noPunctuationKerning)
    {
        delete m_noPunctuationKerning;
        m_noPunctuationKerning = NULL;
    }


    m_has_characterSpacingControl = false;

    if (m_characterSpacingControl)
    {
        delete m_characterSpacingControl;
        m_characterSpacingControl = NULL;
    }


    m_has_printTwoOnOne = false;

    if (m_printTwoOnOne)
    {
        delete m_printTwoOnOne;
        m_printTwoOnOne = NULL;
    }


    m_has_strictFirstAndLastChars = false;

    if (m_strictFirstAndLastChars)
    {
        delete m_strictFirstAndLastChars;
        m_strictFirstAndLastChars = NULL;
    }


    m_has_noLineBreaksAfter = false;

    if (m_noLineBreaksAfter)
    {
        delete m_noLineBreaksAfter;
        m_noLineBreaksAfter = NULL;
    }


    m_has_noLineBreaksBefore = false;

    if (m_noLineBreaksBefore)
    {
        delete m_noLineBreaksBefore;
        m_noLineBreaksBefore = NULL;
    }


    m_has_savePreviewPicture = false;

    if (m_savePreviewPicture)
    {
        delete m_savePreviewPicture;
        m_savePreviewPicture = NULL;
    }


    m_has_doNotValidateAgainstSchema = false;

    if (m_doNotValidateAgainstSchema)
    {
        delete m_doNotValidateAgainstSchema;
        m_doNotValidateAgainstSchema = NULL;
    }


    m_has_saveInvalidXml = false;

    if (m_saveInvalidXml)
    {
        delete m_saveInvalidXml;
        m_saveInvalidXml = NULL;
    }


    m_has_ignoreMixedContent = false;

    if (m_ignoreMixedContent)
    {
        delete m_ignoreMixedContent;
        m_ignoreMixedContent = NULL;
    }


    m_has_alwaysShowPlaceholderText = false;

    if (m_alwaysShowPlaceholderText)
    {
        delete m_alwaysShowPlaceholderText;
        m_alwaysShowPlaceholderText = NULL;
    }


    m_has_doNotDemarcateInvalidXml = false;

    if (m_doNotDemarcateInvalidXml)
    {
        delete m_doNotDemarcateInvalidXml;
        m_doNotDemarcateInvalidXml = NULL;
    }


    m_has_saveXmlDataOnly = false;

    if (m_saveXmlDataOnly)
    {
        delete m_saveXmlDataOnly;
        m_saveXmlDataOnly = NULL;
    }


    m_has_useXSLTWhenSaving = false;

    if (m_useXSLTWhenSaving)
    {
        delete m_useXSLTWhenSaving;
        m_useXSLTWhenSaving = NULL;
    }


    m_has_saveThroughXslt = false;

    if (m_saveThroughXslt)
    {
        delete m_saveThroughXslt;
        m_saveThroughXslt = NULL;
    }


    m_has_showXMLTags = false;

    if (m_showXMLTags)
    {
        delete m_showXMLTags;
        m_showXMLTags = NULL;
    }


    m_has_alwaysMergeEmptyNamespace = false;

    if (m_alwaysMergeEmptyNamespace)
    {
        delete m_alwaysMergeEmptyNamespace;
        m_alwaysMergeEmptyNamespace = NULL;
    }


    m_has_updateFields = false;

    if (m_updateFields)
    {
        delete m_updateFields;
        m_updateFields = NULL;
    }


    m_has_hdrShapeDefaults = false;

    if (m_hdrShapeDefaults)
    {
        delete m_hdrShapeDefaults;
        m_hdrShapeDefaults = NULL;
    }


    m_has_footnotePr = false;

    if (m_footnotePr)
    {
        delete m_footnotePr;
        m_footnotePr = NULL;
    }


    m_has_endnotePr = false;

    if (m_endnotePr)
    {
        delete m_endnotePr;
        m_endnotePr = NULL;
    }


    m_has_compat = false;

    if (m_compat)
    {
        delete m_compat;
        m_compat = NULL;
    }


    m_has_docVars = false;

    if (m_docVars)
    {
        delete m_docVars;
        m_docVars = NULL;
    }


    m_has_rsids = false;

    if (m_rsids)
    {
        delete m_rsids;
        m_rsids = NULL;
    }


    m_has_m_mathPr = false;

    if (m_m_mathPr)
    {
        delete m_m_mathPr;
        m_m_mathPr = NULL;
    }


    {
        vector<ChildGroup_2*>::iterator iter;
        for (iter = m_childGroupList_2.begin(); iter != m_childGroupList_2.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_2.clear();
    }

    m_has_themeFontLang = false;

    if (m_themeFontLang)
    {
        delete m_themeFontLang;
        m_themeFontLang = NULL;
    }


    m_has_clrSchemeMapping = false;

    if (m_clrSchemeMapping)
    {
        delete m_clrSchemeMapping;
        m_clrSchemeMapping = NULL;
    }


    m_has_doNotIncludeSubdocsInStats = false;

    if (m_doNotIncludeSubdocsInStats)
    {
        delete m_doNotIncludeSubdocsInStats;
        m_doNotIncludeSubdocsInStats = NULL;
    }


    m_has_doNotAutoCompressPictures = false;

    if (m_doNotAutoCompressPictures)
    {
        delete m_doNotAutoCompressPictures;
        m_doNotAutoCompressPictures = NULL;
    }


    m_has_forceUpgrade = false;

    if (m_forceUpgrade)
    {
        delete m_forceUpgrade;
        m_forceUpgrade = NULL;
    }


    m_has_captions = false;

    if (m_captions)
    {
        delete m_captions;
        m_captions = NULL;
    }


    m_has_readModeInkLockDown = false;

    if (m_readModeInkLockDown)
    {
        delete m_readModeInkLockDown;
        m_readModeInkLockDown = NULL;
    }


    {
        vector<ChildGroup_3*>::iterator iter;
        for (iter = m_childGroupList_3.begin(); iter != m_childGroupList_3.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_3.clear();
    }

    m_has_sl_schemaLibrary = false;

    if (m_sl_schemaLibrary)
    {
        delete m_sl_schemaLibrary;
        m_sl_schemaLibrary = NULL;
    }


    m_has_shapeDefaults = false;

    if (m_shapeDefaults)
    {
        delete m_shapeDefaults;
        m_shapeDefaults = NULL;
    }


    m_has_doNotEmbedSmartTags = false;

    if (m_doNotEmbedSmartTags)
    {
        delete m_doNotEmbedSmartTags;
        m_doNotEmbedSmartTags = NULL;
    }


    m_has_decimalSymbol = false;

    if (m_decimalSymbol)
    {
        delete m_decimalSymbol;
        m_decimalSymbol = NULL;
    }


    m_has_listSeparator = false;

    if (m_listSeparator)
    {
        delete m_listSeparator;
        m_listSeparator = NULL;
    }

}

void settings_element::toXml(std::ostream& _outStream) const
{
    _outStream << "<w:settings";

    _outStream << " " << "xmlns:w=\"http://schemas.openxmlformats.org/wordprocessingml/2006/main\"";
    _outStream << " " << "xmlns:sl=\"http://schemas.openxmlformats.org/schemaLibrary/2006/main\"";
    _outStream << " " << "xmlns:s=\"http://schemas.openxmlformats.org/officeDocument/2006/sharedTypes\"";
    _outStream << " " << "xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\"";
    _outStream << " " << "xmlns:m=\"http://schemas.openxmlformats.org/officeDocument/2006/math\"";
    _outStream << " " << "xmlns:wp=\"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing\"";
    _outStream << " " << "xmlns:v=\"urn:schemas-microsoft-com:vml\"";
    _outStream << " " << "xmlns:o=\"urn:schemas-microsoft-com:office:office\"";

    _outStream << ">";


    if (m_has_writeProtection)
    {
        m_writeProtection->toXmlElem("w:writeProtection", "", _outStream);
    }


    if (m_has_view)
    {
        m_view->toXmlElem("w:view", "", _outStream);
    }


    if (m_has_zoom)
    {
        m_zoom->toXmlElem("w:zoom", "", _outStream);
    }


    if (m_has_removePersonalInformation)
    {
        m_removePersonalInformation->toXmlElem("w:removePersonalInformation", "", _outStream);
    }


    if (m_has_removeDateAndTime)
    {
        m_removeDateAndTime->toXmlElem("w:removeDateAndTime", "", _outStream);
    }


    if (m_has_doNotDisplayPageBoundaries)
    {
        m_doNotDisplayPageBoundaries->toXmlElem("w:doNotDisplayPageBoundaries", "", _outStream);
    }


    if (m_has_displayBackgroundShape)
    {
        m_displayBackgroundShape->toXmlElem("w:displayBackgroundShape", "", _outStream);
    }


    if (m_has_printPostScriptOverText)
    {
        m_printPostScriptOverText->toXmlElem("w:printPostScriptOverText", "", _outStream);
    }


    if (m_has_printFractionalCharacterWidth)
    {
        m_printFractionalCharacterWidth->toXmlElem("w:printFractionalCharacterWidth", "", _outStream);
    }


    if (m_has_printFormsData)
    {
        m_printFormsData->toXmlElem("w:printFormsData", "", _outStream);
    }


    if (m_has_embedTrueTypeFonts)
    {
        m_embedTrueTypeFonts->toXmlElem("w:embedTrueTypeFonts", "", _outStream);
    }


    if (m_has_embedSystemFonts)
    {
        m_embedSystemFonts->toXmlElem("w:embedSystemFonts", "", _outStream);
    }


    if (m_has_saveSubsetFonts)
    {
        m_saveSubsetFonts->toXmlElem("w:saveSubsetFonts", "", _outStream);
    }


    if (m_has_saveFormsData)
    {
        m_saveFormsData->toXmlElem("w:saveFormsData", "", _outStream);
    }


    if (m_has_mirrorMargins)
    {
        m_mirrorMargins->toXmlElem("w:mirrorMargins", "", _outStream);
    }


    if (m_has_alignBordersAndEdges)
    {
        m_alignBordersAndEdges->toXmlElem("w:alignBordersAndEdges", "", _outStream);
    }


    if (m_has_bordersDoNotSurroundHeader)
    {
        m_bordersDoNotSurroundHeader->toXmlElem("w:bordersDoNotSurroundHeader", "", _outStream);
    }


    if (m_has_bordersDoNotSurroundFooter)
    {
        m_bordersDoNotSurroundFooter->toXmlElem("w:bordersDoNotSurroundFooter", "", _outStream);
    }


    if (m_has_gutterAtTop)
    {
        m_gutterAtTop->toXmlElem("w:gutterAtTop", "", _outStream);
    }


    if (m_has_hideSpellingErrors)
    {
        m_hideSpellingErrors->toXmlElem("w:hideSpellingErrors", "", _outStream);
    }


    if (m_has_hideGrammaticalErrors)
    {
        m_hideGrammaticalErrors->toXmlElem("w:hideGrammaticalErrors", "", _outStream);
    }

    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_activeWritingStyle())
            {
                (*iter)->get_activeWritingStyle().toXmlElem("w:activeWritingStyle", "", _outStream);
            }


        }
    }


    if (m_has_proofState)
    {
        m_proofState->toXmlElem("w:proofState", "", _outStream);
    }


    if (m_has_formsDesign)
    {
        m_formsDesign->toXmlElem("w:formsDesign", "", _outStream);
    }


    if (m_has_attachedTemplate)
    {
        m_attachedTemplate->toXmlElem("w:attachedTemplate", "", _outStream);
    }


    if (m_has_linkStyles)
    {
        m_linkStyles->toXmlElem("w:linkStyles", "", _outStream);
    }


    if (m_has_stylePaneFormatFilter)
    {
        m_stylePaneFormatFilter->toXmlElem("w:stylePaneFormatFilter", "", _outStream);
    }


    if (m_has_stylePaneSortMethod)
    {
        m_stylePaneSortMethod->toXmlElem("w:stylePaneSortMethod", "", _outStream);
    }


    if (m_has_documentType)
    {
        m_documentType->toXmlElem("w:documentType", "", _outStream);
    }


    if (m_has_mailMerge)
    {
        m_mailMerge->toXmlElem("w:mailMerge", "", _outStream);
    }


    if (m_has_revisionView)
    {
        m_revisionView->toXmlElem("w:revisionView", "", _outStream);
    }


    if (m_has_trackRevisions)
    {
        m_trackRevisions->toXmlElem("w:trackRevisions", "", _outStream);
    }


    if (m_has_doNotTrackMoves)
    {
        m_doNotTrackMoves->toXmlElem("w:doNotTrackMoves", "", _outStream);
    }


    if (m_has_doNotTrackFormatting)
    {
        m_doNotTrackFormatting->toXmlElem("w:doNotTrackFormatting", "", _outStream);
    }


    if (m_has_documentProtection)
    {
        m_documentProtection->toXmlElem("w:documentProtection", "", _outStream);
    }


    if (m_has_autoFormatOverride)
    {
        m_autoFormatOverride->toXmlElem("w:autoFormatOverride", "", _outStream);
    }


    if (m_has_styleLockTheme)
    {
        m_styleLockTheme->toXmlElem("w:styleLockTheme", "", _outStream);
    }


    if (m_has_styleLockQFSet)
    {
        m_styleLockQFSet->toXmlElem("w:styleLockQFSet", "", _outStream);
    }


    if (m_has_defaultTabStop)
    {
        m_defaultTabStop->toXmlElem("w:defaultTabStop", "", _outStream);
    }


    if (m_has_autoHyphenation)
    {
        m_autoHyphenation->toXmlElem("w:autoHyphenation", "", _outStream);
    }


    if (m_has_consecutiveHyphenLimit)
    {
        m_consecutiveHyphenLimit->toXmlElem("w:consecutiveHyphenLimit", "", _outStream);
    }


    if (m_has_hyphenationZone)
    {
        m_hyphenationZone->toXmlElem("w:hyphenationZone", "", _outStream);
    }


    if (m_has_doNotHyphenateCaps)
    {
        m_doNotHyphenateCaps->toXmlElem("w:doNotHyphenateCaps", "", _outStream);
    }


    if (m_has_showEnvelope)
    {
        m_showEnvelope->toXmlElem("w:showEnvelope", "", _outStream);
    }


    if (m_has_summaryLength)
    {
        m_summaryLength->toXmlElem("w:summaryLength", "", _outStream);
    }


    if (m_has_clickAndTypeStyle)
    {
        m_clickAndTypeStyle->toXmlElem("w:clickAndTypeStyle", "", _outStream);
    }


    if (m_has_defaultTableStyle)
    {
        m_defaultTableStyle->toXmlElem("w:defaultTableStyle", "", _outStream);
    }


    if (m_has_evenAndOddHeaders)
    {
        m_evenAndOddHeaders->toXmlElem("w:evenAndOddHeaders", "", _outStream);
    }


    if (m_has_bookFoldRevPrinting)
    {
        m_bookFoldRevPrinting->toXmlElem("w:bookFoldRevPrinting", "", _outStream);
    }


    if (m_has_bookFoldPrinting)
    {
        m_bookFoldPrinting->toXmlElem("w:bookFoldPrinting", "", _outStream);
    }


    if (m_has_bookFoldPrintingSheets)
    {
        m_bookFoldPrintingSheets->toXmlElem("w:bookFoldPrintingSheets", "", _outStream);
    }


    if (m_has_drawingGridHorizontalSpacing)
    {
        m_drawingGridHorizontalSpacing->toXmlElem("w:drawingGridHorizontalSpacing", "", _outStream);
    }


    if (m_has_drawingGridVerticalSpacing)
    {
        m_drawingGridVerticalSpacing->toXmlElem("w:drawingGridVerticalSpacing", "", _outStream);
    }


    if (m_has_displayHorizontalDrawingGridEvery)
    {
        m_displayHorizontalDrawingGridEvery->toXmlElem("w:displayHorizontalDrawingGridEvery", "", _outStream);
    }


    if (m_has_displayVerticalDrawingGridEvery)
    {
        m_displayVerticalDrawingGridEvery->toXmlElem("w:displayVerticalDrawingGridEvery", "", _outStream);
    }


    if (m_has_doNotUseMarginsForDrawingGridOrigin)
    {
        m_doNotUseMarginsForDrawingGridOrigin->toXmlElem("w:doNotUseMarginsForDrawingGridOrigin", "", _outStream);
    }


    if (m_has_drawingGridHorizontalOrigin)
    {
        m_drawingGridHorizontalOrigin->toXmlElem("w:drawingGridHorizontalOrigin", "", _outStream);
    }


    if (m_has_drawingGridVerticalOrigin)
    {
        m_drawingGridVerticalOrigin->toXmlElem("w:drawingGridVerticalOrigin", "", _outStream);
    }


    if (m_has_doNotShadeFormData)
    {
        m_doNotShadeFormData->toXmlElem("w:doNotShadeFormData", "", _outStream);
    }


    if (m_has_noPunctuationKerning)
    {
        m_noPunctuationKerning->toXmlElem("w:noPunctuationKerning", "", _outStream);
    }


    if (m_has_characterSpacingControl)
    {
        m_characterSpacingControl->toXmlElem("w:characterSpacingControl", "", _outStream);
    }


    if (m_has_printTwoOnOne)
    {
        m_printTwoOnOne->toXmlElem("w:printTwoOnOne", "", _outStream);
    }


    if (m_has_strictFirstAndLastChars)
    {
        m_strictFirstAndLastChars->toXmlElem("w:strictFirstAndLastChars", "", _outStream);
    }


    if (m_has_noLineBreaksAfter)
    {
        m_noLineBreaksAfter->toXmlElem("w:noLineBreaksAfter", "", _outStream);
    }


    if (m_has_noLineBreaksBefore)
    {
        m_noLineBreaksBefore->toXmlElem("w:noLineBreaksBefore", "", _outStream);
    }


    if (m_has_savePreviewPicture)
    {
        m_savePreviewPicture->toXmlElem("w:savePreviewPicture", "", _outStream);
    }


    if (m_has_doNotValidateAgainstSchema)
    {
        m_doNotValidateAgainstSchema->toXmlElem("w:doNotValidateAgainstSchema", "", _outStream);
    }


    if (m_has_saveInvalidXml)
    {
        m_saveInvalidXml->toXmlElem("w:saveInvalidXml", "", _outStream);
    }


    if (m_has_ignoreMixedContent)
    {
        m_ignoreMixedContent->toXmlElem("w:ignoreMixedContent", "", _outStream);
    }


    if (m_has_alwaysShowPlaceholderText)
    {
        m_alwaysShowPlaceholderText->toXmlElem("w:alwaysShowPlaceholderText", "", _outStream);
    }


    if (m_has_doNotDemarcateInvalidXml)
    {
        m_doNotDemarcateInvalidXml->toXmlElem("w:doNotDemarcateInvalidXml", "", _outStream);
    }


    if (m_has_saveXmlDataOnly)
    {
        m_saveXmlDataOnly->toXmlElem("w:saveXmlDataOnly", "", _outStream);
    }


    if (m_has_useXSLTWhenSaving)
    {
        m_useXSLTWhenSaving->toXmlElem("w:useXSLTWhenSaving", "", _outStream);
    }


    if (m_has_saveThroughXslt)
    {
        m_saveThroughXslt->toXmlElem("w:saveThroughXslt", "", _outStream);
    }


    if (m_has_showXMLTags)
    {
        m_showXMLTags->toXmlElem("w:showXMLTags", "", _outStream);
    }


    if (m_has_alwaysMergeEmptyNamespace)
    {
        m_alwaysMergeEmptyNamespace->toXmlElem("w:alwaysMergeEmptyNamespace", "", _outStream);
    }


    if (m_has_updateFields)
    {
        m_updateFields->toXmlElem("w:updateFields", "", _outStream);
    }


    if (m_has_hdrShapeDefaults)
    {
        m_hdrShapeDefaults->toXmlElem("w:hdrShapeDefaults", "", _outStream);
    }


    if (m_has_footnotePr)
    {
        m_footnotePr->toXmlElem("w:footnotePr", "", _outStream);
    }


    if (m_has_endnotePr)
    {
        m_endnotePr->toXmlElem("w:endnotePr", "", _outStream);
    }


    if (m_has_compat)
    {
        m_compat->toXmlElem("w:compat", "", _outStream);
    }


    if (m_has_docVars)
    {
        m_docVars->toXmlElem("w:docVars", "", _outStream);
    }


    if (m_has_rsids)
    {
        m_rsids->toXmlElem("w:rsids", "", _outStream);
    }


    if (m_has_m_mathPr)
    {
        m_m_mathPr->toXmlElem("m:mathPr", "", _outStream);
    }

    {
        vector<ChildGroup_2*>::const_iterator iter;
        for (iter = m_childGroupList_2.begin(); iter != m_childGroupList_2.end(); ++iter)
        {
            if ((*iter)->has_attachedSchema())
            {
                (*iter)->get_attachedSchema().toXmlElem("w:attachedSchema", "", _outStream);
            }


        }
    }


    if (m_has_themeFontLang)
    {
        m_themeFontLang->toXmlElem("w:themeFontLang", "", _outStream);
    }


    if (m_has_clrSchemeMapping)
    {
        m_clrSchemeMapping->toXmlElem("w:clrSchemeMapping", "", _outStream);
    }


    if (m_has_doNotIncludeSubdocsInStats)
    {
        m_doNotIncludeSubdocsInStats->toXmlElem("w:doNotIncludeSubdocsInStats", "", _outStream);
    }


    if (m_has_doNotAutoCompressPictures)
    {
        m_doNotAutoCompressPictures->toXmlElem("w:doNotAutoCompressPictures", "", _outStream);
    }


    if (m_has_forceUpgrade)
    {
        m_forceUpgrade->toXmlElem("w:forceUpgrade", "", _outStream);
    }


    if (m_has_captions)
    {
        m_captions->toXmlElem("w:captions", "", _outStream);
    }


    if (m_has_readModeInkLockDown)
    {
        m_readModeInkLockDown->toXmlElem("w:readModeInkLockDown", "", _outStream);
    }

    {
        vector<ChildGroup_3*>::const_iterator iter;
        for (iter = m_childGroupList_3.begin(); iter != m_childGroupList_3.end(); ++iter)
        {
            if ((*iter)->has_smartTagType())
            {
                (*iter)->get_smartTagType().toXmlElem("w:smartTagType", "", _outStream);
            }


        }
    }


    if (m_has_sl_schemaLibrary)
    {
        m_sl_schemaLibrary->toXmlElem("sl:schemaLibrary", "", _outStream);
    }


    if (m_has_shapeDefaults)
    {
        m_shapeDefaults->toXmlElem("w:shapeDefaults", "", _outStream);
    }


    if (m_has_doNotEmbedSmartTags)
    {
        m_doNotEmbedSmartTags->toXmlElem("w:doNotEmbedSmartTags", "", _outStream);
    }


    if (m_has_decimalSymbol)
    {
        m_decimalSymbol->toXmlElem("w:decimalSymbol", "", _outStream);
    }


    if (m_has_listSeparator)
    {
        m_listSeparator->toXmlElem("w:listSeparator", "", _outStream);
    }

    _outStream << "</w:settings>";
}

const settings_element& settings_element::default_instance()
{
    if (!settings_element::default_instance_)
    {
        settings_element::default_instance_ = new settings_element();
    }
    return *settings_element::default_instance_;
}


// settings_element::ChildGroup_1
settings_element::ChildGroup_1::ChildGroup_1()
    :m_has_activeWritingStyle(false),
     m_activeWritingStyle(NULL)
{
}
bool settings_element::ChildGroup_1::has_activeWritingStyle() const
{
    return m_has_activeWritingStyle;
}

CT_WritingStyle* settings_element::ChildGroup_1::mutable_activeWritingStyle()
{

    m_has_activeWritingStyle = true;
    if (!m_activeWritingStyle)
    {
        m_activeWritingStyle = new CT_WritingStyle();
    }
    return m_activeWritingStyle;
}

const CT_WritingStyle& settings_element::ChildGroup_1::get_activeWritingStyle() const
{
    if (m_activeWritingStyle)
    {
        return *m_activeWritingStyle;
    }
    return CT_WritingStyle::default_instance();
}


// settings_element::ChildGroup_2
settings_element::ChildGroup_2::ChildGroup_2()
    :m_has_attachedSchema(false),
     m_attachedSchema(NULL)
{
}
bool settings_element::ChildGroup_2::has_attachedSchema() const
{
    return m_has_attachedSchema;
}

CT_String* settings_element::ChildGroup_2::mutable_attachedSchema()
{

    m_has_attachedSchema = true;
    if (!m_attachedSchema)
    {
        m_attachedSchema = new CT_String();
    }
    return m_attachedSchema;
}

const CT_String& settings_element::ChildGroup_2::get_attachedSchema() const
{
    if (m_attachedSchema)
    {
        return *m_attachedSchema;
    }
    return CT_String::default_instance();
}


// settings_element::ChildGroup_3
settings_element::ChildGroup_3::ChildGroup_3()
    :m_has_smartTagType(false),
     m_smartTagType(NULL)
{
}
bool settings_element::ChildGroup_3::has_smartTagType() const
{
    return m_has_smartTagType;
}

CT_SmartTagType* settings_element::ChildGroup_3::mutable_smartTagType()
{

    m_has_smartTagType = true;
    if (!m_smartTagType)
    {
        m_smartTagType = new CT_SmartTagType();
    }
    return m_smartTagType;
}

const CT_SmartTagType& settings_element::ChildGroup_3::get_smartTagType() const
{
    if (m_smartTagType)
    {
        return *m_smartTagType;
    }
    return CT_SmartTagType::default_instance();
}

settings_element* settings_element::default_instance_ = NULL;

// webSettings_element
webSettings_element::webSettings_element()
    :m_has_frameset(false),
     m_frameset(NULL),
     m_has_divs(false),
     m_divs(NULL),
     m_has_encoding(false),
     m_encoding(NULL),
     m_has_optimizeForBrowser(false),
     m_optimizeForBrowser(NULL),
     m_has_relyOnVML(false),
     m_relyOnVML(NULL),
     m_has_allowPNG(false),
     m_allowPNG(NULL),
     m_has_doNotRelyOnCSS(false),
     m_doNotRelyOnCSS(NULL),
     m_has_doNotSaveAsSingleFile(false),
     m_doNotSaveAsSingleFile(NULL),
     m_has_doNotOrganizeInFolder(false),
     m_doNotOrganizeInFolder(NULL),
     m_has_doNotUseLongFileNames(false),
     m_doNotUseLongFileNames(NULL),
     m_has_pixelsPerInch(false),
     m_pixelsPerInch(NULL),
     m_has_targetScreenSz(false),
     m_targetScreenSz(NULL),
     m_has_saveSmartTagsAsXml(false),
     m_saveSmartTagsAsXml(NULL)
{
}
webSettings_element::~webSettings_element()
{
    clear();
}
bool webSettings_element::has_frameset() const
{
    return m_has_frameset;
}

CT_Frameset* webSettings_element::mutable_frameset()
{
    m_has_frameset = true;
    if (!m_frameset)
    {
        m_frameset = new CT_Frameset();
    }
    return m_frameset;
}

const CT_Frameset& webSettings_element::get_frameset() const
{
    if (m_frameset)
    {
        return *m_frameset;
    }
    return CT_Frameset::default_instance();
}

bool webSettings_element::has_divs() const
{
    return m_has_divs;
}

CT_Divs* webSettings_element::mutable_divs()
{
    m_has_divs = true;
    if (!m_divs)
    {
        m_divs = new CT_Divs();
    }
    return m_divs;
}

const CT_Divs& webSettings_element::get_divs() const
{
    if (m_divs)
    {
        return *m_divs;
    }
    return CT_Divs::default_instance();
}

bool webSettings_element::has_encoding() const
{
    return m_has_encoding;
}

CT_String* webSettings_element::mutable_encoding()
{
    m_has_encoding = true;
    if (!m_encoding)
    {
        m_encoding = new CT_String();
    }
    return m_encoding;
}

const CT_String& webSettings_element::get_encoding() const
{
    if (m_encoding)
    {
        return *m_encoding;
    }
    return CT_String::default_instance();
}

bool webSettings_element::has_optimizeForBrowser() const
{
    return m_has_optimizeForBrowser;
}

CT_OptimizeForBrowser* webSettings_element::mutable_optimizeForBrowser()
{
    m_has_optimizeForBrowser = true;
    if (!m_optimizeForBrowser)
    {
        m_optimizeForBrowser = new CT_OptimizeForBrowser();
    }
    return m_optimizeForBrowser;
}

const CT_OptimizeForBrowser& webSettings_element::get_optimizeForBrowser() const
{
    if (m_optimizeForBrowser)
    {
        return *m_optimizeForBrowser;
    }
    return CT_OptimizeForBrowser::default_instance();
}

bool webSettings_element::has_relyOnVML() const
{
    return m_has_relyOnVML;
}

CT_OnOff* webSettings_element::mutable_relyOnVML()
{
    m_has_relyOnVML = true;
    if (!m_relyOnVML)
    {
        m_relyOnVML = new CT_OnOff();
    }
    return m_relyOnVML;
}

const CT_OnOff& webSettings_element::get_relyOnVML() const
{
    if (m_relyOnVML)
    {
        return *m_relyOnVML;
    }
    return CT_OnOff::default_instance();
}

bool webSettings_element::has_allowPNG() const
{
    return m_has_allowPNG;
}

CT_OnOff* webSettings_element::mutable_allowPNG()
{
    m_has_allowPNG = true;
    if (!m_allowPNG)
    {
        m_allowPNG = new CT_OnOff();
    }
    return m_allowPNG;
}

const CT_OnOff& webSettings_element::get_allowPNG() const
{
    if (m_allowPNG)
    {
        return *m_allowPNG;
    }
    return CT_OnOff::default_instance();
}

bool webSettings_element::has_doNotRelyOnCSS() const
{
    return m_has_doNotRelyOnCSS;
}

CT_OnOff* webSettings_element::mutable_doNotRelyOnCSS()
{
    m_has_doNotRelyOnCSS = true;
    if (!m_doNotRelyOnCSS)
    {
        m_doNotRelyOnCSS = new CT_OnOff();
    }
    return m_doNotRelyOnCSS;
}

const CT_OnOff& webSettings_element::get_doNotRelyOnCSS() const
{
    if (m_doNotRelyOnCSS)
    {
        return *m_doNotRelyOnCSS;
    }
    return CT_OnOff::default_instance();
}

bool webSettings_element::has_doNotSaveAsSingleFile() const
{
    return m_has_doNotSaveAsSingleFile;
}

CT_OnOff* webSettings_element::mutable_doNotSaveAsSingleFile()
{
    m_has_doNotSaveAsSingleFile = true;
    if (!m_doNotSaveAsSingleFile)
    {
        m_doNotSaveAsSingleFile = new CT_OnOff();
    }
    return m_doNotSaveAsSingleFile;
}

const CT_OnOff& webSettings_element::get_doNotSaveAsSingleFile() const
{
    if (m_doNotSaveAsSingleFile)
    {
        return *m_doNotSaveAsSingleFile;
    }
    return CT_OnOff::default_instance();
}

bool webSettings_element::has_doNotOrganizeInFolder() const
{
    return m_has_doNotOrganizeInFolder;
}

CT_OnOff* webSettings_element::mutable_doNotOrganizeInFolder()
{
    m_has_doNotOrganizeInFolder = true;
    if (!m_doNotOrganizeInFolder)
    {
        m_doNotOrganizeInFolder = new CT_OnOff();
    }
    return m_doNotOrganizeInFolder;
}

const CT_OnOff& webSettings_element::get_doNotOrganizeInFolder() const
{
    if (m_doNotOrganizeInFolder)
    {
        return *m_doNotOrganizeInFolder;
    }
    return CT_OnOff::default_instance();
}

bool webSettings_element::has_doNotUseLongFileNames() const
{
    return m_has_doNotUseLongFileNames;
}

CT_OnOff* webSettings_element::mutable_doNotUseLongFileNames()
{
    m_has_doNotUseLongFileNames = true;
    if (!m_doNotUseLongFileNames)
    {
        m_doNotUseLongFileNames = new CT_OnOff();
    }
    return m_doNotUseLongFileNames;
}

const CT_OnOff& webSettings_element::get_doNotUseLongFileNames() const
{
    if (m_doNotUseLongFileNames)
    {
        return *m_doNotUseLongFileNames;
    }
    return CT_OnOff::default_instance();
}

bool webSettings_element::has_pixelsPerInch() const
{
    return m_has_pixelsPerInch;
}

CT_DecimalNumber* webSettings_element::mutable_pixelsPerInch()
{
    m_has_pixelsPerInch = true;
    if (!m_pixelsPerInch)
    {
        m_pixelsPerInch = new CT_DecimalNumber();
    }
    return m_pixelsPerInch;
}

const CT_DecimalNumber& webSettings_element::get_pixelsPerInch() const
{
    if (m_pixelsPerInch)
    {
        return *m_pixelsPerInch;
    }
    return CT_DecimalNumber::default_instance();
}

bool webSettings_element::has_targetScreenSz() const
{
    return m_has_targetScreenSz;
}

CT_TargetScreenSz* webSettings_element::mutable_targetScreenSz()
{
    m_has_targetScreenSz = true;
    if (!m_targetScreenSz)
    {
        m_targetScreenSz = new CT_TargetScreenSz();
    }
    return m_targetScreenSz;
}

const CT_TargetScreenSz& webSettings_element::get_targetScreenSz() const
{
    if (m_targetScreenSz)
    {
        return *m_targetScreenSz;
    }
    return CT_TargetScreenSz::default_instance();
}

bool webSettings_element::has_saveSmartTagsAsXml() const
{
    return m_has_saveSmartTagsAsXml;
}

CT_OnOff* webSettings_element::mutable_saveSmartTagsAsXml()
{
    m_has_saveSmartTagsAsXml = true;
    if (!m_saveSmartTagsAsXml)
    {
        m_saveSmartTagsAsXml = new CT_OnOff();
    }
    return m_saveSmartTagsAsXml;
}

const CT_OnOff& webSettings_element::get_saveSmartTagsAsXml() const
{
    if (m_saveSmartTagsAsXml)
    {
        return *m_saveSmartTagsAsXml;
    }
    return CT_OnOff::default_instance();
}

void webSettings_element::clear()
{
    m_has_frameset = false;

    if (m_frameset)
    {
        delete m_frameset;
        m_frameset = NULL;
    }


    m_has_divs = false;

    if (m_divs)
    {
        delete m_divs;
        m_divs = NULL;
    }


    m_has_encoding = false;

    if (m_encoding)
    {
        delete m_encoding;
        m_encoding = NULL;
    }


    m_has_optimizeForBrowser = false;

    if (m_optimizeForBrowser)
    {
        delete m_optimizeForBrowser;
        m_optimizeForBrowser = NULL;
    }


    m_has_relyOnVML = false;

    if (m_relyOnVML)
    {
        delete m_relyOnVML;
        m_relyOnVML = NULL;
    }


    m_has_allowPNG = false;

    if (m_allowPNG)
    {
        delete m_allowPNG;
        m_allowPNG = NULL;
    }


    m_has_doNotRelyOnCSS = false;

    if (m_doNotRelyOnCSS)
    {
        delete m_doNotRelyOnCSS;
        m_doNotRelyOnCSS = NULL;
    }


    m_has_doNotSaveAsSingleFile = false;

    if (m_doNotSaveAsSingleFile)
    {
        delete m_doNotSaveAsSingleFile;
        m_doNotSaveAsSingleFile = NULL;
    }


    m_has_doNotOrganizeInFolder = false;

    if (m_doNotOrganizeInFolder)
    {
        delete m_doNotOrganizeInFolder;
        m_doNotOrganizeInFolder = NULL;
    }


    m_has_doNotUseLongFileNames = false;

    if (m_doNotUseLongFileNames)
    {
        delete m_doNotUseLongFileNames;
        m_doNotUseLongFileNames = NULL;
    }


    m_has_pixelsPerInch = false;

    if (m_pixelsPerInch)
    {
        delete m_pixelsPerInch;
        m_pixelsPerInch = NULL;
    }


    m_has_targetScreenSz = false;

    if (m_targetScreenSz)
    {
        delete m_targetScreenSz;
        m_targetScreenSz = NULL;
    }


    m_has_saveSmartTagsAsXml = false;

    if (m_saveSmartTagsAsXml)
    {
        delete m_saveSmartTagsAsXml;
        m_saveSmartTagsAsXml = NULL;
    }

}

void webSettings_element::toXml(std::ostream& _outStream) const
{
    _outStream << "<w:webSettings";

    _outStream << " " << "xmlns:w=\"http://schemas.openxmlformats.org/wordprocessingml/2006/main\"";
    _outStream << " " << "xmlns:sl=\"http://schemas.openxmlformats.org/schemaLibrary/2006/main\"";
    _outStream << " " << "xmlns:s=\"http://schemas.openxmlformats.org/officeDocument/2006/sharedTypes\"";
    _outStream << " " << "xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\"";
    _outStream << " " << "xmlns:m=\"http://schemas.openxmlformats.org/officeDocument/2006/math\"";
    _outStream << " " << "xmlns:wp=\"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing\"";
    _outStream << " " << "xmlns:v=\"urn:schemas-microsoft-com:vml\"";
    _outStream << " " << "xmlns:o=\"urn:schemas-microsoft-com:office:office\"";

    _outStream << ">";


    if (m_has_frameset)
    {
        m_frameset->toXmlElem("w:frameset", "", _outStream);
    }


    if (m_has_divs)
    {
        m_divs->toXmlElem("w:divs", "", _outStream);
    }


    if (m_has_encoding)
    {
        m_encoding->toXmlElem("w:encoding", "", _outStream);
    }


    if (m_has_optimizeForBrowser)
    {
        m_optimizeForBrowser->toXmlElem("w:optimizeForBrowser", "", _outStream);
    }


    if (m_has_relyOnVML)
    {
        m_relyOnVML->toXmlElem("w:relyOnVML", "", _outStream);
    }


    if (m_has_allowPNG)
    {
        m_allowPNG->toXmlElem("w:allowPNG", "", _outStream);
    }


    if (m_has_doNotRelyOnCSS)
    {
        m_doNotRelyOnCSS->toXmlElem("w:doNotRelyOnCSS", "", _outStream);
    }


    if (m_has_doNotSaveAsSingleFile)
    {
        m_doNotSaveAsSingleFile->toXmlElem("w:doNotSaveAsSingleFile", "", _outStream);
    }


    if (m_has_doNotOrganizeInFolder)
    {
        m_doNotOrganizeInFolder->toXmlElem("w:doNotOrganizeInFolder", "", _outStream);
    }


    if (m_has_doNotUseLongFileNames)
    {
        m_doNotUseLongFileNames->toXmlElem("w:doNotUseLongFileNames", "", _outStream);
    }


    if (m_has_pixelsPerInch)
    {
        m_pixelsPerInch->toXmlElem("w:pixelsPerInch", "", _outStream);
    }


    if (m_has_targetScreenSz)
    {
        m_targetScreenSz->toXmlElem("w:targetScreenSz", "", _outStream);
    }


    if (m_has_saveSmartTagsAsXml)
    {
        m_saveSmartTagsAsXml->toXmlElem("w:saveSmartTagsAsXml", "", _outStream);
    }

    _outStream << "</w:webSettings>";
}

const webSettings_element& webSettings_element::default_instance()
{
    if (!webSettings_element::default_instance_)
    {
        webSettings_element::default_instance_ = new webSettings_element();
    }
    return *webSettings_element::default_instance_;
}

webSettings_element* webSettings_element::default_instance_ = NULL;

// fonts_element
fonts_element::fonts_element()

{
}
fonts_element::~fonts_element()
{
    clear();
}
CT_Font* fonts_element::add_font()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Font* pNewChild = pChildGroup->mutable_font();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

void fonts_element::clear()
{
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
}

void fonts_element::toXml(std::ostream& _outStream) const
{
    _outStream << "<w:fonts";

    _outStream << " " << "xmlns:w=\"http://schemas.openxmlformats.org/wordprocessingml/2006/main\"";
    _outStream << " " << "xmlns:sl=\"http://schemas.openxmlformats.org/schemaLibrary/2006/main\"";
    _outStream << " " << "xmlns:s=\"http://schemas.openxmlformats.org/officeDocument/2006/sharedTypes\"";
    _outStream << " " << "xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\"";
    _outStream << " " << "xmlns:m=\"http://schemas.openxmlformats.org/officeDocument/2006/math\"";
    _outStream << " " << "xmlns:wp=\"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing\"";
    _outStream << " " << "xmlns:v=\"urn:schemas-microsoft-com:vml\"";
    _outStream << " " << "xmlns:o=\"urn:schemas-microsoft-com:office:office\"";

    _outStream << ">";

    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_font())
            {
                (*iter)->get_font().toXmlElem("w:font", "", _outStream);
            }


        }
    }

    _outStream << "</w:fonts>";
}

const fonts_element& fonts_element::default_instance()
{
    if (!fonts_element::default_instance_)
    {
        fonts_element::default_instance_ = new fonts_element();
    }
    return *fonts_element::default_instance_;
}


// fonts_element::ChildGroup_1
fonts_element::ChildGroup_1::ChildGroup_1()
    :m_has_font(false),
     m_font(NULL)
{
}
bool fonts_element::ChildGroup_1::has_font() const
{
    return m_has_font;
}

CT_Font* fonts_element::ChildGroup_1::mutable_font()
{

    m_has_font = true;
    if (!m_font)
    {
        m_font = new CT_Font();
    }
    return m_font;
}

const CT_Font& fonts_element::ChildGroup_1::get_font() const
{
    if (m_font)
    {
        return *m_font;
    }
    return CT_Font::default_instance();
}

fonts_element* fonts_element::default_instance_ = NULL;

// numbering_element
numbering_element::numbering_element()
    :m_has_numIdMacAtCleanup(false),
     m_numIdMacAtCleanup(NULL)
{
}
numbering_element::~numbering_element()
{
    clear();
}
CT_NumPicBullet* numbering_element::add_numPicBullet()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_NumPicBullet* pNewChild = pChildGroup->mutable_numPicBullet();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_AbstractNum* numbering_element::add_abstractNum()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_AbstractNum* pNewChild = pChildGroup->mutable_abstractNum();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

CT_Num* numbering_element::add_num()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Num* pNewChild = pChildGroup->mutable_num();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

bool numbering_element::has_numIdMacAtCleanup() const
{
    return m_has_numIdMacAtCleanup;
}

CT_DecimalNumber* numbering_element::mutable_numIdMacAtCleanup()
{
    m_has_numIdMacAtCleanup = true;
    if (!m_numIdMacAtCleanup)
    {
        m_numIdMacAtCleanup = new CT_DecimalNumber();
    }
    return m_numIdMacAtCleanup;
}

const CT_DecimalNumber& numbering_element::get_numIdMacAtCleanup() const
{
    if (m_numIdMacAtCleanup)
    {
        return *m_numIdMacAtCleanup;
    }
    return CT_DecimalNumber::default_instance();
}

void numbering_element::clear()
{
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }

    m_has_numIdMacAtCleanup = false;

    if (m_numIdMacAtCleanup)
    {
        delete m_numIdMacAtCleanup;
        m_numIdMacAtCleanup = NULL;
    }

}

void numbering_element::toXml(std::ostream& _outStream) const
{
    _outStream << "<w:numbering";

    _outStream << " " << "xmlns:w=\"http://schemas.openxmlformats.org/wordprocessingml/2006/main\"";
    _outStream << " " << "xmlns:sl=\"http://schemas.openxmlformats.org/schemaLibrary/2006/main\"";
    _outStream << " " << "xmlns:s=\"http://schemas.openxmlformats.org/officeDocument/2006/sharedTypes\"";
    _outStream << " " << "xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\"";
    _outStream << " " << "xmlns:m=\"http://schemas.openxmlformats.org/officeDocument/2006/math\"";
    _outStream << " " << "xmlns:wp=\"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing\"";
    _outStream << " " << "xmlns:v=\"urn:schemas-microsoft-com:vml\"";
    _outStream << " " << "xmlns:o=\"urn:schemas-microsoft-com:office:office\"";

    _outStream << ">";

    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_numPicBullet())
            {
                (*iter)->get_numPicBullet().toXmlElem("w:numPicBullet", "", _outStream);
            }


            else if ((*iter)->has_abstractNum())
            {
                (*iter)->get_abstractNum().toXmlElem("w:abstractNum", "", _outStream);
            }


            else if ((*iter)->has_num())
            {
                (*iter)->get_num().toXmlElem("w:num", "", _outStream);
            }


        }
    }


    if (m_has_numIdMacAtCleanup)
    {
        m_numIdMacAtCleanup->toXmlElem("w:numIdMacAtCleanup", "", _outStream);
    }

    _outStream << "</w:numbering>";
}

const numbering_element& numbering_element::default_instance()
{
    if (!numbering_element::default_instance_)
    {
        numbering_element::default_instance_ = new numbering_element();
    }
    return *numbering_element::default_instance_;
}


// numbering_element::ChildGroup_1
numbering_element::ChildGroup_1::ChildGroup_1()
    :m_has_numPicBullet(false),
     m_numPicBullet(NULL),
     m_has_abstractNum(false),
     m_abstractNum(NULL),
     m_has_num(false),
     m_num(NULL)
{
}
bool numbering_element::ChildGroup_1::has_numPicBullet() const
{
    return m_has_numPicBullet;
}

CT_NumPicBullet* numbering_element::ChildGroup_1::mutable_numPicBullet()
{

    m_has_abstractNum = false;

    if (m_abstractNum)
    {
        delete m_abstractNum;
        m_abstractNum = NULL;
    }
    ;

    m_has_num = false;

    if (m_num)
    {
        delete m_num;
        m_num = NULL;
    }
    ;

    m_has_numPicBullet = true;
    if (!m_numPicBullet)
    {
        m_numPicBullet = new CT_NumPicBullet();
    }
    return m_numPicBullet;
}

const CT_NumPicBullet& numbering_element::ChildGroup_1::get_numPicBullet() const
{
    if (m_numPicBullet)
    {
        return *m_numPicBullet;
    }
    return CT_NumPicBullet::default_instance();
}

bool numbering_element::ChildGroup_1::has_abstractNum() const
{
    return m_has_abstractNum;
}

CT_AbstractNum* numbering_element::ChildGroup_1::mutable_abstractNum()
{

    m_has_numPicBullet = false;

    if (m_numPicBullet)
    {
        delete m_numPicBullet;
        m_numPicBullet = NULL;
    }
    ;

    m_has_num = false;

    if (m_num)
    {
        delete m_num;
        m_num = NULL;
    }
    ;

    m_has_abstractNum = true;
    if (!m_abstractNum)
    {
        m_abstractNum = new CT_AbstractNum();
    }
    return m_abstractNum;
}

const CT_AbstractNum& numbering_element::ChildGroup_1::get_abstractNum() const
{
    if (m_abstractNum)
    {
        return *m_abstractNum;
    }
    return CT_AbstractNum::default_instance();
}

bool numbering_element::ChildGroup_1::has_num() const
{
    return m_has_num;
}

CT_Num* numbering_element::ChildGroup_1::mutable_num()
{

    m_has_numPicBullet = false;

    if (m_numPicBullet)
    {
        delete m_numPicBullet;
        m_numPicBullet = NULL;
    }
    ;

    m_has_abstractNum = false;

    if (m_abstractNum)
    {
        delete m_abstractNum;
        m_abstractNum = NULL;
    }
    ;

    m_has_num = true;
    if (!m_num)
    {
        m_num = new CT_Num();
    }
    return m_num;
}

const CT_Num& numbering_element::ChildGroup_1::get_num() const
{
    if (m_num)
    {
        return *m_num;
    }
    return CT_Num::default_instance();
}

numbering_element* numbering_element::default_instance_ = NULL;

// styles_element
styles_element::styles_element()
    :m_has_docDefaults(false),
     m_docDefaults(NULL),
     m_has_latentStyles(false),
     m_latentStyles(NULL)
{
}
styles_element::~styles_element()
{
    clear();
}
bool styles_element::has_docDefaults() const
{
    return m_has_docDefaults;
}

CT_DocDefaults* styles_element::mutable_docDefaults()
{
    m_has_docDefaults = true;
    if (!m_docDefaults)
    {
        m_docDefaults = new CT_DocDefaults();
    }
    return m_docDefaults;
}

const CT_DocDefaults& styles_element::get_docDefaults() const
{
    if (m_docDefaults)
    {
        return *m_docDefaults;
    }
    return CT_DocDefaults::default_instance();
}

bool styles_element::has_latentStyles() const
{
    return m_has_latentStyles;
}

CT_LatentStyles* styles_element::mutable_latentStyles()
{
    m_has_latentStyles = true;
    if (!m_latentStyles)
    {
        m_latentStyles = new CT_LatentStyles();
    }
    return m_latentStyles;
}

const CT_LatentStyles& styles_element::get_latentStyles() const
{
    if (m_latentStyles)
    {
        return *m_latentStyles;
    }
    return CT_LatentStyles::default_instance();
}

CT_Style* styles_element::add_style()
{
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Style* pNewChild = pChildGroup->mutable_style();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
}

void styles_element::clear()
{
    m_has_docDefaults = false;

    if (m_docDefaults)
    {
        delete m_docDefaults;
        m_docDefaults = NULL;
    }


    m_has_latentStyles = false;

    if (m_latentStyles)
    {
        delete m_latentStyles;
        m_latentStyles = NULL;
    }


    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
}

void styles_element::toXml(std::ostream& _outStream) const
{
    _outStream << "<w:styles";

    _outStream << " " << "xmlns:w=\"http://schemas.openxmlformats.org/wordprocessingml/2006/main\"";
    _outStream << " " << "xmlns:sl=\"http://schemas.openxmlformats.org/schemaLibrary/2006/main\"";
    _outStream << " " << "xmlns:s=\"http://schemas.openxmlformats.org/officeDocument/2006/sharedTypes\"";
    _outStream << " " << "xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\"";
    _outStream << " " << "xmlns:m=\"http://schemas.openxmlformats.org/officeDocument/2006/math\"";
    _outStream << " " << "xmlns:wp=\"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing\"";
    _outStream << " " << "xmlns:v=\"urn:schemas-microsoft-com:vml\"";
    _outStream << " " << "xmlns:o=\"urn:schemas-microsoft-com:office:office\"";

    _outStream << ">";


    if (m_has_docDefaults)
    {
        m_docDefaults->toXmlElem("w:docDefaults", "", _outStream);
    }


    if (m_has_latentStyles)
    {
        m_latentStyles->toXmlElem("w:latentStyles", "", _outStream);
    }

    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_style())
            {
                (*iter)->get_style().toXmlElem("w:style", "", _outStream);
            }


        }
    }

    _outStream << "</w:styles>";
}

const styles_element& styles_element::default_instance()
{
    if (!styles_element::default_instance_)
    {
        styles_element::default_instance_ = new styles_element();
    }
    return *styles_element::default_instance_;
}


// styles_element::ChildGroup_1
styles_element::ChildGroup_1::ChildGroup_1()
    :m_has_style(false),
     m_style(NULL)
{
}
bool styles_element::ChildGroup_1::has_style() const
{
    return m_has_style;
}

CT_Style* styles_element::ChildGroup_1::mutable_style()
{

    m_has_style = true;
    if (!m_style)
    {
        m_style = new CT_Style();
    }
    return m_style;
}

const CT_Style& styles_element::ChildGroup_1::get_style() const
{
    if (m_style)
    {
        return *m_style;
    }
    return CT_Style::default_instance();
}

styles_element* styles_element::default_instance_ = NULL;

// document_element
document_element::document_element()
    :m_has_background(false),
     m_background(NULL),
     m_has_body(false),
     m_body(NULL),
     m_has_conformance_attr(false),
     m_conformance_attr(NULL)
{
}
document_element::~document_element()
{
    clear();
}
bool document_element::has_background() const
{
    return m_has_background;
}

CT_Background* document_element::mutable_background()
{
    m_has_background = true;
    if (!m_background)
    {
        m_background = new CT_Background();
    }
    return m_background;
}

const CT_Background& document_element::get_background() const
{
    if (m_background)
    {
        return *m_background;
    }
    return CT_Background::default_instance();
}

bool document_element::has_body() const
{
    return m_has_body;
}

CT_Body* document_element::mutable_body()
{
    m_has_body = true;
    if (!m_body)
    {
        m_body = new CT_Body();
    }
    return m_body;
}

const CT_Body& document_element::get_body() const
{
    if (m_body)
    {
        return *m_body;
    }
    return CT_Body::default_instance();
}

void document_element::clear()
{
    m_has_conformance_attr = false;

    if (m_conformance_attr)
    {
        delete m_conformance_attr;
        m_conformance_attr = NULL;
    }


    m_has_background = false;

    if (m_background)
    {
        delete m_background;
        m_background = NULL;
    }


    m_has_body = false;

    if (m_body)
    {
        delete m_body;
        m_body = NULL;
    }

}

void document_element::toXml(std::ostream& _outStream) const
{
    _outStream << "<w:document";

    _outStream << " " << "xmlns:w=\"http://schemas.openxmlformats.org/wordprocessingml/2006/main\"";
    _outStream << " " << "xmlns:sl=\"http://schemas.openxmlformats.org/schemaLibrary/2006/main\"";
    _outStream << " " << "xmlns:s=\"http://schemas.openxmlformats.org/officeDocument/2006/sharedTypes\"";
    _outStream << " " << "xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\"";
    _outStream << " " << "xmlns:m=\"http://schemas.openxmlformats.org/officeDocument/2006/math\"";
    _outStream << " " << "xmlns:wp=\"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing\"";
    _outStream << " " << "xmlns:v=\"urn:schemas-microsoft-com:vml\"";
    _outStream << " " << "xmlns:o=\"urn:schemas-microsoft-com:office:office\"";


    if (m_has_conformance_attr)
    {
        m_conformance_attr->toXmlAttr("w:conformance", _outStream);
    }

    _outStream << ">";


    if (m_has_background)
    {
        m_background->toXmlElem("w:background", "", _outStream);
    }


    if (m_has_body)
    {
        m_body->toXmlElem("w:body", "", _outStream);
    }

    _outStream << "</w:document>";
}

const document_element& document_element::default_instance()
{
    if (!document_element::default_instance_)
    {
        document_element::default_instance_ = new document_element();
    }
    return *document_element::default_instance_;
}

bool document_element::has_conformance_attr() const
{
    return m_has_conformance_attr;
}

void document_element::set_conformance_attr(const ns_s::ST_ConformanceClass& _conformance_attr)
{
    m_has_conformance_attr = true;
    m_conformance_attr = new ns_s::ST_ConformanceClass(_conformance_attr);
}

const ns_s::ST_ConformanceClass& document_element::get_conformance_attr() const
{
    if (m_conformance_attr)
    {
        return *m_conformance_attr;
    }
    return ns_s::ST_ConformanceClass::default_instance();
}

document_element* document_element::default_instance_ = NULL;

// glossaryDocument_element
glossaryDocument_element::glossaryDocument_element()
    :m_has_background(false),
     m_background(NULL),
     m_has_docParts(false),
     m_docParts(NULL)
{
}
glossaryDocument_element::~glossaryDocument_element()
{
    clear();
}
bool glossaryDocument_element::has_background() const
{
    return m_has_background;
}

CT_Background* glossaryDocument_element::mutable_background()
{
    m_has_background = true;
    if (!m_background)
    {
        m_background = new CT_Background();
    }
    return m_background;
}

const CT_Background& glossaryDocument_element::get_background() const
{
    if (m_background)
    {
        return *m_background;
    }
    return CT_Background::default_instance();
}

bool glossaryDocument_element::has_docParts() const
{
    return m_has_docParts;
}

CT_DocParts* glossaryDocument_element::mutable_docParts()
{
    m_has_docParts = true;
    if (!m_docParts)
    {
        m_docParts = new CT_DocParts();
    }
    return m_docParts;
}

const CT_DocParts& glossaryDocument_element::get_docParts() const
{
    if (m_docParts)
    {
        return *m_docParts;
    }
    return CT_DocParts::default_instance();
}

void glossaryDocument_element::clear()
{
    m_has_background = false;

    if (m_background)
    {
        delete m_background;
        m_background = NULL;
    }


    m_has_docParts = false;

    if (m_docParts)
    {
        delete m_docParts;
        m_docParts = NULL;
    }

}

void glossaryDocument_element::toXml(std::ostream& _outStream) const
{
    _outStream << "<w:glossaryDocument";

    _outStream << " " << "xmlns:w=\"http://schemas.openxmlformats.org/wordprocessingml/2006/main\"";
    _outStream << " " << "xmlns:sl=\"http://schemas.openxmlformats.org/schemaLibrary/2006/main\"";
    _outStream << " " << "xmlns:s=\"http://schemas.openxmlformats.org/officeDocument/2006/sharedTypes\"";
    _outStream << " " << "xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\"";
    _outStream << " " << "xmlns:m=\"http://schemas.openxmlformats.org/officeDocument/2006/math\"";
    _outStream << " " << "xmlns:wp=\"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing\"";
    _outStream << " " << "xmlns:v=\"urn:schemas-microsoft-com:vml\"";
    _outStream << " " << "xmlns:o=\"urn:schemas-microsoft-com:office:office\"";

    _outStream << ">";


    if (m_has_background)
    {
        m_background->toXmlElem("w:background", "", _outStream);
    }


    if (m_has_docParts)
    {
        m_docParts->toXmlElem("w:docParts", "", _outStream);
    }

    _outStream << "</w:glossaryDocument>";
}

const glossaryDocument_element& glossaryDocument_element::default_instance()
{
    if (!glossaryDocument_element::default_instance_)
    {
        glossaryDocument_element::default_instance_ = new glossaryDocument_element();
    }
    return *glossaryDocument_element::default_instance_;
}

glossaryDocument_element* glossaryDocument_element::default_instance_ = NULL;
}