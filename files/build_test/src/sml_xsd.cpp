#include "sml_xsd.h"
#include <stdlib.h>
#include <sstream>
#include <sstream>
#include <assert.h>
#include "shared-relationshipReference_xsd.h"
#include "shared-commonSimpleTypes_xsd.h"
#include "dml-spreadsheetDrawing_xsd.h"
namespace ns_main {
 using namespace std;

    // Element

    // Attribute

    // ST_FilterOperator
    ST_FilterOperator::ST_FilterOperator()
    :m_has_type(false)
    {
    }
    ST_FilterOperator::ST_FilterOperator(const ST_FilterOperator::Type& _type)
    :m_has_type(true),
    m_type(_type)
    {
    }
    bool ST_FilterOperator::has_type() const
    {    
    return m_has_type;
    }

    void ST_FilterOperator::set_type(const ST_FilterOperator::Type& _type)
    {    
    m_has_type = true;
    m_type = _type;
    }

    const ST_FilterOperator::Type& ST_FilterOperator::get_type() const
    {    
                return m_type;
                }

    std::string ST_FilterOperator::toString() const
    {    
    return ST_FilterOperator::TypeStrList[m_type];
    }

    void ST_FilterOperator::clear()
    {    
    m_has_type = false;
    }

    void ST_FilterOperator::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_type)
    {
    _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
    }

    const ST_FilterOperator& ST_FilterOperator::default_instance()
    {    
    if (!ST_FilterOperator::default_instance_)
    {
        ST_FilterOperator::default_instance_ = new ST_FilterOperator();
    }
    return *ST_FilterOperator::default_instance_;
    }

    const std::string ST_FilterOperator::TypeStrList[] =
    {
        "equal",
        "lessThan",
        "lessThanOrEqual",
        "notEqual",
        "greaterThanOrEqual",
        "greaterThan"
    };
ST_FilterOperator* ST_FilterOperator::default_instance_ = NULL;

    // ST_DynamicFilterType
    ST_DynamicFilterType::ST_DynamicFilterType()
    :m_has_type(false)
    {
    }
    ST_DynamicFilterType::ST_DynamicFilterType(const ST_DynamicFilterType::Type& _type)
    :m_has_type(true),
    m_type(_type)
    {
    }
    bool ST_DynamicFilterType::has_type() const
    {    
    return m_has_type;
    }

    void ST_DynamicFilterType::set_type(const ST_DynamicFilterType::Type& _type)
    {    
    m_has_type = true;
    m_type = _type;
    }

    const ST_DynamicFilterType::Type& ST_DynamicFilterType::get_type() const
    {    
                return m_type;
                }

    std::string ST_DynamicFilterType::toString() const
    {    
    return ST_DynamicFilterType::TypeStrList[m_type];
    }

    void ST_DynamicFilterType::clear()
    {    
    m_has_type = false;
    }

    void ST_DynamicFilterType::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_type)
    {
    _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
    }

    const ST_DynamicFilterType& ST_DynamicFilterType::default_instance()
    {    
    if (!ST_DynamicFilterType::default_instance_)
    {
        ST_DynamicFilterType::default_instance_ = new ST_DynamicFilterType();
    }
    return *ST_DynamicFilterType::default_instance_;
    }

    const std::string ST_DynamicFilterType::TypeStrList[] =
    {
        "null",
        "aboveAverage",
        "belowAverage",
        "tomorrow",
        "today",
        "yesterday",
        "nextWeek",
        "thisWeek",
        "lastWeek",
        "nextMonth",
        "thisMonth",
        "lastMonth",
        "nextQuarter",
        "thisQuarter",
        "lastQuarter",
        "nextYear",
        "thisYear",
        "lastYear",
        "yearToDate",
        "Q1",
        "Q2",
        "Q3",
        "Q4",
        "M1",
        "M2",
        "M3",
        "M4",
        "M5",
        "M6",
        "M7",
        "M8",
        "M9",
        "M10",
        "M11",
        "M12"
    };
ST_DynamicFilterType* ST_DynamicFilterType::default_instance_ = NULL;

    // ST_IconSetType
    ST_IconSetType::ST_IconSetType()
    :m_has_type(false)
    {
    }
    ST_IconSetType::ST_IconSetType(const ST_IconSetType::Type& _type)
    :m_has_type(true),
    m_type(_type)
    {
    }
    bool ST_IconSetType::has_type() const
    {    
    return m_has_type;
    }

    void ST_IconSetType::set_type(const ST_IconSetType::Type& _type)
    {    
    m_has_type = true;
    m_type = _type;
    }

    const ST_IconSetType::Type& ST_IconSetType::get_type() const
    {    
                return m_type;
                }

    std::string ST_IconSetType::toString() const
    {    
    return ST_IconSetType::TypeStrList[m_type];
    }

    void ST_IconSetType::clear()
    {    
    m_has_type = false;
    }

    void ST_IconSetType::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_type)
    {
    _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
    }

    const ST_IconSetType& ST_IconSetType::default_instance()
    {    
    if (!ST_IconSetType::default_instance_)
    {
        ST_IconSetType::default_instance_ = new ST_IconSetType();
    }
    return *ST_IconSetType::default_instance_;
    }

    const std::string ST_IconSetType::TypeStrList[] =
    {
        "3Arrows",
        "3ArrowsGray",
        "3Flags",
        "3TrafficLights1",
        "3TrafficLights2",
        "3Signs",
        "3Symbols",
        "3Symbols2",
        "4Arrows",
        "4ArrowsGray",
        "4RedToBlack",
        "4Rating",
        "4TrafficLights",
        "5Arrows",
        "5ArrowsGray",
        "5Rating",
        "5Quarters"
    };
ST_IconSetType* ST_IconSetType::default_instance_ = NULL;

    // ST_SortBy
    ST_SortBy::ST_SortBy()
    :m_has_type(false)
    {
    }
    ST_SortBy::ST_SortBy(const ST_SortBy::Type& _type)
    :m_has_type(true),
    m_type(_type)
    {
    }
    bool ST_SortBy::has_type() const
    {    
    return m_has_type;
    }

    void ST_SortBy::set_type(const ST_SortBy::Type& _type)
    {    
    m_has_type = true;
    m_type = _type;
    }

    const ST_SortBy::Type& ST_SortBy::get_type() const
    {    
                return m_type;
                }

    std::string ST_SortBy::toString() const
    {    
    return ST_SortBy::TypeStrList[m_type];
    }

    void ST_SortBy::clear()
    {    
    m_has_type = false;
    }

    void ST_SortBy::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_type)
    {
    _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
    }

    const ST_SortBy& ST_SortBy::default_instance()
    {    
    if (!ST_SortBy::default_instance_)
    {
        ST_SortBy::default_instance_ = new ST_SortBy();
    }
    return *ST_SortBy::default_instance_;
    }

    const std::string ST_SortBy::TypeStrList[] =
    {
        "value",
        "cellColor",
        "fontColor",
        "icon"
    };
ST_SortBy* ST_SortBy::default_instance_ = NULL;

    // ST_SortMethod
    ST_SortMethod::ST_SortMethod()
    :m_has_type(false)
    {
    }
    ST_SortMethod::ST_SortMethod(const ST_SortMethod::Type& _type)
    :m_has_type(true),
    m_type(_type)
    {
    }
    bool ST_SortMethod::has_type() const
    {    
    return m_has_type;
    }

    void ST_SortMethod::set_type(const ST_SortMethod::Type& _type)
    {    
    m_has_type = true;
    m_type = _type;
    }

    const ST_SortMethod::Type& ST_SortMethod::get_type() const
    {    
                return m_type;
                }

    std::string ST_SortMethod::toString() const
    {    
    return ST_SortMethod::TypeStrList[m_type];
    }

    void ST_SortMethod::clear()
    {    
    m_has_type = false;
    }

    void ST_SortMethod::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_type)
    {
    _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
    }

    const ST_SortMethod& ST_SortMethod::default_instance()
    {    
    if (!ST_SortMethod::default_instance_)
    {
        ST_SortMethod::default_instance_ = new ST_SortMethod();
    }
    return *ST_SortMethod::default_instance_;
    }

    const std::string ST_SortMethod::TypeStrList[] =
    {
        "stroke",
        "pinYin",
        "none"
    };
ST_SortMethod* ST_SortMethod::default_instance_ = NULL;

    // ST_DateTimeGrouping
    ST_DateTimeGrouping::ST_DateTimeGrouping()
    :m_has_type(false)
    {
    }
    ST_DateTimeGrouping::ST_DateTimeGrouping(const ST_DateTimeGrouping::Type& _type)
    :m_has_type(true),
    m_type(_type)
    {
    }
    bool ST_DateTimeGrouping::has_type() const
    {    
    return m_has_type;
    }

    void ST_DateTimeGrouping::set_type(const ST_DateTimeGrouping::Type& _type)
    {    
    m_has_type = true;
    m_type = _type;
    }

    const ST_DateTimeGrouping::Type& ST_DateTimeGrouping::get_type() const
    {    
                return m_type;
                }

    std::string ST_DateTimeGrouping::toString() const
    {    
    return ST_DateTimeGrouping::TypeStrList[m_type];
    }

    void ST_DateTimeGrouping::clear()
    {    
    m_has_type = false;
    }

    void ST_DateTimeGrouping::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_type)
    {
    _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
    }

    const ST_DateTimeGrouping& ST_DateTimeGrouping::default_instance()
    {    
    if (!ST_DateTimeGrouping::default_instance_)
    {
        ST_DateTimeGrouping::default_instance_ = new ST_DateTimeGrouping();
    }
    return *ST_DateTimeGrouping::default_instance_;
    }

    const std::string ST_DateTimeGrouping::TypeStrList[] =
    {
        "year",
        "month",
        "day",
        "hour",
        "minute",
        "second"
    };
ST_DateTimeGrouping* ST_DateTimeGrouping::default_instance_ = NULL;

    // ST_CellRef
    ST_CellRef::ST_CellRef()
    :m_has_string(false),
    m_string("")
    {
    }
    ST_CellRef::ST_CellRef(const XSD::string_& _string)
    :m_has_string(true)
    {
    
    set_string(_string);
    }
    bool ST_CellRef::has_string() const
    {    
    return m_has_string;
    }

    void ST_CellRef::set_string(const XSD::string_& _string)
    {    
    m_has_string = true;
    m_string = _string;
    }

    const XSD::string_& ST_CellRef::get_string() const
    {    
    return m_string;
    }

    void ST_CellRef::clear()
    {    
    m_has_string = false;
    m_string.clear();;
    }

    void ST_CellRef::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_string)
    {
        _outStream << " " << _attrName << "=\"" << m_string << "\"";;
    }
    }

    const ST_CellRef& ST_CellRef::default_instance()
    {    
    if (!ST_CellRef::default_instance_)
    {
        ST_CellRef::default_instance_ = new ST_CellRef();
    }
    return *ST_CellRef::default_instance_;
    }

    std::string ST_CellRef::toString() const
    {    
    std::stringstream strStream;
    strStream << get_string();
    return strStream.str();
    }

ST_CellRef* ST_CellRef::default_instance_ = NULL;

    // ST_Ref
    ST_Ref::ST_Ref()
    :m_has_string(false),
    m_string("")
    {
    }
    ST_Ref::ST_Ref(const XSD::string_& _string)
    :m_has_string(true)
    {
    
    set_string(_string);
    }
    bool ST_Ref::has_string() const
    {    
    return m_has_string;
    }

    void ST_Ref::set_string(const XSD::string_& _string)
    {    
    m_has_string = true;
    m_string = _string;
    }

    const XSD::string_& ST_Ref::get_string() const
    {    
    return m_string;
    }

    void ST_Ref::clear()
    {    
    m_has_string = false;
    m_string.clear();;
    }

    void ST_Ref::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_string)
    {
        _outStream << " " << _attrName << "=\"" << m_string << "\"";;
    }
    }

    const ST_Ref& ST_Ref::default_instance()
    {    
    if (!ST_Ref::default_instance_)
    {
        ST_Ref::default_instance_ = new ST_Ref();
    }
    return *ST_Ref::default_instance_;
    }

    std::string ST_Ref::toString() const
    {    
    std::stringstream strStream;
    strStream << get_string();
    return strStream.str();
    }

ST_Ref* ST_Ref::default_instance_ = NULL;

    // ST_RefA
    ST_RefA::ST_RefA()
    :m_has_string(false),
    m_string("")
    {
    }
    ST_RefA::ST_RefA(const XSD::string_& _string)
    :m_has_string(true)
    {
    
    set_string(_string);
    }
    bool ST_RefA::has_string() const
    {    
    return m_has_string;
    }

    void ST_RefA::set_string(const XSD::string_& _string)
    {    
    m_has_string = true;
    m_string = _string;
    }

    const XSD::string_& ST_RefA::get_string() const
    {    
    return m_string;
    }

    void ST_RefA::clear()
    {    
    m_has_string = false;
    m_string.clear();;
    }

    void ST_RefA::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_string)
    {
        _outStream << " " << _attrName << "=\"" << m_string << "\"";;
    }
    }

    const ST_RefA& ST_RefA::default_instance()
    {    
    if (!ST_RefA::default_instance_)
    {
        ST_RefA::default_instance_ = new ST_RefA();
    }
    return *ST_RefA::default_instance_;
    }

    std::string ST_RefA::toString() const
    {    
    std::stringstream strStream;
    strStream << get_string();
    return strStream.str();
    }

ST_RefA* ST_RefA::default_instance_ = NULL;

    // ST_Sqref
    ST_Sqref::ST_Sqref()
    :m_has_ENTITIES(false),
    m_ENTITIES("")
    {
    }
    ST_Sqref::ST_Sqref(const XSD::ENTITIES_& _ENTITIES)
    :m_has_ENTITIES(true)
    {
    
    set_ENTITIES(_ENTITIES);
    }
    bool ST_Sqref::has_ENTITIES() const
    {    
    return m_has_ENTITIES;
    }

    void ST_Sqref::set_ENTITIES(const XSD::ENTITIES_& _ENTITIES)
    {    
    m_has_ENTITIES = true;
    m_ENTITIES = _ENTITIES;
    }

    const XSD::ENTITIES_& ST_Sqref::get_ENTITIES() const
    {    
    return m_ENTITIES;
    }

    void ST_Sqref::clear()
    {    
    m_has_ENTITIES = false;
    m_ENTITIES.clear();;
    }

    void ST_Sqref::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_ENTITIES)
    {
        _outStream << " " << _attrName << "=\"" << m_ENTITIES << "\"";;
    }
    }

    const ST_Sqref& ST_Sqref::default_instance()
    {    
    if (!ST_Sqref::default_instance_)
    {
        ST_Sqref::default_instance_ = new ST_Sqref();
    }
    return *ST_Sqref::default_instance_;
    }

    std::string ST_Sqref::toString() const
    {    
    std::stringstream strStream;
    strStream << get_ENTITIES();
    return strStream.str();
    }

ST_Sqref* ST_Sqref::default_instance_ = NULL;

    // ST_Formula
    ST_Formula::ST_Formula()

    {
    }
    ST_Formula::ST_Formula(const ns_s::ST_Xstring& _ST_Xstring)

    {
    }
    const ST_Formula& ST_Formula::default_instance()
    {    
    if (!ST_Formula::default_instance_)
    {
        ST_Formula::default_instance_ = new ST_Formula();
    }
    return *ST_Formula::default_instance_;
    }

ST_Formula* ST_Formula::default_instance_ = NULL;

    // ST_UnsignedIntHex
    ST_UnsignedIntHex::ST_UnsignedIntHex()
    :m_has_hexBinary(false),
    m_hexBinary("")
    {
    }
    ST_UnsignedIntHex::ST_UnsignedIntHex(const XSD::hexBinary_& _hexBinary)
    :m_has_hexBinary(true)
    {
    
    set_hexBinary(_hexBinary);
    }
    bool ST_UnsignedIntHex::has_hexBinary() const
    {    
    return m_has_hexBinary;
    }

    void ST_UnsignedIntHex::set_hexBinary(const XSD::hexBinary_& _hexBinary)
    {    assert(_hexBinary.size() == 4);
    
    m_has_hexBinary = true;
    m_hexBinary = _hexBinary;
    }

    const XSD::hexBinary_& ST_UnsignedIntHex::get_hexBinary() const
    {    
    return m_hexBinary;
    }

    void ST_UnsignedIntHex::clear()
    {    
    m_has_hexBinary = false;
    m_hexBinary.clear();;
    }

    void ST_UnsignedIntHex::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_hexBinary)
    {
        _outStream << " " << _attrName << "=\"" << m_hexBinary << "\"";;
    }
    }

    const ST_UnsignedIntHex& ST_UnsignedIntHex::default_instance()
    {    
    if (!ST_UnsignedIntHex::default_instance_)
    {
        ST_UnsignedIntHex::default_instance_ = new ST_UnsignedIntHex();
    }
    return *ST_UnsignedIntHex::default_instance_;
    }

    std::string ST_UnsignedIntHex::toString() const
    {    
    std::stringstream strStream;
    strStream << get_hexBinary();
    return strStream.str();
    }

ST_UnsignedIntHex* ST_UnsignedIntHex::default_instance_ = NULL;

    // ST_UnsignedShortHex
    ST_UnsignedShortHex::ST_UnsignedShortHex()
    :m_has_hexBinary(false),
    m_hexBinary("")
    {
    }
    ST_UnsignedShortHex::ST_UnsignedShortHex(const XSD::hexBinary_& _hexBinary)
    :m_has_hexBinary(true)
    {
    
    set_hexBinary(_hexBinary);
    }
    bool ST_UnsignedShortHex::has_hexBinary() const
    {    
    return m_has_hexBinary;
    }

    void ST_UnsignedShortHex::set_hexBinary(const XSD::hexBinary_& _hexBinary)
    {    assert(_hexBinary.size() == 2);
    
    m_has_hexBinary = true;
    m_hexBinary = _hexBinary;
    }

    const XSD::hexBinary_& ST_UnsignedShortHex::get_hexBinary() const
    {    
    return m_hexBinary;
    }

    void ST_UnsignedShortHex::clear()
    {    
    m_has_hexBinary = false;
    m_hexBinary.clear();;
    }

    void ST_UnsignedShortHex::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_hexBinary)
    {
        _outStream << " " << _attrName << "=\"" << m_hexBinary << "\"";;
    }
    }

    const ST_UnsignedShortHex& ST_UnsignedShortHex::default_instance()
    {    
    if (!ST_UnsignedShortHex::default_instance_)
    {
        ST_UnsignedShortHex::default_instance_ = new ST_UnsignedShortHex();
    }
    return *ST_UnsignedShortHex::default_instance_;
    }

    std::string ST_UnsignedShortHex::toString() const
    {    
    std::stringstream strStream;
    strStream << get_hexBinary();
    return strStream.str();
    }

ST_UnsignedShortHex* ST_UnsignedShortHex::default_instance_ = NULL;

    // ST_TextHAlign
    ST_TextHAlign::ST_TextHAlign()
    :m_has_type(false)
    {
    }
    ST_TextHAlign::ST_TextHAlign(const ST_TextHAlign::Type& _type)
    :m_has_type(true),
    m_type(_type)
    {
    }
    bool ST_TextHAlign::has_type() const
    {    
    return m_has_type;
    }

    void ST_TextHAlign::set_type(const ST_TextHAlign::Type& _type)
    {    
    m_has_type = true;
    m_type = _type;
    }

    const ST_TextHAlign::Type& ST_TextHAlign::get_type() const
    {    
                return m_type;
                }

    std::string ST_TextHAlign::toString() const
    {    
    return ST_TextHAlign::TypeStrList[m_type];
    }

    void ST_TextHAlign::clear()
    {    
    m_has_type = false;
    }

    void ST_TextHAlign::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_type)
    {
    _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
    }

    const ST_TextHAlign& ST_TextHAlign::default_instance()
    {    
    if (!ST_TextHAlign::default_instance_)
    {
        ST_TextHAlign::default_instance_ = new ST_TextHAlign();
    }
    return *ST_TextHAlign::default_instance_;
    }

    const std::string ST_TextHAlign::TypeStrList[] =
    {
        "left",
        "center",
        "right",
        "justify",
        "distributed"
    };
ST_TextHAlign* ST_TextHAlign::default_instance_ = NULL;

    // ST_TextVAlign
    ST_TextVAlign::ST_TextVAlign()
    :m_has_type(false)
    {
    }
    ST_TextVAlign::ST_TextVAlign(const ST_TextVAlign::Type& _type)
    :m_has_type(true),
    m_type(_type)
    {
    }
    bool ST_TextVAlign::has_type() const
    {    
    return m_has_type;
    }

    void ST_TextVAlign::set_type(const ST_TextVAlign::Type& _type)
    {    
    m_has_type = true;
    m_type = _type;
    }

    const ST_TextVAlign::Type& ST_TextVAlign::get_type() const
    {    
                return m_type;
                }

    std::string ST_TextVAlign::toString() const
    {    
    return ST_TextVAlign::TypeStrList[m_type];
    }

    void ST_TextVAlign::clear()
    {    
    m_has_type = false;
    }

    void ST_TextVAlign::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_type)
    {
    _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
    }

    const ST_TextVAlign& ST_TextVAlign::default_instance()
    {    
    if (!ST_TextVAlign::default_instance_)
    {
        ST_TextVAlign::default_instance_ = new ST_TextVAlign();
    }
    return *ST_TextVAlign::default_instance_;
    }

    const std::string ST_TextVAlign::TypeStrList[] =
    {
        "top",
        "center",
        "bottom",
        "justify",
        "distributed"
    };
ST_TextVAlign* ST_TextVAlign::default_instance_ = NULL;

    // ST_CredMethod
    ST_CredMethod::ST_CredMethod()
    :m_has_type(false)
    {
    }
    ST_CredMethod::ST_CredMethod(const ST_CredMethod::Type& _type)
    :m_has_type(true),
    m_type(_type)
    {
    }
    bool ST_CredMethod::has_type() const
    {    
    return m_has_type;
    }

    void ST_CredMethod::set_type(const ST_CredMethod::Type& _type)
    {    
    m_has_type = true;
    m_type = _type;
    }

    const ST_CredMethod::Type& ST_CredMethod::get_type() const
    {    
                return m_type;
                }

    std::string ST_CredMethod::toString() const
    {    
    return ST_CredMethod::TypeStrList[m_type];
    }

    void ST_CredMethod::clear()
    {    
    m_has_type = false;
    }

    void ST_CredMethod::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_type)
    {
    _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
    }

    const ST_CredMethod& ST_CredMethod::default_instance()
    {    
    if (!ST_CredMethod::default_instance_)
    {
        ST_CredMethod::default_instance_ = new ST_CredMethod();
    }
    return *ST_CredMethod::default_instance_;
    }

    const std::string ST_CredMethod::TypeStrList[] =
    {
        "integrated",
        "none",
        "stored",
        "prompt"
    };
ST_CredMethod* ST_CredMethod::default_instance_ = NULL;

    // ST_HtmlFmt
    ST_HtmlFmt::ST_HtmlFmt()
    :m_has_type(false)
    {
    }
    ST_HtmlFmt::ST_HtmlFmt(const ST_HtmlFmt::Type& _type)
    :m_has_type(true),
    m_type(_type)
    {
    }
    bool ST_HtmlFmt::has_type() const
    {    
    return m_has_type;
    }

    void ST_HtmlFmt::set_type(const ST_HtmlFmt::Type& _type)
    {    
    m_has_type = true;
    m_type = _type;
    }

    const ST_HtmlFmt::Type& ST_HtmlFmt::get_type() const
    {    
                return m_type;
                }

    std::string ST_HtmlFmt::toString() const
    {    
    return ST_HtmlFmt::TypeStrList[m_type];
    }

    void ST_HtmlFmt::clear()
    {    
    m_has_type = false;
    }

    void ST_HtmlFmt::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_type)
    {
    _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
    }

    const ST_HtmlFmt& ST_HtmlFmt::default_instance()
    {    
    if (!ST_HtmlFmt::default_instance_)
    {
        ST_HtmlFmt::default_instance_ = new ST_HtmlFmt();
    }
    return *ST_HtmlFmt::default_instance_;
    }

    const std::string ST_HtmlFmt::TypeStrList[] =
    {
        "none",
        "rtf",
        "all"
    };
ST_HtmlFmt* ST_HtmlFmt::default_instance_ = NULL;

    // ST_ParameterType
    ST_ParameterType::ST_ParameterType()
    :m_has_type(false)
    {
    }
    ST_ParameterType::ST_ParameterType(const ST_ParameterType::Type& _type)
    :m_has_type(true),
    m_type(_type)
    {
    }
    bool ST_ParameterType::has_type() const
    {    
    return m_has_type;
    }

    void ST_ParameterType::set_type(const ST_ParameterType::Type& _type)
    {    
    m_has_type = true;
    m_type = _type;
    }

    const ST_ParameterType::Type& ST_ParameterType::get_type() const
    {    
                return m_type;
                }

    std::string ST_ParameterType::toString() const
    {    
    return ST_ParameterType::TypeStrList[m_type];
    }

    void ST_ParameterType::clear()
    {    
    m_has_type = false;
    }

    void ST_ParameterType::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_type)
    {
    _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
    }

    const ST_ParameterType& ST_ParameterType::default_instance()
    {    
    if (!ST_ParameterType::default_instance_)
    {
        ST_ParameterType::default_instance_ = new ST_ParameterType();
    }
    return *ST_ParameterType::default_instance_;
    }

    const std::string ST_ParameterType::TypeStrList[] =
    {
        "prompt",
        "value",
        "cell"
    };
ST_ParameterType* ST_ParameterType::default_instance_ = NULL;

    // ST_FileType
    ST_FileType::ST_FileType()
    :m_has_type(false)
    {
    }
    ST_FileType::ST_FileType(const ST_FileType::Type& _type)
    :m_has_type(true),
    m_type(_type)
    {
    }
    bool ST_FileType::has_type() const
    {    
    return m_has_type;
    }

    void ST_FileType::set_type(const ST_FileType::Type& _type)
    {    
    m_has_type = true;
    m_type = _type;
    }

    const ST_FileType::Type& ST_FileType::get_type() const
    {    
                return m_type;
                }

    std::string ST_FileType::toString() const
    {    
    return ST_FileType::TypeStrList[m_type];
    }

    void ST_FileType::clear()
    {    
    m_has_type = false;
    }

    void ST_FileType::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_type)
    {
    _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
    }

    const ST_FileType& ST_FileType::default_instance()
    {    
    if (!ST_FileType::default_instance_)
    {
        ST_FileType::default_instance_ = new ST_FileType();
    }
    return *ST_FileType::default_instance_;
    }

    const std::string ST_FileType::TypeStrList[] =
    {
        "mac",
        "win",
        "dos",
        "lin",
        "other"
    };
ST_FileType* ST_FileType::default_instance_ = NULL;

    // ST_Qualifier
    ST_Qualifier::ST_Qualifier()
    :m_has_type(false)
    {
    }
    ST_Qualifier::ST_Qualifier(const ST_Qualifier::Type& _type)
    :m_has_type(true),
    m_type(_type)
    {
    }
    bool ST_Qualifier::has_type() const
    {    
    return m_has_type;
    }

    void ST_Qualifier::set_type(const ST_Qualifier::Type& _type)
    {    
    m_has_type = true;
    m_type = _type;
    }

    const ST_Qualifier::Type& ST_Qualifier::get_type() const
    {    
                return m_type;
                }

    std::string ST_Qualifier::toString() const
    {    
    return ST_Qualifier::TypeStrList[m_type];
    }

    void ST_Qualifier::clear()
    {    
    m_has_type = false;
    }

    void ST_Qualifier::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_type)
    {
    _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
    }

    const ST_Qualifier& ST_Qualifier::default_instance()
    {    
    if (!ST_Qualifier::default_instance_)
    {
        ST_Qualifier::default_instance_ = new ST_Qualifier();
    }
    return *ST_Qualifier::default_instance_;
    }

    const std::string ST_Qualifier::TypeStrList[] =
    {
        "doubleQuote",
        "singleQuote",
        "none"
    };
ST_Qualifier* ST_Qualifier::default_instance_ = NULL;

    // ST_ExternalConnectionType
    ST_ExternalConnectionType::ST_ExternalConnectionType()
    :m_has_type(false)
    {
    }
    ST_ExternalConnectionType::ST_ExternalConnectionType(const ST_ExternalConnectionType::Type& _type)
    :m_has_type(true),
    m_type(_type)
    {
    }
    bool ST_ExternalConnectionType::has_type() const
    {    
    return m_has_type;
    }

    void ST_ExternalConnectionType::set_type(const ST_ExternalConnectionType::Type& _type)
    {    
    m_has_type = true;
    m_type = _type;
    }

    const ST_ExternalConnectionType::Type& ST_ExternalConnectionType::get_type() const
    {    
                return m_type;
                }

    std::string ST_ExternalConnectionType::toString() const
    {    
    return ST_ExternalConnectionType::TypeStrList[m_type];
    }

    void ST_ExternalConnectionType::clear()
    {    
    m_has_type = false;
    }

    void ST_ExternalConnectionType::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_type)
    {
    _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
    }

    const ST_ExternalConnectionType& ST_ExternalConnectionType::default_instance()
    {    
    if (!ST_ExternalConnectionType::default_instance_)
    {
        ST_ExternalConnectionType::default_instance_ = new ST_ExternalConnectionType();
    }
    return *ST_ExternalConnectionType::default_instance_;
    }

    const std::string ST_ExternalConnectionType::TypeStrList[] =
    {
        "general",
        "text",
        "MDY",
        "DMY",
        "YMD",
        "MYD",
        "DYM",
        "YDM",
        "skip",
        "EMD"
    };
ST_ExternalConnectionType* ST_ExternalConnectionType::default_instance_ = NULL;

    // ST_SourceType
    ST_SourceType::ST_SourceType()
    :m_has_type(false)
    {
    }
    ST_SourceType::ST_SourceType(const ST_SourceType::Type& _type)
    :m_has_type(true),
    m_type(_type)
    {
    }
    bool ST_SourceType::has_type() const
    {    
    return m_has_type;
    }

    void ST_SourceType::set_type(const ST_SourceType::Type& _type)
    {    
    m_has_type = true;
    m_type = _type;
    }

    const ST_SourceType::Type& ST_SourceType::get_type() const
    {    
                return m_type;
                }

    std::string ST_SourceType::toString() const
    {    
    return ST_SourceType::TypeStrList[m_type];
    }

    void ST_SourceType::clear()
    {    
    m_has_type = false;
    }

    void ST_SourceType::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_type)
    {
    _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
    }

    const ST_SourceType& ST_SourceType::default_instance()
    {    
    if (!ST_SourceType::default_instance_)
    {
        ST_SourceType::default_instance_ = new ST_SourceType();
    }
    return *ST_SourceType::default_instance_;
    }

    const std::string ST_SourceType::TypeStrList[] =
    {
        "worksheet",
        "external",
        "consolidation",
        "scenario"
    };
ST_SourceType* ST_SourceType::default_instance_ = NULL;

    // ST_GroupBy
    ST_GroupBy::ST_GroupBy()
    :m_has_type(false)
    {
    }
    ST_GroupBy::ST_GroupBy(const ST_GroupBy::Type& _type)
    :m_has_type(true),
    m_type(_type)
    {
    }
    bool ST_GroupBy::has_type() const
    {    
    return m_has_type;
    }

    void ST_GroupBy::set_type(const ST_GroupBy::Type& _type)
    {    
    m_has_type = true;
    m_type = _type;
    }

    const ST_GroupBy::Type& ST_GroupBy::get_type() const
    {    
                return m_type;
                }

    std::string ST_GroupBy::toString() const
    {    
    return ST_GroupBy::TypeStrList[m_type];
    }

    void ST_GroupBy::clear()
    {    
    m_has_type = false;
    }

    void ST_GroupBy::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_type)
    {
    _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
    }

    const ST_GroupBy& ST_GroupBy::default_instance()
    {    
    if (!ST_GroupBy::default_instance_)
    {
        ST_GroupBy::default_instance_ = new ST_GroupBy();
    }
    return *ST_GroupBy::default_instance_;
    }

    const std::string ST_GroupBy::TypeStrList[] =
    {
        "range",
        "seconds",
        "minutes",
        "hours",
        "days",
        "months",
        "quarters",
        "years"
    };
ST_GroupBy* ST_GroupBy::default_instance_ = NULL;

    // ST_SortType
    ST_SortType::ST_SortType()
    :m_has_type(false)
    {
    }
    ST_SortType::ST_SortType(const ST_SortType::Type& _type)
    :m_has_type(true),
    m_type(_type)
    {
    }
    bool ST_SortType::has_type() const
    {    
    return m_has_type;
    }

    void ST_SortType::set_type(const ST_SortType::Type& _type)
    {    
    m_has_type = true;
    m_type = _type;
    }

    const ST_SortType::Type& ST_SortType::get_type() const
    {    
                return m_type;
                }

    std::string ST_SortType::toString() const
    {    
    return ST_SortType::TypeStrList[m_type];
    }

    void ST_SortType::clear()
    {    
    m_has_type = false;
    }

    void ST_SortType::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_type)
    {
    _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
    }

    const ST_SortType& ST_SortType::default_instance()
    {    
    if (!ST_SortType::default_instance_)
    {
        ST_SortType::default_instance_ = new ST_SortType();
    }
    return *ST_SortType::default_instance_;
    }

    const std::string ST_SortType::TypeStrList[] =
    {
        "none",
        "ascending",
        "descending",
        "ascendingAlpha",
        "descendingAlpha",
        "ascendingNatural",
        "descendingNatural"
    };
ST_SortType* ST_SortType::default_instance_ = NULL;

    // ST_Scope
    ST_Scope::ST_Scope()
    :m_has_type(false)
    {
    }
    ST_Scope::ST_Scope(const ST_Scope::Type& _type)
    :m_has_type(true),
    m_type(_type)
    {
    }
    bool ST_Scope::has_type() const
    {    
    return m_has_type;
    }

    void ST_Scope::set_type(const ST_Scope::Type& _type)
    {    
    m_has_type = true;
    m_type = _type;
    }

    const ST_Scope::Type& ST_Scope::get_type() const
    {    
                return m_type;
                }

    std::string ST_Scope::toString() const
    {    
    return ST_Scope::TypeStrList[m_type];
    }

    void ST_Scope::clear()
    {    
    m_has_type = false;
    }

    void ST_Scope::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_type)
    {
    _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
    }

    const ST_Scope& ST_Scope::default_instance()
    {    
    if (!ST_Scope::default_instance_)
    {
        ST_Scope::default_instance_ = new ST_Scope();
    }
    return *ST_Scope::default_instance_;
    }

    const std::string ST_Scope::TypeStrList[] =
    {
        "selection",
        "data",
        "field"
    };
ST_Scope* ST_Scope::default_instance_ = NULL;

    // ST_Type
    ST_Type::ST_Type()
    :m_has_type(false)
    {
    }
    ST_Type::ST_Type(const ST_Type::Type& _type)
    :m_has_type(true),
    m_type(_type)
    {
    }
    bool ST_Type::has_type() const
    {    
    return m_has_type;
    }

    void ST_Type::set_type(const ST_Type::Type& _type)
    {    
    m_has_type = true;
    m_type = _type;
    }

    const ST_Type::Type& ST_Type::get_type() const
    {    
                return m_type;
                }

    std::string ST_Type::toString() const
    {    
    return ST_Type::TypeStrList[m_type];
    }

    void ST_Type::clear()
    {    
    m_has_type = false;
    }

    void ST_Type::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_type)
    {
    _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
    }

    const ST_Type& ST_Type::default_instance()
    {    
    if (!ST_Type::default_instance_)
    {
        ST_Type::default_instance_ = new ST_Type();
    }
    return *ST_Type::default_instance_;
    }

    const std::string ST_Type::TypeStrList[] =
    {
        "none",
        "all",
        "row",
        "column"
    };
ST_Type* ST_Type::default_instance_ = NULL;

    // ST_ShowDataAs
    ST_ShowDataAs::ST_ShowDataAs()
    :m_has_type(false)
    {
    }
    ST_ShowDataAs::ST_ShowDataAs(const ST_ShowDataAs::Type& _type)
    :m_has_type(true),
    m_type(_type)
    {
    }
    bool ST_ShowDataAs::has_type() const
    {    
    return m_has_type;
    }

    void ST_ShowDataAs::set_type(const ST_ShowDataAs::Type& _type)
    {    
    m_has_type = true;
    m_type = _type;
    }

    const ST_ShowDataAs::Type& ST_ShowDataAs::get_type() const
    {    
                return m_type;
                }

    std::string ST_ShowDataAs::toString() const
    {    
    return ST_ShowDataAs::TypeStrList[m_type];
    }

    void ST_ShowDataAs::clear()
    {    
    m_has_type = false;
    }

    void ST_ShowDataAs::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_type)
    {
    _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
    }

    const ST_ShowDataAs& ST_ShowDataAs::default_instance()
    {    
    if (!ST_ShowDataAs::default_instance_)
    {
        ST_ShowDataAs::default_instance_ = new ST_ShowDataAs();
    }
    return *ST_ShowDataAs::default_instance_;
    }

    const std::string ST_ShowDataAs::TypeStrList[] =
    {
        "normal",
        "difference",
        "percent",
        "percentDiff",
        "runTotal",
        "percentOfRow",
        "percentOfCol",
        "percentOfTotal",
        "index"
    };
ST_ShowDataAs* ST_ShowDataAs::default_instance_ = NULL;

    // ST_ItemType
    ST_ItemType::ST_ItemType()
    :m_has_type(false)
    {
    }
    ST_ItemType::ST_ItemType(const ST_ItemType::Type& _type)
    :m_has_type(true),
    m_type(_type)
    {
    }
    bool ST_ItemType::has_type() const
    {    
    return m_has_type;
    }

    void ST_ItemType::set_type(const ST_ItemType::Type& _type)
    {    
    m_has_type = true;
    m_type = _type;
    }

    const ST_ItemType::Type& ST_ItemType::get_type() const
    {    
                return m_type;
                }

    std::string ST_ItemType::toString() const
    {    
    return ST_ItemType::TypeStrList[m_type];
    }

    void ST_ItemType::clear()
    {    
    m_has_type = false;
    }

    void ST_ItemType::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_type)
    {
    _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
    }

    const ST_ItemType& ST_ItemType::default_instance()
    {    
    if (!ST_ItemType::default_instance_)
    {
        ST_ItemType::default_instance_ = new ST_ItemType();
    }
    return *ST_ItemType::default_instance_;
    }

    const std::string ST_ItemType::TypeStrList[] =
    {
        "data",
        "default",
        "sum",
        "countA",
        "avg",
        "max",
        "min",
        "product",
        "count",
        "stdDev",
        "stdDevP",
        "var",
        "varP",
        "grand",
        "blank"
    };
ST_ItemType* ST_ItemType::default_instance_ = NULL;

    // ST_FormatAction
    ST_FormatAction::ST_FormatAction()
    :m_has_type(false)
    {
    }
    ST_FormatAction::ST_FormatAction(const ST_FormatAction::Type& _type)
    :m_has_type(true),
    m_type(_type)
    {
    }
    bool ST_FormatAction::has_type() const
    {    
    return m_has_type;
    }

    void ST_FormatAction::set_type(const ST_FormatAction::Type& _type)
    {    
    m_has_type = true;
    m_type = _type;
    }

    const ST_FormatAction::Type& ST_FormatAction::get_type() const
    {    
                return m_type;
                }

    std::string ST_FormatAction::toString() const
    {    
    return ST_FormatAction::TypeStrList[m_type];
    }

    void ST_FormatAction::clear()
    {    
    m_has_type = false;
    }

    void ST_FormatAction::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_type)
    {
    _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
    }

    const ST_FormatAction& ST_FormatAction::default_instance()
    {    
    if (!ST_FormatAction::default_instance_)
    {
        ST_FormatAction::default_instance_ = new ST_FormatAction();
    }
    return *ST_FormatAction::default_instance_;
    }

    const std::string ST_FormatAction::TypeStrList[] =
    {
        "blank",
        "formatting",
        "drill",
        "formula"
    };
ST_FormatAction* ST_FormatAction::default_instance_ = NULL;

    // ST_FieldSortType
    ST_FieldSortType::ST_FieldSortType()
    :m_has_type(false)
    {
    }
    ST_FieldSortType::ST_FieldSortType(const ST_FieldSortType::Type& _type)
    :m_has_type(true),
    m_type(_type)
    {
    }
    bool ST_FieldSortType::has_type() const
    {    
    return m_has_type;
    }

    void ST_FieldSortType::set_type(const ST_FieldSortType::Type& _type)
    {    
    m_has_type = true;
    m_type = _type;
    }

    const ST_FieldSortType::Type& ST_FieldSortType::get_type() const
    {    
                return m_type;
                }

    std::string ST_FieldSortType::toString() const
    {    
    return ST_FieldSortType::TypeStrList[m_type];
    }

    void ST_FieldSortType::clear()
    {    
    m_has_type = false;
    }

    void ST_FieldSortType::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_type)
    {
    _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
    }

    const ST_FieldSortType& ST_FieldSortType::default_instance()
    {    
    if (!ST_FieldSortType::default_instance_)
    {
        ST_FieldSortType::default_instance_ = new ST_FieldSortType();
    }
    return *ST_FieldSortType::default_instance_;
    }

    const std::string ST_FieldSortType::TypeStrList[] =
    {
        "manual",
        "ascending",
        "descending"
    };
ST_FieldSortType* ST_FieldSortType::default_instance_ = NULL;

    // ST_PivotFilterType
    ST_PivotFilterType::ST_PivotFilterType()
    :m_has_type(false)
    {
    }
    ST_PivotFilterType::ST_PivotFilterType(const ST_PivotFilterType::Type& _type)
    :m_has_type(true),
    m_type(_type)
    {
    }
    bool ST_PivotFilterType::has_type() const
    {    
    return m_has_type;
    }

    void ST_PivotFilterType::set_type(const ST_PivotFilterType::Type& _type)
    {    
    m_has_type = true;
    m_type = _type;
    }

    const ST_PivotFilterType::Type& ST_PivotFilterType::get_type() const
    {    
                return m_type;
                }

    std::string ST_PivotFilterType::toString() const
    {    
    return ST_PivotFilterType::TypeStrList[m_type];
    }

    void ST_PivotFilterType::clear()
    {    
    m_has_type = false;
    }

    void ST_PivotFilterType::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_type)
    {
    _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
    }

    const ST_PivotFilterType& ST_PivotFilterType::default_instance()
    {    
    if (!ST_PivotFilterType::default_instance_)
    {
        ST_PivotFilterType::default_instance_ = new ST_PivotFilterType();
    }
    return *ST_PivotFilterType::default_instance_;
    }

    const std::string ST_PivotFilterType::TypeStrList[] =
    {
        "unknown",
        "count",
        "percent",
        "sum",
        "captionEqual",
        "captionNotEqual",
        "captionBeginsWith",
        "captionNotBeginsWith",
        "captionEndsWith",
        "captionNotEndsWith",
        "captionContains",
        "captionNotContains",
        "captionGreaterThan",
        "captionGreaterThanOrEqual",
        "captionLessThan",
        "captionLessThanOrEqual",
        "captionBetween",
        "captionNotBetween",
        "valueEqual",
        "valueNotEqual",
        "valueGreaterThan",
        "valueGreaterThanOrEqual",
        "valueLessThan",
        "valueLessThanOrEqual",
        "valueBetween",
        "valueNotBetween",
        "dateEqual",
        "dateNotEqual",
        "dateOlderThan",
        "dateOlderThanOrEqual",
        "dateNewerThan",
        "dateNewerThanOrEqual",
        "dateBetween",
        "dateNotBetween",
        "tomorrow",
        "today",
        "yesterday",
        "nextWeek",
        "thisWeek",
        "lastWeek",
        "nextMonth",
        "thisMonth",
        "lastMonth",
        "nextQuarter",
        "thisQuarter",
        "lastQuarter",
        "nextYear",
        "thisYear",
        "lastYear",
        "yearToDate",
        "Q1",
        "Q2",
        "Q3",
        "Q4",
        "M1",
        "M2",
        "M3",
        "M4",
        "M5",
        "M6",
        "M7",
        "M8",
        "M9",
        "M10",
        "M11",
        "M12"
    };
ST_PivotFilterType* ST_PivotFilterType::default_instance_ = NULL;

    // ST_PivotAreaType
    ST_PivotAreaType::ST_PivotAreaType()
    :m_has_type(false)
    {
    }
    ST_PivotAreaType::ST_PivotAreaType(const ST_PivotAreaType::Type& _type)
    :m_has_type(true),
    m_type(_type)
    {
    }
    bool ST_PivotAreaType::has_type() const
    {    
    return m_has_type;
    }

    void ST_PivotAreaType::set_type(const ST_PivotAreaType::Type& _type)
    {    
    m_has_type = true;
    m_type = _type;
    }

    const ST_PivotAreaType::Type& ST_PivotAreaType::get_type() const
    {    
                return m_type;
                }

    std::string ST_PivotAreaType::toString() const
    {    
    return ST_PivotAreaType::TypeStrList[m_type];
    }

    void ST_PivotAreaType::clear()
    {    
    m_has_type = false;
    }

    void ST_PivotAreaType::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_type)
    {
    _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
    }

    const ST_PivotAreaType& ST_PivotAreaType::default_instance()
    {    
    if (!ST_PivotAreaType::default_instance_)
    {
        ST_PivotAreaType::default_instance_ = new ST_PivotAreaType();
    }
    return *ST_PivotAreaType::default_instance_;
    }

    const std::string ST_PivotAreaType::TypeStrList[] =
    {
        "none",
        "normal",
        "data",
        "all",
        "origin",
        "button",
        "topEnd",
        "topRight"
    };
ST_PivotAreaType* ST_PivotAreaType::default_instance_ = NULL;

    // ST_Axis
    ST_Axis::ST_Axis()
    :m_has_type(false)
    {
    }
    ST_Axis::ST_Axis(const ST_Axis::Type& _type)
    :m_has_type(true),
    m_type(_type)
    {
    }
    bool ST_Axis::has_type() const
    {    
    return m_has_type;
    }

    void ST_Axis::set_type(const ST_Axis::Type& _type)
    {    
    m_has_type = true;
    m_type = _type;
    }

    const ST_Axis::Type& ST_Axis::get_type() const
    {    
                return m_type;
                }

    std::string ST_Axis::toString() const
    {    
    return ST_Axis::TypeStrList[m_type];
    }

    void ST_Axis::clear()
    {    
    m_has_type = false;
    }

    void ST_Axis::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_type)
    {
    _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
    }

    const ST_Axis& ST_Axis::default_instance()
    {    
    if (!ST_Axis::default_instance_)
    {
        ST_Axis::default_instance_ = new ST_Axis();
    }
    return *ST_Axis::default_instance_;
    }

    const std::string ST_Axis::TypeStrList[] =
    {
        "axisRow",
        "axisCol",
        "axisPage",
        "axisValues"
    };
ST_Axis* ST_Axis::default_instance_ = NULL;

    // ST_GrowShrinkType
    ST_GrowShrinkType::ST_GrowShrinkType()
    :m_has_type(false)
    {
    }
    ST_GrowShrinkType::ST_GrowShrinkType(const ST_GrowShrinkType::Type& _type)
    :m_has_type(true),
    m_type(_type)
    {
    }
    bool ST_GrowShrinkType::has_type() const
    {    
    return m_has_type;
    }

    void ST_GrowShrinkType::set_type(const ST_GrowShrinkType::Type& _type)
    {    
    m_has_type = true;
    m_type = _type;
    }

    const ST_GrowShrinkType::Type& ST_GrowShrinkType::get_type() const
    {    
                return m_type;
                }

    std::string ST_GrowShrinkType::toString() const
    {    
    return ST_GrowShrinkType::TypeStrList[m_type];
    }

    void ST_GrowShrinkType::clear()
    {    
    m_has_type = false;
    }

    void ST_GrowShrinkType::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_type)
    {
    _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
    }

    const ST_GrowShrinkType& ST_GrowShrinkType::default_instance()
    {    
    if (!ST_GrowShrinkType::default_instance_)
    {
        ST_GrowShrinkType::default_instance_ = new ST_GrowShrinkType();
    }
    return *ST_GrowShrinkType::default_instance_;
    }

    const std::string ST_GrowShrinkType::TypeStrList[] =
    {
        "insertDelete",
        "insertClear",
        "overwriteClear"
    };
ST_GrowShrinkType* ST_GrowShrinkType::default_instance_ = NULL;

    // ST_PhoneticType
    ST_PhoneticType::ST_PhoneticType()
    :m_has_type(false)
    {
    }
    ST_PhoneticType::ST_PhoneticType(const ST_PhoneticType::Type& _type)
    :m_has_type(true),
    m_type(_type)
    {
    }
    bool ST_PhoneticType::has_type() const
    {    
    return m_has_type;
    }

    void ST_PhoneticType::set_type(const ST_PhoneticType::Type& _type)
    {    
    m_has_type = true;
    m_type = _type;
    }

    const ST_PhoneticType::Type& ST_PhoneticType::get_type() const
    {    
                return m_type;
                }

    std::string ST_PhoneticType::toString() const
    {    
    return ST_PhoneticType::TypeStrList[m_type];
    }

    void ST_PhoneticType::clear()
    {    
    m_has_type = false;
    }

    void ST_PhoneticType::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_type)
    {
    _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
    }

    const ST_PhoneticType& ST_PhoneticType::default_instance()
    {    
    if (!ST_PhoneticType::default_instance_)
    {
        ST_PhoneticType::default_instance_ = new ST_PhoneticType();
    }
    return *ST_PhoneticType::default_instance_;
    }

    const std::string ST_PhoneticType::TypeStrList[] =
    {
        "halfwidthKatakana",
        "fullwidthKatakana",
        "Hiragana",
        "noConversion"
    };
ST_PhoneticType* ST_PhoneticType::default_instance_ = NULL;

    // ST_PhoneticAlignment
    ST_PhoneticAlignment::ST_PhoneticAlignment()
    :m_has_type(false)
    {
    }
    ST_PhoneticAlignment::ST_PhoneticAlignment(const ST_PhoneticAlignment::Type& _type)
    :m_has_type(true),
    m_type(_type)
    {
    }
    bool ST_PhoneticAlignment::has_type() const
    {    
    return m_has_type;
    }

    void ST_PhoneticAlignment::set_type(const ST_PhoneticAlignment::Type& _type)
    {    
    m_has_type = true;
    m_type = _type;
    }

    const ST_PhoneticAlignment::Type& ST_PhoneticAlignment::get_type() const
    {    
                return m_type;
                }

    std::string ST_PhoneticAlignment::toString() const
    {    
    return ST_PhoneticAlignment::TypeStrList[m_type];
    }

    void ST_PhoneticAlignment::clear()
    {    
    m_has_type = false;
    }

    void ST_PhoneticAlignment::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_type)
    {
    _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
    }

    const ST_PhoneticAlignment& ST_PhoneticAlignment::default_instance()
    {    
    if (!ST_PhoneticAlignment::default_instance_)
    {
        ST_PhoneticAlignment::default_instance_ = new ST_PhoneticAlignment();
    }
    return *ST_PhoneticAlignment::default_instance_;
    }

    const std::string ST_PhoneticAlignment::TypeStrList[] =
    {
        "noControl",
        "left",
        "center",
        "distributed"
    };
ST_PhoneticAlignment* ST_PhoneticAlignment::default_instance_ = NULL;

    // ST_rwColActionType
    ST_rwColActionType::ST_rwColActionType()
    :m_has_type(false)
    {
    }
    ST_rwColActionType::ST_rwColActionType(const ST_rwColActionType::Type& _type)
    :m_has_type(true),
    m_type(_type)
    {
    }
    bool ST_rwColActionType::has_type() const
    {    
    return m_has_type;
    }

    void ST_rwColActionType::set_type(const ST_rwColActionType::Type& _type)
    {    
    m_has_type = true;
    m_type = _type;
    }

    const ST_rwColActionType::Type& ST_rwColActionType::get_type() const
    {    
                return m_type;
                }

    std::string ST_rwColActionType::toString() const
    {    
    return ST_rwColActionType::TypeStrList[m_type];
    }

    void ST_rwColActionType::clear()
    {    
    m_has_type = false;
    }

    void ST_rwColActionType::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_type)
    {
    _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
    }

    const ST_rwColActionType& ST_rwColActionType::default_instance()
    {    
    if (!ST_rwColActionType::default_instance_)
    {
        ST_rwColActionType::default_instance_ = new ST_rwColActionType();
    }
    return *ST_rwColActionType::default_instance_;
    }

    const std::string ST_rwColActionType::TypeStrList[] =
    {
        "insertRow",
        "deleteRow",
        "insertCol",
        "deleteCol"
    };
ST_rwColActionType* ST_rwColActionType::default_instance_ = NULL;

    // ST_RevisionAction
    ST_RevisionAction::ST_RevisionAction()
    :m_has_type(false)
    {
    }
    ST_RevisionAction::ST_RevisionAction(const ST_RevisionAction::Type& _type)
    :m_has_type(true),
    m_type(_type)
    {
    }
    bool ST_RevisionAction::has_type() const
    {    
    return m_has_type;
    }

    void ST_RevisionAction::set_type(const ST_RevisionAction::Type& _type)
    {    
    m_has_type = true;
    m_type = _type;
    }

    const ST_RevisionAction::Type& ST_RevisionAction::get_type() const
    {    
                return m_type;
                }

    std::string ST_RevisionAction::toString() const
    {    
    return ST_RevisionAction::TypeStrList[m_type];
    }

    void ST_RevisionAction::clear()
    {    
    m_has_type = false;
    }

    void ST_RevisionAction::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_type)
    {
    _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
    }

    const ST_RevisionAction& ST_RevisionAction::default_instance()
    {    
    if (!ST_RevisionAction::default_instance_)
    {
        ST_RevisionAction::default_instance_ = new ST_RevisionAction();
    }
    return *ST_RevisionAction::default_instance_;
    }

    const std::string ST_RevisionAction::TypeStrList[] =
    {
        "add",
        "delete"
    };
ST_RevisionAction* ST_RevisionAction::default_instance_ = NULL;

    // ST_FormulaExpression
    ST_FormulaExpression::ST_FormulaExpression()
    :m_has_type(false)
    {
    }
    ST_FormulaExpression::ST_FormulaExpression(const ST_FormulaExpression::Type& _type)
    :m_has_type(true),
    m_type(_type)
    {
    }
    bool ST_FormulaExpression::has_type() const
    {    
    return m_has_type;
    }

    void ST_FormulaExpression::set_type(const ST_FormulaExpression::Type& _type)
    {    
    m_has_type = true;
    m_type = _type;
    }

    const ST_FormulaExpression::Type& ST_FormulaExpression::get_type() const
    {    
                return m_type;
                }

    std::string ST_FormulaExpression::toString() const
    {    
    return ST_FormulaExpression::TypeStrList[m_type];
    }

    void ST_FormulaExpression::clear()
    {    
    m_has_type = false;
    }

    void ST_FormulaExpression::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_type)
    {
    _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
    }

    const ST_FormulaExpression& ST_FormulaExpression::default_instance()
    {    
    if (!ST_FormulaExpression::default_instance_)
    {
        ST_FormulaExpression::default_instance_ = new ST_FormulaExpression();
    }
    return *ST_FormulaExpression::default_instance_;
    }

    const std::string ST_FormulaExpression::TypeStrList[] =
    {
        "ref",
        "refError",
        "area",
        "areaError",
        "computedArea"
    };
ST_FormulaExpression* ST_FormulaExpression::default_instance_ = NULL;

    // ST_CellSpan
    ST_CellSpan::ST_CellSpan()
    :m_has_string(false),
    m_string("")
    {
    }
    ST_CellSpan::ST_CellSpan(const XSD::string_& _string)
    :m_has_string(true)
    {
    
    set_string(_string);
    }
    bool ST_CellSpan::has_string() const
    {    
    return m_has_string;
    }

    void ST_CellSpan::set_string(const XSD::string_& _string)
    {    
    m_has_string = true;
    m_string = _string;
    }

    const XSD::string_& ST_CellSpan::get_string() const
    {    
    return m_string;
    }

    void ST_CellSpan::clear()
    {    
    m_has_string = false;
    m_string.clear();;
    }

    void ST_CellSpan::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_string)
    {
        _outStream << " " << _attrName << "=\"" << m_string << "\"";;
    }
    }

    const ST_CellSpan& ST_CellSpan::default_instance()
    {    
    if (!ST_CellSpan::default_instance_)
    {
        ST_CellSpan::default_instance_ = new ST_CellSpan();
    }
    return *ST_CellSpan::default_instance_;
    }

    std::string ST_CellSpan::toString() const
    {    
    std::stringstream strStream;
    strStream << get_string();
    return strStream.str();
    }

ST_CellSpan* ST_CellSpan::default_instance_ = NULL;

    // ST_CellSpans
    ST_CellSpans::ST_CellSpans()
    :m_has_ENTITIES(false),
    m_ENTITIES("")
    {
    }
    ST_CellSpans::ST_CellSpans(const XSD::ENTITIES_& _ENTITIES)
    :m_has_ENTITIES(true)
    {
    
    set_ENTITIES(_ENTITIES);
    }
    bool ST_CellSpans::has_ENTITIES() const
    {    
    return m_has_ENTITIES;
    }

    void ST_CellSpans::set_ENTITIES(const XSD::ENTITIES_& _ENTITIES)
    {    
    m_has_ENTITIES = true;
    m_ENTITIES = _ENTITIES;
    }

    const XSD::ENTITIES_& ST_CellSpans::get_ENTITIES() const
    {    
    return m_ENTITIES;
    }

    void ST_CellSpans::clear()
    {    
    m_has_ENTITIES = false;
    m_ENTITIES.clear();;
    }

    void ST_CellSpans::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_ENTITIES)
    {
        _outStream << " " << _attrName << "=\"" << m_ENTITIES << "\"";;
    }
    }

    const ST_CellSpans& ST_CellSpans::default_instance()
    {    
    if (!ST_CellSpans::default_instance_)
    {
        ST_CellSpans::default_instance_ = new ST_CellSpans();
    }
    return *ST_CellSpans::default_instance_;
    }

    std::string ST_CellSpans::toString() const
    {    
    std::stringstream strStream;
    strStream << get_ENTITIES();
    return strStream.str();
    }

ST_CellSpans* ST_CellSpans::default_instance_ = NULL;

    // ST_CellType
    ST_CellType::ST_CellType()
    :m_has_type(false)
    {
    }
    ST_CellType::ST_CellType(const ST_CellType::Type& _type)
    :m_has_type(true),
    m_type(_type)
    {
    }
    bool ST_CellType::has_type() const
    {    
    return m_has_type;
    }

    void ST_CellType::set_type(const ST_CellType::Type& _type)
    {    
    m_has_type = true;
    m_type = _type;
    }

    const ST_CellType::Type& ST_CellType::get_type() const
    {    
                return m_type;
                }

    std::string ST_CellType::toString() const
    {    
    return ST_CellType::TypeStrList[m_type];
    }

    void ST_CellType::clear()
    {    
    m_has_type = false;
    }

    void ST_CellType::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_type)
    {
    _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
    }

    const ST_CellType& ST_CellType::default_instance()
    {    
    if (!ST_CellType::default_instance_)
    {
        ST_CellType::default_instance_ = new ST_CellType();
    }
    return *ST_CellType::default_instance_;
    }

    const std::string ST_CellType::TypeStrList[] =
    {
        "b",
        "n",
        "e",
        "s",
        "str",
        "inlineStr"
    };
ST_CellType* ST_CellType::default_instance_ = NULL;

    // ST_CellFormulaType
    ST_CellFormulaType::ST_CellFormulaType()
    :m_has_type(false)
    {
    }
    ST_CellFormulaType::ST_CellFormulaType(const ST_CellFormulaType::Type& _type)
    :m_has_type(true),
    m_type(_type)
    {
    }
    bool ST_CellFormulaType::has_type() const
    {    
    return m_has_type;
    }

    void ST_CellFormulaType::set_type(const ST_CellFormulaType::Type& _type)
    {    
    m_has_type = true;
    m_type = _type;
    }

    const ST_CellFormulaType::Type& ST_CellFormulaType::get_type() const
    {    
                return m_type;
                }

    std::string ST_CellFormulaType::toString() const
    {    
    return ST_CellFormulaType::TypeStrList[m_type];
    }

    void ST_CellFormulaType::clear()
    {    
    m_has_type = false;
    }

    void ST_CellFormulaType::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_type)
    {
    _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
    }

    const ST_CellFormulaType& ST_CellFormulaType::default_instance()
    {    
    if (!ST_CellFormulaType::default_instance_)
    {
        ST_CellFormulaType::default_instance_ = new ST_CellFormulaType();
    }
    return *ST_CellFormulaType::default_instance_;
    }

    const std::string ST_CellFormulaType::TypeStrList[] =
    {
        "normal",
        "array",
        "dataTable",
        "shared"
    };
ST_CellFormulaType* ST_CellFormulaType::default_instance_ = NULL;

    // ST_Pane
    ST_Pane::ST_Pane()
    :m_has_type(false)
    {
    }
    ST_Pane::ST_Pane(const ST_Pane::Type& _type)
    :m_has_type(true),
    m_type(_type)
    {
    }
    bool ST_Pane::has_type() const
    {    
    return m_has_type;
    }

    void ST_Pane::set_type(const ST_Pane::Type& _type)
    {    
    m_has_type = true;
    m_type = _type;
    }

    const ST_Pane::Type& ST_Pane::get_type() const
    {    
                return m_type;
                }

    std::string ST_Pane::toString() const
    {    
    return ST_Pane::TypeStrList[m_type];
    }

    void ST_Pane::clear()
    {    
    m_has_type = false;
    }

    void ST_Pane::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_type)
    {
    _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
    }

    const ST_Pane& ST_Pane::default_instance()
    {    
    if (!ST_Pane::default_instance_)
    {
        ST_Pane::default_instance_ = new ST_Pane();
    }
    return *ST_Pane::default_instance_;
    }

    const std::string ST_Pane::TypeStrList[] =
    {
        "bottomRight",
        "topRight",
        "bottomLeft",
        "topLeft"
    };
ST_Pane* ST_Pane::default_instance_ = NULL;

    // ST_SheetViewType
    ST_SheetViewType::ST_SheetViewType()
    :m_has_type(false)
    {
    }
    ST_SheetViewType::ST_SheetViewType(const ST_SheetViewType::Type& _type)
    :m_has_type(true),
    m_type(_type)
    {
    }
    bool ST_SheetViewType::has_type() const
    {    
    return m_has_type;
    }

    void ST_SheetViewType::set_type(const ST_SheetViewType::Type& _type)
    {    
    m_has_type = true;
    m_type = _type;
    }

    const ST_SheetViewType::Type& ST_SheetViewType::get_type() const
    {    
                return m_type;
                }

    std::string ST_SheetViewType::toString() const
    {    
    return ST_SheetViewType::TypeStrList[m_type];
    }

    void ST_SheetViewType::clear()
    {    
    m_has_type = false;
    }

    void ST_SheetViewType::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_type)
    {
    _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
    }

    const ST_SheetViewType& ST_SheetViewType::default_instance()
    {    
    if (!ST_SheetViewType::default_instance_)
    {
        ST_SheetViewType::default_instance_ = new ST_SheetViewType();
    }
    return *ST_SheetViewType::default_instance_;
    }

    const std::string ST_SheetViewType::TypeStrList[] =
    {
        "normal",
        "pageBreakPreview",
        "pageLayout"
    };
ST_SheetViewType* ST_SheetViewType::default_instance_ = NULL;

    // ST_DataConsolidateFunction
    ST_DataConsolidateFunction::ST_DataConsolidateFunction()
    :m_has_type(false)
    {
    }
    ST_DataConsolidateFunction::ST_DataConsolidateFunction(const ST_DataConsolidateFunction::Type& _type)
    :m_has_type(true),
    m_type(_type)
    {
    }
    bool ST_DataConsolidateFunction::has_type() const
    {    
    return m_has_type;
    }

    void ST_DataConsolidateFunction::set_type(const ST_DataConsolidateFunction::Type& _type)
    {    
    m_has_type = true;
    m_type = _type;
    }

    const ST_DataConsolidateFunction::Type& ST_DataConsolidateFunction::get_type() const
    {    
                return m_type;
                }

    std::string ST_DataConsolidateFunction::toString() const
    {    
    return ST_DataConsolidateFunction::TypeStrList[m_type];
    }

    void ST_DataConsolidateFunction::clear()
    {    
    m_has_type = false;
    }

    void ST_DataConsolidateFunction::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_type)
    {
    _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
    }

    const ST_DataConsolidateFunction& ST_DataConsolidateFunction::default_instance()
    {    
    if (!ST_DataConsolidateFunction::default_instance_)
    {
        ST_DataConsolidateFunction::default_instance_ = new ST_DataConsolidateFunction();
    }
    return *ST_DataConsolidateFunction::default_instance_;
    }

    const std::string ST_DataConsolidateFunction::TypeStrList[] =
    {
        "average",
        "count",
        "countNums",
        "max",
        "min",
        "product",
        "stdDev",
        "stdDevp",
        "sum",
        "var",
        "varp"
    };
ST_DataConsolidateFunction* ST_DataConsolidateFunction::default_instance_ = NULL;

    // ST_DataValidationType
    ST_DataValidationType::ST_DataValidationType()
    :m_has_type(false)
    {
    }
    ST_DataValidationType::ST_DataValidationType(const ST_DataValidationType::Type& _type)
    :m_has_type(true),
    m_type(_type)
    {
    }
    bool ST_DataValidationType::has_type() const
    {    
    return m_has_type;
    }

    void ST_DataValidationType::set_type(const ST_DataValidationType::Type& _type)
    {    
    m_has_type = true;
    m_type = _type;
    }

    const ST_DataValidationType::Type& ST_DataValidationType::get_type() const
    {    
                return m_type;
                }

    std::string ST_DataValidationType::toString() const
    {    
    return ST_DataValidationType::TypeStrList[m_type];
    }

    void ST_DataValidationType::clear()
    {    
    m_has_type = false;
    }

    void ST_DataValidationType::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_type)
    {
    _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
    }

    const ST_DataValidationType& ST_DataValidationType::default_instance()
    {    
    if (!ST_DataValidationType::default_instance_)
    {
        ST_DataValidationType::default_instance_ = new ST_DataValidationType();
    }
    return *ST_DataValidationType::default_instance_;
    }

    const std::string ST_DataValidationType::TypeStrList[] =
    {
        "none",
        "whole",
        "decimal",
        "list",
        "date",
        "time",
        "textLength",
        "custom"
    };
ST_DataValidationType* ST_DataValidationType::default_instance_ = NULL;

    // ST_DataValidationOperator
    ST_DataValidationOperator::ST_DataValidationOperator()
    :m_has_type(false)
    {
    }
    ST_DataValidationOperator::ST_DataValidationOperator(const ST_DataValidationOperator::Type& _type)
    :m_has_type(true),
    m_type(_type)
    {
    }
    bool ST_DataValidationOperator::has_type() const
    {    
    return m_has_type;
    }

    void ST_DataValidationOperator::set_type(const ST_DataValidationOperator::Type& _type)
    {    
    m_has_type = true;
    m_type = _type;
    }

    const ST_DataValidationOperator::Type& ST_DataValidationOperator::get_type() const
    {    
                return m_type;
                }

    std::string ST_DataValidationOperator::toString() const
    {    
    return ST_DataValidationOperator::TypeStrList[m_type];
    }

    void ST_DataValidationOperator::clear()
    {    
    m_has_type = false;
    }

    void ST_DataValidationOperator::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_type)
    {
    _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
    }

    const ST_DataValidationOperator& ST_DataValidationOperator::default_instance()
    {    
    if (!ST_DataValidationOperator::default_instance_)
    {
        ST_DataValidationOperator::default_instance_ = new ST_DataValidationOperator();
    }
    return *ST_DataValidationOperator::default_instance_;
    }

    const std::string ST_DataValidationOperator::TypeStrList[] =
    {
        "between",
        "notBetween",
        "equal",
        "notEqual",
        "lessThan",
        "lessThanOrEqual",
        "greaterThan",
        "greaterThanOrEqual"
    };
ST_DataValidationOperator* ST_DataValidationOperator::default_instance_ = NULL;

    // ST_DataValidationErrorStyle
    ST_DataValidationErrorStyle::ST_DataValidationErrorStyle()
    :m_has_type(false)
    {
    }
    ST_DataValidationErrorStyle::ST_DataValidationErrorStyle(const ST_DataValidationErrorStyle::Type& _type)
    :m_has_type(true),
    m_type(_type)
    {
    }
    bool ST_DataValidationErrorStyle::has_type() const
    {    
    return m_has_type;
    }

    void ST_DataValidationErrorStyle::set_type(const ST_DataValidationErrorStyle::Type& _type)
    {    
    m_has_type = true;
    m_type = _type;
    }

    const ST_DataValidationErrorStyle::Type& ST_DataValidationErrorStyle::get_type() const
    {    
                return m_type;
                }

    std::string ST_DataValidationErrorStyle::toString() const
    {    
    return ST_DataValidationErrorStyle::TypeStrList[m_type];
    }

    void ST_DataValidationErrorStyle::clear()
    {    
    m_has_type = false;
    }

    void ST_DataValidationErrorStyle::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_type)
    {
    _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
    }

    const ST_DataValidationErrorStyle& ST_DataValidationErrorStyle::default_instance()
    {    
    if (!ST_DataValidationErrorStyle::default_instance_)
    {
        ST_DataValidationErrorStyle::default_instance_ = new ST_DataValidationErrorStyle();
    }
    return *ST_DataValidationErrorStyle::default_instance_;
    }

    const std::string ST_DataValidationErrorStyle::TypeStrList[] =
    {
        "stop",
        "warning",
        "information"
    };
ST_DataValidationErrorStyle* ST_DataValidationErrorStyle::default_instance_ = NULL;

    // ST_DataValidationImeMode
    ST_DataValidationImeMode::ST_DataValidationImeMode()
    :m_has_type(false)
    {
    }
    ST_DataValidationImeMode::ST_DataValidationImeMode(const ST_DataValidationImeMode::Type& _type)
    :m_has_type(true),
    m_type(_type)
    {
    }
    bool ST_DataValidationImeMode::has_type() const
    {    
    return m_has_type;
    }

    void ST_DataValidationImeMode::set_type(const ST_DataValidationImeMode::Type& _type)
    {    
    m_has_type = true;
    m_type = _type;
    }

    const ST_DataValidationImeMode::Type& ST_DataValidationImeMode::get_type() const
    {    
                return m_type;
                }

    std::string ST_DataValidationImeMode::toString() const
    {    
    return ST_DataValidationImeMode::TypeStrList[m_type];
    }

    void ST_DataValidationImeMode::clear()
    {    
    m_has_type = false;
    }

    void ST_DataValidationImeMode::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_type)
    {
    _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
    }

    const ST_DataValidationImeMode& ST_DataValidationImeMode::default_instance()
    {    
    if (!ST_DataValidationImeMode::default_instance_)
    {
        ST_DataValidationImeMode::default_instance_ = new ST_DataValidationImeMode();
    }
    return *ST_DataValidationImeMode::default_instance_;
    }

    const std::string ST_DataValidationImeMode::TypeStrList[] =
    {
        "noControl",
        "off",
        "on",
        "disabled",
        "hiragana",
        "fullKatakana",
        "halfKatakana",
        "fullAlpha",
        "halfAlpha",
        "fullHangul",
        "halfHangul"
    };
ST_DataValidationImeMode* ST_DataValidationImeMode::default_instance_ = NULL;

    // ST_CfType
    ST_CfType::ST_CfType()
    :m_has_type(false)
    {
    }
    ST_CfType::ST_CfType(const ST_CfType::Type& _type)
    :m_has_type(true),
    m_type(_type)
    {
    }
    bool ST_CfType::has_type() const
    {    
    return m_has_type;
    }

    void ST_CfType::set_type(const ST_CfType::Type& _type)
    {    
    m_has_type = true;
    m_type = _type;
    }

    const ST_CfType::Type& ST_CfType::get_type() const
    {    
                return m_type;
                }

    std::string ST_CfType::toString() const
    {    
    return ST_CfType::TypeStrList[m_type];
    }

    void ST_CfType::clear()
    {    
    m_has_type = false;
    }

    void ST_CfType::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_type)
    {
    _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
    }

    const ST_CfType& ST_CfType::default_instance()
    {    
    if (!ST_CfType::default_instance_)
    {
        ST_CfType::default_instance_ = new ST_CfType();
    }
    return *ST_CfType::default_instance_;
    }

    const std::string ST_CfType::TypeStrList[] =
    {
        "expression",
        "cellIs",
        "colorScale",
        "dataBar",
        "iconSet",
        "top10",
        "uniqueValues",
        "duplicateValues",
        "containsText",
        "notContainsText",
        "beginsWith",
        "endsWith",
        "containsBlanks",
        "notContainsBlanks",
        "containsErrors",
        "notContainsErrors",
        "timePeriod",
        "aboveAverage"
    };
ST_CfType* ST_CfType::default_instance_ = NULL;

    // ST_TimePeriod
    ST_TimePeriod::ST_TimePeriod()
    :m_has_type(false)
    {
    }
    ST_TimePeriod::ST_TimePeriod(const ST_TimePeriod::Type& _type)
    :m_has_type(true),
    m_type(_type)
    {
    }
    bool ST_TimePeriod::has_type() const
    {    
    return m_has_type;
    }

    void ST_TimePeriod::set_type(const ST_TimePeriod::Type& _type)
    {    
    m_has_type = true;
    m_type = _type;
    }

    const ST_TimePeriod::Type& ST_TimePeriod::get_type() const
    {    
                return m_type;
                }

    std::string ST_TimePeriod::toString() const
    {    
    return ST_TimePeriod::TypeStrList[m_type];
    }

    void ST_TimePeriod::clear()
    {    
    m_has_type = false;
    }

    void ST_TimePeriod::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_type)
    {
    _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
    }

    const ST_TimePeriod& ST_TimePeriod::default_instance()
    {    
    if (!ST_TimePeriod::default_instance_)
    {
        ST_TimePeriod::default_instance_ = new ST_TimePeriod();
    }
    return *ST_TimePeriod::default_instance_;
    }

    const std::string ST_TimePeriod::TypeStrList[] =
    {
        "today",
        "yesterday",
        "tomorrow",
        "last7Days",
        "thisMonth",
        "lastMonth",
        "nextMonth",
        "thisWeek",
        "lastWeek",
        "nextWeek"
    };
ST_TimePeriod* ST_TimePeriod::default_instance_ = NULL;

    // ST_ConditionalFormattingOperator
    ST_ConditionalFormattingOperator::ST_ConditionalFormattingOperator()
    :m_has_type(false)
    {
    }
    ST_ConditionalFormattingOperator::ST_ConditionalFormattingOperator(const ST_ConditionalFormattingOperator::Type& _type)
    :m_has_type(true),
    m_type(_type)
    {
    }
    bool ST_ConditionalFormattingOperator::has_type() const
    {    
    return m_has_type;
    }

    void ST_ConditionalFormattingOperator::set_type(const ST_ConditionalFormattingOperator::Type& _type)
    {    
    m_has_type = true;
    m_type = _type;
    }

    const ST_ConditionalFormattingOperator::Type& ST_ConditionalFormattingOperator::get_type() const
    {    
                return m_type;
                }

    std::string ST_ConditionalFormattingOperator::toString() const
    {    
    return ST_ConditionalFormattingOperator::TypeStrList[m_type];
    }

    void ST_ConditionalFormattingOperator::clear()
    {    
    m_has_type = false;
    }

    void ST_ConditionalFormattingOperator::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_type)
    {
    _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
    }

    const ST_ConditionalFormattingOperator& ST_ConditionalFormattingOperator::default_instance()
    {    
    if (!ST_ConditionalFormattingOperator::default_instance_)
    {
        ST_ConditionalFormattingOperator::default_instance_ = new ST_ConditionalFormattingOperator();
    }
    return *ST_ConditionalFormattingOperator::default_instance_;
    }

    const std::string ST_ConditionalFormattingOperator::TypeStrList[] =
    {
        "lessThan",
        "lessThanOrEqual",
        "equal",
        "notEqual",
        "greaterThanOrEqual",
        "greaterThan",
        "between",
        "notBetween",
        "containsText",
        "notContains",
        "beginsWith",
        "endsWith"
    };
ST_ConditionalFormattingOperator* ST_ConditionalFormattingOperator::default_instance_ = NULL;

    // ST_CfvoType
    ST_CfvoType::ST_CfvoType()
    :m_has_type(false)
    {
    }
    ST_CfvoType::ST_CfvoType(const ST_CfvoType::Type& _type)
    :m_has_type(true),
    m_type(_type)
    {
    }
    bool ST_CfvoType::has_type() const
    {    
    return m_has_type;
    }

    void ST_CfvoType::set_type(const ST_CfvoType::Type& _type)
    {    
    m_has_type = true;
    m_type = _type;
    }

    const ST_CfvoType::Type& ST_CfvoType::get_type() const
    {    
                return m_type;
                }

    std::string ST_CfvoType::toString() const
    {    
    return ST_CfvoType::TypeStrList[m_type];
    }

    void ST_CfvoType::clear()
    {    
    m_has_type = false;
    }

    void ST_CfvoType::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_type)
    {
    _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
    }

    const ST_CfvoType& ST_CfvoType::default_instance()
    {    
    if (!ST_CfvoType::default_instance_)
    {
        ST_CfvoType::default_instance_ = new ST_CfvoType();
    }
    return *ST_CfvoType::default_instance_;
    }

    const std::string ST_CfvoType::TypeStrList[] =
    {
        "num",
        "percent",
        "max",
        "min",
        "formula",
        "percentile"
    };
ST_CfvoType* ST_CfvoType::default_instance_ = NULL;

    // ST_PageOrder
    ST_PageOrder::ST_PageOrder()
    :m_has_type(false)
    {
    }
    ST_PageOrder::ST_PageOrder(const ST_PageOrder::Type& _type)
    :m_has_type(true),
    m_type(_type)
    {
    }
    bool ST_PageOrder::has_type() const
    {    
    return m_has_type;
    }

    void ST_PageOrder::set_type(const ST_PageOrder::Type& _type)
    {    
    m_has_type = true;
    m_type = _type;
    }

    const ST_PageOrder::Type& ST_PageOrder::get_type() const
    {    
                return m_type;
                }

    std::string ST_PageOrder::toString() const
    {    
    return ST_PageOrder::TypeStrList[m_type];
    }

    void ST_PageOrder::clear()
    {    
    m_has_type = false;
    }

    void ST_PageOrder::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_type)
    {
    _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
    }

    const ST_PageOrder& ST_PageOrder::default_instance()
    {    
    if (!ST_PageOrder::default_instance_)
    {
        ST_PageOrder::default_instance_ = new ST_PageOrder();
    }
    return *ST_PageOrder::default_instance_;
    }

    const std::string ST_PageOrder::TypeStrList[] =
    {
        "downThenOver",
        "overThenDown"
    };
ST_PageOrder* ST_PageOrder::default_instance_ = NULL;

    // ST_Orientation
    ST_Orientation::ST_Orientation()
    :m_has_type(false)
    {
    }
    ST_Orientation::ST_Orientation(const ST_Orientation::Type& _type)
    :m_has_type(true),
    m_type(_type)
    {
    }
    bool ST_Orientation::has_type() const
    {    
    return m_has_type;
    }

    void ST_Orientation::set_type(const ST_Orientation::Type& _type)
    {    
    m_has_type = true;
    m_type = _type;
    }

    const ST_Orientation::Type& ST_Orientation::get_type() const
    {    
                return m_type;
                }

    std::string ST_Orientation::toString() const
    {    
    return ST_Orientation::TypeStrList[m_type];
    }

    void ST_Orientation::clear()
    {    
    m_has_type = false;
    }

    void ST_Orientation::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_type)
    {
    _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
    }

    const ST_Orientation& ST_Orientation::default_instance()
    {    
    if (!ST_Orientation::default_instance_)
    {
        ST_Orientation::default_instance_ = new ST_Orientation();
    }
    return *ST_Orientation::default_instance_;
    }

    const std::string ST_Orientation::TypeStrList[] =
    {
        "default",
        "portrait",
        "landscape"
    };
ST_Orientation* ST_Orientation::default_instance_ = NULL;

    // ST_CellComments
    ST_CellComments::ST_CellComments()
    :m_has_type(false)
    {
    }
    ST_CellComments::ST_CellComments(const ST_CellComments::Type& _type)
    :m_has_type(true),
    m_type(_type)
    {
    }
    bool ST_CellComments::has_type() const
    {    
    return m_has_type;
    }

    void ST_CellComments::set_type(const ST_CellComments::Type& _type)
    {    
    m_has_type = true;
    m_type = _type;
    }

    const ST_CellComments::Type& ST_CellComments::get_type() const
    {    
                return m_type;
                }

    std::string ST_CellComments::toString() const
    {    
    return ST_CellComments::TypeStrList[m_type];
    }

    void ST_CellComments::clear()
    {    
    m_has_type = false;
    }

    void ST_CellComments::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_type)
    {
    _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
    }

    const ST_CellComments& ST_CellComments::default_instance()
    {    
    if (!ST_CellComments::default_instance_)
    {
        ST_CellComments::default_instance_ = new ST_CellComments();
    }
    return *ST_CellComments::default_instance_;
    }

    const std::string ST_CellComments::TypeStrList[] =
    {
        "none",
        "asDisplayed",
        "atEnd"
    };
ST_CellComments* ST_CellComments::default_instance_ = NULL;

    // ST_PrintError
    ST_PrintError::ST_PrintError()
    :m_has_type(false)
    {
    }
    ST_PrintError::ST_PrintError(const ST_PrintError::Type& _type)
    :m_has_type(true),
    m_type(_type)
    {
    }
    bool ST_PrintError::has_type() const
    {    
    return m_has_type;
    }

    void ST_PrintError::set_type(const ST_PrintError::Type& _type)
    {    
    m_has_type = true;
    m_type = _type;
    }

    const ST_PrintError::Type& ST_PrintError::get_type() const
    {    
                return m_type;
                }

    std::string ST_PrintError::toString() const
    {    
    return ST_PrintError::TypeStrList[m_type];
    }

    void ST_PrintError::clear()
    {    
    m_has_type = false;
    }

    void ST_PrintError::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_type)
    {
    _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
    }

    const ST_PrintError& ST_PrintError::default_instance()
    {    
    if (!ST_PrintError::default_instance_)
    {
        ST_PrintError::default_instance_ = new ST_PrintError();
    }
    return *ST_PrintError::default_instance_;
    }

    const std::string ST_PrintError::TypeStrList[] =
    {
        "displayed",
        "blank",
        "dash",
        "NA"
    };
ST_PrintError* ST_PrintError::default_instance_ = NULL;

    // ST_DvAspect
    ST_DvAspect::ST_DvAspect()
    :m_has_type(false)
    {
    }
    ST_DvAspect::ST_DvAspect(const ST_DvAspect::Type& _type)
    :m_has_type(true),
    m_type(_type)
    {
    }
    bool ST_DvAspect::has_type() const
    {    
    return m_has_type;
    }

    void ST_DvAspect::set_type(const ST_DvAspect::Type& _type)
    {    
    m_has_type = true;
    m_type = _type;
    }

    const ST_DvAspect::Type& ST_DvAspect::get_type() const
    {    
                return m_type;
                }

    std::string ST_DvAspect::toString() const
    {    
    return ST_DvAspect::TypeStrList[m_type];
    }

    void ST_DvAspect::clear()
    {    
    m_has_type = false;
    }

    void ST_DvAspect::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_type)
    {
    _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
    }

    const ST_DvAspect& ST_DvAspect::default_instance()
    {    
    if (!ST_DvAspect::default_instance_)
    {
        ST_DvAspect::default_instance_ = new ST_DvAspect();
    }
    return *ST_DvAspect::default_instance_;
    }

    const std::string ST_DvAspect::TypeStrList[] =
    {
        "DVASPECT_CONTENT",
        "DVASPECT_ICON"
    };
ST_DvAspect* ST_DvAspect::default_instance_ = NULL;

    // ST_OleUpdate
    ST_OleUpdate::ST_OleUpdate()
    :m_has_type(false)
    {
    }
    ST_OleUpdate::ST_OleUpdate(const ST_OleUpdate::Type& _type)
    :m_has_type(true),
    m_type(_type)
    {
    }
    bool ST_OleUpdate::has_type() const
    {    
    return m_has_type;
    }

    void ST_OleUpdate::set_type(const ST_OleUpdate::Type& _type)
    {    
    m_has_type = true;
    m_type = _type;
    }

    const ST_OleUpdate::Type& ST_OleUpdate::get_type() const
    {    
                return m_type;
                }

    std::string ST_OleUpdate::toString() const
    {    
    return ST_OleUpdate::TypeStrList[m_type];
    }

    void ST_OleUpdate::clear()
    {    
    m_has_type = false;
    }

    void ST_OleUpdate::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_type)
    {
    _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
    }

    const ST_OleUpdate& ST_OleUpdate::default_instance()
    {    
    if (!ST_OleUpdate::default_instance_)
    {
        ST_OleUpdate::default_instance_ = new ST_OleUpdate();
    }
    return *ST_OleUpdate::default_instance_;
    }

    const std::string ST_OleUpdate::TypeStrList[] =
    {
        "OLEUPDATE_ALWAYS",
        "OLEUPDATE_ONCALL"
    };
ST_OleUpdate* ST_OleUpdate::default_instance_ = NULL;

    // ST_WebSourceType
    ST_WebSourceType::ST_WebSourceType()
    :m_has_type(false)
    {
    }
    ST_WebSourceType::ST_WebSourceType(const ST_WebSourceType::Type& _type)
    :m_has_type(true),
    m_type(_type)
    {
    }
    bool ST_WebSourceType::has_type() const
    {    
    return m_has_type;
    }

    void ST_WebSourceType::set_type(const ST_WebSourceType::Type& _type)
    {    
    m_has_type = true;
    m_type = _type;
    }

    const ST_WebSourceType::Type& ST_WebSourceType::get_type() const
    {    
                return m_type;
                }

    std::string ST_WebSourceType::toString() const
    {    
    return ST_WebSourceType::TypeStrList[m_type];
    }

    void ST_WebSourceType::clear()
    {    
    m_has_type = false;
    }

    void ST_WebSourceType::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_type)
    {
    _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
    }

    const ST_WebSourceType& ST_WebSourceType::default_instance()
    {    
    if (!ST_WebSourceType::default_instance_)
    {
        ST_WebSourceType::default_instance_ = new ST_WebSourceType();
    }
    return *ST_WebSourceType::default_instance_;
    }

    const std::string ST_WebSourceType::TypeStrList[] =
    {
        "sheet",
        "printArea",
        "autoFilter",
        "range",
        "chart",
        "pivotTable",
        "query",
        "label"
    };
ST_WebSourceType* ST_WebSourceType::default_instance_ = NULL;

    // ST_PaneState
    ST_PaneState::ST_PaneState()
    :m_has_type(false)
    {
    }
    ST_PaneState::ST_PaneState(const ST_PaneState::Type& _type)
    :m_has_type(true),
    m_type(_type)
    {
    }
    bool ST_PaneState::has_type() const
    {    
    return m_has_type;
    }

    void ST_PaneState::set_type(const ST_PaneState::Type& _type)
    {    
    m_has_type = true;
    m_type = _type;
    }

    const ST_PaneState::Type& ST_PaneState::get_type() const
    {    
                return m_type;
                }

    std::string ST_PaneState::toString() const
    {    
    return ST_PaneState::TypeStrList[m_type];
    }

    void ST_PaneState::clear()
    {    
    m_has_type = false;
    }

    void ST_PaneState::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_type)
    {
    _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
    }

    const ST_PaneState& ST_PaneState::default_instance()
    {    
    if (!ST_PaneState::default_instance_)
    {
        ST_PaneState::default_instance_ = new ST_PaneState();
    }
    return *ST_PaneState::default_instance_;
    }

    const std::string ST_PaneState::TypeStrList[] =
    {
        "split",
        "frozen",
        "frozenSplit"
    };
ST_PaneState* ST_PaneState::default_instance_ = NULL;

    // ST_MdxFunctionType
    ST_MdxFunctionType::ST_MdxFunctionType()
    :m_has_type(false)
    {
    }
    ST_MdxFunctionType::ST_MdxFunctionType(const ST_MdxFunctionType::Type& _type)
    :m_has_type(true),
    m_type(_type)
    {
    }
    bool ST_MdxFunctionType::has_type() const
    {    
    return m_has_type;
    }

    void ST_MdxFunctionType::set_type(const ST_MdxFunctionType::Type& _type)
    {    
    m_has_type = true;
    m_type = _type;
    }

    const ST_MdxFunctionType::Type& ST_MdxFunctionType::get_type() const
    {    
                return m_type;
                }

    std::string ST_MdxFunctionType::toString() const
    {    
    return ST_MdxFunctionType::TypeStrList[m_type];
    }

    void ST_MdxFunctionType::clear()
    {    
    m_has_type = false;
    }

    void ST_MdxFunctionType::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_type)
    {
    _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
    }

    const ST_MdxFunctionType& ST_MdxFunctionType::default_instance()
    {    
    if (!ST_MdxFunctionType::default_instance_)
    {
        ST_MdxFunctionType::default_instance_ = new ST_MdxFunctionType();
    }
    return *ST_MdxFunctionType::default_instance_;
    }

    const std::string ST_MdxFunctionType::TypeStrList[] =
    {
        "m",
        "v",
        "s",
        "c",
        "r",
        "p",
        "k"
    };
ST_MdxFunctionType* ST_MdxFunctionType::default_instance_ = NULL;

    // ST_MdxSetOrder
    ST_MdxSetOrder::ST_MdxSetOrder()
    :m_has_type(false)
    {
    }
    ST_MdxSetOrder::ST_MdxSetOrder(const ST_MdxSetOrder::Type& _type)
    :m_has_type(true),
    m_type(_type)
    {
    }
    bool ST_MdxSetOrder::has_type() const
    {    
    return m_has_type;
    }

    void ST_MdxSetOrder::set_type(const ST_MdxSetOrder::Type& _type)
    {    
    m_has_type = true;
    m_type = _type;
    }

    const ST_MdxSetOrder::Type& ST_MdxSetOrder::get_type() const
    {    
                return m_type;
                }

    std::string ST_MdxSetOrder::toString() const
    {    
    return ST_MdxSetOrder::TypeStrList[m_type];
    }

    void ST_MdxSetOrder::clear()
    {    
    m_has_type = false;
    }

    void ST_MdxSetOrder::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_type)
    {
    _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
    }

    const ST_MdxSetOrder& ST_MdxSetOrder::default_instance()
    {    
    if (!ST_MdxSetOrder::default_instance_)
    {
        ST_MdxSetOrder::default_instance_ = new ST_MdxSetOrder();
    }
    return *ST_MdxSetOrder::default_instance_;
    }

    const std::string ST_MdxSetOrder::TypeStrList[] =
    {
        "u",
        "a",
        "d",
        "aa",
        "ad",
        "na",
        "nd"
    };
ST_MdxSetOrder* ST_MdxSetOrder::default_instance_ = NULL;

    // ST_MdxKPIProperty
    ST_MdxKPIProperty::ST_MdxKPIProperty()
    :m_has_type(false)
    {
    }
    ST_MdxKPIProperty::ST_MdxKPIProperty(const ST_MdxKPIProperty::Type& _type)
    :m_has_type(true),
    m_type(_type)
    {
    }
    bool ST_MdxKPIProperty::has_type() const
    {    
    return m_has_type;
    }

    void ST_MdxKPIProperty::set_type(const ST_MdxKPIProperty::Type& _type)
    {    
    m_has_type = true;
    m_type = _type;
    }

    const ST_MdxKPIProperty::Type& ST_MdxKPIProperty::get_type() const
    {    
                return m_type;
                }

    std::string ST_MdxKPIProperty::toString() const
    {    
    return ST_MdxKPIProperty::TypeStrList[m_type];
    }

    void ST_MdxKPIProperty::clear()
    {    
    m_has_type = false;
    }

    void ST_MdxKPIProperty::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_type)
    {
    _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
    }

    const ST_MdxKPIProperty& ST_MdxKPIProperty::default_instance()
    {    
    if (!ST_MdxKPIProperty::default_instance_)
    {
        ST_MdxKPIProperty::default_instance_ = new ST_MdxKPIProperty();
    }
    return *ST_MdxKPIProperty::default_instance_;
    }

    const std::string ST_MdxKPIProperty::TypeStrList[] =
    {
        "v",
        "g",
        "s",
        "t",
        "w",
        "m"
    };
ST_MdxKPIProperty* ST_MdxKPIProperty::default_instance_ = NULL;

    // ST_BorderStyle
    ST_BorderStyle::ST_BorderStyle()
    :m_has_type(false)
    {
    }
    ST_BorderStyle::ST_BorderStyle(const ST_BorderStyle::Type& _type)
    :m_has_type(true),
    m_type(_type)
    {
    }
    bool ST_BorderStyle::has_type() const
    {    
    return m_has_type;
    }

    void ST_BorderStyle::set_type(const ST_BorderStyle::Type& _type)
    {    
    m_has_type = true;
    m_type = _type;
    }

    const ST_BorderStyle::Type& ST_BorderStyle::get_type() const
    {    
                return m_type;
                }

    std::string ST_BorderStyle::toString() const
    {    
    return ST_BorderStyle::TypeStrList[m_type];
    }

    void ST_BorderStyle::clear()
    {    
    m_has_type = false;
    }

    void ST_BorderStyle::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_type)
    {
    _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
    }

    const ST_BorderStyle& ST_BorderStyle::default_instance()
    {    
    if (!ST_BorderStyle::default_instance_)
    {
        ST_BorderStyle::default_instance_ = new ST_BorderStyle();
    }
    return *ST_BorderStyle::default_instance_;
    }

    const std::string ST_BorderStyle::TypeStrList[] =
    {
        "none",
        "thin",
        "medium",
        "dashed",
        "dotted",
        "thick",
        "double",
        "hair",
        "mediumDashed",
        "dashDot",
        "mediumDashDot",
        "dashDotDot",
        "mediumDashDotDot",
        "slantDashDot"
    };
ST_BorderStyle* ST_BorderStyle::default_instance_ = NULL;

    // ST_PatternType
    ST_PatternType::ST_PatternType()
    :m_has_type(false)
    {
    }
    ST_PatternType::ST_PatternType(const ST_PatternType::Type& _type)
    :m_has_type(true),
    m_type(_type)
    {
    }
    bool ST_PatternType::has_type() const
    {    
    return m_has_type;
    }

    void ST_PatternType::set_type(const ST_PatternType::Type& _type)
    {    
    m_has_type = true;
    m_type = _type;
    }

    const ST_PatternType::Type& ST_PatternType::get_type() const
    {    
                return m_type;
                }

    std::string ST_PatternType::toString() const
    {    
    return ST_PatternType::TypeStrList[m_type];
    }

    void ST_PatternType::clear()
    {    
    m_has_type = false;
    }

    void ST_PatternType::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_type)
    {
    _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
    }

    const ST_PatternType& ST_PatternType::default_instance()
    {    
    if (!ST_PatternType::default_instance_)
    {
        ST_PatternType::default_instance_ = new ST_PatternType();
    }
    return *ST_PatternType::default_instance_;
    }

    const std::string ST_PatternType::TypeStrList[] =
    {
        "none",
        "solid",
        "mediumGray",
        "darkGray",
        "lightGray",
        "darkHorizontal",
        "darkVertical",
        "darkDown",
        "darkUp",
        "darkGrid",
        "darkTrellis",
        "lightHorizontal",
        "lightVertical",
        "lightDown",
        "lightUp",
        "lightGrid",
        "lightTrellis",
        "gray125",
        "gray0625"
    };
ST_PatternType* ST_PatternType::default_instance_ = NULL;

    // ST_GradientType
    ST_GradientType::ST_GradientType()
    :m_has_type(false)
    {
    }
    ST_GradientType::ST_GradientType(const ST_GradientType::Type& _type)
    :m_has_type(true),
    m_type(_type)
    {
    }
    bool ST_GradientType::has_type() const
    {    
    return m_has_type;
    }

    void ST_GradientType::set_type(const ST_GradientType::Type& _type)
    {    
    m_has_type = true;
    m_type = _type;
    }

    const ST_GradientType::Type& ST_GradientType::get_type() const
    {    
                return m_type;
                }

    std::string ST_GradientType::toString() const
    {    
    return ST_GradientType::TypeStrList[m_type];
    }

    void ST_GradientType::clear()
    {    
    m_has_type = false;
    }

    void ST_GradientType::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_type)
    {
    _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
    }

    const ST_GradientType& ST_GradientType::default_instance()
    {    
    if (!ST_GradientType::default_instance_)
    {
        ST_GradientType::default_instance_ = new ST_GradientType();
    }
    return *ST_GradientType::default_instance_;
    }

    const std::string ST_GradientType::TypeStrList[] =
    {
        "linear",
        "path"
    };
ST_GradientType* ST_GradientType::default_instance_ = NULL;

    // ST_HorizontalAlignment
    ST_HorizontalAlignment::ST_HorizontalAlignment()
    :m_has_type(false)
    {
    }
    ST_HorizontalAlignment::ST_HorizontalAlignment(const ST_HorizontalAlignment::Type& _type)
    :m_has_type(true),
    m_type(_type)
    {
    }
    bool ST_HorizontalAlignment::has_type() const
    {    
    return m_has_type;
    }

    void ST_HorizontalAlignment::set_type(const ST_HorizontalAlignment::Type& _type)
    {    
    m_has_type = true;
    m_type = _type;
    }

    const ST_HorizontalAlignment::Type& ST_HorizontalAlignment::get_type() const
    {    
                return m_type;
                }

    std::string ST_HorizontalAlignment::toString() const
    {    
    return ST_HorizontalAlignment::TypeStrList[m_type];
    }

    void ST_HorizontalAlignment::clear()
    {    
    m_has_type = false;
    }

    void ST_HorizontalAlignment::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_type)
    {
    _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
    }

    const ST_HorizontalAlignment& ST_HorizontalAlignment::default_instance()
    {    
    if (!ST_HorizontalAlignment::default_instance_)
    {
        ST_HorizontalAlignment::default_instance_ = new ST_HorizontalAlignment();
    }
    return *ST_HorizontalAlignment::default_instance_;
    }

    const std::string ST_HorizontalAlignment::TypeStrList[] =
    {
        "general",
        "left",
        "center",
        "right",
        "fill",
        "justify",
        "centerContinuous",
        "distributed"
    };
ST_HorizontalAlignment* ST_HorizontalAlignment::default_instance_ = NULL;

    // ST_VerticalAlignment
    ST_VerticalAlignment::ST_VerticalAlignment()
    :m_has_type(false)
    {
    }
    ST_VerticalAlignment::ST_VerticalAlignment(const ST_VerticalAlignment::Type& _type)
    :m_has_type(true),
    m_type(_type)
    {
    }
    bool ST_VerticalAlignment::has_type() const
    {    
    return m_has_type;
    }

    void ST_VerticalAlignment::set_type(const ST_VerticalAlignment::Type& _type)
    {    
    m_has_type = true;
    m_type = _type;
    }

    const ST_VerticalAlignment::Type& ST_VerticalAlignment::get_type() const
    {    
                return m_type;
                }

    std::string ST_VerticalAlignment::toString() const
    {    
    return ST_VerticalAlignment::TypeStrList[m_type];
    }

    void ST_VerticalAlignment::clear()
    {    
    m_has_type = false;
    }

    void ST_VerticalAlignment::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_type)
    {
    _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
    }

    const ST_VerticalAlignment& ST_VerticalAlignment::default_instance()
    {    
    if (!ST_VerticalAlignment::default_instance_)
    {
        ST_VerticalAlignment::default_instance_ = new ST_VerticalAlignment();
    }
    return *ST_VerticalAlignment::default_instance_;
    }

    const std::string ST_VerticalAlignment::TypeStrList[] =
    {
        "top",
        "center",
        "bottom",
        "justify",
        "distributed"
    };
ST_VerticalAlignment* ST_VerticalAlignment::default_instance_ = NULL;

    // ST_NumFmtId
    ST_NumFmtId::ST_NumFmtId()
    :m_has_unsignedInt(false),
    m_unsignedInt(0)
    {
    }
    ST_NumFmtId::ST_NumFmtId(const XSD::unsignedInt_& _unsignedInt)
    :m_has_unsignedInt(true)
    {
    
    set_unsignedInt(_unsignedInt);
    }
    bool ST_NumFmtId::has_unsignedInt() const
    {    
    return m_has_unsignedInt;
    }

    void ST_NumFmtId::set_unsignedInt(const XSD::unsignedInt_& _unsignedInt)
    {    
    m_has_unsignedInt = true;
    m_unsignedInt = _unsignedInt;
    }

    const XSD::unsignedInt_& ST_NumFmtId::get_unsignedInt() const
    {    
    return m_unsignedInt;
    }

    void ST_NumFmtId::clear()
    {    
    m_has_unsignedInt = false;
    m_unsignedInt = 0;;
    }

    void ST_NumFmtId::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_unsignedInt)
    {
        _outStream << " " << _attrName << "=\"" << m_unsignedInt << "\"";;
    }
    }

    const ST_NumFmtId& ST_NumFmtId::default_instance()
    {    
    if (!ST_NumFmtId::default_instance_)
    {
        ST_NumFmtId::default_instance_ = new ST_NumFmtId();
    }
    return *ST_NumFmtId::default_instance_;
    }

    std::string ST_NumFmtId::toString() const
    {    
    std::stringstream strStream;
    strStream << get_unsignedInt();
    return strStream.str();
    }

ST_NumFmtId* ST_NumFmtId::default_instance_ = NULL;

    // ST_FontId
    ST_FontId::ST_FontId()
    :m_has_unsignedInt(false),
    m_unsignedInt(0)
    {
    }
    ST_FontId::ST_FontId(const XSD::unsignedInt_& _unsignedInt)
    :m_has_unsignedInt(true)
    {
    
    set_unsignedInt(_unsignedInt);
    }
    bool ST_FontId::has_unsignedInt() const
    {    
    return m_has_unsignedInt;
    }

    void ST_FontId::set_unsignedInt(const XSD::unsignedInt_& _unsignedInt)
    {    
    m_has_unsignedInt = true;
    m_unsignedInt = _unsignedInt;
    }

    const XSD::unsignedInt_& ST_FontId::get_unsignedInt() const
    {    
    return m_unsignedInt;
    }

    void ST_FontId::clear()
    {    
    m_has_unsignedInt = false;
    m_unsignedInt = 0;;
    }

    void ST_FontId::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_unsignedInt)
    {
        _outStream << " " << _attrName << "=\"" << m_unsignedInt << "\"";;
    }
    }

    const ST_FontId& ST_FontId::default_instance()
    {    
    if (!ST_FontId::default_instance_)
    {
        ST_FontId::default_instance_ = new ST_FontId();
    }
    return *ST_FontId::default_instance_;
    }

    std::string ST_FontId::toString() const
    {    
    std::stringstream strStream;
    strStream << get_unsignedInt();
    return strStream.str();
    }

ST_FontId* ST_FontId::default_instance_ = NULL;

    // ST_FillId
    ST_FillId::ST_FillId()
    :m_has_unsignedInt(false),
    m_unsignedInt(0)
    {
    }
    ST_FillId::ST_FillId(const XSD::unsignedInt_& _unsignedInt)
    :m_has_unsignedInt(true)
    {
    
    set_unsignedInt(_unsignedInt);
    }
    bool ST_FillId::has_unsignedInt() const
    {    
    return m_has_unsignedInt;
    }

    void ST_FillId::set_unsignedInt(const XSD::unsignedInt_& _unsignedInt)
    {    
    m_has_unsignedInt = true;
    m_unsignedInt = _unsignedInt;
    }

    const XSD::unsignedInt_& ST_FillId::get_unsignedInt() const
    {    
    return m_unsignedInt;
    }

    void ST_FillId::clear()
    {    
    m_has_unsignedInt = false;
    m_unsignedInt = 0;;
    }

    void ST_FillId::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_unsignedInt)
    {
        _outStream << " " << _attrName << "=\"" << m_unsignedInt << "\"";;
    }
    }

    const ST_FillId& ST_FillId::default_instance()
    {    
    if (!ST_FillId::default_instance_)
    {
        ST_FillId::default_instance_ = new ST_FillId();
    }
    return *ST_FillId::default_instance_;
    }

    std::string ST_FillId::toString() const
    {    
    std::stringstream strStream;
    strStream << get_unsignedInt();
    return strStream.str();
    }

ST_FillId* ST_FillId::default_instance_ = NULL;

    // ST_BorderId
    ST_BorderId::ST_BorderId()
    :m_has_unsignedInt(false),
    m_unsignedInt(0)
    {
    }
    ST_BorderId::ST_BorderId(const XSD::unsignedInt_& _unsignedInt)
    :m_has_unsignedInt(true)
    {
    
    set_unsignedInt(_unsignedInt);
    }
    bool ST_BorderId::has_unsignedInt() const
    {    
    return m_has_unsignedInt;
    }

    void ST_BorderId::set_unsignedInt(const XSD::unsignedInt_& _unsignedInt)
    {    
    m_has_unsignedInt = true;
    m_unsignedInt = _unsignedInt;
    }

    const XSD::unsignedInt_& ST_BorderId::get_unsignedInt() const
    {    
    return m_unsignedInt;
    }

    void ST_BorderId::clear()
    {    
    m_has_unsignedInt = false;
    m_unsignedInt = 0;;
    }

    void ST_BorderId::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_unsignedInt)
    {
        _outStream << " " << _attrName << "=\"" << m_unsignedInt << "\"";;
    }
    }

    const ST_BorderId& ST_BorderId::default_instance()
    {    
    if (!ST_BorderId::default_instance_)
    {
        ST_BorderId::default_instance_ = new ST_BorderId();
    }
    return *ST_BorderId::default_instance_;
    }

    std::string ST_BorderId::toString() const
    {    
    std::stringstream strStream;
    strStream << get_unsignedInt();
    return strStream.str();
    }

ST_BorderId* ST_BorderId::default_instance_ = NULL;

    // ST_CellStyleXfId
    ST_CellStyleXfId::ST_CellStyleXfId()
    :m_has_unsignedInt(false),
    m_unsignedInt(0)
    {
    }
    ST_CellStyleXfId::ST_CellStyleXfId(const XSD::unsignedInt_& _unsignedInt)
    :m_has_unsignedInt(true)
    {
    
    set_unsignedInt(_unsignedInt);
    }
    bool ST_CellStyleXfId::has_unsignedInt() const
    {    
    return m_has_unsignedInt;
    }

    void ST_CellStyleXfId::set_unsignedInt(const XSD::unsignedInt_& _unsignedInt)
    {    
    m_has_unsignedInt = true;
    m_unsignedInt = _unsignedInt;
    }

    const XSD::unsignedInt_& ST_CellStyleXfId::get_unsignedInt() const
    {    
    return m_unsignedInt;
    }

    void ST_CellStyleXfId::clear()
    {    
    m_has_unsignedInt = false;
    m_unsignedInt = 0;;
    }

    void ST_CellStyleXfId::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_unsignedInt)
    {
        _outStream << " " << _attrName << "=\"" << m_unsignedInt << "\"";;
    }
    }

    const ST_CellStyleXfId& ST_CellStyleXfId::default_instance()
    {    
    if (!ST_CellStyleXfId::default_instance_)
    {
        ST_CellStyleXfId::default_instance_ = new ST_CellStyleXfId();
    }
    return *ST_CellStyleXfId::default_instance_;
    }

    std::string ST_CellStyleXfId::toString() const
    {    
    std::stringstream strStream;
    strStream << get_unsignedInt();
    return strStream.str();
    }

ST_CellStyleXfId* ST_CellStyleXfId::default_instance_ = NULL;

    // ST_DxfId
    ST_DxfId::ST_DxfId()
    :m_has_unsignedInt(false),
    m_unsignedInt(0)
    {
    }
    ST_DxfId::ST_DxfId(const XSD::unsignedInt_& _unsignedInt)
    :m_has_unsignedInt(true)
    {
    
    set_unsignedInt(_unsignedInt);
    }
    bool ST_DxfId::has_unsignedInt() const
    {    
    return m_has_unsignedInt;
    }

    void ST_DxfId::set_unsignedInt(const XSD::unsignedInt_& _unsignedInt)
    {    
    m_has_unsignedInt = true;
    m_unsignedInt = _unsignedInt;
    }

    const XSD::unsignedInt_& ST_DxfId::get_unsignedInt() const
    {    
    return m_unsignedInt;
    }

    void ST_DxfId::clear()
    {    
    m_has_unsignedInt = false;
    m_unsignedInt = 0;;
    }

    void ST_DxfId::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_unsignedInt)
    {
        _outStream << " " << _attrName << "=\"" << m_unsignedInt << "\"";;
    }
    }

    const ST_DxfId& ST_DxfId::default_instance()
    {    
    if (!ST_DxfId::default_instance_)
    {
        ST_DxfId::default_instance_ = new ST_DxfId();
    }
    return *ST_DxfId::default_instance_;
    }

    std::string ST_DxfId::toString() const
    {    
    std::stringstream strStream;
    strStream << get_unsignedInt();
    return strStream.str();
    }

ST_DxfId* ST_DxfId::default_instance_ = NULL;

    // ST_TableStyleType
    ST_TableStyleType::ST_TableStyleType()
    :m_has_type(false)
    {
    }
    ST_TableStyleType::ST_TableStyleType(const ST_TableStyleType::Type& _type)
    :m_has_type(true),
    m_type(_type)
    {
    }
    bool ST_TableStyleType::has_type() const
    {    
    return m_has_type;
    }

    void ST_TableStyleType::set_type(const ST_TableStyleType::Type& _type)
    {    
    m_has_type = true;
    m_type = _type;
    }

    const ST_TableStyleType::Type& ST_TableStyleType::get_type() const
    {    
                return m_type;
                }

    std::string ST_TableStyleType::toString() const
    {    
    return ST_TableStyleType::TypeStrList[m_type];
    }

    void ST_TableStyleType::clear()
    {    
    m_has_type = false;
    }

    void ST_TableStyleType::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_type)
    {
    _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
    }

    const ST_TableStyleType& ST_TableStyleType::default_instance()
    {    
    if (!ST_TableStyleType::default_instance_)
    {
        ST_TableStyleType::default_instance_ = new ST_TableStyleType();
    }
    return *ST_TableStyleType::default_instance_;
    }

    const std::string ST_TableStyleType::TypeStrList[] =
    {
        "wholeTable",
        "headerRow",
        "totalRow",
        "firstColumn",
        "lastColumn",
        "firstRowStripe",
        "secondRowStripe",
        "firstColumnStripe",
        "secondColumnStripe",
        "firstHeaderCell",
        "lastHeaderCell",
        "firstTotalCell",
        "lastTotalCell",
        "firstSubtotalColumn",
        "secondSubtotalColumn",
        "thirdSubtotalColumn",
        "firstSubtotalRow",
        "secondSubtotalRow",
        "thirdSubtotalRow",
        "blankRow",
        "firstColumnSubheading",
        "secondColumnSubheading",
        "thirdColumnSubheading",
        "firstRowSubheading",
        "secondRowSubheading",
        "thirdRowSubheading",
        "pageFieldLabels",
        "pageFieldValues"
    };
ST_TableStyleType* ST_TableStyleType::default_instance_ = NULL;

    // ST_FontScheme
    ST_FontScheme::ST_FontScheme()
    :m_has_type(false)
    {
    }
    ST_FontScheme::ST_FontScheme(const ST_FontScheme::Type& _type)
    :m_has_type(true),
    m_type(_type)
    {
    }
    bool ST_FontScheme::has_type() const
    {    
    return m_has_type;
    }

    void ST_FontScheme::set_type(const ST_FontScheme::Type& _type)
    {    
    m_has_type = true;
    m_type = _type;
    }

    const ST_FontScheme::Type& ST_FontScheme::get_type() const
    {    
                return m_type;
                }

    std::string ST_FontScheme::toString() const
    {    
    return ST_FontScheme::TypeStrList[m_type];
    }

    void ST_FontScheme::clear()
    {    
    m_has_type = false;
    }

    void ST_FontScheme::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_type)
    {
    _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
    }

    const ST_FontScheme& ST_FontScheme::default_instance()
    {    
    if (!ST_FontScheme::default_instance_)
    {
        ST_FontScheme::default_instance_ = new ST_FontScheme();
    }
    return *ST_FontScheme::default_instance_;
    }

    const std::string ST_FontScheme::TypeStrList[] =
    {
        "none",
        "major",
        "minor"
    };
ST_FontScheme* ST_FontScheme::default_instance_ = NULL;

    // ST_UnderlineValues
    ST_UnderlineValues::ST_UnderlineValues()
    :m_has_type(false)
    {
    }
    ST_UnderlineValues::ST_UnderlineValues(const ST_UnderlineValues::Type& _type)
    :m_has_type(true),
    m_type(_type)
    {
    }
    bool ST_UnderlineValues::has_type() const
    {    
    return m_has_type;
    }

    void ST_UnderlineValues::set_type(const ST_UnderlineValues::Type& _type)
    {    
    m_has_type = true;
    m_type = _type;
    }

    const ST_UnderlineValues::Type& ST_UnderlineValues::get_type() const
    {    
                return m_type;
                }

    std::string ST_UnderlineValues::toString() const
    {    
    return ST_UnderlineValues::TypeStrList[m_type];
    }

    void ST_UnderlineValues::clear()
    {    
    m_has_type = false;
    }

    void ST_UnderlineValues::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_type)
    {
    _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
    }

    const ST_UnderlineValues& ST_UnderlineValues::default_instance()
    {    
    if (!ST_UnderlineValues::default_instance_)
    {
        ST_UnderlineValues::default_instance_ = new ST_UnderlineValues();
    }
    return *ST_UnderlineValues::default_instance_;
    }

    const std::string ST_UnderlineValues::TypeStrList[] =
    {
        "single",
        "double",
        "singleAccounting",
        "doubleAccounting",
        "none"
    };
ST_UnderlineValues* ST_UnderlineValues::default_instance_ = NULL;

    // ST_FontFamily
    ST_FontFamily::ST_FontFamily()
    :m_has_integer(false),
    m_integer(0)
    {
    }
    ST_FontFamily::ST_FontFamily(const XSD::integer_& _integer)
    :m_has_integer(true)
    {
    
    set_integer(_integer);
    }
    bool ST_FontFamily::has_integer() const
    {    
    return m_has_integer;
    }

    void ST_FontFamily::set_integer(const XSD::integer_& _integer)
    {    assert(0 <= _integer);
    assert(_integer <= 14);
    
    m_has_integer = true;
    m_integer = _integer;
    }

    const XSD::integer_& ST_FontFamily::get_integer() const
    {    
    return m_integer;
    }

    void ST_FontFamily::clear()
    {    
    m_has_integer = false;
    m_integer = 0;;
    }

    void ST_FontFamily::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_integer)
    {
        _outStream << " " << _attrName << "=\"" << m_integer << "\"";;
    }
    }

    const ST_FontFamily& ST_FontFamily::default_instance()
    {    
    if (!ST_FontFamily::default_instance_)
    {
        ST_FontFamily::default_instance_ = new ST_FontFamily();
    }
    return *ST_FontFamily::default_instance_;
    }

    std::string ST_FontFamily::toString() const
    {    
    std::stringstream strStream;
    strStream << get_integer();
    return strStream.str();
    }

ST_FontFamily* ST_FontFamily::default_instance_ = NULL;

    // ST_DdeValueType
    ST_DdeValueType::ST_DdeValueType()
    :m_has_type(false)
    {
    }
    ST_DdeValueType::ST_DdeValueType(const ST_DdeValueType::Type& _type)
    :m_has_type(true),
    m_type(_type)
    {
    }
    bool ST_DdeValueType::has_type() const
    {    
    return m_has_type;
    }

    void ST_DdeValueType::set_type(const ST_DdeValueType::Type& _type)
    {    
    m_has_type = true;
    m_type = _type;
    }

    const ST_DdeValueType::Type& ST_DdeValueType::get_type() const
    {    
                return m_type;
                }

    std::string ST_DdeValueType::toString() const
    {    
    return ST_DdeValueType::TypeStrList[m_type];
    }

    void ST_DdeValueType::clear()
    {    
    m_has_type = false;
    }

    void ST_DdeValueType::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_type)
    {
    _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
    }

    const ST_DdeValueType& ST_DdeValueType::default_instance()
    {    
    if (!ST_DdeValueType::default_instance_)
    {
        ST_DdeValueType::default_instance_ = new ST_DdeValueType();
    }
    return *ST_DdeValueType::default_instance_;
    }

    const std::string ST_DdeValueType::TypeStrList[] =
    {
        "nil",
        "b",
        "n",
        "e",
        "str"
    };
ST_DdeValueType* ST_DdeValueType::default_instance_ = NULL;

    // ST_TableType
    ST_TableType::ST_TableType()
    :m_has_type(false)
    {
    }
    ST_TableType::ST_TableType(const ST_TableType::Type& _type)
    :m_has_type(true),
    m_type(_type)
    {
    }
    bool ST_TableType::has_type() const
    {    
    return m_has_type;
    }

    void ST_TableType::set_type(const ST_TableType::Type& _type)
    {    
    m_has_type = true;
    m_type = _type;
    }

    const ST_TableType::Type& ST_TableType::get_type() const
    {    
                return m_type;
                }

    std::string ST_TableType::toString() const
    {    
    return ST_TableType::TypeStrList[m_type];
    }

    void ST_TableType::clear()
    {    
    m_has_type = false;
    }

    void ST_TableType::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_type)
    {
    _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
    }

    const ST_TableType& ST_TableType::default_instance()
    {    
    if (!ST_TableType::default_instance_)
    {
        ST_TableType::default_instance_ = new ST_TableType();
    }
    return *ST_TableType::default_instance_;
    }

    const std::string ST_TableType::TypeStrList[] =
    {
        "worksheet",
        "xml",
        "queryTable"
    };
ST_TableType* ST_TableType::default_instance_ = NULL;

    // ST_TotalsRowFunction
    ST_TotalsRowFunction::ST_TotalsRowFunction()
    :m_has_type(false)
    {
    }
    ST_TotalsRowFunction::ST_TotalsRowFunction(const ST_TotalsRowFunction::Type& _type)
    :m_has_type(true),
    m_type(_type)
    {
    }
    bool ST_TotalsRowFunction::has_type() const
    {    
    return m_has_type;
    }

    void ST_TotalsRowFunction::set_type(const ST_TotalsRowFunction::Type& _type)
    {    
    m_has_type = true;
    m_type = _type;
    }

    const ST_TotalsRowFunction::Type& ST_TotalsRowFunction::get_type() const
    {    
                return m_type;
                }

    std::string ST_TotalsRowFunction::toString() const
    {    
    return ST_TotalsRowFunction::TypeStrList[m_type];
    }

    void ST_TotalsRowFunction::clear()
    {    
    m_has_type = false;
    }

    void ST_TotalsRowFunction::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_type)
    {
    _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
    }

    const ST_TotalsRowFunction& ST_TotalsRowFunction::default_instance()
    {    
    if (!ST_TotalsRowFunction::default_instance_)
    {
        ST_TotalsRowFunction::default_instance_ = new ST_TotalsRowFunction();
    }
    return *ST_TotalsRowFunction::default_instance_;
    }

    const std::string ST_TotalsRowFunction::TypeStrList[] =
    {
        "none",
        "sum",
        "min",
        "max",
        "average",
        "count",
        "countNums",
        "stdDev",
        "var",
        "custom"
    };
ST_TotalsRowFunction* ST_TotalsRowFunction::default_instance_ = NULL;

    // ST_XmlDataType
    ST_XmlDataType::ST_XmlDataType()
    :m_has_string(false),
    m_string("")
    {
    }
    ST_XmlDataType::ST_XmlDataType(const XSD::string_& _string)
    :m_has_string(true)
    {
    
    set_string(_string);
    }
    bool ST_XmlDataType::has_string() const
    {    
    return m_has_string;
    }

    void ST_XmlDataType::set_string(const XSD::string_& _string)
    {    
    m_has_string = true;
    m_string = _string;
    }

    const XSD::string_& ST_XmlDataType::get_string() const
    {    
    return m_string;
    }

    void ST_XmlDataType::clear()
    {    
    m_has_string = false;
    m_string.clear();;
    }

    void ST_XmlDataType::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_string)
    {
        _outStream << " " << _attrName << "=\"" << m_string << "\"";;
    }
    }

    const ST_XmlDataType& ST_XmlDataType::default_instance()
    {    
    if (!ST_XmlDataType::default_instance_)
    {
        ST_XmlDataType::default_instance_ = new ST_XmlDataType();
    }
    return *ST_XmlDataType::default_instance_;
    }

    std::string ST_XmlDataType::toString() const
    {    
    std::stringstream strStream;
    strStream << get_string();
    return strStream.str();
    }

ST_XmlDataType* ST_XmlDataType::default_instance_ = NULL;

    // ST_VolDepType
    ST_VolDepType::ST_VolDepType()
    :m_has_type(false)
    {
    }
    ST_VolDepType::ST_VolDepType(const ST_VolDepType::Type& _type)
    :m_has_type(true),
    m_type(_type)
    {
    }
    bool ST_VolDepType::has_type() const
    {    
    return m_has_type;
    }

    void ST_VolDepType::set_type(const ST_VolDepType::Type& _type)
    {    
    m_has_type = true;
    m_type = _type;
    }

    const ST_VolDepType::Type& ST_VolDepType::get_type() const
    {    
                return m_type;
                }

    std::string ST_VolDepType::toString() const
    {    
    return ST_VolDepType::TypeStrList[m_type];
    }

    void ST_VolDepType::clear()
    {    
    m_has_type = false;
    }

    void ST_VolDepType::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_type)
    {
    _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
    }

    const ST_VolDepType& ST_VolDepType::default_instance()
    {    
    if (!ST_VolDepType::default_instance_)
    {
        ST_VolDepType::default_instance_ = new ST_VolDepType();
    }
    return *ST_VolDepType::default_instance_;
    }

    const std::string ST_VolDepType::TypeStrList[] =
    {
        "realTimeData",
        "olapFunctions"
    };
ST_VolDepType* ST_VolDepType::default_instance_ = NULL;

    // ST_VolValueType
    ST_VolValueType::ST_VolValueType()
    :m_has_type(false)
    {
    }
    ST_VolValueType::ST_VolValueType(const ST_VolValueType::Type& _type)
    :m_has_type(true),
    m_type(_type)
    {
    }
    bool ST_VolValueType::has_type() const
    {    
    return m_has_type;
    }

    void ST_VolValueType::set_type(const ST_VolValueType::Type& _type)
    {    
    m_has_type = true;
    m_type = _type;
    }

    const ST_VolValueType::Type& ST_VolValueType::get_type() const
    {    
                return m_type;
                }

    std::string ST_VolValueType::toString() const
    {    
    return ST_VolValueType::TypeStrList[m_type];
    }

    void ST_VolValueType::clear()
    {    
    m_has_type = false;
    }

    void ST_VolValueType::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_type)
    {
    _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
    }

    const ST_VolValueType& ST_VolValueType::default_instance()
    {    
    if (!ST_VolValueType::default_instance_)
    {
        ST_VolValueType::default_instance_ = new ST_VolValueType();
    }
    return *ST_VolValueType::default_instance_;
    }

    const std::string ST_VolValueType::TypeStrList[] =
    {
        "b",
        "n",
        "e",
        "s"
    };
ST_VolValueType* ST_VolValueType::default_instance_ = NULL;

    // ST_Visibility
    ST_Visibility::ST_Visibility()
    :m_has_type(false)
    {
    }
    ST_Visibility::ST_Visibility(const ST_Visibility::Type& _type)
    :m_has_type(true),
    m_type(_type)
    {
    }
    bool ST_Visibility::has_type() const
    {    
    return m_has_type;
    }

    void ST_Visibility::set_type(const ST_Visibility::Type& _type)
    {    
    m_has_type = true;
    m_type = _type;
    }

    const ST_Visibility::Type& ST_Visibility::get_type() const
    {    
                return m_type;
                }

    std::string ST_Visibility::toString() const
    {    
    return ST_Visibility::TypeStrList[m_type];
    }

    void ST_Visibility::clear()
    {    
    m_has_type = false;
    }

    void ST_Visibility::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_type)
    {
    _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
    }

    const ST_Visibility& ST_Visibility::default_instance()
    {    
    if (!ST_Visibility::default_instance_)
    {
        ST_Visibility::default_instance_ = new ST_Visibility();
    }
    return *ST_Visibility::default_instance_;
    }

    const std::string ST_Visibility::TypeStrList[] =
    {
        "visible",
        "hidden",
        "veryHidden"
    };
ST_Visibility* ST_Visibility::default_instance_ = NULL;

    // ST_Comments
    ST_Comments::ST_Comments()
    :m_has_type(false)
    {
    }
    ST_Comments::ST_Comments(const ST_Comments::Type& _type)
    :m_has_type(true),
    m_type(_type)
    {
    }
    bool ST_Comments::has_type() const
    {    
    return m_has_type;
    }

    void ST_Comments::set_type(const ST_Comments::Type& _type)
    {    
    m_has_type = true;
    m_type = _type;
    }

    const ST_Comments::Type& ST_Comments::get_type() const
    {    
                return m_type;
                }

    std::string ST_Comments::toString() const
    {    
    return ST_Comments::TypeStrList[m_type];
    }

    void ST_Comments::clear()
    {    
    m_has_type = false;
    }

    void ST_Comments::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_type)
    {
    _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
    }

    const ST_Comments& ST_Comments::default_instance()
    {    
    if (!ST_Comments::default_instance_)
    {
        ST_Comments::default_instance_ = new ST_Comments();
    }
    return *ST_Comments::default_instance_;
    }

    const std::string ST_Comments::TypeStrList[] =
    {
        "commNone",
        "commIndicator",
        "commIndAndComment"
    };
ST_Comments* ST_Comments::default_instance_ = NULL;

    // ST_Objects
    ST_Objects::ST_Objects()
    :m_has_type(false)
    {
    }
    ST_Objects::ST_Objects(const ST_Objects::Type& _type)
    :m_has_type(true),
    m_type(_type)
    {
    }
    bool ST_Objects::has_type() const
    {    
    return m_has_type;
    }

    void ST_Objects::set_type(const ST_Objects::Type& _type)
    {    
    m_has_type = true;
    m_type = _type;
    }

    const ST_Objects::Type& ST_Objects::get_type() const
    {    
                return m_type;
                }

    std::string ST_Objects::toString() const
    {    
    return ST_Objects::TypeStrList[m_type];
    }

    void ST_Objects::clear()
    {    
    m_has_type = false;
    }

    void ST_Objects::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_type)
    {
    _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
    }

    const ST_Objects& ST_Objects::default_instance()
    {    
    if (!ST_Objects::default_instance_)
    {
        ST_Objects::default_instance_ = new ST_Objects();
    }
    return *ST_Objects::default_instance_;
    }

    const std::string ST_Objects::TypeStrList[] =
    {
        "all",
        "placeholders",
        "none"
    };
ST_Objects* ST_Objects::default_instance_ = NULL;

    // ST_SheetState
    ST_SheetState::ST_SheetState()
    :m_has_type(false)
    {
    }
    ST_SheetState::ST_SheetState(const ST_SheetState::Type& _type)
    :m_has_type(true),
    m_type(_type)
    {
    }
    bool ST_SheetState::has_type() const
    {    
    return m_has_type;
    }

    void ST_SheetState::set_type(const ST_SheetState::Type& _type)
    {    
    m_has_type = true;
    m_type = _type;
    }

    const ST_SheetState::Type& ST_SheetState::get_type() const
    {    
                return m_type;
                }

    std::string ST_SheetState::toString() const
    {    
    return ST_SheetState::TypeStrList[m_type];
    }

    void ST_SheetState::clear()
    {    
    m_has_type = false;
    }

    void ST_SheetState::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_type)
    {
    _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
    }

    const ST_SheetState& ST_SheetState::default_instance()
    {    
    if (!ST_SheetState::default_instance_)
    {
        ST_SheetState::default_instance_ = new ST_SheetState();
    }
    return *ST_SheetState::default_instance_;
    }

    const std::string ST_SheetState::TypeStrList[] =
    {
        "visible",
        "hidden",
        "veryHidden"
    };
ST_SheetState* ST_SheetState::default_instance_ = NULL;

    // ST_UpdateLinks
    ST_UpdateLinks::ST_UpdateLinks()
    :m_has_type(false)
    {
    }
    ST_UpdateLinks::ST_UpdateLinks(const ST_UpdateLinks::Type& _type)
    :m_has_type(true),
    m_type(_type)
    {
    }
    bool ST_UpdateLinks::has_type() const
    {    
    return m_has_type;
    }

    void ST_UpdateLinks::set_type(const ST_UpdateLinks::Type& _type)
    {    
    m_has_type = true;
    m_type = _type;
    }

    const ST_UpdateLinks::Type& ST_UpdateLinks::get_type() const
    {    
                return m_type;
                }

    std::string ST_UpdateLinks::toString() const
    {    
    return ST_UpdateLinks::TypeStrList[m_type];
    }

    void ST_UpdateLinks::clear()
    {    
    m_has_type = false;
    }

    void ST_UpdateLinks::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_type)
    {
    _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
    }

    const ST_UpdateLinks& ST_UpdateLinks::default_instance()
    {    
    if (!ST_UpdateLinks::default_instance_)
    {
        ST_UpdateLinks::default_instance_ = new ST_UpdateLinks();
    }
    return *ST_UpdateLinks::default_instance_;
    }

    const std::string ST_UpdateLinks::TypeStrList[] =
    {
        "userSet",
        "never",
        "always"
    };
ST_UpdateLinks* ST_UpdateLinks::default_instance_ = NULL;

    // ST_SmartTagShow
    ST_SmartTagShow::ST_SmartTagShow()
    :m_has_type(false)
    {
    }
    ST_SmartTagShow::ST_SmartTagShow(const ST_SmartTagShow::Type& _type)
    :m_has_type(true),
    m_type(_type)
    {
    }
    bool ST_SmartTagShow::has_type() const
    {    
    return m_has_type;
    }

    void ST_SmartTagShow::set_type(const ST_SmartTagShow::Type& _type)
    {    
    m_has_type = true;
    m_type = _type;
    }

    const ST_SmartTagShow::Type& ST_SmartTagShow::get_type() const
    {    
                return m_type;
                }

    std::string ST_SmartTagShow::toString() const
    {    
    return ST_SmartTagShow::TypeStrList[m_type];
    }

    void ST_SmartTagShow::clear()
    {    
    m_has_type = false;
    }

    void ST_SmartTagShow::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_type)
    {
    _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
    }

    const ST_SmartTagShow& ST_SmartTagShow::default_instance()
    {    
    if (!ST_SmartTagShow::default_instance_)
    {
        ST_SmartTagShow::default_instance_ = new ST_SmartTagShow();
    }
    return *ST_SmartTagShow::default_instance_;
    }

    const std::string ST_SmartTagShow::TypeStrList[] =
    {
        "all",
        "none",
        "noIndicator"
    };
ST_SmartTagShow* ST_SmartTagShow::default_instance_ = NULL;

    // ST_CalcMode
    ST_CalcMode::ST_CalcMode()
    :m_has_type(false)
    {
    }
    ST_CalcMode::ST_CalcMode(const ST_CalcMode::Type& _type)
    :m_has_type(true),
    m_type(_type)
    {
    }
    bool ST_CalcMode::has_type() const
    {    
    return m_has_type;
    }

    void ST_CalcMode::set_type(const ST_CalcMode::Type& _type)
    {    
    m_has_type = true;
    m_type = _type;
    }

    const ST_CalcMode::Type& ST_CalcMode::get_type() const
    {    
                return m_type;
                }

    std::string ST_CalcMode::toString() const
    {    
    return ST_CalcMode::TypeStrList[m_type];
    }

    void ST_CalcMode::clear()
    {    
    m_has_type = false;
    }

    void ST_CalcMode::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_type)
    {
    _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
    }

    const ST_CalcMode& ST_CalcMode::default_instance()
    {    
    if (!ST_CalcMode::default_instance_)
    {
        ST_CalcMode::default_instance_ = new ST_CalcMode();
    }
    return *ST_CalcMode::default_instance_;
    }

    const std::string ST_CalcMode::TypeStrList[] =
    {
        "manual",
        "auto",
        "autoNoTable"
    };
ST_CalcMode* ST_CalcMode::default_instance_ = NULL;

    // ST_RefMode
    ST_RefMode::ST_RefMode()
    :m_has_type(false)
    {
    }
    ST_RefMode::ST_RefMode(const ST_RefMode::Type& _type)
    :m_has_type(true),
    m_type(_type)
    {
    }
    bool ST_RefMode::has_type() const
    {    
    return m_has_type;
    }

    void ST_RefMode::set_type(const ST_RefMode::Type& _type)
    {    
    m_has_type = true;
    m_type = _type;
    }

    const ST_RefMode::Type& ST_RefMode::get_type() const
    {    
                return m_type;
                }

    std::string ST_RefMode::toString() const
    {    
    return ST_RefMode::TypeStrList[m_type];
    }

    void ST_RefMode::clear()
    {    
    m_has_type = false;
    }

    void ST_RefMode::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_type)
    {
    _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
    }

    const ST_RefMode& ST_RefMode::default_instance()
    {    
    if (!ST_RefMode::default_instance_)
    {
        ST_RefMode::default_instance_ = new ST_RefMode();
    }
    return *ST_RefMode::default_instance_;
    }

    const std::string ST_RefMode::TypeStrList[] =
    {
        "A1",
        "R1C1"
    };
ST_RefMode* ST_RefMode::default_instance_ = NULL;

    // ST_TargetScreenSize
    ST_TargetScreenSize::ST_TargetScreenSize()
    :m_has_type(false)
    {
    }
    ST_TargetScreenSize::ST_TargetScreenSize(const ST_TargetScreenSize::Type& _type)
    :m_has_type(true),
    m_type(_type)
    {
    }
    bool ST_TargetScreenSize::has_type() const
    {    
    return m_has_type;
    }

    void ST_TargetScreenSize::set_type(const ST_TargetScreenSize::Type& _type)
    {    
    m_has_type = true;
    m_type = _type;
    }

    const ST_TargetScreenSize::Type& ST_TargetScreenSize::get_type() const
    {    
                return m_type;
                }

    std::string ST_TargetScreenSize::toString() const
    {    
    return ST_TargetScreenSize::TypeStrList[m_type];
    }

    void ST_TargetScreenSize::clear()
    {    
    m_has_type = false;
    }

    void ST_TargetScreenSize::toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const
    {    
    if (m_has_type)
    {
    _outStream << " " << _attrName << "=\"" << toString() << "\"";
    }
    }

    const ST_TargetScreenSize& ST_TargetScreenSize::default_instance()
    {    
    if (!ST_TargetScreenSize::default_instance_)
    {
        ST_TargetScreenSize::default_instance_ = new ST_TargetScreenSize();
    }
    return *ST_TargetScreenSize::default_instance_;
    }

    const std::string ST_TargetScreenSize::TypeStrList[] =
    {
        "544x376",
        "640x480",
        "720x512",
        "800x600",
        "1024x768",
        "1152x882",
        "1152x900",
        "1280x1024",
        "1600x1200",
        "1800x1440",
        "1920x1200"
    };
ST_TargetScreenSize* ST_TargetScreenSize::default_instance_ = NULL;

    // CT_AutoFilter
    CT_AutoFilter::CT_AutoFilter()
    :m_has_ref_attr(false),
    m_ref_attr(NULL)
    {
    }
    CT_AutoFilter::~CT_AutoFilter()
{
    clear();    }
    CT_FilterColumn* CT_AutoFilter::add_filterColumn()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_FilterColumn* pNewChild = pChildGroup->mutable_filterColumn();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_SortState* CT_AutoFilter::add_sortState()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_SortState* pNewChild = pChildGroup->mutable_sortState();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_ExtensionList* CT_AutoFilter::add_extLst()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_ExtensionList* pNewChild = pChildGroup->mutable_extLst();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_AutoFilter::clear()
    {    
    m_has_ref_attr = false;
    
    if (m_ref_attr)
    {
        delete m_ref_attr;
        m_ref_attr = NULL;
    }
    
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_AutoFilter::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_ref_attr)
    {
        m_ref_attr->toXmlAttr("ref", _outStream);
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_filterColumn())
            {
                (*iter)->get_filterColumn().toXmlElem("main:filterColumn", "", _outStream);
            }
            else if ((*iter)->has_sortState())
            {
                (*iter)->get_sortState().toXmlElem("main:sortState", "", _outStream);
            }
            else if ((*iter)->has_extLst())
            {
                (*iter)->get_extLst().toXmlElem("main:extLst", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_AutoFilter& CT_AutoFilter::default_instance()
    {    
    if (!CT_AutoFilter::default_instance_)
    {
        CT_AutoFilter::default_instance_ = new CT_AutoFilter();
    }
    return *CT_AutoFilter::default_instance_;
    }

    bool CT_AutoFilter::has_ref_attr() const
    {    
    return m_has_ref_attr;
    }

    void CT_AutoFilter::set_ref_attr(const ST_Ref& _ref_attr)
    {    
    m_has_ref_attr = true;
    m_ref_attr = new ST_Ref(_ref_attr);
    }

    const ST_Ref& CT_AutoFilter::get_ref_attr() const
    {    
    if (m_ref_attr)
    {
        return *m_ref_attr;
    }
    return ST_Ref::default_instance();
    }


    // CT_AutoFilter::ChildGroup_1
    CT_AutoFilter::ChildGroup_1::ChildGroup_1()
    :m_has_filterColumn(false),
    m_filterColumn(NULL),
    m_has_sortState(false),
    m_sortState(NULL),
    m_has_extLst(false),
    m_extLst(NULL)
    {
    }
    bool CT_AutoFilter::ChildGroup_1::has_filterColumn() const
    {    
    return m_has_filterColumn;
    }

    CT_FilterColumn* CT_AutoFilter::ChildGroup_1::mutable_filterColumn()
    {    
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_filterColumn = true;
    if (!m_filterColumn)
    {
        m_filterColumn = new CT_FilterColumn();
    }
    return m_filterColumn;
    }

    const CT_FilterColumn& CT_AutoFilter::ChildGroup_1::get_filterColumn() const
    {    
    if (m_filterColumn)
    {
        return *m_filterColumn;
    }
    return CT_FilterColumn::default_instance();
    }

    bool CT_AutoFilter::ChildGroup_1::has_sortState() const
    {    
    return m_has_sortState;
    }

    CT_SortState* CT_AutoFilter::ChildGroup_1::mutable_sortState()
    {    
    
    m_has_filterColumn = false;
    
    if (m_filterColumn)
    {
        delete m_filterColumn;
        m_filterColumn = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_sortState = true;
    if (!m_sortState)
    {
        m_sortState = new CT_SortState();
    }
    return m_sortState;
    }

    const CT_SortState& CT_AutoFilter::ChildGroup_1::get_sortState() const
    {    
    if (m_sortState)
    {
        return *m_sortState;
    }
    return CT_SortState::default_instance();
    }

    bool CT_AutoFilter::ChildGroup_1::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* CT_AutoFilter::ChildGroup_1::mutable_extLst()
    {    
    
    m_has_filterColumn = false;
    
    if (m_filterColumn)
    {
        delete m_filterColumn;
        m_filterColumn = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& CT_AutoFilter::ChildGroup_1::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

CT_AutoFilter* CT_AutoFilter::default_instance_ = NULL;

    // CT_FilterColumn
    CT_FilterColumn::CT_FilterColumn()
    :m_has_filters(false),
    m_filters(NULL),
    m_has_top10(false),
    m_top10(NULL),
    m_has_customFilters(false),
    m_customFilters(NULL),
    m_has_dynamicFilter(false),
    m_dynamicFilter(NULL),
    m_has_colorFilter(false),
    m_colorFilter(NULL),
    m_has_iconFilter(false),
    m_iconFilter(NULL),
    m_has_extLst(false),
    m_extLst(NULL),
    m_has_colId_attr(false),
    m_colId_attr(0),
    m_has_hiddenButton_attr(false),
    m_hiddenButton_attr(false),
    m_has_showButton_attr(false),
    m_showButton_attr(false)
    {
    }
    CT_FilterColumn::~CT_FilterColumn()
{
    clear();    }
    bool CT_FilterColumn::has_filters() const
    {    
    return m_has_filters;
    }

    CT_Filters* CT_FilterColumn::mutable_filters()
    {    
    
    m_has_top10 = false;
    
    if (m_top10)
    {
        delete m_top10;
        m_top10 = NULL;
    }
    ;
    
    m_has_customFilters = false;
    
    if (m_customFilters)
    {
        delete m_customFilters;
        m_customFilters = NULL;
    }
    ;
    
    m_has_dynamicFilter = false;
    
    if (m_dynamicFilter)
    {
        delete m_dynamicFilter;
        m_dynamicFilter = NULL;
    }
    ;
    
    m_has_colorFilter = false;
    
    if (m_colorFilter)
    {
        delete m_colorFilter;
        m_colorFilter = NULL;
    }
    ;
    
    m_has_iconFilter = false;
    
    if (m_iconFilter)
    {
        delete m_iconFilter;
        m_iconFilter = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_filters = true;
    if (!m_filters)
    {
        m_filters = new CT_Filters();
    }
    return m_filters;
    }

    const CT_Filters& CT_FilterColumn::get_filters() const
    {    
    if (m_filters)
    {
        return *m_filters;
    }
    return CT_Filters::default_instance();
    }

    bool CT_FilterColumn::has_top10() const
    {    
    return m_has_top10;
    }

    CT_Top10* CT_FilterColumn::mutable_top10()
    {    
    
    m_has_filters = false;
    
    if (m_filters)
    {
        delete m_filters;
        m_filters = NULL;
    }
    ;
    
    m_has_customFilters = false;
    
    if (m_customFilters)
    {
        delete m_customFilters;
        m_customFilters = NULL;
    }
    ;
    
    m_has_dynamicFilter = false;
    
    if (m_dynamicFilter)
    {
        delete m_dynamicFilter;
        m_dynamicFilter = NULL;
    }
    ;
    
    m_has_colorFilter = false;
    
    if (m_colorFilter)
    {
        delete m_colorFilter;
        m_colorFilter = NULL;
    }
    ;
    
    m_has_iconFilter = false;
    
    if (m_iconFilter)
    {
        delete m_iconFilter;
        m_iconFilter = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_top10 = true;
    if (!m_top10)
    {
        m_top10 = new CT_Top10();
    }
    return m_top10;
    }

    const CT_Top10& CT_FilterColumn::get_top10() const
    {    
    if (m_top10)
    {
        return *m_top10;
    }
    return CT_Top10::default_instance();
    }

    bool CT_FilterColumn::has_customFilters() const
    {    
    return m_has_customFilters;
    }

    CT_CustomFilters* CT_FilterColumn::mutable_customFilters()
    {    
    
    m_has_filters = false;
    
    if (m_filters)
    {
        delete m_filters;
        m_filters = NULL;
    }
    ;
    
    m_has_top10 = false;
    
    if (m_top10)
    {
        delete m_top10;
        m_top10 = NULL;
    }
    ;
    
    m_has_dynamicFilter = false;
    
    if (m_dynamicFilter)
    {
        delete m_dynamicFilter;
        m_dynamicFilter = NULL;
    }
    ;
    
    m_has_colorFilter = false;
    
    if (m_colorFilter)
    {
        delete m_colorFilter;
        m_colorFilter = NULL;
    }
    ;
    
    m_has_iconFilter = false;
    
    if (m_iconFilter)
    {
        delete m_iconFilter;
        m_iconFilter = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_customFilters = true;
    if (!m_customFilters)
    {
        m_customFilters = new CT_CustomFilters();
    }
    return m_customFilters;
    }

    const CT_CustomFilters& CT_FilterColumn::get_customFilters() const
    {    
    if (m_customFilters)
    {
        return *m_customFilters;
    }
    return CT_CustomFilters::default_instance();
    }

    bool CT_FilterColumn::has_dynamicFilter() const
    {    
    return m_has_dynamicFilter;
    }

    CT_DynamicFilter* CT_FilterColumn::mutable_dynamicFilter()
    {    
    
    m_has_filters = false;
    
    if (m_filters)
    {
        delete m_filters;
        m_filters = NULL;
    }
    ;
    
    m_has_top10 = false;
    
    if (m_top10)
    {
        delete m_top10;
        m_top10 = NULL;
    }
    ;
    
    m_has_customFilters = false;
    
    if (m_customFilters)
    {
        delete m_customFilters;
        m_customFilters = NULL;
    }
    ;
    
    m_has_colorFilter = false;
    
    if (m_colorFilter)
    {
        delete m_colorFilter;
        m_colorFilter = NULL;
    }
    ;
    
    m_has_iconFilter = false;
    
    if (m_iconFilter)
    {
        delete m_iconFilter;
        m_iconFilter = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_dynamicFilter = true;
    if (!m_dynamicFilter)
    {
        m_dynamicFilter = new CT_DynamicFilter();
    }
    return m_dynamicFilter;
    }

    const CT_DynamicFilter& CT_FilterColumn::get_dynamicFilter() const
    {    
    if (m_dynamicFilter)
    {
        return *m_dynamicFilter;
    }
    return CT_DynamicFilter::default_instance();
    }

    bool CT_FilterColumn::has_colorFilter() const
    {    
    return m_has_colorFilter;
    }

    CT_ColorFilter* CT_FilterColumn::mutable_colorFilter()
    {    
    
    m_has_filters = false;
    
    if (m_filters)
    {
        delete m_filters;
        m_filters = NULL;
    }
    ;
    
    m_has_top10 = false;
    
    if (m_top10)
    {
        delete m_top10;
        m_top10 = NULL;
    }
    ;
    
    m_has_customFilters = false;
    
    if (m_customFilters)
    {
        delete m_customFilters;
        m_customFilters = NULL;
    }
    ;
    
    m_has_dynamicFilter = false;
    
    if (m_dynamicFilter)
    {
        delete m_dynamicFilter;
        m_dynamicFilter = NULL;
    }
    ;
    
    m_has_iconFilter = false;
    
    if (m_iconFilter)
    {
        delete m_iconFilter;
        m_iconFilter = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_colorFilter = true;
    if (!m_colorFilter)
    {
        m_colorFilter = new CT_ColorFilter();
    }
    return m_colorFilter;
    }

    const CT_ColorFilter& CT_FilterColumn::get_colorFilter() const
    {    
    if (m_colorFilter)
    {
        return *m_colorFilter;
    }
    return CT_ColorFilter::default_instance();
    }

    bool CT_FilterColumn::has_iconFilter() const
    {    
    return m_has_iconFilter;
    }

    CT_IconFilter* CT_FilterColumn::mutable_iconFilter()
    {    
    
    m_has_filters = false;
    
    if (m_filters)
    {
        delete m_filters;
        m_filters = NULL;
    }
    ;
    
    m_has_top10 = false;
    
    if (m_top10)
    {
        delete m_top10;
        m_top10 = NULL;
    }
    ;
    
    m_has_customFilters = false;
    
    if (m_customFilters)
    {
        delete m_customFilters;
        m_customFilters = NULL;
    }
    ;
    
    m_has_dynamicFilter = false;
    
    if (m_dynamicFilter)
    {
        delete m_dynamicFilter;
        m_dynamicFilter = NULL;
    }
    ;
    
    m_has_colorFilter = false;
    
    if (m_colorFilter)
    {
        delete m_colorFilter;
        m_colorFilter = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_iconFilter = true;
    if (!m_iconFilter)
    {
        m_iconFilter = new CT_IconFilter();
    }
    return m_iconFilter;
    }

    const CT_IconFilter& CT_FilterColumn::get_iconFilter() const
    {    
    if (m_iconFilter)
    {
        return *m_iconFilter;
    }
    return CT_IconFilter::default_instance();
    }

    bool CT_FilterColumn::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* CT_FilterColumn::mutable_extLst()
    {    
    
    m_has_filters = false;
    
    if (m_filters)
    {
        delete m_filters;
        m_filters = NULL;
    }
    ;
    
    m_has_top10 = false;
    
    if (m_top10)
    {
        delete m_top10;
        m_top10 = NULL;
    }
    ;
    
    m_has_customFilters = false;
    
    if (m_customFilters)
    {
        delete m_customFilters;
        m_customFilters = NULL;
    }
    ;
    
    m_has_dynamicFilter = false;
    
    if (m_dynamicFilter)
    {
        delete m_dynamicFilter;
        m_dynamicFilter = NULL;
    }
    ;
    
    m_has_colorFilter = false;
    
    if (m_colorFilter)
    {
        delete m_colorFilter;
        m_colorFilter = NULL;
    }
    ;
    
    m_has_iconFilter = false;
    
    if (m_iconFilter)
    {
        delete m_iconFilter;
        m_iconFilter = NULL;
    }
    ;
    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& CT_FilterColumn::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

    void CT_FilterColumn::clear()
    {    
    m_has_colId_attr = false;
    m_colId_attr = 0;
    
    m_has_hiddenButton_attr = false;
    m_hiddenButton_attr = false;
    
    m_has_showButton_attr = false;
    m_showButton_attr = false;
    }

    void CT_FilterColumn::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_colId_attr)
    {
        _outStream << " " << "colId" << "=\"" << m_colId_attr << "\"";
    }
    
    
    if (m_has_hiddenButton_attr)
    {
        _outStream << " " << "hiddenButton" << "=\"" << XSD::XMLBooleanStr(m_hiddenButton_attr) << "\"";
    }
    
    
    if (m_has_showButton_attr)
    {
        _outStream << " " << "showButton" << "=\"" << XSD::XMLBooleanStr(m_showButton_attr) << "\"";
    }
    
            _outStream << ">";
            
    if (m_has_filters)
    {
        m_filters->toXmlElem("main:filters", "", _outStream);;
    }
    
    if (m_has_top10)
    {
        m_top10->toXmlElem("main:top10", "", _outStream);;
    }
    
    if (m_has_customFilters)
    {
        m_customFilters->toXmlElem("main:customFilters", "", _outStream);;
    }
    
    if (m_has_dynamicFilter)
    {
        m_dynamicFilter->toXmlElem("main:dynamicFilter", "", _outStream);;
    }
    
    if (m_has_colorFilter)
    {
        m_colorFilter->toXmlElem("main:colorFilter", "", _outStream);;
    }
    
    if (m_has_iconFilter)
    {
        m_iconFilter->toXmlElem("main:iconFilter", "", _outStream);;
    }
    
    if (m_has_extLst)
    {
        m_extLst->toXmlElem("main:extLst", "", _outStream);;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_FilterColumn& CT_FilterColumn::default_instance()
    {    
    if (!CT_FilterColumn::default_instance_)
    {
        CT_FilterColumn::default_instance_ = new CT_FilterColumn();
    }
    return *CT_FilterColumn::default_instance_;
    }

    bool CT_FilterColumn::has_colId_attr() const
    {    
    return m_has_colId_attr;
    }

    void CT_FilterColumn::set_colId_attr(const XSD::unsignedInt_& _colId_attr)
    {    
    m_has_colId_attr = true;
    m_colId_attr = _colId_attr;
    }

    const XSD::unsignedInt_& CT_FilterColumn::get_colId_attr() const
    {    
    return m_colId_attr;
    }

    bool CT_FilterColumn::has_hiddenButton_attr() const
    {    
    return m_has_hiddenButton_attr;
    }

    void CT_FilterColumn::set_hiddenButton_attr(const XSD::boolean_& _hiddenButton_attr)
    {    
    m_has_hiddenButton_attr = true;
    m_hiddenButton_attr = _hiddenButton_attr;
    }

    const XSD::boolean_& CT_FilterColumn::get_hiddenButton_attr() const
    {    
    return m_hiddenButton_attr;
    }

    bool CT_FilterColumn::has_showButton_attr() const
    {    
    return m_has_showButton_attr;
    }

    void CT_FilterColumn::set_showButton_attr(const XSD::boolean_& _showButton_attr)
    {    
    m_has_showButton_attr = true;
    m_showButton_attr = _showButton_attr;
    }

    const XSD::boolean_& CT_FilterColumn::get_showButton_attr() const
    {    
    return m_showButton_attr;
    }

CT_FilterColumn* CT_FilterColumn::default_instance_ = NULL;

    // CT_Filters
    CT_Filters::CT_Filters()
    :m_has_blank_attr(false),
    m_blank_attr(false),
    m_has_calendarType_attr(false),
    m_calendarType_attr(NULL)
    {
    }
    CT_Filters::~CT_Filters()
{
    clear();    }
    CT_Filter* CT_Filters::add_filter()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Filter* pNewChild = pChildGroup->mutable_filter();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_DateGroupItem* CT_Filters::add_dateGroupItem()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_DateGroupItem* pNewChild = pChildGroup->mutable_dateGroupItem();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_Filters::clear()
    {    
    m_has_blank_attr = false;
    m_blank_attr = false;
    
    m_has_calendarType_attr = false;
    
    if (m_calendarType_attr)
    {
        delete m_calendarType_attr;
        m_calendarType_attr = NULL;
    }
    
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_Filters::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_blank_attr)
    {
        _outStream << " " << "blank" << "=\"" << XSD::XMLBooleanStr(m_blank_attr) << "\"";
    }
    
    
    if (m_has_calendarType_attr)
    {
        m_calendarType_attr->toXmlAttr("calendarType", _outStream);
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_filter())
            {
                (*iter)->get_filter().toXmlElem("main:filter", "", _outStream);
            }
            else if ((*iter)->has_dateGroupItem())
            {
                (*iter)->get_dateGroupItem().toXmlElem("main:dateGroupItem", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_Filters& CT_Filters::default_instance()
    {    
    if (!CT_Filters::default_instance_)
    {
        CT_Filters::default_instance_ = new CT_Filters();
    }
    return *CT_Filters::default_instance_;
    }

    bool CT_Filters::has_blank_attr() const
    {    
    return m_has_blank_attr;
    }

    void CT_Filters::set_blank_attr(const XSD::boolean_& _blank_attr)
    {    
    m_has_blank_attr = true;
    m_blank_attr = _blank_attr;
    }

    const XSD::boolean_& CT_Filters::get_blank_attr() const
    {    
    return m_blank_attr;
    }

    bool CT_Filters::has_calendarType_attr() const
    {    
    return m_has_calendarType_attr;
    }

    void CT_Filters::set_calendarType_attr(const ns_s::ST_CalendarType& _calendarType_attr)
    {    
    m_has_calendarType_attr = true;
    m_calendarType_attr = new ns_s::ST_CalendarType(_calendarType_attr);
    }

    const ns_s::ST_CalendarType& CT_Filters::get_calendarType_attr() const
    {    
    if (m_calendarType_attr)
    {
        return *m_calendarType_attr;
    }
    return ns_s::ST_CalendarType::default_instance();
    }


    // CT_Filters::ChildGroup_1
    CT_Filters::ChildGroup_1::ChildGroup_1()
    :m_has_filter(false),
    m_filter(NULL),
    m_has_dateGroupItem(false),
    m_dateGroupItem(NULL)
    {
    }
    bool CT_Filters::ChildGroup_1::has_filter() const
    {    
    return m_has_filter;
    }

    CT_Filter* CT_Filters::ChildGroup_1::mutable_filter()
    {    
    
    m_has_dateGroupItem = false;
    
    if (m_dateGroupItem)
    {
        delete m_dateGroupItem;
        m_dateGroupItem = NULL;
    }
    ;
    
    m_has_filter = true;
    if (!m_filter)
    {
        m_filter = new CT_Filter();
    }
    return m_filter;
    }

    const CT_Filter& CT_Filters::ChildGroup_1::get_filter() const
    {    
    if (m_filter)
    {
        return *m_filter;
    }
    return CT_Filter::default_instance();
    }

    bool CT_Filters::ChildGroup_1::has_dateGroupItem() const
    {    
    return m_has_dateGroupItem;
    }

    CT_DateGroupItem* CT_Filters::ChildGroup_1::mutable_dateGroupItem()
    {    
    
    m_has_filter = false;
    
    if (m_filter)
    {
        delete m_filter;
        m_filter = NULL;
    }
    ;
    
    m_has_dateGroupItem = true;
    if (!m_dateGroupItem)
    {
        m_dateGroupItem = new CT_DateGroupItem();
    }
    return m_dateGroupItem;
    }

    const CT_DateGroupItem& CT_Filters::ChildGroup_1::get_dateGroupItem() const
    {    
    if (m_dateGroupItem)
    {
        return *m_dateGroupItem;
    }
    return CT_DateGroupItem::default_instance();
    }

CT_Filters* CT_Filters::default_instance_ = NULL;

    // CT_Filter
    CT_Filter::CT_Filter()
    :m_has_val_attr(false),
    m_val_attr(NULL)
    {
    }
    CT_Filter::~CT_Filter()
{
    clear();    }
    void CT_Filter::clear()
    {    
    m_has_val_attr = false;
    
    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }
    
    }

    void CT_Filter::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("val", _outStream);
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_Filter& CT_Filter::default_instance()
    {    
    if (!CT_Filter::default_instance_)
    {
        CT_Filter::default_instance_ = new CT_Filter();
    }
    return *CT_Filter::default_instance_;
    }

    bool CT_Filter::has_val_attr() const
    {    
    return m_has_val_attr;
    }

    void CT_Filter::set_val_attr(const ns_s::ST_Xstring& _val_attr)
    {    
    m_has_val_attr = true;
    m_val_attr = new ns_s::ST_Xstring(_val_attr);
    }

    const ns_s::ST_Xstring& CT_Filter::get_val_attr() const
    {    
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

CT_Filter* CT_Filter::default_instance_ = NULL;

    // CT_CustomFilters
    CT_CustomFilters::CT_CustomFilters()
    :m_has_and_attr(false),
    m_and_attr(false)
    {
    }
    CT_CustomFilters::~CT_CustomFilters()
{
    clear();    }
    CT_CustomFilter* CT_CustomFilters::add_customFilter()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_CustomFilter* pNewChild = pChildGroup->mutable_customFilter();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_CustomFilters::clear()
    {    
    m_has_and_attr = false;
    m_and_attr = false;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_CustomFilters::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_and_attr)
    {
        _outStream << " " << "and" << "=\"" << XSD::XMLBooleanStr(m_and_attr) << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_customFilter())
            {
                (*iter)->get_customFilter().toXmlElem("main:customFilter", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_CustomFilters& CT_CustomFilters::default_instance()
    {    
    if (!CT_CustomFilters::default_instance_)
    {
        CT_CustomFilters::default_instance_ = new CT_CustomFilters();
    }
    return *CT_CustomFilters::default_instance_;
    }

    bool CT_CustomFilters::has_and_attr() const
    {    
    return m_has_and_attr;
    }

    void CT_CustomFilters::set_and_attr(const XSD::boolean_& _and_attr)
    {    
    m_has_and_attr = true;
    m_and_attr = _and_attr;
    }

    const XSD::boolean_& CT_CustomFilters::get_and_attr() const
    {    
    return m_and_attr;
    }


    // CT_CustomFilters::ChildGroup_1
    CT_CustomFilters::ChildGroup_1::ChildGroup_1()
    :m_has_customFilter(false),
    m_customFilter(NULL)
    {
    }
    bool CT_CustomFilters::ChildGroup_1::has_customFilter() const
    {    
    return m_has_customFilter;
    }

    CT_CustomFilter* CT_CustomFilters::ChildGroup_1::mutable_customFilter()
    {    
    
    m_has_customFilter = true;
    if (!m_customFilter)
    {
        m_customFilter = new CT_CustomFilter();
    }
    return m_customFilter;
    }

    const CT_CustomFilter& CT_CustomFilters::ChildGroup_1::get_customFilter() const
    {    
    if (m_customFilter)
    {
        return *m_customFilter;
    }
    return CT_CustomFilter::default_instance();
    }

CT_CustomFilters* CT_CustomFilters::default_instance_ = NULL;

    // CT_CustomFilter
    CT_CustomFilter::CT_CustomFilter()
    :m_has_operator_attr(false),
    m_operator_attr(NULL),
    m_has_val_attr(false),
    m_val_attr(NULL)
    {
    }
    CT_CustomFilter::~CT_CustomFilter()
{
    clear();    }
    void CT_CustomFilter::clear()
    {    
    m_has_operator_attr = false;
    
    if (m_operator_attr)
    {
        delete m_operator_attr;
        m_operator_attr = NULL;
    }
    
    
    m_has_val_attr = false;
    
    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }
    
    }

    void CT_CustomFilter::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_operator_attr)
    {
        m_operator_attr->toXmlAttr("operator", _outStream);
    }
    
    
    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("val", _outStream);
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_CustomFilter& CT_CustomFilter::default_instance()
    {    
    if (!CT_CustomFilter::default_instance_)
    {
        CT_CustomFilter::default_instance_ = new CT_CustomFilter();
    }
    return *CT_CustomFilter::default_instance_;
    }

    bool CT_CustomFilter::has_operator_attr() const
    {    
    return m_has_operator_attr;
    }

    void CT_CustomFilter::set_operator_attr(const ST_FilterOperator& _operator_attr)
    {    
    m_has_operator_attr = true;
    m_operator_attr = new ST_FilterOperator(_operator_attr);
    }

    const ST_FilterOperator& CT_CustomFilter::get_operator_attr() const
    {    
    if (m_operator_attr)
    {
        return *m_operator_attr;
    }
    return ST_FilterOperator::default_instance();
    }

    bool CT_CustomFilter::has_val_attr() const
    {    
    return m_has_val_attr;
    }

    void CT_CustomFilter::set_val_attr(const ns_s::ST_Xstring& _val_attr)
    {    
    m_has_val_attr = true;
    m_val_attr = new ns_s::ST_Xstring(_val_attr);
    }

    const ns_s::ST_Xstring& CT_CustomFilter::get_val_attr() const
    {    
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

CT_CustomFilter* CT_CustomFilter::default_instance_ = NULL;

    // CT_Top10
    CT_Top10::CT_Top10()
    :m_has_top_attr(false),
    m_top_attr(false),
    m_has_percent_attr(false),
    m_percent_attr(false),
    m_has_val_attr(false),
    m_val_attr(0),
    m_has_filterVal_attr(false),
    m_filterVal_attr(0)
    {
    }
    CT_Top10::~CT_Top10()
{
    clear();    }
    void CT_Top10::clear()
    {    
    m_has_top_attr = false;
    m_top_attr = false;
    
    m_has_percent_attr = false;
    m_percent_attr = false;
    
    m_has_val_attr = false;
    m_val_attr = 0;
    
    m_has_filterVal_attr = false;
    m_filterVal_attr = 0;
    }

    void CT_Top10::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_top_attr)
    {
        _outStream << " " << "top" << "=\"" << XSD::XMLBooleanStr(m_top_attr) << "\"";
    }
    
    
    if (m_has_percent_attr)
    {
        _outStream << " " << "percent" << "=\"" << XSD::XMLBooleanStr(m_percent_attr) << "\"";
    }
    
    
    if (m_has_val_attr)
    {
        _outStream << " " << "val" << "=\"" << m_val_attr << "\"";
    }
    
    
    if (m_has_filterVal_attr)
    {
        _outStream << " " << "filterVal" << "=\"" << m_filterVal_attr << "\"";
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_Top10& CT_Top10::default_instance()
    {    
    if (!CT_Top10::default_instance_)
    {
        CT_Top10::default_instance_ = new CT_Top10();
    }
    return *CT_Top10::default_instance_;
    }

    bool CT_Top10::has_top_attr() const
    {    
    return m_has_top_attr;
    }

    void CT_Top10::set_top_attr(const XSD::boolean_& _top_attr)
    {    
    m_has_top_attr = true;
    m_top_attr = _top_attr;
    }

    const XSD::boolean_& CT_Top10::get_top_attr() const
    {    
    return m_top_attr;
    }

    bool CT_Top10::has_percent_attr() const
    {    
    return m_has_percent_attr;
    }

    void CT_Top10::set_percent_attr(const XSD::boolean_& _percent_attr)
    {    
    m_has_percent_attr = true;
    m_percent_attr = _percent_attr;
    }

    const XSD::boolean_& CT_Top10::get_percent_attr() const
    {    
    return m_percent_attr;
    }

    bool CT_Top10::has_val_attr() const
    {    
    return m_has_val_attr;
    }

    void CT_Top10::set_val_attr(const XSD::double_& _val_attr)
    {    
    m_has_val_attr = true;
    m_val_attr = _val_attr;
    }

    const XSD::double_& CT_Top10::get_val_attr() const
    {    
    return m_val_attr;
    }

    bool CT_Top10::has_filterVal_attr() const
    {    
    return m_has_filterVal_attr;
    }

    void CT_Top10::set_filterVal_attr(const XSD::double_& _filterVal_attr)
    {    
    m_has_filterVal_attr = true;
    m_filterVal_attr = _filterVal_attr;
    }

    const XSD::double_& CT_Top10::get_filterVal_attr() const
    {    
    return m_filterVal_attr;
    }

CT_Top10* CT_Top10::default_instance_ = NULL;

    // CT_ColorFilter
    CT_ColorFilter::CT_ColorFilter()
    :m_has_dxfId_attr(false),
    m_dxfId_attr(NULL),
    m_has_cellColor_attr(false),
    m_cellColor_attr(false)
    {
    }
    CT_ColorFilter::~CT_ColorFilter()
{
    clear();    }
    void CT_ColorFilter::clear()
    {    
    m_has_dxfId_attr = false;
    
    if (m_dxfId_attr)
    {
        delete m_dxfId_attr;
        m_dxfId_attr = NULL;
    }
    
    
    m_has_cellColor_attr = false;
    m_cellColor_attr = false;
    }

    void CT_ColorFilter::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_dxfId_attr)
    {
        m_dxfId_attr->toXmlAttr("dxfId", _outStream);
    }
    
    
    if (m_has_cellColor_attr)
    {
        _outStream << " " << "cellColor" << "=\"" << XSD::XMLBooleanStr(m_cellColor_attr) << "\"";
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_ColorFilter& CT_ColorFilter::default_instance()
    {    
    if (!CT_ColorFilter::default_instance_)
    {
        CT_ColorFilter::default_instance_ = new CT_ColorFilter();
    }
    return *CT_ColorFilter::default_instance_;
    }

    bool CT_ColorFilter::has_dxfId_attr() const
    {    
    return m_has_dxfId_attr;
    }

    void CT_ColorFilter::set_dxfId_attr(const ST_DxfId& _dxfId_attr)
    {    
    m_has_dxfId_attr = true;
    m_dxfId_attr = new ST_DxfId(_dxfId_attr);
    }

    const ST_DxfId& CT_ColorFilter::get_dxfId_attr() const
    {    
    if (m_dxfId_attr)
    {
        return *m_dxfId_attr;
    }
    return ST_DxfId::default_instance();
    }

    bool CT_ColorFilter::has_cellColor_attr() const
    {    
    return m_has_cellColor_attr;
    }

    void CT_ColorFilter::set_cellColor_attr(const XSD::boolean_& _cellColor_attr)
    {    
    m_has_cellColor_attr = true;
    m_cellColor_attr = _cellColor_attr;
    }

    const XSD::boolean_& CT_ColorFilter::get_cellColor_attr() const
    {    
    return m_cellColor_attr;
    }

CT_ColorFilter* CT_ColorFilter::default_instance_ = NULL;

    // CT_IconFilter
    CT_IconFilter::CT_IconFilter()
    :m_has_iconSet_attr(false),
    m_iconSet_attr(NULL),
    m_has_iconId_attr(false),
    m_iconId_attr(0)
    {
    }
    CT_IconFilter::~CT_IconFilter()
{
    clear();    }
    void CT_IconFilter::clear()
    {    
    m_has_iconSet_attr = false;
    
    if (m_iconSet_attr)
    {
        delete m_iconSet_attr;
        m_iconSet_attr = NULL;
    }
    
    
    m_has_iconId_attr = false;
    m_iconId_attr = 0;
    }

    void CT_IconFilter::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_iconSet_attr)
    {
        m_iconSet_attr->toXmlAttr("iconSet", _outStream);
    }
    
    
    if (m_has_iconId_attr)
    {
        _outStream << " " << "iconId" << "=\"" << m_iconId_attr << "\"";
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_IconFilter& CT_IconFilter::default_instance()
    {    
    if (!CT_IconFilter::default_instance_)
    {
        CT_IconFilter::default_instance_ = new CT_IconFilter();
    }
    return *CT_IconFilter::default_instance_;
    }

    bool CT_IconFilter::has_iconSet_attr() const
    {    
    return m_has_iconSet_attr;
    }

    void CT_IconFilter::set_iconSet_attr(const ST_IconSetType& _iconSet_attr)
    {    
    m_has_iconSet_attr = true;
    m_iconSet_attr = new ST_IconSetType(_iconSet_attr);
    }

    const ST_IconSetType& CT_IconFilter::get_iconSet_attr() const
    {    
    if (m_iconSet_attr)
    {
        return *m_iconSet_attr;
    }
    return ST_IconSetType::default_instance();
    }

    bool CT_IconFilter::has_iconId_attr() const
    {    
    return m_has_iconId_attr;
    }

    void CT_IconFilter::set_iconId_attr(const XSD::unsignedInt_& _iconId_attr)
    {    
    m_has_iconId_attr = true;
    m_iconId_attr = _iconId_attr;
    }

    const XSD::unsignedInt_& CT_IconFilter::get_iconId_attr() const
    {    
    return m_iconId_attr;
    }

CT_IconFilter* CT_IconFilter::default_instance_ = NULL;

    // CT_DynamicFilter
    CT_DynamicFilter::CT_DynamicFilter()
    :m_has_type_attr(false),
    m_type_attr(NULL),
    m_has_val_attr(false),
    m_val_attr(0),
    m_has_valIso_attr(false),
    m_valIso_attr(""),
    m_has_maxVal_attr(false),
    m_maxVal_attr(0),
    m_has_maxValIso_attr(false),
    m_maxValIso_attr("")
    {
    }
    CT_DynamicFilter::~CT_DynamicFilter()
{
    clear();    }
    void CT_DynamicFilter::clear()
    {    
    m_has_type_attr = false;
    
    if (m_type_attr)
    {
        delete m_type_attr;
        m_type_attr = NULL;
    }
    
    
    m_has_val_attr = false;
    m_val_attr = 0;
    
    m_has_valIso_attr = false;
    m_valIso_attr.clear();
    
    m_has_maxVal_attr = false;
    m_maxVal_attr = 0;
    
    m_has_maxValIso_attr = false;
    m_maxValIso_attr.clear();
    }

    void CT_DynamicFilter::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_type_attr)
    {
        m_type_attr->toXmlAttr("type", _outStream);
    }
    
    
    if (m_has_val_attr)
    {
        _outStream << " " << "val" << "=\"" << m_val_attr << "\"";
    }
    
    
    if (m_has_valIso_attr)
    {
        _outStream << " " << "valIso" << "=\"" << m_valIso_attr << "\"";
    }
    
    
    if (m_has_maxVal_attr)
    {
        _outStream << " " << "maxVal" << "=\"" << m_maxVal_attr << "\"";
    }
    
    
    if (m_has_maxValIso_attr)
    {
        _outStream << " " << "maxValIso" << "=\"" << m_maxValIso_attr << "\"";
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_DynamicFilter& CT_DynamicFilter::default_instance()
    {    
    if (!CT_DynamicFilter::default_instance_)
    {
        CT_DynamicFilter::default_instance_ = new CT_DynamicFilter();
    }
    return *CT_DynamicFilter::default_instance_;
    }

    bool CT_DynamicFilter::has_type_attr() const
    {    
    return m_has_type_attr;
    }

    void CT_DynamicFilter::set_type_attr(const ST_DynamicFilterType& _type_attr)
    {    
    m_has_type_attr = true;
    m_type_attr = new ST_DynamicFilterType(_type_attr);
    }

    const ST_DynamicFilterType& CT_DynamicFilter::get_type_attr() const
    {    
    if (m_type_attr)
    {
        return *m_type_attr;
    }
    return ST_DynamicFilterType::default_instance();
    }

    bool CT_DynamicFilter::has_val_attr() const
    {    
    return m_has_val_attr;
    }

    void CT_DynamicFilter::set_val_attr(const XSD::double_& _val_attr)
    {    
    m_has_val_attr = true;
    m_val_attr = _val_attr;
    }

    const XSD::double_& CT_DynamicFilter::get_val_attr() const
    {    
    return m_val_attr;
    }

    bool CT_DynamicFilter::has_valIso_attr() const
    {    
    return m_has_valIso_attr;
    }

    void CT_DynamicFilter::set_valIso_attr(const XSD::dateTime_& _valIso_attr)
    {    
    m_has_valIso_attr = true;
    m_valIso_attr = _valIso_attr;
    }

    const XSD::dateTime_& CT_DynamicFilter::get_valIso_attr() const
    {    
    return m_valIso_attr;
    }

    bool CT_DynamicFilter::has_maxVal_attr() const
    {    
    return m_has_maxVal_attr;
    }

    void CT_DynamicFilter::set_maxVal_attr(const XSD::double_& _maxVal_attr)
    {    
    m_has_maxVal_attr = true;
    m_maxVal_attr = _maxVal_attr;
    }

    const XSD::double_& CT_DynamicFilter::get_maxVal_attr() const
    {    
    return m_maxVal_attr;
    }

    bool CT_DynamicFilter::has_maxValIso_attr() const
    {    
    return m_has_maxValIso_attr;
    }

    void CT_DynamicFilter::set_maxValIso_attr(const XSD::dateTime_& _maxValIso_attr)
    {    
    m_has_maxValIso_attr = true;
    m_maxValIso_attr = _maxValIso_attr;
    }

    const XSD::dateTime_& CT_DynamicFilter::get_maxValIso_attr() const
    {    
    return m_maxValIso_attr;
    }

CT_DynamicFilter* CT_DynamicFilter::default_instance_ = NULL;

    // CT_SortState
    CT_SortState::CT_SortState()
    :m_has_columnSort_attr(false),
    m_columnSort_attr(false),
    m_has_caseSensitive_attr(false),
    m_caseSensitive_attr(false),
    m_has_sortMethod_attr(false),
    m_sortMethod_attr(NULL),
    m_has_ref_attr(false),
    m_ref_attr(NULL)
    {
    }
    CT_SortState::~CT_SortState()
{
    clear();    }
    CT_SortCondition* CT_SortState::add_sortCondition()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_SortCondition* pNewChild = pChildGroup->mutable_sortCondition();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_ExtensionList* CT_SortState::add_extLst()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_ExtensionList* pNewChild = pChildGroup->mutable_extLst();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_SortState::clear()
    {    
    m_has_columnSort_attr = false;
    m_columnSort_attr = false;
    
    m_has_caseSensitive_attr = false;
    m_caseSensitive_attr = false;
    
    m_has_sortMethod_attr = false;
    
    if (m_sortMethod_attr)
    {
        delete m_sortMethod_attr;
        m_sortMethod_attr = NULL;
    }
    
    
    m_has_ref_attr = false;
    
    if (m_ref_attr)
    {
        delete m_ref_attr;
        m_ref_attr = NULL;
    }
    
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_SortState::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_columnSort_attr)
    {
        _outStream << " " << "columnSort" << "=\"" << XSD::XMLBooleanStr(m_columnSort_attr) << "\"";
    }
    
    
    if (m_has_caseSensitive_attr)
    {
        _outStream << " " << "caseSensitive" << "=\"" << XSD::XMLBooleanStr(m_caseSensitive_attr) << "\"";
    }
    
    
    if (m_has_sortMethod_attr)
    {
        m_sortMethod_attr->toXmlAttr("sortMethod", _outStream);
    }
    
    
    if (m_has_ref_attr)
    {
        m_ref_attr->toXmlAttr("ref", _outStream);
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_sortCondition())
            {
                (*iter)->get_sortCondition().toXmlElem("main:sortCondition", "", _outStream);
            }
            else if ((*iter)->has_extLst())
            {
                (*iter)->get_extLst().toXmlElem("main:extLst", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_SortState& CT_SortState::default_instance()
    {    
    if (!CT_SortState::default_instance_)
    {
        CT_SortState::default_instance_ = new CT_SortState();
    }
    return *CT_SortState::default_instance_;
    }

    bool CT_SortState::has_columnSort_attr() const
    {    
    return m_has_columnSort_attr;
    }

    void CT_SortState::set_columnSort_attr(const XSD::boolean_& _columnSort_attr)
    {    
    m_has_columnSort_attr = true;
    m_columnSort_attr = _columnSort_attr;
    }

    const XSD::boolean_& CT_SortState::get_columnSort_attr() const
    {    
    return m_columnSort_attr;
    }

    bool CT_SortState::has_caseSensitive_attr() const
    {    
    return m_has_caseSensitive_attr;
    }

    void CT_SortState::set_caseSensitive_attr(const XSD::boolean_& _caseSensitive_attr)
    {    
    m_has_caseSensitive_attr = true;
    m_caseSensitive_attr = _caseSensitive_attr;
    }

    const XSD::boolean_& CT_SortState::get_caseSensitive_attr() const
    {    
    return m_caseSensitive_attr;
    }

    bool CT_SortState::has_sortMethod_attr() const
    {    
    return m_has_sortMethod_attr;
    }

    void CT_SortState::set_sortMethod_attr(const ST_SortMethod& _sortMethod_attr)
    {    
    m_has_sortMethod_attr = true;
    m_sortMethod_attr = new ST_SortMethod(_sortMethod_attr);
    }

    const ST_SortMethod& CT_SortState::get_sortMethod_attr() const
    {    
    if (m_sortMethod_attr)
    {
        return *m_sortMethod_attr;
    }
    return ST_SortMethod::default_instance();
    }

    bool CT_SortState::has_ref_attr() const
    {    
    return m_has_ref_attr;
    }

    void CT_SortState::set_ref_attr(const ST_Ref& _ref_attr)
    {    
    m_has_ref_attr = true;
    m_ref_attr = new ST_Ref(_ref_attr);
    }

    const ST_Ref& CT_SortState::get_ref_attr() const
    {    
    if (m_ref_attr)
    {
        return *m_ref_attr;
    }
    return ST_Ref::default_instance();
    }


    // CT_SortState::ChildGroup_1
    CT_SortState::ChildGroup_1::ChildGroup_1()
    :m_has_sortCondition(false),
    m_sortCondition(NULL),
    m_has_extLst(false),
    m_extLst(NULL)
    {
    }
    bool CT_SortState::ChildGroup_1::has_sortCondition() const
    {    
    return m_has_sortCondition;
    }

    CT_SortCondition* CT_SortState::ChildGroup_1::mutable_sortCondition()
    {    
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_sortCondition = true;
    if (!m_sortCondition)
    {
        m_sortCondition = new CT_SortCondition();
    }
    return m_sortCondition;
    }

    const CT_SortCondition& CT_SortState::ChildGroup_1::get_sortCondition() const
    {    
    if (m_sortCondition)
    {
        return *m_sortCondition;
    }
    return CT_SortCondition::default_instance();
    }

    bool CT_SortState::ChildGroup_1::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* CT_SortState::ChildGroup_1::mutable_extLst()
    {    
    
    m_has_sortCondition = false;
    
    if (m_sortCondition)
    {
        delete m_sortCondition;
        m_sortCondition = NULL;
    }
    ;
    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& CT_SortState::ChildGroup_1::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

CT_SortState* CT_SortState::default_instance_ = NULL;

    // CT_SortCondition
    CT_SortCondition::CT_SortCondition()
    :m_has_descending_attr(false),
    m_descending_attr(false),
    m_has_sortBy_attr(false),
    m_sortBy_attr(NULL),
    m_has_ref_attr(false),
    m_ref_attr(NULL),
    m_has_customList_attr(false),
    m_customList_attr(NULL),
    m_has_dxfId_attr(false),
    m_dxfId_attr(NULL),
    m_has_iconSet_attr(false),
    m_iconSet_attr(NULL),
    m_has_iconId_attr(false),
    m_iconId_attr(0)
    {
    }
    CT_SortCondition::~CT_SortCondition()
{
    clear();    }
    void CT_SortCondition::clear()
    {    
    m_has_descending_attr = false;
    m_descending_attr = false;
    
    m_has_sortBy_attr = false;
    
    if (m_sortBy_attr)
    {
        delete m_sortBy_attr;
        m_sortBy_attr = NULL;
    }
    
    
    m_has_ref_attr = false;
    
    if (m_ref_attr)
    {
        delete m_ref_attr;
        m_ref_attr = NULL;
    }
    
    
    m_has_customList_attr = false;
    
    if (m_customList_attr)
    {
        delete m_customList_attr;
        m_customList_attr = NULL;
    }
    
    
    m_has_dxfId_attr = false;
    
    if (m_dxfId_attr)
    {
        delete m_dxfId_attr;
        m_dxfId_attr = NULL;
    }
    
    
    m_has_iconSet_attr = false;
    
    if (m_iconSet_attr)
    {
        delete m_iconSet_attr;
        m_iconSet_attr = NULL;
    }
    
    
    m_has_iconId_attr = false;
    m_iconId_attr = 0;
    }

    void CT_SortCondition::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_descending_attr)
    {
        _outStream << " " << "descending" << "=\"" << XSD::XMLBooleanStr(m_descending_attr) << "\"";
    }
    
    
    if (m_has_sortBy_attr)
    {
        m_sortBy_attr->toXmlAttr("sortBy", _outStream);
    }
    
    
    if (m_has_ref_attr)
    {
        m_ref_attr->toXmlAttr("ref", _outStream);
    }
    
    
    if (m_has_customList_attr)
    {
        m_customList_attr->toXmlAttr("customList", _outStream);
    }
    
    
    if (m_has_dxfId_attr)
    {
        m_dxfId_attr->toXmlAttr("dxfId", _outStream);
    }
    
    
    if (m_has_iconSet_attr)
    {
        m_iconSet_attr->toXmlAttr("iconSet", _outStream);
    }
    
    
    if (m_has_iconId_attr)
    {
        _outStream << " " << "iconId" << "=\"" << m_iconId_attr << "\"";
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_SortCondition& CT_SortCondition::default_instance()
    {    
    if (!CT_SortCondition::default_instance_)
    {
        CT_SortCondition::default_instance_ = new CT_SortCondition();
    }
    return *CT_SortCondition::default_instance_;
    }

    bool CT_SortCondition::has_descending_attr() const
    {    
    return m_has_descending_attr;
    }

    void CT_SortCondition::set_descending_attr(const XSD::boolean_& _descending_attr)
    {    
    m_has_descending_attr = true;
    m_descending_attr = _descending_attr;
    }

    const XSD::boolean_& CT_SortCondition::get_descending_attr() const
    {    
    return m_descending_attr;
    }

    bool CT_SortCondition::has_sortBy_attr() const
    {    
    return m_has_sortBy_attr;
    }

    void CT_SortCondition::set_sortBy_attr(const ST_SortBy& _sortBy_attr)
    {    
    m_has_sortBy_attr = true;
    m_sortBy_attr = new ST_SortBy(_sortBy_attr);
    }

    const ST_SortBy& CT_SortCondition::get_sortBy_attr() const
    {    
    if (m_sortBy_attr)
    {
        return *m_sortBy_attr;
    }
    return ST_SortBy::default_instance();
    }

    bool CT_SortCondition::has_ref_attr() const
    {    
    return m_has_ref_attr;
    }

    void CT_SortCondition::set_ref_attr(const ST_Ref& _ref_attr)
    {    
    m_has_ref_attr = true;
    m_ref_attr = new ST_Ref(_ref_attr);
    }

    const ST_Ref& CT_SortCondition::get_ref_attr() const
    {    
    if (m_ref_attr)
    {
        return *m_ref_attr;
    }
    return ST_Ref::default_instance();
    }

    bool CT_SortCondition::has_customList_attr() const
    {    
    return m_has_customList_attr;
    }

    void CT_SortCondition::set_customList_attr(const ns_s::ST_Xstring& _customList_attr)
    {    
    m_has_customList_attr = true;
    m_customList_attr = new ns_s::ST_Xstring(_customList_attr);
    }

    const ns_s::ST_Xstring& CT_SortCondition::get_customList_attr() const
    {    
    if (m_customList_attr)
    {
        return *m_customList_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_SortCondition::has_dxfId_attr() const
    {    
    return m_has_dxfId_attr;
    }

    void CT_SortCondition::set_dxfId_attr(const ST_DxfId& _dxfId_attr)
    {    
    m_has_dxfId_attr = true;
    m_dxfId_attr = new ST_DxfId(_dxfId_attr);
    }

    const ST_DxfId& CT_SortCondition::get_dxfId_attr() const
    {    
    if (m_dxfId_attr)
    {
        return *m_dxfId_attr;
    }
    return ST_DxfId::default_instance();
    }

    bool CT_SortCondition::has_iconSet_attr() const
    {    
    return m_has_iconSet_attr;
    }

    void CT_SortCondition::set_iconSet_attr(const ST_IconSetType& _iconSet_attr)
    {    
    m_has_iconSet_attr = true;
    m_iconSet_attr = new ST_IconSetType(_iconSet_attr);
    }

    const ST_IconSetType& CT_SortCondition::get_iconSet_attr() const
    {    
    if (m_iconSet_attr)
    {
        return *m_iconSet_attr;
    }
    return ST_IconSetType::default_instance();
    }

    bool CT_SortCondition::has_iconId_attr() const
    {    
    return m_has_iconId_attr;
    }

    void CT_SortCondition::set_iconId_attr(const XSD::unsignedInt_& _iconId_attr)
    {    
    m_has_iconId_attr = true;
    m_iconId_attr = _iconId_attr;
    }

    const XSD::unsignedInt_& CT_SortCondition::get_iconId_attr() const
    {    
    return m_iconId_attr;
    }

CT_SortCondition* CT_SortCondition::default_instance_ = NULL;

    // CT_DateGroupItem
    CT_DateGroupItem::CT_DateGroupItem()
    :m_has_year_attr(false),
    m_year_attr(0),
    m_has_month_attr(false),
    m_month_attr(0),
    m_has_day_attr(false),
    m_day_attr(0),
    m_has_hour_attr(false),
    m_hour_attr(0),
    m_has_minute_attr(false),
    m_minute_attr(0),
    m_has_second_attr(false),
    m_second_attr(0),
    m_has_dateTimeGrouping_attr(false),
    m_dateTimeGrouping_attr(NULL)
    {
    }
    CT_DateGroupItem::~CT_DateGroupItem()
{
    clear();    }
    void CT_DateGroupItem::clear()
    {    
    m_has_year_attr = false;
    m_year_attr = 0;
    
    m_has_month_attr = false;
    m_month_attr = 0;
    
    m_has_day_attr = false;
    m_day_attr = 0;
    
    m_has_hour_attr = false;
    m_hour_attr = 0;
    
    m_has_minute_attr = false;
    m_minute_attr = 0;
    
    m_has_second_attr = false;
    m_second_attr = 0;
    
    m_has_dateTimeGrouping_attr = false;
    
    if (m_dateTimeGrouping_attr)
    {
        delete m_dateTimeGrouping_attr;
        m_dateTimeGrouping_attr = NULL;
    }
    
    }

    void CT_DateGroupItem::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_year_attr)
    {
        _outStream << " " << "year" << "=\"" << m_year_attr << "\"";
    }
    
    
    if (m_has_month_attr)
    {
        _outStream << " " << "month" << "=\"" << m_month_attr << "\"";
    }
    
    
    if (m_has_day_attr)
    {
        _outStream << " " << "day" << "=\"" << m_day_attr << "\"";
    }
    
    
    if (m_has_hour_attr)
    {
        _outStream << " " << "hour" << "=\"" << m_hour_attr << "\"";
    }
    
    
    if (m_has_minute_attr)
    {
        _outStream << " " << "minute" << "=\"" << m_minute_attr << "\"";
    }
    
    
    if (m_has_second_attr)
    {
        _outStream << " " << "second" << "=\"" << m_second_attr << "\"";
    }
    
    
    if (m_has_dateTimeGrouping_attr)
    {
        m_dateTimeGrouping_attr->toXmlAttr("dateTimeGrouping", _outStream);
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_DateGroupItem& CT_DateGroupItem::default_instance()
    {    
    if (!CT_DateGroupItem::default_instance_)
    {
        CT_DateGroupItem::default_instance_ = new CT_DateGroupItem();
    }
    return *CT_DateGroupItem::default_instance_;
    }

    bool CT_DateGroupItem::has_year_attr() const
    {    
    return m_has_year_attr;
    }

    void CT_DateGroupItem::set_year_attr(const XSD::unsignedShort_& _year_attr)
    {    
    m_has_year_attr = true;
    m_year_attr = _year_attr;
    }

    const XSD::unsignedShort_& CT_DateGroupItem::get_year_attr() const
    {    
    return m_year_attr;
    }

    bool CT_DateGroupItem::has_month_attr() const
    {    
    return m_has_month_attr;
    }

    void CT_DateGroupItem::set_month_attr(const XSD::unsignedShort_& _month_attr)
    {    
    m_has_month_attr = true;
    m_month_attr = _month_attr;
    }

    const XSD::unsignedShort_& CT_DateGroupItem::get_month_attr() const
    {    
    return m_month_attr;
    }

    bool CT_DateGroupItem::has_day_attr() const
    {    
    return m_has_day_attr;
    }

    void CT_DateGroupItem::set_day_attr(const XSD::unsignedShort_& _day_attr)
    {    
    m_has_day_attr = true;
    m_day_attr = _day_attr;
    }

    const XSD::unsignedShort_& CT_DateGroupItem::get_day_attr() const
    {    
    return m_day_attr;
    }

    bool CT_DateGroupItem::has_hour_attr() const
    {    
    return m_has_hour_attr;
    }

    void CT_DateGroupItem::set_hour_attr(const XSD::unsignedShort_& _hour_attr)
    {    
    m_has_hour_attr = true;
    m_hour_attr = _hour_attr;
    }

    const XSD::unsignedShort_& CT_DateGroupItem::get_hour_attr() const
    {    
    return m_hour_attr;
    }

    bool CT_DateGroupItem::has_minute_attr() const
    {    
    return m_has_minute_attr;
    }

    void CT_DateGroupItem::set_minute_attr(const XSD::unsignedShort_& _minute_attr)
    {    
    m_has_minute_attr = true;
    m_minute_attr = _minute_attr;
    }

    const XSD::unsignedShort_& CT_DateGroupItem::get_minute_attr() const
    {    
    return m_minute_attr;
    }

    bool CT_DateGroupItem::has_second_attr() const
    {    
    return m_has_second_attr;
    }

    void CT_DateGroupItem::set_second_attr(const XSD::unsignedShort_& _second_attr)
    {    
    m_has_second_attr = true;
    m_second_attr = _second_attr;
    }

    const XSD::unsignedShort_& CT_DateGroupItem::get_second_attr() const
    {    
    return m_second_attr;
    }

    bool CT_DateGroupItem::has_dateTimeGrouping_attr() const
    {    
    return m_has_dateTimeGrouping_attr;
    }

    void CT_DateGroupItem::set_dateTimeGrouping_attr(const ST_DateTimeGrouping& _dateTimeGrouping_attr)
    {    
    m_has_dateTimeGrouping_attr = true;
    m_dateTimeGrouping_attr = new ST_DateTimeGrouping(_dateTimeGrouping_attr);
    }

    const ST_DateTimeGrouping& CT_DateGroupItem::get_dateTimeGrouping_attr() const
    {    
    if (m_dateTimeGrouping_attr)
    {
        return *m_dateTimeGrouping_attr;
    }
    return ST_DateTimeGrouping::default_instance();
    }

CT_DateGroupItem* CT_DateGroupItem::default_instance_ = NULL;

    // CT_XStringElement
    CT_XStringElement::CT_XStringElement()
    :m_has_v_attr(false),
    m_v_attr(NULL)
    {
    }
    CT_XStringElement::~CT_XStringElement()
{
    clear();    }
    void CT_XStringElement::clear()
    {    
    m_has_v_attr = false;
    
    if (m_v_attr)
    {
        delete m_v_attr;
        m_v_attr = NULL;
    }
    
    }

    void CT_XStringElement::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_v_attr)
    {
        m_v_attr->toXmlAttr("v", _outStream);
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_XStringElement& CT_XStringElement::default_instance()
    {    
    if (!CT_XStringElement::default_instance_)
    {
        CT_XStringElement::default_instance_ = new CT_XStringElement();
    }
    return *CT_XStringElement::default_instance_;
    }

    bool CT_XStringElement::has_v_attr() const
    {    
    return m_has_v_attr;
    }

    void CT_XStringElement::set_v_attr(const ns_s::ST_Xstring& _v_attr)
    {    
    m_has_v_attr = true;
    m_v_attr = new ns_s::ST_Xstring(_v_attr);
    }

    const ns_s::ST_Xstring& CT_XStringElement::get_v_attr() const
    {    
    if (m_v_attr)
    {
        return *m_v_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

CT_XStringElement* CT_XStringElement::default_instance_ = NULL;

    // CT_Extension
    CT_Extension::CT_Extension()
    :m_has__any(false),
    m__any(NULL),
    m_has_uri_attr(false),
    m_uri_attr("")
    {
    }
    CT_Extension::~CT_Extension()
{
    clear();    }
    void CT_Extension::clear()
    {    
    m_has_uri_attr = false;
    m_uri_attr.clear();
    }

    void CT_Extension::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_uri_attr)
    {
        _outStream << " " << "uri" << "=\"" << m_uri_attr << "\"";
    }
    
            _outStream << ">";
            
    if (m_has__any)
    {
        
    m__any->toXml(_outStream);
    ;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_Extension& CT_Extension::default_instance()
    {    
    if (!CT_Extension::default_instance_)
    {
        CT_Extension::default_instance_ = new CT_Extension();
    }
    return *CT_Extension::default_instance_;
    }

    bool CT_Extension::has_uri_attr() const
    {    
    return m_has_uri_attr;
    }

    void CT_Extension::set_uri_attr(const XSD::token_& _uri_attr)
    {    
    m_has_uri_attr = true;
    m_uri_attr = _uri_attr;
    }

    const XSD::token_& CT_Extension::get_uri_attr() const
    {    
    return m_uri_attr;
    }

CT_Extension* CT_Extension::default_instance_ = NULL;

    // CT_ObjectAnchor
    CT_ObjectAnchor::CT_ObjectAnchor()
    :m_has_xdr_from(false),
    m_xdr_from(NULL),
    m_has_xdr_to(false),
    m_xdr_to(NULL),
    m_has_moveWithCells_attr(false),
    m_moveWithCells_attr(false),
    m_has_sizeWithCells_attr(false),
    m_sizeWithCells_attr(false)
    {
    }
    CT_ObjectAnchor::~CT_ObjectAnchor()
{
    clear();    }
    bool CT_ObjectAnchor::has_xdr_from() const
    {    
    return m_has_xdr_from;
    }

    ns_xdr::CT_Marker* CT_ObjectAnchor::mutable_xdr_from()
    {    
    m_has_xdr_from = true;
    if (!m_xdr_from)
    {
        m_xdr_from = new ns_xdr::CT_Marker();
    }
    return m_xdr_from;
    }

    const ns_xdr::CT_Marker& CT_ObjectAnchor::get_xdr_from() const
    {    
    if (m_xdr_from)
    {
        return *m_xdr_from;
    }
    return ns_xdr::CT_Marker::default_instance();
    }

    bool CT_ObjectAnchor::has_xdr_to() const
    {    
    return m_has_xdr_to;
    }

    ns_xdr::CT_Marker* CT_ObjectAnchor::mutable_xdr_to()
    {    
    m_has_xdr_to = true;
    if (!m_xdr_to)
    {
        m_xdr_to = new ns_xdr::CT_Marker();
    }
    return m_xdr_to;
    }

    const ns_xdr::CT_Marker& CT_ObjectAnchor::get_xdr_to() const
    {    
    if (m_xdr_to)
    {
        return *m_xdr_to;
    }
    return ns_xdr::CT_Marker::default_instance();
    }

    void CT_ObjectAnchor::clear()
    {    
    m_has_moveWithCells_attr = false;
    m_moveWithCells_attr = false;
    
    m_has_sizeWithCells_attr = false;
    m_sizeWithCells_attr = false;
    }

    void CT_ObjectAnchor::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_moveWithCells_attr)
    {
        _outStream << " " << "moveWithCells" << "=\"" << XSD::XMLBooleanStr(m_moveWithCells_attr) << "\"";
    }
    
    
    if (m_has_sizeWithCells_attr)
    {
        _outStream << " " << "sizeWithCells" << "=\"" << XSD::XMLBooleanStr(m_sizeWithCells_attr) << "\"";
    }
    
            _outStream << ">";
            
    if (m_has_xdr_from)
    {
        m_xdr_from->toXmlElem("xdr:from", "", _outStream);;
    }
    
    if (m_has_xdr_to)
    {
        m_xdr_to->toXmlElem("xdr:to", "", _outStream);;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_ObjectAnchor& CT_ObjectAnchor::default_instance()
    {    
    if (!CT_ObjectAnchor::default_instance_)
    {
        CT_ObjectAnchor::default_instance_ = new CT_ObjectAnchor();
    }
    return *CT_ObjectAnchor::default_instance_;
    }

    bool CT_ObjectAnchor::has_moveWithCells_attr() const
    {    
    return m_has_moveWithCells_attr;
    }

    void CT_ObjectAnchor::set_moveWithCells_attr(const XSD::boolean_& _moveWithCells_attr)
    {    
    m_has_moveWithCells_attr = true;
    m_moveWithCells_attr = _moveWithCells_attr;
    }

    const XSD::boolean_& CT_ObjectAnchor::get_moveWithCells_attr() const
    {    
    return m_moveWithCells_attr;
    }

    bool CT_ObjectAnchor::has_sizeWithCells_attr() const
    {    
    return m_has_sizeWithCells_attr;
    }

    void CT_ObjectAnchor::set_sizeWithCells_attr(const XSD::boolean_& _sizeWithCells_attr)
    {    
    m_has_sizeWithCells_attr = true;
    m_sizeWithCells_attr = _sizeWithCells_attr;
    }

    const XSD::boolean_& CT_ObjectAnchor::get_sizeWithCells_attr() const
    {    
    return m_sizeWithCells_attr;
    }

CT_ObjectAnchor* CT_ObjectAnchor::default_instance_ = NULL;

    // CT_ExtensionList
    CT_ExtensionList::CT_ExtensionList()

    {
    }
    CT_ExtensionList::~CT_ExtensionList()
{
    clear();    }
    CT_Extension* CT_ExtensionList::add_ext()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Extension* pNewChild = pChildGroup->mutable_ext();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_ExtensionList::clear()
    {    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_ExtensionList::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_ext())
            {
                (*iter)->get_ext().toXmlElem("main:ext", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_ExtensionList& CT_ExtensionList::default_instance()
    {    
    if (!CT_ExtensionList::default_instance_)
    {
        CT_ExtensionList::default_instance_ = new CT_ExtensionList();
    }
    return *CT_ExtensionList::default_instance_;
    }


    // CT_ExtensionList::ChildGroup_1
    CT_ExtensionList::ChildGroup_1::ChildGroup_1()
    :m_has_ext(false),
    m_ext(NULL)
    {
    }
    bool CT_ExtensionList::ChildGroup_1::has_ext() const
    {    
    return m_has_ext;
    }

    CT_Extension* CT_ExtensionList::ChildGroup_1::mutable_ext()
    {    
    
    m_has_ext = true;
    if (!m_ext)
    {
        m_ext = new CT_Extension();
    }
    return m_ext;
    }

    const CT_Extension& CT_ExtensionList::ChildGroup_1::get_ext() const
    {    
    if (m_ext)
    {
        return *m_ext;
    }
    return CT_Extension::default_instance();
    }

CT_ExtensionList* CT_ExtensionList::default_instance_ = NULL;

    // CT_CalcChain
    CT_CalcChain::CT_CalcChain()

    {
    }
    CT_CalcChain::~CT_CalcChain()
{
    clear();    }
    CT_CalcCell* CT_CalcChain::add_c()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_CalcCell* pNewChild = pChildGroup->mutable_c();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_ExtensionList* CT_CalcChain::add_extLst()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_ExtensionList* pNewChild = pChildGroup->mutable_extLst();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_CalcChain::clear()
    {    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_CalcChain::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_c())
            {
                (*iter)->get_c().toXmlElem("main:c", "", _outStream);
            }
            else if ((*iter)->has_extLst())
            {
                (*iter)->get_extLst().toXmlElem("main:extLst", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_CalcChain& CT_CalcChain::default_instance()
    {    
    if (!CT_CalcChain::default_instance_)
    {
        CT_CalcChain::default_instance_ = new CT_CalcChain();
    }
    return *CT_CalcChain::default_instance_;
    }


    // CT_CalcChain::ChildGroup_1
    CT_CalcChain::ChildGroup_1::ChildGroup_1()
    :m_has_c(false),
    m_c(NULL),
    m_has_extLst(false),
    m_extLst(NULL)
    {
    }
    bool CT_CalcChain::ChildGroup_1::has_c() const
    {    
    return m_has_c;
    }

    CT_CalcCell* CT_CalcChain::ChildGroup_1::mutable_c()
    {    
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_c = true;
    if (!m_c)
    {
        m_c = new CT_CalcCell();
    }
    return m_c;
    }

    const CT_CalcCell& CT_CalcChain::ChildGroup_1::get_c() const
    {    
    if (m_c)
    {
        return *m_c;
    }
    return CT_CalcCell::default_instance();
    }

    bool CT_CalcChain::ChildGroup_1::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* CT_CalcChain::ChildGroup_1::mutable_extLst()
    {    
    
    m_has_c = false;
    
    if (m_c)
    {
        delete m_c;
        m_c = NULL;
    }
    ;
    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& CT_CalcChain::ChildGroup_1::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

CT_CalcChain* CT_CalcChain::default_instance_ = NULL;

    // CT_CalcCell
    CT_CalcCell::CT_CalcCell()
    :m_has_r_attr(false),
    m_r_attr(NULL),
    m_has_ref_attr(false),
    m_ref_attr(NULL),
    m_has_i_attr(false),
    m_i_attr(0),
    m_has_s_attr(false),
    m_s_attr(false),
    m_has_l_attr(false),
    m_l_attr(false),
    m_has_t_attr(false),
    m_t_attr(false),
    m_has_a_attr(false),
    m_a_attr(false)
    {
    }
    CT_CalcCell::~CT_CalcCell()
{
    clear();    }
    void CT_CalcCell::clear()
    {    
    m_has_r_attr = false;
    
    if (m_r_attr)
    {
        delete m_r_attr;
        m_r_attr = NULL;
    }
    
    
    m_has_ref_attr = false;
    
    if (m_ref_attr)
    {
        delete m_ref_attr;
        m_ref_attr = NULL;
    }
    
    
    m_has_i_attr = false;
    m_i_attr = 0;
    
    m_has_s_attr = false;
    m_s_attr = false;
    
    m_has_l_attr = false;
    m_l_attr = false;
    
    m_has_t_attr = false;
    m_t_attr = false;
    
    m_has_a_attr = false;
    m_a_attr = false;
    }

    void CT_CalcCell::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_r_attr)
    {
        m_r_attr->toXmlAttr("r", _outStream);
    }
    
    
    if (m_has_ref_attr)
    {
        m_ref_attr->toXmlAttr("ref", _outStream);
    }
    
    
    if (m_has_i_attr)
    {
        _outStream << " " << "i" << "=\"" << m_i_attr << "\"";
    }
    
    
    if (m_has_s_attr)
    {
        _outStream << " " << "s" << "=\"" << XSD::XMLBooleanStr(m_s_attr) << "\"";
    }
    
    
    if (m_has_l_attr)
    {
        _outStream << " " << "l" << "=\"" << XSD::XMLBooleanStr(m_l_attr) << "\"";
    }
    
    
    if (m_has_t_attr)
    {
        _outStream << " " << "t" << "=\"" << XSD::XMLBooleanStr(m_t_attr) << "\"";
    }
    
    
    if (m_has_a_attr)
    {
        _outStream << " " << "a" << "=\"" << XSD::XMLBooleanStr(m_a_attr) << "\"";
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_CalcCell& CT_CalcCell::default_instance()
    {    
    if (!CT_CalcCell::default_instance_)
    {
        CT_CalcCell::default_instance_ = new CT_CalcCell();
    }
    return *CT_CalcCell::default_instance_;
    }

    bool CT_CalcCell::has_r_attr() const
    {    
    return m_has_r_attr;
    }

    void CT_CalcCell::set_r_attr(const ST_CellRef& _r_attr)
    {    
    m_has_r_attr = true;
    m_r_attr = new ST_CellRef(_r_attr);
    }

    const ST_CellRef& CT_CalcCell::get_r_attr() const
    {    
    if (m_r_attr)
    {
        return *m_r_attr;
    }
    return ST_CellRef::default_instance();
    }

    bool CT_CalcCell::has_ref_attr() const
    {    
    return m_has_ref_attr;
    }

    void CT_CalcCell::set_ref_attr(const ST_CellRef& _ref_attr)
    {    
    m_has_ref_attr = true;
    m_ref_attr = new ST_CellRef(_ref_attr);
    }

    const ST_CellRef& CT_CalcCell::get_ref_attr() const
    {    
    if (m_ref_attr)
    {
        return *m_ref_attr;
    }
    return ST_CellRef::default_instance();
    }

    bool CT_CalcCell::has_i_attr() const
    {    
    return m_has_i_attr;
    }

    void CT_CalcCell::set_i_attr(const XSD::int_& _i_attr)
    {    
    m_has_i_attr = true;
    m_i_attr = _i_attr;
    }

    const XSD::int_& CT_CalcCell::get_i_attr() const
    {    
    return m_i_attr;
    }

    bool CT_CalcCell::has_s_attr() const
    {    
    return m_has_s_attr;
    }

    void CT_CalcCell::set_s_attr(const XSD::boolean_& _s_attr)
    {    
    m_has_s_attr = true;
    m_s_attr = _s_attr;
    }

    const XSD::boolean_& CT_CalcCell::get_s_attr() const
    {    
    return m_s_attr;
    }

    bool CT_CalcCell::has_l_attr() const
    {    
    return m_has_l_attr;
    }

    void CT_CalcCell::set_l_attr(const XSD::boolean_& _l_attr)
    {    
    m_has_l_attr = true;
    m_l_attr = _l_attr;
    }

    const XSD::boolean_& CT_CalcCell::get_l_attr() const
    {    
    return m_l_attr;
    }

    bool CT_CalcCell::has_t_attr() const
    {    
    return m_has_t_attr;
    }

    void CT_CalcCell::set_t_attr(const XSD::boolean_& _t_attr)
    {    
    m_has_t_attr = true;
    m_t_attr = _t_attr;
    }

    const XSD::boolean_& CT_CalcCell::get_t_attr() const
    {    
    return m_t_attr;
    }

    bool CT_CalcCell::has_a_attr() const
    {    
    return m_has_a_attr;
    }

    void CT_CalcCell::set_a_attr(const XSD::boolean_& _a_attr)
    {    
    m_has_a_attr = true;
    m_a_attr = _a_attr;
    }

    const XSD::boolean_& CT_CalcCell::get_a_attr() const
    {    
    return m_a_attr;
    }

CT_CalcCell* CT_CalcCell::default_instance_ = NULL;

    // CT_Comments
    CT_Comments::CT_Comments()
    :m_has_authors(false),
    m_authors(NULL),
    m_has_commentList(false),
    m_commentList(NULL),
    m_has_extLst(false),
    m_extLst(NULL)
    {
    }
    CT_Comments::~CT_Comments()
{
    clear();    }
    bool CT_Comments::has_authors() const
    {    
    return m_has_authors;
    }

    CT_Authors* CT_Comments::mutable_authors()
    {    
    m_has_authors = true;
    if (!m_authors)
    {
        m_authors = new CT_Authors();
    }
    return m_authors;
    }

    const CT_Authors& CT_Comments::get_authors() const
    {    
    if (m_authors)
    {
        return *m_authors;
    }
    return CT_Authors::default_instance();
    }

    bool CT_Comments::has_commentList() const
    {    
    return m_has_commentList;
    }

    CT_CommentList* CT_Comments::mutable_commentList()
    {    
    m_has_commentList = true;
    if (!m_commentList)
    {
        m_commentList = new CT_CommentList();
    }
    return m_commentList;
    }

    const CT_CommentList& CT_Comments::get_commentList() const
    {    
    if (m_commentList)
    {
        return *m_commentList;
    }
    return CT_CommentList::default_instance();
    }

    bool CT_Comments::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* CT_Comments::mutable_extLst()
    {    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& CT_Comments::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

    void CT_Comments::clear()
    {    }

    void CT_Comments::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
            _outStream << ">";
            
    if (m_has_authors)
    {
        m_authors->toXmlElem("main:authors", "", _outStream);;
    }
    
    if (m_has_commentList)
    {
        m_commentList->toXmlElem("main:commentList", "", _outStream);;
    }
    
    if (m_has_extLst)
    {
        m_extLst->toXmlElem("main:extLst", "", _outStream);;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_Comments& CT_Comments::default_instance()
    {    
    if (!CT_Comments::default_instance_)
    {
        CT_Comments::default_instance_ = new CT_Comments();
    }
    return *CT_Comments::default_instance_;
    }

CT_Comments* CT_Comments::default_instance_ = NULL;

    // CT_Authors
    CT_Authors::CT_Authors()

    {
    }
    CT_Authors::~CT_Authors()
{
    clear();    }
    ns_s::ST_Xstring* CT_Authors::add_author()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    ns_s::ST_Xstring* pNewChild = pChildGroup->mutable_author();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_Authors::clear()
    {    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_Authors::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_author())
            {
                _outStream << "<main:author>" << (*iter)->get_author().toString() << "</main:author>";
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_Authors& CT_Authors::default_instance()
    {    
    if (!CT_Authors::default_instance_)
    {
        CT_Authors::default_instance_ = new CT_Authors();
    }
    return *CT_Authors::default_instance_;
    }


    // CT_Authors::ChildGroup_1
    CT_Authors::ChildGroup_1::ChildGroup_1()
    :m_has_author(false),
    m_author(NULL)
    {
    }
    bool CT_Authors::ChildGroup_1::has_author() const
    {    
    return m_has_author;
    }

    ns_s::ST_Xstring* CT_Authors::ChildGroup_1::mutable_author()
    {    
    
    m_has_author = true;
    if (!m_author)
    {
        m_author = new ns_s::ST_Xstring();
    }
    return m_author;
    }

    const ns_s::ST_Xstring& CT_Authors::ChildGroup_1::get_author() const
    {    
    if (m_author)
    {
        return *m_author;
    }
    return ns_s::ST_Xstring::default_instance();
    }

CT_Authors* CT_Authors::default_instance_ = NULL;

    // CT_CommentList
    CT_CommentList::CT_CommentList()

    {
    }
    CT_CommentList::~CT_CommentList()
{
    clear();    }
    CT_Comment* CT_CommentList::add_comment()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Comment* pNewChild = pChildGroup->mutable_comment();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_CommentList::clear()
    {    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_CommentList::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_comment())
            {
                (*iter)->get_comment().toXmlElem("main:comment", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_CommentList& CT_CommentList::default_instance()
    {    
    if (!CT_CommentList::default_instance_)
    {
        CT_CommentList::default_instance_ = new CT_CommentList();
    }
    return *CT_CommentList::default_instance_;
    }


    // CT_CommentList::ChildGroup_1
    CT_CommentList::ChildGroup_1::ChildGroup_1()
    :m_has_comment(false),
    m_comment(NULL)
    {
    }
    bool CT_CommentList::ChildGroup_1::has_comment() const
    {    
    return m_has_comment;
    }

    CT_Comment* CT_CommentList::ChildGroup_1::mutable_comment()
    {    
    
    m_has_comment = true;
    if (!m_comment)
    {
        m_comment = new CT_Comment();
    }
    return m_comment;
    }

    const CT_Comment& CT_CommentList::ChildGroup_1::get_comment() const
    {    
    if (m_comment)
    {
        return *m_comment;
    }
    return CT_Comment::default_instance();
    }

CT_CommentList* CT_CommentList::default_instance_ = NULL;

    // CT_Comment
    CT_Comment::CT_Comment()
    :m_has_text(false),
    m_text(NULL),
    m_has_commentPr(false),
    m_commentPr(NULL),
    m_has_ref_attr(false),
    m_ref_attr(NULL),
    m_has_authorId_attr(false),
    m_authorId_attr(0),
    m_has_guid_attr(false),
    m_guid_attr(NULL),
    m_has_shapeId_attr(false),
    m_shapeId_attr(0)
    {
    }
    CT_Comment::~CT_Comment()
{
    clear();    }
    bool CT_Comment::has_text() const
    {    
    return m_has_text;
    }

    CT_Rst* CT_Comment::mutable_text()
    {    
    m_has_text = true;
    if (!m_text)
    {
        m_text = new CT_Rst();
    }
    return m_text;
    }

    const CT_Rst& CT_Comment::get_text() const
    {    
    if (m_text)
    {
        return *m_text;
    }
    return CT_Rst::default_instance();
    }

    bool CT_Comment::has_commentPr() const
    {    
    return m_has_commentPr;
    }

    CT_CommentPr* CT_Comment::mutable_commentPr()
    {    
    m_has_commentPr = true;
    if (!m_commentPr)
    {
        m_commentPr = new CT_CommentPr();
    }
    return m_commentPr;
    }

    const CT_CommentPr& CT_Comment::get_commentPr() const
    {    
    if (m_commentPr)
    {
        return *m_commentPr;
    }
    return CT_CommentPr::default_instance();
    }

    void CT_Comment::clear()
    {    
    m_has_ref_attr = false;
    
    if (m_ref_attr)
    {
        delete m_ref_attr;
        m_ref_attr = NULL;
    }
    
    
    m_has_authorId_attr = false;
    m_authorId_attr = 0;
    
    m_has_guid_attr = false;
    
    if (m_guid_attr)
    {
        delete m_guid_attr;
        m_guid_attr = NULL;
    }
    
    
    m_has_shapeId_attr = false;
    m_shapeId_attr = 0;
    }

    void CT_Comment::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_ref_attr)
    {
        m_ref_attr->toXmlAttr("ref", _outStream);
    }
    
    
    if (m_has_authorId_attr)
    {
        _outStream << " " << "authorId" << "=\"" << m_authorId_attr << "\"";
    }
    
    
    if (m_has_guid_attr)
    {
        m_guid_attr->toXmlAttr("guid", _outStream);
    }
    
    
    if (m_has_shapeId_attr)
    {
        _outStream << " " << "shapeId" << "=\"" << m_shapeId_attr << "\"";
    }
    
            _outStream << ">";
            
    if (m_has_text)
    {
        m_text->toXmlElem("main:text", "", _outStream);;
    }
    
    if (m_has_commentPr)
    {
        m_commentPr->toXmlElem("main:commentPr", "", _outStream);;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_Comment& CT_Comment::default_instance()
    {    
    if (!CT_Comment::default_instance_)
    {
        CT_Comment::default_instance_ = new CT_Comment();
    }
    return *CT_Comment::default_instance_;
    }

    bool CT_Comment::has_ref_attr() const
    {    
    return m_has_ref_attr;
    }

    void CT_Comment::set_ref_attr(const ST_Ref& _ref_attr)
    {    
    m_has_ref_attr = true;
    m_ref_attr = new ST_Ref(_ref_attr);
    }

    const ST_Ref& CT_Comment::get_ref_attr() const
    {    
    if (m_ref_attr)
    {
        return *m_ref_attr;
    }
    return ST_Ref::default_instance();
    }

    bool CT_Comment::has_authorId_attr() const
    {    
    return m_has_authorId_attr;
    }

    void CT_Comment::set_authorId_attr(const XSD::unsignedInt_& _authorId_attr)
    {    
    m_has_authorId_attr = true;
    m_authorId_attr = _authorId_attr;
    }

    const XSD::unsignedInt_& CT_Comment::get_authorId_attr() const
    {    
    return m_authorId_attr;
    }

    bool CT_Comment::has_guid_attr() const
    {    
    return m_has_guid_attr;
    }

    void CT_Comment::set_guid_attr(const ns_s::ST_Guid& _guid_attr)
    {    
    m_has_guid_attr = true;
    m_guid_attr = new ns_s::ST_Guid(_guid_attr);
    }

    const ns_s::ST_Guid& CT_Comment::get_guid_attr() const
    {    
    if (m_guid_attr)
    {
        return *m_guid_attr;
    }
    return ns_s::ST_Guid::default_instance();
    }

    bool CT_Comment::has_shapeId_attr() const
    {    
    return m_has_shapeId_attr;
    }

    void CT_Comment::set_shapeId_attr(const XSD::unsignedInt_& _shapeId_attr)
    {    
    m_has_shapeId_attr = true;
    m_shapeId_attr = _shapeId_attr;
    }

    const XSD::unsignedInt_& CT_Comment::get_shapeId_attr() const
    {    
    return m_shapeId_attr;
    }

CT_Comment* CT_Comment::default_instance_ = NULL;

    // CT_CommentPr
    CT_CommentPr::CT_CommentPr()
    :m_has_anchor(false),
    m_anchor(NULL),
    m_has_locked_attr(false),
    m_locked_attr(false),
    m_has_defaultSize_attr(false),
    m_defaultSize_attr(false),
    m_has_print_attr(false),
    m_print_attr(false),
    m_has_disabled_attr(false),
    m_disabled_attr(false),
    m_has_autoFill_attr(false),
    m_autoFill_attr(false),
    m_has_autoLine_attr(false),
    m_autoLine_attr(false),
    m_has_altText_attr(false),
    m_altText_attr(NULL),
    m_has_textHAlign_attr(false),
    m_textHAlign_attr(NULL),
    m_has_textVAlign_attr(false),
    m_textVAlign_attr(NULL),
    m_has_lockText_attr(false),
    m_lockText_attr(false),
    m_has_justLastX_attr(false),
    m_justLastX_attr(false),
    m_has_autoScale_attr(false),
    m_autoScale_attr(false)
    {
    }
    CT_CommentPr::~CT_CommentPr()
{
    clear();    }
    bool CT_CommentPr::has_anchor() const
    {    
    return m_has_anchor;
    }

    CT_ObjectAnchor* CT_CommentPr::mutable_anchor()
    {    
    m_has_anchor = true;
    if (!m_anchor)
    {
        m_anchor = new CT_ObjectAnchor();
    }
    return m_anchor;
    }

    const CT_ObjectAnchor& CT_CommentPr::get_anchor() const
    {    
    if (m_anchor)
    {
        return *m_anchor;
    }
    return CT_ObjectAnchor::default_instance();
    }

    void CT_CommentPr::clear()
    {    
    m_has_locked_attr = false;
    m_locked_attr = false;
    
    m_has_defaultSize_attr = false;
    m_defaultSize_attr = false;
    
    m_has_print_attr = false;
    m_print_attr = false;
    
    m_has_disabled_attr = false;
    m_disabled_attr = false;
    
    m_has_autoFill_attr = false;
    m_autoFill_attr = false;
    
    m_has_autoLine_attr = false;
    m_autoLine_attr = false;
    
    m_has_altText_attr = false;
    
    if (m_altText_attr)
    {
        delete m_altText_attr;
        m_altText_attr = NULL;
    }
    
    
    m_has_textHAlign_attr = false;
    
    if (m_textHAlign_attr)
    {
        delete m_textHAlign_attr;
        m_textHAlign_attr = NULL;
    }
    
    
    m_has_textVAlign_attr = false;
    
    if (m_textVAlign_attr)
    {
        delete m_textVAlign_attr;
        m_textVAlign_attr = NULL;
    }
    
    
    m_has_lockText_attr = false;
    m_lockText_attr = false;
    
    m_has_justLastX_attr = false;
    m_justLastX_attr = false;
    
    m_has_autoScale_attr = false;
    m_autoScale_attr = false;
    }

    void CT_CommentPr::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_locked_attr)
    {
        _outStream << " " << "locked" << "=\"" << XSD::XMLBooleanStr(m_locked_attr) << "\"";
    }
    
    
    if (m_has_defaultSize_attr)
    {
        _outStream << " " << "defaultSize" << "=\"" << XSD::XMLBooleanStr(m_defaultSize_attr) << "\"";
    }
    
    
    if (m_has_print_attr)
    {
        _outStream << " " << "print" << "=\"" << XSD::XMLBooleanStr(m_print_attr) << "\"";
    }
    
    
    if (m_has_disabled_attr)
    {
        _outStream << " " << "disabled" << "=\"" << XSD::XMLBooleanStr(m_disabled_attr) << "\"";
    }
    
    
    if (m_has_autoFill_attr)
    {
        _outStream << " " << "autoFill" << "=\"" << XSD::XMLBooleanStr(m_autoFill_attr) << "\"";
    }
    
    
    if (m_has_autoLine_attr)
    {
        _outStream << " " << "autoLine" << "=\"" << XSD::XMLBooleanStr(m_autoLine_attr) << "\"";
    }
    
    
    if (m_has_altText_attr)
    {
        m_altText_attr->toXmlAttr("altText", _outStream);
    }
    
    
    if (m_has_textHAlign_attr)
    {
        m_textHAlign_attr->toXmlAttr("textHAlign", _outStream);
    }
    
    
    if (m_has_textVAlign_attr)
    {
        m_textVAlign_attr->toXmlAttr("textVAlign", _outStream);
    }
    
    
    if (m_has_lockText_attr)
    {
        _outStream << " " << "lockText" << "=\"" << XSD::XMLBooleanStr(m_lockText_attr) << "\"";
    }
    
    
    if (m_has_justLastX_attr)
    {
        _outStream << " " << "justLastX" << "=\"" << XSD::XMLBooleanStr(m_justLastX_attr) << "\"";
    }
    
    
    if (m_has_autoScale_attr)
    {
        _outStream << " " << "autoScale" << "=\"" << XSD::XMLBooleanStr(m_autoScale_attr) << "\"";
    }
    
            _outStream << ">";
            
    if (m_has_anchor)
    {
        m_anchor->toXmlElem("main:anchor", "", _outStream);;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_CommentPr& CT_CommentPr::default_instance()
    {    
    if (!CT_CommentPr::default_instance_)
    {
        CT_CommentPr::default_instance_ = new CT_CommentPr();
    }
    return *CT_CommentPr::default_instance_;
    }

    bool CT_CommentPr::has_locked_attr() const
    {    
    return m_has_locked_attr;
    }

    void CT_CommentPr::set_locked_attr(const XSD::boolean_& _locked_attr)
    {    
    m_has_locked_attr = true;
    m_locked_attr = _locked_attr;
    }

    const XSD::boolean_& CT_CommentPr::get_locked_attr() const
    {    
    return m_locked_attr;
    }

    bool CT_CommentPr::has_defaultSize_attr() const
    {    
    return m_has_defaultSize_attr;
    }

    void CT_CommentPr::set_defaultSize_attr(const XSD::boolean_& _defaultSize_attr)
    {    
    m_has_defaultSize_attr = true;
    m_defaultSize_attr = _defaultSize_attr;
    }

    const XSD::boolean_& CT_CommentPr::get_defaultSize_attr() const
    {    
    return m_defaultSize_attr;
    }

    bool CT_CommentPr::has_print_attr() const
    {    
    return m_has_print_attr;
    }

    void CT_CommentPr::set_print_attr(const XSD::boolean_& _print_attr)
    {    
    m_has_print_attr = true;
    m_print_attr = _print_attr;
    }

    const XSD::boolean_& CT_CommentPr::get_print_attr() const
    {    
    return m_print_attr;
    }

    bool CT_CommentPr::has_disabled_attr() const
    {    
    return m_has_disabled_attr;
    }

    void CT_CommentPr::set_disabled_attr(const XSD::boolean_& _disabled_attr)
    {    
    m_has_disabled_attr = true;
    m_disabled_attr = _disabled_attr;
    }

    const XSD::boolean_& CT_CommentPr::get_disabled_attr() const
    {    
    return m_disabled_attr;
    }

    bool CT_CommentPr::has_autoFill_attr() const
    {    
    return m_has_autoFill_attr;
    }

    void CT_CommentPr::set_autoFill_attr(const XSD::boolean_& _autoFill_attr)
    {    
    m_has_autoFill_attr = true;
    m_autoFill_attr = _autoFill_attr;
    }

    const XSD::boolean_& CT_CommentPr::get_autoFill_attr() const
    {    
    return m_autoFill_attr;
    }

    bool CT_CommentPr::has_autoLine_attr() const
    {    
    return m_has_autoLine_attr;
    }

    void CT_CommentPr::set_autoLine_attr(const XSD::boolean_& _autoLine_attr)
    {    
    m_has_autoLine_attr = true;
    m_autoLine_attr = _autoLine_attr;
    }

    const XSD::boolean_& CT_CommentPr::get_autoLine_attr() const
    {    
    return m_autoLine_attr;
    }

    bool CT_CommentPr::has_altText_attr() const
    {    
    return m_has_altText_attr;
    }

    void CT_CommentPr::set_altText_attr(const ns_s::ST_Xstring& _altText_attr)
    {    
    m_has_altText_attr = true;
    m_altText_attr = new ns_s::ST_Xstring(_altText_attr);
    }

    const ns_s::ST_Xstring& CT_CommentPr::get_altText_attr() const
    {    
    if (m_altText_attr)
    {
        return *m_altText_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_CommentPr::has_textHAlign_attr() const
    {    
    return m_has_textHAlign_attr;
    }

    void CT_CommentPr::set_textHAlign_attr(const ST_TextHAlign& _textHAlign_attr)
    {    
    m_has_textHAlign_attr = true;
    m_textHAlign_attr = new ST_TextHAlign(_textHAlign_attr);
    }

    const ST_TextHAlign& CT_CommentPr::get_textHAlign_attr() const
    {    
    if (m_textHAlign_attr)
    {
        return *m_textHAlign_attr;
    }
    return ST_TextHAlign::default_instance();
    }

    bool CT_CommentPr::has_textVAlign_attr() const
    {    
    return m_has_textVAlign_attr;
    }

    void CT_CommentPr::set_textVAlign_attr(const ST_TextVAlign& _textVAlign_attr)
    {    
    m_has_textVAlign_attr = true;
    m_textVAlign_attr = new ST_TextVAlign(_textVAlign_attr);
    }

    const ST_TextVAlign& CT_CommentPr::get_textVAlign_attr() const
    {    
    if (m_textVAlign_attr)
    {
        return *m_textVAlign_attr;
    }
    return ST_TextVAlign::default_instance();
    }

    bool CT_CommentPr::has_lockText_attr() const
    {    
    return m_has_lockText_attr;
    }

    void CT_CommentPr::set_lockText_attr(const XSD::boolean_& _lockText_attr)
    {    
    m_has_lockText_attr = true;
    m_lockText_attr = _lockText_attr;
    }

    const XSD::boolean_& CT_CommentPr::get_lockText_attr() const
    {    
    return m_lockText_attr;
    }

    bool CT_CommentPr::has_justLastX_attr() const
    {    
    return m_has_justLastX_attr;
    }

    void CT_CommentPr::set_justLastX_attr(const XSD::boolean_& _justLastX_attr)
    {    
    m_has_justLastX_attr = true;
    m_justLastX_attr = _justLastX_attr;
    }

    const XSD::boolean_& CT_CommentPr::get_justLastX_attr() const
    {    
    return m_justLastX_attr;
    }

    bool CT_CommentPr::has_autoScale_attr() const
    {    
    return m_has_autoScale_attr;
    }

    void CT_CommentPr::set_autoScale_attr(const XSD::boolean_& _autoScale_attr)
    {    
    m_has_autoScale_attr = true;
    m_autoScale_attr = _autoScale_attr;
    }

    const XSD::boolean_& CT_CommentPr::get_autoScale_attr() const
    {    
    return m_autoScale_attr;
    }

CT_CommentPr* CT_CommentPr::default_instance_ = NULL;

    // CT_MapInfo
    CT_MapInfo::CT_MapInfo()
    :m_has_SelectionNamespaces_attr(false),
    m_SelectionNamespaces_attr("")
    {
    }
    CT_MapInfo::~CT_MapInfo()
{
    clear();    }
    CT_Schema* CT_MapInfo::add_Schema()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Schema* pNewChild = pChildGroup->mutable_Schema();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_Map* CT_MapInfo::add_Map()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Map* pNewChild = pChildGroup->mutable_Map();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_MapInfo::clear()
    {    
    m_has_SelectionNamespaces_attr = false;
    m_SelectionNamespaces_attr.clear();
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_MapInfo::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_SelectionNamespaces_attr)
    {
        _outStream << " " << "SelectionNamespaces" << "=\"" << m_SelectionNamespaces_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_Schema())
            {
                (*iter)->get_Schema().toXmlElem("main:Schema", "", _outStream);
            }
            else if ((*iter)->has_Map())
            {
                (*iter)->get_Map().toXmlElem("main:Map", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_MapInfo& CT_MapInfo::default_instance()
    {    
    if (!CT_MapInfo::default_instance_)
    {
        CT_MapInfo::default_instance_ = new CT_MapInfo();
    }
    return *CT_MapInfo::default_instance_;
    }

    bool CT_MapInfo::has_SelectionNamespaces_attr() const
    {    
    return m_has_SelectionNamespaces_attr;
    }

    void CT_MapInfo::set_SelectionNamespaces_attr(const XSD::string_& _SelectionNamespaces_attr)
    {    
    m_has_SelectionNamespaces_attr = true;
    m_SelectionNamespaces_attr = _SelectionNamespaces_attr;
    }

    const XSD::string_& CT_MapInfo::get_SelectionNamespaces_attr() const
    {    
    return m_SelectionNamespaces_attr;
    }


    // CT_MapInfo::ChildGroup_1
    CT_MapInfo::ChildGroup_1::ChildGroup_1()
    :m_has_Schema(false),
    m_Schema(NULL),
    m_has_Map(false),
    m_Map(NULL)
    {
    }
    bool CT_MapInfo::ChildGroup_1::has_Schema() const
    {    
    return m_has_Schema;
    }

    CT_Schema* CT_MapInfo::ChildGroup_1::mutable_Schema()
    {    
    
    m_has_Map = false;
    
    if (m_Map)
    {
        delete m_Map;
        m_Map = NULL;
    }
    ;
    
    m_has_Schema = true;
    if (!m_Schema)
    {
        m_Schema = new CT_Schema();
    }
    return m_Schema;
    }

    const CT_Schema& CT_MapInfo::ChildGroup_1::get_Schema() const
    {    
    if (m_Schema)
    {
        return *m_Schema;
    }
    return CT_Schema::default_instance();
    }

    bool CT_MapInfo::ChildGroup_1::has_Map() const
    {    
    return m_has_Map;
    }

    CT_Map* CT_MapInfo::ChildGroup_1::mutable_Map()
    {    
    
    m_has_Schema = false;
    
    if (m_Schema)
    {
        delete m_Schema;
        m_Schema = NULL;
    }
    ;
    
    m_has_Map = true;
    if (!m_Map)
    {
        m_Map = new CT_Map();
    }
    return m_Map;
    }

    const CT_Map& CT_MapInfo::ChildGroup_1::get_Map() const
    {    
    if (m_Map)
    {
        return *m_Map;
    }
    return CT_Map::default_instance();
    }

CT_MapInfo* CT_MapInfo::default_instance_ = NULL;

    // CT_Schema
    CT_Schema::CT_Schema()
    :m_has__any(false),
    m__any(NULL),
    m_has_ID_attr(false),
    m_ID_attr(""),
    m_has_SchemaRef_attr(false),
    m_SchemaRef_attr(""),
    m_has_Namespace_attr(false),
    m_Namespace_attr(""),
    m_has_SchemaLanguage_attr(false),
    m_SchemaLanguage_attr("")
    {
    }
    CT_Schema::~CT_Schema()
{
    clear();    }
    void CT_Schema::clear()
    {    
    m_has_ID_attr = false;
    m_ID_attr.clear();
    
    m_has_SchemaRef_attr = false;
    m_SchemaRef_attr.clear();
    
    m_has_Namespace_attr = false;
    m_Namespace_attr.clear();
    
    m_has_SchemaLanguage_attr = false;
    m_SchemaLanguage_attr.clear();
    }

    void CT_Schema::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_ID_attr)
    {
        _outStream << " " << "ID" << "=\"" << m_ID_attr << "\"";
    }
    
    
    if (m_has_SchemaRef_attr)
    {
        _outStream << " " << "SchemaRef" << "=\"" << m_SchemaRef_attr << "\"";
    }
    
    
    if (m_has_Namespace_attr)
    {
        _outStream << " " << "Namespace" << "=\"" << m_Namespace_attr << "\"";
    }
    
    
    if (m_has_SchemaLanguage_attr)
    {
        _outStream << " " << "SchemaLanguage" << "=\"" << m_SchemaLanguage_attr << "\"";
    }
    
            _outStream << ">";
            
    if (m_has__any)
    {
        
    m__any->toXml(_outStream);
    ;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_Schema& CT_Schema::default_instance()
    {    
    if (!CT_Schema::default_instance_)
    {
        CT_Schema::default_instance_ = new CT_Schema();
    }
    return *CT_Schema::default_instance_;
    }

    bool CT_Schema::has_ID_attr() const
    {    
    return m_has_ID_attr;
    }

    void CT_Schema::set_ID_attr(const XSD::string_& _ID_attr)
    {    
    m_has_ID_attr = true;
    m_ID_attr = _ID_attr;
    }

    const XSD::string_& CT_Schema::get_ID_attr() const
    {    
    return m_ID_attr;
    }

    bool CT_Schema::has_SchemaRef_attr() const
    {    
    return m_has_SchemaRef_attr;
    }

    void CT_Schema::set_SchemaRef_attr(const XSD::string_& _SchemaRef_attr)
    {    
    m_has_SchemaRef_attr = true;
    m_SchemaRef_attr = _SchemaRef_attr;
    }

    const XSD::string_& CT_Schema::get_SchemaRef_attr() const
    {    
    return m_SchemaRef_attr;
    }

    bool CT_Schema::has_Namespace_attr() const
    {    
    return m_has_Namespace_attr;
    }

    void CT_Schema::set_Namespace_attr(const XSD::string_& _Namespace_attr)
    {    
    m_has_Namespace_attr = true;
    m_Namespace_attr = _Namespace_attr;
    }

    const XSD::string_& CT_Schema::get_Namespace_attr() const
    {    
    return m_Namespace_attr;
    }

    bool CT_Schema::has_SchemaLanguage_attr() const
    {    
    return m_has_SchemaLanguage_attr;
    }

    void CT_Schema::set_SchemaLanguage_attr(const XSD::token_& _SchemaLanguage_attr)
    {    
    m_has_SchemaLanguage_attr = true;
    m_SchemaLanguage_attr = _SchemaLanguage_attr;
    }

    const XSD::token_& CT_Schema::get_SchemaLanguage_attr() const
    {    
    return m_SchemaLanguage_attr;
    }

CT_Schema* CT_Schema::default_instance_ = NULL;

    // CT_Map
    CT_Map::CT_Map()
    :m_has_DataBinding(false),
    m_DataBinding(NULL),
    m_has_ID_attr(false),
    m_ID_attr(0),
    m_has_Name_attr(false),
    m_Name_attr(""),
    m_has_RootElement_attr(false),
    m_RootElement_attr(""),
    m_has_SchemaID_attr(false),
    m_SchemaID_attr(""),
    m_has_ShowImportExportValidationErrors_attr(false),
    m_ShowImportExportValidationErrors_attr(false),
    m_has_AutoFit_attr(false),
    m_AutoFit_attr(false),
    m_has_Append_attr(false),
    m_Append_attr(false),
    m_has_PreserveSortAFLayout_attr(false),
    m_PreserveSortAFLayout_attr(false),
    m_has_PreserveFormat_attr(false),
    m_PreserveFormat_attr(false)
    {
    }
    CT_Map::~CT_Map()
{
    clear();    }
    bool CT_Map::has_DataBinding() const
    {    
    return m_has_DataBinding;
    }

    CT_DataBinding* CT_Map::mutable_DataBinding()
    {    
    m_has_DataBinding = true;
    if (!m_DataBinding)
    {
        m_DataBinding = new CT_DataBinding();
    }
    return m_DataBinding;
    }

    const CT_DataBinding& CT_Map::get_DataBinding() const
    {    
    if (m_DataBinding)
    {
        return *m_DataBinding;
    }
    return CT_DataBinding::default_instance();
    }

    void CT_Map::clear()
    {    
    m_has_ID_attr = false;
    m_ID_attr = 0;
    
    m_has_Name_attr = false;
    m_Name_attr.clear();
    
    m_has_RootElement_attr = false;
    m_RootElement_attr.clear();
    
    m_has_SchemaID_attr = false;
    m_SchemaID_attr.clear();
    
    m_has_ShowImportExportValidationErrors_attr = false;
    m_ShowImportExportValidationErrors_attr = false;
    
    m_has_AutoFit_attr = false;
    m_AutoFit_attr = false;
    
    m_has_Append_attr = false;
    m_Append_attr = false;
    
    m_has_PreserveSortAFLayout_attr = false;
    m_PreserveSortAFLayout_attr = false;
    
    m_has_PreserveFormat_attr = false;
    m_PreserveFormat_attr = false;
    }

    void CT_Map::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_ID_attr)
    {
        _outStream << " " << "ID" << "=\"" << m_ID_attr << "\"";
    }
    
    
    if (m_has_Name_attr)
    {
        _outStream << " " << "Name" << "=\"" << m_Name_attr << "\"";
    }
    
    
    if (m_has_RootElement_attr)
    {
        _outStream << " " << "RootElement" << "=\"" << m_RootElement_attr << "\"";
    }
    
    
    if (m_has_SchemaID_attr)
    {
        _outStream << " " << "SchemaID" << "=\"" << m_SchemaID_attr << "\"";
    }
    
    
    if (m_has_ShowImportExportValidationErrors_attr)
    {
        _outStream << " " << "ShowImportExportValidationErrors" << "=\"" << XSD::XMLBooleanStr(m_ShowImportExportValidationErrors_attr) << "\"";
    }
    
    
    if (m_has_AutoFit_attr)
    {
        _outStream << " " << "AutoFit" << "=\"" << XSD::XMLBooleanStr(m_AutoFit_attr) << "\"";
    }
    
    
    if (m_has_Append_attr)
    {
        _outStream << " " << "Append" << "=\"" << XSD::XMLBooleanStr(m_Append_attr) << "\"";
    }
    
    
    if (m_has_PreserveSortAFLayout_attr)
    {
        _outStream << " " << "PreserveSortAFLayout" << "=\"" << XSD::XMLBooleanStr(m_PreserveSortAFLayout_attr) << "\"";
    }
    
    
    if (m_has_PreserveFormat_attr)
    {
        _outStream << " " << "PreserveFormat" << "=\"" << XSD::XMLBooleanStr(m_PreserveFormat_attr) << "\"";
    }
    
            _outStream << ">";
            
    if (m_has_DataBinding)
    {
        m_DataBinding->toXmlElem("main:DataBinding", "", _outStream);;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_Map& CT_Map::default_instance()
    {    
    if (!CT_Map::default_instance_)
    {
        CT_Map::default_instance_ = new CT_Map();
    }
    return *CT_Map::default_instance_;
    }

    bool CT_Map::has_ID_attr() const
    {    
    return m_has_ID_attr;
    }

    void CT_Map::set_ID_attr(const XSD::unsignedInt_& _ID_attr)
    {    
    m_has_ID_attr = true;
    m_ID_attr = _ID_attr;
    }

    const XSD::unsignedInt_& CT_Map::get_ID_attr() const
    {    
    return m_ID_attr;
    }

    bool CT_Map::has_Name_attr() const
    {    
    return m_has_Name_attr;
    }

    void CT_Map::set_Name_attr(const XSD::string_& _Name_attr)
    {    
    m_has_Name_attr = true;
    m_Name_attr = _Name_attr;
    }

    const XSD::string_& CT_Map::get_Name_attr() const
    {    
    return m_Name_attr;
    }

    bool CT_Map::has_RootElement_attr() const
    {    
    return m_has_RootElement_attr;
    }

    void CT_Map::set_RootElement_attr(const XSD::string_& _RootElement_attr)
    {    
    m_has_RootElement_attr = true;
    m_RootElement_attr = _RootElement_attr;
    }

    const XSD::string_& CT_Map::get_RootElement_attr() const
    {    
    return m_RootElement_attr;
    }

    bool CT_Map::has_SchemaID_attr() const
    {    
    return m_has_SchemaID_attr;
    }

    void CT_Map::set_SchemaID_attr(const XSD::string_& _SchemaID_attr)
    {    
    m_has_SchemaID_attr = true;
    m_SchemaID_attr = _SchemaID_attr;
    }

    const XSD::string_& CT_Map::get_SchemaID_attr() const
    {    
    return m_SchemaID_attr;
    }

    bool CT_Map::has_ShowImportExportValidationErrors_attr() const
    {    
    return m_has_ShowImportExportValidationErrors_attr;
    }

    void CT_Map::set_ShowImportExportValidationErrors_attr(const XSD::boolean_& _ShowImportExportValidationErrors_attr)
    {    
    m_has_ShowImportExportValidationErrors_attr = true;
    m_ShowImportExportValidationErrors_attr = _ShowImportExportValidationErrors_attr;
    }

    const XSD::boolean_& CT_Map::get_ShowImportExportValidationErrors_attr() const
    {    
    return m_ShowImportExportValidationErrors_attr;
    }

    bool CT_Map::has_AutoFit_attr() const
    {    
    return m_has_AutoFit_attr;
    }

    void CT_Map::set_AutoFit_attr(const XSD::boolean_& _AutoFit_attr)
    {    
    m_has_AutoFit_attr = true;
    m_AutoFit_attr = _AutoFit_attr;
    }

    const XSD::boolean_& CT_Map::get_AutoFit_attr() const
    {    
    return m_AutoFit_attr;
    }

    bool CT_Map::has_Append_attr() const
    {    
    return m_has_Append_attr;
    }

    void CT_Map::set_Append_attr(const XSD::boolean_& _Append_attr)
    {    
    m_has_Append_attr = true;
    m_Append_attr = _Append_attr;
    }

    const XSD::boolean_& CT_Map::get_Append_attr() const
    {    
    return m_Append_attr;
    }

    bool CT_Map::has_PreserveSortAFLayout_attr() const
    {    
    return m_has_PreserveSortAFLayout_attr;
    }

    void CT_Map::set_PreserveSortAFLayout_attr(const XSD::boolean_& _PreserveSortAFLayout_attr)
    {    
    m_has_PreserveSortAFLayout_attr = true;
    m_PreserveSortAFLayout_attr = _PreserveSortAFLayout_attr;
    }

    const XSD::boolean_& CT_Map::get_PreserveSortAFLayout_attr() const
    {    
    return m_PreserveSortAFLayout_attr;
    }

    bool CT_Map::has_PreserveFormat_attr() const
    {    
    return m_has_PreserveFormat_attr;
    }

    void CT_Map::set_PreserveFormat_attr(const XSD::boolean_& _PreserveFormat_attr)
    {    
    m_has_PreserveFormat_attr = true;
    m_PreserveFormat_attr = _PreserveFormat_attr;
    }

    const XSD::boolean_& CT_Map::get_PreserveFormat_attr() const
    {    
    return m_PreserveFormat_attr;
    }

CT_Map* CT_Map::default_instance_ = NULL;

    // CT_DataBinding
    CT_DataBinding::CT_DataBinding()
    :m_has__any(false),
    m__any(NULL),
    m_has_DataBindingName_attr(false),
    m_DataBindingName_attr(""),
    m_has_FileBinding_attr(false),
    m_FileBinding_attr(false),
    m_has_ConnectionID_attr(false),
    m_ConnectionID_attr(0),
    m_has_FileBindingName_attr(false),
    m_FileBindingName_attr(""),
    m_has_DataBindingLoadMode_attr(false),
    m_DataBindingLoadMode_attr(0)
    {
    }
    CT_DataBinding::~CT_DataBinding()
{
    clear();    }
    void CT_DataBinding::clear()
    {    
    m_has_DataBindingName_attr = false;
    m_DataBindingName_attr.clear();
    
    m_has_FileBinding_attr = false;
    m_FileBinding_attr = false;
    
    m_has_ConnectionID_attr = false;
    m_ConnectionID_attr = 0;
    
    m_has_FileBindingName_attr = false;
    m_FileBindingName_attr.clear();
    
    m_has_DataBindingLoadMode_attr = false;
    m_DataBindingLoadMode_attr = 0;
    }

    void CT_DataBinding::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_DataBindingName_attr)
    {
        _outStream << " " << "DataBindingName" << "=\"" << m_DataBindingName_attr << "\"";
    }
    
    
    if (m_has_FileBinding_attr)
    {
        _outStream << " " << "FileBinding" << "=\"" << XSD::XMLBooleanStr(m_FileBinding_attr) << "\"";
    }
    
    
    if (m_has_ConnectionID_attr)
    {
        _outStream << " " << "ConnectionID" << "=\"" << m_ConnectionID_attr << "\"";
    }
    
    
    if (m_has_FileBindingName_attr)
    {
        _outStream << " " << "FileBindingName" << "=\"" << m_FileBindingName_attr << "\"";
    }
    
    
    if (m_has_DataBindingLoadMode_attr)
    {
        _outStream << " " << "DataBindingLoadMode" << "=\"" << m_DataBindingLoadMode_attr << "\"";
    }
    
            _outStream << ">";
            
    if (m_has__any)
    {
        
    m__any->toXml(_outStream);
    ;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_DataBinding& CT_DataBinding::default_instance()
    {    
    if (!CT_DataBinding::default_instance_)
    {
        CT_DataBinding::default_instance_ = new CT_DataBinding();
    }
    return *CT_DataBinding::default_instance_;
    }

    bool CT_DataBinding::has_DataBindingName_attr() const
    {    
    return m_has_DataBindingName_attr;
    }

    void CT_DataBinding::set_DataBindingName_attr(const XSD::string_& _DataBindingName_attr)
    {    
    m_has_DataBindingName_attr = true;
    m_DataBindingName_attr = _DataBindingName_attr;
    }

    const XSD::string_& CT_DataBinding::get_DataBindingName_attr() const
    {    
    return m_DataBindingName_attr;
    }

    bool CT_DataBinding::has_FileBinding_attr() const
    {    
    return m_has_FileBinding_attr;
    }

    void CT_DataBinding::set_FileBinding_attr(const XSD::boolean_& _FileBinding_attr)
    {    
    m_has_FileBinding_attr = true;
    m_FileBinding_attr = _FileBinding_attr;
    }

    const XSD::boolean_& CT_DataBinding::get_FileBinding_attr() const
    {    
    return m_FileBinding_attr;
    }

    bool CT_DataBinding::has_ConnectionID_attr() const
    {    
    return m_has_ConnectionID_attr;
    }

    void CT_DataBinding::set_ConnectionID_attr(const XSD::unsignedInt_& _ConnectionID_attr)
    {    
    m_has_ConnectionID_attr = true;
    m_ConnectionID_attr = _ConnectionID_attr;
    }

    const XSD::unsignedInt_& CT_DataBinding::get_ConnectionID_attr() const
    {    
    return m_ConnectionID_attr;
    }

    bool CT_DataBinding::has_FileBindingName_attr() const
    {    
    return m_has_FileBindingName_attr;
    }

    void CT_DataBinding::set_FileBindingName_attr(const XSD::string_& _FileBindingName_attr)
    {    
    m_has_FileBindingName_attr = true;
    m_FileBindingName_attr = _FileBindingName_attr;
    }

    const XSD::string_& CT_DataBinding::get_FileBindingName_attr() const
    {    
    return m_FileBindingName_attr;
    }

    bool CT_DataBinding::has_DataBindingLoadMode_attr() const
    {    
    return m_has_DataBindingLoadMode_attr;
    }

    void CT_DataBinding::set_DataBindingLoadMode_attr(const XSD::unsignedInt_& _DataBindingLoadMode_attr)
    {    
    m_has_DataBindingLoadMode_attr = true;
    m_DataBindingLoadMode_attr = _DataBindingLoadMode_attr;
    }

    const XSD::unsignedInt_& CT_DataBinding::get_DataBindingLoadMode_attr() const
    {    
    return m_DataBindingLoadMode_attr;
    }

CT_DataBinding* CT_DataBinding::default_instance_ = NULL;

    // CT_Connections
    CT_Connections::CT_Connections()

    {
    }
    CT_Connections::~CT_Connections()
{
    clear();    }
    CT_Connection* CT_Connections::add_connection()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Connection* pNewChild = pChildGroup->mutable_connection();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_Connections::clear()
    {    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_Connections::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_connection())
            {
                (*iter)->get_connection().toXmlElem("main:connection", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_Connections& CT_Connections::default_instance()
    {    
    if (!CT_Connections::default_instance_)
    {
        CT_Connections::default_instance_ = new CT_Connections();
    }
    return *CT_Connections::default_instance_;
    }


    // CT_Connections::ChildGroup_1
    CT_Connections::ChildGroup_1::ChildGroup_1()
    :m_has_connection(false),
    m_connection(NULL)
    {
    }
    bool CT_Connections::ChildGroup_1::has_connection() const
    {    
    return m_has_connection;
    }

    CT_Connection* CT_Connections::ChildGroup_1::mutable_connection()
    {    
    
    m_has_connection = true;
    if (!m_connection)
    {
        m_connection = new CT_Connection();
    }
    return m_connection;
    }

    const CT_Connection& CT_Connections::ChildGroup_1::get_connection() const
    {    
    if (m_connection)
    {
        return *m_connection;
    }
    return CT_Connection::default_instance();
    }

CT_Connections* CT_Connections::default_instance_ = NULL;

    // CT_Connection
    CT_Connection::CT_Connection()
    :m_has_dbPr(false),
    m_dbPr(NULL),
    m_has_olapPr(false),
    m_olapPr(NULL),
    m_has_webPr(false),
    m_webPr(NULL),
    m_has_textPr(false),
    m_textPr(NULL),
    m_has_parameters(false),
    m_parameters(NULL),
    m_has_extLst(false),
    m_extLst(NULL),
    m_has_id_attr(false),
    m_id_attr(0),
    m_has_sourceFile_attr(false),
    m_sourceFile_attr(NULL),
    m_has_odcFile_attr(false),
    m_odcFile_attr(NULL),
    m_has_keepAlive_attr(false),
    m_keepAlive_attr(false),
    m_has_interval_attr(false),
    m_interval_attr(0),
    m_has_name_attr(false),
    m_name_attr(NULL),
    m_has_description_attr(false),
    m_description_attr(NULL),
    m_has_type_attr(false),
    m_type_attr(0),
    m_has_reconnectionMethod_attr(false),
    m_reconnectionMethod_attr(0),
    m_has_refreshedVersion_attr(false),
    m_refreshedVersion_attr(0),
    m_has_minRefreshableVersion_attr(false),
    m_minRefreshableVersion_attr(0),
    m_has_savePassword_attr(false),
    m_savePassword_attr(false),
    m_has_new_attr(false),
    m_new_attr(false),
    m_has_deleted_attr(false),
    m_deleted_attr(false),
    m_has_onlyUseConnectionFile_attr(false),
    m_onlyUseConnectionFile_attr(false),
    m_has_background_attr(false),
    m_background_attr(false),
    m_has_refreshOnLoad_attr(false),
    m_refreshOnLoad_attr(false),
    m_has_saveData_attr(false),
    m_saveData_attr(false),
    m_has_credentials_attr(false),
    m_credentials_attr(NULL),
    m_has_singleSignOnId_attr(false),
    m_singleSignOnId_attr(NULL)
    {
    }
    CT_Connection::~CT_Connection()
{
    clear();    }
    bool CT_Connection::has_dbPr() const
    {    
    return m_has_dbPr;
    }

    CT_DbPr* CT_Connection::mutable_dbPr()
    {    
    m_has_dbPr = true;
    if (!m_dbPr)
    {
        m_dbPr = new CT_DbPr();
    }
    return m_dbPr;
    }

    const CT_DbPr& CT_Connection::get_dbPr() const
    {    
    if (m_dbPr)
    {
        return *m_dbPr;
    }
    return CT_DbPr::default_instance();
    }

    bool CT_Connection::has_olapPr() const
    {    
    return m_has_olapPr;
    }

    CT_OlapPr* CT_Connection::mutable_olapPr()
    {    
    m_has_olapPr = true;
    if (!m_olapPr)
    {
        m_olapPr = new CT_OlapPr();
    }
    return m_olapPr;
    }

    const CT_OlapPr& CT_Connection::get_olapPr() const
    {    
    if (m_olapPr)
    {
        return *m_olapPr;
    }
    return CT_OlapPr::default_instance();
    }

    bool CT_Connection::has_webPr() const
    {    
    return m_has_webPr;
    }

    CT_WebPr* CT_Connection::mutable_webPr()
    {    
    m_has_webPr = true;
    if (!m_webPr)
    {
        m_webPr = new CT_WebPr();
    }
    return m_webPr;
    }

    const CT_WebPr& CT_Connection::get_webPr() const
    {    
    if (m_webPr)
    {
        return *m_webPr;
    }
    return CT_WebPr::default_instance();
    }

    bool CT_Connection::has_textPr() const
    {    
    return m_has_textPr;
    }

    CT_TextPr* CT_Connection::mutable_textPr()
    {    
    m_has_textPr = true;
    if (!m_textPr)
    {
        m_textPr = new CT_TextPr();
    }
    return m_textPr;
    }

    const CT_TextPr& CT_Connection::get_textPr() const
    {    
    if (m_textPr)
    {
        return *m_textPr;
    }
    return CT_TextPr::default_instance();
    }

    bool CT_Connection::has_parameters() const
    {    
    return m_has_parameters;
    }

    CT_Parameters* CT_Connection::mutable_parameters()
    {    
    m_has_parameters = true;
    if (!m_parameters)
    {
        m_parameters = new CT_Parameters();
    }
    return m_parameters;
    }

    const CT_Parameters& CT_Connection::get_parameters() const
    {    
    if (m_parameters)
    {
        return *m_parameters;
    }
    return CT_Parameters::default_instance();
    }

    bool CT_Connection::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* CT_Connection::mutable_extLst()
    {    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& CT_Connection::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

    void CT_Connection::clear()
    {    
    m_has_id_attr = false;
    m_id_attr = 0;
    
    m_has_sourceFile_attr = false;
    
    if (m_sourceFile_attr)
    {
        delete m_sourceFile_attr;
        m_sourceFile_attr = NULL;
    }
    
    
    m_has_odcFile_attr = false;
    
    if (m_odcFile_attr)
    {
        delete m_odcFile_attr;
        m_odcFile_attr = NULL;
    }
    
    
    m_has_keepAlive_attr = false;
    m_keepAlive_attr = false;
    
    m_has_interval_attr = false;
    m_interval_attr = 0;
    
    m_has_name_attr = false;
    
    if (m_name_attr)
    {
        delete m_name_attr;
        m_name_attr = NULL;
    }
    
    
    m_has_description_attr = false;
    
    if (m_description_attr)
    {
        delete m_description_attr;
        m_description_attr = NULL;
    }
    
    
    m_has_type_attr = false;
    m_type_attr = 0;
    
    m_has_reconnectionMethod_attr = false;
    m_reconnectionMethod_attr = 0;
    
    m_has_refreshedVersion_attr = false;
    m_refreshedVersion_attr = 0;
    
    m_has_minRefreshableVersion_attr = false;
    m_minRefreshableVersion_attr = 0;
    
    m_has_savePassword_attr = false;
    m_savePassword_attr = false;
    
    m_has_new_attr = false;
    m_new_attr = false;
    
    m_has_deleted_attr = false;
    m_deleted_attr = false;
    
    m_has_onlyUseConnectionFile_attr = false;
    m_onlyUseConnectionFile_attr = false;
    
    m_has_background_attr = false;
    m_background_attr = false;
    
    m_has_refreshOnLoad_attr = false;
    m_refreshOnLoad_attr = false;
    
    m_has_saveData_attr = false;
    m_saveData_attr = false;
    
    m_has_credentials_attr = false;
    
    if (m_credentials_attr)
    {
        delete m_credentials_attr;
        m_credentials_attr = NULL;
    }
    
    
    m_has_singleSignOnId_attr = false;
    
    if (m_singleSignOnId_attr)
    {
        delete m_singleSignOnId_attr;
        m_singleSignOnId_attr = NULL;
    }
    
    }

    void CT_Connection::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_id_attr)
    {
        _outStream << " " << "id" << "=\"" << m_id_attr << "\"";
    }
    
    
    if (m_has_sourceFile_attr)
    {
        m_sourceFile_attr->toXmlAttr("sourceFile", _outStream);
    }
    
    
    if (m_has_odcFile_attr)
    {
        m_odcFile_attr->toXmlAttr("odcFile", _outStream);
    }
    
    
    if (m_has_keepAlive_attr)
    {
        _outStream << " " << "keepAlive" << "=\"" << XSD::XMLBooleanStr(m_keepAlive_attr) << "\"";
    }
    
    
    if (m_has_interval_attr)
    {
        _outStream << " " << "interval" << "=\"" << m_interval_attr << "\"";
    }
    
    
    if (m_has_name_attr)
    {
        m_name_attr->toXmlAttr("name", _outStream);
    }
    
    
    if (m_has_description_attr)
    {
        m_description_attr->toXmlAttr("description", _outStream);
    }
    
    
    if (m_has_type_attr)
    {
        _outStream << " " << "type" << "=\"" << m_type_attr << "\"";
    }
    
    
    if (m_has_reconnectionMethod_attr)
    {
        _outStream << " " << "reconnectionMethod" << "=\"" << m_reconnectionMethod_attr << "\"";
    }
    
    
    if (m_has_refreshedVersion_attr)
    {
        _outStream << " " << "refreshedVersion" << "=\"" << m_refreshedVersion_attr << "\"";
    }
    
    
    if (m_has_minRefreshableVersion_attr)
    {
        _outStream << " " << "minRefreshableVersion" << "=\"" << m_minRefreshableVersion_attr << "\"";
    }
    
    
    if (m_has_savePassword_attr)
    {
        _outStream << " " << "savePassword" << "=\"" << XSD::XMLBooleanStr(m_savePassword_attr) << "\"";
    }
    
    
    if (m_has_new_attr)
    {
        _outStream << " " << "new" << "=\"" << XSD::XMLBooleanStr(m_new_attr) << "\"";
    }
    
    
    if (m_has_deleted_attr)
    {
        _outStream << " " << "deleted" << "=\"" << XSD::XMLBooleanStr(m_deleted_attr) << "\"";
    }
    
    
    if (m_has_onlyUseConnectionFile_attr)
    {
        _outStream << " " << "onlyUseConnectionFile" << "=\"" << XSD::XMLBooleanStr(m_onlyUseConnectionFile_attr) << "\"";
    }
    
    
    if (m_has_background_attr)
    {
        _outStream << " " << "background" << "=\"" << XSD::XMLBooleanStr(m_background_attr) << "\"";
    }
    
    
    if (m_has_refreshOnLoad_attr)
    {
        _outStream << " " << "refreshOnLoad" << "=\"" << XSD::XMLBooleanStr(m_refreshOnLoad_attr) << "\"";
    }
    
    
    if (m_has_saveData_attr)
    {
        _outStream << " " << "saveData" << "=\"" << XSD::XMLBooleanStr(m_saveData_attr) << "\"";
    }
    
    
    if (m_has_credentials_attr)
    {
        m_credentials_attr->toXmlAttr("credentials", _outStream);
    }
    
    
    if (m_has_singleSignOnId_attr)
    {
        m_singleSignOnId_attr->toXmlAttr("singleSignOnId", _outStream);
    }
    
            _outStream << ">";
            
    if (m_has_dbPr)
    {
        m_dbPr->toXmlElem("main:dbPr", "", _outStream);;
    }
    
    if (m_has_olapPr)
    {
        m_olapPr->toXmlElem("main:olapPr", "", _outStream);;
    }
    
    if (m_has_webPr)
    {
        m_webPr->toXmlElem("main:webPr", "", _outStream);;
    }
    
    if (m_has_textPr)
    {
        m_textPr->toXmlElem("main:textPr", "", _outStream);;
    }
    
    if (m_has_parameters)
    {
        m_parameters->toXmlElem("main:parameters", "", _outStream);;
    }
    
    if (m_has_extLst)
    {
        m_extLst->toXmlElem("main:extLst", "", _outStream);;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_Connection& CT_Connection::default_instance()
    {    
    if (!CT_Connection::default_instance_)
    {
        CT_Connection::default_instance_ = new CT_Connection();
    }
    return *CT_Connection::default_instance_;
    }

    bool CT_Connection::has_id_attr() const
    {    
    return m_has_id_attr;
    }

    void CT_Connection::set_id_attr(const XSD::unsignedInt_& _id_attr)
    {    
    m_has_id_attr = true;
    m_id_attr = _id_attr;
    }

    const XSD::unsignedInt_& CT_Connection::get_id_attr() const
    {    
    return m_id_attr;
    }

    bool CT_Connection::has_sourceFile_attr() const
    {    
    return m_has_sourceFile_attr;
    }

    void CT_Connection::set_sourceFile_attr(const ns_s::ST_Xstring& _sourceFile_attr)
    {    
    m_has_sourceFile_attr = true;
    m_sourceFile_attr = new ns_s::ST_Xstring(_sourceFile_attr);
    }

    const ns_s::ST_Xstring& CT_Connection::get_sourceFile_attr() const
    {    
    if (m_sourceFile_attr)
    {
        return *m_sourceFile_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_Connection::has_odcFile_attr() const
    {    
    return m_has_odcFile_attr;
    }

    void CT_Connection::set_odcFile_attr(const ns_s::ST_Xstring& _odcFile_attr)
    {    
    m_has_odcFile_attr = true;
    m_odcFile_attr = new ns_s::ST_Xstring(_odcFile_attr);
    }

    const ns_s::ST_Xstring& CT_Connection::get_odcFile_attr() const
    {    
    if (m_odcFile_attr)
    {
        return *m_odcFile_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_Connection::has_keepAlive_attr() const
    {    
    return m_has_keepAlive_attr;
    }

    void CT_Connection::set_keepAlive_attr(const XSD::boolean_& _keepAlive_attr)
    {    
    m_has_keepAlive_attr = true;
    m_keepAlive_attr = _keepAlive_attr;
    }

    const XSD::boolean_& CT_Connection::get_keepAlive_attr() const
    {    
    return m_keepAlive_attr;
    }

    bool CT_Connection::has_interval_attr() const
    {    
    return m_has_interval_attr;
    }

    void CT_Connection::set_interval_attr(const XSD::unsignedInt_& _interval_attr)
    {    
    m_has_interval_attr = true;
    m_interval_attr = _interval_attr;
    }

    const XSD::unsignedInt_& CT_Connection::get_interval_attr() const
    {    
    return m_interval_attr;
    }

    bool CT_Connection::has_name_attr() const
    {    
    return m_has_name_attr;
    }

    void CT_Connection::set_name_attr(const ns_s::ST_Xstring& _name_attr)
    {    
    m_has_name_attr = true;
    m_name_attr = new ns_s::ST_Xstring(_name_attr);
    }

    const ns_s::ST_Xstring& CT_Connection::get_name_attr() const
    {    
    if (m_name_attr)
    {
        return *m_name_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_Connection::has_description_attr() const
    {    
    return m_has_description_attr;
    }

    void CT_Connection::set_description_attr(const ns_s::ST_Xstring& _description_attr)
    {    
    m_has_description_attr = true;
    m_description_attr = new ns_s::ST_Xstring(_description_attr);
    }

    const ns_s::ST_Xstring& CT_Connection::get_description_attr() const
    {    
    if (m_description_attr)
    {
        return *m_description_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_Connection::has_type_attr() const
    {    
    return m_has_type_attr;
    }

    void CT_Connection::set_type_attr(const XSD::unsignedInt_& _type_attr)
    {    
    m_has_type_attr = true;
    m_type_attr = _type_attr;
    }

    const XSD::unsignedInt_& CT_Connection::get_type_attr() const
    {    
    return m_type_attr;
    }

    bool CT_Connection::has_reconnectionMethod_attr() const
    {    
    return m_has_reconnectionMethod_attr;
    }

    void CT_Connection::set_reconnectionMethod_attr(const XSD::unsignedInt_& _reconnectionMethod_attr)
    {    
    m_has_reconnectionMethod_attr = true;
    m_reconnectionMethod_attr = _reconnectionMethod_attr;
    }

    const XSD::unsignedInt_& CT_Connection::get_reconnectionMethod_attr() const
    {    
    return m_reconnectionMethod_attr;
    }

    bool CT_Connection::has_refreshedVersion_attr() const
    {    
    return m_has_refreshedVersion_attr;
    }

    void CT_Connection::set_refreshedVersion_attr(const XSD::unsignedByte_& _refreshedVersion_attr)
    {    
    m_has_refreshedVersion_attr = true;
    m_refreshedVersion_attr = _refreshedVersion_attr;
    }

    const XSD::unsignedByte_& CT_Connection::get_refreshedVersion_attr() const
    {    
    return m_refreshedVersion_attr;
    }

    bool CT_Connection::has_minRefreshableVersion_attr() const
    {    
    return m_has_minRefreshableVersion_attr;
    }

    void CT_Connection::set_minRefreshableVersion_attr(const XSD::unsignedByte_& _minRefreshableVersion_attr)
    {    
    m_has_minRefreshableVersion_attr = true;
    m_minRefreshableVersion_attr = _minRefreshableVersion_attr;
    }

    const XSD::unsignedByte_& CT_Connection::get_minRefreshableVersion_attr() const
    {    
    return m_minRefreshableVersion_attr;
    }

    bool CT_Connection::has_savePassword_attr() const
    {    
    return m_has_savePassword_attr;
    }

    void CT_Connection::set_savePassword_attr(const XSD::boolean_& _savePassword_attr)
    {    
    m_has_savePassword_attr = true;
    m_savePassword_attr = _savePassword_attr;
    }

    const XSD::boolean_& CT_Connection::get_savePassword_attr() const
    {    
    return m_savePassword_attr;
    }

    bool CT_Connection::has_new_attr() const
    {    
    return m_has_new_attr;
    }

    void CT_Connection::set_new_attr(const XSD::boolean_& _new_attr)
    {    
    m_has_new_attr = true;
    m_new_attr = _new_attr;
    }

    const XSD::boolean_& CT_Connection::get_new_attr() const
    {    
    return m_new_attr;
    }

    bool CT_Connection::has_deleted_attr() const
    {    
    return m_has_deleted_attr;
    }

    void CT_Connection::set_deleted_attr(const XSD::boolean_& _deleted_attr)
    {    
    m_has_deleted_attr = true;
    m_deleted_attr = _deleted_attr;
    }

    const XSD::boolean_& CT_Connection::get_deleted_attr() const
    {    
    return m_deleted_attr;
    }

    bool CT_Connection::has_onlyUseConnectionFile_attr() const
    {    
    return m_has_onlyUseConnectionFile_attr;
    }

    void CT_Connection::set_onlyUseConnectionFile_attr(const XSD::boolean_& _onlyUseConnectionFile_attr)
    {    
    m_has_onlyUseConnectionFile_attr = true;
    m_onlyUseConnectionFile_attr = _onlyUseConnectionFile_attr;
    }

    const XSD::boolean_& CT_Connection::get_onlyUseConnectionFile_attr() const
    {    
    return m_onlyUseConnectionFile_attr;
    }

    bool CT_Connection::has_background_attr() const
    {    
    return m_has_background_attr;
    }

    void CT_Connection::set_background_attr(const XSD::boolean_& _background_attr)
    {    
    m_has_background_attr = true;
    m_background_attr = _background_attr;
    }

    const XSD::boolean_& CT_Connection::get_background_attr() const
    {    
    return m_background_attr;
    }

    bool CT_Connection::has_refreshOnLoad_attr() const
    {    
    return m_has_refreshOnLoad_attr;
    }

    void CT_Connection::set_refreshOnLoad_attr(const XSD::boolean_& _refreshOnLoad_attr)
    {    
    m_has_refreshOnLoad_attr = true;
    m_refreshOnLoad_attr = _refreshOnLoad_attr;
    }

    const XSD::boolean_& CT_Connection::get_refreshOnLoad_attr() const
    {    
    return m_refreshOnLoad_attr;
    }

    bool CT_Connection::has_saveData_attr() const
    {    
    return m_has_saveData_attr;
    }

    void CT_Connection::set_saveData_attr(const XSD::boolean_& _saveData_attr)
    {    
    m_has_saveData_attr = true;
    m_saveData_attr = _saveData_attr;
    }

    const XSD::boolean_& CT_Connection::get_saveData_attr() const
    {    
    return m_saveData_attr;
    }

    bool CT_Connection::has_credentials_attr() const
    {    
    return m_has_credentials_attr;
    }

    void CT_Connection::set_credentials_attr(const ST_CredMethod& _credentials_attr)
    {    
    m_has_credentials_attr = true;
    m_credentials_attr = new ST_CredMethod(_credentials_attr);
    }

    const ST_CredMethod& CT_Connection::get_credentials_attr() const
    {    
    if (m_credentials_attr)
    {
        return *m_credentials_attr;
    }
    return ST_CredMethod::default_instance();
    }

    bool CT_Connection::has_singleSignOnId_attr() const
    {    
    return m_has_singleSignOnId_attr;
    }

    void CT_Connection::set_singleSignOnId_attr(const ns_s::ST_Xstring& _singleSignOnId_attr)
    {    
    m_has_singleSignOnId_attr = true;
    m_singleSignOnId_attr = new ns_s::ST_Xstring(_singleSignOnId_attr);
    }

    const ns_s::ST_Xstring& CT_Connection::get_singleSignOnId_attr() const
    {    
    if (m_singleSignOnId_attr)
    {
        return *m_singleSignOnId_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

CT_Connection* CT_Connection::default_instance_ = NULL;

    // CT_DbPr
    CT_DbPr::CT_DbPr()
    :m_has_connection_attr(false),
    m_connection_attr(NULL),
    m_has_command_attr(false),
    m_command_attr(NULL),
    m_has_serverCommand_attr(false),
    m_serverCommand_attr(NULL),
    m_has_commandType_attr(false),
    m_commandType_attr(0)
    {
    }
    CT_DbPr::~CT_DbPr()
{
    clear();    }
    void CT_DbPr::clear()
    {    
    m_has_connection_attr = false;
    
    if (m_connection_attr)
    {
        delete m_connection_attr;
        m_connection_attr = NULL;
    }
    
    
    m_has_command_attr = false;
    
    if (m_command_attr)
    {
        delete m_command_attr;
        m_command_attr = NULL;
    }
    
    
    m_has_serverCommand_attr = false;
    
    if (m_serverCommand_attr)
    {
        delete m_serverCommand_attr;
        m_serverCommand_attr = NULL;
    }
    
    
    m_has_commandType_attr = false;
    m_commandType_attr = 0;
    }

    void CT_DbPr::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_connection_attr)
    {
        m_connection_attr->toXmlAttr("connection", _outStream);
    }
    
    
    if (m_has_command_attr)
    {
        m_command_attr->toXmlAttr("command", _outStream);
    }
    
    
    if (m_has_serverCommand_attr)
    {
        m_serverCommand_attr->toXmlAttr("serverCommand", _outStream);
    }
    
    
    if (m_has_commandType_attr)
    {
        _outStream << " " << "commandType" << "=\"" << m_commandType_attr << "\"";
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_DbPr& CT_DbPr::default_instance()
    {    
    if (!CT_DbPr::default_instance_)
    {
        CT_DbPr::default_instance_ = new CT_DbPr();
    }
    return *CT_DbPr::default_instance_;
    }

    bool CT_DbPr::has_connection_attr() const
    {    
    return m_has_connection_attr;
    }

    void CT_DbPr::set_connection_attr(const ns_s::ST_Xstring& _connection_attr)
    {    
    m_has_connection_attr = true;
    m_connection_attr = new ns_s::ST_Xstring(_connection_attr);
    }

    const ns_s::ST_Xstring& CT_DbPr::get_connection_attr() const
    {    
    if (m_connection_attr)
    {
        return *m_connection_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_DbPr::has_command_attr() const
    {    
    return m_has_command_attr;
    }

    void CT_DbPr::set_command_attr(const ns_s::ST_Xstring& _command_attr)
    {    
    m_has_command_attr = true;
    m_command_attr = new ns_s::ST_Xstring(_command_attr);
    }

    const ns_s::ST_Xstring& CT_DbPr::get_command_attr() const
    {    
    if (m_command_attr)
    {
        return *m_command_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_DbPr::has_serverCommand_attr() const
    {    
    return m_has_serverCommand_attr;
    }

    void CT_DbPr::set_serverCommand_attr(const ns_s::ST_Xstring& _serverCommand_attr)
    {    
    m_has_serverCommand_attr = true;
    m_serverCommand_attr = new ns_s::ST_Xstring(_serverCommand_attr);
    }

    const ns_s::ST_Xstring& CT_DbPr::get_serverCommand_attr() const
    {    
    if (m_serverCommand_attr)
    {
        return *m_serverCommand_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_DbPr::has_commandType_attr() const
    {    
    return m_has_commandType_attr;
    }

    void CT_DbPr::set_commandType_attr(const XSD::unsignedInt_& _commandType_attr)
    {    
    m_has_commandType_attr = true;
    m_commandType_attr = _commandType_attr;
    }

    const XSD::unsignedInt_& CT_DbPr::get_commandType_attr() const
    {    
    return m_commandType_attr;
    }

CT_DbPr* CT_DbPr::default_instance_ = NULL;

    // CT_OlapPr
    CT_OlapPr::CT_OlapPr()
    :m_has_local_attr(false),
    m_local_attr(false),
    m_has_localConnection_attr(false),
    m_localConnection_attr(NULL),
    m_has_localRefresh_attr(false),
    m_localRefresh_attr(false),
    m_has_sendLocale_attr(false),
    m_sendLocale_attr(false),
    m_has_rowDrillCount_attr(false),
    m_rowDrillCount_attr(0),
    m_has_serverFill_attr(false),
    m_serverFill_attr(false),
    m_has_serverNumberFormat_attr(false),
    m_serverNumberFormat_attr(false),
    m_has_serverFont_attr(false),
    m_serverFont_attr(false),
    m_has_serverFontColor_attr(false),
    m_serverFontColor_attr(false)
    {
    }
    CT_OlapPr::~CT_OlapPr()
{
    clear();    }
    void CT_OlapPr::clear()
    {    
    m_has_local_attr = false;
    m_local_attr = false;
    
    m_has_localConnection_attr = false;
    
    if (m_localConnection_attr)
    {
        delete m_localConnection_attr;
        m_localConnection_attr = NULL;
    }
    
    
    m_has_localRefresh_attr = false;
    m_localRefresh_attr = false;
    
    m_has_sendLocale_attr = false;
    m_sendLocale_attr = false;
    
    m_has_rowDrillCount_attr = false;
    m_rowDrillCount_attr = 0;
    
    m_has_serverFill_attr = false;
    m_serverFill_attr = false;
    
    m_has_serverNumberFormat_attr = false;
    m_serverNumberFormat_attr = false;
    
    m_has_serverFont_attr = false;
    m_serverFont_attr = false;
    
    m_has_serverFontColor_attr = false;
    m_serverFontColor_attr = false;
    }

    void CT_OlapPr::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_local_attr)
    {
        _outStream << " " << "local" << "=\"" << XSD::XMLBooleanStr(m_local_attr) << "\"";
    }
    
    
    if (m_has_localConnection_attr)
    {
        m_localConnection_attr->toXmlAttr("localConnection", _outStream);
    }
    
    
    if (m_has_localRefresh_attr)
    {
        _outStream << " " << "localRefresh" << "=\"" << XSD::XMLBooleanStr(m_localRefresh_attr) << "\"";
    }
    
    
    if (m_has_sendLocale_attr)
    {
        _outStream << " " << "sendLocale" << "=\"" << XSD::XMLBooleanStr(m_sendLocale_attr) << "\"";
    }
    
    
    if (m_has_rowDrillCount_attr)
    {
        _outStream << " " << "rowDrillCount" << "=\"" << m_rowDrillCount_attr << "\"";
    }
    
    
    if (m_has_serverFill_attr)
    {
        _outStream << " " << "serverFill" << "=\"" << XSD::XMLBooleanStr(m_serverFill_attr) << "\"";
    }
    
    
    if (m_has_serverNumberFormat_attr)
    {
        _outStream << " " << "serverNumberFormat" << "=\"" << XSD::XMLBooleanStr(m_serverNumberFormat_attr) << "\"";
    }
    
    
    if (m_has_serverFont_attr)
    {
        _outStream << " " << "serverFont" << "=\"" << XSD::XMLBooleanStr(m_serverFont_attr) << "\"";
    }
    
    
    if (m_has_serverFontColor_attr)
    {
        _outStream << " " << "serverFontColor" << "=\"" << XSD::XMLBooleanStr(m_serverFontColor_attr) << "\"";
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_OlapPr& CT_OlapPr::default_instance()
    {    
    if (!CT_OlapPr::default_instance_)
    {
        CT_OlapPr::default_instance_ = new CT_OlapPr();
    }
    return *CT_OlapPr::default_instance_;
    }

    bool CT_OlapPr::has_local_attr() const
    {    
    return m_has_local_attr;
    }

    void CT_OlapPr::set_local_attr(const XSD::boolean_& _local_attr)
    {    
    m_has_local_attr = true;
    m_local_attr = _local_attr;
    }

    const XSD::boolean_& CT_OlapPr::get_local_attr() const
    {    
    return m_local_attr;
    }

    bool CT_OlapPr::has_localConnection_attr() const
    {    
    return m_has_localConnection_attr;
    }

    void CT_OlapPr::set_localConnection_attr(const ns_s::ST_Xstring& _localConnection_attr)
    {    
    m_has_localConnection_attr = true;
    m_localConnection_attr = new ns_s::ST_Xstring(_localConnection_attr);
    }

    const ns_s::ST_Xstring& CT_OlapPr::get_localConnection_attr() const
    {    
    if (m_localConnection_attr)
    {
        return *m_localConnection_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_OlapPr::has_localRefresh_attr() const
    {    
    return m_has_localRefresh_attr;
    }

    void CT_OlapPr::set_localRefresh_attr(const XSD::boolean_& _localRefresh_attr)
    {    
    m_has_localRefresh_attr = true;
    m_localRefresh_attr = _localRefresh_attr;
    }

    const XSD::boolean_& CT_OlapPr::get_localRefresh_attr() const
    {    
    return m_localRefresh_attr;
    }

    bool CT_OlapPr::has_sendLocale_attr() const
    {    
    return m_has_sendLocale_attr;
    }

    void CT_OlapPr::set_sendLocale_attr(const XSD::boolean_& _sendLocale_attr)
    {    
    m_has_sendLocale_attr = true;
    m_sendLocale_attr = _sendLocale_attr;
    }

    const XSD::boolean_& CT_OlapPr::get_sendLocale_attr() const
    {    
    return m_sendLocale_attr;
    }

    bool CT_OlapPr::has_rowDrillCount_attr() const
    {    
    return m_has_rowDrillCount_attr;
    }

    void CT_OlapPr::set_rowDrillCount_attr(const XSD::unsignedInt_& _rowDrillCount_attr)
    {    
    m_has_rowDrillCount_attr = true;
    m_rowDrillCount_attr = _rowDrillCount_attr;
    }

    const XSD::unsignedInt_& CT_OlapPr::get_rowDrillCount_attr() const
    {    
    return m_rowDrillCount_attr;
    }

    bool CT_OlapPr::has_serverFill_attr() const
    {    
    return m_has_serverFill_attr;
    }

    void CT_OlapPr::set_serverFill_attr(const XSD::boolean_& _serverFill_attr)
    {    
    m_has_serverFill_attr = true;
    m_serverFill_attr = _serverFill_attr;
    }

    const XSD::boolean_& CT_OlapPr::get_serverFill_attr() const
    {    
    return m_serverFill_attr;
    }

    bool CT_OlapPr::has_serverNumberFormat_attr() const
    {    
    return m_has_serverNumberFormat_attr;
    }

    void CT_OlapPr::set_serverNumberFormat_attr(const XSD::boolean_& _serverNumberFormat_attr)
    {    
    m_has_serverNumberFormat_attr = true;
    m_serverNumberFormat_attr = _serverNumberFormat_attr;
    }

    const XSD::boolean_& CT_OlapPr::get_serverNumberFormat_attr() const
    {    
    return m_serverNumberFormat_attr;
    }

    bool CT_OlapPr::has_serverFont_attr() const
    {    
    return m_has_serverFont_attr;
    }

    void CT_OlapPr::set_serverFont_attr(const XSD::boolean_& _serverFont_attr)
    {    
    m_has_serverFont_attr = true;
    m_serverFont_attr = _serverFont_attr;
    }

    const XSD::boolean_& CT_OlapPr::get_serverFont_attr() const
    {    
    return m_serverFont_attr;
    }

    bool CT_OlapPr::has_serverFontColor_attr() const
    {    
    return m_has_serverFontColor_attr;
    }

    void CT_OlapPr::set_serverFontColor_attr(const XSD::boolean_& _serverFontColor_attr)
    {    
    m_has_serverFontColor_attr = true;
    m_serverFontColor_attr = _serverFontColor_attr;
    }

    const XSD::boolean_& CT_OlapPr::get_serverFontColor_attr() const
    {    
    return m_serverFontColor_attr;
    }

CT_OlapPr* CT_OlapPr::default_instance_ = NULL;

    // CT_WebPr
    CT_WebPr::CT_WebPr()
    :m_has_tables(false),
    m_tables(NULL),
    m_has_xml_attr(false),
    m_xml_attr(false),
    m_has_sourceData_attr(false),
    m_sourceData_attr(false),
    m_has_parsePre_attr(false),
    m_parsePre_attr(false),
    m_has_consecutive_attr(false),
    m_consecutive_attr(false),
    m_has_firstRow_attr(false),
    m_firstRow_attr(false),
    m_has_xl97_attr(false),
    m_xl97_attr(false),
    m_has_textDates_attr(false),
    m_textDates_attr(false),
    m_has_xl2000_attr(false),
    m_xl2000_attr(false),
    m_has_url_attr(false),
    m_url_attr(NULL),
    m_has_post_attr(false),
    m_post_attr(NULL),
    m_has_htmlTables_attr(false),
    m_htmlTables_attr(false),
    m_has_htmlFormat_attr(false),
    m_htmlFormat_attr(NULL),
    m_has_editPage_attr(false),
    m_editPage_attr(NULL)
    {
    }
    CT_WebPr::~CT_WebPr()
{
    clear();    }
    bool CT_WebPr::has_tables() const
    {    
    return m_has_tables;
    }

    CT_Tables* CT_WebPr::mutable_tables()
    {    
    m_has_tables = true;
    if (!m_tables)
    {
        m_tables = new CT_Tables();
    }
    return m_tables;
    }

    const CT_Tables& CT_WebPr::get_tables() const
    {    
    if (m_tables)
    {
        return *m_tables;
    }
    return CT_Tables::default_instance();
    }

    void CT_WebPr::clear()
    {    
    m_has_xml_attr = false;
    m_xml_attr = false;
    
    m_has_sourceData_attr = false;
    m_sourceData_attr = false;
    
    m_has_parsePre_attr = false;
    m_parsePre_attr = false;
    
    m_has_consecutive_attr = false;
    m_consecutive_attr = false;
    
    m_has_firstRow_attr = false;
    m_firstRow_attr = false;
    
    m_has_xl97_attr = false;
    m_xl97_attr = false;
    
    m_has_textDates_attr = false;
    m_textDates_attr = false;
    
    m_has_xl2000_attr = false;
    m_xl2000_attr = false;
    
    m_has_url_attr = false;
    
    if (m_url_attr)
    {
        delete m_url_attr;
        m_url_attr = NULL;
    }
    
    
    m_has_post_attr = false;
    
    if (m_post_attr)
    {
        delete m_post_attr;
        m_post_attr = NULL;
    }
    
    
    m_has_htmlTables_attr = false;
    m_htmlTables_attr = false;
    
    m_has_htmlFormat_attr = false;
    
    if (m_htmlFormat_attr)
    {
        delete m_htmlFormat_attr;
        m_htmlFormat_attr = NULL;
    }
    
    
    m_has_editPage_attr = false;
    
    if (m_editPage_attr)
    {
        delete m_editPage_attr;
        m_editPage_attr = NULL;
    }
    
    }

    void CT_WebPr::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_xml_attr)
    {
        _outStream << " " << "xml" << "=\"" << XSD::XMLBooleanStr(m_xml_attr) << "\"";
    }
    
    
    if (m_has_sourceData_attr)
    {
        _outStream << " " << "sourceData" << "=\"" << XSD::XMLBooleanStr(m_sourceData_attr) << "\"";
    }
    
    
    if (m_has_parsePre_attr)
    {
        _outStream << " " << "parsePre" << "=\"" << XSD::XMLBooleanStr(m_parsePre_attr) << "\"";
    }
    
    
    if (m_has_consecutive_attr)
    {
        _outStream << " " << "consecutive" << "=\"" << XSD::XMLBooleanStr(m_consecutive_attr) << "\"";
    }
    
    
    if (m_has_firstRow_attr)
    {
        _outStream << " " << "firstRow" << "=\"" << XSD::XMLBooleanStr(m_firstRow_attr) << "\"";
    }
    
    
    if (m_has_xl97_attr)
    {
        _outStream << " " << "xl97" << "=\"" << XSD::XMLBooleanStr(m_xl97_attr) << "\"";
    }
    
    
    if (m_has_textDates_attr)
    {
        _outStream << " " << "textDates" << "=\"" << XSD::XMLBooleanStr(m_textDates_attr) << "\"";
    }
    
    
    if (m_has_xl2000_attr)
    {
        _outStream << " " << "xl2000" << "=\"" << XSD::XMLBooleanStr(m_xl2000_attr) << "\"";
    }
    
    
    if (m_has_url_attr)
    {
        m_url_attr->toXmlAttr("url", _outStream);
    }
    
    
    if (m_has_post_attr)
    {
        m_post_attr->toXmlAttr("post", _outStream);
    }
    
    
    if (m_has_htmlTables_attr)
    {
        _outStream << " " << "htmlTables" << "=\"" << XSD::XMLBooleanStr(m_htmlTables_attr) << "\"";
    }
    
    
    if (m_has_htmlFormat_attr)
    {
        m_htmlFormat_attr->toXmlAttr("htmlFormat", _outStream);
    }
    
    
    if (m_has_editPage_attr)
    {
        m_editPage_attr->toXmlAttr("editPage", _outStream);
    }
    
            _outStream << ">";
            
    if (m_has_tables)
    {
        m_tables->toXmlElem("main:tables", "", _outStream);;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_WebPr& CT_WebPr::default_instance()
    {    
    if (!CT_WebPr::default_instance_)
    {
        CT_WebPr::default_instance_ = new CT_WebPr();
    }
    return *CT_WebPr::default_instance_;
    }

    bool CT_WebPr::has_xml_attr() const
    {    
    return m_has_xml_attr;
    }

    void CT_WebPr::set_xml_attr(const XSD::boolean_& _xml_attr)
    {    
    m_has_xml_attr = true;
    m_xml_attr = _xml_attr;
    }

    const XSD::boolean_& CT_WebPr::get_xml_attr() const
    {    
    return m_xml_attr;
    }

    bool CT_WebPr::has_sourceData_attr() const
    {    
    return m_has_sourceData_attr;
    }

    void CT_WebPr::set_sourceData_attr(const XSD::boolean_& _sourceData_attr)
    {    
    m_has_sourceData_attr = true;
    m_sourceData_attr = _sourceData_attr;
    }

    const XSD::boolean_& CT_WebPr::get_sourceData_attr() const
    {    
    return m_sourceData_attr;
    }

    bool CT_WebPr::has_parsePre_attr() const
    {    
    return m_has_parsePre_attr;
    }

    void CT_WebPr::set_parsePre_attr(const XSD::boolean_& _parsePre_attr)
    {    
    m_has_parsePre_attr = true;
    m_parsePre_attr = _parsePre_attr;
    }

    const XSD::boolean_& CT_WebPr::get_parsePre_attr() const
    {    
    return m_parsePre_attr;
    }

    bool CT_WebPr::has_consecutive_attr() const
    {    
    return m_has_consecutive_attr;
    }

    void CT_WebPr::set_consecutive_attr(const XSD::boolean_& _consecutive_attr)
    {    
    m_has_consecutive_attr = true;
    m_consecutive_attr = _consecutive_attr;
    }

    const XSD::boolean_& CT_WebPr::get_consecutive_attr() const
    {    
    return m_consecutive_attr;
    }

    bool CT_WebPr::has_firstRow_attr() const
    {    
    return m_has_firstRow_attr;
    }

    void CT_WebPr::set_firstRow_attr(const XSD::boolean_& _firstRow_attr)
    {    
    m_has_firstRow_attr = true;
    m_firstRow_attr = _firstRow_attr;
    }

    const XSD::boolean_& CT_WebPr::get_firstRow_attr() const
    {    
    return m_firstRow_attr;
    }

    bool CT_WebPr::has_xl97_attr() const
    {    
    return m_has_xl97_attr;
    }

    void CT_WebPr::set_xl97_attr(const XSD::boolean_& _xl97_attr)
    {    
    m_has_xl97_attr = true;
    m_xl97_attr = _xl97_attr;
    }

    const XSD::boolean_& CT_WebPr::get_xl97_attr() const
    {    
    return m_xl97_attr;
    }

    bool CT_WebPr::has_textDates_attr() const
    {    
    return m_has_textDates_attr;
    }

    void CT_WebPr::set_textDates_attr(const XSD::boolean_& _textDates_attr)
    {    
    m_has_textDates_attr = true;
    m_textDates_attr = _textDates_attr;
    }

    const XSD::boolean_& CT_WebPr::get_textDates_attr() const
    {    
    return m_textDates_attr;
    }

    bool CT_WebPr::has_xl2000_attr() const
    {    
    return m_has_xl2000_attr;
    }

    void CT_WebPr::set_xl2000_attr(const XSD::boolean_& _xl2000_attr)
    {    
    m_has_xl2000_attr = true;
    m_xl2000_attr = _xl2000_attr;
    }

    const XSD::boolean_& CT_WebPr::get_xl2000_attr() const
    {    
    return m_xl2000_attr;
    }

    bool CT_WebPr::has_url_attr() const
    {    
    return m_has_url_attr;
    }

    void CT_WebPr::set_url_attr(const ns_s::ST_Xstring& _url_attr)
    {    
    m_has_url_attr = true;
    m_url_attr = new ns_s::ST_Xstring(_url_attr);
    }

    const ns_s::ST_Xstring& CT_WebPr::get_url_attr() const
    {    
    if (m_url_attr)
    {
        return *m_url_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_WebPr::has_post_attr() const
    {    
    return m_has_post_attr;
    }

    void CT_WebPr::set_post_attr(const ns_s::ST_Xstring& _post_attr)
    {    
    m_has_post_attr = true;
    m_post_attr = new ns_s::ST_Xstring(_post_attr);
    }

    const ns_s::ST_Xstring& CT_WebPr::get_post_attr() const
    {    
    if (m_post_attr)
    {
        return *m_post_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_WebPr::has_htmlTables_attr() const
    {    
    return m_has_htmlTables_attr;
    }

    void CT_WebPr::set_htmlTables_attr(const XSD::boolean_& _htmlTables_attr)
    {    
    m_has_htmlTables_attr = true;
    m_htmlTables_attr = _htmlTables_attr;
    }

    const XSD::boolean_& CT_WebPr::get_htmlTables_attr() const
    {    
    return m_htmlTables_attr;
    }

    bool CT_WebPr::has_htmlFormat_attr() const
    {    
    return m_has_htmlFormat_attr;
    }

    void CT_WebPr::set_htmlFormat_attr(const ST_HtmlFmt& _htmlFormat_attr)
    {    
    m_has_htmlFormat_attr = true;
    m_htmlFormat_attr = new ST_HtmlFmt(_htmlFormat_attr);
    }

    const ST_HtmlFmt& CT_WebPr::get_htmlFormat_attr() const
    {    
    if (m_htmlFormat_attr)
    {
        return *m_htmlFormat_attr;
    }
    return ST_HtmlFmt::default_instance();
    }

    bool CT_WebPr::has_editPage_attr() const
    {    
    return m_has_editPage_attr;
    }

    void CT_WebPr::set_editPage_attr(const ns_s::ST_Xstring& _editPage_attr)
    {    
    m_has_editPage_attr = true;
    m_editPage_attr = new ns_s::ST_Xstring(_editPage_attr);
    }

    const ns_s::ST_Xstring& CT_WebPr::get_editPage_attr() const
    {    
    if (m_editPage_attr)
    {
        return *m_editPage_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

CT_WebPr* CT_WebPr::default_instance_ = NULL;

    // CT_Parameters
    CT_Parameters::CT_Parameters()
    :m_has_count_attr(false),
    m_count_attr(0)
    {
    }
    CT_Parameters::~CT_Parameters()
{
    clear();    }
    CT_Parameter* CT_Parameters::add_parameter()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Parameter* pNewChild = pChildGroup->mutable_parameter();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_Parameters::clear()
    {    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_Parameters::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_parameter())
            {
                (*iter)->get_parameter().toXmlElem("main:parameter", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_Parameters& CT_Parameters::default_instance()
    {    
    if (!CT_Parameters::default_instance_)
    {
        CT_Parameters::default_instance_ = new CT_Parameters();
    }
    return *CT_Parameters::default_instance_;
    }

    bool CT_Parameters::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void CT_Parameters::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& CT_Parameters::get_count_attr() const
    {    
    return m_count_attr;
    }


    // CT_Parameters::ChildGroup_1
    CT_Parameters::ChildGroup_1::ChildGroup_1()
    :m_has_parameter(false),
    m_parameter(NULL)
    {
    }
    bool CT_Parameters::ChildGroup_1::has_parameter() const
    {    
    return m_has_parameter;
    }

    CT_Parameter* CT_Parameters::ChildGroup_1::mutable_parameter()
    {    
    
    m_has_parameter = true;
    if (!m_parameter)
    {
        m_parameter = new CT_Parameter();
    }
    return m_parameter;
    }

    const CT_Parameter& CT_Parameters::ChildGroup_1::get_parameter() const
    {    
    if (m_parameter)
    {
        return *m_parameter;
    }
    return CT_Parameter::default_instance();
    }

CT_Parameters* CT_Parameters::default_instance_ = NULL;

    // CT_Parameter
    CT_Parameter::CT_Parameter()
    :m_has_name_attr(false),
    m_name_attr(NULL),
    m_has_sqlType_attr(false),
    m_sqlType_attr(0),
    m_has_parameterType_attr(false),
    m_parameterType_attr(NULL),
    m_has_refreshOnChange_attr(false),
    m_refreshOnChange_attr(false),
    m_has_prompt_attr(false),
    m_prompt_attr(NULL),
    m_has_boolean_attr(false),
    m_boolean_attr(false),
    m_has_double_attr(false),
    m_double_attr(0),
    m_has_integer_attr(false),
    m_integer_attr(0),
    m_has_string_attr(false),
    m_string_attr(NULL),
    m_has_cell_attr(false),
    m_cell_attr(NULL)
    {
    }
    CT_Parameter::~CT_Parameter()
{
    clear();    }
    void CT_Parameter::clear()
    {    
    m_has_name_attr = false;
    
    if (m_name_attr)
    {
        delete m_name_attr;
        m_name_attr = NULL;
    }
    
    
    m_has_sqlType_attr = false;
    m_sqlType_attr = 0;
    
    m_has_parameterType_attr = false;
    
    if (m_parameterType_attr)
    {
        delete m_parameterType_attr;
        m_parameterType_attr = NULL;
    }
    
    
    m_has_refreshOnChange_attr = false;
    m_refreshOnChange_attr = false;
    
    m_has_prompt_attr = false;
    
    if (m_prompt_attr)
    {
        delete m_prompt_attr;
        m_prompt_attr = NULL;
    }
    
    
    m_has_boolean_attr = false;
    m_boolean_attr = false;
    
    m_has_double_attr = false;
    m_double_attr = 0;
    
    m_has_integer_attr = false;
    m_integer_attr = 0;
    
    m_has_string_attr = false;
    
    if (m_string_attr)
    {
        delete m_string_attr;
        m_string_attr = NULL;
    }
    
    
    m_has_cell_attr = false;
    
    if (m_cell_attr)
    {
        delete m_cell_attr;
        m_cell_attr = NULL;
    }
    
    }

    void CT_Parameter::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_name_attr)
    {
        m_name_attr->toXmlAttr("name", _outStream);
    }
    
    
    if (m_has_sqlType_attr)
    {
        _outStream << " " << "sqlType" << "=\"" << m_sqlType_attr << "\"";
    }
    
    
    if (m_has_parameterType_attr)
    {
        m_parameterType_attr->toXmlAttr("parameterType", _outStream);
    }
    
    
    if (m_has_refreshOnChange_attr)
    {
        _outStream << " " << "refreshOnChange" << "=\"" << XSD::XMLBooleanStr(m_refreshOnChange_attr) << "\"";
    }
    
    
    if (m_has_prompt_attr)
    {
        m_prompt_attr->toXmlAttr("prompt", _outStream);
    }
    
    
    if (m_has_boolean_attr)
    {
        _outStream << " " << "boolean" << "=\"" << XSD::XMLBooleanStr(m_boolean_attr) << "\"";
    }
    
    
    if (m_has_double_attr)
    {
        _outStream << " " << "double" << "=\"" << m_double_attr << "\"";
    }
    
    
    if (m_has_integer_attr)
    {
        _outStream << " " << "integer" << "=\"" << m_integer_attr << "\"";
    }
    
    
    if (m_has_string_attr)
    {
        m_string_attr->toXmlAttr("string", _outStream);
    }
    
    
    if (m_has_cell_attr)
    {
        m_cell_attr->toXmlAttr("cell", _outStream);
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_Parameter& CT_Parameter::default_instance()
    {    
    if (!CT_Parameter::default_instance_)
    {
        CT_Parameter::default_instance_ = new CT_Parameter();
    }
    return *CT_Parameter::default_instance_;
    }

    bool CT_Parameter::has_name_attr() const
    {    
    return m_has_name_attr;
    }

    void CT_Parameter::set_name_attr(const ns_s::ST_Xstring& _name_attr)
    {    
    m_has_name_attr = true;
    m_name_attr = new ns_s::ST_Xstring(_name_attr);
    }

    const ns_s::ST_Xstring& CT_Parameter::get_name_attr() const
    {    
    if (m_name_attr)
    {
        return *m_name_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_Parameter::has_sqlType_attr() const
    {    
    return m_has_sqlType_attr;
    }

    void CT_Parameter::set_sqlType_attr(const XSD::int_& _sqlType_attr)
    {    
    m_has_sqlType_attr = true;
    m_sqlType_attr = _sqlType_attr;
    }

    const XSD::int_& CT_Parameter::get_sqlType_attr() const
    {    
    return m_sqlType_attr;
    }

    bool CT_Parameter::has_parameterType_attr() const
    {    
    return m_has_parameterType_attr;
    }

    void CT_Parameter::set_parameterType_attr(const ST_ParameterType& _parameterType_attr)
    {    
    m_has_parameterType_attr = true;
    m_parameterType_attr = new ST_ParameterType(_parameterType_attr);
    }

    const ST_ParameterType& CT_Parameter::get_parameterType_attr() const
    {    
    if (m_parameterType_attr)
    {
        return *m_parameterType_attr;
    }
    return ST_ParameterType::default_instance();
    }

    bool CT_Parameter::has_refreshOnChange_attr() const
    {    
    return m_has_refreshOnChange_attr;
    }

    void CT_Parameter::set_refreshOnChange_attr(const XSD::boolean_& _refreshOnChange_attr)
    {    
    m_has_refreshOnChange_attr = true;
    m_refreshOnChange_attr = _refreshOnChange_attr;
    }

    const XSD::boolean_& CT_Parameter::get_refreshOnChange_attr() const
    {    
    return m_refreshOnChange_attr;
    }

    bool CT_Parameter::has_prompt_attr() const
    {    
    return m_has_prompt_attr;
    }

    void CT_Parameter::set_prompt_attr(const ns_s::ST_Xstring& _prompt_attr)
    {    
    m_has_prompt_attr = true;
    m_prompt_attr = new ns_s::ST_Xstring(_prompt_attr);
    }

    const ns_s::ST_Xstring& CT_Parameter::get_prompt_attr() const
    {    
    if (m_prompt_attr)
    {
        return *m_prompt_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_Parameter::has_boolean_attr() const
    {    
    return m_has_boolean_attr;
    }

    void CT_Parameter::set_boolean_attr(const XSD::boolean_& _boolean_attr)
    {    
    m_has_boolean_attr = true;
    m_boolean_attr = _boolean_attr;
    }

    const XSD::boolean_& CT_Parameter::get_boolean_attr() const
    {    
    return m_boolean_attr;
    }

    bool CT_Parameter::has_double_attr() const
    {    
    return m_has_double_attr;
    }

    void CT_Parameter::set_double_attr(const XSD::double_& _double_attr)
    {    
    m_has_double_attr = true;
    m_double_attr = _double_attr;
    }

    const XSD::double_& CT_Parameter::get_double_attr() const
    {    
    return m_double_attr;
    }

    bool CT_Parameter::has_integer_attr() const
    {    
    return m_has_integer_attr;
    }

    void CT_Parameter::set_integer_attr(const XSD::int_& _integer_attr)
    {    
    m_has_integer_attr = true;
    m_integer_attr = _integer_attr;
    }

    const XSD::int_& CT_Parameter::get_integer_attr() const
    {    
    return m_integer_attr;
    }

    bool CT_Parameter::has_string_attr() const
    {    
    return m_has_string_attr;
    }

    void CT_Parameter::set_string_attr(const ns_s::ST_Xstring& _string_attr)
    {    
    m_has_string_attr = true;
    m_string_attr = new ns_s::ST_Xstring(_string_attr);
    }

    const ns_s::ST_Xstring& CT_Parameter::get_string_attr() const
    {    
    if (m_string_attr)
    {
        return *m_string_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_Parameter::has_cell_attr() const
    {    
    return m_has_cell_attr;
    }

    void CT_Parameter::set_cell_attr(const ns_s::ST_Xstring& _cell_attr)
    {    
    m_has_cell_attr = true;
    m_cell_attr = new ns_s::ST_Xstring(_cell_attr);
    }

    const ns_s::ST_Xstring& CT_Parameter::get_cell_attr() const
    {    
    if (m_cell_attr)
    {
        return *m_cell_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

CT_Parameter* CT_Parameter::default_instance_ = NULL;

    // CT_Tables
    CT_Tables::CT_Tables()
    :m_has_count_attr(false),
    m_count_attr(0)
    {
    }
    CT_Tables::~CT_Tables()
{
    clear();    }
    CT_TableMissing* CT_Tables::add_m()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_TableMissing* pNewChild = pChildGroup->mutable_m();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_XStringElement* CT_Tables::add_s()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_XStringElement* pNewChild = pChildGroup->mutable_s();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_Index* CT_Tables::add_x()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Index* pNewChild = pChildGroup->mutable_x();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_Tables::clear()
    {    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_Tables::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_m())
            {
                (*iter)->get_m().toXmlElem("main:m", "", _outStream);
            }
            else if ((*iter)->has_s())
            {
                (*iter)->get_s().toXmlElem("main:s", "", _outStream);
            }
            else if ((*iter)->has_x())
            {
                (*iter)->get_x().toXmlElem("main:x", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_Tables& CT_Tables::default_instance()
    {    
    if (!CT_Tables::default_instance_)
    {
        CT_Tables::default_instance_ = new CT_Tables();
    }
    return *CT_Tables::default_instance_;
    }

    bool CT_Tables::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void CT_Tables::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& CT_Tables::get_count_attr() const
    {    
    return m_count_attr;
    }


    // CT_Tables::ChildGroup_1
    CT_Tables::ChildGroup_1::ChildGroup_1()
    :m_has_m(false),
    m_m(NULL),
    m_has_s(false),
    m_s(NULL),
    m_has_x(false),
    m_x(NULL)
    {
    }
    bool CT_Tables::ChildGroup_1::has_m() const
    {    
    return m_has_m;
    }

    CT_TableMissing* CT_Tables::ChildGroup_1::mutable_m()
    {    
    
    m_has_s = false;
    
    if (m_s)
    {
        delete m_s;
        m_s = NULL;
    }
    ;
    
    m_has_x = false;
    
    if (m_x)
    {
        delete m_x;
        m_x = NULL;
    }
    ;
    
    m_has_m = true;
    if (!m_m)
    {
        m_m = new CT_TableMissing();
    }
    return m_m;
    }

    const CT_TableMissing& CT_Tables::ChildGroup_1::get_m() const
    {    
    if (m_m)
    {
        return *m_m;
    }
    return CT_TableMissing::default_instance();
    }

    bool CT_Tables::ChildGroup_1::has_s() const
    {    
    return m_has_s;
    }

    CT_XStringElement* CT_Tables::ChildGroup_1::mutable_s()
    {    
    
    m_has_m = false;
    
    if (m_m)
    {
        delete m_m;
        m_m = NULL;
    }
    ;
    
    m_has_x = false;
    
    if (m_x)
    {
        delete m_x;
        m_x = NULL;
    }
    ;
    
    m_has_s = true;
    if (!m_s)
    {
        m_s = new CT_XStringElement();
    }
    return m_s;
    }

    const CT_XStringElement& CT_Tables::ChildGroup_1::get_s() const
    {    
    if (m_s)
    {
        return *m_s;
    }
    return CT_XStringElement::default_instance();
    }

    bool CT_Tables::ChildGroup_1::has_x() const
    {    
    return m_has_x;
    }

    CT_Index* CT_Tables::ChildGroup_1::mutable_x()
    {    
    
    m_has_m = false;
    
    if (m_m)
    {
        delete m_m;
        m_m = NULL;
    }
    ;
    
    m_has_s = false;
    
    if (m_s)
    {
        delete m_s;
        m_s = NULL;
    }
    ;
    
    m_has_x = true;
    if (!m_x)
    {
        m_x = new CT_Index();
    }
    return m_x;
    }

    const CT_Index& CT_Tables::ChildGroup_1::get_x() const
    {    
    if (m_x)
    {
        return *m_x;
    }
    return CT_Index::default_instance();
    }

CT_Tables* CT_Tables::default_instance_ = NULL;

    // CT_TableMissing
    CT_TableMissing::CT_TableMissing()

    {
    }
    CT_TableMissing::~CT_TableMissing()
{
    clear();    }
    void CT_TableMissing::clear()
    {    }

    void CT_TableMissing::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_TableMissing& CT_TableMissing::default_instance()
    {    
    if (!CT_TableMissing::default_instance_)
    {
        CT_TableMissing::default_instance_ = new CT_TableMissing();
    }
    return *CT_TableMissing::default_instance_;
    }

CT_TableMissing* CT_TableMissing::default_instance_ = NULL;

    // CT_TextPr
    CT_TextPr::CT_TextPr()
    :m_has_textFields(false),
    m_textFields(NULL),
    m_has_prompt_attr(false),
    m_prompt_attr(false),
    m_has_fileType_attr(false),
    m_fileType_attr(NULL),
    m_has_codePage_attr(false),
    m_codePage_attr(0),
    m_has_characterSet_attr(false),
    m_characterSet_attr(""),
    m_has_firstRow_attr(false),
    m_firstRow_attr(0),
    m_has_sourceFile_attr(false),
    m_sourceFile_attr(NULL),
    m_has_delimited_attr(false),
    m_delimited_attr(false),
    m_has_decimal_attr(false),
    m_decimal_attr(NULL),
    m_has_thousands_attr(false),
    m_thousands_attr(NULL),
    m_has_tab_attr(false),
    m_tab_attr(false),
    m_has_space_attr(false),
    m_space_attr(false),
    m_has_comma_attr(false),
    m_comma_attr(false),
    m_has_semicolon_attr(false),
    m_semicolon_attr(false),
    m_has_consecutive_attr(false),
    m_consecutive_attr(false),
    m_has_qualifier_attr(false),
    m_qualifier_attr(NULL),
    m_has_delimiter_attr(false),
    m_delimiter_attr(NULL)
    {
    }
    CT_TextPr::~CT_TextPr()
{
    clear();    }
    bool CT_TextPr::has_textFields() const
    {    
    return m_has_textFields;
    }

    CT_TextFields* CT_TextPr::mutable_textFields()
    {    
    m_has_textFields = true;
    if (!m_textFields)
    {
        m_textFields = new CT_TextFields();
    }
    return m_textFields;
    }

    const CT_TextFields& CT_TextPr::get_textFields() const
    {    
    if (m_textFields)
    {
        return *m_textFields;
    }
    return CT_TextFields::default_instance();
    }

    void CT_TextPr::clear()
    {    
    m_has_prompt_attr = false;
    m_prompt_attr = false;
    
    m_has_fileType_attr = false;
    
    if (m_fileType_attr)
    {
        delete m_fileType_attr;
        m_fileType_attr = NULL;
    }
    
    
    m_has_codePage_attr = false;
    m_codePage_attr = 0;
    
    m_has_characterSet_attr = false;
    m_characterSet_attr.clear();
    
    m_has_firstRow_attr = false;
    m_firstRow_attr = 0;
    
    m_has_sourceFile_attr = false;
    
    if (m_sourceFile_attr)
    {
        delete m_sourceFile_attr;
        m_sourceFile_attr = NULL;
    }
    
    
    m_has_delimited_attr = false;
    m_delimited_attr = false;
    
    m_has_decimal_attr = false;
    
    if (m_decimal_attr)
    {
        delete m_decimal_attr;
        m_decimal_attr = NULL;
    }
    
    
    m_has_thousands_attr = false;
    
    if (m_thousands_attr)
    {
        delete m_thousands_attr;
        m_thousands_attr = NULL;
    }
    
    
    m_has_tab_attr = false;
    m_tab_attr = false;
    
    m_has_space_attr = false;
    m_space_attr = false;
    
    m_has_comma_attr = false;
    m_comma_attr = false;
    
    m_has_semicolon_attr = false;
    m_semicolon_attr = false;
    
    m_has_consecutive_attr = false;
    m_consecutive_attr = false;
    
    m_has_qualifier_attr = false;
    
    if (m_qualifier_attr)
    {
        delete m_qualifier_attr;
        m_qualifier_attr = NULL;
    }
    
    
    m_has_delimiter_attr = false;
    
    if (m_delimiter_attr)
    {
        delete m_delimiter_attr;
        m_delimiter_attr = NULL;
    }
    
    }

    void CT_TextPr::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_prompt_attr)
    {
        _outStream << " " << "prompt" << "=\"" << XSD::XMLBooleanStr(m_prompt_attr) << "\"";
    }
    
    
    if (m_has_fileType_attr)
    {
        m_fileType_attr->toXmlAttr("fileType", _outStream);
    }
    
    
    if (m_has_codePage_attr)
    {
        _outStream << " " << "codePage" << "=\"" << m_codePage_attr << "\"";
    }
    
    
    if (m_has_characterSet_attr)
    {
        _outStream << " " << "characterSet" << "=\"" << m_characterSet_attr << "\"";
    }
    
    
    if (m_has_firstRow_attr)
    {
        _outStream << " " << "firstRow" << "=\"" << m_firstRow_attr << "\"";
    }
    
    
    if (m_has_sourceFile_attr)
    {
        m_sourceFile_attr->toXmlAttr("sourceFile", _outStream);
    }
    
    
    if (m_has_delimited_attr)
    {
        _outStream << " " << "delimited" << "=\"" << XSD::XMLBooleanStr(m_delimited_attr) << "\"";
    }
    
    
    if (m_has_decimal_attr)
    {
        m_decimal_attr->toXmlAttr("decimal", _outStream);
    }
    
    
    if (m_has_thousands_attr)
    {
        m_thousands_attr->toXmlAttr("thousands", _outStream);
    }
    
    
    if (m_has_tab_attr)
    {
        _outStream << " " << "tab" << "=\"" << XSD::XMLBooleanStr(m_tab_attr) << "\"";
    }
    
    
    if (m_has_space_attr)
    {
        _outStream << " " << "space" << "=\"" << XSD::XMLBooleanStr(m_space_attr) << "\"";
    }
    
    
    if (m_has_comma_attr)
    {
        _outStream << " " << "comma" << "=\"" << XSD::XMLBooleanStr(m_comma_attr) << "\"";
    }
    
    
    if (m_has_semicolon_attr)
    {
        _outStream << " " << "semicolon" << "=\"" << XSD::XMLBooleanStr(m_semicolon_attr) << "\"";
    }
    
    
    if (m_has_consecutive_attr)
    {
        _outStream << " " << "consecutive" << "=\"" << XSD::XMLBooleanStr(m_consecutive_attr) << "\"";
    }
    
    
    if (m_has_qualifier_attr)
    {
        m_qualifier_attr->toXmlAttr("qualifier", _outStream);
    }
    
    
    if (m_has_delimiter_attr)
    {
        m_delimiter_attr->toXmlAttr("delimiter", _outStream);
    }
    
            _outStream << ">";
            
    if (m_has_textFields)
    {
        m_textFields->toXmlElem("main:textFields", "", _outStream);;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_TextPr& CT_TextPr::default_instance()
    {    
    if (!CT_TextPr::default_instance_)
    {
        CT_TextPr::default_instance_ = new CT_TextPr();
    }
    return *CT_TextPr::default_instance_;
    }

    bool CT_TextPr::has_prompt_attr() const
    {    
    return m_has_prompt_attr;
    }

    void CT_TextPr::set_prompt_attr(const XSD::boolean_& _prompt_attr)
    {    
    m_has_prompt_attr = true;
    m_prompt_attr = _prompt_attr;
    }

    const XSD::boolean_& CT_TextPr::get_prompt_attr() const
    {    
    return m_prompt_attr;
    }

    bool CT_TextPr::has_fileType_attr() const
    {    
    return m_has_fileType_attr;
    }

    void CT_TextPr::set_fileType_attr(const ST_FileType& _fileType_attr)
    {    
    m_has_fileType_attr = true;
    m_fileType_attr = new ST_FileType(_fileType_attr);
    }

    const ST_FileType& CT_TextPr::get_fileType_attr() const
    {    
    if (m_fileType_attr)
    {
        return *m_fileType_attr;
    }
    return ST_FileType::default_instance();
    }

    bool CT_TextPr::has_codePage_attr() const
    {    
    return m_has_codePage_attr;
    }

    void CT_TextPr::set_codePage_attr(const XSD::unsignedInt_& _codePage_attr)
    {    
    m_has_codePage_attr = true;
    m_codePage_attr = _codePage_attr;
    }

    const XSD::unsignedInt_& CT_TextPr::get_codePage_attr() const
    {    
    return m_codePage_attr;
    }

    bool CT_TextPr::has_characterSet_attr() const
    {    
    return m_has_characterSet_attr;
    }

    void CT_TextPr::set_characterSet_attr(const XSD::string_& _characterSet_attr)
    {    
    m_has_characterSet_attr = true;
    m_characterSet_attr = _characterSet_attr;
    }

    const XSD::string_& CT_TextPr::get_characterSet_attr() const
    {    
    return m_characterSet_attr;
    }

    bool CT_TextPr::has_firstRow_attr() const
    {    
    return m_has_firstRow_attr;
    }

    void CT_TextPr::set_firstRow_attr(const XSD::unsignedInt_& _firstRow_attr)
    {    
    m_has_firstRow_attr = true;
    m_firstRow_attr = _firstRow_attr;
    }

    const XSD::unsignedInt_& CT_TextPr::get_firstRow_attr() const
    {    
    return m_firstRow_attr;
    }

    bool CT_TextPr::has_sourceFile_attr() const
    {    
    return m_has_sourceFile_attr;
    }

    void CT_TextPr::set_sourceFile_attr(const ns_s::ST_Xstring& _sourceFile_attr)
    {    
    m_has_sourceFile_attr = true;
    m_sourceFile_attr = new ns_s::ST_Xstring(_sourceFile_attr);
    }

    const ns_s::ST_Xstring& CT_TextPr::get_sourceFile_attr() const
    {    
    if (m_sourceFile_attr)
    {
        return *m_sourceFile_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_TextPr::has_delimited_attr() const
    {    
    return m_has_delimited_attr;
    }

    void CT_TextPr::set_delimited_attr(const XSD::boolean_& _delimited_attr)
    {    
    m_has_delimited_attr = true;
    m_delimited_attr = _delimited_attr;
    }

    const XSD::boolean_& CT_TextPr::get_delimited_attr() const
    {    
    return m_delimited_attr;
    }

    bool CT_TextPr::has_decimal_attr() const
    {    
    return m_has_decimal_attr;
    }

    void CT_TextPr::set_decimal_attr(const ns_s::ST_Xstring& _decimal_attr)
    {    
    m_has_decimal_attr = true;
    m_decimal_attr = new ns_s::ST_Xstring(_decimal_attr);
    }

    const ns_s::ST_Xstring& CT_TextPr::get_decimal_attr() const
    {    
    if (m_decimal_attr)
    {
        return *m_decimal_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_TextPr::has_thousands_attr() const
    {    
    return m_has_thousands_attr;
    }

    void CT_TextPr::set_thousands_attr(const ns_s::ST_Xstring& _thousands_attr)
    {    
    m_has_thousands_attr = true;
    m_thousands_attr = new ns_s::ST_Xstring(_thousands_attr);
    }

    const ns_s::ST_Xstring& CT_TextPr::get_thousands_attr() const
    {    
    if (m_thousands_attr)
    {
        return *m_thousands_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_TextPr::has_tab_attr() const
    {    
    return m_has_tab_attr;
    }

    void CT_TextPr::set_tab_attr(const XSD::boolean_& _tab_attr)
    {    
    m_has_tab_attr = true;
    m_tab_attr = _tab_attr;
    }

    const XSD::boolean_& CT_TextPr::get_tab_attr() const
    {    
    return m_tab_attr;
    }

    bool CT_TextPr::has_space_attr() const
    {    
    return m_has_space_attr;
    }

    void CT_TextPr::set_space_attr(const XSD::boolean_& _space_attr)
    {    
    m_has_space_attr = true;
    m_space_attr = _space_attr;
    }

    const XSD::boolean_& CT_TextPr::get_space_attr() const
    {    
    return m_space_attr;
    }

    bool CT_TextPr::has_comma_attr() const
    {    
    return m_has_comma_attr;
    }

    void CT_TextPr::set_comma_attr(const XSD::boolean_& _comma_attr)
    {    
    m_has_comma_attr = true;
    m_comma_attr = _comma_attr;
    }

    const XSD::boolean_& CT_TextPr::get_comma_attr() const
    {    
    return m_comma_attr;
    }

    bool CT_TextPr::has_semicolon_attr() const
    {    
    return m_has_semicolon_attr;
    }

    void CT_TextPr::set_semicolon_attr(const XSD::boolean_& _semicolon_attr)
    {    
    m_has_semicolon_attr = true;
    m_semicolon_attr = _semicolon_attr;
    }

    const XSD::boolean_& CT_TextPr::get_semicolon_attr() const
    {    
    return m_semicolon_attr;
    }

    bool CT_TextPr::has_consecutive_attr() const
    {    
    return m_has_consecutive_attr;
    }

    void CT_TextPr::set_consecutive_attr(const XSD::boolean_& _consecutive_attr)
    {    
    m_has_consecutive_attr = true;
    m_consecutive_attr = _consecutive_attr;
    }

    const XSD::boolean_& CT_TextPr::get_consecutive_attr() const
    {    
    return m_consecutive_attr;
    }

    bool CT_TextPr::has_qualifier_attr() const
    {    
    return m_has_qualifier_attr;
    }

    void CT_TextPr::set_qualifier_attr(const ST_Qualifier& _qualifier_attr)
    {    
    m_has_qualifier_attr = true;
    m_qualifier_attr = new ST_Qualifier(_qualifier_attr);
    }

    const ST_Qualifier& CT_TextPr::get_qualifier_attr() const
    {    
    if (m_qualifier_attr)
    {
        return *m_qualifier_attr;
    }
    return ST_Qualifier::default_instance();
    }

    bool CT_TextPr::has_delimiter_attr() const
    {    
    return m_has_delimiter_attr;
    }

    void CT_TextPr::set_delimiter_attr(const ns_s::ST_Xstring& _delimiter_attr)
    {    
    m_has_delimiter_attr = true;
    m_delimiter_attr = new ns_s::ST_Xstring(_delimiter_attr);
    }

    const ns_s::ST_Xstring& CT_TextPr::get_delimiter_attr() const
    {    
    if (m_delimiter_attr)
    {
        return *m_delimiter_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

CT_TextPr* CT_TextPr::default_instance_ = NULL;

    // CT_TextFields
    CT_TextFields::CT_TextFields()
    :m_has_count_attr(false),
    m_count_attr(0)
    {
    }
    CT_TextFields::~CT_TextFields()
{
    clear();    }
    CT_TextField* CT_TextFields::add_textField()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_TextField* pNewChild = pChildGroup->mutable_textField();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_TextFields::clear()
    {    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_TextFields::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_textField())
            {
                (*iter)->get_textField().toXmlElem("main:textField", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_TextFields& CT_TextFields::default_instance()
    {    
    if (!CT_TextFields::default_instance_)
    {
        CT_TextFields::default_instance_ = new CT_TextFields();
    }
    return *CT_TextFields::default_instance_;
    }

    bool CT_TextFields::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void CT_TextFields::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& CT_TextFields::get_count_attr() const
    {    
    return m_count_attr;
    }


    // CT_TextFields::ChildGroup_1
    CT_TextFields::ChildGroup_1::ChildGroup_1()
    :m_has_textField(false),
    m_textField(NULL)
    {
    }
    bool CT_TextFields::ChildGroup_1::has_textField() const
    {    
    return m_has_textField;
    }

    CT_TextField* CT_TextFields::ChildGroup_1::mutable_textField()
    {    
    
    m_has_textField = true;
    if (!m_textField)
    {
        m_textField = new CT_TextField();
    }
    return m_textField;
    }

    const CT_TextField& CT_TextFields::ChildGroup_1::get_textField() const
    {    
    if (m_textField)
    {
        return *m_textField;
    }
    return CT_TextField::default_instance();
    }

CT_TextFields* CT_TextFields::default_instance_ = NULL;

    // CT_TextField
    CT_TextField::CT_TextField()
    :m_has_type_attr(false),
    m_type_attr(NULL),
    m_has_position_attr(false),
    m_position_attr(0)
    {
    }
    CT_TextField::~CT_TextField()
{
    clear();    }
    void CT_TextField::clear()
    {    
    m_has_type_attr = false;
    
    if (m_type_attr)
    {
        delete m_type_attr;
        m_type_attr = NULL;
    }
    
    
    m_has_position_attr = false;
    m_position_attr = 0;
    }

    void CT_TextField::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_type_attr)
    {
        m_type_attr->toXmlAttr("type", _outStream);
    }
    
    
    if (m_has_position_attr)
    {
        _outStream << " " << "position" << "=\"" << m_position_attr << "\"";
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_TextField& CT_TextField::default_instance()
    {    
    if (!CT_TextField::default_instance_)
    {
        CT_TextField::default_instance_ = new CT_TextField();
    }
    return *CT_TextField::default_instance_;
    }

    bool CT_TextField::has_type_attr() const
    {    
    return m_has_type_attr;
    }

    void CT_TextField::set_type_attr(const ST_ExternalConnectionType& _type_attr)
    {    
    m_has_type_attr = true;
    m_type_attr = new ST_ExternalConnectionType(_type_attr);
    }

    const ST_ExternalConnectionType& CT_TextField::get_type_attr() const
    {    
    if (m_type_attr)
    {
        return *m_type_attr;
    }
    return ST_ExternalConnectionType::default_instance();
    }

    bool CT_TextField::has_position_attr() const
    {    
    return m_has_position_attr;
    }

    void CT_TextField::set_position_attr(const XSD::unsignedInt_& _position_attr)
    {    
    m_has_position_attr = true;
    m_position_attr = _position_attr;
    }

    const XSD::unsignedInt_& CT_TextField::get_position_attr() const
    {    
    return m_position_attr;
    }

CT_TextField* CT_TextField::default_instance_ = NULL;

    // CT_PivotCacheDefinition
    CT_PivotCacheDefinition::CT_PivotCacheDefinition()
    :m_has_cacheSource(false),
    m_cacheSource(NULL),
    m_has_cacheFields(false),
    m_cacheFields(NULL),
    m_has_cacheHierarchies(false),
    m_cacheHierarchies(NULL),
    m_has_kpis(false),
    m_kpis(NULL),
    m_has_tupleCache(false),
    m_tupleCache(NULL),
    m_has_calculatedItems(false),
    m_calculatedItems(NULL),
    m_has_calculatedMembers(false),
    m_calculatedMembers(NULL),
    m_has_dimensions(false),
    m_dimensions(NULL),
    m_has_measureGroups(false),
    m_measureGroups(NULL),
    m_has_maps(false),
    m_maps(NULL),
    m_has_extLst(false),
    m_extLst(NULL),
    m_has_r_id_attr(false),
    m_r_id_attr(NULL),
    m_has_invalid_attr(false),
    m_invalid_attr(false),
    m_has_saveData_attr(false),
    m_saveData_attr(false),
    m_has_refreshOnLoad_attr(false),
    m_refreshOnLoad_attr(false),
    m_has_optimizeMemory_attr(false),
    m_optimizeMemory_attr(false),
    m_has_enableRefresh_attr(false),
    m_enableRefresh_attr(false),
    m_has_refreshedBy_attr(false),
    m_refreshedBy_attr(NULL),
    m_has_refreshedDate_attr(false),
    m_refreshedDate_attr(0),
    m_has_refreshedDateIso_attr(false),
    m_refreshedDateIso_attr(""),
    m_has_backgroundQuery_attr(false),
    m_backgroundQuery_attr(false),
    m_has_missingItemsLimit_attr(false),
    m_missingItemsLimit_attr(0),
    m_has_createdVersion_attr(false),
    m_createdVersion_attr(0),
    m_has_refreshedVersion_attr(false),
    m_refreshedVersion_attr(0),
    m_has_minRefreshableVersion_attr(false),
    m_minRefreshableVersion_attr(0),
    m_has_recordCount_attr(false),
    m_recordCount_attr(0),
    m_has_upgradeOnRefresh_attr(false),
    m_upgradeOnRefresh_attr(false),
    m_has_tupleCache_attr(false),
    m_tupleCache_attr(false),
    m_has_supportSubquery_attr(false),
    m_supportSubquery_attr(false),
    m_has_supportAdvancedDrill_attr(false),
    m_supportAdvancedDrill_attr(false)
    {
    }
    CT_PivotCacheDefinition::~CT_PivotCacheDefinition()
{
    clear();    }
    bool CT_PivotCacheDefinition::has_cacheSource() const
    {    
    return m_has_cacheSource;
    }

    CT_CacheSource* CT_PivotCacheDefinition::mutable_cacheSource()
    {    
    m_has_cacheSource = true;
    if (!m_cacheSource)
    {
        m_cacheSource = new CT_CacheSource();
    }
    return m_cacheSource;
    }

    const CT_CacheSource& CT_PivotCacheDefinition::get_cacheSource() const
    {    
    if (m_cacheSource)
    {
        return *m_cacheSource;
    }
    return CT_CacheSource::default_instance();
    }

    bool CT_PivotCacheDefinition::has_cacheFields() const
    {    
    return m_has_cacheFields;
    }

    CT_CacheFields* CT_PivotCacheDefinition::mutable_cacheFields()
    {    
    m_has_cacheFields = true;
    if (!m_cacheFields)
    {
        m_cacheFields = new CT_CacheFields();
    }
    return m_cacheFields;
    }

    const CT_CacheFields& CT_PivotCacheDefinition::get_cacheFields() const
    {    
    if (m_cacheFields)
    {
        return *m_cacheFields;
    }
    return CT_CacheFields::default_instance();
    }

    bool CT_PivotCacheDefinition::has_cacheHierarchies() const
    {    
    return m_has_cacheHierarchies;
    }

    CT_CacheHierarchies* CT_PivotCacheDefinition::mutable_cacheHierarchies()
    {    
    m_has_cacheHierarchies = true;
    if (!m_cacheHierarchies)
    {
        m_cacheHierarchies = new CT_CacheHierarchies();
    }
    return m_cacheHierarchies;
    }

    const CT_CacheHierarchies& CT_PivotCacheDefinition::get_cacheHierarchies() const
    {    
    if (m_cacheHierarchies)
    {
        return *m_cacheHierarchies;
    }
    return CT_CacheHierarchies::default_instance();
    }

    bool CT_PivotCacheDefinition::has_kpis() const
    {    
    return m_has_kpis;
    }

    CT_PCDKPIs* CT_PivotCacheDefinition::mutable_kpis()
    {    
    m_has_kpis = true;
    if (!m_kpis)
    {
        m_kpis = new CT_PCDKPIs();
    }
    return m_kpis;
    }

    const CT_PCDKPIs& CT_PivotCacheDefinition::get_kpis() const
    {    
    if (m_kpis)
    {
        return *m_kpis;
    }
    return CT_PCDKPIs::default_instance();
    }

    bool CT_PivotCacheDefinition::has_tupleCache() const
    {    
    return m_has_tupleCache;
    }

    CT_TupleCache* CT_PivotCacheDefinition::mutable_tupleCache()
    {    
    m_has_tupleCache = true;
    if (!m_tupleCache)
    {
        m_tupleCache = new CT_TupleCache();
    }
    return m_tupleCache;
    }

    const CT_TupleCache& CT_PivotCacheDefinition::get_tupleCache() const
    {    
    if (m_tupleCache)
    {
        return *m_tupleCache;
    }
    return CT_TupleCache::default_instance();
    }

    bool CT_PivotCacheDefinition::has_calculatedItems() const
    {    
    return m_has_calculatedItems;
    }

    CT_CalculatedItems* CT_PivotCacheDefinition::mutable_calculatedItems()
    {    
    m_has_calculatedItems = true;
    if (!m_calculatedItems)
    {
        m_calculatedItems = new CT_CalculatedItems();
    }
    return m_calculatedItems;
    }

    const CT_CalculatedItems& CT_PivotCacheDefinition::get_calculatedItems() const
    {    
    if (m_calculatedItems)
    {
        return *m_calculatedItems;
    }
    return CT_CalculatedItems::default_instance();
    }

    bool CT_PivotCacheDefinition::has_calculatedMembers() const
    {    
    return m_has_calculatedMembers;
    }

    CT_CalculatedMembers* CT_PivotCacheDefinition::mutable_calculatedMembers()
    {    
    m_has_calculatedMembers = true;
    if (!m_calculatedMembers)
    {
        m_calculatedMembers = new CT_CalculatedMembers();
    }
    return m_calculatedMembers;
    }

    const CT_CalculatedMembers& CT_PivotCacheDefinition::get_calculatedMembers() const
    {    
    if (m_calculatedMembers)
    {
        return *m_calculatedMembers;
    }
    return CT_CalculatedMembers::default_instance();
    }

    bool CT_PivotCacheDefinition::has_dimensions() const
    {    
    return m_has_dimensions;
    }

    CT_Dimensions* CT_PivotCacheDefinition::mutable_dimensions()
    {    
    m_has_dimensions = true;
    if (!m_dimensions)
    {
        m_dimensions = new CT_Dimensions();
    }
    return m_dimensions;
    }

    const CT_Dimensions& CT_PivotCacheDefinition::get_dimensions() const
    {    
    if (m_dimensions)
    {
        return *m_dimensions;
    }
    return CT_Dimensions::default_instance();
    }

    bool CT_PivotCacheDefinition::has_measureGroups() const
    {    
    return m_has_measureGroups;
    }

    CT_MeasureGroups* CT_PivotCacheDefinition::mutable_measureGroups()
    {    
    m_has_measureGroups = true;
    if (!m_measureGroups)
    {
        m_measureGroups = new CT_MeasureGroups();
    }
    return m_measureGroups;
    }

    const CT_MeasureGroups& CT_PivotCacheDefinition::get_measureGroups() const
    {    
    if (m_measureGroups)
    {
        return *m_measureGroups;
    }
    return CT_MeasureGroups::default_instance();
    }

    bool CT_PivotCacheDefinition::has_maps() const
    {    
    return m_has_maps;
    }

    CT_MeasureDimensionMaps* CT_PivotCacheDefinition::mutable_maps()
    {    
    m_has_maps = true;
    if (!m_maps)
    {
        m_maps = new CT_MeasureDimensionMaps();
    }
    return m_maps;
    }

    const CT_MeasureDimensionMaps& CT_PivotCacheDefinition::get_maps() const
    {    
    if (m_maps)
    {
        return *m_maps;
    }
    return CT_MeasureDimensionMaps::default_instance();
    }

    bool CT_PivotCacheDefinition::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* CT_PivotCacheDefinition::mutable_extLst()
    {    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& CT_PivotCacheDefinition::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

    void CT_PivotCacheDefinition::clear()
    {    
    m_has_r_id_attr = false;
    
    if (m_r_id_attr)
    {
        delete m_r_id_attr;
        m_r_id_attr = NULL;
    }
    
    
    m_has_invalid_attr = false;
    m_invalid_attr = false;
    
    m_has_saveData_attr = false;
    m_saveData_attr = false;
    
    m_has_refreshOnLoad_attr = false;
    m_refreshOnLoad_attr = false;
    
    m_has_optimizeMemory_attr = false;
    m_optimizeMemory_attr = false;
    
    m_has_enableRefresh_attr = false;
    m_enableRefresh_attr = false;
    
    m_has_refreshedBy_attr = false;
    
    if (m_refreshedBy_attr)
    {
        delete m_refreshedBy_attr;
        m_refreshedBy_attr = NULL;
    }
    
    
    m_has_refreshedDate_attr = false;
    m_refreshedDate_attr = 0;
    
    m_has_refreshedDateIso_attr = false;
    m_refreshedDateIso_attr.clear();
    
    m_has_backgroundQuery_attr = false;
    m_backgroundQuery_attr = false;
    
    m_has_missingItemsLimit_attr = false;
    m_missingItemsLimit_attr = 0;
    
    m_has_createdVersion_attr = false;
    m_createdVersion_attr = 0;
    
    m_has_refreshedVersion_attr = false;
    m_refreshedVersion_attr = 0;
    
    m_has_minRefreshableVersion_attr = false;
    m_minRefreshableVersion_attr = 0;
    
    m_has_recordCount_attr = false;
    m_recordCount_attr = 0;
    
    m_has_upgradeOnRefresh_attr = false;
    m_upgradeOnRefresh_attr = false;
    
    m_has_tupleCache_attr = false;
    m_tupleCache_attr = false;
    
    m_has_supportSubquery_attr = false;
    m_supportSubquery_attr = false;
    
    m_has_supportAdvancedDrill_attr = false;
    m_supportAdvancedDrill_attr = false;
    }

    void CT_PivotCacheDefinition::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_r_id_attr)
    {
        m_r_id_attr->toXmlAttr("r:id", _outStream);
    }
    
    
    if (m_has_invalid_attr)
    {
        _outStream << " " << "invalid" << "=\"" << XSD::XMLBooleanStr(m_invalid_attr) << "\"";
    }
    
    
    if (m_has_saveData_attr)
    {
        _outStream << " " << "saveData" << "=\"" << XSD::XMLBooleanStr(m_saveData_attr) << "\"";
    }
    
    
    if (m_has_refreshOnLoad_attr)
    {
        _outStream << " " << "refreshOnLoad" << "=\"" << XSD::XMLBooleanStr(m_refreshOnLoad_attr) << "\"";
    }
    
    
    if (m_has_optimizeMemory_attr)
    {
        _outStream << " " << "optimizeMemory" << "=\"" << XSD::XMLBooleanStr(m_optimizeMemory_attr) << "\"";
    }
    
    
    if (m_has_enableRefresh_attr)
    {
        _outStream << " " << "enableRefresh" << "=\"" << XSD::XMLBooleanStr(m_enableRefresh_attr) << "\"";
    }
    
    
    if (m_has_refreshedBy_attr)
    {
        m_refreshedBy_attr->toXmlAttr("refreshedBy", _outStream);
    }
    
    
    if (m_has_refreshedDate_attr)
    {
        _outStream << " " << "refreshedDate" << "=\"" << m_refreshedDate_attr << "\"";
    }
    
    
    if (m_has_refreshedDateIso_attr)
    {
        _outStream << " " << "refreshedDateIso" << "=\"" << m_refreshedDateIso_attr << "\"";
    }
    
    
    if (m_has_backgroundQuery_attr)
    {
        _outStream << " " << "backgroundQuery" << "=\"" << XSD::XMLBooleanStr(m_backgroundQuery_attr) << "\"";
    }
    
    
    if (m_has_missingItemsLimit_attr)
    {
        _outStream << " " << "missingItemsLimit" << "=\"" << m_missingItemsLimit_attr << "\"";
    }
    
    
    if (m_has_createdVersion_attr)
    {
        _outStream << " " << "createdVersion" << "=\"" << m_createdVersion_attr << "\"";
    }
    
    
    if (m_has_refreshedVersion_attr)
    {
        _outStream << " " << "refreshedVersion" << "=\"" << m_refreshedVersion_attr << "\"";
    }
    
    
    if (m_has_minRefreshableVersion_attr)
    {
        _outStream << " " << "minRefreshableVersion" << "=\"" << m_minRefreshableVersion_attr << "\"";
    }
    
    
    if (m_has_recordCount_attr)
    {
        _outStream << " " << "recordCount" << "=\"" << m_recordCount_attr << "\"";
    }
    
    
    if (m_has_upgradeOnRefresh_attr)
    {
        _outStream << " " << "upgradeOnRefresh" << "=\"" << XSD::XMLBooleanStr(m_upgradeOnRefresh_attr) << "\"";
    }
    
    
    if (m_has_tupleCache_attr)
    {
        _outStream << " " << "tupleCache" << "=\"" << XSD::XMLBooleanStr(m_tupleCache_attr) << "\"";
    }
    
    
    if (m_has_supportSubquery_attr)
    {
        _outStream << " " << "supportSubquery" << "=\"" << XSD::XMLBooleanStr(m_supportSubquery_attr) << "\"";
    }
    
    
    if (m_has_supportAdvancedDrill_attr)
    {
        _outStream << " " << "supportAdvancedDrill" << "=\"" << XSD::XMLBooleanStr(m_supportAdvancedDrill_attr) << "\"";
    }
    
            _outStream << ">";
            
    if (m_has_cacheSource)
    {
        m_cacheSource->toXmlElem("main:cacheSource", "", _outStream);;
    }
    
    if (m_has_cacheFields)
    {
        m_cacheFields->toXmlElem("main:cacheFields", "", _outStream);;
    }
    
    if (m_has_cacheHierarchies)
    {
        m_cacheHierarchies->toXmlElem("main:cacheHierarchies", "", _outStream);;
    }
    
    if (m_has_kpis)
    {
        m_kpis->toXmlElem("main:kpis", "", _outStream);;
    }
    
    if (m_has_tupleCache)
    {
        m_tupleCache->toXmlElem("main:tupleCache", "", _outStream);;
    }
    
    if (m_has_calculatedItems)
    {
        m_calculatedItems->toXmlElem("main:calculatedItems", "", _outStream);;
    }
    
    if (m_has_calculatedMembers)
    {
        m_calculatedMembers->toXmlElem("main:calculatedMembers", "", _outStream);;
    }
    
    if (m_has_dimensions)
    {
        m_dimensions->toXmlElem("main:dimensions", "", _outStream);;
    }
    
    if (m_has_measureGroups)
    {
        m_measureGroups->toXmlElem("main:measureGroups", "", _outStream);;
    }
    
    if (m_has_maps)
    {
        m_maps->toXmlElem("main:maps", "", _outStream);;
    }
    
    if (m_has_extLst)
    {
        m_extLst->toXmlElem("main:extLst", "", _outStream);;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_PivotCacheDefinition& CT_PivotCacheDefinition::default_instance()
    {    
    if (!CT_PivotCacheDefinition::default_instance_)
    {
        CT_PivotCacheDefinition::default_instance_ = new CT_PivotCacheDefinition();
    }
    return *CT_PivotCacheDefinition::default_instance_;
    }

    bool CT_PivotCacheDefinition::has_r_id_attr() const
    {    
    return m_has_r_id_attr;
    }

    void CT_PivotCacheDefinition::set_r_id_attr(const ns_r::ST_RelationshipId& _r_id_attr)
    {    
    m_has_r_id_attr = true;
    m_r_id_attr = new ns_r::ST_RelationshipId(_r_id_attr);
    }

    const ns_r::ST_RelationshipId& CT_PivotCacheDefinition::get_r_id_attr() const
    {    
    if (m_r_id_attr)
    {
        return *m_r_id_attr;
    }
    return ns_r::ST_RelationshipId::default_instance();
    }

    bool CT_PivotCacheDefinition::has_invalid_attr() const
    {    
    return m_has_invalid_attr;
    }

    void CT_PivotCacheDefinition::set_invalid_attr(const XSD::boolean_& _invalid_attr)
    {    
    m_has_invalid_attr = true;
    m_invalid_attr = _invalid_attr;
    }

    const XSD::boolean_& CT_PivotCacheDefinition::get_invalid_attr() const
    {    
    return m_invalid_attr;
    }

    bool CT_PivotCacheDefinition::has_saveData_attr() const
    {    
    return m_has_saveData_attr;
    }

    void CT_PivotCacheDefinition::set_saveData_attr(const XSD::boolean_& _saveData_attr)
    {    
    m_has_saveData_attr = true;
    m_saveData_attr = _saveData_attr;
    }

    const XSD::boolean_& CT_PivotCacheDefinition::get_saveData_attr() const
    {    
    return m_saveData_attr;
    }

    bool CT_PivotCacheDefinition::has_refreshOnLoad_attr() const
    {    
    return m_has_refreshOnLoad_attr;
    }

    void CT_PivotCacheDefinition::set_refreshOnLoad_attr(const XSD::boolean_& _refreshOnLoad_attr)
    {    
    m_has_refreshOnLoad_attr = true;
    m_refreshOnLoad_attr = _refreshOnLoad_attr;
    }

    const XSD::boolean_& CT_PivotCacheDefinition::get_refreshOnLoad_attr() const
    {    
    return m_refreshOnLoad_attr;
    }

    bool CT_PivotCacheDefinition::has_optimizeMemory_attr() const
    {    
    return m_has_optimizeMemory_attr;
    }

    void CT_PivotCacheDefinition::set_optimizeMemory_attr(const XSD::boolean_& _optimizeMemory_attr)
    {    
    m_has_optimizeMemory_attr = true;
    m_optimizeMemory_attr = _optimizeMemory_attr;
    }

    const XSD::boolean_& CT_PivotCacheDefinition::get_optimizeMemory_attr() const
    {    
    return m_optimizeMemory_attr;
    }

    bool CT_PivotCacheDefinition::has_enableRefresh_attr() const
    {    
    return m_has_enableRefresh_attr;
    }

    void CT_PivotCacheDefinition::set_enableRefresh_attr(const XSD::boolean_& _enableRefresh_attr)
    {    
    m_has_enableRefresh_attr = true;
    m_enableRefresh_attr = _enableRefresh_attr;
    }

    const XSD::boolean_& CT_PivotCacheDefinition::get_enableRefresh_attr() const
    {    
    return m_enableRefresh_attr;
    }

    bool CT_PivotCacheDefinition::has_refreshedBy_attr() const
    {    
    return m_has_refreshedBy_attr;
    }

    void CT_PivotCacheDefinition::set_refreshedBy_attr(const ns_s::ST_Xstring& _refreshedBy_attr)
    {    
    m_has_refreshedBy_attr = true;
    m_refreshedBy_attr = new ns_s::ST_Xstring(_refreshedBy_attr);
    }

    const ns_s::ST_Xstring& CT_PivotCacheDefinition::get_refreshedBy_attr() const
    {    
    if (m_refreshedBy_attr)
    {
        return *m_refreshedBy_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_PivotCacheDefinition::has_refreshedDate_attr() const
    {    
    return m_has_refreshedDate_attr;
    }

    void CT_PivotCacheDefinition::set_refreshedDate_attr(const XSD::double_& _refreshedDate_attr)
    {    
    m_has_refreshedDate_attr = true;
    m_refreshedDate_attr = _refreshedDate_attr;
    }

    const XSD::double_& CT_PivotCacheDefinition::get_refreshedDate_attr() const
    {    
    return m_refreshedDate_attr;
    }

    bool CT_PivotCacheDefinition::has_refreshedDateIso_attr() const
    {    
    return m_has_refreshedDateIso_attr;
    }

    void CT_PivotCacheDefinition::set_refreshedDateIso_attr(const XSD::dateTime_& _refreshedDateIso_attr)
    {    
    m_has_refreshedDateIso_attr = true;
    m_refreshedDateIso_attr = _refreshedDateIso_attr;
    }

    const XSD::dateTime_& CT_PivotCacheDefinition::get_refreshedDateIso_attr() const
    {    
    return m_refreshedDateIso_attr;
    }

    bool CT_PivotCacheDefinition::has_backgroundQuery_attr() const
    {    
    return m_has_backgroundQuery_attr;
    }

    void CT_PivotCacheDefinition::set_backgroundQuery_attr(const XSD::boolean_& _backgroundQuery_attr)
    {    
    m_has_backgroundQuery_attr = true;
    m_backgroundQuery_attr = _backgroundQuery_attr;
    }

    const XSD::boolean_& CT_PivotCacheDefinition::get_backgroundQuery_attr() const
    {    
    return m_backgroundQuery_attr;
    }

    bool CT_PivotCacheDefinition::has_missingItemsLimit_attr() const
    {    
    return m_has_missingItemsLimit_attr;
    }

    void CT_PivotCacheDefinition::set_missingItemsLimit_attr(const XSD::unsignedInt_& _missingItemsLimit_attr)
    {    
    m_has_missingItemsLimit_attr = true;
    m_missingItemsLimit_attr = _missingItemsLimit_attr;
    }

    const XSD::unsignedInt_& CT_PivotCacheDefinition::get_missingItemsLimit_attr() const
    {    
    return m_missingItemsLimit_attr;
    }

    bool CT_PivotCacheDefinition::has_createdVersion_attr() const
    {    
    return m_has_createdVersion_attr;
    }

    void CT_PivotCacheDefinition::set_createdVersion_attr(const XSD::unsignedByte_& _createdVersion_attr)
    {    
    m_has_createdVersion_attr = true;
    m_createdVersion_attr = _createdVersion_attr;
    }

    const XSD::unsignedByte_& CT_PivotCacheDefinition::get_createdVersion_attr() const
    {    
    return m_createdVersion_attr;
    }

    bool CT_PivotCacheDefinition::has_refreshedVersion_attr() const
    {    
    return m_has_refreshedVersion_attr;
    }

    void CT_PivotCacheDefinition::set_refreshedVersion_attr(const XSD::unsignedByte_& _refreshedVersion_attr)
    {    
    m_has_refreshedVersion_attr = true;
    m_refreshedVersion_attr = _refreshedVersion_attr;
    }

    const XSD::unsignedByte_& CT_PivotCacheDefinition::get_refreshedVersion_attr() const
    {    
    return m_refreshedVersion_attr;
    }

    bool CT_PivotCacheDefinition::has_minRefreshableVersion_attr() const
    {    
    return m_has_minRefreshableVersion_attr;
    }

    void CT_PivotCacheDefinition::set_minRefreshableVersion_attr(const XSD::unsignedByte_& _minRefreshableVersion_attr)
    {    
    m_has_minRefreshableVersion_attr = true;
    m_minRefreshableVersion_attr = _minRefreshableVersion_attr;
    }

    const XSD::unsignedByte_& CT_PivotCacheDefinition::get_minRefreshableVersion_attr() const
    {    
    return m_minRefreshableVersion_attr;
    }

    bool CT_PivotCacheDefinition::has_recordCount_attr() const
    {    
    return m_has_recordCount_attr;
    }

    void CT_PivotCacheDefinition::set_recordCount_attr(const XSD::unsignedInt_& _recordCount_attr)
    {    
    m_has_recordCount_attr = true;
    m_recordCount_attr = _recordCount_attr;
    }

    const XSD::unsignedInt_& CT_PivotCacheDefinition::get_recordCount_attr() const
    {    
    return m_recordCount_attr;
    }

    bool CT_PivotCacheDefinition::has_upgradeOnRefresh_attr() const
    {    
    return m_has_upgradeOnRefresh_attr;
    }

    void CT_PivotCacheDefinition::set_upgradeOnRefresh_attr(const XSD::boolean_& _upgradeOnRefresh_attr)
    {    
    m_has_upgradeOnRefresh_attr = true;
    m_upgradeOnRefresh_attr = _upgradeOnRefresh_attr;
    }

    const XSD::boolean_& CT_PivotCacheDefinition::get_upgradeOnRefresh_attr() const
    {    
    return m_upgradeOnRefresh_attr;
    }

    bool CT_PivotCacheDefinition::has_tupleCache_attr() const
    {    
    return m_has_tupleCache_attr;
    }

    void CT_PivotCacheDefinition::set_tupleCache_attr(const XSD::boolean_& _tupleCache_attr)
    {    
    m_has_tupleCache_attr = true;
    m_tupleCache_attr = _tupleCache_attr;
    }

    const XSD::boolean_& CT_PivotCacheDefinition::get_tupleCache_attr() const
    {    
    return m_tupleCache_attr;
    }

    bool CT_PivotCacheDefinition::has_supportSubquery_attr() const
    {    
    return m_has_supportSubquery_attr;
    }

    void CT_PivotCacheDefinition::set_supportSubquery_attr(const XSD::boolean_& _supportSubquery_attr)
    {    
    m_has_supportSubquery_attr = true;
    m_supportSubquery_attr = _supportSubquery_attr;
    }

    const XSD::boolean_& CT_PivotCacheDefinition::get_supportSubquery_attr() const
    {    
    return m_supportSubquery_attr;
    }

    bool CT_PivotCacheDefinition::has_supportAdvancedDrill_attr() const
    {    
    return m_has_supportAdvancedDrill_attr;
    }

    void CT_PivotCacheDefinition::set_supportAdvancedDrill_attr(const XSD::boolean_& _supportAdvancedDrill_attr)
    {    
    m_has_supportAdvancedDrill_attr = true;
    m_supportAdvancedDrill_attr = _supportAdvancedDrill_attr;
    }

    const XSD::boolean_& CT_PivotCacheDefinition::get_supportAdvancedDrill_attr() const
    {    
    return m_supportAdvancedDrill_attr;
    }

CT_PivotCacheDefinition* CT_PivotCacheDefinition::default_instance_ = NULL;

    // CT_CacheFields
    CT_CacheFields::CT_CacheFields()
    :m_has_count_attr(false),
    m_count_attr(0)
    {
    }
    CT_CacheFields::~CT_CacheFields()
{
    clear();    }
    CT_CacheField* CT_CacheFields::add_cacheField()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_CacheField* pNewChild = pChildGroup->mutable_cacheField();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_CacheFields::clear()
    {    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_CacheFields::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_cacheField())
            {
                (*iter)->get_cacheField().toXmlElem("main:cacheField", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_CacheFields& CT_CacheFields::default_instance()
    {    
    if (!CT_CacheFields::default_instance_)
    {
        CT_CacheFields::default_instance_ = new CT_CacheFields();
    }
    return *CT_CacheFields::default_instance_;
    }

    bool CT_CacheFields::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void CT_CacheFields::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& CT_CacheFields::get_count_attr() const
    {    
    return m_count_attr;
    }


    // CT_CacheFields::ChildGroup_1
    CT_CacheFields::ChildGroup_1::ChildGroup_1()
    :m_has_cacheField(false),
    m_cacheField(NULL)
    {
    }
    bool CT_CacheFields::ChildGroup_1::has_cacheField() const
    {    
    return m_has_cacheField;
    }

    CT_CacheField* CT_CacheFields::ChildGroup_1::mutable_cacheField()
    {    
    
    m_has_cacheField = true;
    if (!m_cacheField)
    {
        m_cacheField = new CT_CacheField();
    }
    return m_cacheField;
    }

    const CT_CacheField& CT_CacheFields::ChildGroup_1::get_cacheField() const
    {    
    if (m_cacheField)
    {
        return *m_cacheField;
    }
    return CT_CacheField::default_instance();
    }

CT_CacheFields* CT_CacheFields::default_instance_ = NULL;

    // CT_CacheField
    CT_CacheField::CT_CacheField()
    :m_has_sharedItems(false),
    m_sharedItems(NULL),
    m_has_fieldGroup(false),
    m_fieldGroup(NULL),
    m_has_name_attr(false),
    m_name_attr(NULL),
    m_has_caption_attr(false),
    m_caption_attr(NULL),
    m_has_propertyName_attr(false),
    m_propertyName_attr(NULL),
    m_has_serverField_attr(false),
    m_serverField_attr(false),
    m_has_uniqueList_attr(false),
    m_uniqueList_attr(false),
    m_has_numFmtId_attr(false),
    m_numFmtId_attr(NULL),
    m_has_formula_attr(false),
    m_formula_attr(NULL),
    m_has_sqlType_attr(false),
    m_sqlType_attr(0),
    m_has_hierarchy_attr(false),
    m_hierarchy_attr(0),
    m_has_level_attr(false),
    m_level_attr(0),
    m_has_databaseField_attr(false),
    m_databaseField_attr(false),
    m_has_mappingCount_attr(false),
    m_mappingCount_attr(0),
    m_has_memberPropertyField_attr(false),
    m_memberPropertyField_attr(false)
    {
    }
    CT_CacheField::~CT_CacheField()
{
    clear();    }
    bool CT_CacheField::has_sharedItems() const
    {    
    return m_has_sharedItems;
    }

    CT_SharedItems* CT_CacheField::mutable_sharedItems()
    {    
    m_has_sharedItems = true;
    if (!m_sharedItems)
    {
        m_sharedItems = new CT_SharedItems();
    }
    return m_sharedItems;
    }

    const CT_SharedItems& CT_CacheField::get_sharedItems() const
    {    
    if (m_sharedItems)
    {
        return *m_sharedItems;
    }
    return CT_SharedItems::default_instance();
    }

    bool CT_CacheField::has_fieldGroup() const
    {    
    return m_has_fieldGroup;
    }

    CT_FieldGroup* CT_CacheField::mutable_fieldGroup()
    {    
    m_has_fieldGroup = true;
    if (!m_fieldGroup)
    {
        m_fieldGroup = new CT_FieldGroup();
    }
    return m_fieldGroup;
    }

    const CT_FieldGroup& CT_CacheField::get_fieldGroup() const
    {    
    if (m_fieldGroup)
    {
        return *m_fieldGroup;
    }
    return CT_FieldGroup::default_instance();
    }

    CT_X* CT_CacheField::add_mpMap()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_X* pNewChild = pChildGroup->mutable_mpMap();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_ExtensionList* CT_CacheField::add_extLst()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_ExtensionList* pNewChild = pChildGroup->mutable_extLst();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_CacheField::clear()
    {    
    m_has_name_attr = false;
    
    if (m_name_attr)
    {
        delete m_name_attr;
        m_name_attr = NULL;
    }
    
    
    m_has_caption_attr = false;
    
    if (m_caption_attr)
    {
        delete m_caption_attr;
        m_caption_attr = NULL;
    }
    
    
    m_has_propertyName_attr = false;
    
    if (m_propertyName_attr)
    {
        delete m_propertyName_attr;
        m_propertyName_attr = NULL;
    }
    
    
    m_has_serverField_attr = false;
    m_serverField_attr = false;
    
    m_has_uniqueList_attr = false;
    m_uniqueList_attr = false;
    
    m_has_numFmtId_attr = false;
    
    if (m_numFmtId_attr)
    {
        delete m_numFmtId_attr;
        m_numFmtId_attr = NULL;
    }
    
    
    m_has_formula_attr = false;
    
    if (m_formula_attr)
    {
        delete m_formula_attr;
        m_formula_attr = NULL;
    }
    
    
    m_has_sqlType_attr = false;
    m_sqlType_attr = 0;
    
    m_has_hierarchy_attr = false;
    m_hierarchy_attr = 0;
    
    m_has_level_attr = false;
    m_level_attr = 0;
    
    m_has_databaseField_attr = false;
    m_databaseField_attr = false;
    
    m_has_mappingCount_attr = false;
    m_mappingCount_attr = 0;
    
    m_has_memberPropertyField_attr = false;
    m_memberPropertyField_attr = false;
    
    m_has_sharedItems = false;
    
    if (m_sharedItems)
    {
        delete m_sharedItems;
        m_sharedItems = NULL;
    }
    
    
    m_has_fieldGroup = false;
    
    if (m_fieldGroup)
    {
        delete m_fieldGroup;
        m_fieldGroup = NULL;
    }
    
     
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_CacheField::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_name_attr)
    {
        m_name_attr->toXmlAttr("name", _outStream);
    }
    
    
    if (m_has_caption_attr)
    {
        m_caption_attr->toXmlAttr("caption", _outStream);
    }
    
    
    if (m_has_propertyName_attr)
    {
        m_propertyName_attr->toXmlAttr("propertyName", _outStream);
    }
    
    
    if (m_has_serverField_attr)
    {
        _outStream << " " << "serverField" << "=\"" << XSD::XMLBooleanStr(m_serverField_attr) << "\"";
    }
    
    
    if (m_has_uniqueList_attr)
    {
        _outStream << " " << "uniqueList" << "=\"" << XSD::XMLBooleanStr(m_uniqueList_attr) << "\"";
    }
    
    
    if (m_has_numFmtId_attr)
    {
        m_numFmtId_attr->toXmlAttr("numFmtId", _outStream);
    }
    
    
    if (m_has_formula_attr)
    {
        m_formula_attr->toXmlAttr("formula", _outStream);
    }
    
    
    if (m_has_sqlType_attr)
    {
        _outStream << " " << "sqlType" << "=\"" << m_sqlType_attr << "\"";
    }
    
    
    if (m_has_hierarchy_attr)
    {
        _outStream << " " << "hierarchy" << "=\"" << m_hierarchy_attr << "\"";
    }
    
    
    if (m_has_level_attr)
    {
        _outStream << " " << "level" << "=\"" << m_level_attr << "\"";
    }
    
    
    if (m_has_databaseField_attr)
    {
        _outStream << " " << "databaseField" << "=\"" << XSD::XMLBooleanStr(m_databaseField_attr) << "\"";
    }
    
    
    if (m_has_mappingCount_attr)
    {
        _outStream << " " << "mappingCount" << "=\"" << m_mappingCount_attr << "\"";
    }
    
    
    if (m_has_memberPropertyField_attr)
    {
        _outStream << " " << "memberPropertyField" << "=\"" << XSD::XMLBooleanStr(m_memberPropertyField_attr) << "\"";
    }
    
            _outStream << ">";
            
    if (m_has_sharedItems)
    {
        m_sharedItems->toXmlElem("main:sharedItems", "", _outStream);;
    }
    
    if (m_has_fieldGroup)
    {
        m_fieldGroup->toXmlElem("main:fieldGroup", "", _outStream);;
    }
     
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_mpMap())
            {
                (*iter)->get_mpMap().toXmlElem("main:mpMap", "", _outStream);
            }
            else if ((*iter)->has_extLst())
            {
                (*iter)->get_extLst().toXmlElem("main:extLst", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_CacheField& CT_CacheField::default_instance()
    {    
    if (!CT_CacheField::default_instance_)
    {
        CT_CacheField::default_instance_ = new CT_CacheField();
    }
    return *CT_CacheField::default_instance_;
    }

    bool CT_CacheField::has_name_attr() const
    {    
    return m_has_name_attr;
    }

    void CT_CacheField::set_name_attr(const ns_s::ST_Xstring& _name_attr)
    {    
    m_has_name_attr = true;
    m_name_attr = new ns_s::ST_Xstring(_name_attr);
    }

    const ns_s::ST_Xstring& CT_CacheField::get_name_attr() const
    {    
    if (m_name_attr)
    {
        return *m_name_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_CacheField::has_caption_attr() const
    {    
    return m_has_caption_attr;
    }

    void CT_CacheField::set_caption_attr(const ns_s::ST_Xstring& _caption_attr)
    {    
    m_has_caption_attr = true;
    m_caption_attr = new ns_s::ST_Xstring(_caption_attr);
    }

    const ns_s::ST_Xstring& CT_CacheField::get_caption_attr() const
    {    
    if (m_caption_attr)
    {
        return *m_caption_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_CacheField::has_propertyName_attr() const
    {    
    return m_has_propertyName_attr;
    }

    void CT_CacheField::set_propertyName_attr(const ns_s::ST_Xstring& _propertyName_attr)
    {    
    m_has_propertyName_attr = true;
    m_propertyName_attr = new ns_s::ST_Xstring(_propertyName_attr);
    }

    const ns_s::ST_Xstring& CT_CacheField::get_propertyName_attr() const
    {    
    if (m_propertyName_attr)
    {
        return *m_propertyName_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_CacheField::has_serverField_attr() const
    {    
    return m_has_serverField_attr;
    }

    void CT_CacheField::set_serverField_attr(const XSD::boolean_& _serverField_attr)
    {    
    m_has_serverField_attr = true;
    m_serverField_attr = _serverField_attr;
    }

    const XSD::boolean_& CT_CacheField::get_serverField_attr() const
    {    
    return m_serverField_attr;
    }

    bool CT_CacheField::has_uniqueList_attr() const
    {    
    return m_has_uniqueList_attr;
    }

    void CT_CacheField::set_uniqueList_attr(const XSD::boolean_& _uniqueList_attr)
    {    
    m_has_uniqueList_attr = true;
    m_uniqueList_attr = _uniqueList_attr;
    }

    const XSD::boolean_& CT_CacheField::get_uniqueList_attr() const
    {    
    return m_uniqueList_attr;
    }

    bool CT_CacheField::has_numFmtId_attr() const
    {    
    return m_has_numFmtId_attr;
    }

    void CT_CacheField::set_numFmtId_attr(const ST_NumFmtId& _numFmtId_attr)
    {    
    m_has_numFmtId_attr = true;
    m_numFmtId_attr = new ST_NumFmtId(_numFmtId_attr);
    }

    const ST_NumFmtId& CT_CacheField::get_numFmtId_attr() const
    {    
    if (m_numFmtId_attr)
    {
        return *m_numFmtId_attr;
    }
    return ST_NumFmtId::default_instance();
    }

    bool CT_CacheField::has_formula_attr() const
    {    
    return m_has_formula_attr;
    }

    void CT_CacheField::set_formula_attr(const ns_s::ST_Xstring& _formula_attr)
    {    
    m_has_formula_attr = true;
    m_formula_attr = new ns_s::ST_Xstring(_formula_attr);
    }

    const ns_s::ST_Xstring& CT_CacheField::get_formula_attr() const
    {    
    if (m_formula_attr)
    {
        return *m_formula_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_CacheField::has_sqlType_attr() const
    {    
    return m_has_sqlType_attr;
    }

    void CT_CacheField::set_sqlType_attr(const XSD::int_& _sqlType_attr)
    {    
    m_has_sqlType_attr = true;
    m_sqlType_attr = _sqlType_attr;
    }

    const XSD::int_& CT_CacheField::get_sqlType_attr() const
    {    
    return m_sqlType_attr;
    }

    bool CT_CacheField::has_hierarchy_attr() const
    {    
    return m_has_hierarchy_attr;
    }

    void CT_CacheField::set_hierarchy_attr(const XSD::int_& _hierarchy_attr)
    {    
    m_has_hierarchy_attr = true;
    m_hierarchy_attr = _hierarchy_attr;
    }

    const XSD::int_& CT_CacheField::get_hierarchy_attr() const
    {    
    return m_hierarchy_attr;
    }

    bool CT_CacheField::has_level_attr() const
    {    
    return m_has_level_attr;
    }

    void CT_CacheField::set_level_attr(const XSD::unsignedInt_& _level_attr)
    {    
    m_has_level_attr = true;
    m_level_attr = _level_attr;
    }

    const XSD::unsignedInt_& CT_CacheField::get_level_attr() const
    {    
    return m_level_attr;
    }

    bool CT_CacheField::has_databaseField_attr() const
    {    
    return m_has_databaseField_attr;
    }

    void CT_CacheField::set_databaseField_attr(const XSD::boolean_& _databaseField_attr)
    {    
    m_has_databaseField_attr = true;
    m_databaseField_attr = _databaseField_attr;
    }

    const XSD::boolean_& CT_CacheField::get_databaseField_attr() const
    {    
    return m_databaseField_attr;
    }

    bool CT_CacheField::has_mappingCount_attr() const
    {    
    return m_has_mappingCount_attr;
    }

    void CT_CacheField::set_mappingCount_attr(const XSD::unsignedInt_& _mappingCount_attr)
    {    
    m_has_mappingCount_attr = true;
    m_mappingCount_attr = _mappingCount_attr;
    }

    const XSD::unsignedInt_& CT_CacheField::get_mappingCount_attr() const
    {    
    return m_mappingCount_attr;
    }

    bool CT_CacheField::has_memberPropertyField_attr() const
    {    
    return m_has_memberPropertyField_attr;
    }

    void CT_CacheField::set_memberPropertyField_attr(const XSD::boolean_& _memberPropertyField_attr)
    {    
    m_has_memberPropertyField_attr = true;
    m_memberPropertyField_attr = _memberPropertyField_attr;
    }

    const XSD::boolean_& CT_CacheField::get_memberPropertyField_attr() const
    {    
    return m_memberPropertyField_attr;
    }


    // CT_CacheField::ChildGroup_1
    CT_CacheField::ChildGroup_1::ChildGroup_1()
    :m_has_mpMap(false),
    m_mpMap(NULL),
    m_has_extLst(false),
    m_extLst(NULL)
    {
    }
    bool CT_CacheField::ChildGroup_1::has_mpMap() const
    {    
    return m_has_mpMap;
    }

    CT_X* CT_CacheField::ChildGroup_1::mutable_mpMap()
    {    
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_mpMap = true;
    if (!m_mpMap)
    {
        m_mpMap = new CT_X();
    }
    return m_mpMap;
    }

    const CT_X& CT_CacheField::ChildGroup_1::get_mpMap() const
    {    
    if (m_mpMap)
    {
        return *m_mpMap;
    }
    return CT_X::default_instance();
    }

    bool CT_CacheField::ChildGroup_1::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* CT_CacheField::ChildGroup_1::mutable_extLst()
    {    
    
    m_has_mpMap = false;
    
    if (m_mpMap)
    {
        delete m_mpMap;
        m_mpMap = NULL;
    }
    ;
    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& CT_CacheField::ChildGroup_1::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

CT_CacheField* CT_CacheField::default_instance_ = NULL;

    // CT_CacheSource
    CT_CacheSource::CT_CacheSource()
    :m_has_worksheetSource(false),
    m_worksheetSource(NULL),
    m_has_consolidation(false),
    m_consolidation(NULL),
    m_has_extLst(false),
    m_extLst(NULL),
    m_has_type_attr(false),
    m_type_attr(NULL),
    m_has_connectionId_attr(false),
    m_connectionId_attr(0)
    {
    }
    CT_CacheSource::~CT_CacheSource()
{
    clear();    }
    bool CT_CacheSource::has_worksheetSource() const
    {    
    return m_has_worksheetSource;
    }

    CT_WorksheetSource* CT_CacheSource::mutable_worksheetSource()
    {    
    
    m_has_consolidation = false;
    
    if (m_consolidation)
    {
        delete m_consolidation;
        m_consolidation = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_worksheetSource = true;
    if (!m_worksheetSource)
    {
        m_worksheetSource = new CT_WorksheetSource();
    }
    return m_worksheetSource;
    }

    const CT_WorksheetSource& CT_CacheSource::get_worksheetSource() const
    {    
    if (m_worksheetSource)
    {
        return *m_worksheetSource;
    }
    return CT_WorksheetSource::default_instance();
    }

    bool CT_CacheSource::has_consolidation() const
    {    
    return m_has_consolidation;
    }

    CT_Consolidation* CT_CacheSource::mutable_consolidation()
    {    
    
    m_has_worksheetSource = false;
    
    if (m_worksheetSource)
    {
        delete m_worksheetSource;
        m_worksheetSource = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_consolidation = true;
    if (!m_consolidation)
    {
        m_consolidation = new CT_Consolidation();
    }
    return m_consolidation;
    }

    const CT_Consolidation& CT_CacheSource::get_consolidation() const
    {    
    if (m_consolidation)
    {
        return *m_consolidation;
    }
    return CT_Consolidation::default_instance();
    }

    bool CT_CacheSource::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* CT_CacheSource::mutable_extLst()
    {    
    
    m_has_worksheetSource = false;
    
    if (m_worksheetSource)
    {
        delete m_worksheetSource;
        m_worksheetSource = NULL;
    }
    ;
    
    m_has_consolidation = false;
    
    if (m_consolidation)
    {
        delete m_consolidation;
        m_consolidation = NULL;
    }
    ;
    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& CT_CacheSource::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

    void CT_CacheSource::clear()
    {    
    m_has_type_attr = false;
    
    if (m_type_attr)
    {
        delete m_type_attr;
        m_type_attr = NULL;
    }
    
    
    m_has_connectionId_attr = false;
    m_connectionId_attr = 0;
    }

    void CT_CacheSource::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_type_attr)
    {
        m_type_attr->toXmlAttr("type", _outStream);
    }
    
    
    if (m_has_connectionId_attr)
    {
        _outStream << " " << "connectionId" << "=\"" << m_connectionId_attr << "\"";
    }
    
            _outStream << ">";
            
    if (m_has_worksheetSource)
    {
        m_worksheetSource->toXmlElem("main:worksheetSource", "", _outStream);;
    }
    
    if (m_has_consolidation)
    {
        m_consolidation->toXmlElem("main:consolidation", "", _outStream);;
    }
    
    if (m_has_extLst)
    {
        m_extLst->toXmlElem("main:extLst", "", _outStream);;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_CacheSource& CT_CacheSource::default_instance()
    {    
    if (!CT_CacheSource::default_instance_)
    {
        CT_CacheSource::default_instance_ = new CT_CacheSource();
    }
    return *CT_CacheSource::default_instance_;
    }

    bool CT_CacheSource::has_type_attr() const
    {    
    return m_has_type_attr;
    }

    void CT_CacheSource::set_type_attr(const ST_SourceType& _type_attr)
    {    
    m_has_type_attr = true;
    m_type_attr = new ST_SourceType(_type_attr);
    }

    const ST_SourceType& CT_CacheSource::get_type_attr() const
    {    
    if (m_type_attr)
    {
        return *m_type_attr;
    }
    return ST_SourceType::default_instance();
    }

    bool CT_CacheSource::has_connectionId_attr() const
    {    
    return m_has_connectionId_attr;
    }

    void CT_CacheSource::set_connectionId_attr(const XSD::unsignedInt_& _connectionId_attr)
    {    
    m_has_connectionId_attr = true;
    m_connectionId_attr = _connectionId_attr;
    }

    const XSD::unsignedInt_& CT_CacheSource::get_connectionId_attr() const
    {    
    return m_connectionId_attr;
    }

CT_CacheSource* CT_CacheSource::default_instance_ = NULL;

    // CT_WorksheetSource
    CT_WorksheetSource::CT_WorksheetSource()
    :m_has_ref_attr(false),
    m_ref_attr(NULL),
    m_has_name_attr(false),
    m_name_attr(NULL),
    m_has_sheet_attr(false),
    m_sheet_attr(NULL),
    m_has_r_id_attr(false),
    m_r_id_attr(NULL)
    {
    }
    CT_WorksheetSource::~CT_WorksheetSource()
{
    clear();    }
    void CT_WorksheetSource::clear()
    {    
    m_has_ref_attr = false;
    
    if (m_ref_attr)
    {
        delete m_ref_attr;
        m_ref_attr = NULL;
    }
    
    
    m_has_name_attr = false;
    
    if (m_name_attr)
    {
        delete m_name_attr;
        m_name_attr = NULL;
    }
    
    
    m_has_sheet_attr = false;
    
    if (m_sheet_attr)
    {
        delete m_sheet_attr;
        m_sheet_attr = NULL;
    }
    
    
    m_has_r_id_attr = false;
    
    if (m_r_id_attr)
    {
        delete m_r_id_attr;
        m_r_id_attr = NULL;
    }
    
    }

    void CT_WorksheetSource::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_ref_attr)
    {
        m_ref_attr->toXmlAttr("ref", _outStream);
    }
    
    
    if (m_has_name_attr)
    {
        m_name_attr->toXmlAttr("name", _outStream);
    }
    
    
    if (m_has_sheet_attr)
    {
        m_sheet_attr->toXmlAttr("sheet", _outStream);
    }
    
    
    if (m_has_r_id_attr)
    {
        m_r_id_attr->toXmlAttr("r:id", _outStream);
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_WorksheetSource& CT_WorksheetSource::default_instance()
    {    
    if (!CT_WorksheetSource::default_instance_)
    {
        CT_WorksheetSource::default_instance_ = new CT_WorksheetSource();
    }
    return *CT_WorksheetSource::default_instance_;
    }

    bool CT_WorksheetSource::has_ref_attr() const
    {    
    return m_has_ref_attr;
    }

    void CT_WorksheetSource::set_ref_attr(const ST_Ref& _ref_attr)
    {    
    m_has_ref_attr = true;
    m_ref_attr = new ST_Ref(_ref_attr);
    }

    const ST_Ref& CT_WorksheetSource::get_ref_attr() const
    {    
    if (m_ref_attr)
    {
        return *m_ref_attr;
    }
    return ST_Ref::default_instance();
    }

    bool CT_WorksheetSource::has_name_attr() const
    {    
    return m_has_name_attr;
    }

    void CT_WorksheetSource::set_name_attr(const ns_s::ST_Xstring& _name_attr)
    {    
    m_has_name_attr = true;
    m_name_attr = new ns_s::ST_Xstring(_name_attr);
    }

    const ns_s::ST_Xstring& CT_WorksheetSource::get_name_attr() const
    {    
    if (m_name_attr)
    {
        return *m_name_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_WorksheetSource::has_sheet_attr() const
    {    
    return m_has_sheet_attr;
    }

    void CT_WorksheetSource::set_sheet_attr(const ns_s::ST_Xstring& _sheet_attr)
    {    
    m_has_sheet_attr = true;
    m_sheet_attr = new ns_s::ST_Xstring(_sheet_attr);
    }

    const ns_s::ST_Xstring& CT_WorksheetSource::get_sheet_attr() const
    {    
    if (m_sheet_attr)
    {
        return *m_sheet_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_WorksheetSource::has_r_id_attr() const
    {    
    return m_has_r_id_attr;
    }

    void CT_WorksheetSource::set_r_id_attr(const ns_r::ST_RelationshipId& _r_id_attr)
    {    
    m_has_r_id_attr = true;
    m_r_id_attr = new ns_r::ST_RelationshipId(_r_id_attr);
    }

    const ns_r::ST_RelationshipId& CT_WorksheetSource::get_r_id_attr() const
    {    
    if (m_r_id_attr)
    {
        return *m_r_id_attr;
    }
    return ns_r::ST_RelationshipId::default_instance();
    }

CT_WorksheetSource* CT_WorksheetSource::default_instance_ = NULL;

    // CT_Consolidation
    CT_Consolidation::CT_Consolidation()
    :m_has_pages(false),
    m_pages(NULL),
    m_has_rangeSets(false),
    m_rangeSets(NULL),
    m_has_autoPage_attr(false),
    m_autoPage_attr(false)
    {
    }
    CT_Consolidation::~CT_Consolidation()
{
    clear();    }
    bool CT_Consolidation::has_pages() const
    {    
    return m_has_pages;
    }

    CT_Pages* CT_Consolidation::mutable_pages()
    {    
    m_has_pages = true;
    if (!m_pages)
    {
        m_pages = new CT_Pages();
    }
    return m_pages;
    }

    const CT_Pages& CT_Consolidation::get_pages() const
    {    
    if (m_pages)
    {
        return *m_pages;
    }
    return CT_Pages::default_instance();
    }

    bool CT_Consolidation::has_rangeSets() const
    {    
    return m_has_rangeSets;
    }

    CT_RangeSets* CT_Consolidation::mutable_rangeSets()
    {    
    m_has_rangeSets = true;
    if (!m_rangeSets)
    {
        m_rangeSets = new CT_RangeSets();
    }
    return m_rangeSets;
    }

    const CT_RangeSets& CT_Consolidation::get_rangeSets() const
    {    
    if (m_rangeSets)
    {
        return *m_rangeSets;
    }
    return CT_RangeSets::default_instance();
    }

    void CT_Consolidation::clear()
    {    
    m_has_autoPage_attr = false;
    m_autoPage_attr = false;
    }

    void CT_Consolidation::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_autoPage_attr)
    {
        _outStream << " " << "autoPage" << "=\"" << XSD::XMLBooleanStr(m_autoPage_attr) << "\"";
    }
    
            _outStream << ">";
            
    if (m_has_pages)
    {
        m_pages->toXmlElem("main:pages", "", _outStream);;
    }
    
    if (m_has_rangeSets)
    {
        m_rangeSets->toXmlElem("main:rangeSets", "", _outStream);;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_Consolidation& CT_Consolidation::default_instance()
    {    
    if (!CT_Consolidation::default_instance_)
    {
        CT_Consolidation::default_instance_ = new CT_Consolidation();
    }
    return *CT_Consolidation::default_instance_;
    }

    bool CT_Consolidation::has_autoPage_attr() const
    {    
    return m_has_autoPage_attr;
    }

    void CT_Consolidation::set_autoPage_attr(const XSD::boolean_& _autoPage_attr)
    {    
    m_has_autoPage_attr = true;
    m_autoPage_attr = _autoPage_attr;
    }

    const XSD::boolean_& CT_Consolidation::get_autoPage_attr() const
    {    
    return m_autoPage_attr;
    }

CT_Consolidation* CT_Consolidation::default_instance_ = NULL;

    // CT_Pages
    CT_Pages::CT_Pages()
    :m_has_count_attr(false),
    m_count_attr(0)
    {
    }
    CT_Pages::~CT_Pages()
{
    clear();    }
    CT_PCDSCPage* CT_Pages::add_page()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_PCDSCPage* pNewChild = pChildGroup->mutable_page();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_Pages::clear()
    {    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_Pages::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_page())
            {
                (*iter)->get_page().toXmlElem("main:page", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_Pages& CT_Pages::default_instance()
    {    
    if (!CT_Pages::default_instance_)
    {
        CT_Pages::default_instance_ = new CT_Pages();
    }
    return *CT_Pages::default_instance_;
    }

    bool CT_Pages::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void CT_Pages::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& CT_Pages::get_count_attr() const
    {    
    return m_count_attr;
    }


    // CT_Pages::ChildGroup_1
    CT_Pages::ChildGroup_1::ChildGroup_1()
    :m_has_page(false),
    m_page(NULL)
    {
    }
    bool CT_Pages::ChildGroup_1::has_page() const
    {    
    return m_has_page;
    }

    CT_PCDSCPage* CT_Pages::ChildGroup_1::mutable_page()
    {    
    
    m_has_page = true;
    if (!m_page)
    {
        m_page = new CT_PCDSCPage();
    }
    return m_page;
    }

    const CT_PCDSCPage& CT_Pages::ChildGroup_1::get_page() const
    {    
    if (m_page)
    {
        return *m_page;
    }
    return CT_PCDSCPage::default_instance();
    }

CT_Pages* CT_Pages::default_instance_ = NULL;

    // CT_PCDSCPage
    CT_PCDSCPage::CT_PCDSCPage()
    :m_has_count_attr(false),
    m_count_attr(0)
    {
    }
    CT_PCDSCPage::~CT_PCDSCPage()
{
    clear();    }
    CT_PageItem* CT_PCDSCPage::add_pageItem()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_PageItem* pNewChild = pChildGroup->mutable_pageItem();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_PCDSCPage::clear()
    {    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_PCDSCPage::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_pageItem())
            {
                (*iter)->get_pageItem().toXmlElem("main:pageItem", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_PCDSCPage& CT_PCDSCPage::default_instance()
    {    
    if (!CT_PCDSCPage::default_instance_)
    {
        CT_PCDSCPage::default_instance_ = new CT_PCDSCPage();
    }
    return *CT_PCDSCPage::default_instance_;
    }

    bool CT_PCDSCPage::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void CT_PCDSCPage::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& CT_PCDSCPage::get_count_attr() const
    {    
    return m_count_attr;
    }


    // CT_PCDSCPage::ChildGroup_1
    CT_PCDSCPage::ChildGroup_1::ChildGroup_1()
    :m_has_pageItem(false),
    m_pageItem(NULL)
    {
    }
    bool CT_PCDSCPage::ChildGroup_1::has_pageItem() const
    {    
    return m_has_pageItem;
    }

    CT_PageItem* CT_PCDSCPage::ChildGroup_1::mutable_pageItem()
    {    
    
    m_has_pageItem = true;
    if (!m_pageItem)
    {
        m_pageItem = new CT_PageItem();
    }
    return m_pageItem;
    }

    const CT_PageItem& CT_PCDSCPage::ChildGroup_1::get_pageItem() const
    {    
    if (m_pageItem)
    {
        return *m_pageItem;
    }
    return CT_PageItem::default_instance();
    }

CT_PCDSCPage* CT_PCDSCPage::default_instance_ = NULL;

    // CT_PageItem
    CT_PageItem::CT_PageItem()
    :m_has_name_attr(false),
    m_name_attr(NULL)
    {
    }
    CT_PageItem::~CT_PageItem()
{
    clear();    }
    void CT_PageItem::clear()
    {    
    m_has_name_attr = false;
    
    if (m_name_attr)
    {
        delete m_name_attr;
        m_name_attr = NULL;
    }
    
    }

    void CT_PageItem::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_name_attr)
    {
        m_name_attr->toXmlAttr("name", _outStream);
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_PageItem& CT_PageItem::default_instance()
    {    
    if (!CT_PageItem::default_instance_)
    {
        CT_PageItem::default_instance_ = new CT_PageItem();
    }
    return *CT_PageItem::default_instance_;
    }

    bool CT_PageItem::has_name_attr() const
    {    
    return m_has_name_attr;
    }

    void CT_PageItem::set_name_attr(const ns_s::ST_Xstring& _name_attr)
    {    
    m_has_name_attr = true;
    m_name_attr = new ns_s::ST_Xstring(_name_attr);
    }

    const ns_s::ST_Xstring& CT_PageItem::get_name_attr() const
    {    
    if (m_name_attr)
    {
        return *m_name_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

CT_PageItem* CT_PageItem::default_instance_ = NULL;

    // CT_RangeSets
    CT_RangeSets::CT_RangeSets()
    :m_has_count_attr(false),
    m_count_attr(0)
    {
    }
    CT_RangeSets::~CT_RangeSets()
{
    clear();    }
    CT_RangeSet* CT_RangeSets::add_rangeSet()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_RangeSet* pNewChild = pChildGroup->mutable_rangeSet();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_RangeSets::clear()
    {    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_RangeSets::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_rangeSet())
            {
                (*iter)->get_rangeSet().toXmlElem("main:rangeSet", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_RangeSets& CT_RangeSets::default_instance()
    {    
    if (!CT_RangeSets::default_instance_)
    {
        CT_RangeSets::default_instance_ = new CT_RangeSets();
    }
    return *CT_RangeSets::default_instance_;
    }

    bool CT_RangeSets::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void CT_RangeSets::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& CT_RangeSets::get_count_attr() const
    {    
    return m_count_attr;
    }


    // CT_RangeSets::ChildGroup_1
    CT_RangeSets::ChildGroup_1::ChildGroup_1()
    :m_has_rangeSet(false),
    m_rangeSet(NULL)
    {
    }
    bool CT_RangeSets::ChildGroup_1::has_rangeSet() const
    {    
    return m_has_rangeSet;
    }

    CT_RangeSet* CT_RangeSets::ChildGroup_1::mutable_rangeSet()
    {    
    
    m_has_rangeSet = true;
    if (!m_rangeSet)
    {
        m_rangeSet = new CT_RangeSet();
    }
    return m_rangeSet;
    }

    const CT_RangeSet& CT_RangeSets::ChildGroup_1::get_rangeSet() const
    {    
    if (m_rangeSet)
    {
        return *m_rangeSet;
    }
    return CT_RangeSet::default_instance();
    }

CT_RangeSets* CT_RangeSets::default_instance_ = NULL;

    // CT_RangeSet
    CT_RangeSet::CT_RangeSet()
    :m_has_i1_attr(false),
    m_i1_attr(0),
    m_has_i2_attr(false),
    m_i2_attr(0),
    m_has_i3_attr(false),
    m_i3_attr(0),
    m_has_i4_attr(false),
    m_i4_attr(0),
    m_has_ref_attr(false),
    m_ref_attr(NULL),
    m_has_name_attr(false),
    m_name_attr(NULL),
    m_has_sheet_attr(false),
    m_sheet_attr(NULL),
    m_has_r_id_attr(false),
    m_r_id_attr(NULL)
    {
    }
    CT_RangeSet::~CT_RangeSet()
{
    clear();    }
    void CT_RangeSet::clear()
    {    
    m_has_i1_attr = false;
    m_i1_attr = 0;
    
    m_has_i2_attr = false;
    m_i2_attr = 0;
    
    m_has_i3_attr = false;
    m_i3_attr = 0;
    
    m_has_i4_attr = false;
    m_i4_attr = 0;
    
    m_has_ref_attr = false;
    
    if (m_ref_attr)
    {
        delete m_ref_attr;
        m_ref_attr = NULL;
    }
    
    
    m_has_name_attr = false;
    
    if (m_name_attr)
    {
        delete m_name_attr;
        m_name_attr = NULL;
    }
    
    
    m_has_sheet_attr = false;
    
    if (m_sheet_attr)
    {
        delete m_sheet_attr;
        m_sheet_attr = NULL;
    }
    
    
    m_has_r_id_attr = false;
    
    if (m_r_id_attr)
    {
        delete m_r_id_attr;
        m_r_id_attr = NULL;
    }
    
    }

    void CT_RangeSet::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_i1_attr)
    {
        _outStream << " " << "i1" << "=\"" << m_i1_attr << "\"";
    }
    
    
    if (m_has_i2_attr)
    {
        _outStream << " " << "i2" << "=\"" << m_i2_attr << "\"";
    }
    
    
    if (m_has_i3_attr)
    {
        _outStream << " " << "i3" << "=\"" << m_i3_attr << "\"";
    }
    
    
    if (m_has_i4_attr)
    {
        _outStream << " " << "i4" << "=\"" << m_i4_attr << "\"";
    }
    
    
    if (m_has_ref_attr)
    {
        m_ref_attr->toXmlAttr("ref", _outStream);
    }
    
    
    if (m_has_name_attr)
    {
        m_name_attr->toXmlAttr("name", _outStream);
    }
    
    
    if (m_has_sheet_attr)
    {
        m_sheet_attr->toXmlAttr("sheet", _outStream);
    }
    
    
    if (m_has_r_id_attr)
    {
        m_r_id_attr->toXmlAttr("r:id", _outStream);
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_RangeSet& CT_RangeSet::default_instance()
    {    
    if (!CT_RangeSet::default_instance_)
    {
        CT_RangeSet::default_instance_ = new CT_RangeSet();
    }
    return *CT_RangeSet::default_instance_;
    }

    bool CT_RangeSet::has_i1_attr() const
    {    
    return m_has_i1_attr;
    }

    void CT_RangeSet::set_i1_attr(const XSD::unsignedInt_& _i1_attr)
    {    
    m_has_i1_attr = true;
    m_i1_attr = _i1_attr;
    }

    const XSD::unsignedInt_& CT_RangeSet::get_i1_attr() const
    {    
    return m_i1_attr;
    }

    bool CT_RangeSet::has_i2_attr() const
    {    
    return m_has_i2_attr;
    }

    void CT_RangeSet::set_i2_attr(const XSD::unsignedInt_& _i2_attr)
    {    
    m_has_i2_attr = true;
    m_i2_attr = _i2_attr;
    }

    const XSD::unsignedInt_& CT_RangeSet::get_i2_attr() const
    {    
    return m_i2_attr;
    }

    bool CT_RangeSet::has_i3_attr() const
    {    
    return m_has_i3_attr;
    }

    void CT_RangeSet::set_i3_attr(const XSD::unsignedInt_& _i3_attr)
    {    
    m_has_i3_attr = true;
    m_i3_attr = _i3_attr;
    }

    const XSD::unsignedInt_& CT_RangeSet::get_i3_attr() const
    {    
    return m_i3_attr;
    }

    bool CT_RangeSet::has_i4_attr() const
    {    
    return m_has_i4_attr;
    }

    void CT_RangeSet::set_i4_attr(const XSD::unsignedInt_& _i4_attr)
    {    
    m_has_i4_attr = true;
    m_i4_attr = _i4_attr;
    }

    const XSD::unsignedInt_& CT_RangeSet::get_i4_attr() const
    {    
    return m_i4_attr;
    }

    bool CT_RangeSet::has_ref_attr() const
    {    
    return m_has_ref_attr;
    }

    void CT_RangeSet::set_ref_attr(const ST_Ref& _ref_attr)
    {    
    m_has_ref_attr = true;
    m_ref_attr = new ST_Ref(_ref_attr);
    }

    const ST_Ref& CT_RangeSet::get_ref_attr() const
    {    
    if (m_ref_attr)
    {
        return *m_ref_attr;
    }
    return ST_Ref::default_instance();
    }

    bool CT_RangeSet::has_name_attr() const
    {    
    return m_has_name_attr;
    }

    void CT_RangeSet::set_name_attr(const ns_s::ST_Xstring& _name_attr)
    {    
    m_has_name_attr = true;
    m_name_attr = new ns_s::ST_Xstring(_name_attr);
    }

    const ns_s::ST_Xstring& CT_RangeSet::get_name_attr() const
    {    
    if (m_name_attr)
    {
        return *m_name_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_RangeSet::has_sheet_attr() const
    {    
    return m_has_sheet_attr;
    }

    void CT_RangeSet::set_sheet_attr(const ns_s::ST_Xstring& _sheet_attr)
    {    
    m_has_sheet_attr = true;
    m_sheet_attr = new ns_s::ST_Xstring(_sheet_attr);
    }

    const ns_s::ST_Xstring& CT_RangeSet::get_sheet_attr() const
    {    
    if (m_sheet_attr)
    {
        return *m_sheet_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_RangeSet::has_r_id_attr() const
    {    
    return m_has_r_id_attr;
    }

    void CT_RangeSet::set_r_id_attr(const ns_r::ST_RelationshipId& _r_id_attr)
    {    
    m_has_r_id_attr = true;
    m_r_id_attr = new ns_r::ST_RelationshipId(_r_id_attr);
    }

    const ns_r::ST_RelationshipId& CT_RangeSet::get_r_id_attr() const
    {    
    if (m_r_id_attr)
    {
        return *m_r_id_attr;
    }
    return ns_r::ST_RelationshipId::default_instance();
    }

CT_RangeSet* CT_RangeSet::default_instance_ = NULL;

    // CT_SharedItems
    CT_SharedItems::CT_SharedItems()
    :m_has_containsSemiMixedTypes_attr(false),
    m_containsSemiMixedTypes_attr(false),
    m_has_containsNonDate_attr(false),
    m_containsNonDate_attr(false),
    m_has_containsDate_attr(false),
    m_containsDate_attr(false),
    m_has_containsString_attr(false),
    m_containsString_attr(false),
    m_has_containsBlank_attr(false),
    m_containsBlank_attr(false),
    m_has_containsMixedTypes_attr(false),
    m_containsMixedTypes_attr(false),
    m_has_containsNumber_attr(false),
    m_containsNumber_attr(false),
    m_has_containsInteger_attr(false),
    m_containsInteger_attr(false),
    m_has_minValue_attr(false),
    m_minValue_attr(0),
    m_has_maxValue_attr(false),
    m_maxValue_attr(0),
    m_has_minDate_attr(false),
    m_minDate_attr(""),
    m_has_maxDate_attr(false),
    m_maxDate_attr(""),
    m_has_count_attr(false),
    m_count_attr(0),
    m_has_longText_attr(false),
    m_longText_attr(false)
    {
    }
    CT_SharedItems::~CT_SharedItems()
{
    clear();    }
    CT_Missing* CT_SharedItems::add_m()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Missing* pNewChild = pChildGroup->mutable_m();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_Number* CT_SharedItems::add_n()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Number* pNewChild = pChildGroup->mutable_n();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_Boolean* CT_SharedItems::add_b()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Boolean* pNewChild = pChildGroup->mutable_b();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_Error* CT_SharedItems::add_e()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Error* pNewChild = pChildGroup->mutable_e();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_String* CT_SharedItems::add_s()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_String* pNewChild = pChildGroup->mutable_s();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_DateTime* CT_SharedItems::add_d()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_DateTime* pNewChild = pChildGroup->mutable_d();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_SharedItems::clear()
    {    
    m_has_containsSemiMixedTypes_attr = false;
    m_containsSemiMixedTypes_attr = false;
    
    m_has_containsNonDate_attr = false;
    m_containsNonDate_attr = false;
    
    m_has_containsDate_attr = false;
    m_containsDate_attr = false;
    
    m_has_containsString_attr = false;
    m_containsString_attr = false;
    
    m_has_containsBlank_attr = false;
    m_containsBlank_attr = false;
    
    m_has_containsMixedTypes_attr = false;
    m_containsMixedTypes_attr = false;
    
    m_has_containsNumber_attr = false;
    m_containsNumber_attr = false;
    
    m_has_containsInteger_attr = false;
    m_containsInteger_attr = false;
    
    m_has_minValue_attr = false;
    m_minValue_attr = 0;
    
    m_has_maxValue_attr = false;
    m_maxValue_attr = 0;
    
    m_has_minDate_attr = false;
    m_minDate_attr.clear();
    
    m_has_maxDate_attr = false;
    m_maxDate_attr.clear();
    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    m_has_longText_attr = false;
    m_longText_attr = false;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_SharedItems::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_containsSemiMixedTypes_attr)
    {
        _outStream << " " << "containsSemiMixedTypes" << "=\"" << XSD::XMLBooleanStr(m_containsSemiMixedTypes_attr) << "\"";
    }
    
    
    if (m_has_containsNonDate_attr)
    {
        _outStream << " " << "containsNonDate" << "=\"" << XSD::XMLBooleanStr(m_containsNonDate_attr) << "\"";
    }
    
    
    if (m_has_containsDate_attr)
    {
        _outStream << " " << "containsDate" << "=\"" << XSD::XMLBooleanStr(m_containsDate_attr) << "\"";
    }
    
    
    if (m_has_containsString_attr)
    {
        _outStream << " " << "containsString" << "=\"" << XSD::XMLBooleanStr(m_containsString_attr) << "\"";
    }
    
    
    if (m_has_containsBlank_attr)
    {
        _outStream << " " << "containsBlank" << "=\"" << XSD::XMLBooleanStr(m_containsBlank_attr) << "\"";
    }
    
    
    if (m_has_containsMixedTypes_attr)
    {
        _outStream << " " << "containsMixedTypes" << "=\"" << XSD::XMLBooleanStr(m_containsMixedTypes_attr) << "\"";
    }
    
    
    if (m_has_containsNumber_attr)
    {
        _outStream << " " << "containsNumber" << "=\"" << XSD::XMLBooleanStr(m_containsNumber_attr) << "\"";
    }
    
    
    if (m_has_containsInteger_attr)
    {
        _outStream << " " << "containsInteger" << "=\"" << XSD::XMLBooleanStr(m_containsInteger_attr) << "\"";
    }
    
    
    if (m_has_minValue_attr)
    {
        _outStream << " " << "minValue" << "=\"" << m_minValue_attr << "\"";
    }
    
    
    if (m_has_maxValue_attr)
    {
        _outStream << " " << "maxValue" << "=\"" << m_maxValue_attr << "\"";
    }
    
    
    if (m_has_minDate_attr)
    {
        _outStream << " " << "minDate" << "=\"" << m_minDate_attr << "\"";
    }
    
    
    if (m_has_maxDate_attr)
    {
        _outStream << " " << "maxDate" << "=\"" << m_maxDate_attr << "\"";
    }
    
    
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
    
    if (m_has_longText_attr)
    {
        _outStream << " " << "longText" << "=\"" << XSD::XMLBooleanStr(m_longText_attr) << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_m())
            {
                (*iter)->get_m().toXmlElem("main:m", "", _outStream);
            }
            else if ((*iter)->has_n())
            {
                (*iter)->get_n().toXmlElem("main:n", "", _outStream);
            }
            else if ((*iter)->has_b())
            {
                (*iter)->get_b().toXmlElem("main:b", "", _outStream);
            }
            else if ((*iter)->has_e())
            {
                (*iter)->get_e().toXmlElem("main:e", "", _outStream);
            }
            else if ((*iter)->has_s())
            {
                (*iter)->get_s().toXmlElem("main:s", "", _outStream);
            }
            else if ((*iter)->has_d())
            {
                (*iter)->get_d().toXmlElem("main:d", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_SharedItems& CT_SharedItems::default_instance()
    {    
    if (!CT_SharedItems::default_instance_)
    {
        CT_SharedItems::default_instance_ = new CT_SharedItems();
    }
    return *CT_SharedItems::default_instance_;
    }

    bool CT_SharedItems::has_containsSemiMixedTypes_attr() const
    {    
    return m_has_containsSemiMixedTypes_attr;
    }

    void CT_SharedItems::set_containsSemiMixedTypes_attr(const XSD::boolean_& _containsSemiMixedTypes_attr)
    {    
    m_has_containsSemiMixedTypes_attr = true;
    m_containsSemiMixedTypes_attr = _containsSemiMixedTypes_attr;
    }

    const XSD::boolean_& CT_SharedItems::get_containsSemiMixedTypes_attr() const
    {    
    return m_containsSemiMixedTypes_attr;
    }

    bool CT_SharedItems::has_containsNonDate_attr() const
    {    
    return m_has_containsNonDate_attr;
    }

    void CT_SharedItems::set_containsNonDate_attr(const XSD::boolean_& _containsNonDate_attr)
    {    
    m_has_containsNonDate_attr = true;
    m_containsNonDate_attr = _containsNonDate_attr;
    }

    const XSD::boolean_& CT_SharedItems::get_containsNonDate_attr() const
    {    
    return m_containsNonDate_attr;
    }

    bool CT_SharedItems::has_containsDate_attr() const
    {    
    return m_has_containsDate_attr;
    }

    void CT_SharedItems::set_containsDate_attr(const XSD::boolean_& _containsDate_attr)
    {    
    m_has_containsDate_attr = true;
    m_containsDate_attr = _containsDate_attr;
    }

    const XSD::boolean_& CT_SharedItems::get_containsDate_attr() const
    {    
    return m_containsDate_attr;
    }

    bool CT_SharedItems::has_containsString_attr() const
    {    
    return m_has_containsString_attr;
    }

    void CT_SharedItems::set_containsString_attr(const XSD::boolean_& _containsString_attr)
    {    
    m_has_containsString_attr = true;
    m_containsString_attr = _containsString_attr;
    }

    const XSD::boolean_& CT_SharedItems::get_containsString_attr() const
    {    
    return m_containsString_attr;
    }

    bool CT_SharedItems::has_containsBlank_attr() const
    {    
    return m_has_containsBlank_attr;
    }

    void CT_SharedItems::set_containsBlank_attr(const XSD::boolean_& _containsBlank_attr)
    {    
    m_has_containsBlank_attr = true;
    m_containsBlank_attr = _containsBlank_attr;
    }

    const XSD::boolean_& CT_SharedItems::get_containsBlank_attr() const
    {    
    return m_containsBlank_attr;
    }

    bool CT_SharedItems::has_containsMixedTypes_attr() const
    {    
    return m_has_containsMixedTypes_attr;
    }

    void CT_SharedItems::set_containsMixedTypes_attr(const XSD::boolean_& _containsMixedTypes_attr)
    {    
    m_has_containsMixedTypes_attr = true;
    m_containsMixedTypes_attr = _containsMixedTypes_attr;
    }

    const XSD::boolean_& CT_SharedItems::get_containsMixedTypes_attr() const
    {    
    return m_containsMixedTypes_attr;
    }

    bool CT_SharedItems::has_containsNumber_attr() const
    {    
    return m_has_containsNumber_attr;
    }

    void CT_SharedItems::set_containsNumber_attr(const XSD::boolean_& _containsNumber_attr)
    {    
    m_has_containsNumber_attr = true;
    m_containsNumber_attr = _containsNumber_attr;
    }

    const XSD::boolean_& CT_SharedItems::get_containsNumber_attr() const
    {    
    return m_containsNumber_attr;
    }

    bool CT_SharedItems::has_containsInteger_attr() const
    {    
    return m_has_containsInteger_attr;
    }

    void CT_SharedItems::set_containsInteger_attr(const XSD::boolean_& _containsInteger_attr)
    {    
    m_has_containsInteger_attr = true;
    m_containsInteger_attr = _containsInteger_attr;
    }

    const XSD::boolean_& CT_SharedItems::get_containsInteger_attr() const
    {    
    return m_containsInteger_attr;
    }

    bool CT_SharedItems::has_minValue_attr() const
    {    
    return m_has_minValue_attr;
    }

    void CT_SharedItems::set_minValue_attr(const XSD::double_& _minValue_attr)
    {    
    m_has_minValue_attr = true;
    m_minValue_attr = _minValue_attr;
    }

    const XSD::double_& CT_SharedItems::get_minValue_attr() const
    {    
    return m_minValue_attr;
    }

    bool CT_SharedItems::has_maxValue_attr() const
    {    
    return m_has_maxValue_attr;
    }

    void CT_SharedItems::set_maxValue_attr(const XSD::double_& _maxValue_attr)
    {    
    m_has_maxValue_attr = true;
    m_maxValue_attr = _maxValue_attr;
    }

    const XSD::double_& CT_SharedItems::get_maxValue_attr() const
    {    
    return m_maxValue_attr;
    }

    bool CT_SharedItems::has_minDate_attr() const
    {    
    return m_has_minDate_attr;
    }

    void CT_SharedItems::set_minDate_attr(const XSD::dateTime_& _minDate_attr)
    {    
    m_has_minDate_attr = true;
    m_minDate_attr = _minDate_attr;
    }

    const XSD::dateTime_& CT_SharedItems::get_minDate_attr() const
    {    
    return m_minDate_attr;
    }

    bool CT_SharedItems::has_maxDate_attr() const
    {    
    return m_has_maxDate_attr;
    }

    void CT_SharedItems::set_maxDate_attr(const XSD::dateTime_& _maxDate_attr)
    {    
    m_has_maxDate_attr = true;
    m_maxDate_attr = _maxDate_attr;
    }

    const XSD::dateTime_& CT_SharedItems::get_maxDate_attr() const
    {    
    return m_maxDate_attr;
    }

    bool CT_SharedItems::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void CT_SharedItems::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& CT_SharedItems::get_count_attr() const
    {    
    return m_count_attr;
    }

    bool CT_SharedItems::has_longText_attr() const
    {    
    return m_has_longText_attr;
    }

    void CT_SharedItems::set_longText_attr(const XSD::boolean_& _longText_attr)
    {    
    m_has_longText_attr = true;
    m_longText_attr = _longText_attr;
    }

    const XSD::boolean_& CT_SharedItems::get_longText_attr() const
    {    
    return m_longText_attr;
    }


    // CT_SharedItems::ChildGroup_1
    CT_SharedItems::ChildGroup_1::ChildGroup_1()
    :m_has_m(false),
    m_m(NULL),
    m_has_n(false),
    m_n(NULL),
    m_has_b(false),
    m_b(NULL),
    m_has_e(false),
    m_e(NULL),
    m_has_s(false),
    m_s(NULL),
    m_has_d(false),
    m_d(NULL)
    {
    }
    bool CT_SharedItems::ChildGroup_1::has_m() const
    {    
    return m_has_m;
    }

    CT_Missing* CT_SharedItems::ChildGroup_1::mutable_m()
    {    
    
    m_has_n = false;
    
    if (m_n)
    {
        delete m_n;
        m_n = NULL;
    }
    ;
    
    m_has_b = false;
    
    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;
    
    m_has_e = false;
    
    if (m_e)
    {
        delete m_e;
        m_e = NULL;
    }
    ;
    
    m_has_s = false;
    
    if (m_s)
    {
        delete m_s;
        m_s = NULL;
    }
    ;
    
    m_has_d = false;
    
    if (m_d)
    {
        delete m_d;
        m_d = NULL;
    }
    ;
    
    m_has_m = true;
    if (!m_m)
    {
        m_m = new CT_Missing();
    }
    return m_m;
    }

    const CT_Missing& CT_SharedItems::ChildGroup_1::get_m() const
    {    
    if (m_m)
    {
        return *m_m;
    }
    return CT_Missing::default_instance();
    }

    bool CT_SharedItems::ChildGroup_1::has_n() const
    {    
    return m_has_n;
    }

    CT_Number* CT_SharedItems::ChildGroup_1::mutable_n()
    {    
    
    m_has_m = false;
    
    if (m_m)
    {
        delete m_m;
        m_m = NULL;
    }
    ;
    
    m_has_b = false;
    
    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;
    
    m_has_e = false;
    
    if (m_e)
    {
        delete m_e;
        m_e = NULL;
    }
    ;
    
    m_has_s = false;
    
    if (m_s)
    {
        delete m_s;
        m_s = NULL;
    }
    ;
    
    m_has_d = false;
    
    if (m_d)
    {
        delete m_d;
        m_d = NULL;
    }
    ;
    
    m_has_n = true;
    if (!m_n)
    {
        m_n = new CT_Number();
    }
    return m_n;
    }

    const CT_Number& CT_SharedItems::ChildGroup_1::get_n() const
    {    
    if (m_n)
    {
        return *m_n;
    }
    return CT_Number::default_instance();
    }

    bool CT_SharedItems::ChildGroup_1::has_b() const
    {    
    return m_has_b;
    }

    CT_Boolean* CT_SharedItems::ChildGroup_1::mutable_b()
    {    
    
    m_has_m = false;
    
    if (m_m)
    {
        delete m_m;
        m_m = NULL;
    }
    ;
    
    m_has_n = false;
    
    if (m_n)
    {
        delete m_n;
        m_n = NULL;
    }
    ;
    
    m_has_e = false;
    
    if (m_e)
    {
        delete m_e;
        m_e = NULL;
    }
    ;
    
    m_has_s = false;
    
    if (m_s)
    {
        delete m_s;
        m_s = NULL;
    }
    ;
    
    m_has_d = false;
    
    if (m_d)
    {
        delete m_d;
        m_d = NULL;
    }
    ;
    
    m_has_b = true;
    if (!m_b)
    {
        m_b = new CT_Boolean();
    }
    return m_b;
    }

    const CT_Boolean& CT_SharedItems::ChildGroup_1::get_b() const
    {    
    if (m_b)
    {
        return *m_b;
    }
    return CT_Boolean::default_instance();
    }

    bool CT_SharedItems::ChildGroup_1::has_e() const
    {    
    return m_has_e;
    }

    CT_Error* CT_SharedItems::ChildGroup_1::mutable_e()
    {    
    
    m_has_m = false;
    
    if (m_m)
    {
        delete m_m;
        m_m = NULL;
    }
    ;
    
    m_has_n = false;
    
    if (m_n)
    {
        delete m_n;
        m_n = NULL;
    }
    ;
    
    m_has_b = false;
    
    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;
    
    m_has_s = false;
    
    if (m_s)
    {
        delete m_s;
        m_s = NULL;
    }
    ;
    
    m_has_d = false;
    
    if (m_d)
    {
        delete m_d;
        m_d = NULL;
    }
    ;
    
    m_has_e = true;
    if (!m_e)
    {
        m_e = new CT_Error();
    }
    return m_e;
    }

    const CT_Error& CT_SharedItems::ChildGroup_1::get_e() const
    {    
    if (m_e)
    {
        return *m_e;
    }
    return CT_Error::default_instance();
    }

    bool CT_SharedItems::ChildGroup_1::has_s() const
    {    
    return m_has_s;
    }

    CT_String* CT_SharedItems::ChildGroup_1::mutable_s()
    {    
    
    m_has_m = false;
    
    if (m_m)
    {
        delete m_m;
        m_m = NULL;
    }
    ;
    
    m_has_n = false;
    
    if (m_n)
    {
        delete m_n;
        m_n = NULL;
    }
    ;
    
    m_has_b = false;
    
    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;
    
    m_has_e = false;
    
    if (m_e)
    {
        delete m_e;
        m_e = NULL;
    }
    ;
    
    m_has_d = false;
    
    if (m_d)
    {
        delete m_d;
        m_d = NULL;
    }
    ;
    
    m_has_s = true;
    if (!m_s)
    {
        m_s = new CT_String();
    }
    return m_s;
    }

    const CT_String& CT_SharedItems::ChildGroup_1::get_s() const
    {    
    if (m_s)
    {
        return *m_s;
    }
    return CT_String::default_instance();
    }

    bool CT_SharedItems::ChildGroup_1::has_d() const
    {    
    return m_has_d;
    }

    CT_DateTime* CT_SharedItems::ChildGroup_1::mutable_d()
    {    
    
    m_has_m = false;
    
    if (m_m)
    {
        delete m_m;
        m_m = NULL;
    }
    ;
    
    m_has_n = false;
    
    if (m_n)
    {
        delete m_n;
        m_n = NULL;
    }
    ;
    
    m_has_b = false;
    
    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;
    
    m_has_e = false;
    
    if (m_e)
    {
        delete m_e;
        m_e = NULL;
    }
    ;
    
    m_has_s = false;
    
    if (m_s)
    {
        delete m_s;
        m_s = NULL;
    }
    ;
    
    m_has_d = true;
    if (!m_d)
    {
        m_d = new CT_DateTime();
    }
    return m_d;
    }

    const CT_DateTime& CT_SharedItems::ChildGroup_1::get_d() const
    {    
    if (m_d)
    {
        return *m_d;
    }
    return CT_DateTime::default_instance();
    }

CT_SharedItems* CT_SharedItems::default_instance_ = NULL;

    // CT_Missing
    CT_Missing::CT_Missing()
    :m_has_u_attr(false),
    m_u_attr(false),
    m_has_f_attr(false),
    m_f_attr(false),
    m_has_c_attr(false),
    m_c_attr(NULL),
    m_has_cp_attr(false),
    m_cp_attr(0),
    m_has_in_attr(false),
    m_in_attr(0),
    m_has_bc_attr(false),
    m_bc_attr(NULL),
    m_has_fc_attr(false),
    m_fc_attr(NULL),
    m_has_i_attr(false),
    m_i_attr(false),
    m_has_un_attr(false),
    m_un_attr(false),
    m_has_st_attr(false),
    m_st_attr(false),
    m_has_b_attr(false),
    m_b_attr(false)
    {
    }
    CT_Missing::~CT_Missing()
{
    clear();    }
    CT_Tuples* CT_Missing::add_tpls()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Tuples* pNewChild = pChildGroup->mutable_tpls();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_X* CT_Missing::add_x()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_X* pNewChild = pChildGroup->mutable_x();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_Missing::clear()
    {    
    m_has_u_attr = false;
    m_u_attr = false;
    
    m_has_f_attr = false;
    m_f_attr = false;
    
    m_has_c_attr = false;
    
    if (m_c_attr)
    {
        delete m_c_attr;
        m_c_attr = NULL;
    }
    
    
    m_has_cp_attr = false;
    m_cp_attr = 0;
    
    m_has_in_attr = false;
    m_in_attr = 0;
    
    m_has_bc_attr = false;
    
    if (m_bc_attr)
    {
        delete m_bc_attr;
        m_bc_attr = NULL;
    }
    
    
    m_has_fc_attr = false;
    
    if (m_fc_attr)
    {
        delete m_fc_attr;
        m_fc_attr = NULL;
    }
    
    
    m_has_i_attr = false;
    m_i_attr = false;
    
    m_has_un_attr = false;
    m_un_attr = false;
    
    m_has_st_attr = false;
    m_st_attr = false;
    
    m_has_b_attr = false;
    m_b_attr = false;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_Missing::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_u_attr)
    {
        _outStream << " " << "u" << "=\"" << XSD::XMLBooleanStr(m_u_attr) << "\"";
    }
    
    
    if (m_has_f_attr)
    {
        _outStream << " " << "f" << "=\"" << XSD::XMLBooleanStr(m_f_attr) << "\"";
    }
    
    
    if (m_has_c_attr)
    {
        m_c_attr->toXmlAttr("c", _outStream);
    }
    
    
    if (m_has_cp_attr)
    {
        _outStream << " " << "cp" << "=\"" << m_cp_attr << "\"";
    }
    
    
    if (m_has_in_attr)
    {
        _outStream << " " << "in" << "=\"" << m_in_attr << "\"";
    }
    
    
    if (m_has_bc_attr)
    {
        m_bc_attr->toXmlAttr("bc", _outStream);
    }
    
    
    if (m_has_fc_attr)
    {
        m_fc_attr->toXmlAttr("fc", _outStream);
    }
    
    
    if (m_has_i_attr)
    {
        _outStream << " " << "i" << "=\"" << XSD::XMLBooleanStr(m_i_attr) << "\"";
    }
    
    
    if (m_has_un_attr)
    {
        _outStream << " " << "un" << "=\"" << XSD::XMLBooleanStr(m_un_attr) << "\"";
    }
    
    
    if (m_has_st_attr)
    {
        _outStream << " " << "st" << "=\"" << XSD::XMLBooleanStr(m_st_attr) << "\"";
    }
    
    
    if (m_has_b_attr)
    {
        _outStream << " " << "b" << "=\"" << XSD::XMLBooleanStr(m_b_attr) << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_tpls())
            {
                (*iter)->get_tpls().toXmlElem("main:tpls", "", _outStream);
            }
            else if ((*iter)->has_x())
            {
                (*iter)->get_x().toXmlElem("main:x", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_Missing& CT_Missing::default_instance()
    {    
    if (!CT_Missing::default_instance_)
    {
        CT_Missing::default_instance_ = new CT_Missing();
    }
    return *CT_Missing::default_instance_;
    }

    bool CT_Missing::has_u_attr() const
    {    
    return m_has_u_attr;
    }

    void CT_Missing::set_u_attr(const XSD::boolean_& _u_attr)
    {    
    m_has_u_attr = true;
    m_u_attr = _u_attr;
    }

    const XSD::boolean_& CT_Missing::get_u_attr() const
    {    
    return m_u_attr;
    }

    bool CT_Missing::has_f_attr() const
    {    
    return m_has_f_attr;
    }

    void CT_Missing::set_f_attr(const XSD::boolean_& _f_attr)
    {    
    m_has_f_attr = true;
    m_f_attr = _f_attr;
    }

    const XSD::boolean_& CT_Missing::get_f_attr() const
    {    
    return m_f_attr;
    }

    bool CT_Missing::has_c_attr() const
    {    
    return m_has_c_attr;
    }

    void CT_Missing::set_c_attr(const ns_s::ST_Xstring& _c_attr)
    {    
    m_has_c_attr = true;
    m_c_attr = new ns_s::ST_Xstring(_c_attr);
    }

    const ns_s::ST_Xstring& CT_Missing::get_c_attr() const
    {    
    if (m_c_attr)
    {
        return *m_c_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_Missing::has_cp_attr() const
    {    
    return m_has_cp_attr;
    }

    void CT_Missing::set_cp_attr(const XSD::unsignedInt_& _cp_attr)
    {    
    m_has_cp_attr = true;
    m_cp_attr = _cp_attr;
    }

    const XSD::unsignedInt_& CT_Missing::get_cp_attr() const
    {    
    return m_cp_attr;
    }

    bool CT_Missing::has_in_attr() const
    {    
    return m_has_in_attr;
    }

    void CT_Missing::set_in_attr(const XSD::unsignedInt_& _in_attr)
    {    
    m_has_in_attr = true;
    m_in_attr = _in_attr;
    }

    const XSD::unsignedInt_& CT_Missing::get_in_attr() const
    {    
    return m_in_attr;
    }

    bool CT_Missing::has_bc_attr() const
    {    
    return m_has_bc_attr;
    }

    void CT_Missing::set_bc_attr(const ST_UnsignedIntHex& _bc_attr)
    {    
    m_has_bc_attr = true;
    m_bc_attr = new ST_UnsignedIntHex(_bc_attr);
    }

    const ST_UnsignedIntHex& CT_Missing::get_bc_attr() const
    {    
    if (m_bc_attr)
    {
        return *m_bc_attr;
    }
    return ST_UnsignedIntHex::default_instance();
    }

    bool CT_Missing::has_fc_attr() const
    {    
    return m_has_fc_attr;
    }

    void CT_Missing::set_fc_attr(const ST_UnsignedIntHex& _fc_attr)
    {    
    m_has_fc_attr = true;
    m_fc_attr = new ST_UnsignedIntHex(_fc_attr);
    }

    const ST_UnsignedIntHex& CT_Missing::get_fc_attr() const
    {    
    if (m_fc_attr)
    {
        return *m_fc_attr;
    }
    return ST_UnsignedIntHex::default_instance();
    }

    bool CT_Missing::has_i_attr() const
    {    
    return m_has_i_attr;
    }

    void CT_Missing::set_i_attr(const XSD::boolean_& _i_attr)
    {    
    m_has_i_attr = true;
    m_i_attr = _i_attr;
    }

    const XSD::boolean_& CT_Missing::get_i_attr() const
    {    
    return m_i_attr;
    }

    bool CT_Missing::has_un_attr() const
    {    
    return m_has_un_attr;
    }

    void CT_Missing::set_un_attr(const XSD::boolean_& _un_attr)
    {    
    m_has_un_attr = true;
    m_un_attr = _un_attr;
    }

    const XSD::boolean_& CT_Missing::get_un_attr() const
    {    
    return m_un_attr;
    }

    bool CT_Missing::has_st_attr() const
    {    
    return m_has_st_attr;
    }

    void CT_Missing::set_st_attr(const XSD::boolean_& _st_attr)
    {    
    m_has_st_attr = true;
    m_st_attr = _st_attr;
    }

    const XSD::boolean_& CT_Missing::get_st_attr() const
    {    
    return m_st_attr;
    }

    bool CT_Missing::has_b_attr() const
    {    
    return m_has_b_attr;
    }

    void CT_Missing::set_b_attr(const XSD::boolean_& _b_attr)
    {    
    m_has_b_attr = true;
    m_b_attr = _b_attr;
    }

    const XSD::boolean_& CT_Missing::get_b_attr() const
    {    
    return m_b_attr;
    }


    // CT_Missing::ChildGroup_1
    CT_Missing::ChildGroup_1::ChildGroup_1()
    :m_has_tpls(false),
    m_tpls(NULL),
    m_has_x(false),
    m_x(NULL)
    {
    }
    bool CT_Missing::ChildGroup_1::has_tpls() const
    {    
    return m_has_tpls;
    }

    CT_Tuples* CT_Missing::ChildGroup_1::mutable_tpls()
    {    
    
    m_has_x = false;
    
    if (m_x)
    {
        delete m_x;
        m_x = NULL;
    }
    ;
    
    m_has_tpls = true;
    if (!m_tpls)
    {
        m_tpls = new CT_Tuples();
    }
    return m_tpls;
    }

    const CT_Tuples& CT_Missing::ChildGroup_1::get_tpls() const
    {    
    if (m_tpls)
    {
        return *m_tpls;
    }
    return CT_Tuples::default_instance();
    }

    bool CT_Missing::ChildGroup_1::has_x() const
    {    
    return m_has_x;
    }

    CT_X* CT_Missing::ChildGroup_1::mutable_x()
    {    
    
    m_has_tpls = false;
    
    if (m_tpls)
    {
        delete m_tpls;
        m_tpls = NULL;
    }
    ;
    
    m_has_x = true;
    if (!m_x)
    {
        m_x = new CT_X();
    }
    return m_x;
    }

    const CT_X& CT_Missing::ChildGroup_1::get_x() const
    {    
    if (m_x)
    {
        return *m_x;
    }
    return CT_X::default_instance();
    }

CT_Missing* CT_Missing::default_instance_ = NULL;

    // CT_Number
    CT_Number::CT_Number()
    :m_has_v_attr(false),
    m_v_attr(0),
    m_has_u_attr(false),
    m_u_attr(false),
    m_has_f_attr(false),
    m_f_attr(false),
    m_has_c_attr(false),
    m_c_attr(NULL),
    m_has_cp_attr(false),
    m_cp_attr(0),
    m_has_in_attr(false),
    m_in_attr(0),
    m_has_bc_attr(false),
    m_bc_attr(NULL),
    m_has_fc_attr(false),
    m_fc_attr(NULL),
    m_has_i_attr(false),
    m_i_attr(false),
    m_has_un_attr(false),
    m_un_attr(false),
    m_has_st_attr(false),
    m_st_attr(false),
    m_has_b_attr(false),
    m_b_attr(false)
    {
    }
    CT_Number::~CT_Number()
{
    clear();    }
    CT_Tuples* CT_Number::add_tpls()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Tuples* pNewChild = pChildGroup->mutable_tpls();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_X* CT_Number::add_x()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_X* pNewChild = pChildGroup->mutable_x();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_Number::clear()
    {    
    m_has_v_attr = false;
    m_v_attr = 0;
    
    m_has_u_attr = false;
    m_u_attr = false;
    
    m_has_f_attr = false;
    m_f_attr = false;
    
    m_has_c_attr = false;
    
    if (m_c_attr)
    {
        delete m_c_attr;
        m_c_attr = NULL;
    }
    
    
    m_has_cp_attr = false;
    m_cp_attr = 0;
    
    m_has_in_attr = false;
    m_in_attr = 0;
    
    m_has_bc_attr = false;
    
    if (m_bc_attr)
    {
        delete m_bc_attr;
        m_bc_attr = NULL;
    }
    
    
    m_has_fc_attr = false;
    
    if (m_fc_attr)
    {
        delete m_fc_attr;
        m_fc_attr = NULL;
    }
    
    
    m_has_i_attr = false;
    m_i_attr = false;
    
    m_has_un_attr = false;
    m_un_attr = false;
    
    m_has_st_attr = false;
    m_st_attr = false;
    
    m_has_b_attr = false;
    m_b_attr = false;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_Number::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_v_attr)
    {
        _outStream << " " << "v" << "=\"" << m_v_attr << "\"";
    }
    
    
    if (m_has_u_attr)
    {
        _outStream << " " << "u" << "=\"" << XSD::XMLBooleanStr(m_u_attr) << "\"";
    }
    
    
    if (m_has_f_attr)
    {
        _outStream << " " << "f" << "=\"" << XSD::XMLBooleanStr(m_f_attr) << "\"";
    }
    
    
    if (m_has_c_attr)
    {
        m_c_attr->toXmlAttr("c", _outStream);
    }
    
    
    if (m_has_cp_attr)
    {
        _outStream << " " << "cp" << "=\"" << m_cp_attr << "\"";
    }
    
    
    if (m_has_in_attr)
    {
        _outStream << " " << "in" << "=\"" << m_in_attr << "\"";
    }
    
    
    if (m_has_bc_attr)
    {
        m_bc_attr->toXmlAttr("bc", _outStream);
    }
    
    
    if (m_has_fc_attr)
    {
        m_fc_attr->toXmlAttr("fc", _outStream);
    }
    
    
    if (m_has_i_attr)
    {
        _outStream << " " << "i" << "=\"" << XSD::XMLBooleanStr(m_i_attr) << "\"";
    }
    
    
    if (m_has_un_attr)
    {
        _outStream << " " << "un" << "=\"" << XSD::XMLBooleanStr(m_un_attr) << "\"";
    }
    
    
    if (m_has_st_attr)
    {
        _outStream << " " << "st" << "=\"" << XSD::XMLBooleanStr(m_st_attr) << "\"";
    }
    
    
    if (m_has_b_attr)
    {
        _outStream << " " << "b" << "=\"" << XSD::XMLBooleanStr(m_b_attr) << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_tpls())
            {
                (*iter)->get_tpls().toXmlElem("main:tpls", "", _outStream);
            }
            else if ((*iter)->has_x())
            {
                (*iter)->get_x().toXmlElem("main:x", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_Number& CT_Number::default_instance()
    {    
    if (!CT_Number::default_instance_)
    {
        CT_Number::default_instance_ = new CT_Number();
    }
    return *CT_Number::default_instance_;
    }

    bool CT_Number::has_v_attr() const
    {    
    return m_has_v_attr;
    }

    void CT_Number::set_v_attr(const XSD::double_& _v_attr)
    {    
    m_has_v_attr = true;
    m_v_attr = _v_attr;
    }

    const XSD::double_& CT_Number::get_v_attr() const
    {    
    return m_v_attr;
    }

    bool CT_Number::has_u_attr() const
    {    
    return m_has_u_attr;
    }

    void CT_Number::set_u_attr(const XSD::boolean_& _u_attr)
    {    
    m_has_u_attr = true;
    m_u_attr = _u_attr;
    }

    const XSD::boolean_& CT_Number::get_u_attr() const
    {    
    return m_u_attr;
    }

    bool CT_Number::has_f_attr() const
    {    
    return m_has_f_attr;
    }

    void CT_Number::set_f_attr(const XSD::boolean_& _f_attr)
    {    
    m_has_f_attr = true;
    m_f_attr = _f_attr;
    }

    const XSD::boolean_& CT_Number::get_f_attr() const
    {    
    return m_f_attr;
    }

    bool CT_Number::has_c_attr() const
    {    
    return m_has_c_attr;
    }

    void CT_Number::set_c_attr(const ns_s::ST_Xstring& _c_attr)
    {    
    m_has_c_attr = true;
    m_c_attr = new ns_s::ST_Xstring(_c_attr);
    }

    const ns_s::ST_Xstring& CT_Number::get_c_attr() const
    {    
    if (m_c_attr)
    {
        return *m_c_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_Number::has_cp_attr() const
    {    
    return m_has_cp_attr;
    }

    void CT_Number::set_cp_attr(const XSD::unsignedInt_& _cp_attr)
    {    
    m_has_cp_attr = true;
    m_cp_attr = _cp_attr;
    }

    const XSD::unsignedInt_& CT_Number::get_cp_attr() const
    {    
    return m_cp_attr;
    }

    bool CT_Number::has_in_attr() const
    {    
    return m_has_in_attr;
    }

    void CT_Number::set_in_attr(const XSD::unsignedInt_& _in_attr)
    {    
    m_has_in_attr = true;
    m_in_attr = _in_attr;
    }

    const XSD::unsignedInt_& CT_Number::get_in_attr() const
    {    
    return m_in_attr;
    }

    bool CT_Number::has_bc_attr() const
    {    
    return m_has_bc_attr;
    }

    void CT_Number::set_bc_attr(const ST_UnsignedIntHex& _bc_attr)
    {    
    m_has_bc_attr = true;
    m_bc_attr = new ST_UnsignedIntHex(_bc_attr);
    }

    const ST_UnsignedIntHex& CT_Number::get_bc_attr() const
    {    
    if (m_bc_attr)
    {
        return *m_bc_attr;
    }
    return ST_UnsignedIntHex::default_instance();
    }

    bool CT_Number::has_fc_attr() const
    {    
    return m_has_fc_attr;
    }

    void CT_Number::set_fc_attr(const ST_UnsignedIntHex& _fc_attr)
    {    
    m_has_fc_attr = true;
    m_fc_attr = new ST_UnsignedIntHex(_fc_attr);
    }

    const ST_UnsignedIntHex& CT_Number::get_fc_attr() const
    {    
    if (m_fc_attr)
    {
        return *m_fc_attr;
    }
    return ST_UnsignedIntHex::default_instance();
    }

    bool CT_Number::has_i_attr() const
    {    
    return m_has_i_attr;
    }

    void CT_Number::set_i_attr(const XSD::boolean_& _i_attr)
    {    
    m_has_i_attr = true;
    m_i_attr = _i_attr;
    }

    const XSD::boolean_& CT_Number::get_i_attr() const
    {    
    return m_i_attr;
    }

    bool CT_Number::has_un_attr() const
    {    
    return m_has_un_attr;
    }

    void CT_Number::set_un_attr(const XSD::boolean_& _un_attr)
    {    
    m_has_un_attr = true;
    m_un_attr = _un_attr;
    }

    const XSD::boolean_& CT_Number::get_un_attr() const
    {    
    return m_un_attr;
    }

    bool CT_Number::has_st_attr() const
    {    
    return m_has_st_attr;
    }

    void CT_Number::set_st_attr(const XSD::boolean_& _st_attr)
    {    
    m_has_st_attr = true;
    m_st_attr = _st_attr;
    }

    const XSD::boolean_& CT_Number::get_st_attr() const
    {    
    return m_st_attr;
    }

    bool CT_Number::has_b_attr() const
    {    
    return m_has_b_attr;
    }

    void CT_Number::set_b_attr(const XSD::boolean_& _b_attr)
    {    
    m_has_b_attr = true;
    m_b_attr = _b_attr;
    }

    const XSD::boolean_& CT_Number::get_b_attr() const
    {    
    return m_b_attr;
    }


    // CT_Number::ChildGroup_1
    CT_Number::ChildGroup_1::ChildGroup_1()
    :m_has_tpls(false),
    m_tpls(NULL),
    m_has_x(false),
    m_x(NULL)
    {
    }
    bool CT_Number::ChildGroup_1::has_tpls() const
    {    
    return m_has_tpls;
    }

    CT_Tuples* CT_Number::ChildGroup_1::mutable_tpls()
    {    
    
    m_has_x = false;
    
    if (m_x)
    {
        delete m_x;
        m_x = NULL;
    }
    ;
    
    m_has_tpls = true;
    if (!m_tpls)
    {
        m_tpls = new CT_Tuples();
    }
    return m_tpls;
    }

    const CT_Tuples& CT_Number::ChildGroup_1::get_tpls() const
    {    
    if (m_tpls)
    {
        return *m_tpls;
    }
    return CT_Tuples::default_instance();
    }

    bool CT_Number::ChildGroup_1::has_x() const
    {    
    return m_has_x;
    }

    CT_X* CT_Number::ChildGroup_1::mutable_x()
    {    
    
    m_has_tpls = false;
    
    if (m_tpls)
    {
        delete m_tpls;
        m_tpls = NULL;
    }
    ;
    
    m_has_x = true;
    if (!m_x)
    {
        m_x = new CT_X();
    }
    return m_x;
    }

    const CT_X& CT_Number::ChildGroup_1::get_x() const
    {    
    if (m_x)
    {
        return *m_x;
    }
    return CT_X::default_instance();
    }

CT_Number* CT_Number::default_instance_ = NULL;

    // CT_Boolean
    CT_Boolean::CT_Boolean()
    :m_has_v_attr(false),
    m_v_attr(false),
    m_has_u_attr(false),
    m_u_attr(false),
    m_has_f_attr(false),
    m_f_attr(false),
    m_has_c_attr(false),
    m_c_attr(NULL),
    m_has_cp_attr(false),
    m_cp_attr(0)
    {
    }
    CT_Boolean::~CT_Boolean()
{
    clear();    }
    CT_X* CT_Boolean::add_x()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_X* pNewChild = pChildGroup->mutable_x();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_Boolean::clear()
    {    
    m_has_v_attr = false;
    m_v_attr = false;
    
    m_has_u_attr = false;
    m_u_attr = false;
    
    m_has_f_attr = false;
    m_f_attr = false;
    
    m_has_c_attr = false;
    
    if (m_c_attr)
    {
        delete m_c_attr;
        m_c_attr = NULL;
    }
    
    
    m_has_cp_attr = false;
    m_cp_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_Boolean::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_v_attr)
    {
        _outStream << " " << "v" << "=\"" << XSD::XMLBooleanStr(m_v_attr) << "\"";
    }
    
    
    if (m_has_u_attr)
    {
        _outStream << " " << "u" << "=\"" << XSD::XMLBooleanStr(m_u_attr) << "\"";
    }
    
    
    if (m_has_f_attr)
    {
        _outStream << " " << "f" << "=\"" << XSD::XMLBooleanStr(m_f_attr) << "\"";
    }
    
    
    if (m_has_c_attr)
    {
        m_c_attr->toXmlAttr("c", _outStream);
    }
    
    
    if (m_has_cp_attr)
    {
        _outStream << " " << "cp" << "=\"" << m_cp_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_x())
            {
                (*iter)->get_x().toXmlElem("main:x", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_Boolean& CT_Boolean::default_instance()
    {    
    if (!CT_Boolean::default_instance_)
    {
        CT_Boolean::default_instance_ = new CT_Boolean();
    }
    return *CT_Boolean::default_instance_;
    }

    bool CT_Boolean::has_v_attr() const
    {    
    return m_has_v_attr;
    }

    void CT_Boolean::set_v_attr(const XSD::boolean_& _v_attr)
    {    
    m_has_v_attr = true;
    m_v_attr = _v_attr;
    }

    const XSD::boolean_& CT_Boolean::get_v_attr() const
    {    
    return m_v_attr;
    }

    bool CT_Boolean::has_u_attr() const
    {    
    return m_has_u_attr;
    }

    void CT_Boolean::set_u_attr(const XSD::boolean_& _u_attr)
    {    
    m_has_u_attr = true;
    m_u_attr = _u_attr;
    }

    const XSD::boolean_& CT_Boolean::get_u_attr() const
    {    
    return m_u_attr;
    }

    bool CT_Boolean::has_f_attr() const
    {    
    return m_has_f_attr;
    }

    void CT_Boolean::set_f_attr(const XSD::boolean_& _f_attr)
    {    
    m_has_f_attr = true;
    m_f_attr = _f_attr;
    }

    const XSD::boolean_& CT_Boolean::get_f_attr() const
    {    
    return m_f_attr;
    }

    bool CT_Boolean::has_c_attr() const
    {    
    return m_has_c_attr;
    }

    void CT_Boolean::set_c_attr(const ns_s::ST_Xstring& _c_attr)
    {    
    m_has_c_attr = true;
    m_c_attr = new ns_s::ST_Xstring(_c_attr);
    }

    const ns_s::ST_Xstring& CT_Boolean::get_c_attr() const
    {    
    if (m_c_attr)
    {
        return *m_c_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_Boolean::has_cp_attr() const
    {    
    return m_has_cp_attr;
    }

    void CT_Boolean::set_cp_attr(const XSD::unsignedInt_& _cp_attr)
    {    
    m_has_cp_attr = true;
    m_cp_attr = _cp_attr;
    }

    const XSD::unsignedInt_& CT_Boolean::get_cp_attr() const
    {    
    return m_cp_attr;
    }


    // CT_Boolean::ChildGroup_1
    CT_Boolean::ChildGroup_1::ChildGroup_1()
    :m_has_x(false),
    m_x(NULL)
    {
    }
    bool CT_Boolean::ChildGroup_1::has_x() const
    {    
    return m_has_x;
    }

    CT_X* CT_Boolean::ChildGroup_1::mutable_x()
    {    
    
    m_has_x = true;
    if (!m_x)
    {
        m_x = new CT_X();
    }
    return m_x;
    }

    const CT_X& CT_Boolean::ChildGroup_1::get_x() const
    {    
    if (m_x)
    {
        return *m_x;
    }
    return CT_X::default_instance();
    }

CT_Boolean* CT_Boolean::default_instance_ = NULL;

    // CT_Error
    CT_Error::CT_Error()
    :m_has_tpls(false),
    m_tpls(NULL),
    m_has_v_attr(false),
    m_v_attr(NULL),
    m_has_u_attr(false),
    m_u_attr(false),
    m_has_f_attr(false),
    m_f_attr(false),
    m_has_c_attr(false),
    m_c_attr(NULL),
    m_has_cp_attr(false),
    m_cp_attr(0),
    m_has_in_attr(false),
    m_in_attr(0),
    m_has_bc_attr(false),
    m_bc_attr(NULL),
    m_has_fc_attr(false),
    m_fc_attr(NULL),
    m_has_i_attr(false),
    m_i_attr(false),
    m_has_un_attr(false),
    m_un_attr(false),
    m_has_st_attr(false),
    m_st_attr(false),
    m_has_b_attr(false),
    m_b_attr(false)
    {
    }
    CT_Error::~CT_Error()
{
    clear();    }
    bool CT_Error::has_tpls() const
    {    
    return m_has_tpls;
    }

    CT_Tuples* CT_Error::mutable_tpls()
    {    
    m_has_tpls = true;
    if (!m_tpls)
    {
        m_tpls = new CT_Tuples();
    }
    return m_tpls;
    }

    const CT_Tuples& CT_Error::get_tpls() const
    {    
    if (m_tpls)
    {
        return *m_tpls;
    }
    return CT_Tuples::default_instance();
    }

    CT_X* CT_Error::add_x()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_X* pNewChild = pChildGroup->mutable_x();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_Error::clear()
    {    
    m_has_v_attr = false;
    
    if (m_v_attr)
    {
        delete m_v_attr;
        m_v_attr = NULL;
    }
    
    
    m_has_u_attr = false;
    m_u_attr = false;
    
    m_has_f_attr = false;
    m_f_attr = false;
    
    m_has_c_attr = false;
    
    if (m_c_attr)
    {
        delete m_c_attr;
        m_c_attr = NULL;
    }
    
    
    m_has_cp_attr = false;
    m_cp_attr = 0;
    
    m_has_in_attr = false;
    m_in_attr = 0;
    
    m_has_bc_attr = false;
    
    if (m_bc_attr)
    {
        delete m_bc_attr;
        m_bc_attr = NULL;
    }
    
    
    m_has_fc_attr = false;
    
    if (m_fc_attr)
    {
        delete m_fc_attr;
        m_fc_attr = NULL;
    }
    
    
    m_has_i_attr = false;
    m_i_attr = false;
    
    m_has_un_attr = false;
    m_un_attr = false;
    
    m_has_st_attr = false;
    m_st_attr = false;
    
    m_has_b_attr = false;
    m_b_attr = false;
    
    m_has_tpls = false;
    
    if (m_tpls)
    {
        delete m_tpls;
        m_tpls = NULL;
    }
    
     
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_Error::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_v_attr)
    {
        m_v_attr->toXmlAttr("v", _outStream);
    }
    
    
    if (m_has_u_attr)
    {
        _outStream << " " << "u" << "=\"" << XSD::XMLBooleanStr(m_u_attr) << "\"";
    }
    
    
    if (m_has_f_attr)
    {
        _outStream << " " << "f" << "=\"" << XSD::XMLBooleanStr(m_f_attr) << "\"";
    }
    
    
    if (m_has_c_attr)
    {
        m_c_attr->toXmlAttr("c", _outStream);
    }
    
    
    if (m_has_cp_attr)
    {
        _outStream << " " << "cp" << "=\"" << m_cp_attr << "\"";
    }
    
    
    if (m_has_in_attr)
    {
        _outStream << " " << "in" << "=\"" << m_in_attr << "\"";
    }
    
    
    if (m_has_bc_attr)
    {
        m_bc_attr->toXmlAttr("bc", _outStream);
    }
    
    
    if (m_has_fc_attr)
    {
        m_fc_attr->toXmlAttr("fc", _outStream);
    }
    
    
    if (m_has_i_attr)
    {
        _outStream << " " << "i" << "=\"" << XSD::XMLBooleanStr(m_i_attr) << "\"";
    }
    
    
    if (m_has_un_attr)
    {
        _outStream << " " << "un" << "=\"" << XSD::XMLBooleanStr(m_un_attr) << "\"";
    }
    
    
    if (m_has_st_attr)
    {
        _outStream << " " << "st" << "=\"" << XSD::XMLBooleanStr(m_st_attr) << "\"";
    }
    
    
    if (m_has_b_attr)
    {
        _outStream << " " << "b" << "=\"" << XSD::XMLBooleanStr(m_b_attr) << "\"";
    }
    
            _outStream << ">";
            
    if (m_has_tpls)
    {
        m_tpls->toXmlElem("main:tpls", "", _outStream);;
    }
     
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_x())
            {
                (*iter)->get_x().toXmlElem("main:x", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_Error& CT_Error::default_instance()
    {    
    if (!CT_Error::default_instance_)
    {
        CT_Error::default_instance_ = new CT_Error();
    }
    return *CT_Error::default_instance_;
    }

    bool CT_Error::has_v_attr() const
    {    
    return m_has_v_attr;
    }

    void CT_Error::set_v_attr(const ns_s::ST_Xstring& _v_attr)
    {    
    m_has_v_attr = true;
    m_v_attr = new ns_s::ST_Xstring(_v_attr);
    }

    const ns_s::ST_Xstring& CT_Error::get_v_attr() const
    {    
    if (m_v_attr)
    {
        return *m_v_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_Error::has_u_attr() const
    {    
    return m_has_u_attr;
    }

    void CT_Error::set_u_attr(const XSD::boolean_& _u_attr)
    {    
    m_has_u_attr = true;
    m_u_attr = _u_attr;
    }

    const XSD::boolean_& CT_Error::get_u_attr() const
    {    
    return m_u_attr;
    }

    bool CT_Error::has_f_attr() const
    {    
    return m_has_f_attr;
    }

    void CT_Error::set_f_attr(const XSD::boolean_& _f_attr)
    {    
    m_has_f_attr = true;
    m_f_attr = _f_attr;
    }

    const XSD::boolean_& CT_Error::get_f_attr() const
    {    
    return m_f_attr;
    }

    bool CT_Error::has_c_attr() const
    {    
    return m_has_c_attr;
    }

    void CT_Error::set_c_attr(const ns_s::ST_Xstring& _c_attr)
    {    
    m_has_c_attr = true;
    m_c_attr = new ns_s::ST_Xstring(_c_attr);
    }

    const ns_s::ST_Xstring& CT_Error::get_c_attr() const
    {    
    if (m_c_attr)
    {
        return *m_c_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_Error::has_cp_attr() const
    {    
    return m_has_cp_attr;
    }

    void CT_Error::set_cp_attr(const XSD::unsignedInt_& _cp_attr)
    {    
    m_has_cp_attr = true;
    m_cp_attr = _cp_attr;
    }

    const XSD::unsignedInt_& CT_Error::get_cp_attr() const
    {    
    return m_cp_attr;
    }

    bool CT_Error::has_in_attr() const
    {    
    return m_has_in_attr;
    }

    void CT_Error::set_in_attr(const XSD::unsignedInt_& _in_attr)
    {    
    m_has_in_attr = true;
    m_in_attr = _in_attr;
    }

    const XSD::unsignedInt_& CT_Error::get_in_attr() const
    {    
    return m_in_attr;
    }

    bool CT_Error::has_bc_attr() const
    {    
    return m_has_bc_attr;
    }

    void CT_Error::set_bc_attr(const ST_UnsignedIntHex& _bc_attr)
    {    
    m_has_bc_attr = true;
    m_bc_attr = new ST_UnsignedIntHex(_bc_attr);
    }

    const ST_UnsignedIntHex& CT_Error::get_bc_attr() const
    {    
    if (m_bc_attr)
    {
        return *m_bc_attr;
    }
    return ST_UnsignedIntHex::default_instance();
    }

    bool CT_Error::has_fc_attr() const
    {    
    return m_has_fc_attr;
    }

    void CT_Error::set_fc_attr(const ST_UnsignedIntHex& _fc_attr)
    {    
    m_has_fc_attr = true;
    m_fc_attr = new ST_UnsignedIntHex(_fc_attr);
    }

    const ST_UnsignedIntHex& CT_Error::get_fc_attr() const
    {    
    if (m_fc_attr)
    {
        return *m_fc_attr;
    }
    return ST_UnsignedIntHex::default_instance();
    }

    bool CT_Error::has_i_attr() const
    {    
    return m_has_i_attr;
    }

    void CT_Error::set_i_attr(const XSD::boolean_& _i_attr)
    {    
    m_has_i_attr = true;
    m_i_attr = _i_attr;
    }

    const XSD::boolean_& CT_Error::get_i_attr() const
    {    
    return m_i_attr;
    }

    bool CT_Error::has_un_attr() const
    {    
    return m_has_un_attr;
    }

    void CT_Error::set_un_attr(const XSD::boolean_& _un_attr)
    {    
    m_has_un_attr = true;
    m_un_attr = _un_attr;
    }

    const XSD::boolean_& CT_Error::get_un_attr() const
    {    
    return m_un_attr;
    }

    bool CT_Error::has_st_attr() const
    {    
    return m_has_st_attr;
    }

    void CT_Error::set_st_attr(const XSD::boolean_& _st_attr)
    {    
    m_has_st_attr = true;
    m_st_attr = _st_attr;
    }

    const XSD::boolean_& CT_Error::get_st_attr() const
    {    
    return m_st_attr;
    }

    bool CT_Error::has_b_attr() const
    {    
    return m_has_b_attr;
    }

    void CT_Error::set_b_attr(const XSD::boolean_& _b_attr)
    {    
    m_has_b_attr = true;
    m_b_attr = _b_attr;
    }

    const XSD::boolean_& CT_Error::get_b_attr() const
    {    
    return m_b_attr;
    }


    // CT_Error::ChildGroup_1
    CT_Error::ChildGroup_1::ChildGroup_1()
    :m_has_x(false),
    m_x(NULL)
    {
    }
    bool CT_Error::ChildGroup_1::has_x() const
    {    
    return m_has_x;
    }

    CT_X* CT_Error::ChildGroup_1::mutable_x()
    {    
    
    m_has_x = true;
    if (!m_x)
    {
        m_x = new CT_X();
    }
    return m_x;
    }

    const CT_X& CT_Error::ChildGroup_1::get_x() const
    {    
    if (m_x)
    {
        return *m_x;
    }
    return CT_X::default_instance();
    }

CT_Error* CT_Error::default_instance_ = NULL;

    // CT_String
    CT_String::CT_String()
    :m_has_v_attr(false),
    m_v_attr(NULL),
    m_has_u_attr(false),
    m_u_attr(false),
    m_has_f_attr(false),
    m_f_attr(false),
    m_has_c_attr(false),
    m_c_attr(NULL),
    m_has_cp_attr(false),
    m_cp_attr(0),
    m_has_in_attr(false),
    m_in_attr(0),
    m_has_bc_attr(false),
    m_bc_attr(NULL),
    m_has_fc_attr(false),
    m_fc_attr(NULL),
    m_has_i_attr(false),
    m_i_attr(false),
    m_has_un_attr(false),
    m_un_attr(false),
    m_has_st_attr(false),
    m_st_attr(false),
    m_has_b_attr(false),
    m_b_attr(false)
    {
    }
    CT_String::~CT_String()
{
    clear();    }
    CT_Tuples* CT_String::add_tpls()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Tuples* pNewChild = pChildGroup->mutable_tpls();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_X* CT_String::add_x()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_X* pNewChild = pChildGroup->mutable_x();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_String::clear()
    {    
    m_has_v_attr = false;
    
    if (m_v_attr)
    {
        delete m_v_attr;
        m_v_attr = NULL;
    }
    
    
    m_has_u_attr = false;
    m_u_attr = false;
    
    m_has_f_attr = false;
    m_f_attr = false;
    
    m_has_c_attr = false;
    
    if (m_c_attr)
    {
        delete m_c_attr;
        m_c_attr = NULL;
    }
    
    
    m_has_cp_attr = false;
    m_cp_attr = 0;
    
    m_has_in_attr = false;
    m_in_attr = 0;
    
    m_has_bc_attr = false;
    
    if (m_bc_attr)
    {
        delete m_bc_attr;
        m_bc_attr = NULL;
    }
    
    
    m_has_fc_attr = false;
    
    if (m_fc_attr)
    {
        delete m_fc_attr;
        m_fc_attr = NULL;
    }
    
    
    m_has_i_attr = false;
    m_i_attr = false;
    
    m_has_un_attr = false;
    m_un_attr = false;
    
    m_has_st_attr = false;
    m_st_attr = false;
    
    m_has_b_attr = false;
    m_b_attr = false;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_String::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_v_attr)
    {
        m_v_attr->toXmlAttr("v", _outStream);
    }
    
    
    if (m_has_u_attr)
    {
        _outStream << " " << "u" << "=\"" << XSD::XMLBooleanStr(m_u_attr) << "\"";
    }
    
    
    if (m_has_f_attr)
    {
        _outStream << " " << "f" << "=\"" << XSD::XMLBooleanStr(m_f_attr) << "\"";
    }
    
    
    if (m_has_c_attr)
    {
        m_c_attr->toXmlAttr("c", _outStream);
    }
    
    
    if (m_has_cp_attr)
    {
        _outStream << " " << "cp" << "=\"" << m_cp_attr << "\"";
    }
    
    
    if (m_has_in_attr)
    {
        _outStream << " " << "in" << "=\"" << m_in_attr << "\"";
    }
    
    
    if (m_has_bc_attr)
    {
        m_bc_attr->toXmlAttr("bc", _outStream);
    }
    
    
    if (m_has_fc_attr)
    {
        m_fc_attr->toXmlAttr("fc", _outStream);
    }
    
    
    if (m_has_i_attr)
    {
        _outStream << " " << "i" << "=\"" << XSD::XMLBooleanStr(m_i_attr) << "\"";
    }
    
    
    if (m_has_un_attr)
    {
        _outStream << " " << "un" << "=\"" << XSD::XMLBooleanStr(m_un_attr) << "\"";
    }
    
    
    if (m_has_st_attr)
    {
        _outStream << " " << "st" << "=\"" << XSD::XMLBooleanStr(m_st_attr) << "\"";
    }
    
    
    if (m_has_b_attr)
    {
        _outStream << " " << "b" << "=\"" << XSD::XMLBooleanStr(m_b_attr) << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_tpls())
            {
                (*iter)->get_tpls().toXmlElem("main:tpls", "", _outStream);
            }
            else if ((*iter)->has_x())
            {
                (*iter)->get_x().toXmlElem("main:x", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_String& CT_String::default_instance()
    {    
    if (!CT_String::default_instance_)
    {
        CT_String::default_instance_ = new CT_String();
    }
    return *CT_String::default_instance_;
    }

    bool CT_String::has_v_attr() const
    {    
    return m_has_v_attr;
    }

    void CT_String::set_v_attr(const ns_s::ST_Xstring& _v_attr)
    {    
    m_has_v_attr = true;
    m_v_attr = new ns_s::ST_Xstring(_v_attr);
    }

    const ns_s::ST_Xstring& CT_String::get_v_attr() const
    {    
    if (m_v_attr)
    {
        return *m_v_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_String::has_u_attr() const
    {    
    return m_has_u_attr;
    }

    void CT_String::set_u_attr(const XSD::boolean_& _u_attr)
    {    
    m_has_u_attr = true;
    m_u_attr = _u_attr;
    }

    const XSD::boolean_& CT_String::get_u_attr() const
    {    
    return m_u_attr;
    }

    bool CT_String::has_f_attr() const
    {    
    return m_has_f_attr;
    }

    void CT_String::set_f_attr(const XSD::boolean_& _f_attr)
    {    
    m_has_f_attr = true;
    m_f_attr = _f_attr;
    }

    const XSD::boolean_& CT_String::get_f_attr() const
    {    
    return m_f_attr;
    }

    bool CT_String::has_c_attr() const
    {    
    return m_has_c_attr;
    }

    void CT_String::set_c_attr(const ns_s::ST_Xstring& _c_attr)
    {    
    m_has_c_attr = true;
    m_c_attr = new ns_s::ST_Xstring(_c_attr);
    }

    const ns_s::ST_Xstring& CT_String::get_c_attr() const
    {    
    if (m_c_attr)
    {
        return *m_c_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_String::has_cp_attr() const
    {    
    return m_has_cp_attr;
    }

    void CT_String::set_cp_attr(const XSD::unsignedInt_& _cp_attr)
    {    
    m_has_cp_attr = true;
    m_cp_attr = _cp_attr;
    }

    const XSD::unsignedInt_& CT_String::get_cp_attr() const
    {    
    return m_cp_attr;
    }

    bool CT_String::has_in_attr() const
    {    
    return m_has_in_attr;
    }

    void CT_String::set_in_attr(const XSD::unsignedInt_& _in_attr)
    {    
    m_has_in_attr = true;
    m_in_attr = _in_attr;
    }

    const XSD::unsignedInt_& CT_String::get_in_attr() const
    {    
    return m_in_attr;
    }

    bool CT_String::has_bc_attr() const
    {    
    return m_has_bc_attr;
    }

    void CT_String::set_bc_attr(const ST_UnsignedIntHex& _bc_attr)
    {    
    m_has_bc_attr = true;
    m_bc_attr = new ST_UnsignedIntHex(_bc_attr);
    }

    const ST_UnsignedIntHex& CT_String::get_bc_attr() const
    {    
    if (m_bc_attr)
    {
        return *m_bc_attr;
    }
    return ST_UnsignedIntHex::default_instance();
    }

    bool CT_String::has_fc_attr() const
    {    
    return m_has_fc_attr;
    }

    void CT_String::set_fc_attr(const ST_UnsignedIntHex& _fc_attr)
    {    
    m_has_fc_attr = true;
    m_fc_attr = new ST_UnsignedIntHex(_fc_attr);
    }

    const ST_UnsignedIntHex& CT_String::get_fc_attr() const
    {    
    if (m_fc_attr)
    {
        return *m_fc_attr;
    }
    return ST_UnsignedIntHex::default_instance();
    }

    bool CT_String::has_i_attr() const
    {    
    return m_has_i_attr;
    }

    void CT_String::set_i_attr(const XSD::boolean_& _i_attr)
    {    
    m_has_i_attr = true;
    m_i_attr = _i_attr;
    }

    const XSD::boolean_& CT_String::get_i_attr() const
    {    
    return m_i_attr;
    }

    bool CT_String::has_un_attr() const
    {    
    return m_has_un_attr;
    }

    void CT_String::set_un_attr(const XSD::boolean_& _un_attr)
    {    
    m_has_un_attr = true;
    m_un_attr = _un_attr;
    }

    const XSD::boolean_& CT_String::get_un_attr() const
    {    
    return m_un_attr;
    }

    bool CT_String::has_st_attr() const
    {    
    return m_has_st_attr;
    }

    void CT_String::set_st_attr(const XSD::boolean_& _st_attr)
    {    
    m_has_st_attr = true;
    m_st_attr = _st_attr;
    }

    const XSD::boolean_& CT_String::get_st_attr() const
    {    
    return m_st_attr;
    }

    bool CT_String::has_b_attr() const
    {    
    return m_has_b_attr;
    }

    void CT_String::set_b_attr(const XSD::boolean_& _b_attr)
    {    
    m_has_b_attr = true;
    m_b_attr = _b_attr;
    }

    const XSD::boolean_& CT_String::get_b_attr() const
    {    
    return m_b_attr;
    }


    // CT_String::ChildGroup_1
    CT_String::ChildGroup_1::ChildGroup_1()
    :m_has_tpls(false),
    m_tpls(NULL),
    m_has_x(false),
    m_x(NULL)
    {
    }
    bool CT_String::ChildGroup_1::has_tpls() const
    {    
    return m_has_tpls;
    }

    CT_Tuples* CT_String::ChildGroup_1::mutable_tpls()
    {    
    
    m_has_x = false;
    
    if (m_x)
    {
        delete m_x;
        m_x = NULL;
    }
    ;
    
    m_has_tpls = true;
    if (!m_tpls)
    {
        m_tpls = new CT_Tuples();
    }
    return m_tpls;
    }

    const CT_Tuples& CT_String::ChildGroup_1::get_tpls() const
    {    
    if (m_tpls)
    {
        return *m_tpls;
    }
    return CT_Tuples::default_instance();
    }

    bool CT_String::ChildGroup_1::has_x() const
    {    
    return m_has_x;
    }

    CT_X* CT_String::ChildGroup_1::mutable_x()
    {    
    
    m_has_tpls = false;
    
    if (m_tpls)
    {
        delete m_tpls;
        m_tpls = NULL;
    }
    ;
    
    m_has_x = true;
    if (!m_x)
    {
        m_x = new CT_X();
    }
    return m_x;
    }

    const CT_X& CT_String::ChildGroup_1::get_x() const
    {    
    if (m_x)
    {
        return *m_x;
    }
    return CT_X::default_instance();
    }

CT_String* CT_String::default_instance_ = NULL;

    // CT_DateTime
    CT_DateTime::CT_DateTime()
    :m_has_v_attr(false),
    m_v_attr(""),
    m_has_u_attr(false),
    m_u_attr(false),
    m_has_f_attr(false),
    m_f_attr(false),
    m_has_c_attr(false),
    m_c_attr(NULL),
    m_has_cp_attr(false),
    m_cp_attr(0)
    {
    }
    CT_DateTime::~CT_DateTime()
{
    clear();    }
    CT_X* CT_DateTime::add_x()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_X* pNewChild = pChildGroup->mutable_x();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_DateTime::clear()
    {    
    m_has_v_attr = false;
    m_v_attr.clear();
    
    m_has_u_attr = false;
    m_u_attr = false;
    
    m_has_f_attr = false;
    m_f_attr = false;
    
    m_has_c_attr = false;
    
    if (m_c_attr)
    {
        delete m_c_attr;
        m_c_attr = NULL;
    }
    
    
    m_has_cp_attr = false;
    m_cp_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_DateTime::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_v_attr)
    {
        _outStream << " " << "v" << "=\"" << m_v_attr << "\"";
    }
    
    
    if (m_has_u_attr)
    {
        _outStream << " " << "u" << "=\"" << XSD::XMLBooleanStr(m_u_attr) << "\"";
    }
    
    
    if (m_has_f_attr)
    {
        _outStream << " " << "f" << "=\"" << XSD::XMLBooleanStr(m_f_attr) << "\"";
    }
    
    
    if (m_has_c_attr)
    {
        m_c_attr->toXmlAttr("c", _outStream);
    }
    
    
    if (m_has_cp_attr)
    {
        _outStream << " " << "cp" << "=\"" << m_cp_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_x())
            {
                (*iter)->get_x().toXmlElem("main:x", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_DateTime& CT_DateTime::default_instance()
    {    
    if (!CT_DateTime::default_instance_)
    {
        CT_DateTime::default_instance_ = new CT_DateTime();
    }
    return *CT_DateTime::default_instance_;
    }

    bool CT_DateTime::has_v_attr() const
    {    
    return m_has_v_attr;
    }

    void CT_DateTime::set_v_attr(const XSD::dateTime_& _v_attr)
    {    
    m_has_v_attr = true;
    m_v_attr = _v_attr;
    }

    const XSD::dateTime_& CT_DateTime::get_v_attr() const
    {    
    return m_v_attr;
    }

    bool CT_DateTime::has_u_attr() const
    {    
    return m_has_u_attr;
    }

    void CT_DateTime::set_u_attr(const XSD::boolean_& _u_attr)
    {    
    m_has_u_attr = true;
    m_u_attr = _u_attr;
    }

    const XSD::boolean_& CT_DateTime::get_u_attr() const
    {    
    return m_u_attr;
    }

    bool CT_DateTime::has_f_attr() const
    {    
    return m_has_f_attr;
    }

    void CT_DateTime::set_f_attr(const XSD::boolean_& _f_attr)
    {    
    m_has_f_attr = true;
    m_f_attr = _f_attr;
    }

    const XSD::boolean_& CT_DateTime::get_f_attr() const
    {    
    return m_f_attr;
    }

    bool CT_DateTime::has_c_attr() const
    {    
    return m_has_c_attr;
    }

    void CT_DateTime::set_c_attr(const ns_s::ST_Xstring& _c_attr)
    {    
    m_has_c_attr = true;
    m_c_attr = new ns_s::ST_Xstring(_c_attr);
    }

    const ns_s::ST_Xstring& CT_DateTime::get_c_attr() const
    {    
    if (m_c_attr)
    {
        return *m_c_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_DateTime::has_cp_attr() const
    {    
    return m_has_cp_attr;
    }

    void CT_DateTime::set_cp_attr(const XSD::unsignedInt_& _cp_attr)
    {    
    m_has_cp_attr = true;
    m_cp_attr = _cp_attr;
    }

    const XSD::unsignedInt_& CT_DateTime::get_cp_attr() const
    {    
    return m_cp_attr;
    }


    // CT_DateTime::ChildGroup_1
    CT_DateTime::ChildGroup_1::ChildGroup_1()
    :m_has_x(false),
    m_x(NULL)
    {
    }
    bool CT_DateTime::ChildGroup_1::has_x() const
    {    
    return m_has_x;
    }

    CT_X* CT_DateTime::ChildGroup_1::mutable_x()
    {    
    
    m_has_x = true;
    if (!m_x)
    {
        m_x = new CT_X();
    }
    return m_x;
    }

    const CT_X& CT_DateTime::ChildGroup_1::get_x() const
    {    
    if (m_x)
    {
        return *m_x;
    }
    return CT_X::default_instance();
    }

CT_DateTime* CT_DateTime::default_instance_ = NULL;

    // CT_FieldGroup
    CT_FieldGroup::CT_FieldGroup()
    :m_has_rangePr(false),
    m_rangePr(NULL),
    m_has_discretePr(false),
    m_discretePr(NULL),
    m_has_groupItems(false),
    m_groupItems(NULL),
    m_has_par_attr(false),
    m_par_attr(0),
    m_has_base_attr(false),
    m_base_attr(0)
    {
    }
    CT_FieldGroup::~CT_FieldGroup()
{
    clear();    }
    bool CT_FieldGroup::has_rangePr() const
    {    
    return m_has_rangePr;
    }

    CT_RangePr* CT_FieldGroup::mutable_rangePr()
    {    
    m_has_rangePr = true;
    if (!m_rangePr)
    {
        m_rangePr = new CT_RangePr();
    }
    return m_rangePr;
    }

    const CT_RangePr& CT_FieldGroup::get_rangePr() const
    {    
    if (m_rangePr)
    {
        return *m_rangePr;
    }
    return CT_RangePr::default_instance();
    }

    bool CT_FieldGroup::has_discretePr() const
    {    
    return m_has_discretePr;
    }

    CT_DiscretePr* CT_FieldGroup::mutable_discretePr()
    {    
    m_has_discretePr = true;
    if (!m_discretePr)
    {
        m_discretePr = new CT_DiscretePr();
    }
    return m_discretePr;
    }

    const CT_DiscretePr& CT_FieldGroup::get_discretePr() const
    {    
    if (m_discretePr)
    {
        return *m_discretePr;
    }
    return CT_DiscretePr::default_instance();
    }

    bool CT_FieldGroup::has_groupItems() const
    {    
    return m_has_groupItems;
    }

    CT_GroupItems* CT_FieldGroup::mutable_groupItems()
    {    
    m_has_groupItems = true;
    if (!m_groupItems)
    {
        m_groupItems = new CT_GroupItems();
    }
    return m_groupItems;
    }

    const CT_GroupItems& CT_FieldGroup::get_groupItems() const
    {    
    if (m_groupItems)
    {
        return *m_groupItems;
    }
    return CT_GroupItems::default_instance();
    }

    void CT_FieldGroup::clear()
    {    
    m_has_par_attr = false;
    m_par_attr = 0;
    
    m_has_base_attr = false;
    m_base_attr = 0;
    }

    void CT_FieldGroup::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_par_attr)
    {
        _outStream << " " << "par" << "=\"" << m_par_attr << "\"";
    }
    
    
    if (m_has_base_attr)
    {
        _outStream << " " << "base" << "=\"" << m_base_attr << "\"";
    }
    
            _outStream << ">";
            
    if (m_has_rangePr)
    {
        m_rangePr->toXmlElem("main:rangePr", "", _outStream);;
    }
    
    if (m_has_discretePr)
    {
        m_discretePr->toXmlElem("main:discretePr", "", _outStream);;
    }
    
    if (m_has_groupItems)
    {
        m_groupItems->toXmlElem("main:groupItems", "", _outStream);;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_FieldGroup& CT_FieldGroup::default_instance()
    {    
    if (!CT_FieldGroup::default_instance_)
    {
        CT_FieldGroup::default_instance_ = new CT_FieldGroup();
    }
    return *CT_FieldGroup::default_instance_;
    }

    bool CT_FieldGroup::has_par_attr() const
    {    
    return m_has_par_attr;
    }

    void CT_FieldGroup::set_par_attr(const XSD::unsignedInt_& _par_attr)
    {    
    m_has_par_attr = true;
    m_par_attr = _par_attr;
    }

    const XSD::unsignedInt_& CT_FieldGroup::get_par_attr() const
    {    
    return m_par_attr;
    }

    bool CT_FieldGroup::has_base_attr() const
    {    
    return m_has_base_attr;
    }

    void CT_FieldGroup::set_base_attr(const XSD::unsignedInt_& _base_attr)
    {    
    m_has_base_attr = true;
    m_base_attr = _base_attr;
    }

    const XSD::unsignedInt_& CT_FieldGroup::get_base_attr() const
    {    
    return m_base_attr;
    }

CT_FieldGroup* CT_FieldGroup::default_instance_ = NULL;

    // CT_RangePr
    CT_RangePr::CT_RangePr()
    :m_has_autoStart_attr(false),
    m_autoStart_attr(false),
    m_has_autoEnd_attr(false),
    m_autoEnd_attr(false),
    m_has_groupBy_attr(false),
    m_groupBy_attr(NULL),
    m_has_startNum_attr(false),
    m_startNum_attr(0),
    m_has_endNum_attr(false),
    m_endNum_attr(0),
    m_has_startDate_attr(false),
    m_startDate_attr(""),
    m_has_endDate_attr(false),
    m_endDate_attr(""),
    m_has_groupInterval_attr(false),
    m_groupInterval_attr(0)
    {
    }
    CT_RangePr::~CT_RangePr()
{
    clear();    }
    void CT_RangePr::clear()
    {    
    m_has_autoStart_attr = false;
    m_autoStart_attr = false;
    
    m_has_autoEnd_attr = false;
    m_autoEnd_attr = false;
    
    m_has_groupBy_attr = false;
    
    if (m_groupBy_attr)
    {
        delete m_groupBy_attr;
        m_groupBy_attr = NULL;
    }
    
    
    m_has_startNum_attr = false;
    m_startNum_attr = 0;
    
    m_has_endNum_attr = false;
    m_endNum_attr = 0;
    
    m_has_startDate_attr = false;
    m_startDate_attr.clear();
    
    m_has_endDate_attr = false;
    m_endDate_attr.clear();
    
    m_has_groupInterval_attr = false;
    m_groupInterval_attr = 0;
    }

    void CT_RangePr::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_autoStart_attr)
    {
        _outStream << " " << "autoStart" << "=\"" << XSD::XMLBooleanStr(m_autoStart_attr) << "\"";
    }
    
    
    if (m_has_autoEnd_attr)
    {
        _outStream << " " << "autoEnd" << "=\"" << XSD::XMLBooleanStr(m_autoEnd_attr) << "\"";
    }
    
    
    if (m_has_groupBy_attr)
    {
        m_groupBy_attr->toXmlAttr("groupBy", _outStream);
    }
    
    
    if (m_has_startNum_attr)
    {
        _outStream << " " << "startNum" << "=\"" << m_startNum_attr << "\"";
    }
    
    
    if (m_has_endNum_attr)
    {
        _outStream << " " << "endNum" << "=\"" << m_endNum_attr << "\"";
    }
    
    
    if (m_has_startDate_attr)
    {
        _outStream << " " << "startDate" << "=\"" << m_startDate_attr << "\"";
    }
    
    
    if (m_has_endDate_attr)
    {
        _outStream << " " << "endDate" << "=\"" << m_endDate_attr << "\"";
    }
    
    
    if (m_has_groupInterval_attr)
    {
        _outStream << " " << "groupInterval" << "=\"" << m_groupInterval_attr << "\"";
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_RangePr& CT_RangePr::default_instance()
    {    
    if (!CT_RangePr::default_instance_)
    {
        CT_RangePr::default_instance_ = new CT_RangePr();
    }
    return *CT_RangePr::default_instance_;
    }

    bool CT_RangePr::has_autoStart_attr() const
    {    
    return m_has_autoStart_attr;
    }

    void CT_RangePr::set_autoStart_attr(const XSD::boolean_& _autoStart_attr)
    {    
    m_has_autoStart_attr = true;
    m_autoStart_attr = _autoStart_attr;
    }

    const XSD::boolean_& CT_RangePr::get_autoStart_attr() const
    {    
    return m_autoStart_attr;
    }

    bool CT_RangePr::has_autoEnd_attr() const
    {    
    return m_has_autoEnd_attr;
    }

    void CT_RangePr::set_autoEnd_attr(const XSD::boolean_& _autoEnd_attr)
    {    
    m_has_autoEnd_attr = true;
    m_autoEnd_attr = _autoEnd_attr;
    }

    const XSD::boolean_& CT_RangePr::get_autoEnd_attr() const
    {    
    return m_autoEnd_attr;
    }

    bool CT_RangePr::has_groupBy_attr() const
    {    
    return m_has_groupBy_attr;
    }

    void CT_RangePr::set_groupBy_attr(const ST_GroupBy& _groupBy_attr)
    {    
    m_has_groupBy_attr = true;
    m_groupBy_attr = new ST_GroupBy(_groupBy_attr);
    }

    const ST_GroupBy& CT_RangePr::get_groupBy_attr() const
    {    
    if (m_groupBy_attr)
    {
        return *m_groupBy_attr;
    }
    return ST_GroupBy::default_instance();
    }

    bool CT_RangePr::has_startNum_attr() const
    {    
    return m_has_startNum_attr;
    }

    void CT_RangePr::set_startNum_attr(const XSD::double_& _startNum_attr)
    {    
    m_has_startNum_attr = true;
    m_startNum_attr = _startNum_attr;
    }

    const XSD::double_& CT_RangePr::get_startNum_attr() const
    {    
    return m_startNum_attr;
    }

    bool CT_RangePr::has_endNum_attr() const
    {    
    return m_has_endNum_attr;
    }

    void CT_RangePr::set_endNum_attr(const XSD::double_& _endNum_attr)
    {    
    m_has_endNum_attr = true;
    m_endNum_attr = _endNum_attr;
    }

    const XSD::double_& CT_RangePr::get_endNum_attr() const
    {    
    return m_endNum_attr;
    }

    bool CT_RangePr::has_startDate_attr() const
    {    
    return m_has_startDate_attr;
    }

    void CT_RangePr::set_startDate_attr(const XSD::dateTime_& _startDate_attr)
    {    
    m_has_startDate_attr = true;
    m_startDate_attr = _startDate_attr;
    }

    const XSD::dateTime_& CT_RangePr::get_startDate_attr() const
    {    
    return m_startDate_attr;
    }

    bool CT_RangePr::has_endDate_attr() const
    {    
    return m_has_endDate_attr;
    }

    void CT_RangePr::set_endDate_attr(const XSD::dateTime_& _endDate_attr)
    {    
    m_has_endDate_attr = true;
    m_endDate_attr = _endDate_attr;
    }

    const XSD::dateTime_& CT_RangePr::get_endDate_attr() const
    {    
    return m_endDate_attr;
    }

    bool CT_RangePr::has_groupInterval_attr() const
    {    
    return m_has_groupInterval_attr;
    }

    void CT_RangePr::set_groupInterval_attr(const XSD::double_& _groupInterval_attr)
    {    
    m_has_groupInterval_attr = true;
    m_groupInterval_attr = _groupInterval_attr;
    }

    const XSD::double_& CT_RangePr::get_groupInterval_attr() const
    {    
    return m_groupInterval_attr;
    }

CT_RangePr* CT_RangePr::default_instance_ = NULL;

    // CT_DiscretePr
    CT_DiscretePr::CT_DiscretePr()
    :m_has_count_attr(false),
    m_count_attr(0)
    {
    }
    CT_DiscretePr::~CT_DiscretePr()
{
    clear();    }
    CT_Index* CT_DiscretePr::add_x()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Index* pNewChild = pChildGroup->mutable_x();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_DiscretePr::clear()
    {    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_DiscretePr::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_x())
            {
                (*iter)->get_x().toXmlElem("main:x", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_DiscretePr& CT_DiscretePr::default_instance()
    {    
    if (!CT_DiscretePr::default_instance_)
    {
        CT_DiscretePr::default_instance_ = new CT_DiscretePr();
    }
    return *CT_DiscretePr::default_instance_;
    }

    bool CT_DiscretePr::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void CT_DiscretePr::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& CT_DiscretePr::get_count_attr() const
    {    
    return m_count_attr;
    }


    // CT_DiscretePr::ChildGroup_1
    CT_DiscretePr::ChildGroup_1::ChildGroup_1()
    :m_has_x(false),
    m_x(NULL)
    {
    }
    bool CT_DiscretePr::ChildGroup_1::has_x() const
    {    
    return m_has_x;
    }

    CT_Index* CT_DiscretePr::ChildGroup_1::mutable_x()
    {    
    
    m_has_x = true;
    if (!m_x)
    {
        m_x = new CT_Index();
    }
    return m_x;
    }

    const CT_Index& CT_DiscretePr::ChildGroup_1::get_x() const
    {    
    if (m_x)
    {
        return *m_x;
    }
    return CT_Index::default_instance();
    }

CT_DiscretePr* CT_DiscretePr::default_instance_ = NULL;

    // CT_GroupItems
    CT_GroupItems::CT_GroupItems()
    :m_has_count_attr(false),
    m_count_attr(0)
    {
    }
    CT_GroupItems::~CT_GroupItems()
{
    clear();    }
    CT_Missing* CT_GroupItems::add_m()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Missing* pNewChild = pChildGroup->mutable_m();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_Number* CT_GroupItems::add_n()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Number* pNewChild = pChildGroup->mutable_n();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_Boolean* CT_GroupItems::add_b()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Boolean* pNewChild = pChildGroup->mutable_b();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_Error* CT_GroupItems::add_e()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Error* pNewChild = pChildGroup->mutable_e();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_String* CT_GroupItems::add_s()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_String* pNewChild = pChildGroup->mutable_s();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_DateTime* CT_GroupItems::add_d()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_DateTime* pNewChild = pChildGroup->mutable_d();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_GroupItems::clear()
    {    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_GroupItems::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_m())
            {
                (*iter)->get_m().toXmlElem("main:m", "", _outStream);
            }
            else if ((*iter)->has_n())
            {
                (*iter)->get_n().toXmlElem("main:n", "", _outStream);
            }
            else if ((*iter)->has_b())
            {
                (*iter)->get_b().toXmlElem("main:b", "", _outStream);
            }
            else if ((*iter)->has_e())
            {
                (*iter)->get_e().toXmlElem("main:e", "", _outStream);
            }
            else if ((*iter)->has_s())
            {
                (*iter)->get_s().toXmlElem("main:s", "", _outStream);
            }
            else if ((*iter)->has_d())
            {
                (*iter)->get_d().toXmlElem("main:d", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_GroupItems& CT_GroupItems::default_instance()
    {    
    if (!CT_GroupItems::default_instance_)
    {
        CT_GroupItems::default_instance_ = new CT_GroupItems();
    }
    return *CT_GroupItems::default_instance_;
    }

    bool CT_GroupItems::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void CT_GroupItems::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& CT_GroupItems::get_count_attr() const
    {    
    return m_count_attr;
    }


    // CT_GroupItems::ChildGroup_1
    CT_GroupItems::ChildGroup_1::ChildGroup_1()
    :m_has_m(false),
    m_m(NULL),
    m_has_n(false),
    m_n(NULL),
    m_has_b(false),
    m_b(NULL),
    m_has_e(false),
    m_e(NULL),
    m_has_s(false),
    m_s(NULL),
    m_has_d(false),
    m_d(NULL)
    {
    }
    bool CT_GroupItems::ChildGroup_1::has_m() const
    {    
    return m_has_m;
    }

    CT_Missing* CT_GroupItems::ChildGroup_1::mutable_m()
    {    
    
    m_has_n = false;
    
    if (m_n)
    {
        delete m_n;
        m_n = NULL;
    }
    ;
    
    m_has_b = false;
    
    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;
    
    m_has_e = false;
    
    if (m_e)
    {
        delete m_e;
        m_e = NULL;
    }
    ;
    
    m_has_s = false;
    
    if (m_s)
    {
        delete m_s;
        m_s = NULL;
    }
    ;
    
    m_has_d = false;
    
    if (m_d)
    {
        delete m_d;
        m_d = NULL;
    }
    ;
    
    m_has_m = true;
    if (!m_m)
    {
        m_m = new CT_Missing();
    }
    return m_m;
    }

    const CT_Missing& CT_GroupItems::ChildGroup_1::get_m() const
    {    
    if (m_m)
    {
        return *m_m;
    }
    return CT_Missing::default_instance();
    }

    bool CT_GroupItems::ChildGroup_1::has_n() const
    {    
    return m_has_n;
    }

    CT_Number* CT_GroupItems::ChildGroup_1::mutable_n()
    {    
    
    m_has_m = false;
    
    if (m_m)
    {
        delete m_m;
        m_m = NULL;
    }
    ;
    
    m_has_b = false;
    
    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;
    
    m_has_e = false;
    
    if (m_e)
    {
        delete m_e;
        m_e = NULL;
    }
    ;
    
    m_has_s = false;
    
    if (m_s)
    {
        delete m_s;
        m_s = NULL;
    }
    ;
    
    m_has_d = false;
    
    if (m_d)
    {
        delete m_d;
        m_d = NULL;
    }
    ;
    
    m_has_n = true;
    if (!m_n)
    {
        m_n = new CT_Number();
    }
    return m_n;
    }

    const CT_Number& CT_GroupItems::ChildGroup_1::get_n() const
    {    
    if (m_n)
    {
        return *m_n;
    }
    return CT_Number::default_instance();
    }

    bool CT_GroupItems::ChildGroup_1::has_b() const
    {    
    return m_has_b;
    }

    CT_Boolean* CT_GroupItems::ChildGroup_1::mutable_b()
    {    
    
    m_has_m = false;
    
    if (m_m)
    {
        delete m_m;
        m_m = NULL;
    }
    ;
    
    m_has_n = false;
    
    if (m_n)
    {
        delete m_n;
        m_n = NULL;
    }
    ;
    
    m_has_e = false;
    
    if (m_e)
    {
        delete m_e;
        m_e = NULL;
    }
    ;
    
    m_has_s = false;
    
    if (m_s)
    {
        delete m_s;
        m_s = NULL;
    }
    ;
    
    m_has_d = false;
    
    if (m_d)
    {
        delete m_d;
        m_d = NULL;
    }
    ;
    
    m_has_b = true;
    if (!m_b)
    {
        m_b = new CT_Boolean();
    }
    return m_b;
    }

    const CT_Boolean& CT_GroupItems::ChildGroup_1::get_b() const
    {    
    if (m_b)
    {
        return *m_b;
    }
    return CT_Boolean::default_instance();
    }

    bool CT_GroupItems::ChildGroup_1::has_e() const
    {    
    return m_has_e;
    }

    CT_Error* CT_GroupItems::ChildGroup_1::mutable_e()
    {    
    
    m_has_m = false;
    
    if (m_m)
    {
        delete m_m;
        m_m = NULL;
    }
    ;
    
    m_has_n = false;
    
    if (m_n)
    {
        delete m_n;
        m_n = NULL;
    }
    ;
    
    m_has_b = false;
    
    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;
    
    m_has_s = false;
    
    if (m_s)
    {
        delete m_s;
        m_s = NULL;
    }
    ;
    
    m_has_d = false;
    
    if (m_d)
    {
        delete m_d;
        m_d = NULL;
    }
    ;
    
    m_has_e = true;
    if (!m_e)
    {
        m_e = new CT_Error();
    }
    return m_e;
    }

    const CT_Error& CT_GroupItems::ChildGroup_1::get_e() const
    {    
    if (m_e)
    {
        return *m_e;
    }
    return CT_Error::default_instance();
    }

    bool CT_GroupItems::ChildGroup_1::has_s() const
    {    
    return m_has_s;
    }

    CT_String* CT_GroupItems::ChildGroup_1::mutable_s()
    {    
    
    m_has_m = false;
    
    if (m_m)
    {
        delete m_m;
        m_m = NULL;
    }
    ;
    
    m_has_n = false;
    
    if (m_n)
    {
        delete m_n;
        m_n = NULL;
    }
    ;
    
    m_has_b = false;
    
    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;
    
    m_has_e = false;
    
    if (m_e)
    {
        delete m_e;
        m_e = NULL;
    }
    ;
    
    m_has_d = false;
    
    if (m_d)
    {
        delete m_d;
        m_d = NULL;
    }
    ;
    
    m_has_s = true;
    if (!m_s)
    {
        m_s = new CT_String();
    }
    return m_s;
    }

    const CT_String& CT_GroupItems::ChildGroup_1::get_s() const
    {    
    if (m_s)
    {
        return *m_s;
    }
    return CT_String::default_instance();
    }

    bool CT_GroupItems::ChildGroup_1::has_d() const
    {    
    return m_has_d;
    }

    CT_DateTime* CT_GroupItems::ChildGroup_1::mutable_d()
    {    
    
    m_has_m = false;
    
    if (m_m)
    {
        delete m_m;
        m_m = NULL;
    }
    ;
    
    m_has_n = false;
    
    if (m_n)
    {
        delete m_n;
        m_n = NULL;
    }
    ;
    
    m_has_b = false;
    
    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;
    
    m_has_e = false;
    
    if (m_e)
    {
        delete m_e;
        m_e = NULL;
    }
    ;
    
    m_has_s = false;
    
    if (m_s)
    {
        delete m_s;
        m_s = NULL;
    }
    ;
    
    m_has_d = true;
    if (!m_d)
    {
        m_d = new CT_DateTime();
    }
    return m_d;
    }

    const CT_DateTime& CT_GroupItems::ChildGroup_1::get_d() const
    {    
    if (m_d)
    {
        return *m_d;
    }
    return CT_DateTime::default_instance();
    }

CT_GroupItems* CT_GroupItems::default_instance_ = NULL;

    // CT_PivotCacheRecords
    CT_PivotCacheRecords::CT_PivotCacheRecords()
    :m_has_count_attr(false),
    m_count_attr(0)
    {
    }
    CT_PivotCacheRecords::~CT_PivotCacheRecords()
{
    clear();    }
    CT_Record* CT_PivotCacheRecords::add_r()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Record* pNewChild = pChildGroup->mutable_r();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_ExtensionList* CT_PivotCacheRecords::add_extLst()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_ExtensionList* pNewChild = pChildGroup->mutable_extLst();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_PivotCacheRecords::clear()
    {    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_PivotCacheRecords::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_r())
            {
                (*iter)->get_r().toXmlElem("main:r", "", _outStream);
            }
            else if ((*iter)->has_extLst())
            {
                (*iter)->get_extLst().toXmlElem("main:extLst", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_PivotCacheRecords& CT_PivotCacheRecords::default_instance()
    {    
    if (!CT_PivotCacheRecords::default_instance_)
    {
        CT_PivotCacheRecords::default_instance_ = new CT_PivotCacheRecords();
    }
    return *CT_PivotCacheRecords::default_instance_;
    }

    bool CT_PivotCacheRecords::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void CT_PivotCacheRecords::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& CT_PivotCacheRecords::get_count_attr() const
    {    
    return m_count_attr;
    }


    // CT_PivotCacheRecords::ChildGroup_1
    CT_PivotCacheRecords::ChildGroup_1::ChildGroup_1()
    :m_has_r(false),
    m_r(NULL),
    m_has_extLst(false),
    m_extLst(NULL)
    {
    }
    bool CT_PivotCacheRecords::ChildGroup_1::has_r() const
    {    
    return m_has_r;
    }

    CT_Record* CT_PivotCacheRecords::ChildGroup_1::mutable_r()
    {    
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_r = true;
    if (!m_r)
    {
        m_r = new CT_Record();
    }
    return m_r;
    }

    const CT_Record& CT_PivotCacheRecords::ChildGroup_1::get_r() const
    {    
    if (m_r)
    {
        return *m_r;
    }
    return CT_Record::default_instance();
    }

    bool CT_PivotCacheRecords::ChildGroup_1::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* CT_PivotCacheRecords::ChildGroup_1::mutable_extLst()
    {    
    
    m_has_r = false;
    
    if (m_r)
    {
        delete m_r;
        m_r = NULL;
    }
    ;
    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& CT_PivotCacheRecords::ChildGroup_1::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

CT_PivotCacheRecords* CT_PivotCacheRecords::default_instance_ = NULL;

    // CT_Record
    CT_Record::CT_Record()

    {
    }
    CT_Record::~CT_Record()
{
    clear();    }
    CT_Missing* CT_Record::add_m()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Missing* pNewChild = pChildGroup->mutable_m();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_Number* CT_Record::add_n()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Number* pNewChild = pChildGroup->mutable_n();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_Boolean* CT_Record::add_b()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Boolean* pNewChild = pChildGroup->mutable_b();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_Error* CT_Record::add_e()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Error* pNewChild = pChildGroup->mutable_e();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_String* CT_Record::add_s()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_String* pNewChild = pChildGroup->mutable_s();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_DateTime* CT_Record::add_d()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_DateTime* pNewChild = pChildGroup->mutable_d();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_Index* CT_Record::add_x()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Index* pNewChild = pChildGroup->mutable_x();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_Record::clear()
    {    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_Record::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_m())
            {
                (*iter)->get_m().toXmlElem("main:m", "", _outStream);
            }
            else if ((*iter)->has_n())
            {
                (*iter)->get_n().toXmlElem("main:n", "", _outStream);
            }
            else if ((*iter)->has_b())
            {
                (*iter)->get_b().toXmlElem("main:b", "", _outStream);
            }
            else if ((*iter)->has_e())
            {
                (*iter)->get_e().toXmlElem("main:e", "", _outStream);
            }
            else if ((*iter)->has_s())
            {
                (*iter)->get_s().toXmlElem("main:s", "", _outStream);
            }
            else if ((*iter)->has_d())
            {
                (*iter)->get_d().toXmlElem("main:d", "", _outStream);
            }
            else if ((*iter)->has_x())
            {
                (*iter)->get_x().toXmlElem("main:x", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_Record& CT_Record::default_instance()
    {    
    if (!CT_Record::default_instance_)
    {
        CT_Record::default_instance_ = new CT_Record();
    }
    return *CT_Record::default_instance_;
    }


    // CT_Record::ChildGroup_1
    CT_Record::ChildGroup_1::ChildGroup_1()
    :m_has_m(false),
    m_m(NULL),
    m_has_n(false),
    m_n(NULL),
    m_has_b(false),
    m_b(NULL),
    m_has_e(false),
    m_e(NULL),
    m_has_s(false),
    m_s(NULL),
    m_has_d(false),
    m_d(NULL),
    m_has_x(false),
    m_x(NULL)
    {
    }
    bool CT_Record::ChildGroup_1::has_m() const
    {    
    return m_has_m;
    }

    CT_Missing* CT_Record::ChildGroup_1::mutable_m()
    {    
    
    m_has_n = false;
    
    if (m_n)
    {
        delete m_n;
        m_n = NULL;
    }
    ;
    
    m_has_b = false;
    
    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;
    
    m_has_e = false;
    
    if (m_e)
    {
        delete m_e;
        m_e = NULL;
    }
    ;
    
    m_has_s = false;
    
    if (m_s)
    {
        delete m_s;
        m_s = NULL;
    }
    ;
    
    m_has_d = false;
    
    if (m_d)
    {
        delete m_d;
        m_d = NULL;
    }
    ;
    
    m_has_x = false;
    
    if (m_x)
    {
        delete m_x;
        m_x = NULL;
    }
    ;
    
    m_has_m = true;
    if (!m_m)
    {
        m_m = new CT_Missing();
    }
    return m_m;
    }

    const CT_Missing& CT_Record::ChildGroup_1::get_m() const
    {    
    if (m_m)
    {
        return *m_m;
    }
    return CT_Missing::default_instance();
    }

    bool CT_Record::ChildGroup_1::has_n() const
    {    
    return m_has_n;
    }

    CT_Number* CT_Record::ChildGroup_1::mutable_n()
    {    
    
    m_has_m = false;
    
    if (m_m)
    {
        delete m_m;
        m_m = NULL;
    }
    ;
    
    m_has_b = false;
    
    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;
    
    m_has_e = false;
    
    if (m_e)
    {
        delete m_e;
        m_e = NULL;
    }
    ;
    
    m_has_s = false;
    
    if (m_s)
    {
        delete m_s;
        m_s = NULL;
    }
    ;
    
    m_has_d = false;
    
    if (m_d)
    {
        delete m_d;
        m_d = NULL;
    }
    ;
    
    m_has_x = false;
    
    if (m_x)
    {
        delete m_x;
        m_x = NULL;
    }
    ;
    
    m_has_n = true;
    if (!m_n)
    {
        m_n = new CT_Number();
    }
    return m_n;
    }

    const CT_Number& CT_Record::ChildGroup_1::get_n() const
    {    
    if (m_n)
    {
        return *m_n;
    }
    return CT_Number::default_instance();
    }

    bool CT_Record::ChildGroup_1::has_b() const
    {    
    return m_has_b;
    }

    CT_Boolean* CT_Record::ChildGroup_1::mutable_b()
    {    
    
    m_has_m = false;
    
    if (m_m)
    {
        delete m_m;
        m_m = NULL;
    }
    ;
    
    m_has_n = false;
    
    if (m_n)
    {
        delete m_n;
        m_n = NULL;
    }
    ;
    
    m_has_e = false;
    
    if (m_e)
    {
        delete m_e;
        m_e = NULL;
    }
    ;
    
    m_has_s = false;
    
    if (m_s)
    {
        delete m_s;
        m_s = NULL;
    }
    ;
    
    m_has_d = false;
    
    if (m_d)
    {
        delete m_d;
        m_d = NULL;
    }
    ;
    
    m_has_x = false;
    
    if (m_x)
    {
        delete m_x;
        m_x = NULL;
    }
    ;
    
    m_has_b = true;
    if (!m_b)
    {
        m_b = new CT_Boolean();
    }
    return m_b;
    }

    const CT_Boolean& CT_Record::ChildGroup_1::get_b() const
    {    
    if (m_b)
    {
        return *m_b;
    }
    return CT_Boolean::default_instance();
    }

    bool CT_Record::ChildGroup_1::has_e() const
    {    
    return m_has_e;
    }

    CT_Error* CT_Record::ChildGroup_1::mutable_e()
    {    
    
    m_has_m = false;
    
    if (m_m)
    {
        delete m_m;
        m_m = NULL;
    }
    ;
    
    m_has_n = false;
    
    if (m_n)
    {
        delete m_n;
        m_n = NULL;
    }
    ;
    
    m_has_b = false;
    
    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;
    
    m_has_s = false;
    
    if (m_s)
    {
        delete m_s;
        m_s = NULL;
    }
    ;
    
    m_has_d = false;
    
    if (m_d)
    {
        delete m_d;
        m_d = NULL;
    }
    ;
    
    m_has_x = false;
    
    if (m_x)
    {
        delete m_x;
        m_x = NULL;
    }
    ;
    
    m_has_e = true;
    if (!m_e)
    {
        m_e = new CT_Error();
    }
    return m_e;
    }

    const CT_Error& CT_Record::ChildGroup_1::get_e() const
    {    
    if (m_e)
    {
        return *m_e;
    }
    return CT_Error::default_instance();
    }

    bool CT_Record::ChildGroup_1::has_s() const
    {    
    return m_has_s;
    }

    CT_String* CT_Record::ChildGroup_1::mutable_s()
    {    
    
    m_has_m = false;
    
    if (m_m)
    {
        delete m_m;
        m_m = NULL;
    }
    ;
    
    m_has_n = false;
    
    if (m_n)
    {
        delete m_n;
        m_n = NULL;
    }
    ;
    
    m_has_b = false;
    
    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;
    
    m_has_e = false;
    
    if (m_e)
    {
        delete m_e;
        m_e = NULL;
    }
    ;
    
    m_has_d = false;
    
    if (m_d)
    {
        delete m_d;
        m_d = NULL;
    }
    ;
    
    m_has_x = false;
    
    if (m_x)
    {
        delete m_x;
        m_x = NULL;
    }
    ;
    
    m_has_s = true;
    if (!m_s)
    {
        m_s = new CT_String();
    }
    return m_s;
    }

    const CT_String& CT_Record::ChildGroup_1::get_s() const
    {    
    if (m_s)
    {
        return *m_s;
    }
    return CT_String::default_instance();
    }

    bool CT_Record::ChildGroup_1::has_d() const
    {    
    return m_has_d;
    }

    CT_DateTime* CT_Record::ChildGroup_1::mutable_d()
    {    
    
    m_has_m = false;
    
    if (m_m)
    {
        delete m_m;
        m_m = NULL;
    }
    ;
    
    m_has_n = false;
    
    if (m_n)
    {
        delete m_n;
        m_n = NULL;
    }
    ;
    
    m_has_b = false;
    
    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;
    
    m_has_e = false;
    
    if (m_e)
    {
        delete m_e;
        m_e = NULL;
    }
    ;
    
    m_has_s = false;
    
    if (m_s)
    {
        delete m_s;
        m_s = NULL;
    }
    ;
    
    m_has_x = false;
    
    if (m_x)
    {
        delete m_x;
        m_x = NULL;
    }
    ;
    
    m_has_d = true;
    if (!m_d)
    {
        m_d = new CT_DateTime();
    }
    return m_d;
    }

    const CT_DateTime& CT_Record::ChildGroup_1::get_d() const
    {    
    if (m_d)
    {
        return *m_d;
    }
    return CT_DateTime::default_instance();
    }

    bool CT_Record::ChildGroup_1::has_x() const
    {    
    return m_has_x;
    }

    CT_Index* CT_Record::ChildGroup_1::mutable_x()
    {    
    
    m_has_m = false;
    
    if (m_m)
    {
        delete m_m;
        m_m = NULL;
    }
    ;
    
    m_has_n = false;
    
    if (m_n)
    {
        delete m_n;
        m_n = NULL;
    }
    ;
    
    m_has_b = false;
    
    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;
    
    m_has_e = false;
    
    if (m_e)
    {
        delete m_e;
        m_e = NULL;
    }
    ;
    
    m_has_s = false;
    
    if (m_s)
    {
        delete m_s;
        m_s = NULL;
    }
    ;
    
    m_has_d = false;
    
    if (m_d)
    {
        delete m_d;
        m_d = NULL;
    }
    ;
    
    m_has_x = true;
    if (!m_x)
    {
        m_x = new CT_Index();
    }
    return m_x;
    }

    const CT_Index& CT_Record::ChildGroup_1::get_x() const
    {    
    if (m_x)
    {
        return *m_x;
    }
    return CT_Index::default_instance();
    }

CT_Record* CT_Record::default_instance_ = NULL;

    // CT_PCDKPIs
    CT_PCDKPIs::CT_PCDKPIs()
    :m_has_count_attr(false),
    m_count_attr(0)
    {
    }
    CT_PCDKPIs::~CT_PCDKPIs()
{
    clear();    }
    CT_PCDKPI* CT_PCDKPIs::add_kpi()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_PCDKPI* pNewChild = pChildGroup->mutable_kpi();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_PCDKPIs::clear()
    {    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_PCDKPIs::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_kpi())
            {
                (*iter)->get_kpi().toXmlElem("main:kpi", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_PCDKPIs& CT_PCDKPIs::default_instance()
    {    
    if (!CT_PCDKPIs::default_instance_)
    {
        CT_PCDKPIs::default_instance_ = new CT_PCDKPIs();
    }
    return *CT_PCDKPIs::default_instance_;
    }

    bool CT_PCDKPIs::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void CT_PCDKPIs::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& CT_PCDKPIs::get_count_attr() const
    {    
    return m_count_attr;
    }


    // CT_PCDKPIs::ChildGroup_1
    CT_PCDKPIs::ChildGroup_1::ChildGroup_1()
    :m_has_kpi(false),
    m_kpi(NULL)
    {
    }
    bool CT_PCDKPIs::ChildGroup_1::has_kpi() const
    {    
    return m_has_kpi;
    }

    CT_PCDKPI* CT_PCDKPIs::ChildGroup_1::mutable_kpi()
    {    
    
    m_has_kpi = true;
    if (!m_kpi)
    {
        m_kpi = new CT_PCDKPI();
    }
    return m_kpi;
    }

    const CT_PCDKPI& CT_PCDKPIs::ChildGroup_1::get_kpi() const
    {    
    if (m_kpi)
    {
        return *m_kpi;
    }
    return CT_PCDKPI::default_instance();
    }

CT_PCDKPIs* CT_PCDKPIs::default_instance_ = NULL;

    // CT_PCDKPI
    CT_PCDKPI::CT_PCDKPI()
    :m_has_uniqueName_attr(false),
    m_uniqueName_attr(NULL),
    m_has_caption_attr(false),
    m_caption_attr(NULL),
    m_has_displayFolder_attr(false),
    m_displayFolder_attr(NULL),
    m_has_measureGroup_attr(false),
    m_measureGroup_attr(NULL),
    m_has_parent_attr(false),
    m_parent_attr(NULL),
    m_has_value_attr(false),
    m_value_attr(NULL),
    m_has_goal_attr(false),
    m_goal_attr(NULL),
    m_has_status_attr(false),
    m_status_attr(NULL),
    m_has_trend_attr(false),
    m_trend_attr(NULL),
    m_has_weight_attr(false),
    m_weight_attr(NULL),
    m_has_time_attr(false),
    m_time_attr(NULL)
    {
    }
    CT_PCDKPI::~CT_PCDKPI()
{
    clear();    }
    void CT_PCDKPI::clear()
    {    
    m_has_uniqueName_attr = false;
    
    if (m_uniqueName_attr)
    {
        delete m_uniqueName_attr;
        m_uniqueName_attr = NULL;
    }
    
    
    m_has_caption_attr = false;
    
    if (m_caption_attr)
    {
        delete m_caption_attr;
        m_caption_attr = NULL;
    }
    
    
    m_has_displayFolder_attr = false;
    
    if (m_displayFolder_attr)
    {
        delete m_displayFolder_attr;
        m_displayFolder_attr = NULL;
    }
    
    
    m_has_measureGroup_attr = false;
    
    if (m_measureGroup_attr)
    {
        delete m_measureGroup_attr;
        m_measureGroup_attr = NULL;
    }
    
    
    m_has_parent_attr = false;
    
    if (m_parent_attr)
    {
        delete m_parent_attr;
        m_parent_attr = NULL;
    }
    
    
    m_has_value_attr = false;
    
    if (m_value_attr)
    {
        delete m_value_attr;
        m_value_attr = NULL;
    }
    
    
    m_has_goal_attr = false;
    
    if (m_goal_attr)
    {
        delete m_goal_attr;
        m_goal_attr = NULL;
    }
    
    
    m_has_status_attr = false;
    
    if (m_status_attr)
    {
        delete m_status_attr;
        m_status_attr = NULL;
    }
    
    
    m_has_trend_attr = false;
    
    if (m_trend_attr)
    {
        delete m_trend_attr;
        m_trend_attr = NULL;
    }
    
    
    m_has_weight_attr = false;
    
    if (m_weight_attr)
    {
        delete m_weight_attr;
        m_weight_attr = NULL;
    }
    
    
    m_has_time_attr = false;
    
    if (m_time_attr)
    {
        delete m_time_attr;
        m_time_attr = NULL;
    }
    
    }

    void CT_PCDKPI::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_uniqueName_attr)
    {
        m_uniqueName_attr->toXmlAttr("uniqueName", _outStream);
    }
    
    
    if (m_has_caption_attr)
    {
        m_caption_attr->toXmlAttr("caption", _outStream);
    }
    
    
    if (m_has_displayFolder_attr)
    {
        m_displayFolder_attr->toXmlAttr("displayFolder", _outStream);
    }
    
    
    if (m_has_measureGroup_attr)
    {
        m_measureGroup_attr->toXmlAttr("measureGroup", _outStream);
    }
    
    
    if (m_has_parent_attr)
    {
        m_parent_attr->toXmlAttr("parent", _outStream);
    }
    
    
    if (m_has_value_attr)
    {
        m_value_attr->toXmlAttr("value", _outStream);
    }
    
    
    if (m_has_goal_attr)
    {
        m_goal_attr->toXmlAttr("goal", _outStream);
    }
    
    
    if (m_has_status_attr)
    {
        m_status_attr->toXmlAttr("status", _outStream);
    }
    
    
    if (m_has_trend_attr)
    {
        m_trend_attr->toXmlAttr("trend", _outStream);
    }
    
    
    if (m_has_weight_attr)
    {
        m_weight_attr->toXmlAttr("weight", _outStream);
    }
    
    
    if (m_has_time_attr)
    {
        m_time_attr->toXmlAttr("time", _outStream);
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_PCDKPI& CT_PCDKPI::default_instance()
    {    
    if (!CT_PCDKPI::default_instance_)
    {
        CT_PCDKPI::default_instance_ = new CT_PCDKPI();
    }
    return *CT_PCDKPI::default_instance_;
    }

    bool CT_PCDKPI::has_uniqueName_attr() const
    {    
    return m_has_uniqueName_attr;
    }

    void CT_PCDKPI::set_uniqueName_attr(const ns_s::ST_Xstring& _uniqueName_attr)
    {    
    m_has_uniqueName_attr = true;
    m_uniqueName_attr = new ns_s::ST_Xstring(_uniqueName_attr);
    }

    const ns_s::ST_Xstring& CT_PCDKPI::get_uniqueName_attr() const
    {    
    if (m_uniqueName_attr)
    {
        return *m_uniqueName_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_PCDKPI::has_caption_attr() const
    {    
    return m_has_caption_attr;
    }

    void CT_PCDKPI::set_caption_attr(const ns_s::ST_Xstring& _caption_attr)
    {    
    m_has_caption_attr = true;
    m_caption_attr = new ns_s::ST_Xstring(_caption_attr);
    }

    const ns_s::ST_Xstring& CT_PCDKPI::get_caption_attr() const
    {    
    if (m_caption_attr)
    {
        return *m_caption_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_PCDKPI::has_displayFolder_attr() const
    {    
    return m_has_displayFolder_attr;
    }

    void CT_PCDKPI::set_displayFolder_attr(const ns_s::ST_Xstring& _displayFolder_attr)
    {    
    m_has_displayFolder_attr = true;
    m_displayFolder_attr = new ns_s::ST_Xstring(_displayFolder_attr);
    }

    const ns_s::ST_Xstring& CT_PCDKPI::get_displayFolder_attr() const
    {    
    if (m_displayFolder_attr)
    {
        return *m_displayFolder_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_PCDKPI::has_measureGroup_attr() const
    {    
    return m_has_measureGroup_attr;
    }

    void CT_PCDKPI::set_measureGroup_attr(const ns_s::ST_Xstring& _measureGroup_attr)
    {    
    m_has_measureGroup_attr = true;
    m_measureGroup_attr = new ns_s::ST_Xstring(_measureGroup_attr);
    }

    const ns_s::ST_Xstring& CT_PCDKPI::get_measureGroup_attr() const
    {    
    if (m_measureGroup_attr)
    {
        return *m_measureGroup_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_PCDKPI::has_parent_attr() const
    {    
    return m_has_parent_attr;
    }

    void CT_PCDKPI::set_parent_attr(const ns_s::ST_Xstring& _parent_attr)
    {    
    m_has_parent_attr = true;
    m_parent_attr = new ns_s::ST_Xstring(_parent_attr);
    }

    const ns_s::ST_Xstring& CT_PCDKPI::get_parent_attr() const
    {    
    if (m_parent_attr)
    {
        return *m_parent_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_PCDKPI::has_value_attr() const
    {    
    return m_has_value_attr;
    }

    void CT_PCDKPI::set_value_attr(const ns_s::ST_Xstring& _value_attr)
    {    
    m_has_value_attr = true;
    m_value_attr = new ns_s::ST_Xstring(_value_attr);
    }

    const ns_s::ST_Xstring& CT_PCDKPI::get_value_attr() const
    {    
    if (m_value_attr)
    {
        return *m_value_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_PCDKPI::has_goal_attr() const
    {    
    return m_has_goal_attr;
    }

    void CT_PCDKPI::set_goal_attr(const ns_s::ST_Xstring& _goal_attr)
    {    
    m_has_goal_attr = true;
    m_goal_attr = new ns_s::ST_Xstring(_goal_attr);
    }

    const ns_s::ST_Xstring& CT_PCDKPI::get_goal_attr() const
    {    
    if (m_goal_attr)
    {
        return *m_goal_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_PCDKPI::has_status_attr() const
    {    
    return m_has_status_attr;
    }

    void CT_PCDKPI::set_status_attr(const ns_s::ST_Xstring& _status_attr)
    {    
    m_has_status_attr = true;
    m_status_attr = new ns_s::ST_Xstring(_status_attr);
    }

    const ns_s::ST_Xstring& CT_PCDKPI::get_status_attr() const
    {    
    if (m_status_attr)
    {
        return *m_status_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_PCDKPI::has_trend_attr() const
    {    
    return m_has_trend_attr;
    }

    void CT_PCDKPI::set_trend_attr(const ns_s::ST_Xstring& _trend_attr)
    {    
    m_has_trend_attr = true;
    m_trend_attr = new ns_s::ST_Xstring(_trend_attr);
    }

    const ns_s::ST_Xstring& CT_PCDKPI::get_trend_attr() const
    {    
    if (m_trend_attr)
    {
        return *m_trend_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_PCDKPI::has_weight_attr() const
    {    
    return m_has_weight_attr;
    }

    void CT_PCDKPI::set_weight_attr(const ns_s::ST_Xstring& _weight_attr)
    {    
    m_has_weight_attr = true;
    m_weight_attr = new ns_s::ST_Xstring(_weight_attr);
    }

    const ns_s::ST_Xstring& CT_PCDKPI::get_weight_attr() const
    {    
    if (m_weight_attr)
    {
        return *m_weight_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_PCDKPI::has_time_attr() const
    {    
    return m_has_time_attr;
    }

    void CT_PCDKPI::set_time_attr(const ns_s::ST_Xstring& _time_attr)
    {    
    m_has_time_attr = true;
    m_time_attr = new ns_s::ST_Xstring(_time_attr);
    }

    const ns_s::ST_Xstring& CT_PCDKPI::get_time_attr() const
    {    
    if (m_time_attr)
    {
        return *m_time_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

CT_PCDKPI* CT_PCDKPI::default_instance_ = NULL;

    // CT_CacheHierarchies
    CT_CacheHierarchies::CT_CacheHierarchies()
    :m_has_count_attr(false),
    m_count_attr(0)
    {
    }
    CT_CacheHierarchies::~CT_CacheHierarchies()
{
    clear();    }
    CT_CacheHierarchy* CT_CacheHierarchies::add_cacheHierarchy()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_CacheHierarchy* pNewChild = pChildGroup->mutable_cacheHierarchy();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_CacheHierarchies::clear()
    {    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_CacheHierarchies::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_cacheHierarchy())
            {
                (*iter)->get_cacheHierarchy().toXmlElem("main:cacheHierarchy", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_CacheHierarchies& CT_CacheHierarchies::default_instance()
    {    
    if (!CT_CacheHierarchies::default_instance_)
    {
        CT_CacheHierarchies::default_instance_ = new CT_CacheHierarchies();
    }
    return *CT_CacheHierarchies::default_instance_;
    }

    bool CT_CacheHierarchies::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void CT_CacheHierarchies::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& CT_CacheHierarchies::get_count_attr() const
    {    
    return m_count_attr;
    }


    // CT_CacheHierarchies::ChildGroup_1
    CT_CacheHierarchies::ChildGroup_1::ChildGroup_1()
    :m_has_cacheHierarchy(false),
    m_cacheHierarchy(NULL)
    {
    }
    bool CT_CacheHierarchies::ChildGroup_1::has_cacheHierarchy() const
    {    
    return m_has_cacheHierarchy;
    }

    CT_CacheHierarchy* CT_CacheHierarchies::ChildGroup_1::mutable_cacheHierarchy()
    {    
    
    m_has_cacheHierarchy = true;
    if (!m_cacheHierarchy)
    {
        m_cacheHierarchy = new CT_CacheHierarchy();
    }
    return m_cacheHierarchy;
    }

    const CT_CacheHierarchy& CT_CacheHierarchies::ChildGroup_1::get_cacheHierarchy() const
    {    
    if (m_cacheHierarchy)
    {
        return *m_cacheHierarchy;
    }
    return CT_CacheHierarchy::default_instance();
    }

CT_CacheHierarchies* CT_CacheHierarchies::default_instance_ = NULL;

    // CT_CacheHierarchy
    CT_CacheHierarchy::CT_CacheHierarchy()
    :m_has_fieldsUsage(false),
    m_fieldsUsage(NULL),
    m_has_groupLevels(false),
    m_groupLevels(NULL),
    m_has_extLst(false),
    m_extLst(NULL),
    m_has_uniqueName_attr(false),
    m_uniqueName_attr(NULL),
    m_has_caption_attr(false),
    m_caption_attr(NULL),
    m_has_measure_attr(false),
    m_measure_attr(false),
    m_has_set_attr(false),
    m_set_attr(false),
    m_has_parentSet_attr(false),
    m_parentSet_attr(0),
    m_has_iconSet_attr(false),
    m_iconSet_attr(0),
    m_has_attribute_attr(false),
    m_attribute_attr(false),
    m_has_time_attr(false),
    m_time_attr(false),
    m_has_keyAttribute_attr(false),
    m_keyAttribute_attr(false),
    m_has_defaultMemberUniqueName_attr(false),
    m_defaultMemberUniqueName_attr(NULL),
    m_has_allUniqueName_attr(false),
    m_allUniqueName_attr(NULL),
    m_has_allCaption_attr(false),
    m_allCaption_attr(NULL),
    m_has_dimensionUniqueName_attr(false),
    m_dimensionUniqueName_attr(NULL),
    m_has_displayFolder_attr(false),
    m_displayFolder_attr(NULL),
    m_has_measureGroup_attr(false),
    m_measureGroup_attr(NULL),
    m_has_measures_attr(false),
    m_measures_attr(false),
    m_has_count_attr(false),
    m_count_attr(0),
    m_has_oneField_attr(false),
    m_oneField_attr(false),
    m_has_memberValueDatatype_attr(false),
    m_memberValueDatatype_attr(0),
    m_has_unbalanced_attr(false),
    m_unbalanced_attr(false),
    m_has_unbalancedGroup_attr(false),
    m_unbalancedGroup_attr(false),
    m_has_hidden_attr(false),
    m_hidden_attr(false)
    {
    }
    CT_CacheHierarchy::~CT_CacheHierarchy()
{
    clear();    }
    bool CT_CacheHierarchy::has_fieldsUsage() const
    {    
    return m_has_fieldsUsage;
    }

    CT_FieldsUsage* CT_CacheHierarchy::mutable_fieldsUsage()
    {    
    m_has_fieldsUsage = true;
    if (!m_fieldsUsage)
    {
        m_fieldsUsage = new CT_FieldsUsage();
    }
    return m_fieldsUsage;
    }

    const CT_FieldsUsage& CT_CacheHierarchy::get_fieldsUsage() const
    {    
    if (m_fieldsUsage)
    {
        return *m_fieldsUsage;
    }
    return CT_FieldsUsage::default_instance();
    }

    bool CT_CacheHierarchy::has_groupLevels() const
    {    
    return m_has_groupLevels;
    }

    CT_GroupLevels* CT_CacheHierarchy::mutable_groupLevels()
    {    
    m_has_groupLevels = true;
    if (!m_groupLevels)
    {
        m_groupLevels = new CT_GroupLevels();
    }
    return m_groupLevels;
    }

    const CT_GroupLevels& CT_CacheHierarchy::get_groupLevels() const
    {    
    if (m_groupLevels)
    {
        return *m_groupLevels;
    }
    return CT_GroupLevels::default_instance();
    }

    bool CT_CacheHierarchy::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* CT_CacheHierarchy::mutable_extLst()
    {    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& CT_CacheHierarchy::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

    void CT_CacheHierarchy::clear()
    {    
    m_has_uniqueName_attr = false;
    
    if (m_uniqueName_attr)
    {
        delete m_uniqueName_attr;
        m_uniqueName_attr = NULL;
    }
    
    
    m_has_caption_attr = false;
    
    if (m_caption_attr)
    {
        delete m_caption_attr;
        m_caption_attr = NULL;
    }
    
    
    m_has_measure_attr = false;
    m_measure_attr = false;
    
    m_has_set_attr = false;
    m_set_attr = false;
    
    m_has_parentSet_attr = false;
    m_parentSet_attr = 0;
    
    m_has_iconSet_attr = false;
    m_iconSet_attr = 0;
    
    m_has_attribute_attr = false;
    m_attribute_attr = false;
    
    m_has_time_attr = false;
    m_time_attr = false;
    
    m_has_keyAttribute_attr = false;
    m_keyAttribute_attr = false;
    
    m_has_defaultMemberUniqueName_attr = false;
    
    if (m_defaultMemberUniqueName_attr)
    {
        delete m_defaultMemberUniqueName_attr;
        m_defaultMemberUniqueName_attr = NULL;
    }
    
    
    m_has_allUniqueName_attr = false;
    
    if (m_allUniqueName_attr)
    {
        delete m_allUniqueName_attr;
        m_allUniqueName_attr = NULL;
    }
    
    
    m_has_allCaption_attr = false;
    
    if (m_allCaption_attr)
    {
        delete m_allCaption_attr;
        m_allCaption_attr = NULL;
    }
    
    
    m_has_dimensionUniqueName_attr = false;
    
    if (m_dimensionUniqueName_attr)
    {
        delete m_dimensionUniqueName_attr;
        m_dimensionUniqueName_attr = NULL;
    }
    
    
    m_has_displayFolder_attr = false;
    
    if (m_displayFolder_attr)
    {
        delete m_displayFolder_attr;
        m_displayFolder_attr = NULL;
    }
    
    
    m_has_measureGroup_attr = false;
    
    if (m_measureGroup_attr)
    {
        delete m_measureGroup_attr;
        m_measureGroup_attr = NULL;
    }
    
    
    m_has_measures_attr = false;
    m_measures_attr = false;
    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    m_has_oneField_attr = false;
    m_oneField_attr = false;
    
    m_has_memberValueDatatype_attr = false;
    m_memberValueDatatype_attr = 0;
    
    m_has_unbalanced_attr = false;
    m_unbalanced_attr = false;
    
    m_has_unbalancedGroup_attr = false;
    m_unbalancedGroup_attr = false;
    
    m_has_hidden_attr = false;
    m_hidden_attr = false;
    }

    void CT_CacheHierarchy::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_uniqueName_attr)
    {
        m_uniqueName_attr->toXmlAttr("uniqueName", _outStream);
    }
    
    
    if (m_has_caption_attr)
    {
        m_caption_attr->toXmlAttr("caption", _outStream);
    }
    
    
    if (m_has_measure_attr)
    {
        _outStream << " " << "measure" << "=\"" << XSD::XMLBooleanStr(m_measure_attr) << "\"";
    }
    
    
    if (m_has_set_attr)
    {
        _outStream << " " << "set" << "=\"" << XSD::XMLBooleanStr(m_set_attr) << "\"";
    }
    
    
    if (m_has_parentSet_attr)
    {
        _outStream << " " << "parentSet" << "=\"" << m_parentSet_attr << "\"";
    }
    
    
    if (m_has_iconSet_attr)
    {
        _outStream << " " << "iconSet" << "=\"" << m_iconSet_attr << "\"";
    }
    
    
    if (m_has_attribute_attr)
    {
        _outStream << " " << "attribute" << "=\"" << XSD::XMLBooleanStr(m_attribute_attr) << "\"";
    }
    
    
    if (m_has_time_attr)
    {
        _outStream << " " << "time" << "=\"" << XSD::XMLBooleanStr(m_time_attr) << "\"";
    }
    
    
    if (m_has_keyAttribute_attr)
    {
        _outStream << " " << "keyAttribute" << "=\"" << XSD::XMLBooleanStr(m_keyAttribute_attr) << "\"";
    }
    
    
    if (m_has_defaultMemberUniqueName_attr)
    {
        m_defaultMemberUniqueName_attr->toXmlAttr("defaultMemberUniqueName", _outStream);
    }
    
    
    if (m_has_allUniqueName_attr)
    {
        m_allUniqueName_attr->toXmlAttr("allUniqueName", _outStream);
    }
    
    
    if (m_has_allCaption_attr)
    {
        m_allCaption_attr->toXmlAttr("allCaption", _outStream);
    }
    
    
    if (m_has_dimensionUniqueName_attr)
    {
        m_dimensionUniqueName_attr->toXmlAttr("dimensionUniqueName", _outStream);
    }
    
    
    if (m_has_displayFolder_attr)
    {
        m_displayFolder_attr->toXmlAttr("displayFolder", _outStream);
    }
    
    
    if (m_has_measureGroup_attr)
    {
        m_measureGroup_attr->toXmlAttr("measureGroup", _outStream);
    }
    
    
    if (m_has_measures_attr)
    {
        _outStream << " " << "measures" << "=\"" << XSD::XMLBooleanStr(m_measures_attr) << "\"";
    }
    
    
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
    
    if (m_has_oneField_attr)
    {
        _outStream << " " << "oneField" << "=\"" << XSD::XMLBooleanStr(m_oneField_attr) << "\"";
    }
    
    
    if (m_has_memberValueDatatype_attr)
    {
        _outStream << " " << "memberValueDatatype" << "=\"" << m_memberValueDatatype_attr << "\"";
    }
    
    
    if (m_has_unbalanced_attr)
    {
        _outStream << " " << "unbalanced" << "=\"" << XSD::XMLBooleanStr(m_unbalanced_attr) << "\"";
    }
    
    
    if (m_has_unbalancedGroup_attr)
    {
        _outStream << " " << "unbalancedGroup" << "=\"" << XSD::XMLBooleanStr(m_unbalancedGroup_attr) << "\"";
    }
    
    
    if (m_has_hidden_attr)
    {
        _outStream << " " << "hidden" << "=\"" << XSD::XMLBooleanStr(m_hidden_attr) << "\"";
    }
    
            _outStream << ">";
            
    if (m_has_fieldsUsage)
    {
        m_fieldsUsage->toXmlElem("main:fieldsUsage", "", _outStream);;
    }
    
    if (m_has_groupLevels)
    {
        m_groupLevels->toXmlElem("main:groupLevels", "", _outStream);;
    }
    
    if (m_has_extLst)
    {
        m_extLst->toXmlElem("main:extLst", "", _outStream);;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_CacheHierarchy& CT_CacheHierarchy::default_instance()
    {    
    if (!CT_CacheHierarchy::default_instance_)
    {
        CT_CacheHierarchy::default_instance_ = new CT_CacheHierarchy();
    }
    return *CT_CacheHierarchy::default_instance_;
    }

    bool CT_CacheHierarchy::has_uniqueName_attr() const
    {    
    return m_has_uniqueName_attr;
    }

    void CT_CacheHierarchy::set_uniqueName_attr(const ns_s::ST_Xstring& _uniqueName_attr)
    {    
    m_has_uniqueName_attr = true;
    m_uniqueName_attr = new ns_s::ST_Xstring(_uniqueName_attr);
    }

    const ns_s::ST_Xstring& CT_CacheHierarchy::get_uniqueName_attr() const
    {    
    if (m_uniqueName_attr)
    {
        return *m_uniqueName_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_CacheHierarchy::has_caption_attr() const
    {    
    return m_has_caption_attr;
    }

    void CT_CacheHierarchy::set_caption_attr(const ns_s::ST_Xstring& _caption_attr)
    {    
    m_has_caption_attr = true;
    m_caption_attr = new ns_s::ST_Xstring(_caption_attr);
    }

    const ns_s::ST_Xstring& CT_CacheHierarchy::get_caption_attr() const
    {    
    if (m_caption_attr)
    {
        return *m_caption_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_CacheHierarchy::has_measure_attr() const
    {    
    return m_has_measure_attr;
    }

    void CT_CacheHierarchy::set_measure_attr(const XSD::boolean_& _measure_attr)
    {    
    m_has_measure_attr = true;
    m_measure_attr = _measure_attr;
    }

    const XSD::boolean_& CT_CacheHierarchy::get_measure_attr() const
    {    
    return m_measure_attr;
    }

    bool CT_CacheHierarchy::has_set_attr() const
    {    
    return m_has_set_attr;
    }

    void CT_CacheHierarchy::set_set_attr(const XSD::boolean_& _set_attr)
    {    
    m_has_set_attr = true;
    m_set_attr = _set_attr;
    }

    const XSD::boolean_& CT_CacheHierarchy::get_set_attr() const
    {    
    return m_set_attr;
    }

    bool CT_CacheHierarchy::has_parentSet_attr() const
    {    
    return m_has_parentSet_attr;
    }

    void CT_CacheHierarchy::set_parentSet_attr(const XSD::unsignedInt_& _parentSet_attr)
    {    
    m_has_parentSet_attr = true;
    m_parentSet_attr = _parentSet_attr;
    }

    const XSD::unsignedInt_& CT_CacheHierarchy::get_parentSet_attr() const
    {    
    return m_parentSet_attr;
    }

    bool CT_CacheHierarchy::has_iconSet_attr() const
    {    
    return m_has_iconSet_attr;
    }

    void CT_CacheHierarchy::set_iconSet_attr(const XSD::int_& _iconSet_attr)
    {    
    m_has_iconSet_attr = true;
    m_iconSet_attr = _iconSet_attr;
    }

    const XSD::int_& CT_CacheHierarchy::get_iconSet_attr() const
    {    
    return m_iconSet_attr;
    }

    bool CT_CacheHierarchy::has_attribute_attr() const
    {    
    return m_has_attribute_attr;
    }

    void CT_CacheHierarchy::set_attribute_attr(const XSD::boolean_& _attribute_attr)
    {    
    m_has_attribute_attr = true;
    m_attribute_attr = _attribute_attr;
    }

    const XSD::boolean_& CT_CacheHierarchy::get_attribute_attr() const
    {    
    return m_attribute_attr;
    }

    bool CT_CacheHierarchy::has_time_attr() const
    {    
    return m_has_time_attr;
    }

    void CT_CacheHierarchy::set_time_attr(const XSD::boolean_& _time_attr)
    {    
    m_has_time_attr = true;
    m_time_attr = _time_attr;
    }

    const XSD::boolean_& CT_CacheHierarchy::get_time_attr() const
    {    
    return m_time_attr;
    }

    bool CT_CacheHierarchy::has_keyAttribute_attr() const
    {    
    return m_has_keyAttribute_attr;
    }

    void CT_CacheHierarchy::set_keyAttribute_attr(const XSD::boolean_& _keyAttribute_attr)
    {    
    m_has_keyAttribute_attr = true;
    m_keyAttribute_attr = _keyAttribute_attr;
    }

    const XSD::boolean_& CT_CacheHierarchy::get_keyAttribute_attr() const
    {    
    return m_keyAttribute_attr;
    }

    bool CT_CacheHierarchy::has_defaultMemberUniqueName_attr() const
    {    
    return m_has_defaultMemberUniqueName_attr;
    }

    void CT_CacheHierarchy::set_defaultMemberUniqueName_attr(const ns_s::ST_Xstring& _defaultMemberUniqueName_attr)
    {    
    m_has_defaultMemberUniqueName_attr = true;
    m_defaultMemberUniqueName_attr = new ns_s::ST_Xstring(_defaultMemberUniqueName_attr);
    }

    const ns_s::ST_Xstring& CT_CacheHierarchy::get_defaultMemberUniqueName_attr() const
    {    
    if (m_defaultMemberUniqueName_attr)
    {
        return *m_defaultMemberUniqueName_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_CacheHierarchy::has_allUniqueName_attr() const
    {    
    return m_has_allUniqueName_attr;
    }

    void CT_CacheHierarchy::set_allUniqueName_attr(const ns_s::ST_Xstring& _allUniqueName_attr)
    {    
    m_has_allUniqueName_attr = true;
    m_allUniqueName_attr = new ns_s::ST_Xstring(_allUniqueName_attr);
    }

    const ns_s::ST_Xstring& CT_CacheHierarchy::get_allUniqueName_attr() const
    {    
    if (m_allUniqueName_attr)
    {
        return *m_allUniqueName_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_CacheHierarchy::has_allCaption_attr() const
    {    
    return m_has_allCaption_attr;
    }

    void CT_CacheHierarchy::set_allCaption_attr(const ns_s::ST_Xstring& _allCaption_attr)
    {    
    m_has_allCaption_attr = true;
    m_allCaption_attr = new ns_s::ST_Xstring(_allCaption_attr);
    }

    const ns_s::ST_Xstring& CT_CacheHierarchy::get_allCaption_attr() const
    {    
    if (m_allCaption_attr)
    {
        return *m_allCaption_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_CacheHierarchy::has_dimensionUniqueName_attr() const
    {    
    return m_has_dimensionUniqueName_attr;
    }

    void CT_CacheHierarchy::set_dimensionUniqueName_attr(const ns_s::ST_Xstring& _dimensionUniqueName_attr)
    {    
    m_has_dimensionUniqueName_attr = true;
    m_dimensionUniqueName_attr = new ns_s::ST_Xstring(_dimensionUniqueName_attr);
    }

    const ns_s::ST_Xstring& CT_CacheHierarchy::get_dimensionUniqueName_attr() const
    {    
    if (m_dimensionUniqueName_attr)
    {
        return *m_dimensionUniqueName_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_CacheHierarchy::has_displayFolder_attr() const
    {    
    return m_has_displayFolder_attr;
    }

    void CT_CacheHierarchy::set_displayFolder_attr(const ns_s::ST_Xstring& _displayFolder_attr)
    {    
    m_has_displayFolder_attr = true;
    m_displayFolder_attr = new ns_s::ST_Xstring(_displayFolder_attr);
    }

    const ns_s::ST_Xstring& CT_CacheHierarchy::get_displayFolder_attr() const
    {    
    if (m_displayFolder_attr)
    {
        return *m_displayFolder_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_CacheHierarchy::has_measureGroup_attr() const
    {    
    return m_has_measureGroup_attr;
    }

    void CT_CacheHierarchy::set_measureGroup_attr(const ns_s::ST_Xstring& _measureGroup_attr)
    {    
    m_has_measureGroup_attr = true;
    m_measureGroup_attr = new ns_s::ST_Xstring(_measureGroup_attr);
    }

    const ns_s::ST_Xstring& CT_CacheHierarchy::get_measureGroup_attr() const
    {    
    if (m_measureGroup_attr)
    {
        return *m_measureGroup_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_CacheHierarchy::has_measures_attr() const
    {    
    return m_has_measures_attr;
    }

    void CT_CacheHierarchy::set_measures_attr(const XSD::boolean_& _measures_attr)
    {    
    m_has_measures_attr = true;
    m_measures_attr = _measures_attr;
    }

    const XSD::boolean_& CT_CacheHierarchy::get_measures_attr() const
    {    
    return m_measures_attr;
    }

    bool CT_CacheHierarchy::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void CT_CacheHierarchy::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& CT_CacheHierarchy::get_count_attr() const
    {    
    return m_count_attr;
    }

    bool CT_CacheHierarchy::has_oneField_attr() const
    {    
    return m_has_oneField_attr;
    }

    void CT_CacheHierarchy::set_oneField_attr(const XSD::boolean_& _oneField_attr)
    {    
    m_has_oneField_attr = true;
    m_oneField_attr = _oneField_attr;
    }

    const XSD::boolean_& CT_CacheHierarchy::get_oneField_attr() const
    {    
    return m_oneField_attr;
    }

    bool CT_CacheHierarchy::has_memberValueDatatype_attr() const
    {    
    return m_has_memberValueDatatype_attr;
    }

    void CT_CacheHierarchy::set_memberValueDatatype_attr(const XSD::unsignedShort_& _memberValueDatatype_attr)
    {    
    m_has_memberValueDatatype_attr = true;
    m_memberValueDatatype_attr = _memberValueDatatype_attr;
    }

    const XSD::unsignedShort_& CT_CacheHierarchy::get_memberValueDatatype_attr() const
    {    
    return m_memberValueDatatype_attr;
    }

    bool CT_CacheHierarchy::has_unbalanced_attr() const
    {    
    return m_has_unbalanced_attr;
    }

    void CT_CacheHierarchy::set_unbalanced_attr(const XSD::boolean_& _unbalanced_attr)
    {    
    m_has_unbalanced_attr = true;
    m_unbalanced_attr = _unbalanced_attr;
    }

    const XSD::boolean_& CT_CacheHierarchy::get_unbalanced_attr() const
    {    
    return m_unbalanced_attr;
    }

    bool CT_CacheHierarchy::has_unbalancedGroup_attr() const
    {    
    return m_has_unbalancedGroup_attr;
    }

    void CT_CacheHierarchy::set_unbalancedGroup_attr(const XSD::boolean_& _unbalancedGroup_attr)
    {    
    m_has_unbalancedGroup_attr = true;
    m_unbalancedGroup_attr = _unbalancedGroup_attr;
    }

    const XSD::boolean_& CT_CacheHierarchy::get_unbalancedGroup_attr() const
    {    
    return m_unbalancedGroup_attr;
    }

    bool CT_CacheHierarchy::has_hidden_attr() const
    {    
    return m_has_hidden_attr;
    }

    void CT_CacheHierarchy::set_hidden_attr(const XSD::boolean_& _hidden_attr)
    {    
    m_has_hidden_attr = true;
    m_hidden_attr = _hidden_attr;
    }

    const XSD::boolean_& CT_CacheHierarchy::get_hidden_attr() const
    {    
    return m_hidden_attr;
    }

CT_CacheHierarchy* CT_CacheHierarchy::default_instance_ = NULL;

    // CT_FieldsUsage
    CT_FieldsUsage::CT_FieldsUsage()
    :m_has_count_attr(false),
    m_count_attr(0)
    {
    }
    CT_FieldsUsage::~CT_FieldsUsage()
{
    clear();    }
    CT_FieldUsage* CT_FieldsUsage::add_fieldUsage()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_FieldUsage* pNewChild = pChildGroup->mutable_fieldUsage();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_FieldsUsage::clear()
    {    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_FieldsUsage::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_fieldUsage())
            {
                (*iter)->get_fieldUsage().toXmlElem("main:fieldUsage", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_FieldsUsage& CT_FieldsUsage::default_instance()
    {    
    if (!CT_FieldsUsage::default_instance_)
    {
        CT_FieldsUsage::default_instance_ = new CT_FieldsUsage();
    }
    return *CT_FieldsUsage::default_instance_;
    }

    bool CT_FieldsUsage::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void CT_FieldsUsage::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& CT_FieldsUsage::get_count_attr() const
    {    
    return m_count_attr;
    }


    // CT_FieldsUsage::ChildGroup_1
    CT_FieldsUsage::ChildGroup_1::ChildGroup_1()
    :m_has_fieldUsage(false),
    m_fieldUsage(NULL)
    {
    }
    bool CT_FieldsUsage::ChildGroup_1::has_fieldUsage() const
    {    
    return m_has_fieldUsage;
    }

    CT_FieldUsage* CT_FieldsUsage::ChildGroup_1::mutable_fieldUsage()
    {    
    
    m_has_fieldUsage = true;
    if (!m_fieldUsage)
    {
        m_fieldUsage = new CT_FieldUsage();
    }
    return m_fieldUsage;
    }

    const CT_FieldUsage& CT_FieldsUsage::ChildGroup_1::get_fieldUsage() const
    {    
    if (m_fieldUsage)
    {
        return *m_fieldUsage;
    }
    return CT_FieldUsage::default_instance();
    }

CT_FieldsUsage* CT_FieldsUsage::default_instance_ = NULL;

    // CT_FieldUsage
    CT_FieldUsage::CT_FieldUsage()
    :m_has_x_attr(false),
    m_x_attr(0)
    {
    }
    CT_FieldUsage::~CT_FieldUsage()
{
    clear();    }
    void CT_FieldUsage::clear()
    {    
    m_has_x_attr = false;
    m_x_attr = 0;
    }

    void CT_FieldUsage::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_x_attr)
    {
        _outStream << " " << "x" << "=\"" << m_x_attr << "\"";
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_FieldUsage& CT_FieldUsage::default_instance()
    {    
    if (!CT_FieldUsage::default_instance_)
    {
        CT_FieldUsage::default_instance_ = new CT_FieldUsage();
    }
    return *CT_FieldUsage::default_instance_;
    }

    bool CT_FieldUsage::has_x_attr() const
    {    
    return m_has_x_attr;
    }

    void CT_FieldUsage::set_x_attr(const XSD::int_& _x_attr)
    {    
    m_has_x_attr = true;
    m_x_attr = _x_attr;
    }

    const XSD::int_& CT_FieldUsage::get_x_attr() const
    {    
    return m_x_attr;
    }

CT_FieldUsage* CT_FieldUsage::default_instance_ = NULL;

    // CT_GroupLevels
    CT_GroupLevels::CT_GroupLevels()
    :m_has_count_attr(false),
    m_count_attr(0)
    {
    }
    CT_GroupLevels::~CT_GroupLevels()
{
    clear();    }
    CT_GroupLevel* CT_GroupLevels::add_groupLevel()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_GroupLevel* pNewChild = pChildGroup->mutable_groupLevel();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_GroupLevels::clear()
    {    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_GroupLevels::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_groupLevel())
            {
                (*iter)->get_groupLevel().toXmlElem("main:groupLevel", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_GroupLevels& CT_GroupLevels::default_instance()
    {    
    if (!CT_GroupLevels::default_instance_)
    {
        CT_GroupLevels::default_instance_ = new CT_GroupLevels();
    }
    return *CT_GroupLevels::default_instance_;
    }

    bool CT_GroupLevels::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void CT_GroupLevels::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& CT_GroupLevels::get_count_attr() const
    {    
    return m_count_attr;
    }


    // CT_GroupLevels::ChildGroup_1
    CT_GroupLevels::ChildGroup_1::ChildGroup_1()
    :m_has_groupLevel(false),
    m_groupLevel(NULL)
    {
    }
    bool CT_GroupLevels::ChildGroup_1::has_groupLevel() const
    {    
    return m_has_groupLevel;
    }

    CT_GroupLevel* CT_GroupLevels::ChildGroup_1::mutable_groupLevel()
    {    
    
    m_has_groupLevel = true;
    if (!m_groupLevel)
    {
        m_groupLevel = new CT_GroupLevel();
    }
    return m_groupLevel;
    }

    const CT_GroupLevel& CT_GroupLevels::ChildGroup_1::get_groupLevel() const
    {    
    if (m_groupLevel)
    {
        return *m_groupLevel;
    }
    return CT_GroupLevel::default_instance();
    }

CT_GroupLevels* CT_GroupLevels::default_instance_ = NULL;

    // CT_GroupLevel
    CT_GroupLevel::CT_GroupLevel()
    :m_has_groups(false),
    m_groups(NULL),
    m_has_extLst(false),
    m_extLst(NULL),
    m_has_uniqueName_attr(false),
    m_uniqueName_attr(NULL),
    m_has_caption_attr(false),
    m_caption_attr(NULL),
    m_has_user_attr(false),
    m_user_attr(false),
    m_has_customRollUp_attr(false),
    m_customRollUp_attr(false)
    {
    }
    CT_GroupLevel::~CT_GroupLevel()
{
    clear();    }
    bool CT_GroupLevel::has_groups() const
    {    
    return m_has_groups;
    }

    CT_Groups* CT_GroupLevel::mutable_groups()
    {    
    m_has_groups = true;
    if (!m_groups)
    {
        m_groups = new CT_Groups();
    }
    return m_groups;
    }

    const CT_Groups& CT_GroupLevel::get_groups() const
    {    
    if (m_groups)
    {
        return *m_groups;
    }
    return CT_Groups::default_instance();
    }

    bool CT_GroupLevel::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* CT_GroupLevel::mutable_extLst()
    {    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& CT_GroupLevel::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

    void CT_GroupLevel::clear()
    {    
    m_has_uniqueName_attr = false;
    
    if (m_uniqueName_attr)
    {
        delete m_uniqueName_attr;
        m_uniqueName_attr = NULL;
    }
    
    
    m_has_caption_attr = false;
    
    if (m_caption_attr)
    {
        delete m_caption_attr;
        m_caption_attr = NULL;
    }
    
    
    m_has_user_attr = false;
    m_user_attr = false;
    
    m_has_customRollUp_attr = false;
    m_customRollUp_attr = false;
    }

    void CT_GroupLevel::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_uniqueName_attr)
    {
        m_uniqueName_attr->toXmlAttr("uniqueName", _outStream);
    }
    
    
    if (m_has_caption_attr)
    {
        m_caption_attr->toXmlAttr("caption", _outStream);
    }
    
    
    if (m_has_user_attr)
    {
        _outStream << " " << "user" << "=\"" << XSD::XMLBooleanStr(m_user_attr) << "\"";
    }
    
    
    if (m_has_customRollUp_attr)
    {
        _outStream << " " << "customRollUp" << "=\"" << XSD::XMLBooleanStr(m_customRollUp_attr) << "\"";
    }
    
            _outStream << ">";
            
    if (m_has_groups)
    {
        m_groups->toXmlElem("main:groups", "", _outStream);;
    }
    
    if (m_has_extLst)
    {
        m_extLst->toXmlElem("main:extLst", "", _outStream);;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_GroupLevel& CT_GroupLevel::default_instance()
    {    
    if (!CT_GroupLevel::default_instance_)
    {
        CT_GroupLevel::default_instance_ = new CT_GroupLevel();
    }
    return *CT_GroupLevel::default_instance_;
    }

    bool CT_GroupLevel::has_uniqueName_attr() const
    {    
    return m_has_uniqueName_attr;
    }

    void CT_GroupLevel::set_uniqueName_attr(const ns_s::ST_Xstring& _uniqueName_attr)
    {    
    m_has_uniqueName_attr = true;
    m_uniqueName_attr = new ns_s::ST_Xstring(_uniqueName_attr);
    }

    const ns_s::ST_Xstring& CT_GroupLevel::get_uniqueName_attr() const
    {    
    if (m_uniqueName_attr)
    {
        return *m_uniqueName_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_GroupLevel::has_caption_attr() const
    {    
    return m_has_caption_attr;
    }

    void CT_GroupLevel::set_caption_attr(const ns_s::ST_Xstring& _caption_attr)
    {    
    m_has_caption_attr = true;
    m_caption_attr = new ns_s::ST_Xstring(_caption_attr);
    }

    const ns_s::ST_Xstring& CT_GroupLevel::get_caption_attr() const
    {    
    if (m_caption_attr)
    {
        return *m_caption_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_GroupLevel::has_user_attr() const
    {    
    return m_has_user_attr;
    }

    void CT_GroupLevel::set_user_attr(const XSD::boolean_& _user_attr)
    {    
    m_has_user_attr = true;
    m_user_attr = _user_attr;
    }

    const XSD::boolean_& CT_GroupLevel::get_user_attr() const
    {    
    return m_user_attr;
    }

    bool CT_GroupLevel::has_customRollUp_attr() const
    {    
    return m_has_customRollUp_attr;
    }

    void CT_GroupLevel::set_customRollUp_attr(const XSD::boolean_& _customRollUp_attr)
    {    
    m_has_customRollUp_attr = true;
    m_customRollUp_attr = _customRollUp_attr;
    }

    const XSD::boolean_& CT_GroupLevel::get_customRollUp_attr() const
    {    
    return m_customRollUp_attr;
    }

CT_GroupLevel* CT_GroupLevel::default_instance_ = NULL;

    // CT_Groups
    CT_Groups::CT_Groups()
    :m_has_count_attr(false),
    m_count_attr(0)
    {
    }
    CT_Groups::~CT_Groups()
{
    clear();    }
    CT_LevelGroup* CT_Groups::add_group()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_LevelGroup* pNewChild = pChildGroup->mutable_group();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_Groups::clear()
    {    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_Groups::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_group())
            {
                (*iter)->get_group().toXmlElem("main:group", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_Groups& CT_Groups::default_instance()
    {    
    if (!CT_Groups::default_instance_)
    {
        CT_Groups::default_instance_ = new CT_Groups();
    }
    return *CT_Groups::default_instance_;
    }

    bool CT_Groups::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void CT_Groups::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& CT_Groups::get_count_attr() const
    {    
    return m_count_attr;
    }


    // CT_Groups::ChildGroup_1
    CT_Groups::ChildGroup_1::ChildGroup_1()
    :m_has_group(false),
    m_group(NULL)
    {
    }
    bool CT_Groups::ChildGroup_1::has_group() const
    {    
    return m_has_group;
    }

    CT_LevelGroup* CT_Groups::ChildGroup_1::mutable_group()
    {    
    
    m_has_group = true;
    if (!m_group)
    {
        m_group = new CT_LevelGroup();
    }
    return m_group;
    }

    const CT_LevelGroup& CT_Groups::ChildGroup_1::get_group() const
    {    
    if (m_group)
    {
        return *m_group;
    }
    return CT_LevelGroup::default_instance();
    }

CT_Groups* CT_Groups::default_instance_ = NULL;

    // CT_LevelGroup
    CT_LevelGroup::CT_LevelGroup()
    :m_has_groupMembers(false),
    m_groupMembers(NULL),
    m_has_name_attr(false),
    m_name_attr(NULL),
    m_has_uniqueName_attr(false),
    m_uniqueName_attr(NULL),
    m_has_caption_attr(false),
    m_caption_attr(NULL),
    m_has_uniqueParent_attr(false),
    m_uniqueParent_attr(NULL),
    m_has_id_attr(false),
    m_id_attr(0)
    {
    }
    CT_LevelGroup::~CT_LevelGroup()
{
    clear();    }
    bool CT_LevelGroup::has_groupMembers() const
    {    
    return m_has_groupMembers;
    }

    CT_GroupMembers* CT_LevelGroup::mutable_groupMembers()
    {    
    m_has_groupMembers = true;
    if (!m_groupMembers)
    {
        m_groupMembers = new CT_GroupMembers();
    }
    return m_groupMembers;
    }

    const CT_GroupMembers& CT_LevelGroup::get_groupMembers() const
    {    
    if (m_groupMembers)
    {
        return *m_groupMembers;
    }
    return CT_GroupMembers::default_instance();
    }

    void CT_LevelGroup::clear()
    {    
    m_has_name_attr = false;
    
    if (m_name_attr)
    {
        delete m_name_attr;
        m_name_attr = NULL;
    }
    
    
    m_has_uniqueName_attr = false;
    
    if (m_uniqueName_attr)
    {
        delete m_uniqueName_attr;
        m_uniqueName_attr = NULL;
    }
    
    
    m_has_caption_attr = false;
    
    if (m_caption_attr)
    {
        delete m_caption_attr;
        m_caption_attr = NULL;
    }
    
    
    m_has_uniqueParent_attr = false;
    
    if (m_uniqueParent_attr)
    {
        delete m_uniqueParent_attr;
        m_uniqueParent_attr = NULL;
    }
    
    
    m_has_id_attr = false;
    m_id_attr = 0;
    }

    void CT_LevelGroup::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_name_attr)
    {
        m_name_attr->toXmlAttr("name", _outStream);
    }
    
    
    if (m_has_uniqueName_attr)
    {
        m_uniqueName_attr->toXmlAttr("uniqueName", _outStream);
    }
    
    
    if (m_has_caption_attr)
    {
        m_caption_attr->toXmlAttr("caption", _outStream);
    }
    
    
    if (m_has_uniqueParent_attr)
    {
        m_uniqueParent_attr->toXmlAttr("uniqueParent", _outStream);
    }
    
    
    if (m_has_id_attr)
    {
        _outStream << " " << "id" << "=\"" << m_id_attr << "\"";
    }
    
            _outStream << ">";
            
    if (m_has_groupMembers)
    {
        m_groupMembers->toXmlElem("main:groupMembers", "", _outStream);;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_LevelGroup& CT_LevelGroup::default_instance()
    {    
    if (!CT_LevelGroup::default_instance_)
    {
        CT_LevelGroup::default_instance_ = new CT_LevelGroup();
    }
    return *CT_LevelGroup::default_instance_;
    }

    bool CT_LevelGroup::has_name_attr() const
    {    
    return m_has_name_attr;
    }

    void CT_LevelGroup::set_name_attr(const ns_s::ST_Xstring& _name_attr)
    {    
    m_has_name_attr = true;
    m_name_attr = new ns_s::ST_Xstring(_name_attr);
    }

    const ns_s::ST_Xstring& CT_LevelGroup::get_name_attr() const
    {    
    if (m_name_attr)
    {
        return *m_name_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_LevelGroup::has_uniqueName_attr() const
    {    
    return m_has_uniqueName_attr;
    }

    void CT_LevelGroup::set_uniqueName_attr(const ns_s::ST_Xstring& _uniqueName_attr)
    {    
    m_has_uniqueName_attr = true;
    m_uniqueName_attr = new ns_s::ST_Xstring(_uniqueName_attr);
    }

    const ns_s::ST_Xstring& CT_LevelGroup::get_uniqueName_attr() const
    {    
    if (m_uniqueName_attr)
    {
        return *m_uniqueName_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_LevelGroup::has_caption_attr() const
    {    
    return m_has_caption_attr;
    }

    void CT_LevelGroup::set_caption_attr(const ns_s::ST_Xstring& _caption_attr)
    {    
    m_has_caption_attr = true;
    m_caption_attr = new ns_s::ST_Xstring(_caption_attr);
    }

    const ns_s::ST_Xstring& CT_LevelGroup::get_caption_attr() const
    {    
    if (m_caption_attr)
    {
        return *m_caption_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_LevelGroup::has_uniqueParent_attr() const
    {    
    return m_has_uniqueParent_attr;
    }

    void CT_LevelGroup::set_uniqueParent_attr(const ns_s::ST_Xstring& _uniqueParent_attr)
    {    
    m_has_uniqueParent_attr = true;
    m_uniqueParent_attr = new ns_s::ST_Xstring(_uniqueParent_attr);
    }

    const ns_s::ST_Xstring& CT_LevelGroup::get_uniqueParent_attr() const
    {    
    if (m_uniqueParent_attr)
    {
        return *m_uniqueParent_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_LevelGroup::has_id_attr() const
    {    
    return m_has_id_attr;
    }

    void CT_LevelGroup::set_id_attr(const XSD::int_& _id_attr)
    {    
    m_has_id_attr = true;
    m_id_attr = _id_attr;
    }

    const XSD::int_& CT_LevelGroup::get_id_attr() const
    {    
    return m_id_attr;
    }

CT_LevelGroup* CT_LevelGroup::default_instance_ = NULL;

    // CT_GroupMembers
    CT_GroupMembers::CT_GroupMembers()
    :m_has_count_attr(false),
    m_count_attr(0)
    {
    }
    CT_GroupMembers::~CT_GroupMembers()
{
    clear();    }
    CT_GroupMember* CT_GroupMembers::add_groupMember()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_GroupMember* pNewChild = pChildGroup->mutable_groupMember();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_GroupMembers::clear()
    {    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_GroupMembers::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_groupMember())
            {
                (*iter)->get_groupMember().toXmlElem("main:groupMember", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_GroupMembers& CT_GroupMembers::default_instance()
    {    
    if (!CT_GroupMembers::default_instance_)
    {
        CT_GroupMembers::default_instance_ = new CT_GroupMembers();
    }
    return *CT_GroupMembers::default_instance_;
    }

    bool CT_GroupMembers::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void CT_GroupMembers::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& CT_GroupMembers::get_count_attr() const
    {    
    return m_count_attr;
    }


    // CT_GroupMembers::ChildGroup_1
    CT_GroupMembers::ChildGroup_1::ChildGroup_1()
    :m_has_groupMember(false),
    m_groupMember(NULL)
    {
    }
    bool CT_GroupMembers::ChildGroup_1::has_groupMember() const
    {    
    return m_has_groupMember;
    }

    CT_GroupMember* CT_GroupMembers::ChildGroup_1::mutable_groupMember()
    {    
    
    m_has_groupMember = true;
    if (!m_groupMember)
    {
        m_groupMember = new CT_GroupMember();
    }
    return m_groupMember;
    }

    const CT_GroupMember& CT_GroupMembers::ChildGroup_1::get_groupMember() const
    {    
    if (m_groupMember)
    {
        return *m_groupMember;
    }
    return CT_GroupMember::default_instance();
    }

CT_GroupMembers* CT_GroupMembers::default_instance_ = NULL;

    // CT_GroupMember
    CT_GroupMember::CT_GroupMember()
    :m_has_uniqueName_attr(false),
    m_uniqueName_attr(NULL),
    m_has_group_attr(false),
    m_group_attr(false)
    {
    }
    CT_GroupMember::~CT_GroupMember()
{
    clear();    }
    void CT_GroupMember::clear()
    {    
    m_has_uniqueName_attr = false;
    
    if (m_uniqueName_attr)
    {
        delete m_uniqueName_attr;
        m_uniqueName_attr = NULL;
    }
    
    
    m_has_group_attr = false;
    m_group_attr = false;
    }

    void CT_GroupMember::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_uniqueName_attr)
    {
        m_uniqueName_attr->toXmlAttr("uniqueName", _outStream);
    }
    
    
    if (m_has_group_attr)
    {
        _outStream << " " << "group" << "=\"" << XSD::XMLBooleanStr(m_group_attr) << "\"";
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_GroupMember& CT_GroupMember::default_instance()
    {    
    if (!CT_GroupMember::default_instance_)
    {
        CT_GroupMember::default_instance_ = new CT_GroupMember();
    }
    return *CT_GroupMember::default_instance_;
    }

    bool CT_GroupMember::has_uniqueName_attr() const
    {    
    return m_has_uniqueName_attr;
    }

    void CT_GroupMember::set_uniqueName_attr(const ns_s::ST_Xstring& _uniqueName_attr)
    {    
    m_has_uniqueName_attr = true;
    m_uniqueName_attr = new ns_s::ST_Xstring(_uniqueName_attr);
    }

    const ns_s::ST_Xstring& CT_GroupMember::get_uniqueName_attr() const
    {    
    if (m_uniqueName_attr)
    {
        return *m_uniqueName_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_GroupMember::has_group_attr() const
    {    
    return m_has_group_attr;
    }

    void CT_GroupMember::set_group_attr(const XSD::boolean_& _group_attr)
    {    
    m_has_group_attr = true;
    m_group_attr = _group_attr;
    }

    const XSD::boolean_& CT_GroupMember::get_group_attr() const
    {    
    return m_group_attr;
    }

CT_GroupMember* CT_GroupMember::default_instance_ = NULL;

    // CT_TupleCache
    CT_TupleCache::CT_TupleCache()
    :m_has_entries(false),
    m_entries(NULL),
    m_has_sets(false),
    m_sets(NULL),
    m_has_queryCache(false),
    m_queryCache(NULL),
    m_has_serverFormats(false),
    m_serverFormats(NULL),
    m_has_extLst(false),
    m_extLst(NULL)
    {
    }
    CT_TupleCache::~CT_TupleCache()
{
    clear();    }
    bool CT_TupleCache::has_entries() const
    {    
    return m_has_entries;
    }

    CT_PCDSDTCEntries* CT_TupleCache::mutable_entries()
    {    
    m_has_entries = true;
    if (!m_entries)
    {
        m_entries = new CT_PCDSDTCEntries();
    }
    return m_entries;
    }

    const CT_PCDSDTCEntries& CT_TupleCache::get_entries() const
    {    
    if (m_entries)
    {
        return *m_entries;
    }
    return CT_PCDSDTCEntries::default_instance();
    }

    bool CT_TupleCache::has_sets() const
    {    
    return m_has_sets;
    }

    CT_Sets* CT_TupleCache::mutable_sets()
    {    
    m_has_sets = true;
    if (!m_sets)
    {
        m_sets = new CT_Sets();
    }
    return m_sets;
    }

    const CT_Sets& CT_TupleCache::get_sets() const
    {    
    if (m_sets)
    {
        return *m_sets;
    }
    return CT_Sets::default_instance();
    }

    bool CT_TupleCache::has_queryCache() const
    {    
    return m_has_queryCache;
    }

    CT_QueryCache* CT_TupleCache::mutable_queryCache()
    {    
    m_has_queryCache = true;
    if (!m_queryCache)
    {
        m_queryCache = new CT_QueryCache();
    }
    return m_queryCache;
    }

    const CT_QueryCache& CT_TupleCache::get_queryCache() const
    {    
    if (m_queryCache)
    {
        return *m_queryCache;
    }
    return CT_QueryCache::default_instance();
    }

    bool CT_TupleCache::has_serverFormats() const
    {    
    return m_has_serverFormats;
    }

    CT_ServerFormats* CT_TupleCache::mutable_serverFormats()
    {    
    m_has_serverFormats = true;
    if (!m_serverFormats)
    {
        m_serverFormats = new CT_ServerFormats();
    }
    return m_serverFormats;
    }

    const CT_ServerFormats& CT_TupleCache::get_serverFormats() const
    {    
    if (m_serverFormats)
    {
        return *m_serverFormats;
    }
    return CT_ServerFormats::default_instance();
    }

    bool CT_TupleCache::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* CT_TupleCache::mutable_extLst()
    {    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& CT_TupleCache::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

    void CT_TupleCache::clear()
    {    }

    void CT_TupleCache::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
            _outStream << ">";
            
    if (m_has_entries)
    {
        m_entries->toXmlElem("main:entries", "", _outStream);;
    }
    
    if (m_has_sets)
    {
        m_sets->toXmlElem("main:sets", "", _outStream);;
    }
    
    if (m_has_queryCache)
    {
        m_queryCache->toXmlElem("main:queryCache", "", _outStream);;
    }
    
    if (m_has_serverFormats)
    {
        m_serverFormats->toXmlElem("main:serverFormats", "", _outStream);;
    }
    
    if (m_has_extLst)
    {
        m_extLst->toXmlElem("main:extLst", "", _outStream);;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_TupleCache& CT_TupleCache::default_instance()
    {    
    if (!CT_TupleCache::default_instance_)
    {
        CT_TupleCache::default_instance_ = new CT_TupleCache();
    }
    return *CT_TupleCache::default_instance_;
    }

CT_TupleCache* CT_TupleCache::default_instance_ = NULL;

    // CT_ServerFormat
    CT_ServerFormat::CT_ServerFormat()
    :m_has_culture_attr(false),
    m_culture_attr(NULL),
    m_has_format_attr(false),
    m_format_attr(NULL)
    {
    }
    CT_ServerFormat::~CT_ServerFormat()
{
    clear();    }
    void CT_ServerFormat::clear()
    {    
    m_has_culture_attr = false;
    
    if (m_culture_attr)
    {
        delete m_culture_attr;
        m_culture_attr = NULL;
    }
    
    
    m_has_format_attr = false;
    
    if (m_format_attr)
    {
        delete m_format_attr;
        m_format_attr = NULL;
    }
    
    }

    void CT_ServerFormat::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_culture_attr)
    {
        m_culture_attr->toXmlAttr("culture", _outStream);
    }
    
    
    if (m_has_format_attr)
    {
        m_format_attr->toXmlAttr("format", _outStream);
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_ServerFormat& CT_ServerFormat::default_instance()
    {    
    if (!CT_ServerFormat::default_instance_)
    {
        CT_ServerFormat::default_instance_ = new CT_ServerFormat();
    }
    return *CT_ServerFormat::default_instance_;
    }

    bool CT_ServerFormat::has_culture_attr() const
    {    
    return m_has_culture_attr;
    }

    void CT_ServerFormat::set_culture_attr(const ns_s::ST_Xstring& _culture_attr)
    {    
    m_has_culture_attr = true;
    m_culture_attr = new ns_s::ST_Xstring(_culture_attr);
    }

    const ns_s::ST_Xstring& CT_ServerFormat::get_culture_attr() const
    {    
    if (m_culture_attr)
    {
        return *m_culture_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_ServerFormat::has_format_attr() const
    {    
    return m_has_format_attr;
    }

    void CT_ServerFormat::set_format_attr(const ns_s::ST_Xstring& _format_attr)
    {    
    m_has_format_attr = true;
    m_format_attr = new ns_s::ST_Xstring(_format_attr);
    }

    const ns_s::ST_Xstring& CT_ServerFormat::get_format_attr() const
    {    
    if (m_format_attr)
    {
        return *m_format_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

CT_ServerFormat* CT_ServerFormat::default_instance_ = NULL;

    // CT_ServerFormats
    CT_ServerFormats::CT_ServerFormats()
    :m_has_count_attr(false),
    m_count_attr(0)
    {
    }
    CT_ServerFormats::~CT_ServerFormats()
{
    clear();    }
    CT_ServerFormat* CT_ServerFormats::add_serverFormat()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_ServerFormat* pNewChild = pChildGroup->mutable_serverFormat();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_ServerFormats::clear()
    {    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_ServerFormats::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_serverFormat())
            {
                (*iter)->get_serverFormat().toXmlElem("main:serverFormat", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_ServerFormats& CT_ServerFormats::default_instance()
    {    
    if (!CT_ServerFormats::default_instance_)
    {
        CT_ServerFormats::default_instance_ = new CT_ServerFormats();
    }
    return *CT_ServerFormats::default_instance_;
    }

    bool CT_ServerFormats::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void CT_ServerFormats::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& CT_ServerFormats::get_count_attr() const
    {    
    return m_count_attr;
    }


    // CT_ServerFormats::ChildGroup_1
    CT_ServerFormats::ChildGroup_1::ChildGroup_1()
    :m_has_serverFormat(false),
    m_serverFormat(NULL)
    {
    }
    bool CT_ServerFormats::ChildGroup_1::has_serverFormat() const
    {    
    return m_has_serverFormat;
    }

    CT_ServerFormat* CT_ServerFormats::ChildGroup_1::mutable_serverFormat()
    {    
    
    m_has_serverFormat = true;
    if (!m_serverFormat)
    {
        m_serverFormat = new CT_ServerFormat();
    }
    return m_serverFormat;
    }

    const CT_ServerFormat& CT_ServerFormats::ChildGroup_1::get_serverFormat() const
    {    
    if (m_serverFormat)
    {
        return *m_serverFormat;
    }
    return CT_ServerFormat::default_instance();
    }

CT_ServerFormats* CT_ServerFormats::default_instance_ = NULL;

    // CT_PCDSDTCEntries
    CT_PCDSDTCEntries::CT_PCDSDTCEntries()
    :m_has_count_attr(false),
    m_count_attr(0)
    {
    }
    CT_PCDSDTCEntries::~CT_PCDSDTCEntries()
{
    clear();    }
    CT_Missing* CT_PCDSDTCEntries::add_m()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Missing* pNewChild = pChildGroup->mutable_m();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_Number* CT_PCDSDTCEntries::add_n()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Number* pNewChild = pChildGroup->mutable_n();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_Error* CT_PCDSDTCEntries::add_e()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Error* pNewChild = pChildGroup->mutable_e();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_String* CT_PCDSDTCEntries::add_s()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_String* pNewChild = pChildGroup->mutable_s();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_PCDSDTCEntries::clear()
    {    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_PCDSDTCEntries::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_m())
            {
                (*iter)->get_m().toXmlElem("main:m", "", _outStream);
            }
            else if ((*iter)->has_n())
            {
                (*iter)->get_n().toXmlElem("main:n", "", _outStream);
            }
            else if ((*iter)->has_e())
            {
                (*iter)->get_e().toXmlElem("main:e", "", _outStream);
            }
            else if ((*iter)->has_s())
            {
                (*iter)->get_s().toXmlElem("main:s", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_PCDSDTCEntries& CT_PCDSDTCEntries::default_instance()
    {    
    if (!CT_PCDSDTCEntries::default_instance_)
    {
        CT_PCDSDTCEntries::default_instance_ = new CT_PCDSDTCEntries();
    }
    return *CT_PCDSDTCEntries::default_instance_;
    }

    bool CT_PCDSDTCEntries::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void CT_PCDSDTCEntries::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& CT_PCDSDTCEntries::get_count_attr() const
    {    
    return m_count_attr;
    }


    // CT_PCDSDTCEntries::ChildGroup_1
    CT_PCDSDTCEntries::ChildGroup_1::ChildGroup_1()
    :m_has_m(false),
    m_m(NULL),
    m_has_n(false),
    m_n(NULL),
    m_has_e(false),
    m_e(NULL),
    m_has_s(false),
    m_s(NULL)
    {
    }
    bool CT_PCDSDTCEntries::ChildGroup_1::has_m() const
    {    
    return m_has_m;
    }

    CT_Missing* CT_PCDSDTCEntries::ChildGroup_1::mutable_m()
    {    
    
    m_has_n = false;
    
    if (m_n)
    {
        delete m_n;
        m_n = NULL;
    }
    ;
    
    m_has_e = false;
    
    if (m_e)
    {
        delete m_e;
        m_e = NULL;
    }
    ;
    
    m_has_s = false;
    
    if (m_s)
    {
        delete m_s;
        m_s = NULL;
    }
    ;
    
    m_has_m = true;
    if (!m_m)
    {
        m_m = new CT_Missing();
    }
    return m_m;
    }

    const CT_Missing& CT_PCDSDTCEntries::ChildGroup_1::get_m() const
    {    
    if (m_m)
    {
        return *m_m;
    }
    return CT_Missing::default_instance();
    }

    bool CT_PCDSDTCEntries::ChildGroup_1::has_n() const
    {    
    return m_has_n;
    }

    CT_Number* CT_PCDSDTCEntries::ChildGroup_1::mutable_n()
    {    
    
    m_has_m = false;
    
    if (m_m)
    {
        delete m_m;
        m_m = NULL;
    }
    ;
    
    m_has_e = false;
    
    if (m_e)
    {
        delete m_e;
        m_e = NULL;
    }
    ;
    
    m_has_s = false;
    
    if (m_s)
    {
        delete m_s;
        m_s = NULL;
    }
    ;
    
    m_has_n = true;
    if (!m_n)
    {
        m_n = new CT_Number();
    }
    return m_n;
    }

    const CT_Number& CT_PCDSDTCEntries::ChildGroup_1::get_n() const
    {    
    if (m_n)
    {
        return *m_n;
    }
    return CT_Number::default_instance();
    }

    bool CT_PCDSDTCEntries::ChildGroup_1::has_e() const
    {    
    return m_has_e;
    }

    CT_Error* CT_PCDSDTCEntries::ChildGroup_1::mutable_e()
    {    
    
    m_has_m = false;
    
    if (m_m)
    {
        delete m_m;
        m_m = NULL;
    }
    ;
    
    m_has_n = false;
    
    if (m_n)
    {
        delete m_n;
        m_n = NULL;
    }
    ;
    
    m_has_s = false;
    
    if (m_s)
    {
        delete m_s;
        m_s = NULL;
    }
    ;
    
    m_has_e = true;
    if (!m_e)
    {
        m_e = new CT_Error();
    }
    return m_e;
    }

    const CT_Error& CT_PCDSDTCEntries::ChildGroup_1::get_e() const
    {    
    if (m_e)
    {
        return *m_e;
    }
    return CT_Error::default_instance();
    }

    bool CT_PCDSDTCEntries::ChildGroup_1::has_s() const
    {    
    return m_has_s;
    }

    CT_String* CT_PCDSDTCEntries::ChildGroup_1::mutable_s()
    {    
    
    m_has_m = false;
    
    if (m_m)
    {
        delete m_m;
        m_m = NULL;
    }
    ;
    
    m_has_n = false;
    
    if (m_n)
    {
        delete m_n;
        m_n = NULL;
    }
    ;
    
    m_has_e = false;
    
    if (m_e)
    {
        delete m_e;
        m_e = NULL;
    }
    ;
    
    m_has_s = true;
    if (!m_s)
    {
        m_s = new CT_String();
    }
    return m_s;
    }

    const CT_String& CT_PCDSDTCEntries::ChildGroup_1::get_s() const
    {    
    if (m_s)
    {
        return *m_s;
    }
    return CT_String::default_instance();
    }

CT_PCDSDTCEntries* CT_PCDSDTCEntries::default_instance_ = NULL;

    // CT_Tuples
    CT_Tuples::CT_Tuples()
    :m_has_c_attr(false),
    m_c_attr(0)
    {
    }
    CT_Tuples::~CT_Tuples()
{
    clear();    }
    CT_Tuple* CT_Tuples::add_tpl()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Tuple* pNewChild = pChildGroup->mutable_tpl();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_Tuples::clear()
    {    
    m_has_c_attr = false;
    m_c_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_Tuples::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_c_attr)
    {
        _outStream << " " << "c" << "=\"" << m_c_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_tpl())
            {
                (*iter)->get_tpl().toXmlElem("main:tpl", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_Tuples& CT_Tuples::default_instance()
    {    
    if (!CT_Tuples::default_instance_)
    {
        CT_Tuples::default_instance_ = new CT_Tuples();
    }
    return *CT_Tuples::default_instance_;
    }

    bool CT_Tuples::has_c_attr() const
    {    
    return m_has_c_attr;
    }

    void CT_Tuples::set_c_attr(const XSD::unsignedInt_& _c_attr)
    {    
    m_has_c_attr = true;
    m_c_attr = _c_attr;
    }

    const XSD::unsignedInt_& CT_Tuples::get_c_attr() const
    {    
    return m_c_attr;
    }


    // CT_Tuples::ChildGroup_1
    CT_Tuples::ChildGroup_1::ChildGroup_1()
    :m_has_tpl(false),
    m_tpl(NULL)
    {
    }
    bool CT_Tuples::ChildGroup_1::has_tpl() const
    {    
    return m_has_tpl;
    }

    CT_Tuple* CT_Tuples::ChildGroup_1::mutable_tpl()
    {    
    
    m_has_tpl = true;
    if (!m_tpl)
    {
        m_tpl = new CT_Tuple();
    }
    return m_tpl;
    }

    const CT_Tuple& CT_Tuples::ChildGroup_1::get_tpl() const
    {    
    if (m_tpl)
    {
        return *m_tpl;
    }
    return CT_Tuple::default_instance();
    }

CT_Tuples* CT_Tuples::default_instance_ = NULL;

    // CT_Tuple
    CT_Tuple::CT_Tuple()
    :m_has_fld_attr(false),
    m_fld_attr(0),
    m_has_hier_attr(false),
    m_hier_attr(0),
    m_has_item_attr(false),
    m_item_attr(0)
    {
    }
    CT_Tuple::~CT_Tuple()
{
    clear();    }
    void CT_Tuple::clear()
    {    
    m_has_fld_attr = false;
    m_fld_attr = 0;
    
    m_has_hier_attr = false;
    m_hier_attr = 0;
    
    m_has_item_attr = false;
    m_item_attr = 0;
    }

    void CT_Tuple::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_fld_attr)
    {
        _outStream << " " << "fld" << "=\"" << m_fld_attr << "\"";
    }
    
    
    if (m_has_hier_attr)
    {
        _outStream << " " << "hier" << "=\"" << m_hier_attr << "\"";
    }
    
    
    if (m_has_item_attr)
    {
        _outStream << " " << "item" << "=\"" << m_item_attr << "\"";
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_Tuple& CT_Tuple::default_instance()
    {    
    if (!CT_Tuple::default_instance_)
    {
        CT_Tuple::default_instance_ = new CT_Tuple();
    }
    return *CT_Tuple::default_instance_;
    }

    bool CT_Tuple::has_fld_attr() const
    {    
    return m_has_fld_attr;
    }

    void CT_Tuple::set_fld_attr(const XSD::unsignedInt_& _fld_attr)
    {    
    m_has_fld_attr = true;
    m_fld_attr = _fld_attr;
    }

    const XSD::unsignedInt_& CT_Tuple::get_fld_attr() const
    {    
    return m_fld_attr;
    }

    bool CT_Tuple::has_hier_attr() const
    {    
    return m_has_hier_attr;
    }

    void CT_Tuple::set_hier_attr(const XSD::unsignedInt_& _hier_attr)
    {    
    m_has_hier_attr = true;
    m_hier_attr = _hier_attr;
    }

    const XSD::unsignedInt_& CT_Tuple::get_hier_attr() const
    {    
    return m_hier_attr;
    }

    bool CT_Tuple::has_item_attr() const
    {    
    return m_has_item_attr;
    }

    void CT_Tuple::set_item_attr(const XSD::unsignedInt_& _item_attr)
    {    
    m_has_item_attr = true;
    m_item_attr = _item_attr;
    }

    const XSD::unsignedInt_& CT_Tuple::get_item_attr() const
    {    
    return m_item_attr;
    }

CT_Tuple* CT_Tuple::default_instance_ = NULL;

    // CT_Sets
    CT_Sets::CT_Sets()
    :m_has_count_attr(false),
    m_count_attr(0)
    {
    }
    CT_Sets::~CT_Sets()
{
    clear();    }
    CT_Set* CT_Sets::add_set()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Set* pNewChild = pChildGroup->mutable_set();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_Sets::clear()
    {    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_Sets::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_set())
            {
                (*iter)->get_set().toXmlElem("main:set", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_Sets& CT_Sets::default_instance()
    {    
    if (!CT_Sets::default_instance_)
    {
        CT_Sets::default_instance_ = new CT_Sets();
    }
    return *CT_Sets::default_instance_;
    }

    bool CT_Sets::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void CT_Sets::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& CT_Sets::get_count_attr() const
    {    
    return m_count_attr;
    }


    // CT_Sets::ChildGroup_1
    CT_Sets::ChildGroup_1::ChildGroup_1()
    :m_has_set(false),
    m_set(NULL)
    {
    }
    bool CT_Sets::ChildGroup_1::has_set() const
    {    
    return m_has_set;
    }

    CT_Set* CT_Sets::ChildGroup_1::mutable_set()
    {    
    
    m_has_set = true;
    if (!m_set)
    {
        m_set = new CT_Set();
    }
    return m_set;
    }

    const CT_Set& CT_Sets::ChildGroup_1::get_set() const
    {    
    if (m_set)
    {
        return *m_set;
    }
    return CT_Set::default_instance();
    }

CT_Sets* CT_Sets::default_instance_ = NULL;

    // CT_Set
    CT_Set::CT_Set()
    :m_has_count_attr(false),
    m_count_attr(0),
    m_has_maxRank_attr(false),
    m_maxRank_attr(0),
    m_has_setDefinition_attr(false),
    m_setDefinition_attr(NULL),
    m_has_sortType_attr(false),
    m_sortType_attr(NULL),
    m_has_queryFailed_attr(false),
    m_queryFailed_attr(false)
    {
    }
    CT_Set::~CT_Set()
{
    clear();    }
    CT_Tuples* CT_Set::add_tpls()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Tuples* pNewChild = pChildGroup->mutable_tpls();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_Tuples* CT_Set::add_sortByTuple()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Tuples* pNewChild = pChildGroup->mutable_sortByTuple();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_Set::clear()
    {    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    m_has_maxRank_attr = false;
    m_maxRank_attr = 0;
    
    m_has_setDefinition_attr = false;
    
    if (m_setDefinition_attr)
    {
        delete m_setDefinition_attr;
        m_setDefinition_attr = NULL;
    }
    
    
    m_has_sortType_attr = false;
    
    if (m_sortType_attr)
    {
        delete m_sortType_attr;
        m_sortType_attr = NULL;
    }
    
    
    m_has_queryFailed_attr = false;
    m_queryFailed_attr = false;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_Set::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
    
    if (m_has_maxRank_attr)
    {
        _outStream << " " << "maxRank" << "=\"" << m_maxRank_attr << "\"";
    }
    
    
    if (m_has_setDefinition_attr)
    {
        m_setDefinition_attr->toXmlAttr("setDefinition", _outStream);
    }
    
    
    if (m_has_sortType_attr)
    {
        m_sortType_attr->toXmlAttr("sortType", _outStream);
    }
    
    
    if (m_has_queryFailed_attr)
    {
        _outStream << " " << "queryFailed" << "=\"" << XSD::XMLBooleanStr(m_queryFailed_attr) << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_tpls())
            {
                (*iter)->get_tpls().toXmlElem("main:tpls", "", _outStream);
            }
            else if ((*iter)->has_sortByTuple())
            {
                (*iter)->get_sortByTuple().toXmlElem("main:sortByTuple", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_Set& CT_Set::default_instance()
    {    
    if (!CT_Set::default_instance_)
    {
        CT_Set::default_instance_ = new CT_Set();
    }
    return *CT_Set::default_instance_;
    }

    bool CT_Set::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void CT_Set::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& CT_Set::get_count_attr() const
    {    
    return m_count_attr;
    }

    bool CT_Set::has_maxRank_attr() const
    {    
    return m_has_maxRank_attr;
    }

    void CT_Set::set_maxRank_attr(const XSD::int_& _maxRank_attr)
    {    
    m_has_maxRank_attr = true;
    m_maxRank_attr = _maxRank_attr;
    }

    const XSD::int_& CT_Set::get_maxRank_attr() const
    {    
    return m_maxRank_attr;
    }

    bool CT_Set::has_setDefinition_attr() const
    {    
    return m_has_setDefinition_attr;
    }

    void CT_Set::set_setDefinition_attr(const ns_s::ST_Xstring& _setDefinition_attr)
    {    
    m_has_setDefinition_attr = true;
    m_setDefinition_attr = new ns_s::ST_Xstring(_setDefinition_attr);
    }

    const ns_s::ST_Xstring& CT_Set::get_setDefinition_attr() const
    {    
    if (m_setDefinition_attr)
    {
        return *m_setDefinition_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_Set::has_sortType_attr() const
    {    
    return m_has_sortType_attr;
    }

    void CT_Set::set_sortType_attr(const ST_SortType& _sortType_attr)
    {    
    m_has_sortType_attr = true;
    m_sortType_attr = new ST_SortType(_sortType_attr);
    }

    const ST_SortType& CT_Set::get_sortType_attr() const
    {    
    if (m_sortType_attr)
    {
        return *m_sortType_attr;
    }
    return ST_SortType::default_instance();
    }

    bool CT_Set::has_queryFailed_attr() const
    {    
    return m_has_queryFailed_attr;
    }

    void CT_Set::set_queryFailed_attr(const XSD::boolean_& _queryFailed_attr)
    {    
    m_has_queryFailed_attr = true;
    m_queryFailed_attr = _queryFailed_attr;
    }

    const XSD::boolean_& CT_Set::get_queryFailed_attr() const
    {    
    return m_queryFailed_attr;
    }


    // CT_Set::ChildGroup_1
    CT_Set::ChildGroup_1::ChildGroup_1()
    :m_has_tpls(false),
    m_tpls(NULL),
    m_has_sortByTuple(false),
    m_sortByTuple(NULL)
    {
    }
    bool CT_Set::ChildGroup_1::has_tpls() const
    {    
    return m_has_tpls;
    }

    CT_Tuples* CT_Set::ChildGroup_1::mutable_tpls()
    {    
    
    m_has_sortByTuple = false;
    
    if (m_sortByTuple)
    {
        delete m_sortByTuple;
        m_sortByTuple = NULL;
    }
    ;
    
    m_has_tpls = true;
    if (!m_tpls)
    {
        m_tpls = new CT_Tuples();
    }
    return m_tpls;
    }

    const CT_Tuples& CT_Set::ChildGroup_1::get_tpls() const
    {    
    if (m_tpls)
    {
        return *m_tpls;
    }
    return CT_Tuples::default_instance();
    }

    bool CT_Set::ChildGroup_1::has_sortByTuple() const
    {    
    return m_has_sortByTuple;
    }

    CT_Tuples* CT_Set::ChildGroup_1::mutable_sortByTuple()
    {    
    
    m_has_tpls = false;
    
    if (m_tpls)
    {
        delete m_tpls;
        m_tpls = NULL;
    }
    ;
    
    m_has_sortByTuple = true;
    if (!m_sortByTuple)
    {
        m_sortByTuple = new CT_Tuples();
    }
    return m_sortByTuple;
    }

    const CT_Tuples& CT_Set::ChildGroup_1::get_sortByTuple() const
    {    
    if (m_sortByTuple)
    {
        return *m_sortByTuple;
    }
    return CT_Tuples::default_instance();
    }

CT_Set* CT_Set::default_instance_ = NULL;

    // CT_QueryCache
    CT_QueryCache::CT_QueryCache()
    :m_has_count_attr(false),
    m_count_attr(0)
    {
    }
    CT_QueryCache::~CT_QueryCache()
{
    clear();    }
    CT_Query* CT_QueryCache::add_query()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Query* pNewChild = pChildGroup->mutable_query();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_QueryCache::clear()
    {    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_QueryCache::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_query())
            {
                (*iter)->get_query().toXmlElem("main:query", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_QueryCache& CT_QueryCache::default_instance()
    {    
    if (!CT_QueryCache::default_instance_)
    {
        CT_QueryCache::default_instance_ = new CT_QueryCache();
    }
    return *CT_QueryCache::default_instance_;
    }

    bool CT_QueryCache::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void CT_QueryCache::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& CT_QueryCache::get_count_attr() const
    {    
    return m_count_attr;
    }


    // CT_QueryCache::ChildGroup_1
    CT_QueryCache::ChildGroup_1::ChildGroup_1()
    :m_has_query(false),
    m_query(NULL)
    {
    }
    bool CT_QueryCache::ChildGroup_1::has_query() const
    {    
    return m_has_query;
    }

    CT_Query* CT_QueryCache::ChildGroup_1::mutable_query()
    {    
    
    m_has_query = true;
    if (!m_query)
    {
        m_query = new CT_Query();
    }
    return m_query;
    }

    const CT_Query& CT_QueryCache::ChildGroup_1::get_query() const
    {    
    if (m_query)
    {
        return *m_query;
    }
    return CT_Query::default_instance();
    }

CT_QueryCache* CT_QueryCache::default_instance_ = NULL;

    // CT_Query
    CT_Query::CT_Query()
    :m_has_tpls(false),
    m_tpls(NULL),
    m_has_mdx_attr(false),
    m_mdx_attr(NULL)
    {
    }
    CT_Query::~CT_Query()
{
    clear();    }
    bool CT_Query::has_tpls() const
    {    
    return m_has_tpls;
    }

    CT_Tuples* CT_Query::mutable_tpls()
    {    
    m_has_tpls = true;
    if (!m_tpls)
    {
        m_tpls = new CT_Tuples();
    }
    return m_tpls;
    }

    const CT_Tuples& CT_Query::get_tpls() const
    {    
    if (m_tpls)
    {
        return *m_tpls;
    }
    return CT_Tuples::default_instance();
    }

    void CT_Query::clear()
    {    
    m_has_mdx_attr = false;
    
    if (m_mdx_attr)
    {
        delete m_mdx_attr;
        m_mdx_attr = NULL;
    }
    
    }

    void CT_Query::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_mdx_attr)
    {
        m_mdx_attr->toXmlAttr("mdx", _outStream);
    }
    
            _outStream << ">";
            
    if (m_has_tpls)
    {
        m_tpls->toXmlElem("main:tpls", "", _outStream);;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_Query& CT_Query::default_instance()
    {    
    if (!CT_Query::default_instance_)
    {
        CT_Query::default_instance_ = new CT_Query();
    }
    return *CT_Query::default_instance_;
    }

    bool CT_Query::has_mdx_attr() const
    {    
    return m_has_mdx_attr;
    }

    void CT_Query::set_mdx_attr(const ns_s::ST_Xstring& _mdx_attr)
    {    
    m_has_mdx_attr = true;
    m_mdx_attr = new ns_s::ST_Xstring(_mdx_attr);
    }

    const ns_s::ST_Xstring& CT_Query::get_mdx_attr() const
    {    
    if (m_mdx_attr)
    {
        return *m_mdx_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

CT_Query* CT_Query::default_instance_ = NULL;

    // CT_CalculatedItems
    CT_CalculatedItems::CT_CalculatedItems()
    :m_has_count_attr(false),
    m_count_attr(0)
    {
    }
    CT_CalculatedItems::~CT_CalculatedItems()
{
    clear();    }
    CT_CalculatedItem* CT_CalculatedItems::add_calculatedItem()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_CalculatedItem* pNewChild = pChildGroup->mutable_calculatedItem();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_CalculatedItems::clear()
    {    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_CalculatedItems::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_calculatedItem())
            {
                (*iter)->get_calculatedItem().toXmlElem("main:calculatedItem", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_CalculatedItems& CT_CalculatedItems::default_instance()
    {    
    if (!CT_CalculatedItems::default_instance_)
    {
        CT_CalculatedItems::default_instance_ = new CT_CalculatedItems();
    }
    return *CT_CalculatedItems::default_instance_;
    }

    bool CT_CalculatedItems::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void CT_CalculatedItems::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& CT_CalculatedItems::get_count_attr() const
    {    
    return m_count_attr;
    }


    // CT_CalculatedItems::ChildGroup_1
    CT_CalculatedItems::ChildGroup_1::ChildGroup_1()
    :m_has_calculatedItem(false),
    m_calculatedItem(NULL)
    {
    }
    bool CT_CalculatedItems::ChildGroup_1::has_calculatedItem() const
    {    
    return m_has_calculatedItem;
    }

    CT_CalculatedItem* CT_CalculatedItems::ChildGroup_1::mutable_calculatedItem()
    {    
    
    m_has_calculatedItem = true;
    if (!m_calculatedItem)
    {
        m_calculatedItem = new CT_CalculatedItem();
    }
    return m_calculatedItem;
    }

    const CT_CalculatedItem& CT_CalculatedItems::ChildGroup_1::get_calculatedItem() const
    {    
    if (m_calculatedItem)
    {
        return *m_calculatedItem;
    }
    return CT_CalculatedItem::default_instance();
    }

CT_CalculatedItems* CT_CalculatedItems::default_instance_ = NULL;

    // CT_CalculatedItem
    CT_CalculatedItem::CT_CalculatedItem()
    :m_has_pivotArea(false),
    m_pivotArea(NULL),
    m_has_extLst(false),
    m_extLst(NULL),
    m_has_field_attr(false),
    m_field_attr(0),
    m_has_formula_attr(false),
    m_formula_attr(NULL)
    {
    }
    CT_CalculatedItem::~CT_CalculatedItem()
{
    clear();    }
    bool CT_CalculatedItem::has_pivotArea() const
    {    
    return m_has_pivotArea;
    }

    CT_PivotArea* CT_CalculatedItem::mutable_pivotArea()
    {    
    m_has_pivotArea = true;
    if (!m_pivotArea)
    {
        m_pivotArea = new CT_PivotArea();
    }
    return m_pivotArea;
    }

    const CT_PivotArea& CT_CalculatedItem::get_pivotArea() const
    {    
    if (m_pivotArea)
    {
        return *m_pivotArea;
    }
    return CT_PivotArea::default_instance();
    }

    bool CT_CalculatedItem::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* CT_CalculatedItem::mutable_extLst()
    {    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& CT_CalculatedItem::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

    void CT_CalculatedItem::clear()
    {    
    m_has_field_attr = false;
    m_field_attr = 0;
    
    m_has_formula_attr = false;
    
    if (m_formula_attr)
    {
        delete m_formula_attr;
        m_formula_attr = NULL;
    }
    
    }

    void CT_CalculatedItem::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_field_attr)
    {
        _outStream << " " << "field" << "=\"" << m_field_attr << "\"";
    }
    
    
    if (m_has_formula_attr)
    {
        m_formula_attr->toXmlAttr("formula", _outStream);
    }
    
            _outStream << ">";
            
    if (m_has_pivotArea)
    {
        m_pivotArea->toXmlElem("main:pivotArea", "", _outStream);;
    }
    
    if (m_has_extLst)
    {
        m_extLst->toXmlElem("main:extLst", "", _outStream);;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_CalculatedItem& CT_CalculatedItem::default_instance()
    {    
    if (!CT_CalculatedItem::default_instance_)
    {
        CT_CalculatedItem::default_instance_ = new CT_CalculatedItem();
    }
    return *CT_CalculatedItem::default_instance_;
    }

    bool CT_CalculatedItem::has_field_attr() const
    {    
    return m_has_field_attr;
    }

    void CT_CalculatedItem::set_field_attr(const XSD::unsignedInt_& _field_attr)
    {    
    m_has_field_attr = true;
    m_field_attr = _field_attr;
    }

    const XSD::unsignedInt_& CT_CalculatedItem::get_field_attr() const
    {    
    return m_field_attr;
    }

    bool CT_CalculatedItem::has_formula_attr() const
    {    
    return m_has_formula_attr;
    }

    void CT_CalculatedItem::set_formula_attr(const ns_s::ST_Xstring& _formula_attr)
    {    
    m_has_formula_attr = true;
    m_formula_attr = new ns_s::ST_Xstring(_formula_attr);
    }

    const ns_s::ST_Xstring& CT_CalculatedItem::get_formula_attr() const
    {    
    if (m_formula_attr)
    {
        return *m_formula_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

CT_CalculatedItem* CT_CalculatedItem::default_instance_ = NULL;

    // CT_CalculatedMembers
    CT_CalculatedMembers::CT_CalculatedMembers()
    :m_has_count_attr(false),
    m_count_attr(0)
    {
    }
    CT_CalculatedMembers::~CT_CalculatedMembers()
{
    clear();    }
    CT_CalculatedMember* CT_CalculatedMembers::add_calculatedMember()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_CalculatedMember* pNewChild = pChildGroup->mutable_calculatedMember();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_CalculatedMembers::clear()
    {    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_CalculatedMembers::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_calculatedMember())
            {
                (*iter)->get_calculatedMember().toXmlElem("main:calculatedMember", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_CalculatedMembers& CT_CalculatedMembers::default_instance()
    {    
    if (!CT_CalculatedMembers::default_instance_)
    {
        CT_CalculatedMembers::default_instance_ = new CT_CalculatedMembers();
    }
    return *CT_CalculatedMembers::default_instance_;
    }

    bool CT_CalculatedMembers::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void CT_CalculatedMembers::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& CT_CalculatedMembers::get_count_attr() const
    {    
    return m_count_attr;
    }


    // CT_CalculatedMembers::ChildGroup_1
    CT_CalculatedMembers::ChildGroup_1::ChildGroup_1()
    :m_has_calculatedMember(false),
    m_calculatedMember(NULL)
    {
    }
    bool CT_CalculatedMembers::ChildGroup_1::has_calculatedMember() const
    {    
    return m_has_calculatedMember;
    }

    CT_CalculatedMember* CT_CalculatedMembers::ChildGroup_1::mutable_calculatedMember()
    {    
    
    m_has_calculatedMember = true;
    if (!m_calculatedMember)
    {
        m_calculatedMember = new CT_CalculatedMember();
    }
    return m_calculatedMember;
    }

    const CT_CalculatedMember& CT_CalculatedMembers::ChildGroup_1::get_calculatedMember() const
    {    
    if (m_calculatedMember)
    {
        return *m_calculatedMember;
    }
    return CT_CalculatedMember::default_instance();
    }

CT_CalculatedMembers* CT_CalculatedMembers::default_instance_ = NULL;

    // CT_CalculatedMember
    CT_CalculatedMember::CT_CalculatedMember()
    :m_has_extLst(false),
    m_extLst(NULL),
    m_has_name_attr(false),
    m_name_attr(NULL),
    m_has_mdx_attr(false),
    m_mdx_attr(NULL),
    m_has_memberName_attr(false),
    m_memberName_attr(NULL),
    m_has_hierarchy_attr(false),
    m_hierarchy_attr(NULL),
    m_has_parent_attr(false),
    m_parent_attr(NULL),
    m_has_solveOrder_attr(false),
    m_solveOrder_attr(0),
    m_has_set_attr(false),
    m_set_attr(false)
    {
    }
    CT_CalculatedMember::~CT_CalculatedMember()
{
    clear();    }
    bool CT_CalculatedMember::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* CT_CalculatedMember::mutable_extLst()
    {    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& CT_CalculatedMember::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

    void CT_CalculatedMember::clear()
    {    
    m_has_name_attr = false;
    
    if (m_name_attr)
    {
        delete m_name_attr;
        m_name_attr = NULL;
    }
    
    
    m_has_mdx_attr = false;
    
    if (m_mdx_attr)
    {
        delete m_mdx_attr;
        m_mdx_attr = NULL;
    }
    
    
    m_has_memberName_attr = false;
    
    if (m_memberName_attr)
    {
        delete m_memberName_attr;
        m_memberName_attr = NULL;
    }
    
    
    m_has_hierarchy_attr = false;
    
    if (m_hierarchy_attr)
    {
        delete m_hierarchy_attr;
        m_hierarchy_attr = NULL;
    }
    
    
    m_has_parent_attr = false;
    
    if (m_parent_attr)
    {
        delete m_parent_attr;
        m_parent_attr = NULL;
    }
    
    
    m_has_solveOrder_attr = false;
    m_solveOrder_attr = 0;
    
    m_has_set_attr = false;
    m_set_attr = false;
    }

    void CT_CalculatedMember::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_name_attr)
    {
        m_name_attr->toXmlAttr("name", _outStream);
    }
    
    
    if (m_has_mdx_attr)
    {
        m_mdx_attr->toXmlAttr("mdx", _outStream);
    }
    
    
    if (m_has_memberName_attr)
    {
        m_memberName_attr->toXmlAttr("memberName", _outStream);
    }
    
    
    if (m_has_hierarchy_attr)
    {
        m_hierarchy_attr->toXmlAttr("hierarchy", _outStream);
    }
    
    
    if (m_has_parent_attr)
    {
        m_parent_attr->toXmlAttr("parent", _outStream);
    }
    
    
    if (m_has_solveOrder_attr)
    {
        _outStream << " " << "solveOrder" << "=\"" << m_solveOrder_attr << "\"";
    }
    
    
    if (m_has_set_attr)
    {
        _outStream << " " << "set" << "=\"" << XSD::XMLBooleanStr(m_set_attr) << "\"";
    }
    
            _outStream << ">";
            
    if (m_has_extLst)
    {
        m_extLst->toXmlElem("main:extLst", "", _outStream);;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_CalculatedMember& CT_CalculatedMember::default_instance()
    {    
    if (!CT_CalculatedMember::default_instance_)
    {
        CT_CalculatedMember::default_instance_ = new CT_CalculatedMember();
    }
    return *CT_CalculatedMember::default_instance_;
    }

    bool CT_CalculatedMember::has_name_attr() const
    {    
    return m_has_name_attr;
    }

    void CT_CalculatedMember::set_name_attr(const ns_s::ST_Xstring& _name_attr)
    {    
    m_has_name_attr = true;
    m_name_attr = new ns_s::ST_Xstring(_name_attr);
    }

    const ns_s::ST_Xstring& CT_CalculatedMember::get_name_attr() const
    {    
    if (m_name_attr)
    {
        return *m_name_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_CalculatedMember::has_mdx_attr() const
    {    
    return m_has_mdx_attr;
    }

    void CT_CalculatedMember::set_mdx_attr(const ns_s::ST_Xstring& _mdx_attr)
    {    
    m_has_mdx_attr = true;
    m_mdx_attr = new ns_s::ST_Xstring(_mdx_attr);
    }

    const ns_s::ST_Xstring& CT_CalculatedMember::get_mdx_attr() const
    {    
    if (m_mdx_attr)
    {
        return *m_mdx_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_CalculatedMember::has_memberName_attr() const
    {    
    return m_has_memberName_attr;
    }

    void CT_CalculatedMember::set_memberName_attr(const ns_s::ST_Xstring& _memberName_attr)
    {    
    m_has_memberName_attr = true;
    m_memberName_attr = new ns_s::ST_Xstring(_memberName_attr);
    }

    const ns_s::ST_Xstring& CT_CalculatedMember::get_memberName_attr() const
    {    
    if (m_memberName_attr)
    {
        return *m_memberName_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_CalculatedMember::has_hierarchy_attr() const
    {    
    return m_has_hierarchy_attr;
    }

    void CT_CalculatedMember::set_hierarchy_attr(const ns_s::ST_Xstring& _hierarchy_attr)
    {    
    m_has_hierarchy_attr = true;
    m_hierarchy_attr = new ns_s::ST_Xstring(_hierarchy_attr);
    }

    const ns_s::ST_Xstring& CT_CalculatedMember::get_hierarchy_attr() const
    {    
    if (m_hierarchy_attr)
    {
        return *m_hierarchy_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_CalculatedMember::has_parent_attr() const
    {    
    return m_has_parent_attr;
    }

    void CT_CalculatedMember::set_parent_attr(const ns_s::ST_Xstring& _parent_attr)
    {    
    m_has_parent_attr = true;
    m_parent_attr = new ns_s::ST_Xstring(_parent_attr);
    }

    const ns_s::ST_Xstring& CT_CalculatedMember::get_parent_attr() const
    {    
    if (m_parent_attr)
    {
        return *m_parent_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_CalculatedMember::has_solveOrder_attr() const
    {    
    return m_has_solveOrder_attr;
    }

    void CT_CalculatedMember::set_solveOrder_attr(const XSD::int_& _solveOrder_attr)
    {    
    m_has_solveOrder_attr = true;
    m_solveOrder_attr = _solveOrder_attr;
    }

    const XSD::int_& CT_CalculatedMember::get_solveOrder_attr() const
    {    
    return m_solveOrder_attr;
    }

    bool CT_CalculatedMember::has_set_attr() const
    {    
    return m_has_set_attr;
    }

    void CT_CalculatedMember::set_set_attr(const XSD::boolean_& _set_attr)
    {    
    m_has_set_attr = true;
    m_set_attr = _set_attr;
    }

    const XSD::boolean_& CT_CalculatedMember::get_set_attr() const
    {    
    return m_set_attr;
    }

CT_CalculatedMember* CT_CalculatedMember::default_instance_ = NULL;

    // CT_pivotTableDefinition
    CT_pivotTableDefinition::CT_pivotTableDefinition()
    :m_has_location(false),
    m_location(NULL),
    m_has_pivotFields(false),
    m_pivotFields(NULL),
    m_has_rowFields(false),
    m_rowFields(NULL),
    m_has_rowItems(false),
    m_rowItems(NULL),
    m_has_colFields(false),
    m_colFields(NULL),
    m_has_colItems(false),
    m_colItems(NULL),
    m_has_pageFields(false),
    m_pageFields(NULL),
    m_has_dataFields(false),
    m_dataFields(NULL),
    m_has_formats(false),
    m_formats(NULL),
    m_has_conditionalFormats(false),
    m_conditionalFormats(NULL),
    m_has_chartFormats(false),
    m_chartFormats(NULL),
    m_has_pivotHierarchies(false),
    m_pivotHierarchies(NULL),
    m_has_pivotTableStyleInfo(false),
    m_pivotTableStyleInfo(NULL),
    m_has_filters(false),
    m_filters(NULL),
    m_has_rowHierarchiesUsage(false),
    m_rowHierarchiesUsage(NULL),
    m_has_colHierarchiesUsage(false),
    m_colHierarchiesUsage(NULL),
    m_has_extLst(false),
    m_extLst(NULL),
    m_has_name_attr(false),
    m_name_attr(NULL),
    m_has_cacheId_attr(false),
    m_cacheId_attr(0),
    m_has_dataOnRows_attr(false),
    m_dataOnRows_attr(false),
    m_has_dataPosition_attr(false),
    m_dataPosition_attr(0),
    m_has_autoFormatId_attr(false),
    m_autoFormatId_attr(0),
    m_has_applyNumberFormats_attr(false),
    m_applyNumberFormats_attr(false),
    m_has_applyBorderFormats_attr(false),
    m_applyBorderFormats_attr(false),
    m_has_applyFontFormats_attr(false),
    m_applyFontFormats_attr(false),
    m_has_applyPatternFormats_attr(false),
    m_applyPatternFormats_attr(false),
    m_has_applyAlignmentFormats_attr(false),
    m_applyAlignmentFormats_attr(false),
    m_has_applyWidthHeightFormats_attr(false),
    m_applyWidthHeightFormats_attr(false),
    m_has_dataCaption_attr(false),
    m_dataCaption_attr(NULL),
    m_has_grandTotalCaption_attr(false),
    m_grandTotalCaption_attr(NULL),
    m_has_errorCaption_attr(false),
    m_errorCaption_attr(NULL),
    m_has_showError_attr(false),
    m_showError_attr(false),
    m_has_missingCaption_attr(false),
    m_missingCaption_attr(NULL),
    m_has_showMissing_attr(false),
    m_showMissing_attr(false),
    m_has_pageStyle_attr(false),
    m_pageStyle_attr(NULL),
    m_has_pivotTableStyle_attr(false),
    m_pivotTableStyle_attr(NULL),
    m_has_vacatedStyle_attr(false),
    m_vacatedStyle_attr(NULL),
    m_has_tag_attr(false),
    m_tag_attr(NULL),
    m_has_updatedVersion_attr(false),
    m_updatedVersion_attr(0),
    m_has_minRefreshableVersion_attr(false),
    m_minRefreshableVersion_attr(0),
    m_has_asteriskTotals_attr(false),
    m_asteriskTotals_attr(false),
    m_has_showItems_attr(false),
    m_showItems_attr(false),
    m_has_editData_attr(false),
    m_editData_attr(false),
    m_has_disableFieldList_attr(false),
    m_disableFieldList_attr(false),
    m_has_showCalcMbrs_attr(false),
    m_showCalcMbrs_attr(false),
    m_has_visualTotals_attr(false),
    m_visualTotals_attr(false),
    m_has_showMultipleLabel_attr(false),
    m_showMultipleLabel_attr(false),
    m_has_showDataDropDown_attr(false),
    m_showDataDropDown_attr(false),
    m_has_showDrill_attr(false),
    m_showDrill_attr(false),
    m_has_printDrill_attr(false),
    m_printDrill_attr(false),
    m_has_showMemberPropertyTips_attr(false),
    m_showMemberPropertyTips_attr(false),
    m_has_showDataTips_attr(false),
    m_showDataTips_attr(false),
    m_has_enableWizard_attr(false),
    m_enableWizard_attr(false),
    m_has_enableDrill_attr(false),
    m_enableDrill_attr(false),
    m_has_enableFieldProperties_attr(false),
    m_enableFieldProperties_attr(false),
    m_has_preserveFormatting_attr(false),
    m_preserveFormatting_attr(false),
    m_has_useAutoFormatting_attr(false),
    m_useAutoFormatting_attr(false),
    m_has_pageWrap_attr(false),
    m_pageWrap_attr(0),
    m_has_pageOverThenDown_attr(false),
    m_pageOverThenDown_attr(false),
    m_has_subtotalHiddenItems_attr(false),
    m_subtotalHiddenItems_attr(false),
    m_has_rowGrandTotals_attr(false),
    m_rowGrandTotals_attr(false),
    m_has_colGrandTotals_attr(false),
    m_colGrandTotals_attr(false),
    m_has_fieldPrintTitles_attr(false),
    m_fieldPrintTitles_attr(false),
    m_has_itemPrintTitles_attr(false),
    m_itemPrintTitles_attr(false),
    m_has_mergeItem_attr(false),
    m_mergeItem_attr(false),
    m_has_showDropZones_attr(false),
    m_showDropZones_attr(false),
    m_has_createdVersion_attr(false),
    m_createdVersion_attr(0),
    m_has_indent_attr(false),
    m_indent_attr(0),
    m_has_showEmptyRow_attr(false),
    m_showEmptyRow_attr(false),
    m_has_showEmptyCol_attr(false),
    m_showEmptyCol_attr(false),
    m_has_showHeaders_attr(false),
    m_showHeaders_attr(false),
    m_has_compact_attr(false),
    m_compact_attr(false),
    m_has_outline_attr(false),
    m_outline_attr(false),
    m_has_outlineData_attr(false),
    m_outlineData_attr(false),
    m_has_compactData_attr(false),
    m_compactData_attr(false),
    m_has_published_attr(false),
    m_published_attr(false),
    m_has_gridDropZones_attr(false),
    m_gridDropZones_attr(false),
    m_has_immersive_attr(false),
    m_immersive_attr(false),
    m_has_multipleFieldFilters_attr(false),
    m_multipleFieldFilters_attr(false),
    m_has_chartFormat_attr(false),
    m_chartFormat_attr(0),
    m_has_rowHeaderCaption_attr(false),
    m_rowHeaderCaption_attr(NULL),
    m_has_colHeaderCaption_attr(false),
    m_colHeaderCaption_attr(NULL),
    m_has_fieldListSortAscending_attr(false),
    m_fieldListSortAscending_attr(false),
    m_has_mdxSubqueries_attr(false),
    m_mdxSubqueries_attr(false),
    m_has_customListSort_attr(false),
    m_customListSort_attr(false)
    {
    }
    CT_pivotTableDefinition::~CT_pivotTableDefinition()
{
    clear();    }
    bool CT_pivotTableDefinition::has_location() const
    {    
    return m_has_location;
    }

    CT_Location* CT_pivotTableDefinition::mutable_location()
    {    
    m_has_location = true;
    if (!m_location)
    {
        m_location = new CT_Location();
    }
    return m_location;
    }

    const CT_Location& CT_pivotTableDefinition::get_location() const
    {    
    if (m_location)
    {
        return *m_location;
    }
    return CT_Location::default_instance();
    }

    bool CT_pivotTableDefinition::has_pivotFields() const
    {    
    return m_has_pivotFields;
    }

    CT_PivotFields* CT_pivotTableDefinition::mutable_pivotFields()
    {    
    m_has_pivotFields = true;
    if (!m_pivotFields)
    {
        m_pivotFields = new CT_PivotFields();
    }
    return m_pivotFields;
    }

    const CT_PivotFields& CT_pivotTableDefinition::get_pivotFields() const
    {    
    if (m_pivotFields)
    {
        return *m_pivotFields;
    }
    return CT_PivotFields::default_instance();
    }

    bool CT_pivotTableDefinition::has_rowFields() const
    {    
    return m_has_rowFields;
    }

    CT_RowFields* CT_pivotTableDefinition::mutable_rowFields()
    {    
    m_has_rowFields = true;
    if (!m_rowFields)
    {
        m_rowFields = new CT_RowFields();
    }
    return m_rowFields;
    }

    const CT_RowFields& CT_pivotTableDefinition::get_rowFields() const
    {    
    if (m_rowFields)
    {
        return *m_rowFields;
    }
    return CT_RowFields::default_instance();
    }

    bool CT_pivotTableDefinition::has_rowItems() const
    {    
    return m_has_rowItems;
    }

    CT_rowItems* CT_pivotTableDefinition::mutable_rowItems()
    {    
    m_has_rowItems = true;
    if (!m_rowItems)
    {
        m_rowItems = new CT_rowItems();
    }
    return m_rowItems;
    }

    const CT_rowItems& CT_pivotTableDefinition::get_rowItems() const
    {    
    if (m_rowItems)
    {
        return *m_rowItems;
    }
    return CT_rowItems::default_instance();
    }

    bool CT_pivotTableDefinition::has_colFields() const
    {    
    return m_has_colFields;
    }

    CT_ColFields* CT_pivotTableDefinition::mutable_colFields()
    {    
    m_has_colFields = true;
    if (!m_colFields)
    {
        m_colFields = new CT_ColFields();
    }
    return m_colFields;
    }

    const CT_ColFields& CT_pivotTableDefinition::get_colFields() const
    {    
    if (m_colFields)
    {
        return *m_colFields;
    }
    return CT_ColFields::default_instance();
    }

    bool CT_pivotTableDefinition::has_colItems() const
    {    
    return m_has_colItems;
    }

    CT_colItems* CT_pivotTableDefinition::mutable_colItems()
    {    
    m_has_colItems = true;
    if (!m_colItems)
    {
        m_colItems = new CT_colItems();
    }
    return m_colItems;
    }

    const CT_colItems& CT_pivotTableDefinition::get_colItems() const
    {    
    if (m_colItems)
    {
        return *m_colItems;
    }
    return CT_colItems::default_instance();
    }

    bool CT_pivotTableDefinition::has_pageFields() const
    {    
    return m_has_pageFields;
    }

    CT_PageFields* CT_pivotTableDefinition::mutable_pageFields()
    {    
    m_has_pageFields = true;
    if (!m_pageFields)
    {
        m_pageFields = new CT_PageFields();
    }
    return m_pageFields;
    }

    const CT_PageFields& CT_pivotTableDefinition::get_pageFields() const
    {    
    if (m_pageFields)
    {
        return *m_pageFields;
    }
    return CT_PageFields::default_instance();
    }

    bool CT_pivotTableDefinition::has_dataFields() const
    {    
    return m_has_dataFields;
    }

    CT_DataFields* CT_pivotTableDefinition::mutable_dataFields()
    {    
    m_has_dataFields = true;
    if (!m_dataFields)
    {
        m_dataFields = new CT_DataFields();
    }
    return m_dataFields;
    }

    const CT_DataFields& CT_pivotTableDefinition::get_dataFields() const
    {    
    if (m_dataFields)
    {
        return *m_dataFields;
    }
    return CT_DataFields::default_instance();
    }

    bool CT_pivotTableDefinition::has_formats() const
    {    
    return m_has_formats;
    }

    CT_Formats* CT_pivotTableDefinition::mutable_formats()
    {    
    m_has_formats = true;
    if (!m_formats)
    {
        m_formats = new CT_Formats();
    }
    return m_formats;
    }

    const CT_Formats& CT_pivotTableDefinition::get_formats() const
    {    
    if (m_formats)
    {
        return *m_formats;
    }
    return CT_Formats::default_instance();
    }

    bool CT_pivotTableDefinition::has_conditionalFormats() const
    {    
    return m_has_conditionalFormats;
    }

    CT_ConditionalFormats* CT_pivotTableDefinition::mutable_conditionalFormats()
    {    
    m_has_conditionalFormats = true;
    if (!m_conditionalFormats)
    {
        m_conditionalFormats = new CT_ConditionalFormats();
    }
    return m_conditionalFormats;
    }

    const CT_ConditionalFormats& CT_pivotTableDefinition::get_conditionalFormats() const
    {    
    if (m_conditionalFormats)
    {
        return *m_conditionalFormats;
    }
    return CT_ConditionalFormats::default_instance();
    }

    bool CT_pivotTableDefinition::has_chartFormats() const
    {    
    return m_has_chartFormats;
    }

    CT_ChartFormats* CT_pivotTableDefinition::mutable_chartFormats()
    {    
    m_has_chartFormats = true;
    if (!m_chartFormats)
    {
        m_chartFormats = new CT_ChartFormats();
    }
    return m_chartFormats;
    }

    const CT_ChartFormats& CT_pivotTableDefinition::get_chartFormats() const
    {    
    if (m_chartFormats)
    {
        return *m_chartFormats;
    }
    return CT_ChartFormats::default_instance();
    }

    bool CT_pivotTableDefinition::has_pivotHierarchies() const
    {    
    return m_has_pivotHierarchies;
    }

    CT_PivotHierarchies* CT_pivotTableDefinition::mutable_pivotHierarchies()
    {    
    m_has_pivotHierarchies = true;
    if (!m_pivotHierarchies)
    {
        m_pivotHierarchies = new CT_PivotHierarchies();
    }
    return m_pivotHierarchies;
    }

    const CT_PivotHierarchies& CT_pivotTableDefinition::get_pivotHierarchies() const
    {    
    if (m_pivotHierarchies)
    {
        return *m_pivotHierarchies;
    }
    return CT_PivotHierarchies::default_instance();
    }

    bool CT_pivotTableDefinition::has_pivotTableStyleInfo() const
    {    
    return m_has_pivotTableStyleInfo;
    }

    CT_PivotTableStyle* CT_pivotTableDefinition::mutable_pivotTableStyleInfo()
    {    
    m_has_pivotTableStyleInfo = true;
    if (!m_pivotTableStyleInfo)
    {
        m_pivotTableStyleInfo = new CT_PivotTableStyle();
    }
    return m_pivotTableStyleInfo;
    }

    const CT_PivotTableStyle& CT_pivotTableDefinition::get_pivotTableStyleInfo() const
    {    
    if (m_pivotTableStyleInfo)
    {
        return *m_pivotTableStyleInfo;
    }
    return CT_PivotTableStyle::default_instance();
    }

    bool CT_pivotTableDefinition::has_filters() const
    {    
    return m_has_filters;
    }

    CT_PivotFilters* CT_pivotTableDefinition::mutable_filters()
    {    
    m_has_filters = true;
    if (!m_filters)
    {
        m_filters = new CT_PivotFilters();
    }
    return m_filters;
    }

    const CT_PivotFilters& CT_pivotTableDefinition::get_filters() const
    {    
    if (m_filters)
    {
        return *m_filters;
    }
    return CT_PivotFilters::default_instance();
    }

    bool CT_pivotTableDefinition::has_rowHierarchiesUsage() const
    {    
    return m_has_rowHierarchiesUsage;
    }

    CT_RowHierarchiesUsage* CT_pivotTableDefinition::mutable_rowHierarchiesUsage()
    {    
    m_has_rowHierarchiesUsage = true;
    if (!m_rowHierarchiesUsage)
    {
        m_rowHierarchiesUsage = new CT_RowHierarchiesUsage();
    }
    return m_rowHierarchiesUsage;
    }

    const CT_RowHierarchiesUsage& CT_pivotTableDefinition::get_rowHierarchiesUsage() const
    {    
    if (m_rowHierarchiesUsage)
    {
        return *m_rowHierarchiesUsage;
    }
    return CT_RowHierarchiesUsage::default_instance();
    }

    bool CT_pivotTableDefinition::has_colHierarchiesUsage() const
    {    
    return m_has_colHierarchiesUsage;
    }

    CT_ColHierarchiesUsage* CT_pivotTableDefinition::mutable_colHierarchiesUsage()
    {    
    m_has_colHierarchiesUsage = true;
    if (!m_colHierarchiesUsage)
    {
        m_colHierarchiesUsage = new CT_ColHierarchiesUsage();
    }
    return m_colHierarchiesUsage;
    }

    const CT_ColHierarchiesUsage& CT_pivotTableDefinition::get_colHierarchiesUsage() const
    {    
    if (m_colHierarchiesUsage)
    {
        return *m_colHierarchiesUsage;
    }
    return CT_ColHierarchiesUsage::default_instance();
    }

    bool CT_pivotTableDefinition::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* CT_pivotTableDefinition::mutable_extLst()
    {    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& CT_pivotTableDefinition::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

    void CT_pivotTableDefinition::clear()
    {    
    m_has_name_attr = false;
    
    if (m_name_attr)
    {
        delete m_name_attr;
        m_name_attr = NULL;
    }
    
    
    m_has_cacheId_attr = false;
    m_cacheId_attr = 0;
    
    m_has_dataOnRows_attr = false;
    m_dataOnRows_attr = false;
    
    m_has_dataPosition_attr = false;
    m_dataPosition_attr = 0;
    
    m_has_autoFormatId_attr = false;
    m_autoFormatId_attr = 0;
    
    m_has_applyNumberFormats_attr = false;
    m_applyNumberFormats_attr = false;
    
    m_has_applyBorderFormats_attr = false;
    m_applyBorderFormats_attr = false;
    
    m_has_applyFontFormats_attr = false;
    m_applyFontFormats_attr = false;
    
    m_has_applyPatternFormats_attr = false;
    m_applyPatternFormats_attr = false;
    
    m_has_applyAlignmentFormats_attr = false;
    m_applyAlignmentFormats_attr = false;
    
    m_has_applyWidthHeightFormats_attr = false;
    m_applyWidthHeightFormats_attr = false;
    
    m_has_dataCaption_attr = false;
    
    if (m_dataCaption_attr)
    {
        delete m_dataCaption_attr;
        m_dataCaption_attr = NULL;
    }
    
    
    m_has_grandTotalCaption_attr = false;
    
    if (m_grandTotalCaption_attr)
    {
        delete m_grandTotalCaption_attr;
        m_grandTotalCaption_attr = NULL;
    }
    
    
    m_has_errorCaption_attr = false;
    
    if (m_errorCaption_attr)
    {
        delete m_errorCaption_attr;
        m_errorCaption_attr = NULL;
    }
    
    
    m_has_showError_attr = false;
    m_showError_attr = false;
    
    m_has_missingCaption_attr = false;
    
    if (m_missingCaption_attr)
    {
        delete m_missingCaption_attr;
        m_missingCaption_attr = NULL;
    }
    
    
    m_has_showMissing_attr = false;
    m_showMissing_attr = false;
    
    m_has_pageStyle_attr = false;
    
    if (m_pageStyle_attr)
    {
        delete m_pageStyle_attr;
        m_pageStyle_attr = NULL;
    }
    
    
    m_has_pivotTableStyle_attr = false;
    
    if (m_pivotTableStyle_attr)
    {
        delete m_pivotTableStyle_attr;
        m_pivotTableStyle_attr = NULL;
    }
    
    
    m_has_vacatedStyle_attr = false;
    
    if (m_vacatedStyle_attr)
    {
        delete m_vacatedStyle_attr;
        m_vacatedStyle_attr = NULL;
    }
    
    
    m_has_tag_attr = false;
    
    if (m_tag_attr)
    {
        delete m_tag_attr;
        m_tag_attr = NULL;
    }
    
    
    m_has_updatedVersion_attr = false;
    m_updatedVersion_attr = 0;
    
    m_has_minRefreshableVersion_attr = false;
    m_minRefreshableVersion_attr = 0;
    
    m_has_asteriskTotals_attr = false;
    m_asteriskTotals_attr = false;
    
    m_has_showItems_attr = false;
    m_showItems_attr = false;
    
    m_has_editData_attr = false;
    m_editData_attr = false;
    
    m_has_disableFieldList_attr = false;
    m_disableFieldList_attr = false;
    
    m_has_showCalcMbrs_attr = false;
    m_showCalcMbrs_attr = false;
    
    m_has_visualTotals_attr = false;
    m_visualTotals_attr = false;
    
    m_has_showMultipleLabel_attr = false;
    m_showMultipleLabel_attr = false;
    
    m_has_showDataDropDown_attr = false;
    m_showDataDropDown_attr = false;
    
    m_has_showDrill_attr = false;
    m_showDrill_attr = false;
    
    m_has_printDrill_attr = false;
    m_printDrill_attr = false;
    
    m_has_showMemberPropertyTips_attr = false;
    m_showMemberPropertyTips_attr = false;
    
    m_has_showDataTips_attr = false;
    m_showDataTips_attr = false;
    
    m_has_enableWizard_attr = false;
    m_enableWizard_attr = false;
    
    m_has_enableDrill_attr = false;
    m_enableDrill_attr = false;
    
    m_has_enableFieldProperties_attr = false;
    m_enableFieldProperties_attr = false;
    
    m_has_preserveFormatting_attr = false;
    m_preserveFormatting_attr = false;
    
    m_has_useAutoFormatting_attr = false;
    m_useAutoFormatting_attr = false;
    
    m_has_pageWrap_attr = false;
    m_pageWrap_attr = 0;
    
    m_has_pageOverThenDown_attr = false;
    m_pageOverThenDown_attr = false;
    
    m_has_subtotalHiddenItems_attr = false;
    m_subtotalHiddenItems_attr = false;
    
    m_has_rowGrandTotals_attr = false;
    m_rowGrandTotals_attr = false;
    
    m_has_colGrandTotals_attr = false;
    m_colGrandTotals_attr = false;
    
    m_has_fieldPrintTitles_attr = false;
    m_fieldPrintTitles_attr = false;
    
    m_has_itemPrintTitles_attr = false;
    m_itemPrintTitles_attr = false;
    
    m_has_mergeItem_attr = false;
    m_mergeItem_attr = false;
    
    m_has_showDropZones_attr = false;
    m_showDropZones_attr = false;
    
    m_has_createdVersion_attr = false;
    m_createdVersion_attr = 0;
    
    m_has_indent_attr = false;
    m_indent_attr = 0;
    
    m_has_showEmptyRow_attr = false;
    m_showEmptyRow_attr = false;
    
    m_has_showEmptyCol_attr = false;
    m_showEmptyCol_attr = false;
    
    m_has_showHeaders_attr = false;
    m_showHeaders_attr = false;
    
    m_has_compact_attr = false;
    m_compact_attr = false;
    
    m_has_outline_attr = false;
    m_outline_attr = false;
    
    m_has_outlineData_attr = false;
    m_outlineData_attr = false;
    
    m_has_compactData_attr = false;
    m_compactData_attr = false;
    
    m_has_published_attr = false;
    m_published_attr = false;
    
    m_has_gridDropZones_attr = false;
    m_gridDropZones_attr = false;
    
    m_has_immersive_attr = false;
    m_immersive_attr = false;
    
    m_has_multipleFieldFilters_attr = false;
    m_multipleFieldFilters_attr = false;
    
    m_has_chartFormat_attr = false;
    m_chartFormat_attr = 0;
    
    m_has_rowHeaderCaption_attr = false;
    
    if (m_rowHeaderCaption_attr)
    {
        delete m_rowHeaderCaption_attr;
        m_rowHeaderCaption_attr = NULL;
    }
    
    
    m_has_colHeaderCaption_attr = false;
    
    if (m_colHeaderCaption_attr)
    {
        delete m_colHeaderCaption_attr;
        m_colHeaderCaption_attr = NULL;
    }
    
    
    m_has_fieldListSortAscending_attr = false;
    m_fieldListSortAscending_attr = false;
    
    m_has_mdxSubqueries_attr = false;
    m_mdxSubqueries_attr = false;
    
    m_has_customListSort_attr = false;
    m_customListSort_attr = false;
    }

    void CT_pivotTableDefinition::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_name_attr)
    {
        m_name_attr->toXmlAttr("name", _outStream);
    }
    
    
    if (m_has_cacheId_attr)
    {
        _outStream << " " << "cacheId" << "=\"" << m_cacheId_attr << "\"";
    }
    
    
    if (m_has_dataOnRows_attr)
    {
        _outStream << " " << "dataOnRows" << "=\"" << XSD::XMLBooleanStr(m_dataOnRows_attr) << "\"";
    }
    
    
    if (m_has_dataPosition_attr)
    {
        _outStream << " " << "dataPosition" << "=\"" << m_dataPosition_attr << "\"";
    }
    
    
    if (m_has_autoFormatId_attr)
    {
        _outStream << " " << "autoFormatId" << "=\"" << m_autoFormatId_attr << "\"";
    }
    
    
    if (m_has_applyNumberFormats_attr)
    {
        _outStream << " " << "applyNumberFormats" << "=\"" << XSD::XMLBooleanStr(m_applyNumberFormats_attr) << "\"";
    }
    
    
    if (m_has_applyBorderFormats_attr)
    {
        _outStream << " " << "applyBorderFormats" << "=\"" << XSD::XMLBooleanStr(m_applyBorderFormats_attr) << "\"";
    }
    
    
    if (m_has_applyFontFormats_attr)
    {
        _outStream << " " << "applyFontFormats" << "=\"" << XSD::XMLBooleanStr(m_applyFontFormats_attr) << "\"";
    }
    
    
    if (m_has_applyPatternFormats_attr)
    {
        _outStream << " " << "applyPatternFormats" << "=\"" << XSD::XMLBooleanStr(m_applyPatternFormats_attr) << "\"";
    }
    
    
    if (m_has_applyAlignmentFormats_attr)
    {
        _outStream << " " << "applyAlignmentFormats" << "=\"" << XSD::XMLBooleanStr(m_applyAlignmentFormats_attr) << "\"";
    }
    
    
    if (m_has_applyWidthHeightFormats_attr)
    {
        _outStream << " " << "applyWidthHeightFormats" << "=\"" << XSD::XMLBooleanStr(m_applyWidthHeightFormats_attr) << "\"";
    }
    
    
    if (m_has_dataCaption_attr)
    {
        m_dataCaption_attr->toXmlAttr("dataCaption", _outStream);
    }
    
    
    if (m_has_grandTotalCaption_attr)
    {
        m_grandTotalCaption_attr->toXmlAttr("grandTotalCaption", _outStream);
    }
    
    
    if (m_has_errorCaption_attr)
    {
        m_errorCaption_attr->toXmlAttr("errorCaption", _outStream);
    }
    
    
    if (m_has_showError_attr)
    {
        _outStream << " " << "showError" << "=\"" << XSD::XMLBooleanStr(m_showError_attr) << "\"";
    }
    
    
    if (m_has_missingCaption_attr)
    {
        m_missingCaption_attr->toXmlAttr("missingCaption", _outStream);
    }
    
    
    if (m_has_showMissing_attr)
    {
        _outStream << " " << "showMissing" << "=\"" << XSD::XMLBooleanStr(m_showMissing_attr) << "\"";
    }
    
    
    if (m_has_pageStyle_attr)
    {
        m_pageStyle_attr->toXmlAttr("pageStyle", _outStream);
    }
    
    
    if (m_has_pivotTableStyle_attr)
    {
        m_pivotTableStyle_attr->toXmlAttr("pivotTableStyle", _outStream);
    }
    
    
    if (m_has_vacatedStyle_attr)
    {
        m_vacatedStyle_attr->toXmlAttr("vacatedStyle", _outStream);
    }
    
    
    if (m_has_tag_attr)
    {
        m_tag_attr->toXmlAttr("tag", _outStream);
    }
    
    
    if (m_has_updatedVersion_attr)
    {
        _outStream << " " << "updatedVersion" << "=\"" << m_updatedVersion_attr << "\"";
    }
    
    
    if (m_has_minRefreshableVersion_attr)
    {
        _outStream << " " << "minRefreshableVersion" << "=\"" << m_minRefreshableVersion_attr << "\"";
    }
    
    
    if (m_has_asteriskTotals_attr)
    {
        _outStream << " " << "asteriskTotals" << "=\"" << XSD::XMLBooleanStr(m_asteriskTotals_attr) << "\"";
    }
    
    
    if (m_has_showItems_attr)
    {
        _outStream << " " << "showItems" << "=\"" << XSD::XMLBooleanStr(m_showItems_attr) << "\"";
    }
    
    
    if (m_has_editData_attr)
    {
        _outStream << " " << "editData" << "=\"" << XSD::XMLBooleanStr(m_editData_attr) << "\"";
    }
    
    
    if (m_has_disableFieldList_attr)
    {
        _outStream << " " << "disableFieldList" << "=\"" << XSD::XMLBooleanStr(m_disableFieldList_attr) << "\"";
    }
    
    
    if (m_has_showCalcMbrs_attr)
    {
        _outStream << " " << "showCalcMbrs" << "=\"" << XSD::XMLBooleanStr(m_showCalcMbrs_attr) << "\"";
    }
    
    
    if (m_has_visualTotals_attr)
    {
        _outStream << " " << "visualTotals" << "=\"" << XSD::XMLBooleanStr(m_visualTotals_attr) << "\"";
    }
    
    
    if (m_has_showMultipleLabel_attr)
    {
        _outStream << " " << "showMultipleLabel" << "=\"" << XSD::XMLBooleanStr(m_showMultipleLabel_attr) << "\"";
    }
    
    
    if (m_has_showDataDropDown_attr)
    {
        _outStream << " " << "showDataDropDown" << "=\"" << XSD::XMLBooleanStr(m_showDataDropDown_attr) << "\"";
    }
    
    
    if (m_has_showDrill_attr)
    {
        _outStream << " " << "showDrill" << "=\"" << XSD::XMLBooleanStr(m_showDrill_attr) << "\"";
    }
    
    
    if (m_has_printDrill_attr)
    {
        _outStream << " " << "printDrill" << "=\"" << XSD::XMLBooleanStr(m_printDrill_attr) << "\"";
    }
    
    
    if (m_has_showMemberPropertyTips_attr)
    {
        _outStream << " " << "showMemberPropertyTips" << "=\"" << XSD::XMLBooleanStr(m_showMemberPropertyTips_attr) << "\"";
    }
    
    
    if (m_has_showDataTips_attr)
    {
        _outStream << " " << "showDataTips" << "=\"" << XSD::XMLBooleanStr(m_showDataTips_attr) << "\"";
    }
    
    
    if (m_has_enableWizard_attr)
    {
        _outStream << " " << "enableWizard" << "=\"" << XSD::XMLBooleanStr(m_enableWizard_attr) << "\"";
    }
    
    
    if (m_has_enableDrill_attr)
    {
        _outStream << " " << "enableDrill" << "=\"" << XSD::XMLBooleanStr(m_enableDrill_attr) << "\"";
    }
    
    
    if (m_has_enableFieldProperties_attr)
    {
        _outStream << " " << "enableFieldProperties" << "=\"" << XSD::XMLBooleanStr(m_enableFieldProperties_attr) << "\"";
    }
    
    
    if (m_has_preserveFormatting_attr)
    {
        _outStream << " " << "preserveFormatting" << "=\"" << XSD::XMLBooleanStr(m_preserveFormatting_attr) << "\"";
    }
    
    
    if (m_has_useAutoFormatting_attr)
    {
        _outStream << " " << "useAutoFormatting" << "=\"" << XSD::XMLBooleanStr(m_useAutoFormatting_attr) << "\"";
    }
    
    
    if (m_has_pageWrap_attr)
    {
        _outStream << " " << "pageWrap" << "=\"" << m_pageWrap_attr << "\"";
    }
    
    
    if (m_has_pageOverThenDown_attr)
    {
        _outStream << " " << "pageOverThenDown" << "=\"" << XSD::XMLBooleanStr(m_pageOverThenDown_attr) << "\"";
    }
    
    
    if (m_has_subtotalHiddenItems_attr)
    {
        _outStream << " " << "subtotalHiddenItems" << "=\"" << XSD::XMLBooleanStr(m_subtotalHiddenItems_attr) << "\"";
    }
    
    
    if (m_has_rowGrandTotals_attr)
    {
        _outStream << " " << "rowGrandTotals" << "=\"" << XSD::XMLBooleanStr(m_rowGrandTotals_attr) << "\"";
    }
    
    
    if (m_has_colGrandTotals_attr)
    {
        _outStream << " " << "colGrandTotals" << "=\"" << XSD::XMLBooleanStr(m_colGrandTotals_attr) << "\"";
    }
    
    
    if (m_has_fieldPrintTitles_attr)
    {
        _outStream << " " << "fieldPrintTitles" << "=\"" << XSD::XMLBooleanStr(m_fieldPrintTitles_attr) << "\"";
    }
    
    
    if (m_has_itemPrintTitles_attr)
    {
        _outStream << " " << "itemPrintTitles" << "=\"" << XSD::XMLBooleanStr(m_itemPrintTitles_attr) << "\"";
    }
    
    
    if (m_has_mergeItem_attr)
    {
        _outStream << " " << "mergeItem" << "=\"" << XSD::XMLBooleanStr(m_mergeItem_attr) << "\"";
    }
    
    
    if (m_has_showDropZones_attr)
    {
        _outStream << " " << "showDropZones" << "=\"" << XSD::XMLBooleanStr(m_showDropZones_attr) << "\"";
    }
    
    
    if (m_has_createdVersion_attr)
    {
        _outStream << " " << "createdVersion" << "=\"" << m_createdVersion_attr << "\"";
    }
    
    
    if (m_has_indent_attr)
    {
        _outStream << " " << "indent" << "=\"" << m_indent_attr << "\"";
    }
    
    
    if (m_has_showEmptyRow_attr)
    {
        _outStream << " " << "showEmptyRow" << "=\"" << XSD::XMLBooleanStr(m_showEmptyRow_attr) << "\"";
    }
    
    
    if (m_has_showEmptyCol_attr)
    {
        _outStream << " " << "showEmptyCol" << "=\"" << XSD::XMLBooleanStr(m_showEmptyCol_attr) << "\"";
    }
    
    
    if (m_has_showHeaders_attr)
    {
        _outStream << " " << "showHeaders" << "=\"" << XSD::XMLBooleanStr(m_showHeaders_attr) << "\"";
    }
    
    
    if (m_has_compact_attr)
    {
        _outStream << " " << "compact" << "=\"" << XSD::XMLBooleanStr(m_compact_attr) << "\"";
    }
    
    
    if (m_has_outline_attr)
    {
        _outStream << " " << "outline" << "=\"" << XSD::XMLBooleanStr(m_outline_attr) << "\"";
    }
    
    
    if (m_has_outlineData_attr)
    {
        _outStream << " " << "outlineData" << "=\"" << XSD::XMLBooleanStr(m_outlineData_attr) << "\"";
    }
    
    
    if (m_has_compactData_attr)
    {
        _outStream << " " << "compactData" << "=\"" << XSD::XMLBooleanStr(m_compactData_attr) << "\"";
    }
    
    
    if (m_has_published_attr)
    {
        _outStream << " " << "published" << "=\"" << XSD::XMLBooleanStr(m_published_attr) << "\"";
    }
    
    
    if (m_has_gridDropZones_attr)
    {
        _outStream << " " << "gridDropZones" << "=\"" << XSD::XMLBooleanStr(m_gridDropZones_attr) << "\"";
    }
    
    
    if (m_has_immersive_attr)
    {
        _outStream << " " << "immersive" << "=\"" << XSD::XMLBooleanStr(m_immersive_attr) << "\"";
    }
    
    
    if (m_has_multipleFieldFilters_attr)
    {
        _outStream << " " << "multipleFieldFilters" << "=\"" << XSD::XMLBooleanStr(m_multipleFieldFilters_attr) << "\"";
    }
    
    
    if (m_has_chartFormat_attr)
    {
        _outStream << " " << "chartFormat" << "=\"" << m_chartFormat_attr << "\"";
    }
    
    
    if (m_has_rowHeaderCaption_attr)
    {
        m_rowHeaderCaption_attr->toXmlAttr("rowHeaderCaption", _outStream);
    }
    
    
    if (m_has_colHeaderCaption_attr)
    {
        m_colHeaderCaption_attr->toXmlAttr("colHeaderCaption", _outStream);
    }
    
    
    if (m_has_fieldListSortAscending_attr)
    {
        _outStream << " " << "fieldListSortAscending" << "=\"" << XSD::XMLBooleanStr(m_fieldListSortAscending_attr) << "\"";
    }
    
    
    if (m_has_mdxSubqueries_attr)
    {
        _outStream << " " << "mdxSubqueries" << "=\"" << XSD::XMLBooleanStr(m_mdxSubqueries_attr) << "\"";
    }
    
    
    if (m_has_customListSort_attr)
    {
        _outStream << " " << "customListSort" << "=\"" << XSD::XMLBooleanStr(m_customListSort_attr) << "\"";
    }
    
            _outStream << ">";
            
    if (m_has_location)
    {
        m_location->toXmlElem("main:location", "", _outStream);;
    }
    
    if (m_has_pivotFields)
    {
        m_pivotFields->toXmlElem("main:pivotFields", "", _outStream);;
    }
    
    if (m_has_rowFields)
    {
        m_rowFields->toXmlElem("main:rowFields", "", _outStream);;
    }
    
    if (m_has_rowItems)
    {
        m_rowItems->toXmlElem("main:rowItems", "", _outStream);;
    }
    
    if (m_has_colFields)
    {
        m_colFields->toXmlElem("main:colFields", "", _outStream);;
    }
    
    if (m_has_colItems)
    {
        m_colItems->toXmlElem("main:colItems", "", _outStream);;
    }
    
    if (m_has_pageFields)
    {
        m_pageFields->toXmlElem("main:pageFields", "", _outStream);;
    }
    
    if (m_has_dataFields)
    {
        m_dataFields->toXmlElem("main:dataFields", "", _outStream);;
    }
    
    if (m_has_formats)
    {
        m_formats->toXmlElem("main:formats", "", _outStream);;
    }
    
    if (m_has_conditionalFormats)
    {
        m_conditionalFormats->toXmlElem("main:conditionalFormats", "", _outStream);;
    }
    
    if (m_has_chartFormats)
    {
        m_chartFormats->toXmlElem("main:chartFormats", "", _outStream);;
    }
    
    if (m_has_pivotHierarchies)
    {
        m_pivotHierarchies->toXmlElem("main:pivotHierarchies", "", _outStream);;
    }
    
    if (m_has_pivotTableStyleInfo)
    {
        m_pivotTableStyleInfo->toXmlElem("main:pivotTableStyleInfo", "", _outStream);;
    }
    
    if (m_has_filters)
    {
        m_filters->toXmlElem("main:filters", "", _outStream);;
    }
    
    if (m_has_rowHierarchiesUsage)
    {
        m_rowHierarchiesUsage->toXmlElem("main:rowHierarchiesUsage", "", _outStream);;
    }
    
    if (m_has_colHierarchiesUsage)
    {
        m_colHierarchiesUsage->toXmlElem("main:colHierarchiesUsage", "", _outStream);;
    }
    
    if (m_has_extLst)
    {
        m_extLst->toXmlElem("main:extLst", "", _outStream);;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_pivotTableDefinition& CT_pivotTableDefinition::default_instance()
    {    
    if (!CT_pivotTableDefinition::default_instance_)
    {
        CT_pivotTableDefinition::default_instance_ = new CT_pivotTableDefinition();
    }
    return *CT_pivotTableDefinition::default_instance_;
    }

    bool CT_pivotTableDefinition::has_name_attr() const
    {    
    return m_has_name_attr;
    }

    void CT_pivotTableDefinition::set_name_attr(const ns_s::ST_Xstring& _name_attr)
    {    
    m_has_name_attr = true;
    m_name_attr = new ns_s::ST_Xstring(_name_attr);
    }

    const ns_s::ST_Xstring& CT_pivotTableDefinition::get_name_attr() const
    {    
    if (m_name_attr)
    {
        return *m_name_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_pivotTableDefinition::has_cacheId_attr() const
    {    
    return m_has_cacheId_attr;
    }

    void CT_pivotTableDefinition::set_cacheId_attr(const XSD::unsignedInt_& _cacheId_attr)
    {    
    m_has_cacheId_attr = true;
    m_cacheId_attr = _cacheId_attr;
    }

    const XSD::unsignedInt_& CT_pivotTableDefinition::get_cacheId_attr() const
    {    
    return m_cacheId_attr;
    }

    bool CT_pivotTableDefinition::has_dataOnRows_attr() const
    {    
    return m_has_dataOnRows_attr;
    }

    void CT_pivotTableDefinition::set_dataOnRows_attr(const XSD::boolean_& _dataOnRows_attr)
    {    
    m_has_dataOnRows_attr = true;
    m_dataOnRows_attr = _dataOnRows_attr;
    }

    const XSD::boolean_& CT_pivotTableDefinition::get_dataOnRows_attr() const
    {    
    return m_dataOnRows_attr;
    }

    bool CT_pivotTableDefinition::has_dataPosition_attr() const
    {    
    return m_has_dataPosition_attr;
    }

    void CT_pivotTableDefinition::set_dataPosition_attr(const XSD::unsignedInt_& _dataPosition_attr)
    {    
    m_has_dataPosition_attr = true;
    m_dataPosition_attr = _dataPosition_attr;
    }

    const XSD::unsignedInt_& CT_pivotTableDefinition::get_dataPosition_attr() const
    {    
    return m_dataPosition_attr;
    }

    bool CT_pivotTableDefinition::has_autoFormatId_attr() const
    {    
    return m_has_autoFormatId_attr;
    }

    void CT_pivotTableDefinition::set_autoFormatId_attr(const XSD::unsignedInt_& _autoFormatId_attr)
    {    
    m_has_autoFormatId_attr = true;
    m_autoFormatId_attr = _autoFormatId_attr;
    }

    const XSD::unsignedInt_& CT_pivotTableDefinition::get_autoFormatId_attr() const
    {    
    return m_autoFormatId_attr;
    }

    bool CT_pivotTableDefinition::has_applyNumberFormats_attr() const
    {    
    return m_has_applyNumberFormats_attr;
    }

    void CT_pivotTableDefinition::set_applyNumberFormats_attr(const XSD::boolean_& _applyNumberFormats_attr)
    {    
    m_has_applyNumberFormats_attr = true;
    m_applyNumberFormats_attr = _applyNumberFormats_attr;
    }

    const XSD::boolean_& CT_pivotTableDefinition::get_applyNumberFormats_attr() const
    {    
    return m_applyNumberFormats_attr;
    }

    bool CT_pivotTableDefinition::has_applyBorderFormats_attr() const
    {    
    return m_has_applyBorderFormats_attr;
    }

    void CT_pivotTableDefinition::set_applyBorderFormats_attr(const XSD::boolean_& _applyBorderFormats_attr)
    {    
    m_has_applyBorderFormats_attr = true;
    m_applyBorderFormats_attr = _applyBorderFormats_attr;
    }

    const XSD::boolean_& CT_pivotTableDefinition::get_applyBorderFormats_attr() const
    {    
    return m_applyBorderFormats_attr;
    }

    bool CT_pivotTableDefinition::has_applyFontFormats_attr() const
    {    
    return m_has_applyFontFormats_attr;
    }

    void CT_pivotTableDefinition::set_applyFontFormats_attr(const XSD::boolean_& _applyFontFormats_attr)
    {    
    m_has_applyFontFormats_attr = true;
    m_applyFontFormats_attr = _applyFontFormats_attr;
    }

    const XSD::boolean_& CT_pivotTableDefinition::get_applyFontFormats_attr() const
    {    
    return m_applyFontFormats_attr;
    }

    bool CT_pivotTableDefinition::has_applyPatternFormats_attr() const
    {    
    return m_has_applyPatternFormats_attr;
    }

    void CT_pivotTableDefinition::set_applyPatternFormats_attr(const XSD::boolean_& _applyPatternFormats_attr)
    {    
    m_has_applyPatternFormats_attr = true;
    m_applyPatternFormats_attr = _applyPatternFormats_attr;
    }

    const XSD::boolean_& CT_pivotTableDefinition::get_applyPatternFormats_attr() const
    {    
    return m_applyPatternFormats_attr;
    }

    bool CT_pivotTableDefinition::has_applyAlignmentFormats_attr() const
    {    
    return m_has_applyAlignmentFormats_attr;
    }

    void CT_pivotTableDefinition::set_applyAlignmentFormats_attr(const XSD::boolean_& _applyAlignmentFormats_attr)
    {    
    m_has_applyAlignmentFormats_attr = true;
    m_applyAlignmentFormats_attr = _applyAlignmentFormats_attr;
    }

    const XSD::boolean_& CT_pivotTableDefinition::get_applyAlignmentFormats_attr() const
    {    
    return m_applyAlignmentFormats_attr;
    }

    bool CT_pivotTableDefinition::has_applyWidthHeightFormats_attr() const
    {    
    return m_has_applyWidthHeightFormats_attr;
    }

    void CT_pivotTableDefinition::set_applyWidthHeightFormats_attr(const XSD::boolean_& _applyWidthHeightFormats_attr)
    {    
    m_has_applyWidthHeightFormats_attr = true;
    m_applyWidthHeightFormats_attr = _applyWidthHeightFormats_attr;
    }

    const XSD::boolean_& CT_pivotTableDefinition::get_applyWidthHeightFormats_attr() const
    {    
    return m_applyWidthHeightFormats_attr;
    }

    bool CT_pivotTableDefinition::has_dataCaption_attr() const
    {    
    return m_has_dataCaption_attr;
    }

    void CT_pivotTableDefinition::set_dataCaption_attr(const ns_s::ST_Xstring& _dataCaption_attr)
    {    
    m_has_dataCaption_attr = true;
    m_dataCaption_attr = new ns_s::ST_Xstring(_dataCaption_attr);
    }

    const ns_s::ST_Xstring& CT_pivotTableDefinition::get_dataCaption_attr() const
    {    
    if (m_dataCaption_attr)
    {
        return *m_dataCaption_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_pivotTableDefinition::has_grandTotalCaption_attr() const
    {    
    return m_has_grandTotalCaption_attr;
    }

    void CT_pivotTableDefinition::set_grandTotalCaption_attr(const ns_s::ST_Xstring& _grandTotalCaption_attr)
    {    
    m_has_grandTotalCaption_attr = true;
    m_grandTotalCaption_attr = new ns_s::ST_Xstring(_grandTotalCaption_attr);
    }

    const ns_s::ST_Xstring& CT_pivotTableDefinition::get_grandTotalCaption_attr() const
    {    
    if (m_grandTotalCaption_attr)
    {
        return *m_grandTotalCaption_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_pivotTableDefinition::has_errorCaption_attr() const
    {    
    return m_has_errorCaption_attr;
    }

    void CT_pivotTableDefinition::set_errorCaption_attr(const ns_s::ST_Xstring& _errorCaption_attr)
    {    
    m_has_errorCaption_attr = true;
    m_errorCaption_attr = new ns_s::ST_Xstring(_errorCaption_attr);
    }

    const ns_s::ST_Xstring& CT_pivotTableDefinition::get_errorCaption_attr() const
    {    
    if (m_errorCaption_attr)
    {
        return *m_errorCaption_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_pivotTableDefinition::has_showError_attr() const
    {    
    return m_has_showError_attr;
    }

    void CT_pivotTableDefinition::set_showError_attr(const XSD::boolean_& _showError_attr)
    {    
    m_has_showError_attr = true;
    m_showError_attr = _showError_attr;
    }

    const XSD::boolean_& CT_pivotTableDefinition::get_showError_attr() const
    {    
    return m_showError_attr;
    }

    bool CT_pivotTableDefinition::has_missingCaption_attr() const
    {    
    return m_has_missingCaption_attr;
    }

    void CT_pivotTableDefinition::set_missingCaption_attr(const ns_s::ST_Xstring& _missingCaption_attr)
    {    
    m_has_missingCaption_attr = true;
    m_missingCaption_attr = new ns_s::ST_Xstring(_missingCaption_attr);
    }

    const ns_s::ST_Xstring& CT_pivotTableDefinition::get_missingCaption_attr() const
    {    
    if (m_missingCaption_attr)
    {
        return *m_missingCaption_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_pivotTableDefinition::has_showMissing_attr() const
    {    
    return m_has_showMissing_attr;
    }

    void CT_pivotTableDefinition::set_showMissing_attr(const XSD::boolean_& _showMissing_attr)
    {    
    m_has_showMissing_attr = true;
    m_showMissing_attr = _showMissing_attr;
    }

    const XSD::boolean_& CT_pivotTableDefinition::get_showMissing_attr() const
    {    
    return m_showMissing_attr;
    }

    bool CT_pivotTableDefinition::has_pageStyle_attr() const
    {    
    return m_has_pageStyle_attr;
    }

    void CT_pivotTableDefinition::set_pageStyle_attr(const ns_s::ST_Xstring& _pageStyle_attr)
    {    
    m_has_pageStyle_attr = true;
    m_pageStyle_attr = new ns_s::ST_Xstring(_pageStyle_attr);
    }

    const ns_s::ST_Xstring& CT_pivotTableDefinition::get_pageStyle_attr() const
    {    
    if (m_pageStyle_attr)
    {
        return *m_pageStyle_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_pivotTableDefinition::has_pivotTableStyle_attr() const
    {    
    return m_has_pivotTableStyle_attr;
    }

    void CT_pivotTableDefinition::set_pivotTableStyle_attr(const ns_s::ST_Xstring& _pivotTableStyle_attr)
    {    
    m_has_pivotTableStyle_attr = true;
    m_pivotTableStyle_attr = new ns_s::ST_Xstring(_pivotTableStyle_attr);
    }

    const ns_s::ST_Xstring& CT_pivotTableDefinition::get_pivotTableStyle_attr() const
    {    
    if (m_pivotTableStyle_attr)
    {
        return *m_pivotTableStyle_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_pivotTableDefinition::has_vacatedStyle_attr() const
    {    
    return m_has_vacatedStyle_attr;
    }

    void CT_pivotTableDefinition::set_vacatedStyle_attr(const ns_s::ST_Xstring& _vacatedStyle_attr)
    {    
    m_has_vacatedStyle_attr = true;
    m_vacatedStyle_attr = new ns_s::ST_Xstring(_vacatedStyle_attr);
    }

    const ns_s::ST_Xstring& CT_pivotTableDefinition::get_vacatedStyle_attr() const
    {    
    if (m_vacatedStyle_attr)
    {
        return *m_vacatedStyle_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_pivotTableDefinition::has_tag_attr() const
    {    
    return m_has_tag_attr;
    }

    void CT_pivotTableDefinition::set_tag_attr(const ns_s::ST_Xstring& _tag_attr)
    {    
    m_has_tag_attr = true;
    m_tag_attr = new ns_s::ST_Xstring(_tag_attr);
    }

    const ns_s::ST_Xstring& CT_pivotTableDefinition::get_tag_attr() const
    {    
    if (m_tag_attr)
    {
        return *m_tag_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_pivotTableDefinition::has_updatedVersion_attr() const
    {    
    return m_has_updatedVersion_attr;
    }

    void CT_pivotTableDefinition::set_updatedVersion_attr(const XSD::unsignedByte_& _updatedVersion_attr)
    {    
    m_has_updatedVersion_attr = true;
    m_updatedVersion_attr = _updatedVersion_attr;
    }

    const XSD::unsignedByte_& CT_pivotTableDefinition::get_updatedVersion_attr() const
    {    
    return m_updatedVersion_attr;
    }

    bool CT_pivotTableDefinition::has_minRefreshableVersion_attr() const
    {    
    return m_has_minRefreshableVersion_attr;
    }

    void CT_pivotTableDefinition::set_minRefreshableVersion_attr(const XSD::unsignedByte_& _minRefreshableVersion_attr)
    {    
    m_has_minRefreshableVersion_attr = true;
    m_minRefreshableVersion_attr = _minRefreshableVersion_attr;
    }

    const XSD::unsignedByte_& CT_pivotTableDefinition::get_minRefreshableVersion_attr() const
    {    
    return m_minRefreshableVersion_attr;
    }

    bool CT_pivotTableDefinition::has_asteriskTotals_attr() const
    {    
    return m_has_asteriskTotals_attr;
    }

    void CT_pivotTableDefinition::set_asteriskTotals_attr(const XSD::boolean_& _asteriskTotals_attr)
    {    
    m_has_asteriskTotals_attr = true;
    m_asteriskTotals_attr = _asteriskTotals_attr;
    }

    const XSD::boolean_& CT_pivotTableDefinition::get_asteriskTotals_attr() const
    {    
    return m_asteriskTotals_attr;
    }

    bool CT_pivotTableDefinition::has_showItems_attr() const
    {    
    return m_has_showItems_attr;
    }

    void CT_pivotTableDefinition::set_showItems_attr(const XSD::boolean_& _showItems_attr)
    {    
    m_has_showItems_attr = true;
    m_showItems_attr = _showItems_attr;
    }

    const XSD::boolean_& CT_pivotTableDefinition::get_showItems_attr() const
    {    
    return m_showItems_attr;
    }

    bool CT_pivotTableDefinition::has_editData_attr() const
    {    
    return m_has_editData_attr;
    }

    void CT_pivotTableDefinition::set_editData_attr(const XSD::boolean_& _editData_attr)
    {    
    m_has_editData_attr = true;
    m_editData_attr = _editData_attr;
    }

    const XSD::boolean_& CT_pivotTableDefinition::get_editData_attr() const
    {    
    return m_editData_attr;
    }

    bool CT_pivotTableDefinition::has_disableFieldList_attr() const
    {    
    return m_has_disableFieldList_attr;
    }

    void CT_pivotTableDefinition::set_disableFieldList_attr(const XSD::boolean_& _disableFieldList_attr)
    {    
    m_has_disableFieldList_attr = true;
    m_disableFieldList_attr = _disableFieldList_attr;
    }

    const XSD::boolean_& CT_pivotTableDefinition::get_disableFieldList_attr() const
    {    
    return m_disableFieldList_attr;
    }

    bool CT_pivotTableDefinition::has_showCalcMbrs_attr() const
    {    
    return m_has_showCalcMbrs_attr;
    }

    void CT_pivotTableDefinition::set_showCalcMbrs_attr(const XSD::boolean_& _showCalcMbrs_attr)
    {    
    m_has_showCalcMbrs_attr = true;
    m_showCalcMbrs_attr = _showCalcMbrs_attr;
    }

    const XSD::boolean_& CT_pivotTableDefinition::get_showCalcMbrs_attr() const
    {    
    return m_showCalcMbrs_attr;
    }

    bool CT_pivotTableDefinition::has_visualTotals_attr() const
    {    
    return m_has_visualTotals_attr;
    }

    void CT_pivotTableDefinition::set_visualTotals_attr(const XSD::boolean_& _visualTotals_attr)
    {    
    m_has_visualTotals_attr = true;
    m_visualTotals_attr = _visualTotals_attr;
    }

    const XSD::boolean_& CT_pivotTableDefinition::get_visualTotals_attr() const
    {    
    return m_visualTotals_attr;
    }

    bool CT_pivotTableDefinition::has_showMultipleLabel_attr() const
    {    
    return m_has_showMultipleLabel_attr;
    }

    void CT_pivotTableDefinition::set_showMultipleLabel_attr(const XSD::boolean_& _showMultipleLabel_attr)
    {    
    m_has_showMultipleLabel_attr = true;
    m_showMultipleLabel_attr = _showMultipleLabel_attr;
    }

    const XSD::boolean_& CT_pivotTableDefinition::get_showMultipleLabel_attr() const
    {    
    return m_showMultipleLabel_attr;
    }

    bool CT_pivotTableDefinition::has_showDataDropDown_attr() const
    {    
    return m_has_showDataDropDown_attr;
    }

    void CT_pivotTableDefinition::set_showDataDropDown_attr(const XSD::boolean_& _showDataDropDown_attr)
    {    
    m_has_showDataDropDown_attr = true;
    m_showDataDropDown_attr = _showDataDropDown_attr;
    }

    const XSD::boolean_& CT_pivotTableDefinition::get_showDataDropDown_attr() const
    {    
    return m_showDataDropDown_attr;
    }

    bool CT_pivotTableDefinition::has_showDrill_attr() const
    {    
    return m_has_showDrill_attr;
    }

    void CT_pivotTableDefinition::set_showDrill_attr(const XSD::boolean_& _showDrill_attr)
    {    
    m_has_showDrill_attr = true;
    m_showDrill_attr = _showDrill_attr;
    }

    const XSD::boolean_& CT_pivotTableDefinition::get_showDrill_attr() const
    {    
    return m_showDrill_attr;
    }

    bool CT_pivotTableDefinition::has_printDrill_attr() const
    {    
    return m_has_printDrill_attr;
    }

    void CT_pivotTableDefinition::set_printDrill_attr(const XSD::boolean_& _printDrill_attr)
    {    
    m_has_printDrill_attr = true;
    m_printDrill_attr = _printDrill_attr;
    }

    const XSD::boolean_& CT_pivotTableDefinition::get_printDrill_attr() const
    {    
    return m_printDrill_attr;
    }

    bool CT_pivotTableDefinition::has_showMemberPropertyTips_attr() const
    {    
    return m_has_showMemberPropertyTips_attr;
    }

    void CT_pivotTableDefinition::set_showMemberPropertyTips_attr(const XSD::boolean_& _showMemberPropertyTips_attr)
    {    
    m_has_showMemberPropertyTips_attr = true;
    m_showMemberPropertyTips_attr = _showMemberPropertyTips_attr;
    }

    const XSD::boolean_& CT_pivotTableDefinition::get_showMemberPropertyTips_attr() const
    {    
    return m_showMemberPropertyTips_attr;
    }

    bool CT_pivotTableDefinition::has_showDataTips_attr() const
    {    
    return m_has_showDataTips_attr;
    }

    void CT_pivotTableDefinition::set_showDataTips_attr(const XSD::boolean_& _showDataTips_attr)
    {    
    m_has_showDataTips_attr = true;
    m_showDataTips_attr = _showDataTips_attr;
    }

    const XSD::boolean_& CT_pivotTableDefinition::get_showDataTips_attr() const
    {    
    return m_showDataTips_attr;
    }

    bool CT_pivotTableDefinition::has_enableWizard_attr() const
    {    
    return m_has_enableWizard_attr;
    }

    void CT_pivotTableDefinition::set_enableWizard_attr(const XSD::boolean_& _enableWizard_attr)
    {    
    m_has_enableWizard_attr = true;
    m_enableWizard_attr = _enableWizard_attr;
    }

    const XSD::boolean_& CT_pivotTableDefinition::get_enableWizard_attr() const
    {    
    return m_enableWizard_attr;
    }

    bool CT_pivotTableDefinition::has_enableDrill_attr() const
    {    
    return m_has_enableDrill_attr;
    }

    void CT_pivotTableDefinition::set_enableDrill_attr(const XSD::boolean_& _enableDrill_attr)
    {    
    m_has_enableDrill_attr = true;
    m_enableDrill_attr = _enableDrill_attr;
    }

    const XSD::boolean_& CT_pivotTableDefinition::get_enableDrill_attr() const
    {    
    return m_enableDrill_attr;
    }

    bool CT_pivotTableDefinition::has_enableFieldProperties_attr() const
    {    
    return m_has_enableFieldProperties_attr;
    }

    void CT_pivotTableDefinition::set_enableFieldProperties_attr(const XSD::boolean_& _enableFieldProperties_attr)
    {    
    m_has_enableFieldProperties_attr = true;
    m_enableFieldProperties_attr = _enableFieldProperties_attr;
    }

    const XSD::boolean_& CT_pivotTableDefinition::get_enableFieldProperties_attr() const
    {    
    return m_enableFieldProperties_attr;
    }

    bool CT_pivotTableDefinition::has_preserveFormatting_attr() const
    {    
    return m_has_preserveFormatting_attr;
    }

    void CT_pivotTableDefinition::set_preserveFormatting_attr(const XSD::boolean_& _preserveFormatting_attr)
    {    
    m_has_preserveFormatting_attr = true;
    m_preserveFormatting_attr = _preserveFormatting_attr;
    }

    const XSD::boolean_& CT_pivotTableDefinition::get_preserveFormatting_attr() const
    {    
    return m_preserveFormatting_attr;
    }

    bool CT_pivotTableDefinition::has_useAutoFormatting_attr() const
    {    
    return m_has_useAutoFormatting_attr;
    }

    void CT_pivotTableDefinition::set_useAutoFormatting_attr(const XSD::boolean_& _useAutoFormatting_attr)
    {    
    m_has_useAutoFormatting_attr = true;
    m_useAutoFormatting_attr = _useAutoFormatting_attr;
    }

    const XSD::boolean_& CT_pivotTableDefinition::get_useAutoFormatting_attr() const
    {    
    return m_useAutoFormatting_attr;
    }

    bool CT_pivotTableDefinition::has_pageWrap_attr() const
    {    
    return m_has_pageWrap_attr;
    }

    void CT_pivotTableDefinition::set_pageWrap_attr(const XSD::unsignedInt_& _pageWrap_attr)
    {    
    m_has_pageWrap_attr = true;
    m_pageWrap_attr = _pageWrap_attr;
    }

    const XSD::unsignedInt_& CT_pivotTableDefinition::get_pageWrap_attr() const
    {    
    return m_pageWrap_attr;
    }

    bool CT_pivotTableDefinition::has_pageOverThenDown_attr() const
    {    
    return m_has_pageOverThenDown_attr;
    }

    void CT_pivotTableDefinition::set_pageOverThenDown_attr(const XSD::boolean_& _pageOverThenDown_attr)
    {    
    m_has_pageOverThenDown_attr = true;
    m_pageOverThenDown_attr = _pageOverThenDown_attr;
    }

    const XSD::boolean_& CT_pivotTableDefinition::get_pageOverThenDown_attr() const
    {    
    return m_pageOverThenDown_attr;
    }

    bool CT_pivotTableDefinition::has_subtotalHiddenItems_attr() const
    {    
    return m_has_subtotalHiddenItems_attr;
    }

    void CT_pivotTableDefinition::set_subtotalHiddenItems_attr(const XSD::boolean_& _subtotalHiddenItems_attr)
    {    
    m_has_subtotalHiddenItems_attr = true;
    m_subtotalHiddenItems_attr = _subtotalHiddenItems_attr;
    }

    const XSD::boolean_& CT_pivotTableDefinition::get_subtotalHiddenItems_attr() const
    {    
    return m_subtotalHiddenItems_attr;
    }

    bool CT_pivotTableDefinition::has_rowGrandTotals_attr() const
    {    
    return m_has_rowGrandTotals_attr;
    }

    void CT_pivotTableDefinition::set_rowGrandTotals_attr(const XSD::boolean_& _rowGrandTotals_attr)
    {    
    m_has_rowGrandTotals_attr = true;
    m_rowGrandTotals_attr = _rowGrandTotals_attr;
    }

    const XSD::boolean_& CT_pivotTableDefinition::get_rowGrandTotals_attr() const
    {    
    return m_rowGrandTotals_attr;
    }

    bool CT_pivotTableDefinition::has_colGrandTotals_attr() const
    {    
    return m_has_colGrandTotals_attr;
    }

    void CT_pivotTableDefinition::set_colGrandTotals_attr(const XSD::boolean_& _colGrandTotals_attr)
    {    
    m_has_colGrandTotals_attr = true;
    m_colGrandTotals_attr = _colGrandTotals_attr;
    }

    const XSD::boolean_& CT_pivotTableDefinition::get_colGrandTotals_attr() const
    {    
    return m_colGrandTotals_attr;
    }

    bool CT_pivotTableDefinition::has_fieldPrintTitles_attr() const
    {    
    return m_has_fieldPrintTitles_attr;
    }

    void CT_pivotTableDefinition::set_fieldPrintTitles_attr(const XSD::boolean_& _fieldPrintTitles_attr)
    {    
    m_has_fieldPrintTitles_attr = true;
    m_fieldPrintTitles_attr = _fieldPrintTitles_attr;
    }

    const XSD::boolean_& CT_pivotTableDefinition::get_fieldPrintTitles_attr() const
    {    
    return m_fieldPrintTitles_attr;
    }

    bool CT_pivotTableDefinition::has_itemPrintTitles_attr() const
    {    
    return m_has_itemPrintTitles_attr;
    }

    void CT_pivotTableDefinition::set_itemPrintTitles_attr(const XSD::boolean_& _itemPrintTitles_attr)
    {    
    m_has_itemPrintTitles_attr = true;
    m_itemPrintTitles_attr = _itemPrintTitles_attr;
    }

    const XSD::boolean_& CT_pivotTableDefinition::get_itemPrintTitles_attr() const
    {    
    return m_itemPrintTitles_attr;
    }

    bool CT_pivotTableDefinition::has_mergeItem_attr() const
    {    
    return m_has_mergeItem_attr;
    }

    void CT_pivotTableDefinition::set_mergeItem_attr(const XSD::boolean_& _mergeItem_attr)
    {    
    m_has_mergeItem_attr = true;
    m_mergeItem_attr = _mergeItem_attr;
    }

    const XSD::boolean_& CT_pivotTableDefinition::get_mergeItem_attr() const
    {    
    return m_mergeItem_attr;
    }

    bool CT_pivotTableDefinition::has_showDropZones_attr() const
    {    
    return m_has_showDropZones_attr;
    }

    void CT_pivotTableDefinition::set_showDropZones_attr(const XSD::boolean_& _showDropZones_attr)
    {    
    m_has_showDropZones_attr = true;
    m_showDropZones_attr = _showDropZones_attr;
    }

    const XSD::boolean_& CT_pivotTableDefinition::get_showDropZones_attr() const
    {    
    return m_showDropZones_attr;
    }

    bool CT_pivotTableDefinition::has_createdVersion_attr() const
    {    
    return m_has_createdVersion_attr;
    }

    void CT_pivotTableDefinition::set_createdVersion_attr(const XSD::unsignedByte_& _createdVersion_attr)
    {    
    m_has_createdVersion_attr = true;
    m_createdVersion_attr = _createdVersion_attr;
    }

    const XSD::unsignedByte_& CT_pivotTableDefinition::get_createdVersion_attr() const
    {    
    return m_createdVersion_attr;
    }

    bool CT_pivotTableDefinition::has_indent_attr() const
    {    
    return m_has_indent_attr;
    }

    void CT_pivotTableDefinition::set_indent_attr(const XSD::unsignedInt_& _indent_attr)
    {    
    m_has_indent_attr = true;
    m_indent_attr = _indent_attr;
    }

    const XSD::unsignedInt_& CT_pivotTableDefinition::get_indent_attr() const
    {    
    return m_indent_attr;
    }

    bool CT_pivotTableDefinition::has_showEmptyRow_attr() const
    {    
    return m_has_showEmptyRow_attr;
    }

    void CT_pivotTableDefinition::set_showEmptyRow_attr(const XSD::boolean_& _showEmptyRow_attr)
    {    
    m_has_showEmptyRow_attr = true;
    m_showEmptyRow_attr = _showEmptyRow_attr;
    }

    const XSD::boolean_& CT_pivotTableDefinition::get_showEmptyRow_attr() const
    {    
    return m_showEmptyRow_attr;
    }

    bool CT_pivotTableDefinition::has_showEmptyCol_attr() const
    {    
    return m_has_showEmptyCol_attr;
    }

    void CT_pivotTableDefinition::set_showEmptyCol_attr(const XSD::boolean_& _showEmptyCol_attr)
    {    
    m_has_showEmptyCol_attr = true;
    m_showEmptyCol_attr = _showEmptyCol_attr;
    }

    const XSD::boolean_& CT_pivotTableDefinition::get_showEmptyCol_attr() const
    {    
    return m_showEmptyCol_attr;
    }

    bool CT_pivotTableDefinition::has_showHeaders_attr() const
    {    
    return m_has_showHeaders_attr;
    }

    void CT_pivotTableDefinition::set_showHeaders_attr(const XSD::boolean_& _showHeaders_attr)
    {    
    m_has_showHeaders_attr = true;
    m_showHeaders_attr = _showHeaders_attr;
    }

    const XSD::boolean_& CT_pivotTableDefinition::get_showHeaders_attr() const
    {    
    return m_showHeaders_attr;
    }

    bool CT_pivotTableDefinition::has_compact_attr() const
    {    
    return m_has_compact_attr;
    }

    void CT_pivotTableDefinition::set_compact_attr(const XSD::boolean_& _compact_attr)
    {    
    m_has_compact_attr = true;
    m_compact_attr = _compact_attr;
    }

    const XSD::boolean_& CT_pivotTableDefinition::get_compact_attr() const
    {    
    return m_compact_attr;
    }

    bool CT_pivotTableDefinition::has_outline_attr() const
    {    
    return m_has_outline_attr;
    }

    void CT_pivotTableDefinition::set_outline_attr(const XSD::boolean_& _outline_attr)
    {    
    m_has_outline_attr = true;
    m_outline_attr = _outline_attr;
    }

    const XSD::boolean_& CT_pivotTableDefinition::get_outline_attr() const
    {    
    return m_outline_attr;
    }

    bool CT_pivotTableDefinition::has_outlineData_attr() const
    {    
    return m_has_outlineData_attr;
    }

    void CT_pivotTableDefinition::set_outlineData_attr(const XSD::boolean_& _outlineData_attr)
    {    
    m_has_outlineData_attr = true;
    m_outlineData_attr = _outlineData_attr;
    }

    const XSD::boolean_& CT_pivotTableDefinition::get_outlineData_attr() const
    {    
    return m_outlineData_attr;
    }

    bool CT_pivotTableDefinition::has_compactData_attr() const
    {    
    return m_has_compactData_attr;
    }

    void CT_pivotTableDefinition::set_compactData_attr(const XSD::boolean_& _compactData_attr)
    {    
    m_has_compactData_attr = true;
    m_compactData_attr = _compactData_attr;
    }

    const XSD::boolean_& CT_pivotTableDefinition::get_compactData_attr() const
    {    
    return m_compactData_attr;
    }

    bool CT_pivotTableDefinition::has_published_attr() const
    {    
    return m_has_published_attr;
    }

    void CT_pivotTableDefinition::set_published_attr(const XSD::boolean_& _published_attr)
    {    
    m_has_published_attr = true;
    m_published_attr = _published_attr;
    }

    const XSD::boolean_& CT_pivotTableDefinition::get_published_attr() const
    {    
    return m_published_attr;
    }

    bool CT_pivotTableDefinition::has_gridDropZones_attr() const
    {    
    return m_has_gridDropZones_attr;
    }

    void CT_pivotTableDefinition::set_gridDropZones_attr(const XSD::boolean_& _gridDropZones_attr)
    {    
    m_has_gridDropZones_attr = true;
    m_gridDropZones_attr = _gridDropZones_attr;
    }

    const XSD::boolean_& CT_pivotTableDefinition::get_gridDropZones_attr() const
    {    
    return m_gridDropZones_attr;
    }

    bool CT_pivotTableDefinition::has_immersive_attr() const
    {    
    return m_has_immersive_attr;
    }

    void CT_pivotTableDefinition::set_immersive_attr(const XSD::boolean_& _immersive_attr)
    {    
    m_has_immersive_attr = true;
    m_immersive_attr = _immersive_attr;
    }

    const XSD::boolean_& CT_pivotTableDefinition::get_immersive_attr() const
    {    
    return m_immersive_attr;
    }

    bool CT_pivotTableDefinition::has_multipleFieldFilters_attr() const
    {    
    return m_has_multipleFieldFilters_attr;
    }

    void CT_pivotTableDefinition::set_multipleFieldFilters_attr(const XSD::boolean_& _multipleFieldFilters_attr)
    {    
    m_has_multipleFieldFilters_attr = true;
    m_multipleFieldFilters_attr = _multipleFieldFilters_attr;
    }

    const XSD::boolean_& CT_pivotTableDefinition::get_multipleFieldFilters_attr() const
    {    
    return m_multipleFieldFilters_attr;
    }

    bool CT_pivotTableDefinition::has_chartFormat_attr() const
    {    
    return m_has_chartFormat_attr;
    }

    void CT_pivotTableDefinition::set_chartFormat_attr(const XSD::unsignedInt_& _chartFormat_attr)
    {    
    m_has_chartFormat_attr = true;
    m_chartFormat_attr = _chartFormat_attr;
    }

    const XSD::unsignedInt_& CT_pivotTableDefinition::get_chartFormat_attr() const
    {    
    return m_chartFormat_attr;
    }

    bool CT_pivotTableDefinition::has_rowHeaderCaption_attr() const
    {    
    return m_has_rowHeaderCaption_attr;
    }

    void CT_pivotTableDefinition::set_rowHeaderCaption_attr(const ns_s::ST_Xstring& _rowHeaderCaption_attr)
    {    
    m_has_rowHeaderCaption_attr = true;
    m_rowHeaderCaption_attr = new ns_s::ST_Xstring(_rowHeaderCaption_attr);
    }

    const ns_s::ST_Xstring& CT_pivotTableDefinition::get_rowHeaderCaption_attr() const
    {    
    if (m_rowHeaderCaption_attr)
    {
        return *m_rowHeaderCaption_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_pivotTableDefinition::has_colHeaderCaption_attr() const
    {    
    return m_has_colHeaderCaption_attr;
    }

    void CT_pivotTableDefinition::set_colHeaderCaption_attr(const ns_s::ST_Xstring& _colHeaderCaption_attr)
    {    
    m_has_colHeaderCaption_attr = true;
    m_colHeaderCaption_attr = new ns_s::ST_Xstring(_colHeaderCaption_attr);
    }

    const ns_s::ST_Xstring& CT_pivotTableDefinition::get_colHeaderCaption_attr() const
    {    
    if (m_colHeaderCaption_attr)
    {
        return *m_colHeaderCaption_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_pivotTableDefinition::has_fieldListSortAscending_attr() const
    {    
    return m_has_fieldListSortAscending_attr;
    }

    void CT_pivotTableDefinition::set_fieldListSortAscending_attr(const XSD::boolean_& _fieldListSortAscending_attr)
    {    
    m_has_fieldListSortAscending_attr = true;
    m_fieldListSortAscending_attr = _fieldListSortAscending_attr;
    }

    const XSD::boolean_& CT_pivotTableDefinition::get_fieldListSortAscending_attr() const
    {    
    return m_fieldListSortAscending_attr;
    }

    bool CT_pivotTableDefinition::has_mdxSubqueries_attr() const
    {    
    return m_has_mdxSubqueries_attr;
    }

    void CT_pivotTableDefinition::set_mdxSubqueries_attr(const XSD::boolean_& _mdxSubqueries_attr)
    {    
    m_has_mdxSubqueries_attr = true;
    m_mdxSubqueries_attr = _mdxSubqueries_attr;
    }

    const XSD::boolean_& CT_pivotTableDefinition::get_mdxSubqueries_attr() const
    {    
    return m_mdxSubqueries_attr;
    }

    bool CT_pivotTableDefinition::has_customListSort_attr() const
    {    
    return m_has_customListSort_attr;
    }

    void CT_pivotTableDefinition::set_customListSort_attr(const XSD::boolean_& _customListSort_attr)
    {    
    m_has_customListSort_attr = true;
    m_customListSort_attr = _customListSort_attr;
    }

    const XSD::boolean_& CT_pivotTableDefinition::get_customListSort_attr() const
    {    
    return m_customListSort_attr;
    }

CT_pivotTableDefinition* CT_pivotTableDefinition::default_instance_ = NULL;

    // CT_Location
    CT_Location::CT_Location()
    :m_has_ref_attr(false),
    m_ref_attr(NULL),
    m_has_firstHeaderRow_attr(false),
    m_firstHeaderRow_attr(0),
    m_has_firstDataRow_attr(false),
    m_firstDataRow_attr(0),
    m_has_firstDataCol_attr(false),
    m_firstDataCol_attr(0),
    m_has_rowPageCount_attr(false),
    m_rowPageCount_attr(0),
    m_has_colPageCount_attr(false),
    m_colPageCount_attr(0)
    {
    }
    CT_Location::~CT_Location()
{
    clear();    }
    void CT_Location::clear()
    {    
    m_has_ref_attr = false;
    
    if (m_ref_attr)
    {
        delete m_ref_attr;
        m_ref_attr = NULL;
    }
    
    
    m_has_firstHeaderRow_attr = false;
    m_firstHeaderRow_attr = 0;
    
    m_has_firstDataRow_attr = false;
    m_firstDataRow_attr = 0;
    
    m_has_firstDataCol_attr = false;
    m_firstDataCol_attr = 0;
    
    m_has_rowPageCount_attr = false;
    m_rowPageCount_attr = 0;
    
    m_has_colPageCount_attr = false;
    m_colPageCount_attr = 0;
    }

    void CT_Location::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_ref_attr)
    {
        m_ref_attr->toXmlAttr("ref", _outStream);
    }
    
    
    if (m_has_firstHeaderRow_attr)
    {
        _outStream << " " << "firstHeaderRow" << "=\"" << m_firstHeaderRow_attr << "\"";
    }
    
    
    if (m_has_firstDataRow_attr)
    {
        _outStream << " " << "firstDataRow" << "=\"" << m_firstDataRow_attr << "\"";
    }
    
    
    if (m_has_firstDataCol_attr)
    {
        _outStream << " " << "firstDataCol" << "=\"" << m_firstDataCol_attr << "\"";
    }
    
    
    if (m_has_rowPageCount_attr)
    {
        _outStream << " " << "rowPageCount" << "=\"" << m_rowPageCount_attr << "\"";
    }
    
    
    if (m_has_colPageCount_attr)
    {
        _outStream << " " << "colPageCount" << "=\"" << m_colPageCount_attr << "\"";
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_Location& CT_Location::default_instance()
    {    
    if (!CT_Location::default_instance_)
    {
        CT_Location::default_instance_ = new CT_Location();
    }
    return *CT_Location::default_instance_;
    }

    bool CT_Location::has_ref_attr() const
    {    
    return m_has_ref_attr;
    }

    void CT_Location::set_ref_attr(const ST_Ref& _ref_attr)
    {    
    m_has_ref_attr = true;
    m_ref_attr = new ST_Ref(_ref_attr);
    }

    const ST_Ref& CT_Location::get_ref_attr() const
    {    
    if (m_ref_attr)
    {
        return *m_ref_attr;
    }
    return ST_Ref::default_instance();
    }

    bool CT_Location::has_firstHeaderRow_attr() const
    {    
    return m_has_firstHeaderRow_attr;
    }

    void CT_Location::set_firstHeaderRow_attr(const XSD::unsignedInt_& _firstHeaderRow_attr)
    {    
    m_has_firstHeaderRow_attr = true;
    m_firstHeaderRow_attr = _firstHeaderRow_attr;
    }

    const XSD::unsignedInt_& CT_Location::get_firstHeaderRow_attr() const
    {    
    return m_firstHeaderRow_attr;
    }

    bool CT_Location::has_firstDataRow_attr() const
    {    
    return m_has_firstDataRow_attr;
    }

    void CT_Location::set_firstDataRow_attr(const XSD::unsignedInt_& _firstDataRow_attr)
    {    
    m_has_firstDataRow_attr = true;
    m_firstDataRow_attr = _firstDataRow_attr;
    }

    const XSD::unsignedInt_& CT_Location::get_firstDataRow_attr() const
    {    
    return m_firstDataRow_attr;
    }

    bool CT_Location::has_firstDataCol_attr() const
    {    
    return m_has_firstDataCol_attr;
    }

    void CT_Location::set_firstDataCol_attr(const XSD::unsignedInt_& _firstDataCol_attr)
    {    
    m_has_firstDataCol_attr = true;
    m_firstDataCol_attr = _firstDataCol_attr;
    }

    const XSD::unsignedInt_& CT_Location::get_firstDataCol_attr() const
    {    
    return m_firstDataCol_attr;
    }

    bool CT_Location::has_rowPageCount_attr() const
    {    
    return m_has_rowPageCount_attr;
    }

    void CT_Location::set_rowPageCount_attr(const XSD::unsignedInt_& _rowPageCount_attr)
    {    
    m_has_rowPageCount_attr = true;
    m_rowPageCount_attr = _rowPageCount_attr;
    }

    const XSD::unsignedInt_& CT_Location::get_rowPageCount_attr() const
    {    
    return m_rowPageCount_attr;
    }

    bool CT_Location::has_colPageCount_attr() const
    {    
    return m_has_colPageCount_attr;
    }

    void CT_Location::set_colPageCount_attr(const XSD::unsignedInt_& _colPageCount_attr)
    {    
    m_has_colPageCount_attr = true;
    m_colPageCount_attr = _colPageCount_attr;
    }

    const XSD::unsignedInt_& CT_Location::get_colPageCount_attr() const
    {    
    return m_colPageCount_attr;
    }

CT_Location* CT_Location::default_instance_ = NULL;

    // CT_PivotFields
    CT_PivotFields::CT_PivotFields()
    :m_has_count_attr(false),
    m_count_attr(0)
    {
    }
    CT_PivotFields::~CT_PivotFields()
{
    clear();    }
    CT_PivotField* CT_PivotFields::add_pivotField()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_PivotField* pNewChild = pChildGroup->mutable_pivotField();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_PivotFields::clear()
    {    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_PivotFields::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_pivotField())
            {
                (*iter)->get_pivotField().toXmlElem("main:pivotField", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_PivotFields& CT_PivotFields::default_instance()
    {    
    if (!CT_PivotFields::default_instance_)
    {
        CT_PivotFields::default_instance_ = new CT_PivotFields();
    }
    return *CT_PivotFields::default_instance_;
    }

    bool CT_PivotFields::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void CT_PivotFields::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& CT_PivotFields::get_count_attr() const
    {    
    return m_count_attr;
    }


    // CT_PivotFields::ChildGroup_1
    CT_PivotFields::ChildGroup_1::ChildGroup_1()
    :m_has_pivotField(false),
    m_pivotField(NULL)
    {
    }
    bool CT_PivotFields::ChildGroup_1::has_pivotField() const
    {    
    return m_has_pivotField;
    }

    CT_PivotField* CT_PivotFields::ChildGroup_1::mutable_pivotField()
    {    
    
    m_has_pivotField = true;
    if (!m_pivotField)
    {
        m_pivotField = new CT_PivotField();
    }
    return m_pivotField;
    }

    const CT_PivotField& CT_PivotFields::ChildGroup_1::get_pivotField() const
    {    
    if (m_pivotField)
    {
        return *m_pivotField;
    }
    return CT_PivotField::default_instance();
    }

CT_PivotFields* CT_PivotFields::default_instance_ = NULL;

    // CT_PivotField
    CT_PivotField::CT_PivotField()
    :m_has_items(false),
    m_items(NULL),
    m_has_autoSortScope(false),
    m_autoSortScope(NULL),
    m_has_extLst(false),
    m_extLst(NULL),
    m_has_name_attr(false),
    m_name_attr(NULL),
    m_has_axis_attr(false),
    m_axis_attr(NULL),
    m_has_dataField_attr(false),
    m_dataField_attr(false),
    m_has_subtotalCaption_attr(false),
    m_subtotalCaption_attr(NULL),
    m_has_showDropDowns_attr(false),
    m_showDropDowns_attr(false),
    m_has_hiddenLevel_attr(false),
    m_hiddenLevel_attr(false),
    m_has_uniqueMemberProperty_attr(false),
    m_uniqueMemberProperty_attr(NULL),
    m_has_compact_attr(false),
    m_compact_attr(false),
    m_has_allDrilled_attr(false),
    m_allDrilled_attr(false),
    m_has_numFmtId_attr(false),
    m_numFmtId_attr(NULL),
    m_has_outline_attr(false),
    m_outline_attr(false),
    m_has_subtotalTop_attr(false),
    m_subtotalTop_attr(false),
    m_has_dragToRow_attr(false),
    m_dragToRow_attr(false),
    m_has_dragToCol_attr(false),
    m_dragToCol_attr(false),
    m_has_multipleItemSelectionAllowed_attr(false),
    m_multipleItemSelectionAllowed_attr(false),
    m_has_dragToPage_attr(false),
    m_dragToPage_attr(false),
    m_has_dragToData_attr(false),
    m_dragToData_attr(false),
    m_has_dragOff_attr(false),
    m_dragOff_attr(false),
    m_has_showAll_attr(false),
    m_showAll_attr(false),
    m_has_insertBlankRow_attr(false),
    m_insertBlankRow_attr(false),
    m_has_serverField_attr(false),
    m_serverField_attr(false),
    m_has_insertPageBreak_attr(false),
    m_insertPageBreak_attr(false),
    m_has_autoShow_attr(false),
    m_autoShow_attr(false),
    m_has_topAutoShow_attr(false),
    m_topAutoShow_attr(false),
    m_has_hideNewItems_attr(false),
    m_hideNewItems_attr(false),
    m_has_measureFilter_attr(false),
    m_measureFilter_attr(false),
    m_has_includeNewItemsInFilter_attr(false),
    m_includeNewItemsInFilter_attr(false),
    m_has_itemPageCount_attr(false),
    m_itemPageCount_attr(0),
    m_has_sortType_attr(false),
    m_sortType_attr(NULL),
    m_has_dataSourceSort_attr(false),
    m_dataSourceSort_attr(false),
    m_has_nonAutoSortDefault_attr(false),
    m_nonAutoSortDefault_attr(false),
    m_has_rankBy_attr(false),
    m_rankBy_attr(0),
    m_has_defaultSubtotal_attr(false),
    m_defaultSubtotal_attr(false),
    m_has_sumSubtotal_attr(false),
    m_sumSubtotal_attr(false),
    m_has_countASubtotal_attr(false),
    m_countASubtotal_attr(false),
    m_has_avgSubtotal_attr(false),
    m_avgSubtotal_attr(false),
    m_has_maxSubtotal_attr(false),
    m_maxSubtotal_attr(false),
    m_has_minSubtotal_attr(false),
    m_minSubtotal_attr(false),
    m_has_productSubtotal_attr(false),
    m_productSubtotal_attr(false),
    m_has_countSubtotal_attr(false),
    m_countSubtotal_attr(false),
    m_has_stdDevSubtotal_attr(false),
    m_stdDevSubtotal_attr(false),
    m_has_stdDevPSubtotal_attr(false),
    m_stdDevPSubtotal_attr(false),
    m_has_varSubtotal_attr(false),
    m_varSubtotal_attr(false),
    m_has_varPSubtotal_attr(false),
    m_varPSubtotal_attr(false),
    m_has_showPropCell_attr(false),
    m_showPropCell_attr(false),
    m_has_showPropTip_attr(false),
    m_showPropTip_attr(false),
    m_has_showPropAsCaption_attr(false),
    m_showPropAsCaption_attr(false),
    m_has_defaultAttributeDrillState_attr(false),
    m_defaultAttributeDrillState_attr(false)
    {
    }
    CT_PivotField::~CT_PivotField()
{
    clear();    }
    bool CT_PivotField::has_items() const
    {    
    return m_has_items;
    }

    CT_Items* CT_PivotField::mutable_items()
    {    
    m_has_items = true;
    if (!m_items)
    {
        m_items = new CT_Items();
    }
    return m_items;
    }

    const CT_Items& CT_PivotField::get_items() const
    {    
    if (m_items)
    {
        return *m_items;
    }
    return CT_Items::default_instance();
    }

    bool CT_PivotField::has_autoSortScope() const
    {    
    return m_has_autoSortScope;
    }

    CT_AutoSortScope* CT_PivotField::mutable_autoSortScope()
    {    
    m_has_autoSortScope = true;
    if (!m_autoSortScope)
    {
        m_autoSortScope = new CT_AutoSortScope();
    }
    return m_autoSortScope;
    }

    const CT_AutoSortScope& CT_PivotField::get_autoSortScope() const
    {    
    if (m_autoSortScope)
    {
        return *m_autoSortScope;
    }
    return CT_AutoSortScope::default_instance();
    }

    bool CT_PivotField::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* CT_PivotField::mutable_extLst()
    {    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& CT_PivotField::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

    void CT_PivotField::clear()
    {    
    m_has_name_attr = false;
    
    if (m_name_attr)
    {
        delete m_name_attr;
        m_name_attr = NULL;
    }
    
    
    m_has_axis_attr = false;
    
    if (m_axis_attr)
    {
        delete m_axis_attr;
        m_axis_attr = NULL;
    }
    
    
    m_has_dataField_attr = false;
    m_dataField_attr = false;
    
    m_has_subtotalCaption_attr = false;
    
    if (m_subtotalCaption_attr)
    {
        delete m_subtotalCaption_attr;
        m_subtotalCaption_attr = NULL;
    }
    
    
    m_has_showDropDowns_attr = false;
    m_showDropDowns_attr = false;
    
    m_has_hiddenLevel_attr = false;
    m_hiddenLevel_attr = false;
    
    m_has_uniqueMemberProperty_attr = false;
    
    if (m_uniqueMemberProperty_attr)
    {
        delete m_uniqueMemberProperty_attr;
        m_uniqueMemberProperty_attr = NULL;
    }
    
    
    m_has_compact_attr = false;
    m_compact_attr = false;
    
    m_has_allDrilled_attr = false;
    m_allDrilled_attr = false;
    
    m_has_numFmtId_attr = false;
    
    if (m_numFmtId_attr)
    {
        delete m_numFmtId_attr;
        m_numFmtId_attr = NULL;
    }
    
    
    m_has_outline_attr = false;
    m_outline_attr = false;
    
    m_has_subtotalTop_attr = false;
    m_subtotalTop_attr = false;
    
    m_has_dragToRow_attr = false;
    m_dragToRow_attr = false;
    
    m_has_dragToCol_attr = false;
    m_dragToCol_attr = false;
    
    m_has_multipleItemSelectionAllowed_attr = false;
    m_multipleItemSelectionAllowed_attr = false;
    
    m_has_dragToPage_attr = false;
    m_dragToPage_attr = false;
    
    m_has_dragToData_attr = false;
    m_dragToData_attr = false;
    
    m_has_dragOff_attr = false;
    m_dragOff_attr = false;
    
    m_has_showAll_attr = false;
    m_showAll_attr = false;
    
    m_has_insertBlankRow_attr = false;
    m_insertBlankRow_attr = false;
    
    m_has_serverField_attr = false;
    m_serverField_attr = false;
    
    m_has_insertPageBreak_attr = false;
    m_insertPageBreak_attr = false;
    
    m_has_autoShow_attr = false;
    m_autoShow_attr = false;
    
    m_has_topAutoShow_attr = false;
    m_topAutoShow_attr = false;
    
    m_has_hideNewItems_attr = false;
    m_hideNewItems_attr = false;
    
    m_has_measureFilter_attr = false;
    m_measureFilter_attr = false;
    
    m_has_includeNewItemsInFilter_attr = false;
    m_includeNewItemsInFilter_attr = false;
    
    m_has_itemPageCount_attr = false;
    m_itemPageCount_attr = 0;
    
    m_has_sortType_attr = false;
    
    if (m_sortType_attr)
    {
        delete m_sortType_attr;
        m_sortType_attr = NULL;
    }
    
    
    m_has_dataSourceSort_attr = false;
    m_dataSourceSort_attr = false;
    
    m_has_nonAutoSortDefault_attr = false;
    m_nonAutoSortDefault_attr = false;
    
    m_has_rankBy_attr = false;
    m_rankBy_attr = 0;
    
    m_has_defaultSubtotal_attr = false;
    m_defaultSubtotal_attr = false;
    
    m_has_sumSubtotal_attr = false;
    m_sumSubtotal_attr = false;
    
    m_has_countASubtotal_attr = false;
    m_countASubtotal_attr = false;
    
    m_has_avgSubtotal_attr = false;
    m_avgSubtotal_attr = false;
    
    m_has_maxSubtotal_attr = false;
    m_maxSubtotal_attr = false;
    
    m_has_minSubtotal_attr = false;
    m_minSubtotal_attr = false;
    
    m_has_productSubtotal_attr = false;
    m_productSubtotal_attr = false;
    
    m_has_countSubtotal_attr = false;
    m_countSubtotal_attr = false;
    
    m_has_stdDevSubtotal_attr = false;
    m_stdDevSubtotal_attr = false;
    
    m_has_stdDevPSubtotal_attr = false;
    m_stdDevPSubtotal_attr = false;
    
    m_has_varSubtotal_attr = false;
    m_varSubtotal_attr = false;
    
    m_has_varPSubtotal_attr = false;
    m_varPSubtotal_attr = false;
    
    m_has_showPropCell_attr = false;
    m_showPropCell_attr = false;
    
    m_has_showPropTip_attr = false;
    m_showPropTip_attr = false;
    
    m_has_showPropAsCaption_attr = false;
    m_showPropAsCaption_attr = false;
    
    m_has_defaultAttributeDrillState_attr = false;
    m_defaultAttributeDrillState_attr = false;
    }

    void CT_PivotField::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_name_attr)
    {
        m_name_attr->toXmlAttr("name", _outStream);
    }
    
    
    if (m_has_axis_attr)
    {
        m_axis_attr->toXmlAttr("axis", _outStream);
    }
    
    
    if (m_has_dataField_attr)
    {
        _outStream << " " << "dataField" << "=\"" << XSD::XMLBooleanStr(m_dataField_attr) << "\"";
    }
    
    
    if (m_has_subtotalCaption_attr)
    {
        m_subtotalCaption_attr->toXmlAttr("subtotalCaption", _outStream);
    }
    
    
    if (m_has_showDropDowns_attr)
    {
        _outStream << " " << "showDropDowns" << "=\"" << XSD::XMLBooleanStr(m_showDropDowns_attr) << "\"";
    }
    
    
    if (m_has_hiddenLevel_attr)
    {
        _outStream << " " << "hiddenLevel" << "=\"" << XSD::XMLBooleanStr(m_hiddenLevel_attr) << "\"";
    }
    
    
    if (m_has_uniqueMemberProperty_attr)
    {
        m_uniqueMemberProperty_attr->toXmlAttr("uniqueMemberProperty", _outStream);
    }
    
    
    if (m_has_compact_attr)
    {
        _outStream << " " << "compact" << "=\"" << XSD::XMLBooleanStr(m_compact_attr) << "\"";
    }
    
    
    if (m_has_allDrilled_attr)
    {
        _outStream << " " << "allDrilled" << "=\"" << XSD::XMLBooleanStr(m_allDrilled_attr) << "\"";
    }
    
    
    if (m_has_numFmtId_attr)
    {
        m_numFmtId_attr->toXmlAttr("numFmtId", _outStream);
    }
    
    
    if (m_has_outline_attr)
    {
        _outStream << " " << "outline" << "=\"" << XSD::XMLBooleanStr(m_outline_attr) << "\"";
    }
    
    
    if (m_has_subtotalTop_attr)
    {
        _outStream << " " << "subtotalTop" << "=\"" << XSD::XMLBooleanStr(m_subtotalTop_attr) << "\"";
    }
    
    
    if (m_has_dragToRow_attr)
    {
        _outStream << " " << "dragToRow" << "=\"" << XSD::XMLBooleanStr(m_dragToRow_attr) << "\"";
    }
    
    
    if (m_has_dragToCol_attr)
    {
        _outStream << " " << "dragToCol" << "=\"" << XSD::XMLBooleanStr(m_dragToCol_attr) << "\"";
    }
    
    
    if (m_has_multipleItemSelectionAllowed_attr)
    {
        _outStream << " " << "multipleItemSelectionAllowed" << "=\"" << XSD::XMLBooleanStr(m_multipleItemSelectionAllowed_attr) << "\"";
    }
    
    
    if (m_has_dragToPage_attr)
    {
        _outStream << " " << "dragToPage" << "=\"" << XSD::XMLBooleanStr(m_dragToPage_attr) << "\"";
    }
    
    
    if (m_has_dragToData_attr)
    {
        _outStream << " " << "dragToData" << "=\"" << XSD::XMLBooleanStr(m_dragToData_attr) << "\"";
    }
    
    
    if (m_has_dragOff_attr)
    {
        _outStream << " " << "dragOff" << "=\"" << XSD::XMLBooleanStr(m_dragOff_attr) << "\"";
    }
    
    
    if (m_has_showAll_attr)
    {
        _outStream << " " << "showAll" << "=\"" << XSD::XMLBooleanStr(m_showAll_attr) << "\"";
    }
    
    
    if (m_has_insertBlankRow_attr)
    {
        _outStream << " " << "insertBlankRow" << "=\"" << XSD::XMLBooleanStr(m_insertBlankRow_attr) << "\"";
    }
    
    
    if (m_has_serverField_attr)
    {
        _outStream << " " << "serverField" << "=\"" << XSD::XMLBooleanStr(m_serverField_attr) << "\"";
    }
    
    
    if (m_has_insertPageBreak_attr)
    {
        _outStream << " " << "insertPageBreak" << "=\"" << XSD::XMLBooleanStr(m_insertPageBreak_attr) << "\"";
    }
    
    
    if (m_has_autoShow_attr)
    {
        _outStream << " " << "autoShow" << "=\"" << XSD::XMLBooleanStr(m_autoShow_attr) << "\"";
    }
    
    
    if (m_has_topAutoShow_attr)
    {
        _outStream << " " << "topAutoShow" << "=\"" << XSD::XMLBooleanStr(m_topAutoShow_attr) << "\"";
    }
    
    
    if (m_has_hideNewItems_attr)
    {
        _outStream << " " << "hideNewItems" << "=\"" << XSD::XMLBooleanStr(m_hideNewItems_attr) << "\"";
    }
    
    
    if (m_has_measureFilter_attr)
    {
        _outStream << " " << "measureFilter" << "=\"" << XSD::XMLBooleanStr(m_measureFilter_attr) << "\"";
    }
    
    
    if (m_has_includeNewItemsInFilter_attr)
    {
        _outStream << " " << "includeNewItemsInFilter" << "=\"" << XSD::XMLBooleanStr(m_includeNewItemsInFilter_attr) << "\"";
    }
    
    
    if (m_has_itemPageCount_attr)
    {
        _outStream << " " << "itemPageCount" << "=\"" << m_itemPageCount_attr << "\"";
    }
    
    
    if (m_has_sortType_attr)
    {
        m_sortType_attr->toXmlAttr("sortType", _outStream);
    }
    
    
    if (m_has_dataSourceSort_attr)
    {
        _outStream << " " << "dataSourceSort" << "=\"" << XSD::XMLBooleanStr(m_dataSourceSort_attr) << "\"";
    }
    
    
    if (m_has_nonAutoSortDefault_attr)
    {
        _outStream << " " << "nonAutoSortDefault" << "=\"" << XSD::XMLBooleanStr(m_nonAutoSortDefault_attr) << "\"";
    }
    
    
    if (m_has_rankBy_attr)
    {
        _outStream << " " << "rankBy" << "=\"" << m_rankBy_attr << "\"";
    }
    
    
    if (m_has_defaultSubtotal_attr)
    {
        _outStream << " " << "defaultSubtotal" << "=\"" << XSD::XMLBooleanStr(m_defaultSubtotal_attr) << "\"";
    }
    
    
    if (m_has_sumSubtotal_attr)
    {
        _outStream << " " << "sumSubtotal" << "=\"" << XSD::XMLBooleanStr(m_sumSubtotal_attr) << "\"";
    }
    
    
    if (m_has_countASubtotal_attr)
    {
        _outStream << " " << "countASubtotal" << "=\"" << XSD::XMLBooleanStr(m_countASubtotal_attr) << "\"";
    }
    
    
    if (m_has_avgSubtotal_attr)
    {
        _outStream << " " << "avgSubtotal" << "=\"" << XSD::XMLBooleanStr(m_avgSubtotal_attr) << "\"";
    }
    
    
    if (m_has_maxSubtotal_attr)
    {
        _outStream << " " << "maxSubtotal" << "=\"" << XSD::XMLBooleanStr(m_maxSubtotal_attr) << "\"";
    }
    
    
    if (m_has_minSubtotal_attr)
    {
        _outStream << " " << "minSubtotal" << "=\"" << XSD::XMLBooleanStr(m_minSubtotal_attr) << "\"";
    }
    
    
    if (m_has_productSubtotal_attr)
    {
        _outStream << " " << "productSubtotal" << "=\"" << XSD::XMLBooleanStr(m_productSubtotal_attr) << "\"";
    }
    
    
    if (m_has_countSubtotal_attr)
    {
        _outStream << " " << "countSubtotal" << "=\"" << XSD::XMLBooleanStr(m_countSubtotal_attr) << "\"";
    }
    
    
    if (m_has_stdDevSubtotal_attr)
    {
        _outStream << " " << "stdDevSubtotal" << "=\"" << XSD::XMLBooleanStr(m_stdDevSubtotal_attr) << "\"";
    }
    
    
    if (m_has_stdDevPSubtotal_attr)
    {
        _outStream << " " << "stdDevPSubtotal" << "=\"" << XSD::XMLBooleanStr(m_stdDevPSubtotal_attr) << "\"";
    }
    
    
    if (m_has_varSubtotal_attr)
    {
        _outStream << " " << "varSubtotal" << "=\"" << XSD::XMLBooleanStr(m_varSubtotal_attr) << "\"";
    }
    
    
    if (m_has_varPSubtotal_attr)
    {
        _outStream << " " << "varPSubtotal" << "=\"" << XSD::XMLBooleanStr(m_varPSubtotal_attr) << "\"";
    }
    
    
    if (m_has_showPropCell_attr)
    {
        _outStream << " " << "showPropCell" << "=\"" << XSD::XMLBooleanStr(m_showPropCell_attr) << "\"";
    }
    
    
    if (m_has_showPropTip_attr)
    {
        _outStream << " " << "showPropTip" << "=\"" << XSD::XMLBooleanStr(m_showPropTip_attr) << "\"";
    }
    
    
    if (m_has_showPropAsCaption_attr)
    {
        _outStream << " " << "showPropAsCaption" << "=\"" << XSD::XMLBooleanStr(m_showPropAsCaption_attr) << "\"";
    }
    
    
    if (m_has_defaultAttributeDrillState_attr)
    {
        _outStream << " " << "defaultAttributeDrillState" << "=\"" << XSD::XMLBooleanStr(m_defaultAttributeDrillState_attr) << "\"";
    }
    
            _outStream << ">";
            
    if (m_has_items)
    {
        m_items->toXmlElem("main:items", "", _outStream);;
    }
    
    if (m_has_autoSortScope)
    {
        m_autoSortScope->toXmlElem("main:autoSortScope", "", _outStream);;
    }
    
    if (m_has_extLst)
    {
        m_extLst->toXmlElem("main:extLst", "", _outStream);;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_PivotField& CT_PivotField::default_instance()
    {    
    if (!CT_PivotField::default_instance_)
    {
        CT_PivotField::default_instance_ = new CT_PivotField();
    }
    return *CT_PivotField::default_instance_;
    }

    bool CT_PivotField::has_name_attr() const
    {    
    return m_has_name_attr;
    }

    void CT_PivotField::set_name_attr(const ns_s::ST_Xstring& _name_attr)
    {    
    m_has_name_attr = true;
    m_name_attr = new ns_s::ST_Xstring(_name_attr);
    }

    const ns_s::ST_Xstring& CT_PivotField::get_name_attr() const
    {    
    if (m_name_attr)
    {
        return *m_name_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_PivotField::has_axis_attr() const
    {    
    return m_has_axis_attr;
    }

    void CT_PivotField::set_axis_attr(const ST_Axis& _axis_attr)
    {    
    m_has_axis_attr = true;
    m_axis_attr = new ST_Axis(_axis_attr);
    }

    const ST_Axis& CT_PivotField::get_axis_attr() const
    {    
    if (m_axis_attr)
    {
        return *m_axis_attr;
    }
    return ST_Axis::default_instance();
    }

    bool CT_PivotField::has_dataField_attr() const
    {    
    return m_has_dataField_attr;
    }

    void CT_PivotField::set_dataField_attr(const XSD::boolean_& _dataField_attr)
    {    
    m_has_dataField_attr = true;
    m_dataField_attr = _dataField_attr;
    }

    const XSD::boolean_& CT_PivotField::get_dataField_attr() const
    {    
    return m_dataField_attr;
    }

    bool CT_PivotField::has_subtotalCaption_attr() const
    {    
    return m_has_subtotalCaption_attr;
    }

    void CT_PivotField::set_subtotalCaption_attr(const ns_s::ST_Xstring& _subtotalCaption_attr)
    {    
    m_has_subtotalCaption_attr = true;
    m_subtotalCaption_attr = new ns_s::ST_Xstring(_subtotalCaption_attr);
    }

    const ns_s::ST_Xstring& CT_PivotField::get_subtotalCaption_attr() const
    {    
    if (m_subtotalCaption_attr)
    {
        return *m_subtotalCaption_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_PivotField::has_showDropDowns_attr() const
    {    
    return m_has_showDropDowns_attr;
    }

    void CT_PivotField::set_showDropDowns_attr(const XSD::boolean_& _showDropDowns_attr)
    {    
    m_has_showDropDowns_attr = true;
    m_showDropDowns_attr = _showDropDowns_attr;
    }

    const XSD::boolean_& CT_PivotField::get_showDropDowns_attr() const
    {    
    return m_showDropDowns_attr;
    }

    bool CT_PivotField::has_hiddenLevel_attr() const
    {    
    return m_has_hiddenLevel_attr;
    }

    void CT_PivotField::set_hiddenLevel_attr(const XSD::boolean_& _hiddenLevel_attr)
    {    
    m_has_hiddenLevel_attr = true;
    m_hiddenLevel_attr = _hiddenLevel_attr;
    }

    const XSD::boolean_& CT_PivotField::get_hiddenLevel_attr() const
    {    
    return m_hiddenLevel_attr;
    }

    bool CT_PivotField::has_uniqueMemberProperty_attr() const
    {    
    return m_has_uniqueMemberProperty_attr;
    }

    void CT_PivotField::set_uniqueMemberProperty_attr(const ns_s::ST_Xstring& _uniqueMemberProperty_attr)
    {    
    m_has_uniqueMemberProperty_attr = true;
    m_uniqueMemberProperty_attr = new ns_s::ST_Xstring(_uniqueMemberProperty_attr);
    }

    const ns_s::ST_Xstring& CT_PivotField::get_uniqueMemberProperty_attr() const
    {    
    if (m_uniqueMemberProperty_attr)
    {
        return *m_uniqueMemberProperty_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_PivotField::has_compact_attr() const
    {    
    return m_has_compact_attr;
    }

    void CT_PivotField::set_compact_attr(const XSD::boolean_& _compact_attr)
    {    
    m_has_compact_attr = true;
    m_compact_attr = _compact_attr;
    }

    const XSD::boolean_& CT_PivotField::get_compact_attr() const
    {    
    return m_compact_attr;
    }

    bool CT_PivotField::has_allDrilled_attr() const
    {    
    return m_has_allDrilled_attr;
    }

    void CT_PivotField::set_allDrilled_attr(const XSD::boolean_& _allDrilled_attr)
    {    
    m_has_allDrilled_attr = true;
    m_allDrilled_attr = _allDrilled_attr;
    }

    const XSD::boolean_& CT_PivotField::get_allDrilled_attr() const
    {    
    return m_allDrilled_attr;
    }

    bool CT_PivotField::has_numFmtId_attr() const
    {    
    return m_has_numFmtId_attr;
    }

    void CT_PivotField::set_numFmtId_attr(const ST_NumFmtId& _numFmtId_attr)
    {    
    m_has_numFmtId_attr = true;
    m_numFmtId_attr = new ST_NumFmtId(_numFmtId_attr);
    }

    const ST_NumFmtId& CT_PivotField::get_numFmtId_attr() const
    {    
    if (m_numFmtId_attr)
    {
        return *m_numFmtId_attr;
    }
    return ST_NumFmtId::default_instance();
    }

    bool CT_PivotField::has_outline_attr() const
    {    
    return m_has_outline_attr;
    }

    void CT_PivotField::set_outline_attr(const XSD::boolean_& _outline_attr)
    {    
    m_has_outline_attr = true;
    m_outline_attr = _outline_attr;
    }

    const XSD::boolean_& CT_PivotField::get_outline_attr() const
    {    
    return m_outline_attr;
    }

    bool CT_PivotField::has_subtotalTop_attr() const
    {    
    return m_has_subtotalTop_attr;
    }

    void CT_PivotField::set_subtotalTop_attr(const XSD::boolean_& _subtotalTop_attr)
    {    
    m_has_subtotalTop_attr = true;
    m_subtotalTop_attr = _subtotalTop_attr;
    }

    const XSD::boolean_& CT_PivotField::get_subtotalTop_attr() const
    {    
    return m_subtotalTop_attr;
    }

    bool CT_PivotField::has_dragToRow_attr() const
    {    
    return m_has_dragToRow_attr;
    }

    void CT_PivotField::set_dragToRow_attr(const XSD::boolean_& _dragToRow_attr)
    {    
    m_has_dragToRow_attr = true;
    m_dragToRow_attr = _dragToRow_attr;
    }

    const XSD::boolean_& CT_PivotField::get_dragToRow_attr() const
    {    
    return m_dragToRow_attr;
    }

    bool CT_PivotField::has_dragToCol_attr() const
    {    
    return m_has_dragToCol_attr;
    }

    void CT_PivotField::set_dragToCol_attr(const XSD::boolean_& _dragToCol_attr)
    {    
    m_has_dragToCol_attr = true;
    m_dragToCol_attr = _dragToCol_attr;
    }

    const XSD::boolean_& CT_PivotField::get_dragToCol_attr() const
    {    
    return m_dragToCol_attr;
    }

    bool CT_PivotField::has_multipleItemSelectionAllowed_attr() const
    {    
    return m_has_multipleItemSelectionAllowed_attr;
    }

    void CT_PivotField::set_multipleItemSelectionAllowed_attr(const XSD::boolean_& _multipleItemSelectionAllowed_attr)
    {    
    m_has_multipleItemSelectionAllowed_attr = true;
    m_multipleItemSelectionAllowed_attr = _multipleItemSelectionAllowed_attr;
    }

    const XSD::boolean_& CT_PivotField::get_multipleItemSelectionAllowed_attr() const
    {    
    return m_multipleItemSelectionAllowed_attr;
    }

    bool CT_PivotField::has_dragToPage_attr() const
    {    
    return m_has_dragToPage_attr;
    }

    void CT_PivotField::set_dragToPage_attr(const XSD::boolean_& _dragToPage_attr)
    {    
    m_has_dragToPage_attr = true;
    m_dragToPage_attr = _dragToPage_attr;
    }

    const XSD::boolean_& CT_PivotField::get_dragToPage_attr() const
    {    
    return m_dragToPage_attr;
    }

    bool CT_PivotField::has_dragToData_attr() const
    {    
    return m_has_dragToData_attr;
    }

    void CT_PivotField::set_dragToData_attr(const XSD::boolean_& _dragToData_attr)
    {    
    m_has_dragToData_attr = true;
    m_dragToData_attr = _dragToData_attr;
    }

    const XSD::boolean_& CT_PivotField::get_dragToData_attr() const
    {    
    return m_dragToData_attr;
    }

    bool CT_PivotField::has_dragOff_attr() const
    {    
    return m_has_dragOff_attr;
    }

    void CT_PivotField::set_dragOff_attr(const XSD::boolean_& _dragOff_attr)
    {    
    m_has_dragOff_attr = true;
    m_dragOff_attr = _dragOff_attr;
    }

    const XSD::boolean_& CT_PivotField::get_dragOff_attr() const
    {    
    return m_dragOff_attr;
    }

    bool CT_PivotField::has_showAll_attr() const
    {    
    return m_has_showAll_attr;
    }

    void CT_PivotField::set_showAll_attr(const XSD::boolean_& _showAll_attr)
    {    
    m_has_showAll_attr = true;
    m_showAll_attr = _showAll_attr;
    }

    const XSD::boolean_& CT_PivotField::get_showAll_attr() const
    {    
    return m_showAll_attr;
    }

    bool CT_PivotField::has_insertBlankRow_attr() const
    {    
    return m_has_insertBlankRow_attr;
    }

    void CT_PivotField::set_insertBlankRow_attr(const XSD::boolean_& _insertBlankRow_attr)
    {    
    m_has_insertBlankRow_attr = true;
    m_insertBlankRow_attr = _insertBlankRow_attr;
    }

    const XSD::boolean_& CT_PivotField::get_insertBlankRow_attr() const
    {    
    return m_insertBlankRow_attr;
    }

    bool CT_PivotField::has_serverField_attr() const
    {    
    return m_has_serverField_attr;
    }

    void CT_PivotField::set_serverField_attr(const XSD::boolean_& _serverField_attr)
    {    
    m_has_serverField_attr = true;
    m_serverField_attr = _serverField_attr;
    }

    const XSD::boolean_& CT_PivotField::get_serverField_attr() const
    {    
    return m_serverField_attr;
    }

    bool CT_PivotField::has_insertPageBreak_attr() const
    {    
    return m_has_insertPageBreak_attr;
    }

    void CT_PivotField::set_insertPageBreak_attr(const XSD::boolean_& _insertPageBreak_attr)
    {    
    m_has_insertPageBreak_attr = true;
    m_insertPageBreak_attr = _insertPageBreak_attr;
    }

    const XSD::boolean_& CT_PivotField::get_insertPageBreak_attr() const
    {    
    return m_insertPageBreak_attr;
    }

    bool CT_PivotField::has_autoShow_attr() const
    {    
    return m_has_autoShow_attr;
    }

    void CT_PivotField::set_autoShow_attr(const XSD::boolean_& _autoShow_attr)
    {    
    m_has_autoShow_attr = true;
    m_autoShow_attr = _autoShow_attr;
    }

    const XSD::boolean_& CT_PivotField::get_autoShow_attr() const
    {    
    return m_autoShow_attr;
    }

    bool CT_PivotField::has_topAutoShow_attr() const
    {    
    return m_has_topAutoShow_attr;
    }

    void CT_PivotField::set_topAutoShow_attr(const XSD::boolean_& _topAutoShow_attr)
    {    
    m_has_topAutoShow_attr = true;
    m_topAutoShow_attr = _topAutoShow_attr;
    }

    const XSD::boolean_& CT_PivotField::get_topAutoShow_attr() const
    {    
    return m_topAutoShow_attr;
    }

    bool CT_PivotField::has_hideNewItems_attr() const
    {    
    return m_has_hideNewItems_attr;
    }

    void CT_PivotField::set_hideNewItems_attr(const XSD::boolean_& _hideNewItems_attr)
    {    
    m_has_hideNewItems_attr = true;
    m_hideNewItems_attr = _hideNewItems_attr;
    }

    const XSD::boolean_& CT_PivotField::get_hideNewItems_attr() const
    {    
    return m_hideNewItems_attr;
    }

    bool CT_PivotField::has_measureFilter_attr() const
    {    
    return m_has_measureFilter_attr;
    }

    void CT_PivotField::set_measureFilter_attr(const XSD::boolean_& _measureFilter_attr)
    {    
    m_has_measureFilter_attr = true;
    m_measureFilter_attr = _measureFilter_attr;
    }

    const XSD::boolean_& CT_PivotField::get_measureFilter_attr() const
    {    
    return m_measureFilter_attr;
    }

    bool CT_PivotField::has_includeNewItemsInFilter_attr() const
    {    
    return m_has_includeNewItemsInFilter_attr;
    }

    void CT_PivotField::set_includeNewItemsInFilter_attr(const XSD::boolean_& _includeNewItemsInFilter_attr)
    {    
    m_has_includeNewItemsInFilter_attr = true;
    m_includeNewItemsInFilter_attr = _includeNewItemsInFilter_attr;
    }

    const XSD::boolean_& CT_PivotField::get_includeNewItemsInFilter_attr() const
    {    
    return m_includeNewItemsInFilter_attr;
    }

    bool CT_PivotField::has_itemPageCount_attr() const
    {    
    return m_has_itemPageCount_attr;
    }

    void CT_PivotField::set_itemPageCount_attr(const XSD::unsignedInt_& _itemPageCount_attr)
    {    
    m_has_itemPageCount_attr = true;
    m_itemPageCount_attr = _itemPageCount_attr;
    }

    const XSD::unsignedInt_& CT_PivotField::get_itemPageCount_attr() const
    {    
    return m_itemPageCount_attr;
    }

    bool CT_PivotField::has_sortType_attr() const
    {    
    return m_has_sortType_attr;
    }

    void CT_PivotField::set_sortType_attr(const ST_FieldSortType& _sortType_attr)
    {    
    m_has_sortType_attr = true;
    m_sortType_attr = new ST_FieldSortType(_sortType_attr);
    }

    const ST_FieldSortType& CT_PivotField::get_sortType_attr() const
    {    
    if (m_sortType_attr)
    {
        return *m_sortType_attr;
    }
    return ST_FieldSortType::default_instance();
    }

    bool CT_PivotField::has_dataSourceSort_attr() const
    {    
    return m_has_dataSourceSort_attr;
    }

    void CT_PivotField::set_dataSourceSort_attr(const XSD::boolean_& _dataSourceSort_attr)
    {    
    m_has_dataSourceSort_attr = true;
    m_dataSourceSort_attr = _dataSourceSort_attr;
    }

    const XSD::boolean_& CT_PivotField::get_dataSourceSort_attr() const
    {    
    return m_dataSourceSort_attr;
    }

    bool CT_PivotField::has_nonAutoSortDefault_attr() const
    {    
    return m_has_nonAutoSortDefault_attr;
    }

    void CT_PivotField::set_nonAutoSortDefault_attr(const XSD::boolean_& _nonAutoSortDefault_attr)
    {    
    m_has_nonAutoSortDefault_attr = true;
    m_nonAutoSortDefault_attr = _nonAutoSortDefault_attr;
    }

    const XSD::boolean_& CT_PivotField::get_nonAutoSortDefault_attr() const
    {    
    return m_nonAutoSortDefault_attr;
    }

    bool CT_PivotField::has_rankBy_attr() const
    {    
    return m_has_rankBy_attr;
    }

    void CT_PivotField::set_rankBy_attr(const XSD::unsignedInt_& _rankBy_attr)
    {    
    m_has_rankBy_attr = true;
    m_rankBy_attr = _rankBy_attr;
    }

    const XSD::unsignedInt_& CT_PivotField::get_rankBy_attr() const
    {    
    return m_rankBy_attr;
    }

    bool CT_PivotField::has_defaultSubtotal_attr() const
    {    
    return m_has_defaultSubtotal_attr;
    }

    void CT_PivotField::set_defaultSubtotal_attr(const XSD::boolean_& _defaultSubtotal_attr)
    {    
    m_has_defaultSubtotal_attr = true;
    m_defaultSubtotal_attr = _defaultSubtotal_attr;
    }

    const XSD::boolean_& CT_PivotField::get_defaultSubtotal_attr() const
    {    
    return m_defaultSubtotal_attr;
    }

    bool CT_PivotField::has_sumSubtotal_attr() const
    {    
    return m_has_sumSubtotal_attr;
    }

    void CT_PivotField::set_sumSubtotal_attr(const XSD::boolean_& _sumSubtotal_attr)
    {    
    m_has_sumSubtotal_attr = true;
    m_sumSubtotal_attr = _sumSubtotal_attr;
    }

    const XSD::boolean_& CT_PivotField::get_sumSubtotal_attr() const
    {    
    return m_sumSubtotal_attr;
    }

    bool CT_PivotField::has_countASubtotal_attr() const
    {    
    return m_has_countASubtotal_attr;
    }

    void CT_PivotField::set_countASubtotal_attr(const XSD::boolean_& _countASubtotal_attr)
    {    
    m_has_countASubtotal_attr = true;
    m_countASubtotal_attr = _countASubtotal_attr;
    }

    const XSD::boolean_& CT_PivotField::get_countASubtotal_attr() const
    {    
    return m_countASubtotal_attr;
    }

    bool CT_PivotField::has_avgSubtotal_attr() const
    {    
    return m_has_avgSubtotal_attr;
    }

    void CT_PivotField::set_avgSubtotal_attr(const XSD::boolean_& _avgSubtotal_attr)
    {    
    m_has_avgSubtotal_attr = true;
    m_avgSubtotal_attr = _avgSubtotal_attr;
    }

    const XSD::boolean_& CT_PivotField::get_avgSubtotal_attr() const
    {    
    return m_avgSubtotal_attr;
    }

    bool CT_PivotField::has_maxSubtotal_attr() const
    {    
    return m_has_maxSubtotal_attr;
    }

    void CT_PivotField::set_maxSubtotal_attr(const XSD::boolean_& _maxSubtotal_attr)
    {    
    m_has_maxSubtotal_attr = true;
    m_maxSubtotal_attr = _maxSubtotal_attr;
    }

    const XSD::boolean_& CT_PivotField::get_maxSubtotal_attr() const
    {    
    return m_maxSubtotal_attr;
    }

    bool CT_PivotField::has_minSubtotal_attr() const
    {    
    return m_has_minSubtotal_attr;
    }

    void CT_PivotField::set_minSubtotal_attr(const XSD::boolean_& _minSubtotal_attr)
    {    
    m_has_minSubtotal_attr = true;
    m_minSubtotal_attr = _minSubtotal_attr;
    }

    const XSD::boolean_& CT_PivotField::get_minSubtotal_attr() const
    {    
    return m_minSubtotal_attr;
    }

    bool CT_PivotField::has_productSubtotal_attr() const
    {    
    return m_has_productSubtotal_attr;
    }

    void CT_PivotField::set_productSubtotal_attr(const XSD::boolean_& _productSubtotal_attr)
    {    
    m_has_productSubtotal_attr = true;
    m_productSubtotal_attr = _productSubtotal_attr;
    }

    const XSD::boolean_& CT_PivotField::get_productSubtotal_attr() const
    {    
    return m_productSubtotal_attr;
    }

    bool CT_PivotField::has_countSubtotal_attr() const
    {    
    return m_has_countSubtotal_attr;
    }

    void CT_PivotField::set_countSubtotal_attr(const XSD::boolean_& _countSubtotal_attr)
    {    
    m_has_countSubtotal_attr = true;
    m_countSubtotal_attr = _countSubtotal_attr;
    }

    const XSD::boolean_& CT_PivotField::get_countSubtotal_attr() const
    {    
    return m_countSubtotal_attr;
    }

    bool CT_PivotField::has_stdDevSubtotal_attr() const
    {    
    return m_has_stdDevSubtotal_attr;
    }

    void CT_PivotField::set_stdDevSubtotal_attr(const XSD::boolean_& _stdDevSubtotal_attr)
    {    
    m_has_stdDevSubtotal_attr = true;
    m_stdDevSubtotal_attr = _stdDevSubtotal_attr;
    }

    const XSD::boolean_& CT_PivotField::get_stdDevSubtotal_attr() const
    {    
    return m_stdDevSubtotal_attr;
    }

    bool CT_PivotField::has_stdDevPSubtotal_attr() const
    {    
    return m_has_stdDevPSubtotal_attr;
    }

    void CT_PivotField::set_stdDevPSubtotal_attr(const XSD::boolean_& _stdDevPSubtotal_attr)
    {    
    m_has_stdDevPSubtotal_attr = true;
    m_stdDevPSubtotal_attr = _stdDevPSubtotal_attr;
    }

    const XSD::boolean_& CT_PivotField::get_stdDevPSubtotal_attr() const
    {    
    return m_stdDevPSubtotal_attr;
    }

    bool CT_PivotField::has_varSubtotal_attr() const
    {    
    return m_has_varSubtotal_attr;
    }

    void CT_PivotField::set_varSubtotal_attr(const XSD::boolean_& _varSubtotal_attr)
    {    
    m_has_varSubtotal_attr = true;
    m_varSubtotal_attr = _varSubtotal_attr;
    }

    const XSD::boolean_& CT_PivotField::get_varSubtotal_attr() const
    {    
    return m_varSubtotal_attr;
    }

    bool CT_PivotField::has_varPSubtotal_attr() const
    {    
    return m_has_varPSubtotal_attr;
    }

    void CT_PivotField::set_varPSubtotal_attr(const XSD::boolean_& _varPSubtotal_attr)
    {    
    m_has_varPSubtotal_attr = true;
    m_varPSubtotal_attr = _varPSubtotal_attr;
    }

    const XSD::boolean_& CT_PivotField::get_varPSubtotal_attr() const
    {    
    return m_varPSubtotal_attr;
    }

    bool CT_PivotField::has_showPropCell_attr() const
    {    
    return m_has_showPropCell_attr;
    }

    void CT_PivotField::set_showPropCell_attr(const XSD::boolean_& _showPropCell_attr)
    {    
    m_has_showPropCell_attr = true;
    m_showPropCell_attr = _showPropCell_attr;
    }

    const XSD::boolean_& CT_PivotField::get_showPropCell_attr() const
    {    
    return m_showPropCell_attr;
    }

    bool CT_PivotField::has_showPropTip_attr() const
    {    
    return m_has_showPropTip_attr;
    }

    void CT_PivotField::set_showPropTip_attr(const XSD::boolean_& _showPropTip_attr)
    {    
    m_has_showPropTip_attr = true;
    m_showPropTip_attr = _showPropTip_attr;
    }

    const XSD::boolean_& CT_PivotField::get_showPropTip_attr() const
    {    
    return m_showPropTip_attr;
    }

    bool CT_PivotField::has_showPropAsCaption_attr() const
    {    
    return m_has_showPropAsCaption_attr;
    }

    void CT_PivotField::set_showPropAsCaption_attr(const XSD::boolean_& _showPropAsCaption_attr)
    {    
    m_has_showPropAsCaption_attr = true;
    m_showPropAsCaption_attr = _showPropAsCaption_attr;
    }

    const XSD::boolean_& CT_PivotField::get_showPropAsCaption_attr() const
    {    
    return m_showPropAsCaption_attr;
    }

    bool CT_PivotField::has_defaultAttributeDrillState_attr() const
    {    
    return m_has_defaultAttributeDrillState_attr;
    }

    void CT_PivotField::set_defaultAttributeDrillState_attr(const XSD::boolean_& _defaultAttributeDrillState_attr)
    {    
    m_has_defaultAttributeDrillState_attr = true;
    m_defaultAttributeDrillState_attr = _defaultAttributeDrillState_attr;
    }

    const XSD::boolean_& CT_PivotField::get_defaultAttributeDrillState_attr() const
    {    
    return m_defaultAttributeDrillState_attr;
    }

CT_PivotField* CT_PivotField::default_instance_ = NULL;

    // CT_AutoSortScope
    CT_AutoSortScope::CT_AutoSortScope()
    :m_has_pivotArea(false),
    m_pivotArea(NULL)
    {
    }
    CT_AutoSortScope::~CT_AutoSortScope()
{
    clear();    }
    bool CT_AutoSortScope::has_pivotArea() const
    {    
    return m_has_pivotArea;
    }

    CT_PivotArea* CT_AutoSortScope::mutable_pivotArea()
    {    
    m_has_pivotArea = true;
    if (!m_pivotArea)
    {
        m_pivotArea = new CT_PivotArea();
    }
    return m_pivotArea;
    }

    const CT_PivotArea& CT_AutoSortScope::get_pivotArea() const
    {    
    if (m_pivotArea)
    {
        return *m_pivotArea;
    }
    return CT_PivotArea::default_instance();
    }

    void CT_AutoSortScope::clear()
    {    }

    void CT_AutoSortScope::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
            _outStream << ">";
            
    if (m_has_pivotArea)
    {
        m_pivotArea->toXmlElem("main:pivotArea", "", _outStream);;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_AutoSortScope& CT_AutoSortScope::default_instance()
    {    
    if (!CT_AutoSortScope::default_instance_)
    {
        CT_AutoSortScope::default_instance_ = new CT_AutoSortScope();
    }
    return *CT_AutoSortScope::default_instance_;
    }

CT_AutoSortScope* CT_AutoSortScope::default_instance_ = NULL;

    // CT_Items
    CT_Items::CT_Items()
    :m_has_count_attr(false),
    m_count_attr(0)
    {
    }
    CT_Items::~CT_Items()
{
    clear();    }
    CT_Item* CT_Items::add_item()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Item* pNewChild = pChildGroup->mutable_item();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_Items::clear()
    {    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_Items::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_item())
            {
                (*iter)->get_item().toXmlElem("main:item", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_Items& CT_Items::default_instance()
    {    
    if (!CT_Items::default_instance_)
    {
        CT_Items::default_instance_ = new CT_Items();
    }
    return *CT_Items::default_instance_;
    }

    bool CT_Items::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void CT_Items::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& CT_Items::get_count_attr() const
    {    
    return m_count_attr;
    }


    // CT_Items::ChildGroup_1
    CT_Items::ChildGroup_1::ChildGroup_1()
    :m_has_item(false),
    m_item(NULL)
    {
    }
    bool CT_Items::ChildGroup_1::has_item() const
    {    
    return m_has_item;
    }

    CT_Item* CT_Items::ChildGroup_1::mutable_item()
    {    
    
    m_has_item = true;
    if (!m_item)
    {
        m_item = new CT_Item();
    }
    return m_item;
    }

    const CT_Item& CT_Items::ChildGroup_1::get_item() const
    {    
    if (m_item)
    {
        return *m_item;
    }
    return CT_Item::default_instance();
    }

CT_Items* CT_Items::default_instance_ = NULL;

    // CT_Item
    CT_Item::CT_Item()
    :m_has_n_attr(false),
    m_n_attr(NULL),
    m_has_t_attr(false),
    m_t_attr(NULL),
    m_has_h_attr(false),
    m_h_attr(false),
    m_has_s_attr(false),
    m_s_attr(false),
    m_has_sd_attr(false),
    m_sd_attr(false),
    m_has_f_attr(false),
    m_f_attr(false),
    m_has_m_attr(false),
    m_m_attr(false),
    m_has_c_attr(false),
    m_c_attr(false),
    m_has_x_attr(false),
    m_x_attr(0),
    m_has_d_attr(false),
    m_d_attr(false),
    m_has_e_attr(false),
    m_e_attr(false)
    {
    }
    CT_Item::~CT_Item()
{
    clear();    }
    void CT_Item::clear()
    {    
    m_has_n_attr = false;
    
    if (m_n_attr)
    {
        delete m_n_attr;
        m_n_attr = NULL;
    }
    
    
    m_has_t_attr = false;
    
    if (m_t_attr)
    {
        delete m_t_attr;
        m_t_attr = NULL;
    }
    
    
    m_has_h_attr = false;
    m_h_attr = false;
    
    m_has_s_attr = false;
    m_s_attr = false;
    
    m_has_sd_attr = false;
    m_sd_attr = false;
    
    m_has_f_attr = false;
    m_f_attr = false;
    
    m_has_m_attr = false;
    m_m_attr = false;
    
    m_has_c_attr = false;
    m_c_attr = false;
    
    m_has_x_attr = false;
    m_x_attr = 0;
    
    m_has_d_attr = false;
    m_d_attr = false;
    
    m_has_e_attr = false;
    m_e_attr = false;
    }

    void CT_Item::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_n_attr)
    {
        m_n_attr->toXmlAttr("n", _outStream);
    }
    
    
    if (m_has_t_attr)
    {
        m_t_attr->toXmlAttr("t", _outStream);
    }
    
    
    if (m_has_h_attr)
    {
        _outStream << " " << "h" << "=\"" << XSD::XMLBooleanStr(m_h_attr) << "\"";
    }
    
    
    if (m_has_s_attr)
    {
        _outStream << " " << "s" << "=\"" << XSD::XMLBooleanStr(m_s_attr) << "\"";
    }
    
    
    if (m_has_sd_attr)
    {
        _outStream << " " << "sd" << "=\"" << XSD::XMLBooleanStr(m_sd_attr) << "\"";
    }
    
    
    if (m_has_f_attr)
    {
        _outStream << " " << "f" << "=\"" << XSD::XMLBooleanStr(m_f_attr) << "\"";
    }
    
    
    if (m_has_m_attr)
    {
        _outStream << " " << "m" << "=\"" << XSD::XMLBooleanStr(m_m_attr) << "\"";
    }
    
    
    if (m_has_c_attr)
    {
        _outStream << " " << "c" << "=\"" << XSD::XMLBooleanStr(m_c_attr) << "\"";
    }
    
    
    if (m_has_x_attr)
    {
        _outStream << " " << "x" << "=\"" << m_x_attr << "\"";
    }
    
    
    if (m_has_d_attr)
    {
        _outStream << " " << "d" << "=\"" << XSD::XMLBooleanStr(m_d_attr) << "\"";
    }
    
    
    if (m_has_e_attr)
    {
        _outStream << " " << "e" << "=\"" << XSD::XMLBooleanStr(m_e_attr) << "\"";
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_Item& CT_Item::default_instance()
    {    
    if (!CT_Item::default_instance_)
    {
        CT_Item::default_instance_ = new CT_Item();
    }
    return *CT_Item::default_instance_;
    }

    bool CT_Item::has_n_attr() const
    {    
    return m_has_n_attr;
    }

    void CT_Item::set_n_attr(const ns_s::ST_Xstring& _n_attr)
    {    
    m_has_n_attr = true;
    m_n_attr = new ns_s::ST_Xstring(_n_attr);
    }

    const ns_s::ST_Xstring& CT_Item::get_n_attr() const
    {    
    if (m_n_attr)
    {
        return *m_n_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_Item::has_t_attr() const
    {    
    return m_has_t_attr;
    }

    void CT_Item::set_t_attr(const ST_ItemType& _t_attr)
    {    
    m_has_t_attr = true;
    m_t_attr = new ST_ItemType(_t_attr);
    }

    const ST_ItemType& CT_Item::get_t_attr() const
    {    
    if (m_t_attr)
    {
        return *m_t_attr;
    }
    return ST_ItemType::default_instance();
    }

    bool CT_Item::has_h_attr() const
    {    
    return m_has_h_attr;
    }

    void CT_Item::set_h_attr(const XSD::boolean_& _h_attr)
    {    
    m_has_h_attr = true;
    m_h_attr = _h_attr;
    }

    const XSD::boolean_& CT_Item::get_h_attr() const
    {    
    return m_h_attr;
    }

    bool CT_Item::has_s_attr() const
    {    
    return m_has_s_attr;
    }

    void CT_Item::set_s_attr(const XSD::boolean_& _s_attr)
    {    
    m_has_s_attr = true;
    m_s_attr = _s_attr;
    }

    const XSD::boolean_& CT_Item::get_s_attr() const
    {    
    return m_s_attr;
    }

    bool CT_Item::has_sd_attr() const
    {    
    return m_has_sd_attr;
    }

    void CT_Item::set_sd_attr(const XSD::boolean_& _sd_attr)
    {    
    m_has_sd_attr = true;
    m_sd_attr = _sd_attr;
    }

    const XSD::boolean_& CT_Item::get_sd_attr() const
    {    
    return m_sd_attr;
    }

    bool CT_Item::has_f_attr() const
    {    
    return m_has_f_attr;
    }

    void CT_Item::set_f_attr(const XSD::boolean_& _f_attr)
    {    
    m_has_f_attr = true;
    m_f_attr = _f_attr;
    }

    const XSD::boolean_& CT_Item::get_f_attr() const
    {    
    return m_f_attr;
    }

    bool CT_Item::has_m_attr() const
    {    
    return m_has_m_attr;
    }

    void CT_Item::set_m_attr(const XSD::boolean_& _m_attr)
    {    
    m_has_m_attr = true;
    m_m_attr = _m_attr;
    }

    const XSD::boolean_& CT_Item::get_m_attr() const
    {    
    return m_m_attr;
    }

    bool CT_Item::has_c_attr() const
    {    
    return m_has_c_attr;
    }

    void CT_Item::set_c_attr(const XSD::boolean_& _c_attr)
    {    
    m_has_c_attr = true;
    m_c_attr = _c_attr;
    }

    const XSD::boolean_& CT_Item::get_c_attr() const
    {    
    return m_c_attr;
    }

    bool CT_Item::has_x_attr() const
    {    
    return m_has_x_attr;
    }

    void CT_Item::set_x_attr(const XSD::unsignedInt_& _x_attr)
    {    
    m_has_x_attr = true;
    m_x_attr = _x_attr;
    }

    const XSD::unsignedInt_& CT_Item::get_x_attr() const
    {    
    return m_x_attr;
    }

    bool CT_Item::has_d_attr() const
    {    
    return m_has_d_attr;
    }

    void CT_Item::set_d_attr(const XSD::boolean_& _d_attr)
    {    
    m_has_d_attr = true;
    m_d_attr = _d_attr;
    }

    const XSD::boolean_& CT_Item::get_d_attr() const
    {    
    return m_d_attr;
    }

    bool CT_Item::has_e_attr() const
    {    
    return m_has_e_attr;
    }

    void CT_Item::set_e_attr(const XSD::boolean_& _e_attr)
    {    
    m_has_e_attr = true;
    m_e_attr = _e_attr;
    }

    const XSD::boolean_& CT_Item::get_e_attr() const
    {    
    return m_e_attr;
    }

CT_Item* CT_Item::default_instance_ = NULL;

    // CT_PageFields
    CT_PageFields::CT_PageFields()
    :m_has_count_attr(false),
    m_count_attr(0)
    {
    }
    CT_PageFields::~CT_PageFields()
{
    clear();    }
    CT_PageField* CT_PageFields::add_pageField()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_PageField* pNewChild = pChildGroup->mutable_pageField();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_PageFields::clear()
    {    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_PageFields::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_pageField())
            {
                (*iter)->get_pageField().toXmlElem("main:pageField", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_PageFields& CT_PageFields::default_instance()
    {    
    if (!CT_PageFields::default_instance_)
    {
        CT_PageFields::default_instance_ = new CT_PageFields();
    }
    return *CT_PageFields::default_instance_;
    }

    bool CT_PageFields::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void CT_PageFields::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& CT_PageFields::get_count_attr() const
    {    
    return m_count_attr;
    }


    // CT_PageFields::ChildGroup_1
    CT_PageFields::ChildGroup_1::ChildGroup_1()
    :m_has_pageField(false),
    m_pageField(NULL)
    {
    }
    bool CT_PageFields::ChildGroup_1::has_pageField() const
    {    
    return m_has_pageField;
    }

    CT_PageField* CT_PageFields::ChildGroup_1::mutable_pageField()
    {    
    
    m_has_pageField = true;
    if (!m_pageField)
    {
        m_pageField = new CT_PageField();
    }
    return m_pageField;
    }

    const CT_PageField& CT_PageFields::ChildGroup_1::get_pageField() const
    {    
    if (m_pageField)
    {
        return *m_pageField;
    }
    return CT_PageField::default_instance();
    }

CT_PageFields* CT_PageFields::default_instance_ = NULL;

    // CT_PageField
    CT_PageField::CT_PageField()
    :m_has_extLst(false),
    m_extLst(NULL),
    m_has_fld_attr(false),
    m_fld_attr(0),
    m_has_item_attr(false),
    m_item_attr(0),
    m_has_hier_attr(false),
    m_hier_attr(0),
    m_has_name_attr(false),
    m_name_attr(NULL),
    m_has_cap_attr(false),
    m_cap_attr(NULL)
    {
    }
    CT_PageField::~CT_PageField()
{
    clear();    }
    bool CT_PageField::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* CT_PageField::mutable_extLst()
    {    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& CT_PageField::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

    void CT_PageField::clear()
    {    
    m_has_fld_attr = false;
    m_fld_attr = 0;
    
    m_has_item_attr = false;
    m_item_attr = 0;
    
    m_has_hier_attr = false;
    m_hier_attr = 0;
    
    m_has_name_attr = false;
    
    if (m_name_attr)
    {
        delete m_name_attr;
        m_name_attr = NULL;
    }
    
    
    m_has_cap_attr = false;
    
    if (m_cap_attr)
    {
        delete m_cap_attr;
        m_cap_attr = NULL;
    }
    
    }

    void CT_PageField::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_fld_attr)
    {
        _outStream << " " << "fld" << "=\"" << m_fld_attr << "\"";
    }
    
    
    if (m_has_item_attr)
    {
        _outStream << " " << "item" << "=\"" << m_item_attr << "\"";
    }
    
    
    if (m_has_hier_attr)
    {
        _outStream << " " << "hier" << "=\"" << m_hier_attr << "\"";
    }
    
    
    if (m_has_name_attr)
    {
        m_name_attr->toXmlAttr("name", _outStream);
    }
    
    
    if (m_has_cap_attr)
    {
        m_cap_attr->toXmlAttr("cap", _outStream);
    }
    
            _outStream << ">";
            
    if (m_has_extLst)
    {
        m_extLst->toXmlElem("main:extLst", "", _outStream);;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_PageField& CT_PageField::default_instance()
    {    
    if (!CT_PageField::default_instance_)
    {
        CT_PageField::default_instance_ = new CT_PageField();
    }
    return *CT_PageField::default_instance_;
    }

    bool CT_PageField::has_fld_attr() const
    {    
    return m_has_fld_attr;
    }

    void CT_PageField::set_fld_attr(const XSD::int_& _fld_attr)
    {    
    m_has_fld_attr = true;
    m_fld_attr = _fld_attr;
    }

    const XSD::int_& CT_PageField::get_fld_attr() const
    {    
    return m_fld_attr;
    }

    bool CT_PageField::has_item_attr() const
    {    
    return m_has_item_attr;
    }

    void CT_PageField::set_item_attr(const XSD::unsignedInt_& _item_attr)
    {    
    m_has_item_attr = true;
    m_item_attr = _item_attr;
    }

    const XSD::unsignedInt_& CT_PageField::get_item_attr() const
    {    
    return m_item_attr;
    }

    bool CT_PageField::has_hier_attr() const
    {    
    return m_has_hier_attr;
    }

    void CT_PageField::set_hier_attr(const XSD::int_& _hier_attr)
    {    
    m_has_hier_attr = true;
    m_hier_attr = _hier_attr;
    }

    const XSD::int_& CT_PageField::get_hier_attr() const
    {    
    return m_hier_attr;
    }

    bool CT_PageField::has_name_attr() const
    {    
    return m_has_name_attr;
    }

    void CT_PageField::set_name_attr(const ns_s::ST_Xstring& _name_attr)
    {    
    m_has_name_attr = true;
    m_name_attr = new ns_s::ST_Xstring(_name_attr);
    }

    const ns_s::ST_Xstring& CT_PageField::get_name_attr() const
    {    
    if (m_name_attr)
    {
        return *m_name_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_PageField::has_cap_attr() const
    {    
    return m_has_cap_attr;
    }

    void CT_PageField::set_cap_attr(const ns_s::ST_Xstring& _cap_attr)
    {    
    m_has_cap_attr = true;
    m_cap_attr = new ns_s::ST_Xstring(_cap_attr);
    }

    const ns_s::ST_Xstring& CT_PageField::get_cap_attr() const
    {    
    if (m_cap_attr)
    {
        return *m_cap_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

CT_PageField* CT_PageField::default_instance_ = NULL;

    // CT_DataFields
    CT_DataFields::CT_DataFields()
    :m_has_count_attr(false),
    m_count_attr(0)
    {
    }
    CT_DataFields::~CT_DataFields()
{
    clear();    }
    CT_DataField* CT_DataFields::add_dataField()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_DataField* pNewChild = pChildGroup->mutable_dataField();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_DataFields::clear()
    {    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_DataFields::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_dataField())
            {
                (*iter)->get_dataField().toXmlElem("main:dataField", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_DataFields& CT_DataFields::default_instance()
    {    
    if (!CT_DataFields::default_instance_)
    {
        CT_DataFields::default_instance_ = new CT_DataFields();
    }
    return *CT_DataFields::default_instance_;
    }

    bool CT_DataFields::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void CT_DataFields::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& CT_DataFields::get_count_attr() const
    {    
    return m_count_attr;
    }


    // CT_DataFields::ChildGroup_1
    CT_DataFields::ChildGroup_1::ChildGroup_1()
    :m_has_dataField(false),
    m_dataField(NULL)
    {
    }
    bool CT_DataFields::ChildGroup_1::has_dataField() const
    {    
    return m_has_dataField;
    }

    CT_DataField* CT_DataFields::ChildGroup_1::mutable_dataField()
    {    
    
    m_has_dataField = true;
    if (!m_dataField)
    {
        m_dataField = new CT_DataField();
    }
    return m_dataField;
    }

    const CT_DataField& CT_DataFields::ChildGroup_1::get_dataField() const
    {    
    if (m_dataField)
    {
        return *m_dataField;
    }
    return CT_DataField::default_instance();
    }

CT_DataFields* CT_DataFields::default_instance_ = NULL;

    // CT_DataField
    CT_DataField::CT_DataField()
    :m_has_extLst(false),
    m_extLst(NULL),
    m_has_name_attr(false),
    m_name_attr(NULL),
    m_has_fld_attr(false),
    m_fld_attr(0),
    m_has_subtotal_attr(false),
    m_subtotal_attr(NULL),
    m_has_showDataAs_attr(false),
    m_showDataAs_attr(NULL),
    m_has_baseField_attr(false),
    m_baseField_attr(0),
    m_has_baseItem_attr(false),
    m_baseItem_attr(0),
    m_has_numFmtId_attr(false),
    m_numFmtId_attr(NULL)
    {
    }
    CT_DataField::~CT_DataField()
{
    clear();    }
    bool CT_DataField::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* CT_DataField::mutable_extLst()
    {    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& CT_DataField::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

    void CT_DataField::clear()
    {    
    m_has_name_attr = false;
    
    if (m_name_attr)
    {
        delete m_name_attr;
        m_name_attr = NULL;
    }
    
    
    m_has_fld_attr = false;
    m_fld_attr = 0;
    
    m_has_subtotal_attr = false;
    
    if (m_subtotal_attr)
    {
        delete m_subtotal_attr;
        m_subtotal_attr = NULL;
    }
    
    
    m_has_showDataAs_attr = false;
    
    if (m_showDataAs_attr)
    {
        delete m_showDataAs_attr;
        m_showDataAs_attr = NULL;
    }
    
    
    m_has_baseField_attr = false;
    m_baseField_attr = 0;
    
    m_has_baseItem_attr = false;
    m_baseItem_attr = 0;
    
    m_has_numFmtId_attr = false;
    
    if (m_numFmtId_attr)
    {
        delete m_numFmtId_attr;
        m_numFmtId_attr = NULL;
    }
    
    }

    void CT_DataField::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_name_attr)
    {
        m_name_attr->toXmlAttr("name", _outStream);
    }
    
    
    if (m_has_fld_attr)
    {
        _outStream << " " << "fld" << "=\"" << m_fld_attr << "\"";
    }
    
    
    if (m_has_subtotal_attr)
    {
        m_subtotal_attr->toXmlAttr("subtotal", _outStream);
    }
    
    
    if (m_has_showDataAs_attr)
    {
        m_showDataAs_attr->toXmlAttr("showDataAs", _outStream);
    }
    
    
    if (m_has_baseField_attr)
    {
        _outStream << " " << "baseField" << "=\"" << m_baseField_attr << "\"";
    }
    
    
    if (m_has_baseItem_attr)
    {
        _outStream << " " << "baseItem" << "=\"" << m_baseItem_attr << "\"";
    }
    
    
    if (m_has_numFmtId_attr)
    {
        m_numFmtId_attr->toXmlAttr("numFmtId", _outStream);
    }
    
            _outStream << ">";
            
    if (m_has_extLst)
    {
        m_extLst->toXmlElem("main:extLst", "", _outStream);;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_DataField& CT_DataField::default_instance()
    {    
    if (!CT_DataField::default_instance_)
    {
        CT_DataField::default_instance_ = new CT_DataField();
    }
    return *CT_DataField::default_instance_;
    }

    bool CT_DataField::has_name_attr() const
    {    
    return m_has_name_attr;
    }

    void CT_DataField::set_name_attr(const ns_s::ST_Xstring& _name_attr)
    {    
    m_has_name_attr = true;
    m_name_attr = new ns_s::ST_Xstring(_name_attr);
    }

    const ns_s::ST_Xstring& CT_DataField::get_name_attr() const
    {    
    if (m_name_attr)
    {
        return *m_name_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_DataField::has_fld_attr() const
    {    
    return m_has_fld_attr;
    }

    void CT_DataField::set_fld_attr(const XSD::unsignedInt_& _fld_attr)
    {    
    m_has_fld_attr = true;
    m_fld_attr = _fld_attr;
    }

    const XSD::unsignedInt_& CT_DataField::get_fld_attr() const
    {    
    return m_fld_attr;
    }

    bool CT_DataField::has_subtotal_attr() const
    {    
    return m_has_subtotal_attr;
    }

    void CT_DataField::set_subtotal_attr(const ST_DataConsolidateFunction& _subtotal_attr)
    {    
    m_has_subtotal_attr = true;
    m_subtotal_attr = new ST_DataConsolidateFunction(_subtotal_attr);
    }

    const ST_DataConsolidateFunction& CT_DataField::get_subtotal_attr() const
    {    
    if (m_subtotal_attr)
    {
        return *m_subtotal_attr;
    }
    return ST_DataConsolidateFunction::default_instance();
    }

    bool CT_DataField::has_showDataAs_attr() const
    {    
    return m_has_showDataAs_attr;
    }

    void CT_DataField::set_showDataAs_attr(const ST_ShowDataAs& _showDataAs_attr)
    {    
    m_has_showDataAs_attr = true;
    m_showDataAs_attr = new ST_ShowDataAs(_showDataAs_attr);
    }

    const ST_ShowDataAs& CT_DataField::get_showDataAs_attr() const
    {    
    if (m_showDataAs_attr)
    {
        return *m_showDataAs_attr;
    }
    return ST_ShowDataAs::default_instance();
    }

    bool CT_DataField::has_baseField_attr() const
    {    
    return m_has_baseField_attr;
    }

    void CT_DataField::set_baseField_attr(const XSD::int_& _baseField_attr)
    {    
    m_has_baseField_attr = true;
    m_baseField_attr = _baseField_attr;
    }

    const XSD::int_& CT_DataField::get_baseField_attr() const
    {    
    return m_baseField_attr;
    }

    bool CT_DataField::has_baseItem_attr() const
    {    
    return m_has_baseItem_attr;
    }

    void CT_DataField::set_baseItem_attr(const XSD::unsignedInt_& _baseItem_attr)
    {    
    m_has_baseItem_attr = true;
    m_baseItem_attr = _baseItem_attr;
    }

    const XSD::unsignedInt_& CT_DataField::get_baseItem_attr() const
    {    
    return m_baseItem_attr;
    }

    bool CT_DataField::has_numFmtId_attr() const
    {    
    return m_has_numFmtId_attr;
    }

    void CT_DataField::set_numFmtId_attr(const ST_NumFmtId& _numFmtId_attr)
    {    
    m_has_numFmtId_attr = true;
    m_numFmtId_attr = new ST_NumFmtId(_numFmtId_attr);
    }

    const ST_NumFmtId& CT_DataField::get_numFmtId_attr() const
    {    
    if (m_numFmtId_attr)
    {
        return *m_numFmtId_attr;
    }
    return ST_NumFmtId::default_instance();
    }

CT_DataField* CT_DataField::default_instance_ = NULL;

    // CT_rowItems
    CT_rowItems::CT_rowItems()
    :m_has_count_attr(false),
    m_count_attr(0)
    {
    }
    CT_rowItems::~CT_rowItems()
{
    clear();    }
    CT_I* CT_rowItems::add_i()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_I* pNewChild = pChildGroup->mutable_i();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_rowItems::clear()
    {    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_rowItems::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_i())
            {
                (*iter)->get_i().toXmlElem("main:i", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_rowItems& CT_rowItems::default_instance()
    {    
    if (!CT_rowItems::default_instance_)
    {
        CT_rowItems::default_instance_ = new CT_rowItems();
    }
    return *CT_rowItems::default_instance_;
    }

    bool CT_rowItems::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void CT_rowItems::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& CT_rowItems::get_count_attr() const
    {    
    return m_count_attr;
    }


    // CT_rowItems::ChildGroup_1
    CT_rowItems::ChildGroup_1::ChildGroup_1()
    :m_has_i(false),
    m_i(NULL)
    {
    }
    bool CT_rowItems::ChildGroup_1::has_i() const
    {    
    return m_has_i;
    }

    CT_I* CT_rowItems::ChildGroup_1::mutable_i()
    {    
    
    m_has_i = true;
    if (!m_i)
    {
        m_i = new CT_I();
    }
    return m_i;
    }

    const CT_I& CT_rowItems::ChildGroup_1::get_i() const
    {    
    if (m_i)
    {
        return *m_i;
    }
    return CT_I::default_instance();
    }

CT_rowItems* CT_rowItems::default_instance_ = NULL;

    // CT_colItems
    CT_colItems::CT_colItems()
    :m_has_count_attr(false),
    m_count_attr(0)
    {
    }
    CT_colItems::~CT_colItems()
{
    clear();    }
    CT_I* CT_colItems::add_i()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_I* pNewChild = pChildGroup->mutable_i();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_colItems::clear()
    {    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_colItems::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_i())
            {
                (*iter)->get_i().toXmlElem("main:i", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_colItems& CT_colItems::default_instance()
    {    
    if (!CT_colItems::default_instance_)
    {
        CT_colItems::default_instance_ = new CT_colItems();
    }
    return *CT_colItems::default_instance_;
    }

    bool CT_colItems::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void CT_colItems::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& CT_colItems::get_count_attr() const
    {    
    return m_count_attr;
    }


    // CT_colItems::ChildGroup_1
    CT_colItems::ChildGroup_1::ChildGroup_1()
    :m_has_i(false),
    m_i(NULL)
    {
    }
    bool CT_colItems::ChildGroup_1::has_i() const
    {    
    return m_has_i;
    }

    CT_I* CT_colItems::ChildGroup_1::mutable_i()
    {    
    
    m_has_i = true;
    if (!m_i)
    {
        m_i = new CT_I();
    }
    return m_i;
    }

    const CT_I& CT_colItems::ChildGroup_1::get_i() const
    {    
    if (m_i)
    {
        return *m_i;
    }
    return CT_I::default_instance();
    }

CT_colItems* CT_colItems::default_instance_ = NULL;

    // CT_I
    CT_I::CT_I()
    :m_has_t_attr(false),
    m_t_attr(NULL),
    m_has_r_attr(false),
    m_r_attr(0),
    m_has_i_attr(false),
    m_i_attr(0)
    {
    }
    CT_I::~CT_I()
{
    clear();    }
    CT_X* CT_I::add_x()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_X* pNewChild = pChildGroup->mutable_x();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_I::clear()
    {    
    m_has_t_attr = false;
    
    if (m_t_attr)
    {
        delete m_t_attr;
        m_t_attr = NULL;
    }
    
    
    m_has_r_attr = false;
    m_r_attr = 0;
    
    m_has_i_attr = false;
    m_i_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_I::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_t_attr)
    {
        m_t_attr->toXmlAttr("t", _outStream);
    }
    
    
    if (m_has_r_attr)
    {
        _outStream << " " << "r" << "=\"" << m_r_attr << "\"";
    }
    
    
    if (m_has_i_attr)
    {
        _outStream << " " << "i" << "=\"" << m_i_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_x())
            {
                (*iter)->get_x().toXmlElem("main:x", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_I& CT_I::default_instance()
    {    
    if (!CT_I::default_instance_)
    {
        CT_I::default_instance_ = new CT_I();
    }
    return *CT_I::default_instance_;
    }

    bool CT_I::has_t_attr() const
    {    
    return m_has_t_attr;
    }

    void CT_I::set_t_attr(const ST_ItemType& _t_attr)
    {    
    m_has_t_attr = true;
    m_t_attr = new ST_ItemType(_t_attr);
    }

    const ST_ItemType& CT_I::get_t_attr() const
    {    
    if (m_t_attr)
    {
        return *m_t_attr;
    }
    return ST_ItemType::default_instance();
    }

    bool CT_I::has_r_attr() const
    {    
    return m_has_r_attr;
    }

    void CT_I::set_r_attr(const XSD::unsignedInt_& _r_attr)
    {    
    m_has_r_attr = true;
    m_r_attr = _r_attr;
    }

    const XSD::unsignedInt_& CT_I::get_r_attr() const
    {    
    return m_r_attr;
    }

    bool CT_I::has_i_attr() const
    {    
    return m_has_i_attr;
    }

    void CT_I::set_i_attr(const XSD::unsignedInt_& _i_attr)
    {    
    m_has_i_attr = true;
    m_i_attr = _i_attr;
    }

    const XSD::unsignedInt_& CT_I::get_i_attr() const
    {    
    return m_i_attr;
    }


    // CT_I::ChildGroup_1
    CT_I::ChildGroup_1::ChildGroup_1()
    :m_has_x(false),
    m_x(NULL)
    {
    }
    bool CT_I::ChildGroup_1::has_x() const
    {    
    return m_has_x;
    }

    CT_X* CT_I::ChildGroup_1::mutable_x()
    {    
    
    m_has_x = true;
    if (!m_x)
    {
        m_x = new CT_X();
    }
    return m_x;
    }

    const CT_X& CT_I::ChildGroup_1::get_x() const
    {    
    if (m_x)
    {
        return *m_x;
    }
    return CT_X::default_instance();
    }

CT_I* CT_I::default_instance_ = NULL;

    // CT_X
    CT_X::CT_X()
    :m_has_v_attr(false),
    m_v_attr(0)
    {
    }
    CT_X::~CT_X()
{
    clear();    }
    void CT_X::clear()
    {    
    m_has_v_attr = false;
    m_v_attr = 0;
    }

    void CT_X::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_v_attr)
    {
        _outStream << " " << "v" << "=\"" << m_v_attr << "\"";
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_X& CT_X::default_instance()
    {    
    if (!CT_X::default_instance_)
    {
        CT_X::default_instance_ = new CT_X();
    }
    return *CT_X::default_instance_;
    }

    bool CT_X::has_v_attr() const
    {    
    return m_has_v_attr;
    }

    void CT_X::set_v_attr(const XSD::int_& _v_attr)
    {    
    m_has_v_attr = true;
    m_v_attr = _v_attr;
    }

    const XSD::int_& CT_X::get_v_attr() const
    {    
    return m_v_attr;
    }

CT_X* CT_X::default_instance_ = NULL;

    // CT_RowFields
    CT_RowFields::CT_RowFields()
    :m_has_count_attr(false),
    m_count_attr(0)
    {
    }
    CT_RowFields::~CT_RowFields()
{
    clear();    }
    CT_Field* CT_RowFields::add_field()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Field* pNewChild = pChildGroup->mutable_field();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_RowFields::clear()
    {    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_RowFields::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_field())
            {
                (*iter)->get_field().toXmlElem("main:field", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_RowFields& CT_RowFields::default_instance()
    {    
    if (!CT_RowFields::default_instance_)
    {
        CT_RowFields::default_instance_ = new CT_RowFields();
    }
    return *CT_RowFields::default_instance_;
    }

    bool CT_RowFields::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void CT_RowFields::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& CT_RowFields::get_count_attr() const
    {    
    return m_count_attr;
    }


    // CT_RowFields::ChildGroup_1
    CT_RowFields::ChildGroup_1::ChildGroup_1()
    :m_has_field(false),
    m_field(NULL)
    {
    }
    bool CT_RowFields::ChildGroup_1::has_field() const
    {    
    return m_has_field;
    }

    CT_Field* CT_RowFields::ChildGroup_1::mutable_field()
    {    
    
    m_has_field = true;
    if (!m_field)
    {
        m_field = new CT_Field();
    }
    return m_field;
    }

    const CT_Field& CT_RowFields::ChildGroup_1::get_field() const
    {    
    if (m_field)
    {
        return *m_field;
    }
    return CT_Field::default_instance();
    }

CT_RowFields* CT_RowFields::default_instance_ = NULL;

    // CT_ColFields
    CT_ColFields::CT_ColFields()
    :m_has_count_attr(false),
    m_count_attr(0)
    {
    }
    CT_ColFields::~CT_ColFields()
{
    clear();    }
    CT_Field* CT_ColFields::add_field()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Field* pNewChild = pChildGroup->mutable_field();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_ColFields::clear()
    {    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_ColFields::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_field())
            {
                (*iter)->get_field().toXmlElem("main:field", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_ColFields& CT_ColFields::default_instance()
    {    
    if (!CT_ColFields::default_instance_)
    {
        CT_ColFields::default_instance_ = new CT_ColFields();
    }
    return *CT_ColFields::default_instance_;
    }

    bool CT_ColFields::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void CT_ColFields::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& CT_ColFields::get_count_attr() const
    {    
    return m_count_attr;
    }


    // CT_ColFields::ChildGroup_1
    CT_ColFields::ChildGroup_1::ChildGroup_1()
    :m_has_field(false),
    m_field(NULL)
    {
    }
    bool CT_ColFields::ChildGroup_1::has_field() const
    {    
    return m_has_field;
    }

    CT_Field* CT_ColFields::ChildGroup_1::mutable_field()
    {    
    
    m_has_field = true;
    if (!m_field)
    {
        m_field = new CT_Field();
    }
    return m_field;
    }

    const CT_Field& CT_ColFields::ChildGroup_1::get_field() const
    {    
    if (m_field)
    {
        return *m_field;
    }
    return CT_Field::default_instance();
    }

CT_ColFields* CT_ColFields::default_instance_ = NULL;

    // CT_Field
    CT_Field::CT_Field()
    :m_has_x_attr(false),
    m_x_attr(0)
    {
    }
    CT_Field::~CT_Field()
{
    clear();    }
    void CT_Field::clear()
    {    
    m_has_x_attr = false;
    m_x_attr = 0;
    }

    void CT_Field::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_x_attr)
    {
        _outStream << " " << "x" << "=\"" << m_x_attr << "\"";
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_Field& CT_Field::default_instance()
    {    
    if (!CT_Field::default_instance_)
    {
        CT_Field::default_instance_ = new CT_Field();
    }
    return *CT_Field::default_instance_;
    }

    bool CT_Field::has_x_attr() const
    {    
    return m_has_x_attr;
    }

    void CT_Field::set_x_attr(const XSD::int_& _x_attr)
    {    
    m_has_x_attr = true;
    m_x_attr = _x_attr;
    }

    const XSD::int_& CT_Field::get_x_attr() const
    {    
    return m_x_attr;
    }

CT_Field* CT_Field::default_instance_ = NULL;

    // CT_Formats
    CT_Formats::CT_Formats()
    :m_has_count_attr(false),
    m_count_attr(0)
    {
    }
    CT_Formats::~CT_Formats()
{
    clear();    }
    CT_Format* CT_Formats::add_format()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Format* pNewChild = pChildGroup->mutable_format();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_Formats::clear()
    {    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_Formats::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_format())
            {
                (*iter)->get_format().toXmlElem("main:format", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_Formats& CT_Formats::default_instance()
    {    
    if (!CT_Formats::default_instance_)
    {
        CT_Formats::default_instance_ = new CT_Formats();
    }
    return *CT_Formats::default_instance_;
    }

    bool CT_Formats::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void CT_Formats::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& CT_Formats::get_count_attr() const
    {    
    return m_count_attr;
    }


    // CT_Formats::ChildGroup_1
    CT_Formats::ChildGroup_1::ChildGroup_1()
    :m_has_format(false),
    m_format(NULL)
    {
    }
    bool CT_Formats::ChildGroup_1::has_format() const
    {    
    return m_has_format;
    }

    CT_Format* CT_Formats::ChildGroup_1::mutable_format()
    {    
    
    m_has_format = true;
    if (!m_format)
    {
        m_format = new CT_Format();
    }
    return m_format;
    }

    const CT_Format& CT_Formats::ChildGroup_1::get_format() const
    {    
    if (m_format)
    {
        return *m_format;
    }
    return CT_Format::default_instance();
    }

CT_Formats* CT_Formats::default_instance_ = NULL;

    // CT_Format
    CT_Format::CT_Format()
    :m_has_pivotArea(false),
    m_pivotArea(NULL),
    m_has_extLst(false),
    m_extLst(NULL),
    m_has_action_attr(false),
    m_action_attr(NULL),
    m_has_dxfId_attr(false),
    m_dxfId_attr(NULL)
    {
    }
    CT_Format::~CT_Format()
{
    clear();    }
    bool CT_Format::has_pivotArea() const
    {    
    return m_has_pivotArea;
    }

    CT_PivotArea* CT_Format::mutable_pivotArea()
    {    
    m_has_pivotArea = true;
    if (!m_pivotArea)
    {
        m_pivotArea = new CT_PivotArea();
    }
    return m_pivotArea;
    }

    const CT_PivotArea& CT_Format::get_pivotArea() const
    {    
    if (m_pivotArea)
    {
        return *m_pivotArea;
    }
    return CT_PivotArea::default_instance();
    }

    bool CT_Format::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* CT_Format::mutable_extLst()
    {    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& CT_Format::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

    void CT_Format::clear()
    {    
    m_has_action_attr = false;
    
    if (m_action_attr)
    {
        delete m_action_attr;
        m_action_attr = NULL;
    }
    
    
    m_has_dxfId_attr = false;
    
    if (m_dxfId_attr)
    {
        delete m_dxfId_attr;
        m_dxfId_attr = NULL;
    }
    
    }

    void CT_Format::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_action_attr)
    {
        m_action_attr->toXmlAttr("action", _outStream);
    }
    
    
    if (m_has_dxfId_attr)
    {
        m_dxfId_attr->toXmlAttr("dxfId", _outStream);
    }
    
            _outStream << ">";
            
    if (m_has_pivotArea)
    {
        m_pivotArea->toXmlElem("main:pivotArea", "", _outStream);;
    }
    
    if (m_has_extLst)
    {
        m_extLst->toXmlElem("main:extLst", "", _outStream);;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_Format& CT_Format::default_instance()
    {    
    if (!CT_Format::default_instance_)
    {
        CT_Format::default_instance_ = new CT_Format();
    }
    return *CT_Format::default_instance_;
    }

    bool CT_Format::has_action_attr() const
    {    
    return m_has_action_attr;
    }

    void CT_Format::set_action_attr(const ST_FormatAction& _action_attr)
    {    
    m_has_action_attr = true;
    m_action_attr = new ST_FormatAction(_action_attr);
    }

    const ST_FormatAction& CT_Format::get_action_attr() const
    {    
    if (m_action_attr)
    {
        return *m_action_attr;
    }
    return ST_FormatAction::default_instance();
    }

    bool CT_Format::has_dxfId_attr() const
    {    
    return m_has_dxfId_attr;
    }

    void CT_Format::set_dxfId_attr(const ST_DxfId& _dxfId_attr)
    {    
    m_has_dxfId_attr = true;
    m_dxfId_attr = new ST_DxfId(_dxfId_attr);
    }

    const ST_DxfId& CT_Format::get_dxfId_attr() const
    {    
    if (m_dxfId_attr)
    {
        return *m_dxfId_attr;
    }
    return ST_DxfId::default_instance();
    }

CT_Format* CT_Format::default_instance_ = NULL;

    // CT_ConditionalFormats
    CT_ConditionalFormats::CT_ConditionalFormats()
    :m_has_count_attr(false),
    m_count_attr(0)
    {
    }
    CT_ConditionalFormats::~CT_ConditionalFormats()
{
    clear();    }
    CT_ConditionalFormat* CT_ConditionalFormats::add_conditionalFormat()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_ConditionalFormat* pNewChild = pChildGroup->mutable_conditionalFormat();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_ConditionalFormats::clear()
    {    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_ConditionalFormats::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_conditionalFormat())
            {
                (*iter)->get_conditionalFormat().toXmlElem("main:conditionalFormat", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_ConditionalFormats& CT_ConditionalFormats::default_instance()
    {    
    if (!CT_ConditionalFormats::default_instance_)
    {
        CT_ConditionalFormats::default_instance_ = new CT_ConditionalFormats();
    }
    return *CT_ConditionalFormats::default_instance_;
    }

    bool CT_ConditionalFormats::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void CT_ConditionalFormats::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& CT_ConditionalFormats::get_count_attr() const
    {    
    return m_count_attr;
    }


    // CT_ConditionalFormats::ChildGroup_1
    CT_ConditionalFormats::ChildGroup_1::ChildGroup_1()
    :m_has_conditionalFormat(false),
    m_conditionalFormat(NULL)
    {
    }
    bool CT_ConditionalFormats::ChildGroup_1::has_conditionalFormat() const
    {    
    return m_has_conditionalFormat;
    }

    CT_ConditionalFormat* CT_ConditionalFormats::ChildGroup_1::mutable_conditionalFormat()
    {    
    
    m_has_conditionalFormat = true;
    if (!m_conditionalFormat)
    {
        m_conditionalFormat = new CT_ConditionalFormat();
    }
    return m_conditionalFormat;
    }

    const CT_ConditionalFormat& CT_ConditionalFormats::ChildGroup_1::get_conditionalFormat() const
    {    
    if (m_conditionalFormat)
    {
        return *m_conditionalFormat;
    }
    return CT_ConditionalFormat::default_instance();
    }

CT_ConditionalFormats* CT_ConditionalFormats::default_instance_ = NULL;

    // CT_ConditionalFormat
    CT_ConditionalFormat::CT_ConditionalFormat()
    :m_has_pivotAreas(false),
    m_pivotAreas(NULL),
    m_has_extLst(false),
    m_extLst(NULL),
    m_has_scope_attr(false),
    m_scope_attr(NULL),
    m_has_type_attr(false),
    m_type_attr(NULL),
    m_has_priority_attr(false),
    m_priority_attr(0)
    {
    }
    CT_ConditionalFormat::~CT_ConditionalFormat()
{
    clear();    }
    bool CT_ConditionalFormat::has_pivotAreas() const
    {    
    return m_has_pivotAreas;
    }

    CT_PivotAreas* CT_ConditionalFormat::mutable_pivotAreas()
    {    
    m_has_pivotAreas = true;
    if (!m_pivotAreas)
    {
        m_pivotAreas = new CT_PivotAreas();
    }
    return m_pivotAreas;
    }

    const CT_PivotAreas& CT_ConditionalFormat::get_pivotAreas() const
    {    
    if (m_pivotAreas)
    {
        return *m_pivotAreas;
    }
    return CT_PivotAreas::default_instance();
    }

    bool CT_ConditionalFormat::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* CT_ConditionalFormat::mutable_extLst()
    {    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& CT_ConditionalFormat::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

    void CT_ConditionalFormat::clear()
    {    
    m_has_scope_attr = false;
    
    if (m_scope_attr)
    {
        delete m_scope_attr;
        m_scope_attr = NULL;
    }
    
    
    m_has_type_attr = false;
    
    if (m_type_attr)
    {
        delete m_type_attr;
        m_type_attr = NULL;
    }
    
    
    m_has_priority_attr = false;
    m_priority_attr = 0;
    }

    void CT_ConditionalFormat::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_scope_attr)
    {
        m_scope_attr->toXmlAttr("scope", _outStream);
    }
    
    
    if (m_has_type_attr)
    {
        m_type_attr->toXmlAttr("type", _outStream);
    }
    
    
    if (m_has_priority_attr)
    {
        _outStream << " " << "priority" << "=\"" << m_priority_attr << "\"";
    }
    
            _outStream << ">";
            
    if (m_has_pivotAreas)
    {
        m_pivotAreas->toXmlElem("main:pivotAreas", "", _outStream);;
    }
    
    if (m_has_extLst)
    {
        m_extLst->toXmlElem("main:extLst", "", _outStream);;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_ConditionalFormat& CT_ConditionalFormat::default_instance()
    {    
    if (!CT_ConditionalFormat::default_instance_)
    {
        CT_ConditionalFormat::default_instance_ = new CT_ConditionalFormat();
    }
    return *CT_ConditionalFormat::default_instance_;
    }

    bool CT_ConditionalFormat::has_scope_attr() const
    {    
    return m_has_scope_attr;
    }

    void CT_ConditionalFormat::set_scope_attr(const ST_Scope& _scope_attr)
    {    
    m_has_scope_attr = true;
    m_scope_attr = new ST_Scope(_scope_attr);
    }

    const ST_Scope& CT_ConditionalFormat::get_scope_attr() const
    {    
    if (m_scope_attr)
    {
        return *m_scope_attr;
    }
    return ST_Scope::default_instance();
    }

    bool CT_ConditionalFormat::has_type_attr() const
    {    
    return m_has_type_attr;
    }

    void CT_ConditionalFormat::set_type_attr(const ST_Type& _type_attr)
    {    
    m_has_type_attr = true;
    m_type_attr = new ST_Type(_type_attr);
    }

    const ST_Type& CT_ConditionalFormat::get_type_attr() const
    {    
    if (m_type_attr)
    {
        return *m_type_attr;
    }
    return ST_Type::default_instance();
    }

    bool CT_ConditionalFormat::has_priority_attr() const
    {    
    return m_has_priority_attr;
    }

    void CT_ConditionalFormat::set_priority_attr(const XSD::unsignedInt_& _priority_attr)
    {    
    m_has_priority_attr = true;
    m_priority_attr = _priority_attr;
    }

    const XSD::unsignedInt_& CT_ConditionalFormat::get_priority_attr() const
    {    
    return m_priority_attr;
    }

CT_ConditionalFormat* CT_ConditionalFormat::default_instance_ = NULL;

    // CT_PivotAreas
    CT_PivotAreas::CT_PivotAreas()
    :m_has_count_attr(false),
    m_count_attr(0)
    {
    }
    CT_PivotAreas::~CT_PivotAreas()
{
    clear();    }
    CT_PivotArea* CT_PivotAreas::add_pivotArea()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_PivotArea* pNewChild = pChildGroup->mutable_pivotArea();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_PivotAreas::clear()
    {    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_PivotAreas::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_pivotArea())
            {
                (*iter)->get_pivotArea().toXmlElem("main:pivotArea", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_PivotAreas& CT_PivotAreas::default_instance()
    {    
    if (!CT_PivotAreas::default_instance_)
    {
        CT_PivotAreas::default_instance_ = new CT_PivotAreas();
    }
    return *CT_PivotAreas::default_instance_;
    }

    bool CT_PivotAreas::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void CT_PivotAreas::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& CT_PivotAreas::get_count_attr() const
    {    
    return m_count_attr;
    }


    // CT_PivotAreas::ChildGroup_1
    CT_PivotAreas::ChildGroup_1::ChildGroup_1()
    :m_has_pivotArea(false),
    m_pivotArea(NULL)
    {
    }
    bool CT_PivotAreas::ChildGroup_1::has_pivotArea() const
    {    
    return m_has_pivotArea;
    }

    CT_PivotArea* CT_PivotAreas::ChildGroup_1::mutable_pivotArea()
    {    
    
    m_has_pivotArea = true;
    if (!m_pivotArea)
    {
        m_pivotArea = new CT_PivotArea();
    }
    return m_pivotArea;
    }

    const CT_PivotArea& CT_PivotAreas::ChildGroup_1::get_pivotArea() const
    {    
    if (m_pivotArea)
    {
        return *m_pivotArea;
    }
    return CT_PivotArea::default_instance();
    }

CT_PivotAreas* CT_PivotAreas::default_instance_ = NULL;

    // CT_ChartFormats
    CT_ChartFormats::CT_ChartFormats()
    :m_has_count_attr(false),
    m_count_attr(0)
    {
    }
    CT_ChartFormats::~CT_ChartFormats()
{
    clear();    }
    CT_ChartFormat* CT_ChartFormats::add_chartFormat()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_ChartFormat* pNewChild = pChildGroup->mutable_chartFormat();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_ChartFormats::clear()
    {    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_ChartFormats::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_chartFormat())
            {
                (*iter)->get_chartFormat().toXmlElem("main:chartFormat", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_ChartFormats& CT_ChartFormats::default_instance()
    {    
    if (!CT_ChartFormats::default_instance_)
    {
        CT_ChartFormats::default_instance_ = new CT_ChartFormats();
    }
    return *CT_ChartFormats::default_instance_;
    }

    bool CT_ChartFormats::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void CT_ChartFormats::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& CT_ChartFormats::get_count_attr() const
    {    
    return m_count_attr;
    }


    // CT_ChartFormats::ChildGroup_1
    CT_ChartFormats::ChildGroup_1::ChildGroup_1()
    :m_has_chartFormat(false),
    m_chartFormat(NULL)
    {
    }
    bool CT_ChartFormats::ChildGroup_1::has_chartFormat() const
    {    
    return m_has_chartFormat;
    }

    CT_ChartFormat* CT_ChartFormats::ChildGroup_1::mutable_chartFormat()
    {    
    
    m_has_chartFormat = true;
    if (!m_chartFormat)
    {
        m_chartFormat = new CT_ChartFormat();
    }
    return m_chartFormat;
    }

    const CT_ChartFormat& CT_ChartFormats::ChildGroup_1::get_chartFormat() const
    {    
    if (m_chartFormat)
    {
        return *m_chartFormat;
    }
    return CT_ChartFormat::default_instance();
    }

CT_ChartFormats* CT_ChartFormats::default_instance_ = NULL;

    // CT_ChartFormat
    CT_ChartFormat::CT_ChartFormat()
    :m_has_pivotArea(false),
    m_pivotArea(NULL),
    m_has_chart_attr(false),
    m_chart_attr(0),
    m_has_format_attr(false),
    m_format_attr(0),
    m_has_series_attr(false),
    m_series_attr(false)
    {
    }
    CT_ChartFormat::~CT_ChartFormat()
{
    clear();    }
    bool CT_ChartFormat::has_pivotArea() const
    {    
    return m_has_pivotArea;
    }

    CT_PivotArea* CT_ChartFormat::mutable_pivotArea()
    {    
    m_has_pivotArea = true;
    if (!m_pivotArea)
    {
        m_pivotArea = new CT_PivotArea();
    }
    return m_pivotArea;
    }

    const CT_PivotArea& CT_ChartFormat::get_pivotArea() const
    {    
    if (m_pivotArea)
    {
        return *m_pivotArea;
    }
    return CT_PivotArea::default_instance();
    }

    void CT_ChartFormat::clear()
    {    
    m_has_chart_attr = false;
    m_chart_attr = 0;
    
    m_has_format_attr = false;
    m_format_attr = 0;
    
    m_has_series_attr = false;
    m_series_attr = false;
    }

    void CT_ChartFormat::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_chart_attr)
    {
        _outStream << " " << "chart" << "=\"" << m_chart_attr << "\"";
    }
    
    
    if (m_has_format_attr)
    {
        _outStream << " " << "format" << "=\"" << m_format_attr << "\"";
    }
    
    
    if (m_has_series_attr)
    {
        _outStream << " " << "series" << "=\"" << XSD::XMLBooleanStr(m_series_attr) << "\"";
    }
    
            _outStream << ">";
            
    if (m_has_pivotArea)
    {
        m_pivotArea->toXmlElem("main:pivotArea", "", _outStream);;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_ChartFormat& CT_ChartFormat::default_instance()
    {    
    if (!CT_ChartFormat::default_instance_)
    {
        CT_ChartFormat::default_instance_ = new CT_ChartFormat();
    }
    return *CT_ChartFormat::default_instance_;
    }

    bool CT_ChartFormat::has_chart_attr() const
    {    
    return m_has_chart_attr;
    }

    void CT_ChartFormat::set_chart_attr(const XSD::unsignedInt_& _chart_attr)
    {    
    m_has_chart_attr = true;
    m_chart_attr = _chart_attr;
    }

    const XSD::unsignedInt_& CT_ChartFormat::get_chart_attr() const
    {    
    return m_chart_attr;
    }

    bool CT_ChartFormat::has_format_attr() const
    {    
    return m_has_format_attr;
    }

    void CT_ChartFormat::set_format_attr(const XSD::unsignedInt_& _format_attr)
    {    
    m_has_format_attr = true;
    m_format_attr = _format_attr;
    }

    const XSD::unsignedInt_& CT_ChartFormat::get_format_attr() const
    {    
    return m_format_attr;
    }

    bool CT_ChartFormat::has_series_attr() const
    {    
    return m_has_series_attr;
    }

    void CT_ChartFormat::set_series_attr(const XSD::boolean_& _series_attr)
    {    
    m_has_series_attr = true;
    m_series_attr = _series_attr;
    }

    const XSD::boolean_& CT_ChartFormat::get_series_attr() const
    {    
    return m_series_attr;
    }

CT_ChartFormat* CT_ChartFormat::default_instance_ = NULL;

    // CT_PivotHierarchies
    CT_PivotHierarchies::CT_PivotHierarchies()
    :m_has_count_attr(false),
    m_count_attr(0)
    {
    }
    CT_PivotHierarchies::~CT_PivotHierarchies()
{
    clear();    }
    CT_PivotHierarchy* CT_PivotHierarchies::add_pivotHierarchy()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_PivotHierarchy* pNewChild = pChildGroup->mutable_pivotHierarchy();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_PivotHierarchies::clear()
    {    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_PivotHierarchies::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_pivotHierarchy())
            {
                (*iter)->get_pivotHierarchy().toXmlElem("main:pivotHierarchy", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_PivotHierarchies& CT_PivotHierarchies::default_instance()
    {    
    if (!CT_PivotHierarchies::default_instance_)
    {
        CT_PivotHierarchies::default_instance_ = new CT_PivotHierarchies();
    }
    return *CT_PivotHierarchies::default_instance_;
    }

    bool CT_PivotHierarchies::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void CT_PivotHierarchies::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& CT_PivotHierarchies::get_count_attr() const
    {    
    return m_count_attr;
    }


    // CT_PivotHierarchies::ChildGroup_1
    CT_PivotHierarchies::ChildGroup_1::ChildGroup_1()
    :m_has_pivotHierarchy(false),
    m_pivotHierarchy(NULL)
    {
    }
    bool CT_PivotHierarchies::ChildGroup_1::has_pivotHierarchy() const
    {    
    return m_has_pivotHierarchy;
    }

    CT_PivotHierarchy* CT_PivotHierarchies::ChildGroup_1::mutable_pivotHierarchy()
    {    
    
    m_has_pivotHierarchy = true;
    if (!m_pivotHierarchy)
    {
        m_pivotHierarchy = new CT_PivotHierarchy();
    }
    return m_pivotHierarchy;
    }

    const CT_PivotHierarchy& CT_PivotHierarchies::ChildGroup_1::get_pivotHierarchy() const
    {    
    if (m_pivotHierarchy)
    {
        return *m_pivotHierarchy;
    }
    return CT_PivotHierarchy::default_instance();
    }

CT_PivotHierarchies* CT_PivotHierarchies::default_instance_ = NULL;

    // CT_PivotHierarchy
    CT_PivotHierarchy::CT_PivotHierarchy()
    :m_has_mps(false),
    m_mps(NULL),
    m_has_outline_attr(false),
    m_outline_attr(false),
    m_has_multipleItemSelectionAllowed_attr(false),
    m_multipleItemSelectionAllowed_attr(false),
    m_has_subtotalTop_attr(false),
    m_subtotalTop_attr(false),
    m_has_showInFieldList_attr(false),
    m_showInFieldList_attr(false),
    m_has_dragToRow_attr(false),
    m_dragToRow_attr(false),
    m_has_dragToCol_attr(false),
    m_dragToCol_attr(false),
    m_has_dragToPage_attr(false),
    m_dragToPage_attr(false),
    m_has_dragToData_attr(false),
    m_dragToData_attr(false),
    m_has_dragOff_attr(false),
    m_dragOff_attr(false),
    m_has_includeNewItemsInFilter_attr(false),
    m_includeNewItemsInFilter_attr(false),
    m_has_caption_attr(false),
    m_caption_attr(NULL)
    {
    }
    CT_PivotHierarchy::~CT_PivotHierarchy()
{
    clear();    }
    bool CT_PivotHierarchy::has_mps() const
    {    
    return m_has_mps;
    }

    CT_MemberProperties* CT_PivotHierarchy::mutable_mps()
    {    
    m_has_mps = true;
    if (!m_mps)
    {
        m_mps = new CT_MemberProperties();
    }
    return m_mps;
    }

    const CT_MemberProperties& CT_PivotHierarchy::get_mps() const
    {    
    if (m_mps)
    {
        return *m_mps;
    }
    return CT_MemberProperties::default_instance();
    }

    CT_Members* CT_PivotHierarchy::add_members()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Members* pNewChild = pChildGroup->mutable_members();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_ExtensionList* CT_PivotHierarchy::add_extLst()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_ExtensionList* pNewChild = pChildGroup->mutable_extLst();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_PivotHierarchy::clear()
    {    
    m_has_outline_attr = false;
    m_outline_attr = false;
    
    m_has_multipleItemSelectionAllowed_attr = false;
    m_multipleItemSelectionAllowed_attr = false;
    
    m_has_subtotalTop_attr = false;
    m_subtotalTop_attr = false;
    
    m_has_showInFieldList_attr = false;
    m_showInFieldList_attr = false;
    
    m_has_dragToRow_attr = false;
    m_dragToRow_attr = false;
    
    m_has_dragToCol_attr = false;
    m_dragToCol_attr = false;
    
    m_has_dragToPage_attr = false;
    m_dragToPage_attr = false;
    
    m_has_dragToData_attr = false;
    m_dragToData_attr = false;
    
    m_has_dragOff_attr = false;
    m_dragOff_attr = false;
    
    m_has_includeNewItemsInFilter_attr = false;
    m_includeNewItemsInFilter_attr = false;
    
    m_has_caption_attr = false;
    
    if (m_caption_attr)
    {
        delete m_caption_attr;
        m_caption_attr = NULL;
    }
    
    
    m_has_mps = false;
    
    if (m_mps)
    {
        delete m_mps;
        m_mps = NULL;
    }
    
     
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_PivotHierarchy::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_outline_attr)
    {
        _outStream << " " << "outline" << "=\"" << XSD::XMLBooleanStr(m_outline_attr) << "\"";
    }
    
    
    if (m_has_multipleItemSelectionAllowed_attr)
    {
        _outStream << " " << "multipleItemSelectionAllowed" << "=\"" << XSD::XMLBooleanStr(m_multipleItemSelectionAllowed_attr) << "\"";
    }
    
    
    if (m_has_subtotalTop_attr)
    {
        _outStream << " " << "subtotalTop" << "=\"" << XSD::XMLBooleanStr(m_subtotalTop_attr) << "\"";
    }
    
    
    if (m_has_showInFieldList_attr)
    {
        _outStream << " " << "showInFieldList" << "=\"" << XSD::XMLBooleanStr(m_showInFieldList_attr) << "\"";
    }
    
    
    if (m_has_dragToRow_attr)
    {
        _outStream << " " << "dragToRow" << "=\"" << XSD::XMLBooleanStr(m_dragToRow_attr) << "\"";
    }
    
    
    if (m_has_dragToCol_attr)
    {
        _outStream << " " << "dragToCol" << "=\"" << XSD::XMLBooleanStr(m_dragToCol_attr) << "\"";
    }
    
    
    if (m_has_dragToPage_attr)
    {
        _outStream << " " << "dragToPage" << "=\"" << XSD::XMLBooleanStr(m_dragToPage_attr) << "\"";
    }
    
    
    if (m_has_dragToData_attr)
    {
        _outStream << " " << "dragToData" << "=\"" << XSD::XMLBooleanStr(m_dragToData_attr) << "\"";
    }
    
    
    if (m_has_dragOff_attr)
    {
        _outStream << " " << "dragOff" << "=\"" << XSD::XMLBooleanStr(m_dragOff_attr) << "\"";
    }
    
    
    if (m_has_includeNewItemsInFilter_attr)
    {
        _outStream << " " << "includeNewItemsInFilter" << "=\"" << XSD::XMLBooleanStr(m_includeNewItemsInFilter_attr) << "\"";
    }
    
    
    if (m_has_caption_attr)
    {
        m_caption_attr->toXmlAttr("caption", _outStream);
    }
    
            _outStream << ">";
            
    if (m_has_mps)
    {
        m_mps->toXmlElem("main:mps", "", _outStream);;
    }
     
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_members())
            {
                (*iter)->get_members().toXmlElem("main:members", "", _outStream);
            }
            else if ((*iter)->has_extLst())
            {
                (*iter)->get_extLst().toXmlElem("main:extLst", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_PivotHierarchy& CT_PivotHierarchy::default_instance()
    {    
    if (!CT_PivotHierarchy::default_instance_)
    {
        CT_PivotHierarchy::default_instance_ = new CT_PivotHierarchy();
    }
    return *CT_PivotHierarchy::default_instance_;
    }

    bool CT_PivotHierarchy::has_outline_attr() const
    {    
    return m_has_outline_attr;
    }

    void CT_PivotHierarchy::set_outline_attr(const XSD::boolean_& _outline_attr)
    {    
    m_has_outline_attr = true;
    m_outline_attr = _outline_attr;
    }

    const XSD::boolean_& CT_PivotHierarchy::get_outline_attr() const
    {    
    return m_outline_attr;
    }

    bool CT_PivotHierarchy::has_multipleItemSelectionAllowed_attr() const
    {    
    return m_has_multipleItemSelectionAllowed_attr;
    }

    void CT_PivotHierarchy::set_multipleItemSelectionAllowed_attr(const XSD::boolean_& _multipleItemSelectionAllowed_attr)
    {    
    m_has_multipleItemSelectionAllowed_attr = true;
    m_multipleItemSelectionAllowed_attr = _multipleItemSelectionAllowed_attr;
    }

    const XSD::boolean_& CT_PivotHierarchy::get_multipleItemSelectionAllowed_attr() const
    {    
    return m_multipleItemSelectionAllowed_attr;
    }

    bool CT_PivotHierarchy::has_subtotalTop_attr() const
    {    
    return m_has_subtotalTop_attr;
    }

    void CT_PivotHierarchy::set_subtotalTop_attr(const XSD::boolean_& _subtotalTop_attr)
    {    
    m_has_subtotalTop_attr = true;
    m_subtotalTop_attr = _subtotalTop_attr;
    }

    const XSD::boolean_& CT_PivotHierarchy::get_subtotalTop_attr() const
    {    
    return m_subtotalTop_attr;
    }

    bool CT_PivotHierarchy::has_showInFieldList_attr() const
    {    
    return m_has_showInFieldList_attr;
    }

    void CT_PivotHierarchy::set_showInFieldList_attr(const XSD::boolean_& _showInFieldList_attr)
    {    
    m_has_showInFieldList_attr = true;
    m_showInFieldList_attr = _showInFieldList_attr;
    }

    const XSD::boolean_& CT_PivotHierarchy::get_showInFieldList_attr() const
    {    
    return m_showInFieldList_attr;
    }

    bool CT_PivotHierarchy::has_dragToRow_attr() const
    {    
    return m_has_dragToRow_attr;
    }

    void CT_PivotHierarchy::set_dragToRow_attr(const XSD::boolean_& _dragToRow_attr)
    {    
    m_has_dragToRow_attr = true;
    m_dragToRow_attr = _dragToRow_attr;
    }

    const XSD::boolean_& CT_PivotHierarchy::get_dragToRow_attr() const
    {    
    return m_dragToRow_attr;
    }

    bool CT_PivotHierarchy::has_dragToCol_attr() const
    {    
    return m_has_dragToCol_attr;
    }

    void CT_PivotHierarchy::set_dragToCol_attr(const XSD::boolean_& _dragToCol_attr)
    {    
    m_has_dragToCol_attr = true;
    m_dragToCol_attr = _dragToCol_attr;
    }

    const XSD::boolean_& CT_PivotHierarchy::get_dragToCol_attr() const
    {    
    return m_dragToCol_attr;
    }

    bool CT_PivotHierarchy::has_dragToPage_attr() const
    {    
    return m_has_dragToPage_attr;
    }

    void CT_PivotHierarchy::set_dragToPage_attr(const XSD::boolean_& _dragToPage_attr)
    {    
    m_has_dragToPage_attr = true;
    m_dragToPage_attr = _dragToPage_attr;
    }

    const XSD::boolean_& CT_PivotHierarchy::get_dragToPage_attr() const
    {    
    return m_dragToPage_attr;
    }

    bool CT_PivotHierarchy::has_dragToData_attr() const
    {    
    return m_has_dragToData_attr;
    }

    void CT_PivotHierarchy::set_dragToData_attr(const XSD::boolean_& _dragToData_attr)
    {    
    m_has_dragToData_attr = true;
    m_dragToData_attr = _dragToData_attr;
    }

    const XSD::boolean_& CT_PivotHierarchy::get_dragToData_attr() const
    {    
    return m_dragToData_attr;
    }

    bool CT_PivotHierarchy::has_dragOff_attr() const
    {    
    return m_has_dragOff_attr;
    }

    void CT_PivotHierarchy::set_dragOff_attr(const XSD::boolean_& _dragOff_attr)
    {    
    m_has_dragOff_attr = true;
    m_dragOff_attr = _dragOff_attr;
    }

    const XSD::boolean_& CT_PivotHierarchy::get_dragOff_attr() const
    {    
    return m_dragOff_attr;
    }

    bool CT_PivotHierarchy::has_includeNewItemsInFilter_attr() const
    {    
    return m_has_includeNewItemsInFilter_attr;
    }

    void CT_PivotHierarchy::set_includeNewItemsInFilter_attr(const XSD::boolean_& _includeNewItemsInFilter_attr)
    {    
    m_has_includeNewItemsInFilter_attr = true;
    m_includeNewItemsInFilter_attr = _includeNewItemsInFilter_attr;
    }

    const XSD::boolean_& CT_PivotHierarchy::get_includeNewItemsInFilter_attr() const
    {    
    return m_includeNewItemsInFilter_attr;
    }

    bool CT_PivotHierarchy::has_caption_attr() const
    {    
    return m_has_caption_attr;
    }

    void CT_PivotHierarchy::set_caption_attr(const ns_s::ST_Xstring& _caption_attr)
    {    
    m_has_caption_attr = true;
    m_caption_attr = new ns_s::ST_Xstring(_caption_attr);
    }

    const ns_s::ST_Xstring& CT_PivotHierarchy::get_caption_attr() const
    {    
    if (m_caption_attr)
    {
        return *m_caption_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }


    // CT_PivotHierarchy::ChildGroup_1
    CT_PivotHierarchy::ChildGroup_1::ChildGroup_1()
    :m_has_members(false),
    m_members(NULL),
    m_has_extLst(false),
    m_extLst(NULL)
    {
    }
    bool CT_PivotHierarchy::ChildGroup_1::has_members() const
    {    
    return m_has_members;
    }

    CT_Members* CT_PivotHierarchy::ChildGroup_1::mutable_members()
    {    
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_members = true;
    if (!m_members)
    {
        m_members = new CT_Members();
    }
    return m_members;
    }

    const CT_Members& CT_PivotHierarchy::ChildGroup_1::get_members() const
    {    
    if (m_members)
    {
        return *m_members;
    }
    return CT_Members::default_instance();
    }

    bool CT_PivotHierarchy::ChildGroup_1::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* CT_PivotHierarchy::ChildGroup_1::mutable_extLst()
    {    
    
    m_has_members = false;
    
    if (m_members)
    {
        delete m_members;
        m_members = NULL;
    }
    ;
    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& CT_PivotHierarchy::ChildGroup_1::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

CT_PivotHierarchy* CT_PivotHierarchy::default_instance_ = NULL;

    // CT_RowHierarchiesUsage
    CT_RowHierarchiesUsage::CT_RowHierarchiesUsage()
    :m_has_count_attr(false),
    m_count_attr(0)
    {
    }
    CT_RowHierarchiesUsage::~CT_RowHierarchiesUsage()
{
    clear();    }
    CT_HierarchyUsage* CT_RowHierarchiesUsage::add_rowHierarchyUsage()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_HierarchyUsage* pNewChild = pChildGroup->mutable_rowHierarchyUsage();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_RowHierarchiesUsage::clear()
    {    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_RowHierarchiesUsage::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_rowHierarchyUsage())
            {
                (*iter)->get_rowHierarchyUsage().toXmlElem("main:rowHierarchyUsage", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_RowHierarchiesUsage& CT_RowHierarchiesUsage::default_instance()
    {    
    if (!CT_RowHierarchiesUsage::default_instance_)
    {
        CT_RowHierarchiesUsage::default_instance_ = new CT_RowHierarchiesUsage();
    }
    return *CT_RowHierarchiesUsage::default_instance_;
    }

    bool CT_RowHierarchiesUsage::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void CT_RowHierarchiesUsage::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& CT_RowHierarchiesUsage::get_count_attr() const
    {    
    return m_count_attr;
    }


    // CT_RowHierarchiesUsage::ChildGroup_1
    CT_RowHierarchiesUsage::ChildGroup_1::ChildGroup_1()
    :m_has_rowHierarchyUsage(false),
    m_rowHierarchyUsage(NULL)
    {
    }
    bool CT_RowHierarchiesUsage::ChildGroup_1::has_rowHierarchyUsage() const
    {    
    return m_has_rowHierarchyUsage;
    }

    CT_HierarchyUsage* CT_RowHierarchiesUsage::ChildGroup_1::mutable_rowHierarchyUsage()
    {    
    
    m_has_rowHierarchyUsage = true;
    if (!m_rowHierarchyUsage)
    {
        m_rowHierarchyUsage = new CT_HierarchyUsage();
    }
    return m_rowHierarchyUsage;
    }

    const CT_HierarchyUsage& CT_RowHierarchiesUsage::ChildGroup_1::get_rowHierarchyUsage() const
    {    
    if (m_rowHierarchyUsage)
    {
        return *m_rowHierarchyUsage;
    }
    return CT_HierarchyUsage::default_instance();
    }

CT_RowHierarchiesUsage* CT_RowHierarchiesUsage::default_instance_ = NULL;

    // CT_ColHierarchiesUsage
    CT_ColHierarchiesUsage::CT_ColHierarchiesUsage()
    :m_has_count_attr(false),
    m_count_attr(0)
    {
    }
    CT_ColHierarchiesUsage::~CT_ColHierarchiesUsage()
{
    clear();    }
    CT_HierarchyUsage* CT_ColHierarchiesUsage::add_colHierarchyUsage()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_HierarchyUsage* pNewChild = pChildGroup->mutable_colHierarchyUsage();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_ColHierarchiesUsage::clear()
    {    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_ColHierarchiesUsage::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_colHierarchyUsage())
            {
                (*iter)->get_colHierarchyUsage().toXmlElem("main:colHierarchyUsage", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_ColHierarchiesUsage& CT_ColHierarchiesUsage::default_instance()
    {    
    if (!CT_ColHierarchiesUsage::default_instance_)
    {
        CT_ColHierarchiesUsage::default_instance_ = new CT_ColHierarchiesUsage();
    }
    return *CT_ColHierarchiesUsage::default_instance_;
    }

    bool CT_ColHierarchiesUsage::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void CT_ColHierarchiesUsage::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& CT_ColHierarchiesUsage::get_count_attr() const
    {    
    return m_count_attr;
    }


    // CT_ColHierarchiesUsage::ChildGroup_1
    CT_ColHierarchiesUsage::ChildGroup_1::ChildGroup_1()
    :m_has_colHierarchyUsage(false),
    m_colHierarchyUsage(NULL)
    {
    }
    bool CT_ColHierarchiesUsage::ChildGroup_1::has_colHierarchyUsage() const
    {    
    return m_has_colHierarchyUsage;
    }

    CT_HierarchyUsage* CT_ColHierarchiesUsage::ChildGroup_1::mutable_colHierarchyUsage()
    {    
    
    m_has_colHierarchyUsage = true;
    if (!m_colHierarchyUsage)
    {
        m_colHierarchyUsage = new CT_HierarchyUsage();
    }
    return m_colHierarchyUsage;
    }

    const CT_HierarchyUsage& CT_ColHierarchiesUsage::ChildGroup_1::get_colHierarchyUsage() const
    {    
    if (m_colHierarchyUsage)
    {
        return *m_colHierarchyUsage;
    }
    return CT_HierarchyUsage::default_instance();
    }

CT_ColHierarchiesUsage* CT_ColHierarchiesUsage::default_instance_ = NULL;

    // CT_HierarchyUsage
    CT_HierarchyUsage::CT_HierarchyUsage()
    :m_has_hierarchyUsage_attr(false),
    m_hierarchyUsage_attr(0)
    {
    }
    CT_HierarchyUsage::~CT_HierarchyUsage()
{
    clear();    }
    void CT_HierarchyUsage::clear()
    {    
    m_has_hierarchyUsage_attr = false;
    m_hierarchyUsage_attr = 0;
    }

    void CT_HierarchyUsage::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_hierarchyUsage_attr)
    {
        _outStream << " " << "hierarchyUsage" << "=\"" << m_hierarchyUsage_attr << "\"";
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_HierarchyUsage& CT_HierarchyUsage::default_instance()
    {    
    if (!CT_HierarchyUsage::default_instance_)
    {
        CT_HierarchyUsage::default_instance_ = new CT_HierarchyUsage();
    }
    return *CT_HierarchyUsage::default_instance_;
    }

    bool CT_HierarchyUsage::has_hierarchyUsage_attr() const
    {    
    return m_has_hierarchyUsage_attr;
    }

    void CT_HierarchyUsage::set_hierarchyUsage_attr(const XSD::int_& _hierarchyUsage_attr)
    {    
    m_has_hierarchyUsage_attr = true;
    m_hierarchyUsage_attr = _hierarchyUsage_attr;
    }

    const XSD::int_& CT_HierarchyUsage::get_hierarchyUsage_attr() const
    {    
    return m_hierarchyUsage_attr;
    }

CT_HierarchyUsage* CT_HierarchyUsage::default_instance_ = NULL;

    // CT_MemberProperties
    CT_MemberProperties::CT_MemberProperties()
    :m_has_count_attr(false),
    m_count_attr(0)
    {
    }
    CT_MemberProperties::~CT_MemberProperties()
{
    clear();    }
    CT_MemberProperty* CT_MemberProperties::add_mp()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_MemberProperty* pNewChild = pChildGroup->mutable_mp();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_MemberProperties::clear()
    {    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_MemberProperties::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_mp())
            {
                (*iter)->get_mp().toXmlElem("main:mp", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_MemberProperties& CT_MemberProperties::default_instance()
    {    
    if (!CT_MemberProperties::default_instance_)
    {
        CT_MemberProperties::default_instance_ = new CT_MemberProperties();
    }
    return *CT_MemberProperties::default_instance_;
    }

    bool CT_MemberProperties::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void CT_MemberProperties::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& CT_MemberProperties::get_count_attr() const
    {    
    return m_count_attr;
    }


    // CT_MemberProperties::ChildGroup_1
    CT_MemberProperties::ChildGroup_1::ChildGroup_1()
    :m_has_mp(false),
    m_mp(NULL)
    {
    }
    bool CT_MemberProperties::ChildGroup_1::has_mp() const
    {    
    return m_has_mp;
    }

    CT_MemberProperty* CT_MemberProperties::ChildGroup_1::mutable_mp()
    {    
    
    m_has_mp = true;
    if (!m_mp)
    {
        m_mp = new CT_MemberProperty();
    }
    return m_mp;
    }

    const CT_MemberProperty& CT_MemberProperties::ChildGroup_1::get_mp() const
    {    
    if (m_mp)
    {
        return *m_mp;
    }
    return CT_MemberProperty::default_instance();
    }

CT_MemberProperties* CT_MemberProperties::default_instance_ = NULL;

    // CT_MemberProperty
    CT_MemberProperty::CT_MemberProperty()
    :m_has_name_attr(false),
    m_name_attr(NULL),
    m_has_showCell_attr(false),
    m_showCell_attr(false),
    m_has_showTip_attr(false),
    m_showTip_attr(false),
    m_has_showAsCaption_attr(false),
    m_showAsCaption_attr(false),
    m_has_nameLen_attr(false),
    m_nameLen_attr(0),
    m_has_pPos_attr(false),
    m_pPos_attr(0),
    m_has_pLen_attr(false),
    m_pLen_attr(0),
    m_has_level_attr(false),
    m_level_attr(0),
    m_has_field_attr(false),
    m_field_attr(0)
    {
    }
    CT_MemberProperty::~CT_MemberProperty()
{
    clear();    }
    void CT_MemberProperty::clear()
    {    
    m_has_name_attr = false;
    
    if (m_name_attr)
    {
        delete m_name_attr;
        m_name_attr = NULL;
    }
    
    
    m_has_showCell_attr = false;
    m_showCell_attr = false;
    
    m_has_showTip_attr = false;
    m_showTip_attr = false;
    
    m_has_showAsCaption_attr = false;
    m_showAsCaption_attr = false;
    
    m_has_nameLen_attr = false;
    m_nameLen_attr = 0;
    
    m_has_pPos_attr = false;
    m_pPos_attr = 0;
    
    m_has_pLen_attr = false;
    m_pLen_attr = 0;
    
    m_has_level_attr = false;
    m_level_attr = 0;
    
    m_has_field_attr = false;
    m_field_attr = 0;
    }

    void CT_MemberProperty::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_name_attr)
    {
        m_name_attr->toXmlAttr("name", _outStream);
    }
    
    
    if (m_has_showCell_attr)
    {
        _outStream << " " << "showCell" << "=\"" << XSD::XMLBooleanStr(m_showCell_attr) << "\"";
    }
    
    
    if (m_has_showTip_attr)
    {
        _outStream << " " << "showTip" << "=\"" << XSD::XMLBooleanStr(m_showTip_attr) << "\"";
    }
    
    
    if (m_has_showAsCaption_attr)
    {
        _outStream << " " << "showAsCaption" << "=\"" << XSD::XMLBooleanStr(m_showAsCaption_attr) << "\"";
    }
    
    
    if (m_has_nameLen_attr)
    {
        _outStream << " " << "nameLen" << "=\"" << m_nameLen_attr << "\"";
    }
    
    
    if (m_has_pPos_attr)
    {
        _outStream << " " << "pPos" << "=\"" << m_pPos_attr << "\"";
    }
    
    
    if (m_has_pLen_attr)
    {
        _outStream << " " << "pLen" << "=\"" << m_pLen_attr << "\"";
    }
    
    
    if (m_has_level_attr)
    {
        _outStream << " " << "level" << "=\"" << m_level_attr << "\"";
    }
    
    
    if (m_has_field_attr)
    {
        _outStream << " " << "field" << "=\"" << m_field_attr << "\"";
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_MemberProperty& CT_MemberProperty::default_instance()
    {    
    if (!CT_MemberProperty::default_instance_)
    {
        CT_MemberProperty::default_instance_ = new CT_MemberProperty();
    }
    return *CT_MemberProperty::default_instance_;
    }

    bool CT_MemberProperty::has_name_attr() const
    {    
    return m_has_name_attr;
    }

    void CT_MemberProperty::set_name_attr(const ns_s::ST_Xstring& _name_attr)
    {    
    m_has_name_attr = true;
    m_name_attr = new ns_s::ST_Xstring(_name_attr);
    }

    const ns_s::ST_Xstring& CT_MemberProperty::get_name_attr() const
    {    
    if (m_name_attr)
    {
        return *m_name_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_MemberProperty::has_showCell_attr() const
    {    
    return m_has_showCell_attr;
    }

    void CT_MemberProperty::set_showCell_attr(const XSD::boolean_& _showCell_attr)
    {    
    m_has_showCell_attr = true;
    m_showCell_attr = _showCell_attr;
    }

    const XSD::boolean_& CT_MemberProperty::get_showCell_attr() const
    {    
    return m_showCell_attr;
    }

    bool CT_MemberProperty::has_showTip_attr() const
    {    
    return m_has_showTip_attr;
    }

    void CT_MemberProperty::set_showTip_attr(const XSD::boolean_& _showTip_attr)
    {    
    m_has_showTip_attr = true;
    m_showTip_attr = _showTip_attr;
    }

    const XSD::boolean_& CT_MemberProperty::get_showTip_attr() const
    {    
    return m_showTip_attr;
    }

    bool CT_MemberProperty::has_showAsCaption_attr() const
    {    
    return m_has_showAsCaption_attr;
    }

    void CT_MemberProperty::set_showAsCaption_attr(const XSD::boolean_& _showAsCaption_attr)
    {    
    m_has_showAsCaption_attr = true;
    m_showAsCaption_attr = _showAsCaption_attr;
    }

    const XSD::boolean_& CT_MemberProperty::get_showAsCaption_attr() const
    {    
    return m_showAsCaption_attr;
    }

    bool CT_MemberProperty::has_nameLen_attr() const
    {    
    return m_has_nameLen_attr;
    }

    void CT_MemberProperty::set_nameLen_attr(const XSD::unsignedInt_& _nameLen_attr)
    {    
    m_has_nameLen_attr = true;
    m_nameLen_attr = _nameLen_attr;
    }

    const XSD::unsignedInt_& CT_MemberProperty::get_nameLen_attr() const
    {    
    return m_nameLen_attr;
    }

    bool CT_MemberProperty::has_pPos_attr() const
    {    
    return m_has_pPos_attr;
    }

    void CT_MemberProperty::set_pPos_attr(const XSD::unsignedInt_& _pPos_attr)
    {    
    m_has_pPos_attr = true;
    m_pPos_attr = _pPos_attr;
    }

    const XSD::unsignedInt_& CT_MemberProperty::get_pPos_attr() const
    {    
    return m_pPos_attr;
    }

    bool CT_MemberProperty::has_pLen_attr() const
    {    
    return m_has_pLen_attr;
    }

    void CT_MemberProperty::set_pLen_attr(const XSD::unsignedInt_& _pLen_attr)
    {    
    m_has_pLen_attr = true;
    m_pLen_attr = _pLen_attr;
    }

    const XSD::unsignedInt_& CT_MemberProperty::get_pLen_attr() const
    {    
    return m_pLen_attr;
    }

    bool CT_MemberProperty::has_level_attr() const
    {    
    return m_has_level_attr;
    }

    void CT_MemberProperty::set_level_attr(const XSD::unsignedInt_& _level_attr)
    {    
    m_has_level_attr = true;
    m_level_attr = _level_attr;
    }

    const XSD::unsignedInt_& CT_MemberProperty::get_level_attr() const
    {    
    return m_level_attr;
    }

    bool CT_MemberProperty::has_field_attr() const
    {    
    return m_has_field_attr;
    }

    void CT_MemberProperty::set_field_attr(const XSD::unsignedInt_& _field_attr)
    {    
    m_has_field_attr = true;
    m_field_attr = _field_attr;
    }

    const XSD::unsignedInt_& CT_MemberProperty::get_field_attr() const
    {    
    return m_field_attr;
    }

CT_MemberProperty* CT_MemberProperty::default_instance_ = NULL;

    // CT_Members
    CT_Members::CT_Members()
    :m_has_count_attr(false),
    m_count_attr(0),
    m_has_level_attr(false),
    m_level_attr(0)
    {
    }
    CT_Members::~CT_Members()
{
    clear();    }
    CT_Member* CT_Members::add_member()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Member* pNewChild = pChildGroup->mutable_member();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_Members::clear()
    {    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    m_has_level_attr = false;
    m_level_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_Members::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
    
    if (m_has_level_attr)
    {
        _outStream << " " << "level" << "=\"" << m_level_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_member())
            {
                (*iter)->get_member().toXmlElem("main:member", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_Members& CT_Members::default_instance()
    {    
    if (!CT_Members::default_instance_)
    {
        CT_Members::default_instance_ = new CT_Members();
    }
    return *CT_Members::default_instance_;
    }

    bool CT_Members::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void CT_Members::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& CT_Members::get_count_attr() const
    {    
    return m_count_attr;
    }

    bool CT_Members::has_level_attr() const
    {    
    return m_has_level_attr;
    }

    void CT_Members::set_level_attr(const XSD::unsignedInt_& _level_attr)
    {    
    m_has_level_attr = true;
    m_level_attr = _level_attr;
    }

    const XSD::unsignedInt_& CT_Members::get_level_attr() const
    {    
    return m_level_attr;
    }


    // CT_Members::ChildGroup_1
    CT_Members::ChildGroup_1::ChildGroup_1()
    :m_has_member(false),
    m_member(NULL)
    {
    }
    bool CT_Members::ChildGroup_1::has_member() const
    {    
    return m_has_member;
    }

    CT_Member* CT_Members::ChildGroup_1::mutable_member()
    {    
    
    m_has_member = true;
    if (!m_member)
    {
        m_member = new CT_Member();
    }
    return m_member;
    }

    const CT_Member& CT_Members::ChildGroup_1::get_member() const
    {    
    if (m_member)
    {
        return *m_member;
    }
    return CT_Member::default_instance();
    }

CT_Members* CT_Members::default_instance_ = NULL;

    // CT_Member
    CT_Member::CT_Member()
    :m_has_name_attr(false),
    m_name_attr(NULL)
    {
    }
    CT_Member::~CT_Member()
{
    clear();    }
    void CT_Member::clear()
    {    
    m_has_name_attr = false;
    
    if (m_name_attr)
    {
        delete m_name_attr;
        m_name_attr = NULL;
    }
    
    }

    void CT_Member::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_name_attr)
    {
        m_name_attr->toXmlAttr("name", _outStream);
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_Member& CT_Member::default_instance()
    {    
    if (!CT_Member::default_instance_)
    {
        CT_Member::default_instance_ = new CT_Member();
    }
    return *CT_Member::default_instance_;
    }

    bool CT_Member::has_name_attr() const
    {    
    return m_has_name_attr;
    }

    void CT_Member::set_name_attr(const ns_s::ST_Xstring& _name_attr)
    {    
    m_has_name_attr = true;
    m_name_attr = new ns_s::ST_Xstring(_name_attr);
    }

    const ns_s::ST_Xstring& CT_Member::get_name_attr() const
    {    
    if (m_name_attr)
    {
        return *m_name_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

CT_Member* CT_Member::default_instance_ = NULL;

    // CT_Dimensions
    CT_Dimensions::CT_Dimensions()
    :m_has_count_attr(false),
    m_count_attr(0)
    {
    }
    CT_Dimensions::~CT_Dimensions()
{
    clear();    }
    CT_PivotDimension* CT_Dimensions::add_dimension()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_PivotDimension* pNewChild = pChildGroup->mutable_dimension();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_Dimensions::clear()
    {    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_Dimensions::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_dimension())
            {
                (*iter)->get_dimension().toXmlElem("main:dimension", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_Dimensions& CT_Dimensions::default_instance()
    {    
    if (!CT_Dimensions::default_instance_)
    {
        CT_Dimensions::default_instance_ = new CT_Dimensions();
    }
    return *CT_Dimensions::default_instance_;
    }

    bool CT_Dimensions::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void CT_Dimensions::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& CT_Dimensions::get_count_attr() const
    {    
    return m_count_attr;
    }


    // CT_Dimensions::ChildGroup_1
    CT_Dimensions::ChildGroup_1::ChildGroup_1()
    :m_has_dimension(false),
    m_dimension(NULL)
    {
    }
    bool CT_Dimensions::ChildGroup_1::has_dimension() const
    {    
    return m_has_dimension;
    }

    CT_PivotDimension* CT_Dimensions::ChildGroup_1::mutable_dimension()
    {    
    
    m_has_dimension = true;
    if (!m_dimension)
    {
        m_dimension = new CT_PivotDimension();
    }
    return m_dimension;
    }

    const CT_PivotDimension& CT_Dimensions::ChildGroup_1::get_dimension() const
    {    
    if (m_dimension)
    {
        return *m_dimension;
    }
    return CT_PivotDimension::default_instance();
    }

CT_Dimensions* CT_Dimensions::default_instance_ = NULL;

    // CT_PivotDimension
    CT_PivotDimension::CT_PivotDimension()
    :m_has_measure_attr(false),
    m_measure_attr(false),
    m_has_name_attr(false),
    m_name_attr(NULL),
    m_has_uniqueName_attr(false),
    m_uniqueName_attr(NULL),
    m_has_caption_attr(false),
    m_caption_attr(NULL)
    {
    }
    CT_PivotDimension::~CT_PivotDimension()
{
    clear();    }
    void CT_PivotDimension::clear()
    {    
    m_has_measure_attr = false;
    m_measure_attr = false;
    
    m_has_name_attr = false;
    
    if (m_name_attr)
    {
        delete m_name_attr;
        m_name_attr = NULL;
    }
    
    
    m_has_uniqueName_attr = false;
    
    if (m_uniqueName_attr)
    {
        delete m_uniqueName_attr;
        m_uniqueName_attr = NULL;
    }
    
    
    m_has_caption_attr = false;
    
    if (m_caption_attr)
    {
        delete m_caption_attr;
        m_caption_attr = NULL;
    }
    
    }

    void CT_PivotDimension::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_measure_attr)
    {
        _outStream << " " << "measure" << "=\"" << XSD::XMLBooleanStr(m_measure_attr) << "\"";
    }
    
    
    if (m_has_name_attr)
    {
        m_name_attr->toXmlAttr("name", _outStream);
    }
    
    
    if (m_has_uniqueName_attr)
    {
        m_uniqueName_attr->toXmlAttr("uniqueName", _outStream);
    }
    
    
    if (m_has_caption_attr)
    {
        m_caption_attr->toXmlAttr("caption", _outStream);
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_PivotDimension& CT_PivotDimension::default_instance()
    {    
    if (!CT_PivotDimension::default_instance_)
    {
        CT_PivotDimension::default_instance_ = new CT_PivotDimension();
    }
    return *CT_PivotDimension::default_instance_;
    }

    bool CT_PivotDimension::has_measure_attr() const
    {    
    return m_has_measure_attr;
    }

    void CT_PivotDimension::set_measure_attr(const XSD::boolean_& _measure_attr)
    {    
    m_has_measure_attr = true;
    m_measure_attr = _measure_attr;
    }

    const XSD::boolean_& CT_PivotDimension::get_measure_attr() const
    {    
    return m_measure_attr;
    }

    bool CT_PivotDimension::has_name_attr() const
    {    
    return m_has_name_attr;
    }

    void CT_PivotDimension::set_name_attr(const ns_s::ST_Xstring& _name_attr)
    {    
    m_has_name_attr = true;
    m_name_attr = new ns_s::ST_Xstring(_name_attr);
    }

    const ns_s::ST_Xstring& CT_PivotDimension::get_name_attr() const
    {    
    if (m_name_attr)
    {
        return *m_name_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_PivotDimension::has_uniqueName_attr() const
    {    
    return m_has_uniqueName_attr;
    }

    void CT_PivotDimension::set_uniqueName_attr(const ns_s::ST_Xstring& _uniqueName_attr)
    {    
    m_has_uniqueName_attr = true;
    m_uniqueName_attr = new ns_s::ST_Xstring(_uniqueName_attr);
    }

    const ns_s::ST_Xstring& CT_PivotDimension::get_uniqueName_attr() const
    {    
    if (m_uniqueName_attr)
    {
        return *m_uniqueName_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_PivotDimension::has_caption_attr() const
    {    
    return m_has_caption_attr;
    }

    void CT_PivotDimension::set_caption_attr(const ns_s::ST_Xstring& _caption_attr)
    {    
    m_has_caption_attr = true;
    m_caption_attr = new ns_s::ST_Xstring(_caption_attr);
    }

    const ns_s::ST_Xstring& CT_PivotDimension::get_caption_attr() const
    {    
    if (m_caption_attr)
    {
        return *m_caption_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

CT_PivotDimension* CT_PivotDimension::default_instance_ = NULL;

    // CT_MeasureGroups
    CT_MeasureGroups::CT_MeasureGroups()
    :m_has_count_attr(false),
    m_count_attr(0)
    {
    }
    CT_MeasureGroups::~CT_MeasureGroups()
{
    clear();    }
    CT_MeasureGroup* CT_MeasureGroups::add_measureGroup()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_MeasureGroup* pNewChild = pChildGroup->mutable_measureGroup();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_MeasureGroups::clear()
    {    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_MeasureGroups::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_measureGroup())
            {
                (*iter)->get_measureGroup().toXmlElem("main:measureGroup", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_MeasureGroups& CT_MeasureGroups::default_instance()
    {    
    if (!CT_MeasureGroups::default_instance_)
    {
        CT_MeasureGroups::default_instance_ = new CT_MeasureGroups();
    }
    return *CT_MeasureGroups::default_instance_;
    }

    bool CT_MeasureGroups::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void CT_MeasureGroups::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& CT_MeasureGroups::get_count_attr() const
    {    
    return m_count_attr;
    }


    // CT_MeasureGroups::ChildGroup_1
    CT_MeasureGroups::ChildGroup_1::ChildGroup_1()
    :m_has_measureGroup(false),
    m_measureGroup(NULL)
    {
    }
    bool CT_MeasureGroups::ChildGroup_1::has_measureGroup() const
    {    
    return m_has_measureGroup;
    }

    CT_MeasureGroup* CT_MeasureGroups::ChildGroup_1::mutable_measureGroup()
    {    
    
    m_has_measureGroup = true;
    if (!m_measureGroup)
    {
        m_measureGroup = new CT_MeasureGroup();
    }
    return m_measureGroup;
    }

    const CT_MeasureGroup& CT_MeasureGroups::ChildGroup_1::get_measureGroup() const
    {    
    if (m_measureGroup)
    {
        return *m_measureGroup;
    }
    return CT_MeasureGroup::default_instance();
    }

CT_MeasureGroups* CT_MeasureGroups::default_instance_ = NULL;

    // CT_MeasureDimensionMaps
    CT_MeasureDimensionMaps::CT_MeasureDimensionMaps()
    :m_has_count_attr(false),
    m_count_attr(0)
    {
    }
    CT_MeasureDimensionMaps::~CT_MeasureDimensionMaps()
{
    clear();    }
    CT_MeasureDimensionMap* CT_MeasureDimensionMaps::add_map()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_MeasureDimensionMap* pNewChild = pChildGroup->mutable_map();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_MeasureDimensionMaps::clear()
    {    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_MeasureDimensionMaps::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_map())
            {
                (*iter)->get_map().toXmlElem("main:map", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_MeasureDimensionMaps& CT_MeasureDimensionMaps::default_instance()
    {    
    if (!CT_MeasureDimensionMaps::default_instance_)
    {
        CT_MeasureDimensionMaps::default_instance_ = new CT_MeasureDimensionMaps();
    }
    return *CT_MeasureDimensionMaps::default_instance_;
    }

    bool CT_MeasureDimensionMaps::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void CT_MeasureDimensionMaps::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& CT_MeasureDimensionMaps::get_count_attr() const
    {    
    return m_count_attr;
    }


    // CT_MeasureDimensionMaps::ChildGroup_1
    CT_MeasureDimensionMaps::ChildGroup_1::ChildGroup_1()
    :m_has_map(false),
    m_map(NULL)
    {
    }
    bool CT_MeasureDimensionMaps::ChildGroup_1::has_map() const
    {    
    return m_has_map;
    }

    CT_MeasureDimensionMap* CT_MeasureDimensionMaps::ChildGroup_1::mutable_map()
    {    
    
    m_has_map = true;
    if (!m_map)
    {
        m_map = new CT_MeasureDimensionMap();
    }
    return m_map;
    }

    const CT_MeasureDimensionMap& CT_MeasureDimensionMaps::ChildGroup_1::get_map() const
    {    
    if (m_map)
    {
        return *m_map;
    }
    return CT_MeasureDimensionMap::default_instance();
    }

CT_MeasureDimensionMaps* CT_MeasureDimensionMaps::default_instance_ = NULL;

    // CT_MeasureGroup
    CT_MeasureGroup::CT_MeasureGroup()
    :m_has_name_attr(false),
    m_name_attr(NULL),
    m_has_caption_attr(false),
    m_caption_attr(NULL)
    {
    }
    CT_MeasureGroup::~CT_MeasureGroup()
{
    clear();    }
    void CT_MeasureGroup::clear()
    {    
    m_has_name_attr = false;
    
    if (m_name_attr)
    {
        delete m_name_attr;
        m_name_attr = NULL;
    }
    
    
    m_has_caption_attr = false;
    
    if (m_caption_attr)
    {
        delete m_caption_attr;
        m_caption_attr = NULL;
    }
    
    }

    void CT_MeasureGroup::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_name_attr)
    {
        m_name_attr->toXmlAttr("name", _outStream);
    }
    
    
    if (m_has_caption_attr)
    {
        m_caption_attr->toXmlAttr("caption", _outStream);
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_MeasureGroup& CT_MeasureGroup::default_instance()
    {    
    if (!CT_MeasureGroup::default_instance_)
    {
        CT_MeasureGroup::default_instance_ = new CT_MeasureGroup();
    }
    return *CT_MeasureGroup::default_instance_;
    }

    bool CT_MeasureGroup::has_name_attr() const
    {    
    return m_has_name_attr;
    }

    void CT_MeasureGroup::set_name_attr(const ns_s::ST_Xstring& _name_attr)
    {    
    m_has_name_attr = true;
    m_name_attr = new ns_s::ST_Xstring(_name_attr);
    }

    const ns_s::ST_Xstring& CT_MeasureGroup::get_name_attr() const
    {    
    if (m_name_attr)
    {
        return *m_name_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_MeasureGroup::has_caption_attr() const
    {    
    return m_has_caption_attr;
    }

    void CT_MeasureGroup::set_caption_attr(const ns_s::ST_Xstring& _caption_attr)
    {    
    m_has_caption_attr = true;
    m_caption_attr = new ns_s::ST_Xstring(_caption_attr);
    }

    const ns_s::ST_Xstring& CT_MeasureGroup::get_caption_attr() const
    {    
    if (m_caption_attr)
    {
        return *m_caption_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

CT_MeasureGroup* CT_MeasureGroup::default_instance_ = NULL;

    // CT_MeasureDimensionMap
    CT_MeasureDimensionMap::CT_MeasureDimensionMap()
    :m_has_measureGroup_attr(false),
    m_measureGroup_attr(0),
    m_has_dimension_attr(false),
    m_dimension_attr(0)
    {
    }
    CT_MeasureDimensionMap::~CT_MeasureDimensionMap()
{
    clear();    }
    void CT_MeasureDimensionMap::clear()
    {    
    m_has_measureGroup_attr = false;
    m_measureGroup_attr = 0;
    
    m_has_dimension_attr = false;
    m_dimension_attr = 0;
    }

    void CT_MeasureDimensionMap::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_measureGroup_attr)
    {
        _outStream << " " << "measureGroup" << "=\"" << m_measureGroup_attr << "\"";
    }
    
    
    if (m_has_dimension_attr)
    {
        _outStream << " " << "dimension" << "=\"" << m_dimension_attr << "\"";
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_MeasureDimensionMap& CT_MeasureDimensionMap::default_instance()
    {    
    if (!CT_MeasureDimensionMap::default_instance_)
    {
        CT_MeasureDimensionMap::default_instance_ = new CT_MeasureDimensionMap();
    }
    return *CT_MeasureDimensionMap::default_instance_;
    }

    bool CT_MeasureDimensionMap::has_measureGroup_attr() const
    {    
    return m_has_measureGroup_attr;
    }

    void CT_MeasureDimensionMap::set_measureGroup_attr(const XSD::unsignedInt_& _measureGroup_attr)
    {    
    m_has_measureGroup_attr = true;
    m_measureGroup_attr = _measureGroup_attr;
    }

    const XSD::unsignedInt_& CT_MeasureDimensionMap::get_measureGroup_attr() const
    {    
    return m_measureGroup_attr;
    }

    bool CT_MeasureDimensionMap::has_dimension_attr() const
    {    
    return m_has_dimension_attr;
    }

    void CT_MeasureDimensionMap::set_dimension_attr(const XSD::unsignedInt_& _dimension_attr)
    {    
    m_has_dimension_attr = true;
    m_dimension_attr = _dimension_attr;
    }

    const XSD::unsignedInt_& CT_MeasureDimensionMap::get_dimension_attr() const
    {    
    return m_dimension_attr;
    }

CT_MeasureDimensionMap* CT_MeasureDimensionMap::default_instance_ = NULL;

    // CT_PivotTableStyle
    CT_PivotTableStyle::CT_PivotTableStyle()
    :m_has_name_attr(false),
    m_name_attr(""),
    m_has_showRowHeaders_attr(false),
    m_showRowHeaders_attr(false),
    m_has_showColHeaders_attr(false),
    m_showColHeaders_attr(false),
    m_has_showRowStripes_attr(false),
    m_showRowStripes_attr(false),
    m_has_showColStripes_attr(false),
    m_showColStripes_attr(false),
    m_has_showLastColumn_attr(false),
    m_showLastColumn_attr(false)
    {
    }
    CT_PivotTableStyle::~CT_PivotTableStyle()
{
    clear();    }
    void CT_PivotTableStyle::clear()
    {    
    m_has_name_attr = false;
    m_name_attr.clear();
    
    m_has_showRowHeaders_attr = false;
    m_showRowHeaders_attr = false;
    
    m_has_showColHeaders_attr = false;
    m_showColHeaders_attr = false;
    
    m_has_showRowStripes_attr = false;
    m_showRowStripes_attr = false;
    
    m_has_showColStripes_attr = false;
    m_showColStripes_attr = false;
    
    m_has_showLastColumn_attr = false;
    m_showLastColumn_attr = false;
    }

    void CT_PivotTableStyle::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_name_attr)
    {
        _outStream << " " << "name" << "=\"" << m_name_attr << "\"";
    }
    
    
    if (m_has_showRowHeaders_attr)
    {
        _outStream << " " << "showRowHeaders" << "=\"" << XSD::XMLBooleanStr(m_showRowHeaders_attr) << "\"";
    }
    
    
    if (m_has_showColHeaders_attr)
    {
        _outStream << " " << "showColHeaders" << "=\"" << XSD::XMLBooleanStr(m_showColHeaders_attr) << "\"";
    }
    
    
    if (m_has_showRowStripes_attr)
    {
        _outStream << " " << "showRowStripes" << "=\"" << XSD::XMLBooleanStr(m_showRowStripes_attr) << "\"";
    }
    
    
    if (m_has_showColStripes_attr)
    {
        _outStream << " " << "showColStripes" << "=\"" << XSD::XMLBooleanStr(m_showColStripes_attr) << "\"";
    }
    
    
    if (m_has_showLastColumn_attr)
    {
        _outStream << " " << "showLastColumn" << "=\"" << XSD::XMLBooleanStr(m_showLastColumn_attr) << "\"";
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_PivotTableStyle& CT_PivotTableStyle::default_instance()
    {    
    if (!CT_PivotTableStyle::default_instance_)
    {
        CT_PivotTableStyle::default_instance_ = new CT_PivotTableStyle();
    }
    return *CT_PivotTableStyle::default_instance_;
    }

    bool CT_PivotTableStyle::has_name_attr() const
    {    
    return m_has_name_attr;
    }

    void CT_PivotTableStyle::set_name_attr(const XSD::string_& _name_attr)
    {    
    m_has_name_attr = true;
    m_name_attr = _name_attr;
    }

    const XSD::string_& CT_PivotTableStyle::get_name_attr() const
    {    
    return m_name_attr;
    }

    bool CT_PivotTableStyle::has_showRowHeaders_attr() const
    {    
    return m_has_showRowHeaders_attr;
    }

    void CT_PivotTableStyle::set_showRowHeaders_attr(const XSD::boolean_& _showRowHeaders_attr)
    {    
    m_has_showRowHeaders_attr = true;
    m_showRowHeaders_attr = _showRowHeaders_attr;
    }

    const XSD::boolean_& CT_PivotTableStyle::get_showRowHeaders_attr() const
    {    
    return m_showRowHeaders_attr;
    }

    bool CT_PivotTableStyle::has_showColHeaders_attr() const
    {    
    return m_has_showColHeaders_attr;
    }

    void CT_PivotTableStyle::set_showColHeaders_attr(const XSD::boolean_& _showColHeaders_attr)
    {    
    m_has_showColHeaders_attr = true;
    m_showColHeaders_attr = _showColHeaders_attr;
    }

    const XSD::boolean_& CT_PivotTableStyle::get_showColHeaders_attr() const
    {    
    return m_showColHeaders_attr;
    }

    bool CT_PivotTableStyle::has_showRowStripes_attr() const
    {    
    return m_has_showRowStripes_attr;
    }

    void CT_PivotTableStyle::set_showRowStripes_attr(const XSD::boolean_& _showRowStripes_attr)
    {    
    m_has_showRowStripes_attr = true;
    m_showRowStripes_attr = _showRowStripes_attr;
    }

    const XSD::boolean_& CT_PivotTableStyle::get_showRowStripes_attr() const
    {    
    return m_showRowStripes_attr;
    }

    bool CT_PivotTableStyle::has_showColStripes_attr() const
    {    
    return m_has_showColStripes_attr;
    }

    void CT_PivotTableStyle::set_showColStripes_attr(const XSD::boolean_& _showColStripes_attr)
    {    
    m_has_showColStripes_attr = true;
    m_showColStripes_attr = _showColStripes_attr;
    }

    const XSD::boolean_& CT_PivotTableStyle::get_showColStripes_attr() const
    {    
    return m_showColStripes_attr;
    }

    bool CT_PivotTableStyle::has_showLastColumn_attr() const
    {    
    return m_has_showLastColumn_attr;
    }

    void CT_PivotTableStyle::set_showLastColumn_attr(const XSD::boolean_& _showLastColumn_attr)
    {    
    m_has_showLastColumn_attr = true;
    m_showLastColumn_attr = _showLastColumn_attr;
    }

    const XSD::boolean_& CT_PivotTableStyle::get_showLastColumn_attr() const
    {    
    return m_showLastColumn_attr;
    }

CT_PivotTableStyle* CT_PivotTableStyle::default_instance_ = NULL;

    // CT_PivotFilters
    CT_PivotFilters::CT_PivotFilters()
    :m_has_count_attr(false),
    m_count_attr(0)
    {
    }
    CT_PivotFilters::~CT_PivotFilters()
{
    clear();    }
    CT_PivotFilter* CT_PivotFilters::add_filter()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_PivotFilter* pNewChild = pChildGroup->mutable_filter();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_PivotFilters::clear()
    {    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_PivotFilters::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_filter())
            {
                (*iter)->get_filter().toXmlElem("main:filter", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_PivotFilters& CT_PivotFilters::default_instance()
    {    
    if (!CT_PivotFilters::default_instance_)
    {
        CT_PivotFilters::default_instance_ = new CT_PivotFilters();
    }
    return *CT_PivotFilters::default_instance_;
    }

    bool CT_PivotFilters::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void CT_PivotFilters::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& CT_PivotFilters::get_count_attr() const
    {    
    return m_count_attr;
    }


    // CT_PivotFilters::ChildGroup_1
    CT_PivotFilters::ChildGroup_1::ChildGroup_1()
    :m_has_filter(false),
    m_filter(NULL)
    {
    }
    bool CT_PivotFilters::ChildGroup_1::has_filter() const
    {    
    return m_has_filter;
    }

    CT_PivotFilter* CT_PivotFilters::ChildGroup_1::mutable_filter()
    {    
    
    m_has_filter = true;
    if (!m_filter)
    {
        m_filter = new CT_PivotFilter();
    }
    return m_filter;
    }

    const CT_PivotFilter& CT_PivotFilters::ChildGroup_1::get_filter() const
    {    
    if (m_filter)
    {
        return *m_filter;
    }
    return CT_PivotFilter::default_instance();
    }

CT_PivotFilters* CT_PivotFilters::default_instance_ = NULL;

    // CT_PivotFilter
    CT_PivotFilter::CT_PivotFilter()
    :m_has_autoFilter(false),
    m_autoFilter(NULL),
    m_has_extLst(false),
    m_extLst(NULL),
    m_has_fld_attr(false),
    m_fld_attr(0),
    m_has_mpFld_attr(false),
    m_mpFld_attr(0),
    m_has_type_attr(false),
    m_type_attr(NULL),
    m_has_evalOrder_attr(false),
    m_evalOrder_attr(0),
    m_has_id_attr(false),
    m_id_attr(0),
    m_has_iMeasureHier_attr(false),
    m_iMeasureHier_attr(0),
    m_has_iMeasureFld_attr(false),
    m_iMeasureFld_attr(0),
    m_has_name_attr(false),
    m_name_attr(NULL),
    m_has_description_attr(false),
    m_description_attr(NULL),
    m_has_stringValue1_attr(false),
    m_stringValue1_attr(NULL),
    m_has_stringValue2_attr(false),
    m_stringValue2_attr(NULL)
    {
    }
    CT_PivotFilter::~CT_PivotFilter()
{
    clear();    }
    bool CT_PivotFilter::has_autoFilter() const
    {    
    return m_has_autoFilter;
    }

    CT_AutoFilter* CT_PivotFilter::mutable_autoFilter()
    {    
    m_has_autoFilter = true;
    if (!m_autoFilter)
    {
        m_autoFilter = new CT_AutoFilter();
    }
    return m_autoFilter;
    }

    const CT_AutoFilter& CT_PivotFilter::get_autoFilter() const
    {    
    if (m_autoFilter)
    {
        return *m_autoFilter;
    }
    return CT_AutoFilter::default_instance();
    }

    bool CT_PivotFilter::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* CT_PivotFilter::mutable_extLst()
    {    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& CT_PivotFilter::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

    void CT_PivotFilter::clear()
    {    
    m_has_fld_attr = false;
    m_fld_attr = 0;
    
    m_has_mpFld_attr = false;
    m_mpFld_attr = 0;
    
    m_has_type_attr = false;
    
    if (m_type_attr)
    {
        delete m_type_attr;
        m_type_attr = NULL;
    }
    
    
    m_has_evalOrder_attr = false;
    m_evalOrder_attr = 0;
    
    m_has_id_attr = false;
    m_id_attr = 0;
    
    m_has_iMeasureHier_attr = false;
    m_iMeasureHier_attr = 0;
    
    m_has_iMeasureFld_attr = false;
    m_iMeasureFld_attr = 0;
    
    m_has_name_attr = false;
    
    if (m_name_attr)
    {
        delete m_name_attr;
        m_name_attr = NULL;
    }
    
    
    m_has_description_attr = false;
    
    if (m_description_attr)
    {
        delete m_description_attr;
        m_description_attr = NULL;
    }
    
    
    m_has_stringValue1_attr = false;
    
    if (m_stringValue1_attr)
    {
        delete m_stringValue1_attr;
        m_stringValue1_attr = NULL;
    }
    
    
    m_has_stringValue2_attr = false;
    
    if (m_stringValue2_attr)
    {
        delete m_stringValue2_attr;
        m_stringValue2_attr = NULL;
    }
    
    }

    void CT_PivotFilter::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_fld_attr)
    {
        _outStream << " " << "fld" << "=\"" << m_fld_attr << "\"";
    }
    
    
    if (m_has_mpFld_attr)
    {
        _outStream << " " << "mpFld" << "=\"" << m_mpFld_attr << "\"";
    }
    
    
    if (m_has_type_attr)
    {
        m_type_attr->toXmlAttr("type", _outStream);
    }
    
    
    if (m_has_evalOrder_attr)
    {
        _outStream << " " << "evalOrder" << "=\"" << m_evalOrder_attr << "\"";
    }
    
    
    if (m_has_id_attr)
    {
        _outStream << " " << "id" << "=\"" << m_id_attr << "\"";
    }
    
    
    if (m_has_iMeasureHier_attr)
    {
        _outStream << " " << "iMeasureHier" << "=\"" << m_iMeasureHier_attr << "\"";
    }
    
    
    if (m_has_iMeasureFld_attr)
    {
        _outStream << " " << "iMeasureFld" << "=\"" << m_iMeasureFld_attr << "\"";
    }
    
    
    if (m_has_name_attr)
    {
        m_name_attr->toXmlAttr("name", _outStream);
    }
    
    
    if (m_has_description_attr)
    {
        m_description_attr->toXmlAttr("description", _outStream);
    }
    
    
    if (m_has_stringValue1_attr)
    {
        m_stringValue1_attr->toXmlAttr("stringValue1", _outStream);
    }
    
    
    if (m_has_stringValue2_attr)
    {
        m_stringValue2_attr->toXmlAttr("stringValue2", _outStream);
    }
    
            _outStream << ">";
            
    if (m_has_autoFilter)
    {
        m_autoFilter->toXmlElem("main:autoFilter", "", _outStream);;
    }
    
    if (m_has_extLst)
    {
        m_extLst->toXmlElem("main:extLst", "", _outStream);;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_PivotFilter& CT_PivotFilter::default_instance()
    {    
    if (!CT_PivotFilter::default_instance_)
    {
        CT_PivotFilter::default_instance_ = new CT_PivotFilter();
    }
    return *CT_PivotFilter::default_instance_;
    }

    bool CT_PivotFilter::has_fld_attr() const
    {    
    return m_has_fld_attr;
    }

    void CT_PivotFilter::set_fld_attr(const XSD::unsignedInt_& _fld_attr)
    {    
    m_has_fld_attr = true;
    m_fld_attr = _fld_attr;
    }

    const XSD::unsignedInt_& CT_PivotFilter::get_fld_attr() const
    {    
    return m_fld_attr;
    }

    bool CT_PivotFilter::has_mpFld_attr() const
    {    
    return m_has_mpFld_attr;
    }

    void CT_PivotFilter::set_mpFld_attr(const XSD::unsignedInt_& _mpFld_attr)
    {    
    m_has_mpFld_attr = true;
    m_mpFld_attr = _mpFld_attr;
    }

    const XSD::unsignedInt_& CT_PivotFilter::get_mpFld_attr() const
    {    
    return m_mpFld_attr;
    }

    bool CT_PivotFilter::has_type_attr() const
    {    
    return m_has_type_attr;
    }

    void CT_PivotFilter::set_type_attr(const ST_PivotFilterType& _type_attr)
    {    
    m_has_type_attr = true;
    m_type_attr = new ST_PivotFilterType(_type_attr);
    }

    const ST_PivotFilterType& CT_PivotFilter::get_type_attr() const
    {    
    if (m_type_attr)
    {
        return *m_type_attr;
    }
    return ST_PivotFilterType::default_instance();
    }

    bool CT_PivotFilter::has_evalOrder_attr() const
    {    
    return m_has_evalOrder_attr;
    }

    void CT_PivotFilter::set_evalOrder_attr(const XSD::int_& _evalOrder_attr)
    {    
    m_has_evalOrder_attr = true;
    m_evalOrder_attr = _evalOrder_attr;
    }

    const XSD::int_& CT_PivotFilter::get_evalOrder_attr() const
    {    
    return m_evalOrder_attr;
    }

    bool CT_PivotFilter::has_id_attr() const
    {    
    return m_has_id_attr;
    }

    void CT_PivotFilter::set_id_attr(const XSD::unsignedInt_& _id_attr)
    {    
    m_has_id_attr = true;
    m_id_attr = _id_attr;
    }

    const XSD::unsignedInt_& CT_PivotFilter::get_id_attr() const
    {    
    return m_id_attr;
    }

    bool CT_PivotFilter::has_iMeasureHier_attr() const
    {    
    return m_has_iMeasureHier_attr;
    }

    void CT_PivotFilter::set_iMeasureHier_attr(const XSD::unsignedInt_& _iMeasureHier_attr)
    {    
    m_has_iMeasureHier_attr = true;
    m_iMeasureHier_attr = _iMeasureHier_attr;
    }

    const XSD::unsignedInt_& CT_PivotFilter::get_iMeasureHier_attr() const
    {    
    return m_iMeasureHier_attr;
    }

    bool CT_PivotFilter::has_iMeasureFld_attr() const
    {    
    return m_has_iMeasureFld_attr;
    }

    void CT_PivotFilter::set_iMeasureFld_attr(const XSD::unsignedInt_& _iMeasureFld_attr)
    {    
    m_has_iMeasureFld_attr = true;
    m_iMeasureFld_attr = _iMeasureFld_attr;
    }

    const XSD::unsignedInt_& CT_PivotFilter::get_iMeasureFld_attr() const
    {    
    return m_iMeasureFld_attr;
    }

    bool CT_PivotFilter::has_name_attr() const
    {    
    return m_has_name_attr;
    }

    void CT_PivotFilter::set_name_attr(const ns_s::ST_Xstring& _name_attr)
    {    
    m_has_name_attr = true;
    m_name_attr = new ns_s::ST_Xstring(_name_attr);
    }

    const ns_s::ST_Xstring& CT_PivotFilter::get_name_attr() const
    {    
    if (m_name_attr)
    {
        return *m_name_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_PivotFilter::has_description_attr() const
    {    
    return m_has_description_attr;
    }

    void CT_PivotFilter::set_description_attr(const ns_s::ST_Xstring& _description_attr)
    {    
    m_has_description_attr = true;
    m_description_attr = new ns_s::ST_Xstring(_description_attr);
    }

    const ns_s::ST_Xstring& CT_PivotFilter::get_description_attr() const
    {    
    if (m_description_attr)
    {
        return *m_description_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_PivotFilter::has_stringValue1_attr() const
    {    
    return m_has_stringValue1_attr;
    }

    void CT_PivotFilter::set_stringValue1_attr(const ns_s::ST_Xstring& _stringValue1_attr)
    {    
    m_has_stringValue1_attr = true;
    m_stringValue1_attr = new ns_s::ST_Xstring(_stringValue1_attr);
    }

    const ns_s::ST_Xstring& CT_PivotFilter::get_stringValue1_attr() const
    {    
    if (m_stringValue1_attr)
    {
        return *m_stringValue1_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_PivotFilter::has_stringValue2_attr() const
    {    
    return m_has_stringValue2_attr;
    }

    void CT_PivotFilter::set_stringValue2_attr(const ns_s::ST_Xstring& _stringValue2_attr)
    {    
    m_has_stringValue2_attr = true;
    m_stringValue2_attr = new ns_s::ST_Xstring(_stringValue2_attr);
    }

    const ns_s::ST_Xstring& CT_PivotFilter::get_stringValue2_attr() const
    {    
    if (m_stringValue2_attr)
    {
        return *m_stringValue2_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

CT_PivotFilter* CT_PivotFilter::default_instance_ = NULL;

    // CT_PivotArea
    CT_PivotArea::CT_PivotArea()
    :m_has_references(false),
    m_references(NULL),
    m_has_extLst(false),
    m_extLst(NULL),
    m_has_field_attr(false),
    m_field_attr(0),
    m_has_type_attr(false),
    m_type_attr(NULL),
    m_has_dataOnly_attr(false),
    m_dataOnly_attr(false),
    m_has_labelOnly_attr(false),
    m_labelOnly_attr(false),
    m_has_grandRow_attr(false),
    m_grandRow_attr(false),
    m_has_grandCol_attr(false),
    m_grandCol_attr(false),
    m_has_cacheIndex_attr(false),
    m_cacheIndex_attr(false),
    m_has_outline_attr(false),
    m_outline_attr(false),
    m_has_offset_attr(false),
    m_offset_attr(NULL),
    m_has_collapsedLevelsAreSubtotals_attr(false),
    m_collapsedLevelsAreSubtotals_attr(false),
    m_has_axis_attr(false),
    m_axis_attr(NULL),
    m_has_fieldPosition_attr(false),
    m_fieldPosition_attr(0)
    {
    }
    CT_PivotArea::~CT_PivotArea()
{
    clear();    }
    bool CT_PivotArea::has_references() const
    {    
    return m_has_references;
    }

    CT_PivotAreaReferences* CT_PivotArea::mutable_references()
    {    
    m_has_references = true;
    if (!m_references)
    {
        m_references = new CT_PivotAreaReferences();
    }
    return m_references;
    }

    const CT_PivotAreaReferences& CT_PivotArea::get_references() const
    {    
    if (m_references)
    {
        return *m_references;
    }
    return CT_PivotAreaReferences::default_instance();
    }

    bool CT_PivotArea::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* CT_PivotArea::mutable_extLst()
    {    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& CT_PivotArea::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

    void CT_PivotArea::clear()
    {    
    m_has_field_attr = false;
    m_field_attr = 0;
    
    m_has_type_attr = false;
    
    if (m_type_attr)
    {
        delete m_type_attr;
        m_type_attr = NULL;
    }
    
    
    m_has_dataOnly_attr = false;
    m_dataOnly_attr = false;
    
    m_has_labelOnly_attr = false;
    m_labelOnly_attr = false;
    
    m_has_grandRow_attr = false;
    m_grandRow_attr = false;
    
    m_has_grandCol_attr = false;
    m_grandCol_attr = false;
    
    m_has_cacheIndex_attr = false;
    m_cacheIndex_attr = false;
    
    m_has_outline_attr = false;
    m_outline_attr = false;
    
    m_has_offset_attr = false;
    
    if (m_offset_attr)
    {
        delete m_offset_attr;
        m_offset_attr = NULL;
    }
    
    
    m_has_collapsedLevelsAreSubtotals_attr = false;
    m_collapsedLevelsAreSubtotals_attr = false;
    
    m_has_axis_attr = false;
    
    if (m_axis_attr)
    {
        delete m_axis_attr;
        m_axis_attr = NULL;
    }
    
    
    m_has_fieldPosition_attr = false;
    m_fieldPosition_attr = 0;
    }

    void CT_PivotArea::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_field_attr)
    {
        _outStream << " " << "field" << "=\"" << m_field_attr << "\"";
    }
    
    
    if (m_has_type_attr)
    {
        m_type_attr->toXmlAttr("type", _outStream);
    }
    
    
    if (m_has_dataOnly_attr)
    {
        _outStream << " " << "dataOnly" << "=\"" << XSD::XMLBooleanStr(m_dataOnly_attr) << "\"";
    }
    
    
    if (m_has_labelOnly_attr)
    {
        _outStream << " " << "labelOnly" << "=\"" << XSD::XMLBooleanStr(m_labelOnly_attr) << "\"";
    }
    
    
    if (m_has_grandRow_attr)
    {
        _outStream << " " << "grandRow" << "=\"" << XSD::XMLBooleanStr(m_grandRow_attr) << "\"";
    }
    
    
    if (m_has_grandCol_attr)
    {
        _outStream << " " << "grandCol" << "=\"" << XSD::XMLBooleanStr(m_grandCol_attr) << "\"";
    }
    
    
    if (m_has_cacheIndex_attr)
    {
        _outStream << " " << "cacheIndex" << "=\"" << XSD::XMLBooleanStr(m_cacheIndex_attr) << "\"";
    }
    
    
    if (m_has_outline_attr)
    {
        _outStream << " " << "outline" << "=\"" << XSD::XMLBooleanStr(m_outline_attr) << "\"";
    }
    
    
    if (m_has_offset_attr)
    {
        m_offset_attr->toXmlAttr("offset", _outStream);
    }
    
    
    if (m_has_collapsedLevelsAreSubtotals_attr)
    {
        _outStream << " " << "collapsedLevelsAreSubtotals" << "=\"" << XSD::XMLBooleanStr(m_collapsedLevelsAreSubtotals_attr) << "\"";
    }
    
    
    if (m_has_axis_attr)
    {
        m_axis_attr->toXmlAttr("axis", _outStream);
    }
    
    
    if (m_has_fieldPosition_attr)
    {
        _outStream << " " << "fieldPosition" << "=\"" << m_fieldPosition_attr << "\"";
    }
    
            _outStream << ">";
            
    if (m_has_references)
    {
        m_references->toXmlElem("main:references", "", _outStream);;
    }
    
    if (m_has_extLst)
    {
        m_extLst->toXmlElem("main:extLst", "", _outStream);;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_PivotArea& CT_PivotArea::default_instance()
    {    
    if (!CT_PivotArea::default_instance_)
    {
        CT_PivotArea::default_instance_ = new CT_PivotArea();
    }
    return *CT_PivotArea::default_instance_;
    }

    bool CT_PivotArea::has_field_attr() const
    {    
    return m_has_field_attr;
    }

    void CT_PivotArea::set_field_attr(const XSD::int_& _field_attr)
    {    
    m_has_field_attr = true;
    m_field_attr = _field_attr;
    }

    const XSD::int_& CT_PivotArea::get_field_attr() const
    {    
    return m_field_attr;
    }

    bool CT_PivotArea::has_type_attr() const
    {    
    return m_has_type_attr;
    }

    void CT_PivotArea::set_type_attr(const ST_PivotAreaType& _type_attr)
    {    
    m_has_type_attr = true;
    m_type_attr = new ST_PivotAreaType(_type_attr);
    }

    const ST_PivotAreaType& CT_PivotArea::get_type_attr() const
    {    
    if (m_type_attr)
    {
        return *m_type_attr;
    }
    return ST_PivotAreaType::default_instance();
    }

    bool CT_PivotArea::has_dataOnly_attr() const
    {    
    return m_has_dataOnly_attr;
    }

    void CT_PivotArea::set_dataOnly_attr(const XSD::boolean_& _dataOnly_attr)
    {    
    m_has_dataOnly_attr = true;
    m_dataOnly_attr = _dataOnly_attr;
    }

    const XSD::boolean_& CT_PivotArea::get_dataOnly_attr() const
    {    
    return m_dataOnly_attr;
    }

    bool CT_PivotArea::has_labelOnly_attr() const
    {    
    return m_has_labelOnly_attr;
    }

    void CT_PivotArea::set_labelOnly_attr(const XSD::boolean_& _labelOnly_attr)
    {    
    m_has_labelOnly_attr = true;
    m_labelOnly_attr = _labelOnly_attr;
    }

    const XSD::boolean_& CT_PivotArea::get_labelOnly_attr() const
    {    
    return m_labelOnly_attr;
    }

    bool CT_PivotArea::has_grandRow_attr() const
    {    
    return m_has_grandRow_attr;
    }

    void CT_PivotArea::set_grandRow_attr(const XSD::boolean_& _grandRow_attr)
    {    
    m_has_grandRow_attr = true;
    m_grandRow_attr = _grandRow_attr;
    }

    const XSD::boolean_& CT_PivotArea::get_grandRow_attr() const
    {    
    return m_grandRow_attr;
    }

    bool CT_PivotArea::has_grandCol_attr() const
    {    
    return m_has_grandCol_attr;
    }

    void CT_PivotArea::set_grandCol_attr(const XSD::boolean_& _grandCol_attr)
    {    
    m_has_grandCol_attr = true;
    m_grandCol_attr = _grandCol_attr;
    }

    const XSD::boolean_& CT_PivotArea::get_grandCol_attr() const
    {    
    return m_grandCol_attr;
    }

    bool CT_PivotArea::has_cacheIndex_attr() const
    {    
    return m_has_cacheIndex_attr;
    }

    void CT_PivotArea::set_cacheIndex_attr(const XSD::boolean_& _cacheIndex_attr)
    {    
    m_has_cacheIndex_attr = true;
    m_cacheIndex_attr = _cacheIndex_attr;
    }

    const XSD::boolean_& CT_PivotArea::get_cacheIndex_attr() const
    {    
    return m_cacheIndex_attr;
    }

    bool CT_PivotArea::has_outline_attr() const
    {    
    return m_has_outline_attr;
    }

    void CT_PivotArea::set_outline_attr(const XSD::boolean_& _outline_attr)
    {    
    m_has_outline_attr = true;
    m_outline_attr = _outline_attr;
    }

    const XSD::boolean_& CT_PivotArea::get_outline_attr() const
    {    
    return m_outline_attr;
    }

    bool CT_PivotArea::has_offset_attr() const
    {    
    return m_has_offset_attr;
    }

    void CT_PivotArea::set_offset_attr(const ST_Ref& _offset_attr)
    {    
    m_has_offset_attr = true;
    m_offset_attr = new ST_Ref(_offset_attr);
    }

    const ST_Ref& CT_PivotArea::get_offset_attr() const
    {    
    if (m_offset_attr)
    {
        return *m_offset_attr;
    }
    return ST_Ref::default_instance();
    }

    bool CT_PivotArea::has_collapsedLevelsAreSubtotals_attr() const
    {    
    return m_has_collapsedLevelsAreSubtotals_attr;
    }

    void CT_PivotArea::set_collapsedLevelsAreSubtotals_attr(const XSD::boolean_& _collapsedLevelsAreSubtotals_attr)
    {    
    m_has_collapsedLevelsAreSubtotals_attr = true;
    m_collapsedLevelsAreSubtotals_attr = _collapsedLevelsAreSubtotals_attr;
    }

    const XSD::boolean_& CT_PivotArea::get_collapsedLevelsAreSubtotals_attr() const
    {    
    return m_collapsedLevelsAreSubtotals_attr;
    }

    bool CT_PivotArea::has_axis_attr() const
    {    
    return m_has_axis_attr;
    }

    void CT_PivotArea::set_axis_attr(const ST_Axis& _axis_attr)
    {    
    m_has_axis_attr = true;
    m_axis_attr = new ST_Axis(_axis_attr);
    }

    const ST_Axis& CT_PivotArea::get_axis_attr() const
    {    
    if (m_axis_attr)
    {
        return *m_axis_attr;
    }
    return ST_Axis::default_instance();
    }

    bool CT_PivotArea::has_fieldPosition_attr() const
    {    
    return m_has_fieldPosition_attr;
    }

    void CT_PivotArea::set_fieldPosition_attr(const XSD::unsignedInt_& _fieldPosition_attr)
    {    
    m_has_fieldPosition_attr = true;
    m_fieldPosition_attr = _fieldPosition_attr;
    }

    const XSD::unsignedInt_& CT_PivotArea::get_fieldPosition_attr() const
    {    
    return m_fieldPosition_attr;
    }

CT_PivotArea* CT_PivotArea::default_instance_ = NULL;

    // CT_PivotAreaReferences
    CT_PivotAreaReferences::CT_PivotAreaReferences()
    :m_has_count_attr(false),
    m_count_attr(0)
    {
    }
    CT_PivotAreaReferences::~CT_PivotAreaReferences()
{
    clear();    }
    CT_PivotAreaReference* CT_PivotAreaReferences::add_reference()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_PivotAreaReference* pNewChild = pChildGroup->mutable_reference();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_PivotAreaReferences::clear()
    {    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_PivotAreaReferences::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_reference())
            {
                (*iter)->get_reference().toXmlElem("main:reference", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_PivotAreaReferences& CT_PivotAreaReferences::default_instance()
    {    
    if (!CT_PivotAreaReferences::default_instance_)
    {
        CT_PivotAreaReferences::default_instance_ = new CT_PivotAreaReferences();
    }
    return *CT_PivotAreaReferences::default_instance_;
    }

    bool CT_PivotAreaReferences::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void CT_PivotAreaReferences::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& CT_PivotAreaReferences::get_count_attr() const
    {    
    return m_count_attr;
    }


    // CT_PivotAreaReferences::ChildGroup_1
    CT_PivotAreaReferences::ChildGroup_1::ChildGroup_1()
    :m_has_reference(false),
    m_reference(NULL)
    {
    }
    bool CT_PivotAreaReferences::ChildGroup_1::has_reference() const
    {    
    return m_has_reference;
    }

    CT_PivotAreaReference* CT_PivotAreaReferences::ChildGroup_1::mutable_reference()
    {    
    
    m_has_reference = true;
    if (!m_reference)
    {
        m_reference = new CT_PivotAreaReference();
    }
    return m_reference;
    }

    const CT_PivotAreaReference& CT_PivotAreaReferences::ChildGroup_1::get_reference() const
    {    
    if (m_reference)
    {
        return *m_reference;
    }
    return CT_PivotAreaReference::default_instance();
    }

CT_PivotAreaReferences* CT_PivotAreaReferences::default_instance_ = NULL;

    // CT_PivotAreaReference
    CT_PivotAreaReference::CT_PivotAreaReference()
    :m_has_field_attr(false),
    m_field_attr(0),
    m_has_count_attr(false),
    m_count_attr(0),
    m_has_selected_attr(false),
    m_selected_attr(false),
    m_has_byPosition_attr(false),
    m_byPosition_attr(false),
    m_has_relative_attr(false),
    m_relative_attr(false),
    m_has_defaultSubtotal_attr(false),
    m_defaultSubtotal_attr(false),
    m_has_sumSubtotal_attr(false),
    m_sumSubtotal_attr(false),
    m_has_countASubtotal_attr(false),
    m_countASubtotal_attr(false),
    m_has_avgSubtotal_attr(false),
    m_avgSubtotal_attr(false),
    m_has_maxSubtotal_attr(false),
    m_maxSubtotal_attr(false),
    m_has_minSubtotal_attr(false),
    m_minSubtotal_attr(false),
    m_has_productSubtotal_attr(false),
    m_productSubtotal_attr(false),
    m_has_countSubtotal_attr(false),
    m_countSubtotal_attr(false),
    m_has_stdDevSubtotal_attr(false),
    m_stdDevSubtotal_attr(false),
    m_has_stdDevPSubtotal_attr(false),
    m_stdDevPSubtotal_attr(false),
    m_has_varSubtotal_attr(false),
    m_varSubtotal_attr(false),
    m_has_varPSubtotal_attr(false),
    m_varPSubtotal_attr(false)
    {
    }
    CT_PivotAreaReference::~CT_PivotAreaReference()
{
    clear();    }
    CT_Index* CT_PivotAreaReference::add_x()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Index* pNewChild = pChildGroup->mutable_x();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_ExtensionList* CT_PivotAreaReference::add_extLst()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_ExtensionList* pNewChild = pChildGroup->mutable_extLst();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_PivotAreaReference::clear()
    {    
    m_has_field_attr = false;
    m_field_attr = 0;
    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    m_has_selected_attr = false;
    m_selected_attr = false;
    
    m_has_byPosition_attr = false;
    m_byPosition_attr = false;
    
    m_has_relative_attr = false;
    m_relative_attr = false;
    
    m_has_defaultSubtotal_attr = false;
    m_defaultSubtotal_attr = false;
    
    m_has_sumSubtotal_attr = false;
    m_sumSubtotal_attr = false;
    
    m_has_countASubtotal_attr = false;
    m_countASubtotal_attr = false;
    
    m_has_avgSubtotal_attr = false;
    m_avgSubtotal_attr = false;
    
    m_has_maxSubtotal_attr = false;
    m_maxSubtotal_attr = false;
    
    m_has_minSubtotal_attr = false;
    m_minSubtotal_attr = false;
    
    m_has_productSubtotal_attr = false;
    m_productSubtotal_attr = false;
    
    m_has_countSubtotal_attr = false;
    m_countSubtotal_attr = false;
    
    m_has_stdDevSubtotal_attr = false;
    m_stdDevSubtotal_attr = false;
    
    m_has_stdDevPSubtotal_attr = false;
    m_stdDevPSubtotal_attr = false;
    
    m_has_varSubtotal_attr = false;
    m_varSubtotal_attr = false;
    
    m_has_varPSubtotal_attr = false;
    m_varPSubtotal_attr = false;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_PivotAreaReference::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_field_attr)
    {
        _outStream << " " << "field" << "=\"" << m_field_attr << "\"";
    }
    
    
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
    
    if (m_has_selected_attr)
    {
        _outStream << " " << "selected" << "=\"" << XSD::XMLBooleanStr(m_selected_attr) << "\"";
    }
    
    
    if (m_has_byPosition_attr)
    {
        _outStream << " " << "byPosition" << "=\"" << XSD::XMLBooleanStr(m_byPosition_attr) << "\"";
    }
    
    
    if (m_has_relative_attr)
    {
        _outStream << " " << "relative" << "=\"" << XSD::XMLBooleanStr(m_relative_attr) << "\"";
    }
    
    
    if (m_has_defaultSubtotal_attr)
    {
        _outStream << " " << "defaultSubtotal" << "=\"" << XSD::XMLBooleanStr(m_defaultSubtotal_attr) << "\"";
    }
    
    
    if (m_has_sumSubtotal_attr)
    {
        _outStream << " " << "sumSubtotal" << "=\"" << XSD::XMLBooleanStr(m_sumSubtotal_attr) << "\"";
    }
    
    
    if (m_has_countASubtotal_attr)
    {
        _outStream << " " << "countASubtotal" << "=\"" << XSD::XMLBooleanStr(m_countASubtotal_attr) << "\"";
    }
    
    
    if (m_has_avgSubtotal_attr)
    {
        _outStream << " " << "avgSubtotal" << "=\"" << XSD::XMLBooleanStr(m_avgSubtotal_attr) << "\"";
    }
    
    
    if (m_has_maxSubtotal_attr)
    {
        _outStream << " " << "maxSubtotal" << "=\"" << XSD::XMLBooleanStr(m_maxSubtotal_attr) << "\"";
    }
    
    
    if (m_has_minSubtotal_attr)
    {
        _outStream << " " << "minSubtotal" << "=\"" << XSD::XMLBooleanStr(m_minSubtotal_attr) << "\"";
    }
    
    
    if (m_has_productSubtotal_attr)
    {
        _outStream << " " << "productSubtotal" << "=\"" << XSD::XMLBooleanStr(m_productSubtotal_attr) << "\"";
    }
    
    
    if (m_has_countSubtotal_attr)
    {
        _outStream << " " << "countSubtotal" << "=\"" << XSD::XMLBooleanStr(m_countSubtotal_attr) << "\"";
    }
    
    
    if (m_has_stdDevSubtotal_attr)
    {
        _outStream << " " << "stdDevSubtotal" << "=\"" << XSD::XMLBooleanStr(m_stdDevSubtotal_attr) << "\"";
    }
    
    
    if (m_has_stdDevPSubtotal_attr)
    {
        _outStream << " " << "stdDevPSubtotal" << "=\"" << XSD::XMLBooleanStr(m_stdDevPSubtotal_attr) << "\"";
    }
    
    
    if (m_has_varSubtotal_attr)
    {
        _outStream << " " << "varSubtotal" << "=\"" << XSD::XMLBooleanStr(m_varSubtotal_attr) << "\"";
    }
    
    
    if (m_has_varPSubtotal_attr)
    {
        _outStream << " " << "varPSubtotal" << "=\"" << XSD::XMLBooleanStr(m_varPSubtotal_attr) << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_x())
            {
                (*iter)->get_x().toXmlElem("main:x", "", _outStream);
            }
            else if ((*iter)->has_extLst())
            {
                (*iter)->get_extLst().toXmlElem("main:extLst", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_PivotAreaReference& CT_PivotAreaReference::default_instance()
    {    
    if (!CT_PivotAreaReference::default_instance_)
    {
        CT_PivotAreaReference::default_instance_ = new CT_PivotAreaReference();
    }
    return *CT_PivotAreaReference::default_instance_;
    }

    bool CT_PivotAreaReference::has_field_attr() const
    {    
    return m_has_field_attr;
    }

    void CT_PivotAreaReference::set_field_attr(const XSD::unsignedInt_& _field_attr)
    {    
    m_has_field_attr = true;
    m_field_attr = _field_attr;
    }

    const XSD::unsignedInt_& CT_PivotAreaReference::get_field_attr() const
    {    
    return m_field_attr;
    }

    bool CT_PivotAreaReference::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void CT_PivotAreaReference::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& CT_PivotAreaReference::get_count_attr() const
    {    
    return m_count_attr;
    }

    bool CT_PivotAreaReference::has_selected_attr() const
    {    
    return m_has_selected_attr;
    }

    void CT_PivotAreaReference::set_selected_attr(const XSD::boolean_& _selected_attr)
    {    
    m_has_selected_attr = true;
    m_selected_attr = _selected_attr;
    }

    const XSD::boolean_& CT_PivotAreaReference::get_selected_attr() const
    {    
    return m_selected_attr;
    }

    bool CT_PivotAreaReference::has_byPosition_attr() const
    {    
    return m_has_byPosition_attr;
    }

    void CT_PivotAreaReference::set_byPosition_attr(const XSD::boolean_& _byPosition_attr)
    {    
    m_has_byPosition_attr = true;
    m_byPosition_attr = _byPosition_attr;
    }

    const XSD::boolean_& CT_PivotAreaReference::get_byPosition_attr() const
    {    
    return m_byPosition_attr;
    }

    bool CT_PivotAreaReference::has_relative_attr() const
    {    
    return m_has_relative_attr;
    }

    void CT_PivotAreaReference::set_relative_attr(const XSD::boolean_& _relative_attr)
    {    
    m_has_relative_attr = true;
    m_relative_attr = _relative_attr;
    }

    const XSD::boolean_& CT_PivotAreaReference::get_relative_attr() const
    {    
    return m_relative_attr;
    }

    bool CT_PivotAreaReference::has_defaultSubtotal_attr() const
    {    
    return m_has_defaultSubtotal_attr;
    }

    void CT_PivotAreaReference::set_defaultSubtotal_attr(const XSD::boolean_& _defaultSubtotal_attr)
    {    
    m_has_defaultSubtotal_attr = true;
    m_defaultSubtotal_attr = _defaultSubtotal_attr;
    }

    const XSD::boolean_& CT_PivotAreaReference::get_defaultSubtotal_attr() const
    {    
    return m_defaultSubtotal_attr;
    }

    bool CT_PivotAreaReference::has_sumSubtotal_attr() const
    {    
    return m_has_sumSubtotal_attr;
    }

    void CT_PivotAreaReference::set_sumSubtotal_attr(const XSD::boolean_& _sumSubtotal_attr)
    {    
    m_has_sumSubtotal_attr = true;
    m_sumSubtotal_attr = _sumSubtotal_attr;
    }

    const XSD::boolean_& CT_PivotAreaReference::get_sumSubtotal_attr() const
    {    
    return m_sumSubtotal_attr;
    }

    bool CT_PivotAreaReference::has_countASubtotal_attr() const
    {    
    return m_has_countASubtotal_attr;
    }

    void CT_PivotAreaReference::set_countASubtotal_attr(const XSD::boolean_& _countASubtotal_attr)
    {    
    m_has_countASubtotal_attr = true;
    m_countASubtotal_attr = _countASubtotal_attr;
    }

    const XSD::boolean_& CT_PivotAreaReference::get_countASubtotal_attr() const
    {    
    return m_countASubtotal_attr;
    }

    bool CT_PivotAreaReference::has_avgSubtotal_attr() const
    {    
    return m_has_avgSubtotal_attr;
    }

    void CT_PivotAreaReference::set_avgSubtotal_attr(const XSD::boolean_& _avgSubtotal_attr)
    {    
    m_has_avgSubtotal_attr = true;
    m_avgSubtotal_attr = _avgSubtotal_attr;
    }

    const XSD::boolean_& CT_PivotAreaReference::get_avgSubtotal_attr() const
    {    
    return m_avgSubtotal_attr;
    }

    bool CT_PivotAreaReference::has_maxSubtotal_attr() const
    {    
    return m_has_maxSubtotal_attr;
    }

    void CT_PivotAreaReference::set_maxSubtotal_attr(const XSD::boolean_& _maxSubtotal_attr)
    {    
    m_has_maxSubtotal_attr = true;
    m_maxSubtotal_attr = _maxSubtotal_attr;
    }

    const XSD::boolean_& CT_PivotAreaReference::get_maxSubtotal_attr() const
    {    
    return m_maxSubtotal_attr;
    }

    bool CT_PivotAreaReference::has_minSubtotal_attr() const
    {    
    return m_has_minSubtotal_attr;
    }

    void CT_PivotAreaReference::set_minSubtotal_attr(const XSD::boolean_& _minSubtotal_attr)
    {    
    m_has_minSubtotal_attr = true;
    m_minSubtotal_attr = _minSubtotal_attr;
    }

    const XSD::boolean_& CT_PivotAreaReference::get_minSubtotal_attr() const
    {    
    return m_minSubtotal_attr;
    }

    bool CT_PivotAreaReference::has_productSubtotal_attr() const
    {    
    return m_has_productSubtotal_attr;
    }

    void CT_PivotAreaReference::set_productSubtotal_attr(const XSD::boolean_& _productSubtotal_attr)
    {    
    m_has_productSubtotal_attr = true;
    m_productSubtotal_attr = _productSubtotal_attr;
    }

    const XSD::boolean_& CT_PivotAreaReference::get_productSubtotal_attr() const
    {    
    return m_productSubtotal_attr;
    }

    bool CT_PivotAreaReference::has_countSubtotal_attr() const
    {    
    return m_has_countSubtotal_attr;
    }

    void CT_PivotAreaReference::set_countSubtotal_attr(const XSD::boolean_& _countSubtotal_attr)
    {    
    m_has_countSubtotal_attr = true;
    m_countSubtotal_attr = _countSubtotal_attr;
    }

    const XSD::boolean_& CT_PivotAreaReference::get_countSubtotal_attr() const
    {    
    return m_countSubtotal_attr;
    }

    bool CT_PivotAreaReference::has_stdDevSubtotal_attr() const
    {    
    return m_has_stdDevSubtotal_attr;
    }

    void CT_PivotAreaReference::set_stdDevSubtotal_attr(const XSD::boolean_& _stdDevSubtotal_attr)
    {    
    m_has_stdDevSubtotal_attr = true;
    m_stdDevSubtotal_attr = _stdDevSubtotal_attr;
    }

    const XSD::boolean_& CT_PivotAreaReference::get_stdDevSubtotal_attr() const
    {    
    return m_stdDevSubtotal_attr;
    }

    bool CT_PivotAreaReference::has_stdDevPSubtotal_attr() const
    {    
    return m_has_stdDevPSubtotal_attr;
    }

    void CT_PivotAreaReference::set_stdDevPSubtotal_attr(const XSD::boolean_& _stdDevPSubtotal_attr)
    {    
    m_has_stdDevPSubtotal_attr = true;
    m_stdDevPSubtotal_attr = _stdDevPSubtotal_attr;
    }

    const XSD::boolean_& CT_PivotAreaReference::get_stdDevPSubtotal_attr() const
    {    
    return m_stdDevPSubtotal_attr;
    }

    bool CT_PivotAreaReference::has_varSubtotal_attr() const
    {    
    return m_has_varSubtotal_attr;
    }

    void CT_PivotAreaReference::set_varSubtotal_attr(const XSD::boolean_& _varSubtotal_attr)
    {    
    m_has_varSubtotal_attr = true;
    m_varSubtotal_attr = _varSubtotal_attr;
    }

    const XSD::boolean_& CT_PivotAreaReference::get_varSubtotal_attr() const
    {    
    return m_varSubtotal_attr;
    }

    bool CT_PivotAreaReference::has_varPSubtotal_attr() const
    {    
    return m_has_varPSubtotal_attr;
    }

    void CT_PivotAreaReference::set_varPSubtotal_attr(const XSD::boolean_& _varPSubtotal_attr)
    {    
    m_has_varPSubtotal_attr = true;
    m_varPSubtotal_attr = _varPSubtotal_attr;
    }

    const XSD::boolean_& CT_PivotAreaReference::get_varPSubtotal_attr() const
    {    
    return m_varPSubtotal_attr;
    }


    // CT_PivotAreaReference::ChildGroup_1
    CT_PivotAreaReference::ChildGroup_1::ChildGroup_1()
    :m_has_x(false),
    m_x(NULL),
    m_has_extLst(false),
    m_extLst(NULL)
    {
    }
    bool CT_PivotAreaReference::ChildGroup_1::has_x() const
    {    
    return m_has_x;
    }

    CT_Index* CT_PivotAreaReference::ChildGroup_1::mutable_x()
    {    
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_x = true;
    if (!m_x)
    {
        m_x = new CT_Index();
    }
    return m_x;
    }

    const CT_Index& CT_PivotAreaReference::ChildGroup_1::get_x() const
    {    
    if (m_x)
    {
        return *m_x;
    }
    return CT_Index::default_instance();
    }

    bool CT_PivotAreaReference::ChildGroup_1::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* CT_PivotAreaReference::ChildGroup_1::mutable_extLst()
    {    
    
    m_has_x = false;
    
    if (m_x)
    {
        delete m_x;
        m_x = NULL;
    }
    ;
    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& CT_PivotAreaReference::ChildGroup_1::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

CT_PivotAreaReference* CT_PivotAreaReference::default_instance_ = NULL;

    // CT_Index
    CT_Index::CT_Index()
    :m_has_v_attr(false),
    m_v_attr(0)
    {
    }
    CT_Index::~CT_Index()
{
    clear();    }
    void CT_Index::clear()
    {    
    m_has_v_attr = false;
    m_v_attr = 0;
    }

    void CT_Index::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_v_attr)
    {
        _outStream << " " << "v" << "=\"" << m_v_attr << "\"";
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_Index& CT_Index::default_instance()
    {    
    if (!CT_Index::default_instance_)
    {
        CT_Index::default_instance_ = new CT_Index();
    }
    return *CT_Index::default_instance_;
    }

    bool CT_Index::has_v_attr() const
    {    
    return m_has_v_attr;
    }

    void CT_Index::set_v_attr(const XSD::unsignedInt_& _v_attr)
    {    
    m_has_v_attr = true;
    m_v_attr = _v_attr;
    }

    const XSD::unsignedInt_& CT_Index::get_v_attr() const
    {    
    return m_v_attr;
    }

CT_Index* CT_Index::default_instance_ = NULL;

    // CT_QueryTable
    CT_QueryTable::CT_QueryTable()
    :m_has_queryTableRefresh(false),
    m_queryTableRefresh(NULL),
    m_has_extLst(false),
    m_extLst(NULL),
    m_has_name_attr(false),
    m_name_attr(NULL),
    m_has_headers_attr(false),
    m_headers_attr(false),
    m_has_rowNumbers_attr(false),
    m_rowNumbers_attr(false),
    m_has_disableRefresh_attr(false),
    m_disableRefresh_attr(false),
    m_has_backgroundRefresh_attr(false),
    m_backgroundRefresh_attr(false),
    m_has_firstBackgroundRefresh_attr(false),
    m_firstBackgroundRefresh_attr(false),
    m_has_refreshOnLoad_attr(false),
    m_refreshOnLoad_attr(false),
    m_has_growShrinkType_attr(false),
    m_growShrinkType_attr(NULL),
    m_has_fillFormulas_attr(false),
    m_fillFormulas_attr(false),
    m_has_removeDataOnSave_attr(false),
    m_removeDataOnSave_attr(false),
    m_has_disableEdit_attr(false),
    m_disableEdit_attr(false),
    m_has_preserveFormatting_attr(false),
    m_preserveFormatting_attr(false),
    m_has_adjustColumnWidth_attr(false),
    m_adjustColumnWidth_attr(false),
    m_has_intermediate_attr(false),
    m_intermediate_attr(false),
    m_has_connectionId_attr(false),
    m_connectionId_attr(0),
    m_has_autoFormatId_attr(false),
    m_autoFormatId_attr(0),
    m_has_applyNumberFormats_attr(false),
    m_applyNumberFormats_attr(false),
    m_has_applyBorderFormats_attr(false),
    m_applyBorderFormats_attr(false),
    m_has_applyFontFormats_attr(false),
    m_applyFontFormats_attr(false),
    m_has_applyPatternFormats_attr(false),
    m_applyPatternFormats_attr(false),
    m_has_applyAlignmentFormats_attr(false),
    m_applyAlignmentFormats_attr(false),
    m_has_applyWidthHeightFormats_attr(false),
    m_applyWidthHeightFormats_attr(false)
    {
    }
    CT_QueryTable::~CT_QueryTable()
{
    clear();    }
    bool CT_QueryTable::has_queryTableRefresh() const
    {    
    return m_has_queryTableRefresh;
    }

    CT_QueryTableRefresh* CT_QueryTable::mutable_queryTableRefresh()
    {    
    m_has_queryTableRefresh = true;
    if (!m_queryTableRefresh)
    {
        m_queryTableRefresh = new CT_QueryTableRefresh();
    }
    return m_queryTableRefresh;
    }

    const CT_QueryTableRefresh& CT_QueryTable::get_queryTableRefresh() const
    {    
    if (m_queryTableRefresh)
    {
        return *m_queryTableRefresh;
    }
    return CT_QueryTableRefresh::default_instance();
    }

    bool CT_QueryTable::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* CT_QueryTable::mutable_extLst()
    {    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& CT_QueryTable::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

    void CT_QueryTable::clear()
    {    
    m_has_name_attr = false;
    
    if (m_name_attr)
    {
        delete m_name_attr;
        m_name_attr = NULL;
    }
    
    
    m_has_headers_attr = false;
    m_headers_attr = false;
    
    m_has_rowNumbers_attr = false;
    m_rowNumbers_attr = false;
    
    m_has_disableRefresh_attr = false;
    m_disableRefresh_attr = false;
    
    m_has_backgroundRefresh_attr = false;
    m_backgroundRefresh_attr = false;
    
    m_has_firstBackgroundRefresh_attr = false;
    m_firstBackgroundRefresh_attr = false;
    
    m_has_refreshOnLoad_attr = false;
    m_refreshOnLoad_attr = false;
    
    m_has_growShrinkType_attr = false;
    
    if (m_growShrinkType_attr)
    {
        delete m_growShrinkType_attr;
        m_growShrinkType_attr = NULL;
    }
    
    
    m_has_fillFormulas_attr = false;
    m_fillFormulas_attr = false;
    
    m_has_removeDataOnSave_attr = false;
    m_removeDataOnSave_attr = false;
    
    m_has_disableEdit_attr = false;
    m_disableEdit_attr = false;
    
    m_has_preserveFormatting_attr = false;
    m_preserveFormatting_attr = false;
    
    m_has_adjustColumnWidth_attr = false;
    m_adjustColumnWidth_attr = false;
    
    m_has_intermediate_attr = false;
    m_intermediate_attr = false;
    
    m_has_connectionId_attr = false;
    m_connectionId_attr = 0;
    
    m_has_autoFormatId_attr = false;
    m_autoFormatId_attr = 0;
    
    m_has_applyNumberFormats_attr = false;
    m_applyNumberFormats_attr = false;
    
    m_has_applyBorderFormats_attr = false;
    m_applyBorderFormats_attr = false;
    
    m_has_applyFontFormats_attr = false;
    m_applyFontFormats_attr = false;
    
    m_has_applyPatternFormats_attr = false;
    m_applyPatternFormats_attr = false;
    
    m_has_applyAlignmentFormats_attr = false;
    m_applyAlignmentFormats_attr = false;
    
    m_has_applyWidthHeightFormats_attr = false;
    m_applyWidthHeightFormats_attr = false;
    }

    void CT_QueryTable::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_name_attr)
    {
        m_name_attr->toXmlAttr("name", _outStream);
    }
    
    
    if (m_has_headers_attr)
    {
        _outStream << " " << "headers" << "=\"" << XSD::XMLBooleanStr(m_headers_attr) << "\"";
    }
    
    
    if (m_has_rowNumbers_attr)
    {
        _outStream << " " << "rowNumbers" << "=\"" << XSD::XMLBooleanStr(m_rowNumbers_attr) << "\"";
    }
    
    
    if (m_has_disableRefresh_attr)
    {
        _outStream << " " << "disableRefresh" << "=\"" << XSD::XMLBooleanStr(m_disableRefresh_attr) << "\"";
    }
    
    
    if (m_has_backgroundRefresh_attr)
    {
        _outStream << " " << "backgroundRefresh" << "=\"" << XSD::XMLBooleanStr(m_backgroundRefresh_attr) << "\"";
    }
    
    
    if (m_has_firstBackgroundRefresh_attr)
    {
        _outStream << " " << "firstBackgroundRefresh" << "=\"" << XSD::XMLBooleanStr(m_firstBackgroundRefresh_attr) << "\"";
    }
    
    
    if (m_has_refreshOnLoad_attr)
    {
        _outStream << " " << "refreshOnLoad" << "=\"" << XSD::XMLBooleanStr(m_refreshOnLoad_attr) << "\"";
    }
    
    
    if (m_has_growShrinkType_attr)
    {
        m_growShrinkType_attr->toXmlAttr("growShrinkType", _outStream);
    }
    
    
    if (m_has_fillFormulas_attr)
    {
        _outStream << " " << "fillFormulas" << "=\"" << XSD::XMLBooleanStr(m_fillFormulas_attr) << "\"";
    }
    
    
    if (m_has_removeDataOnSave_attr)
    {
        _outStream << " " << "removeDataOnSave" << "=\"" << XSD::XMLBooleanStr(m_removeDataOnSave_attr) << "\"";
    }
    
    
    if (m_has_disableEdit_attr)
    {
        _outStream << " " << "disableEdit" << "=\"" << XSD::XMLBooleanStr(m_disableEdit_attr) << "\"";
    }
    
    
    if (m_has_preserveFormatting_attr)
    {
        _outStream << " " << "preserveFormatting" << "=\"" << XSD::XMLBooleanStr(m_preserveFormatting_attr) << "\"";
    }
    
    
    if (m_has_adjustColumnWidth_attr)
    {
        _outStream << " " << "adjustColumnWidth" << "=\"" << XSD::XMLBooleanStr(m_adjustColumnWidth_attr) << "\"";
    }
    
    
    if (m_has_intermediate_attr)
    {
        _outStream << " " << "intermediate" << "=\"" << XSD::XMLBooleanStr(m_intermediate_attr) << "\"";
    }
    
    
    if (m_has_connectionId_attr)
    {
        _outStream << " " << "connectionId" << "=\"" << m_connectionId_attr << "\"";
    }
    
    
    if (m_has_autoFormatId_attr)
    {
        _outStream << " " << "autoFormatId" << "=\"" << m_autoFormatId_attr << "\"";
    }
    
    
    if (m_has_applyNumberFormats_attr)
    {
        _outStream << " " << "applyNumberFormats" << "=\"" << XSD::XMLBooleanStr(m_applyNumberFormats_attr) << "\"";
    }
    
    
    if (m_has_applyBorderFormats_attr)
    {
        _outStream << " " << "applyBorderFormats" << "=\"" << XSD::XMLBooleanStr(m_applyBorderFormats_attr) << "\"";
    }
    
    
    if (m_has_applyFontFormats_attr)
    {
        _outStream << " " << "applyFontFormats" << "=\"" << XSD::XMLBooleanStr(m_applyFontFormats_attr) << "\"";
    }
    
    
    if (m_has_applyPatternFormats_attr)
    {
        _outStream << " " << "applyPatternFormats" << "=\"" << XSD::XMLBooleanStr(m_applyPatternFormats_attr) << "\"";
    }
    
    
    if (m_has_applyAlignmentFormats_attr)
    {
        _outStream << " " << "applyAlignmentFormats" << "=\"" << XSD::XMLBooleanStr(m_applyAlignmentFormats_attr) << "\"";
    }
    
    
    if (m_has_applyWidthHeightFormats_attr)
    {
        _outStream << " " << "applyWidthHeightFormats" << "=\"" << XSD::XMLBooleanStr(m_applyWidthHeightFormats_attr) << "\"";
    }
    
            _outStream << ">";
            
    if (m_has_queryTableRefresh)
    {
        m_queryTableRefresh->toXmlElem("main:queryTableRefresh", "", _outStream);;
    }
    
    if (m_has_extLst)
    {
        m_extLst->toXmlElem("main:extLst", "", _outStream);;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_QueryTable& CT_QueryTable::default_instance()
    {    
    if (!CT_QueryTable::default_instance_)
    {
        CT_QueryTable::default_instance_ = new CT_QueryTable();
    }
    return *CT_QueryTable::default_instance_;
    }

    bool CT_QueryTable::has_name_attr() const
    {    
    return m_has_name_attr;
    }

    void CT_QueryTable::set_name_attr(const ns_s::ST_Xstring& _name_attr)
    {    
    m_has_name_attr = true;
    m_name_attr = new ns_s::ST_Xstring(_name_attr);
    }

    const ns_s::ST_Xstring& CT_QueryTable::get_name_attr() const
    {    
    if (m_name_attr)
    {
        return *m_name_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_QueryTable::has_headers_attr() const
    {    
    return m_has_headers_attr;
    }

    void CT_QueryTable::set_headers_attr(const XSD::boolean_& _headers_attr)
    {    
    m_has_headers_attr = true;
    m_headers_attr = _headers_attr;
    }

    const XSD::boolean_& CT_QueryTable::get_headers_attr() const
    {    
    return m_headers_attr;
    }

    bool CT_QueryTable::has_rowNumbers_attr() const
    {    
    return m_has_rowNumbers_attr;
    }

    void CT_QueryTable::set_rowNumbers_attr(const XSD::boolean_& _rowNumbers_attr)
    {    
    m_has_rowNumbers_attr = true;
    m_rowNumbers_attr = _rowNumbers_attr;
    }

    const XSD::boolean_& CT_QueryTable::get_rowNumbers_attr() const
    {    
    return m_rowNumbers_attr;
    }

    bool CT_QueryTable::has_disableRefresh_attr() const
    {    
    return m_has_disableRefresh_attr;
    }

    void CT_QueryTable::set_disableRefresh_attr(const XSD::boolean_& _disableRefresh_attr)
    {    
    m_has_disableRefresh_attr = true;
    m_disableRefresh_attr = _disableRefresh_attr;
    }

    const XSD::boolean_& CT_QueryTable::get_disableRefresh_attr() const
    {    
    return m_disableRefresh_attr;
    }

    bool CT_QueryTable::has_backgroundRefresh_attr() const
    {    
    return m_has_backgroundRefresh_attr;
    }

    void CT_QueryTable::set_backgroundRefresh_attr(const XSD::boolean_& _backgroundRefresh_attr)
    {    
    m_has_backgroundRefresh_attr = true;
    m_backgroundRefresh_attr = _backgroundRefresh_attr;
    }

    const XSD::boolean_& CT_QueryTable::get_backgroundRefresh_attr() const
    {    
    return m_backgroundRefresh_attr;
    }

    bool CT_QueryTable::has_firstBackgroundRefresh_attr() const
    {    
    return m_has_firstBackgroundRefresh_attr;
    }

    void CT_QueryTable::set_firstBackgroundRefresh_attr(const XSD::boolean_& _firstBackgroundRefresh_attr)
    {    
    m_has_firstBackgroundRefresh_attr = true;
    m_firstBackgroundRefresh_attr = _firstBackgroundRefresh_attr;
    }

    const XSD::boolean_& CT_QueryTable::get_firstBackgroundRefresh_attr() const
    {    
    return m_firstBackgroundRefresh_attr;
    }

    bool CT_QueryTable::has_refreshOnLoad_attr() const
    {    
    return m_has_refreshOnLoad_attr;
    }

    void CT_QueryTable::set_refreshOnLoad_attr(const XSD::boolean_& _refreshOnLoad_attr)
    {    
    m_has_refreshOnLoad_attr = true;
    m_refreshOnLoad_attr = _refreshOnLoad_attr;
    }

    const XSD::boolean_& CT_QueryTable::get_refreshOnLoad_attr() const
    {    
    return m_refreshOnLoad_attr;
    }

    bool CT_QueryTable::has_growShrinkType_attr() const
    {    
    return m_has_growShrinkType_attr;
    }

    void CT_QueryTable::set_growShrinkType_attr(const ST_GrowShrinkType& _growShrinkType_attr)
    {    
    m_has_growShrinkType_attr = true;
    m_growShrinkType_attr = new ST_GrowShrinkType(_growShrinkType_attr);
    }

    const ST_GrowShrinkType& CT_QueryTable::get_growShrinkType_attr() const
    {    
    if (m_growShrinkType_attr)
    {
        return *m_growShrinkType_attr;
    }
    return ST_GrowShrinkType::default_instance();
    }

    bool CT_QueryTable::has_fillFormulas_attr() const
    {    
    return m_has_fillFormulas_attr;
    }

    void CT_QueryTable::set_fillFormulas_attr(const XSD::boolean_& _fillFormulas_attr)
    {    
    m_has_fillFormulas_attr = true;
    m_fillFormulas_attr = _fillFormulas_attr;
    }

    const XSD::boolean_& CT_QueryTable::get_fillFormulas_attr() const
    {    
    return m_fillFormulas_attr;
    }

    bool CT_QueryTable::has_removeDataOnSave_attr() const
    {    
    return m_has_removeDataOnSave_attr;
    }

    void CT_QueryTable::set_removeDataOnSave_attr(const XSD::boolean_& _removeDataOnSave_attr)
    {    
    m_has_removeDataOnSave_attr = true;
    m_removeDataOnSave_attr = _removeDataOnSave_attr;
    }

    const XSD::boolean_& CT_QueryTable::get_removeDataOnSave_attr() const
    {    
    return m_removeDataOnSave_attr;
    }

    bool CT_QueryTable::has_disableEdit_attr() const
    {    
    return m_has_disableEdit_attr;
    }

    void CT_QueryTable::set_disableEdit_attr(const XSD::boolean_& _disableEdit_attr)
    {    
    m_has_disableEdit_attr = true;
    m_disableEdit_attr = _disableEdit_attr;
    }

    const XSD::boolean_& CT_QueryTable::get_disableEdit_attr() const
    {    
    return m_disableEdit_attr;
    }

    bool CT_QueryTable::has_preserveFormatting_attr() const
    {    
    return m_has_preserveFormatting_attr;
    }

    void CT_QueryTable::set_preserveFormatting_attr(const XSD::boolean_& _preserveFormatting_attr)
    {    
    m_has_preserveFormatting_attr = true;
    m_preserveFormatting_attr = _preserveFormatting_attr;
    }

    const XSD::boolean_& CT_QueryTable::get_preserveFormatting_attr() const
    {    
    return m_preserveFormatting_attr;
    }

    bool CT_QueryTable::has_adjustColumnWidth_attr() const
    {    
    return m_has_adjustColumnWidth_attr;
    }

    void CT_QueryTable::set_adjustColumnWidth_attr(const XSD::boolean_& _adjustColumnWidth_attr)
    {    
    m_has_adjustColumnWidth_attr = true;
    m_adjustColumnWidth_attr = _adjustColumnWidth_attr;
    }

    const XSD::boolean_& CT_QueryTable::get_adjustColumnWidth_attr() const
    {    
    return m_adjustColumnWidth_attr;
    }

    bool CT_QueryTable::has_intermediate_attr() const
    {    
    return m_has_intermediate_attr;
    }

    void CT_QueryTable::set_intermediate_attr(const XSD::boolean_& _intermediate_attr)
    {    
    m_has_intermediate_attr = true;
    m_intermediate_attr = _intermediate_attr;
    }

    const XSD::boolean_& CT_QueryTable::get_intermediate_attr() const
    {    
    return m_intermediate_attr;
    }

    bool CT_QueryTable::has_connectionId_attr() const
    {    
    return m_has_connectionId_attr;
    }

    void CT_QueryTable::set_connectionId_attr(const XSD::unsignedInt_& _connectionId_attr)
    {    
    m_has_connectionId_attr = true;
    m_connectionId_attr = _connectionId_attr;
    }

    const XSD::unsignedInt_& CT_QueryTable::get_connectionId_attr() const
    {    
    return m_connectionId_attr;
    }

    bool CT_QueryTable::has_autoFormatId_attr() const
    {    
    return m_has_autoFormatId_attr;
    }

    void CT_QueryTable::set_autoFormatId_attr(const XSD::unsignedInt_& _autoFormatId_attr)
    {    
    m_has_autoFormatId_attr = true;
    m_autoFormatId_attr = _autoFormatId_attr;
    }

    const XSD::unsignedInt_& CT_QueryTable::get_autoFormatId_attr() const
    {    
    return m_autoFormatId_attr;
    }

    bool CT_QueryTable::has_applyNumberFormats_attr() const
    {    
    return m_has_applyNumberFormats_attr;
    }

    void CT_QueryTable::set_applyNumberFormats_attr(const XSD::boolean_& _applyNumberFormats_attr)
    {    
    m_has_applyNumberFormats_attr = true;
    m_applyNumberFormats_attr = _applyNumberFormats_attr;
    }

    const XSD::boolean_& CT_QueryTable::get_applyNumberFormats_attr() const
    {    
    return m_applyNumberFormats_attr;
    }

    bool CT_QueryTable::has_applyBorderFormats_attr() const
    {    
    return m_has_applyBorderFormats_attr;
    }

    void CT_QueryTable::set_applyBorderFormats_attr(const XSD::boolean_& _applyBorderFormats_attr)
    {    
    m_has_applyBorderFormats_attr = true;
    m_applyBorderFormats_attr = _applyBorderFormats_attr;
    }

    const XSD::boolean_& CT_QueryTable::get_applyBorderFormats_attr() const
    {    
    return m_applyBorderFormats_attr;
    }

    bool CT_QueryTable::has_applyFontFormats_attr() const
    {    
    return m_has_applyFontFormats_attr;
    }

    void CT_QueryTable::set_applyFontFormats_attr(const XSD::boolean_& _applyFontFormats_attr)
    {    
    m_has_applyFontFormats_attr = true;
    m_applyFontFormats_attr = _applyFontFormats_attr;
    }

    const XSD::boolean_& CT_QueryTable::get_applyFontFormats_attr() const
    {    
    return m_applyFontFormats_attr;
    }

    bool CT_QueryTable::has_applyPatternFormats_attr() const
    {    
    return m_has_applyPatternFormats_attr;
    }

    void CT_QueryTable::set_applyPatternFormats_attr(const XSD::boolean_& _applyPatternFormats_attr)
    {    
    m_has_applyPatternFormats_attr = true;
    m_applyPatternFormats_attr = _applyPatternFormats_attr;
    }

    const XSD::boolean_& CT_QueryTable::get_applyPatternFormats_attr() const
    {    
    return m_applyPatternFormats_attr;
    }

    bool CT_QueryTable::has_applyAlignmentFormats_attr() const
    {    
    return m_has_applyAlignmentFormats_attr;
    }

    void CT_QueryTable::set_applyAlignmentFormats_attr(const XSD::boolean_& _applyAlignmentFormats_attr)
    {    
    m_has_applyAlignmentFormats_attr = true;
    m_applyAlignmentFormats_attr = _applyAlignmentFormats_attr;
    }

    const XSD::boolean_& CT_QueryTable::get_applyAlignmentFormats_attr() const
    {    
    return m_applyAlignmentFormats_attr;
    }

    bool CT_QueryTable::has_applyWidthHeightFormats_attr() const
    {    
    return m_has_applyWidthHeightFormats_attr;
    }

    void CT_QueryTable::set_applyWidthHeightFormats_attr(const XSD::boolean_& _applyWidthHeightFormats_attr)
    {    
    m_has_applyWidthHeightFormats_attr = true;
    m_applyWidthHeightFormats_attr = _applyWidthHeightFormats_attr;
    }

    const XSD::boolean_& CT_QueryTable::get_applyWidthHeightFormats_attr() const
    {    
    return m_applyWidthHeightFormats_attr;
    }

CT_QueryTable* CT_QueryTable::default_instance_ = NULL;

    // CT_QueryTableRefresh
    CT_QueryTableRefresh::CT_QueryTableRefresh()
    :m_has_queryTableFields(false),
    m_queryTableFields(NULL),
    m_has_queryTableDeletedFields(false),
    m_queryTableDeletedFields(NULL),
    m_has_sortState(false),
    m_sortState(NULL),
    m_has_extLst(false),
    m_extLst(NULL),
    m_has_preserveSortFilterLayout_attr(false),
    m_preserveSortFilterLayout_attr(false),
    m_has_fieldIdWrapped_attr(false),
    m_fieldIdWrapped_attr(false),
    m_has_headersInLastRefresh_attr(false),
    m_headersInLastRefresh_attr(false),
    m_has_minimumVersion_attr(false),
    m_minimumVersion_attr(0),
    m_has_nextId_attr(false),
    m_nextId_attr(0),
    m_has_unboundColumnsLeft_attr(false),
    m_unboundColumnsLeft_attr(0),
    m_has_unboundColumnsRight_attr(false),
    m_unboundColumnsRight_attr(0)
    {
    }
    CT_QueryTableRefresh::~CT_QueryTableRefresh()
{
    clear();    }
    bool CT_QueryTableRefresh::has_queryTableFields() const
    {    
    return m_has_queryTableFields;
    }

    CT_QueryTableFields* CT_QueryTableRefresh::mutable_queryTableFields()
    {    
    m_has_queryTableFields = true;
    if (!m_queryTableFields)
    {
        m_queryTableFields = new CT_QueryTableFields();
    }
    return m_queryTableFields;
    }

    const CT_QueryTableFields& CT_QueryTableRefresh::get_queryTableFields() const
    {    
    if (m_queryTableFields)
    {
        return *m_queryTableFields;
    }
    return CT_QueryTableFields::default_instance();
    }

    bool CT_QueryTableRefresh::has_queryTableDeletedFields() const
    {    
    return m_has_queryTableDeletedFields;
    }

    CT_QueryTableDeletedFields* CT_QueryTableRefresh::mutable_queryTableDeletedFields()
    {    
    m_has_queryTableDeletedFields = true;
    if (!m_queryTableDeletedFields)
    {
        m_queryTableDeletedFields = new CT_QueryTableDeletedFields();
    }
    return m_queryTableDeletedFields;
    }

    const CT_QueryTableDeletedFields& CT_QueryTableRefresh::get_queryTableDeletedFields() const
    {    
    if (m_queryTableDeletedFields)
    {
        return *m_queryTableDeletedFields;
    }
    return CT_QueryTableDeletedFields::default_instance();
    }

    bool CT_QueryTableRefresh::has_sortState() const
    {    
    return m_has_sortState;
    }

    CT_SortState* CT_QueryTableRefresh::mutable_sortState()
    {    
    m_has_sortState = true;
    if (!m_sortState)
    {
        m_sortState = new CT_SortState();
    }
    return m_sortState;
    }

    const CT_SortState& CT_QueryTableRefresh::get_sortState() const
    {    
    if (m_sortState)
    {
        return *m_sortState;
    }
    return CT_SortState::default_instance();
    }

    bool CT_QueryTableRefresh::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* CT_QueryTableRefresh::mutable_extLst()
    {    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& CT_QueryTableRefresh::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

    void CT_QueryTableRefresh::clear()
    {    
    m_has_preserveSortFilterLayout_attr = false;
    m_preserveSortFilterLayout_attr = false;
    
    m_has_fieldIdWrapped_attr = false;
    m_fieldIdWrapped_attr = false;
    
    m_has_headersInLastRefresh_attr = false;
    m_headersInLastRefresh_attr = false;
    
    m_has_minimumVersion_attr = false;
    m_minimumVersion_attr = 0;
    
    m_has_nextId_attr = false;
    m_nextId_attr = 0;
    
    m_has_unboundColumnsLeft_attr = false;
    m_unboundColumnsLeft_attr = 0;
    
    m_has_unboundColumnsRight_attr = false;
    m_unboundColumnsRight_attr = 0;
    }

    void CT_QueryTableRefresh::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_preserveSortFilterLayout_attr)
    {
        _outStream << " " << "preserveSortFilterLayout" << "=\"" << XSD::XMLBooleanStr(m_preserveSortFilterLayout_attr) << "\"";
    }
    
    
    if (m_has_fieldIdWrapped_attr)
    {
        _outStream << " " << "fieldIdWrapped" << "=\"" << XSD::XMLBooleanStr(m_fieldIdWrapped_attr) << "\"";
    }
    
    
    if (m_has_headersInLastRefresh_attr)
    {
        _outStream << " " << "headersInLastRefresh" << "=\"" << XSD::XMLBooleanStr(m_headersInLastRefresh_attr) << "\"";
    }
    
    
    if (m_has_minimumVersion_attr)
    {
        _outStream << " " << "minimumVersion" << "=\"" << m_minimumVersion_attr << "\"";
    }
    
    
    if (m_has_nextId_attr)
    {
        _outStream << " " << "nextId" << "=\"" << m_nextId_attr << "\"";
    }
    
    
    if (m_has_unboundColumnsLeft_attr)
    {
        _outStream << " " << "unboundColumnsLeft" << "=\"" << m_unboundColumnsLeft_attr << "\"";
    }
    
    
    if (m_has_unboundColumnsRight_attr)
    {
        _outStream << " " << "unboundColumnsRight" << "=\"" << m_unboundColumnsRight_attr << "\"";
    }
    
            _outStream << ">";
            
    if (m_has_queryTableFields)
    {
        m_queryTableFields->toXmlElem("main:queryTableFields", "", _outStream);;
    }
    
    if (m_has_queryTableDeletedFields)
    {
        m_queryTableDeletedFields->toXmlElem("main:queryTableDeletedFields", "", _outStream);;
    }
    
    if (m_has_sortState)
    {
        m_sortState->toXmlElem("main:sortState", "", _outStream);;
    }
    
    if (m_has_extLst)
    {
        m_extLst->toXmlElem("main:extLst", "", _outStream);;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_QueryTableRefresh& CT_QueryTableRefresh::default_instance()
    {    
    if (!CT_QueryTableRefresh::default_instance_)
    {
        CT_QueryTableRefresh::default_instance_ = new CT_QueryTableRefresh();
    }
    return *CT_QueryTableRefresh::default_instance_;
    }

    bool CT_QueryTableRefresh::has_preserveSortFilterLayout_attr() const
    {    
    return m_has_preserveSortFilterLayout_attr;
    }

    void CT_QueryTableRefresh::set_preserveSortFilterLayout_attr(const XSD::boolean_& _preserveSortFilterLayout_attr)
    {    
    m_has_preserveSortFilterLayout_attr = true;
    m_preserveSortFilterLayout_attr = _preserveSortFilterLayout_attr;
    }

    const XSD::boolean_& CT_QueryTableRefresh::get_preserveSortFilterLayout_attr() const
    {    
    return m_preserveSortFilterLayout_attr;
    }

    bool CT_QueryTableRefresh::has_fieldIdWrapped_attr() const
    {    
    return m_has_fieldIdWrapped_attr;
    }

    void CT_QueryTableRefresh::set_fieldIdWrapped_attr(const XSD::boolean_& _fieldIdWrapped_attr)
    {    
    m_has_fieldIdWrapped_attr = true;
    m_fieldIdWrapped_attr = _fieldIdWrapped_attr;
    }

    const XSD::boolean_& CT_QueryTableRefresh::get_fieldIdWrapped_attr() const
    {    
    return m_fieldIdWrapped_attr;
    }

    bool CT_QueryTableRefresh::has_headersInLastRefresh_attr() const
    {    
    return m_has_headersInLastRefresh_attr;
    }

    void CT_QueryTableRefresh::set_headersInLastRefresh_attr(const XSD::boolean_& _headersInLastRefresh_attr)
    {    
    m_has_headersInLastRefresh_attr = true;
    m_headersInLastRefresh_attr = _headersInLastRefresh_attr;
    }

    const XSD::boolean_& CT_QueryTableRefresh::get_headersInLastRefresh_attr() const
    {    
    return m_headersInLastRefresh_attr;
    }

    bool CT_QueryTableRefresh::has_minimumVersion_attr() const
    {    
    return m_has_minimumVersion_attr;
    }

    void CT_QueryTableRefresh::set_minimumVersion_attr(const XSD::unsignedByte_& _minimumVersion_attr)
    {    
    m_has_minimumVersion_attr = true;
    m_minimumVersion_attr = _minimumVersion_attr;
    }

    const XSD::unsignedByte_& CT_QueryTableRefresh::get_minimumVersion_attr() const
    {    
    return m_minimumVersion_attr;
    }

    bool CT_QueryTableRefresh::has_nextId_attr() const
    {    
    return m_has_nextId_attr;
    }

    void CT_QueryTableRefresh::set_nextId_attr(const XSD::unsignedInt_& _nextId_attr)
    {    
    m_has_nextId_attr = true;
    m_nextId_attr = _nextId_attr;
    }

    const XSD::unsignedInt_& CT_QueryTableRefresh::get_nextId_attr() const
    {    
    return m_nextId_attr;
    }

    bool CT_QueryTableRefresh::has_unboundColumnsLeft_attr() const
    {    
    return m_has_unboundColumnsLeft_attr;
    }

    void CT_QueryTableRefresh::set_unboundColumnsLeft_attr(const XSD::unsignedInt_& _unboundColumnsLeft_attr)
    {    
    m_has_unboundColumnsLeft_attr = true;
    m_unboundColumnsLeft_attr = _unboundColumnsLeft_attr;
    }

    const XSD::unsignedInt_& CT_QueryTableRefresh::get_unboundColumnsLeft_attr() const
    {    
    return m_unboundColumnsLeft_attr;
    }

    bool CT_QueryTableRefresh::has_unboundColumnsRight_attr() const
    {    
    return m_has_unboundColumnsRight_attr;
    }

    void CT_QueryTableRefresh::set_unboundColumnsRight_attr(const XSD::unsignedInt_& _unboundColumnsRight_attr)
    {    
    m_has_unboundColumnsRight_attr = true;
    m_unboundColumnsRight_attr = _unboundColumnsRight_attr;
    }

    const XSD::unsignedInt_& CT_QueryTableRefresh::get_unboundColumnsRight_attr() const
    {    
    return m_unboundColumnsRight_attr;
    }

CT_QueryTableRefresh* CT_QueryTableRefresh::default_instance_ = NULL;

    // CT_QueryTableDeletedFields
    CT_QueryTableDeletedFields::CT_QueryTableDeletedFields()
    :m_has_count_attr(false),
    m_count_attr(0)
    {
    }
    CT_QueryTableDeletedFields::~CT_QueryTableDeletedFields()
{
    clear();    }
    CT_DeletedField* CT_QueryTableDeletedFields::add_deletedField()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_DeletedField* pNewChild = pChildGroup->mutable_deletedField();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_QueryTableDeletedFields::clear()
    {    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_QueryTableDeletedFields::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_deletedField())
            {
                (*iter)->get_deletedField().toXmlElem("main:deletedField", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_QueryTableDeletedFields& CT_QueryTableDeletedFields::default_instance()
    {    
    if (!CT_QueryTableDeletedFields::default_instance_)
    {
        CT_QueryTableDeletedFields::default_instance_ = new CT_QueryTableDeletedFields();
    }
    return *CT_QueryTableDeletedFields::default_instance_;
    }

    bool CT_QueryTableDeletedFields::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void CT_QueryTableDeletedFields::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& CT_QueryTableDeletedFields::get_count_attr() const
    {    
    return m_count_attr;
    }


    // CT_QueryTableDeletedFields::ChildGroup_1
    CT_QueryTableDeletedFields::ChildGroup_1::ChildGroup_1()
    :m_has_deletedField(false),
    m_deletedField(NULL)
    {
    }
    bool CT_QueryTableDeletedFields::ChildGroup_1::has_deletedField() const
    {    
    return m_has_deletedField;
    }

    CT_DeletedField* CT_QueryTableDeletedFields::ChildGroup_1::mutable_deletedField()
    {    
    
    m_has_deletedField = true;
    if (!m_deletedField)
    {
        m_deletedField = new CT_DeletedField();
    }
    return m_deletedField;
    }

    const CT_DeletedField& CT_QueryTableDeletedFields::ChildGroup_1::get_deletedField() const
    {    
    if (m_deletedField)
    {
        return *m_deletedField;
    }
    return CT_DeletedField::default_instance();
    }

CT_QueryTableDeletedFields* CT_QueryTableDeletedFields::default_instance_ = NULL;

    // CT_DeletedField
    CT_DeletedField::CT_DeletedField()
    :m_has_name_attr(false),
    m_name_attr(NULL)
    {
    }
    CT_DeletedField::~CT_DeletedField()
{
    clear();    }
    void CT_DeletedField::clear()
    {    
    m_has_name_attr = false;
    
    if (m_name_attr)
    {
        delete m_name_attr;
        m_name_attr = NULL;
    }
    
    }

    void CT_DeletedField::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_name_attr)
    {
        m_name_attr->toXmlAttr("name", _outStream);
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_DeletedField& CT_DeletedField::default_instance()
    {    
    if (!CT_DeletedField::default_instance_)
    {
        CT_DeletedField::default_instance_ = new CT_DeletedField();
    }
    return *CT_DeletedField::default_instance_;
    }

    bool CT_DeletedField::has_name_attr() const
    {    
    return m_has_name_attr;
    }

    void CT_DeletedField::set_name_attr(const ns_s::ST_Xstring& _name_attr)
    {    
    m_has_name_attr = true;
    m_name_attr = new ns_s::ST_Xstring(_name_attr);
    }

    const ns_s::ST_Xstring& CT_DeletedField::get_name_attr() const
    {    
    if (m_name_attr)
    {
        return *m_name_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

CT_DeletedField* CT_DeletedField::default_instance_ = NULL;

    // CT_QueryTableFields
    CT_QueryTableFields::CT_QueryTableFields()
    :m_has_count_attr(false),
    m_count_attr(0)
    {
    }
    CT_QueryTableFields::~CT_QueryTableFields()
{
    clear();    }
    CT_QueryTableField* CT_QueryTableFields::add_queryTableField()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_QueryTableField* pNewChild = pChildGroup->mutable_queryTableField();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_QueryTableFields::clear()
    {    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_QueryTableFields::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_queryTableField())
            {
                (*iter)->get_queryTableField().toXmlElem("main:queryTableField", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_QueryTableFields& CT_QueryTableFields::default_instance()
    {    
    if (!CT_QueryTableFields::default_instance_)
    {
        CT_QueryTableFields::default_instance_ = new CT_QueryTableFields();
    }
    return *CT_QueryTableFields::default_instance_;
    }

    bool CT_QueryTableFields::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void CT_QueryTableFields::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& CT_QueryTableFields::get_count_attr() const
    {    
    return m_count_attr;
    }


    // CT_QueryTableFields::ChildGroup_1
    CT_QueryTableFields::ChildGroup_1::ChildGroup_1()
    :m_has_queryTableField(false),
    m_queryTableField(NULL)
    {
    }
    bool CT_QueryTableFields::ChildGroup_1::has_queryTableField() const
    {    
    return m_has_queryTableField;
    }

    CT_QueryTableField* CT_QueryTableFields::ChildGroup_1::mutable_queryTableField()
    {    
    
    m_has_queryTableField = true;
    if (!m_queryTableField)
    {
        m_queryTableField = new CT_QueryTableField();
    }
    return m_queryTableField;
    }

    const CT_QueryTableField& CT_QueryTableFields::ChildGroup_1::get_queryTableField() const
    {    
    if (m_queryTableField)
    {
        return *m_queryTableField;
    }
    return CT_QueryTableField::default_instance();
    }

CT_QueryTableFields* CT_QueryTableFields::default_instance_ = NULL;

    // CT_QueryTableField
    CT_QueryTableField::CT_QueryTableField()
    :m_has_extLst(false),
    m_extLst(NULL),
    m_has_id_attr(false),
    m_id_attr(0),
    m_has_name_attr(false),
    m_name_attr(NULL),
    m_has_dataBound_attr(false),
    m_dataBound_attr(false),
    m_has_rowNumbers_attr(false),
    m_rowNumbers_attr(false),
    m_has_fillFormulas_attr(false),
    m_fillFormulas_attr(false),
    m_has_clipped_attr(false),
    m_clipped_attr(false),
    m_has_tableColumnId_attr(false),
    m_tableColumnId_attr(0)
    {
    }
    CT_QueryTableField::~CT_QueryTableField()
{
    clear();    }
    bool CT_QueryTableField::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* CT_QueryTableField::mutable_extLst()
    {    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& CT_QueryTableField::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

    void CT_QueryTableField::clear()
    {    
    m_has_id_attr = false;
    m_id_attr = 0;
    
    m_has_name_attr = false;
    
    if (m_name_attr)
    {
        delete m_name_attr;
        m_name_attr = NULL;
    }
    
    
    m_has_dataBound_attr = false;
    m_dataBound_attr = false;
    
    m_has_rowNumbers_attr = false;
    m_rowNumbers_attr = false;
    
    m_has_fillFormulas_attr = false;
    m_fillFormulas_attr = false;
    
    m_has_clipped_attr = false;
    m_clipped_attr = false;
    
    m_has_tableColumnId_attr = false;
    m_tableColumnId_attr = 0;
    }

    void CT_QueryTableField::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_id_attr)
    {
        _outStream << " " << "id" << "=\"" << m_id_attr << "\"";
    }
    
    
    if (m_has_name_attr)
    {
        m_name_attr->toXmlAttr("name", _outStream);
    }
    
    
    if (m_has_dataBound_attr)
    {
        _outStream << " " << "dataBound" << "=\"" << XSD::XMLBooleanStr(m_dataBound_attr) << "\"";
    }
    
    
    if (m_has_rowNumbers_attr)
    {
        _outStream << " " << "rowNumbers" << "=\"" << XSD::XMLBooleanStr(m_rowNumbers_attr) << "\"";
    }
    
    
    if (m_has_fillFormulas_attr)
    {
        _outStream << " " << "fillFormulas" << "=\"" << XSD::XMLBooleanStr(m_fillFormulas_attr) << "\"";
    }
    
    
    if (m_has_clipped_attr)
    {
        _outStream << " " << "clipped" << "=\"" << XSD::XMLBooleanStr(m_clipped_attr) << "\"";
    }
    
    
    if (m_has_tableColumnId_attr)
    {
        _outStream << " " << "tableColumnId" << "=\"" << m_tableColumnId_attr << "\"";
    }
    
            _outStream << ">";
            
    if (m_has_extLst)
    {
        m_extLst->toXmlElem("main:extLst", "", _outStream);;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_QueryTableField& CT_QueryTableField::default_instance()
    {    
    if (!CT_QueryTableField::default_instance_)
    {
        CT_QueryTableField::default_instance_ = new CT_QueryTableField();
    }
    return *CT_QueryTableField::default_instance_;
    }

    bool CT_QueryTableField::has_id_attr() const
    {    
    return m_has_id_attr;
    }

    void CT_QueryTableField::set_id_attr(const XSD::unsignedInt_& _id_attr)
    {    
    m_has_id_attr = true;
    m_id_attr = _id_attr;
    }

    const XSD::unsignedInt_& CT_QueryTableField::get_id_attr() const
    {    
    return m_id_attr;
    }

    bool CT_QueryTableField::has_name_attr() const
    {    
    return m_has_name_attr;
    }

    void CT_QueryTableField::set_name_attr(const ns_s::ST_Xstring& _name_attr)
    {    
    m_has_name_attr = true;
    m_name_attr = new ns_s::ST_Xstring(_name_attr);
    }

    const ns_s::ST_Xstring& CT_QueryTableField::get_name_attr() const
    {    
    if (m_name_attr)
    {
        return *m_name_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_QueryTableField::has_dataBound_attr() const
    {    
    return m_has_dataBound_attr;
    }

    void CT_QueryTableField::set_dataBound_attr(const XSD::boolean_& _dataBound_attr)
    {    
    m_has_dataBound_attr = true;
    m_dataBound_attr = _dataBound_attr;
    }

    const XSD::boolean_& CT_QueryTableField::get_dataBound_attr() const
    {    
    return m_dataBound_attr;
    }

    bool CT_QueryTableField::has_rowNumbers_attr() const
    {    
    return m_has_rowNumbers_attr;
    }

    void CT_QueryTableField::set_rowNumbers_attr(const XSD::boolean_& _rowNumbers_attr)
    {    
    m_has_rowNumbers_attr = true;
    m_rowNumbers_attr = _rowNumbers_attr;
    }

    const XSD::boolean_& CT_QueryTableField::get_rowNumbers_attr() const
    {    
    return m_rowNumbers_attr;
    }

    bool CT_QueryTableField::has_fillFormulas_attr() const
    {    
    return m_has_fillFormulas_attr;
    }

    void CT_QueryTableField::set_fillFormulas_attr(const XSD::boolean_& _fillFormulas_attr)
    {    
    m_has_fillFormulas_attr = true;
    m_fillFormulas_attr = _fillFormulas_attr;
    }

    const XSD::boolean_& CT_QueryTableField::get_fillFormulas_attr() const
    {    
    return m_fillFormulas_attr;
    }

    bool CT_QueryTableField::has_clipped_attr() const
    {    
    return m_has_clipped_attr;
    }

    void CT_QueryTableField::set_clipped_attr(const XSD::boolean_& _clipped_attr)
    {    
    m_has_clipped_attr = true;
    m_clipped_attr = _clipped_attr;
    }

    const XSD::boolean_& CT_QueryTableField::get_clipped_attr() const
    {    
    return m_clipped_attr;
    }

    bool CT_QueryTableField::has_tableColumnId_attr() const
    {    
    return m_has_tableColumnId_attr;
    }

    void CT_QueryTableField::set_tableColumnId_attr(const XSD::unsignedInt_& _tableColumnId_attr)
    {    
    m_has_tableColumnId_attr = true;
    m_tableColumnId_attr = _tableColumnId_attr;
    }

    const XSD::unsignedInt_& CT_QueryTableField::get_tableColumnId_attr() const
    {    
    return m_tableColumnId_attr;
    }

CT_QueryTableField* CT_QueryTableField::default_instance_ = NULL;

    // CT_Sst
    CT_Sst::CT_Sst()
    :m_has_count_attr(false),
    m_count_attr(0),
    m_has_uniqueCount_attr(false),
    m_uniqueCount_attr(0)
    {
    }
    CT_Sst::~CT_Sst()
{
    clear();    }
    CT_Rst* CT_Sst::add_si()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Rst* pNewChild = pChildGroup->mutable_si();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_ExtensionList* CT_Sst::add_extLst()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_ExtensionList* pNewChild = pChildGroup->mutable_extLst();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_Sst::clear()
    {    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    m_has_uniqueCount_attr = false;
    m_uniqueCount_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_Sst::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
    
    if (m_has_uniqueCount_attr)
    {
        _outStream << " " << "uniqueCount" << "=\"" << m_uniqueCount_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_si())
            {
                (*iter)->get_si().toXmlElem("main:si", "", _outStream);
            }
            else if ((*iter)->has_extLst())
            {
                (*iter)->get_extLst().toXmlElem("main:extLst", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_Sst& CT_Sst::default_instance()
    {    
    if (!CT_Sst::default_instance_)
    {
        CT_Sst::default_instance_ = new CT_Sst();
    }
    return *CT_Sst::default_instance_;
    }

    bool CT_Sst::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void CT_Sst::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& CT_Sst::get_count_attr() const
    {    
    return m_count_attr;
    }

    bool CT_Sst::has_uniqueCount_attr() const
    {    
    return m_has_uniqueCount_attr;
    }

    void CT_Sst::set_uniqueCount_attr(const XSD::unsignedInt_& _uniqueCount_attr)
    {    
    m_has_uniqueCount_attr = true;
    m_uniqueCount_attr = _uniqueCount_attr;
    }

    const XSD::unsignedInt_& CT_Sst::get_uniqueCount_attr() const
    {    
    return m_uniqueCount_attr;
    }


    // CT_Sst::ChildGroup_1
    CT_Sst::ChildGroup_1::ChildGroup_1()
    :m_has_si(false),
    m_si(NULL),
    m_has_extLst(false),
    m_extLst(NULL)
    {
    }
    bool CT_Sst::ChildGroup_1::has_si() const
    {    
    return m_has_si;
    }

    CT_Rst* CT_Sst::ChildGroup_1::mutable_si()
    {    
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_si = true;
    if (!m_si)
    {
        m_si = new CT_Rst();
    }
    return m_si;
    }

    const CT_Rst& CT_Sst::ChildGroup_1::get_si() const
    {    
    if (m_si)
    {
        return *m_si;
    }
    return CT_Rst::default_instance();
    }

    bool CT_Sst::ChildGroup_1::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* CT_Sst::ChildGroup_1::mutable_extLst()
    {    
    
    m_has_si = false;
    
    if (m_si)
    {
        delete m_si;
        m_si = NULL;
    }
    ;
    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& CT_Sst::ChildGroup_1::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

CT_Sst* CT_Sst::default_instance_ = NULL;

    // CT_PhoneticRun
    CT_PhoneticRun::CT_PhoneticRun()
    :m_has_t(false),
    m_t(NULL),
    m_has_sb_attr(false),
    m_sb_attr(0),
    m_has_eb_attr(false),
    m_eb_attr(0)
    {
    }
    CT_PhoneticRun::~CT_PhoneticRun()
{
    clear();    }
    bool CT_PhoneticRun::has_t() const
    {    
    return m_has_t;
    }

    ns_s::ST_Xstring* CT_PhoneticRun::mutable_t()
    {    
    m_has_t = true;
    if (!m_t)
    {
        m_t = new ns_s::ST_Xstring();
    }
    return m_t;
    }

    const ns_s::ST_Xstring& CT_PhoneticRun::get_t() const
    {    
    if (m_t)
    {
        return *m_t;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    void CT_PhoneticRun::clear()
    {    
    m_has_sb_attr = false;
    m_sb_attr = 0;
    
    m_has_eb_attr = false;
    m_eb_attr = 0;
    }

    void CT_PhoneticRun::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_sb_attr)
    {
        _outStream << " " << "sb" << "=\"" << m_sb_attr << "\"";
    }
    
    
    if (m_has_eb_attr)
    {
        _outStream << " " << "eb" << "=\"" << m_eb_attr << "\"";
    }
    
            _outStream << ">";
            
    if (m_has_t)
    {
        _outStream << "<main:t>" << m_t->toString() << "</main:t>";;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_PhoneticRun& CT_PhoneticRun::default_instance()
    {    
    if (!CT_PhoneticRun::default_instance_)
    {
        CT_PhoneticRun::default_instance_ = new CT_PhoneticRun();
    }
    return *CT_PhoneticRun::default_instance_;
    }

    bool CT_PhoneticRun::has_sb_attr() const
    {    
    return m_has_sb_attr;
    }

    void CT_PhoneticRun::set_sb_attr(const XSD::unsignedInt_& _sb_attr)
    {    
    m_has_sb_attr = true;
    m_sb_attr = _sb_attr;
    }

    const XSD::unsignedInt_& CT_PhoneticRun::get_sb_attr() const
    {    
    return m_sb_attr;
    }

    bool CT_PhoneticRun::has_eb_attr() const
    {    
    return m_has_eb_attr;
    }

    void CT_PhoneticRun::set_eb_attr(const XSD::unsignedInt_& _eb_attr)
    {    
    m_has_eb_attr = true;
    m_eb_attr = _eb_attr;
    }

    const XSD::unsignedInt_& CT_PhoneticRun::get_eb_attr() const
    {    
    return m_eb_attr;
    }

CT_PhoneticRun* CT_PhoneticRun::default_instance_ = NULL;

    // CT_RElt
    CT_RElt::CT_RElt()
    :m_has_rPr(false),
    m_rPr(NULL),
    m_has_t(false),
    m_t(NULL)
    {
    }
    CT_RElt::~CT_RElt()
{
    clear();    }
    bool CT_RElt::has_rPr() const
    {    
    return m_has_rPr;
    }

    CT_RPrElt* CT_RElt::mutable_rPr()
    {    
    m_has_rPr = true;
    if (!m_rPr)
    {
        m_rPr = new CT_RPrElt();
    }
    return m_rPr;
    }

    const CT_RPrElt& CT_RElt::get_rPr() const
    {    
    if (m_rPr)
    {
        return *m_rPr;
    }
    return CT_RPrElt::default_instance();
    }

    bool CT_RElt::has_t() const
    {    
    return m_has_t;
    }

    ns_s::ST_Xstring* CT_RElt::mutable_t()
    {    
    m_has_t = true;
    if (!m_t)
    {
        m_t = new ns_s::ST_Xstring();
    }
    return m_t;
    }

    const ns_s::ST_Xstring& CT_RElt::get_t() const
    {    
    if (m_t)
    {
        return *m_t;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    void CT_RElt::clear()
    {    }

    void CT_RElt::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
            _outStream << ">";
            
    if (m_has_rPr)
    {
        m_rPr->toXmlElem("main:rPr", "", _outStream);;
    }
    
    if (m_has_t)
    {
        _outStream << "<main:t>" << m_t->toString() << "</main:t>";;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_RElt& CT_RElt::default_instance()
    {    
    if (!CT_RElt::default_instance_)
    {
        CT_RElt::default_instance_ = new CT_RElt();
    }
    return *CT_RElt::default_instance_;
    }

CT_RElt* CT_RElt::default_instance_ = NULL;

    // CT_RPrElt
    CT_RPrElt::CT_RPrElt()

    {
    }
    CT_RPrElt::~CT_RPrElt()
{
    clear();    }
    CT_FontName* CT_RPrElt::add_rFont()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_FontName* pNewChild = pChildGroup->mutable_rFont();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_IntProperty* CT_RPrElt::add_charset()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_IntProperty* pNewChild = pChildGroup->mutable_charset();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_IntProperty* CT_RPrElt::add_family()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_IntProperty* pNewChild = pChildGroup->mutable_family();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_BooleanProperty* CT_RPrElt::add_b()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_BooleanProperty* pNewChild = pChildGroup->mutable_b();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_BooleanProperty* CT_RPrElt::add_i()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_BooleanProperty* pNewChild = pChildGroup->mutable_i();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_BooleanProperty* CT_RPrElt::add_strike()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_BooleanProperty* pNewChild = pChildGroup->mutable_strike();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_BooleanProperty* CT_RPrElt::add_outline()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_BooleanProperty* pNewChild = pChildGroup->mutable_outline();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_BooleanProperty* CT_RPrElt::add_shadow()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_BooleanProperty* pNewChild = pChildGroup->mutable_shadow();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_BooleanProperty* CT_RPrElt::add_condense()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_BooleanProperty* pNewChild = pChildGroup->mutable_condense();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_BooleanProperty* CT_RPrElt::add_extend()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_BooleanProperty* pNewChild = pChildGroup->mutable_extend();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_Color* CT_RPrElt::add_color()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Color* pNewChild = pChildGroup->mutable_color();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_FontSize* CT_RPrElt::add_sz()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_FontSize* pNewChild = pChildGroup->mutable_sz();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_UnderlineProperty* CT_RPrElt::add_u()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_UnderlineProperty* pNewChild = pChildGroup->mutable_u();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_VerticalAlignFontProperty* CT_RPrElt::add_vertAlign()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_VerticalAlignFontProperty* pNewChild = pChildGroup->mutable_vertAlign();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_FontScheme* CT_RPrElt::add_scheme()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_FontScheme* pNewChild = pChildGroup->mutable_scheme();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_RPrElt::clear()
    {    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_RPrElt::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_rFont())
            {
                (*iter)->get_rFont().toXmlElem("main:rFont", "", _outStream);
            }
            else if ((*iter)->has_charset())
            {
                (*iter)->get_charset().toXmlElem("main:charset", "", _outStream);
            }
            else if ((*iter)->has_family())
            {
                (*iter)->get_family().toXmlElem("main:family", "", _outStream);
            }
            else if ((*iter)->has_b())
            {
                (*iter)->get_b().toXmlElem("main:b", "", _outStream);
            }
            else if ((*iter)->has_i())
            {
                (*iter)->get_i().toXmlElem("main:i", "", _outStream);
            }
            else if ((*iter)->has_strike())
            {
                (*iter)->get_strike().toXmlElem("main:strike", "", _outStream);
            }
            else if ((*iter)->has_outline())
            {
                (*iter)->get_outline().toXmlElem("main:outline", "", _outStream);
            }
            else if ((*iter)->has_shadow())
            {
                (*iter)->get_shadow().toXmlElem("main:shadow", "", _outStream);
            }
            else if ((*iter)->has_condense())
            {
                (*iter)->get_condense().toXmlElem("main:condense", "", _outStream);
            }
            else if ((*iter)->has_extend())
            {
                (*iter)->get_extend().toXmlElem("main:extend", "", _outStream);
            }
            else if ((*iter)->has_color())
            {
                (*iter)->get_color().toXmlElem("main:color", "", _outStream);
            }
            else if ((*iter)->has_sz())
            {
                (*iter)->get_sz().toXmlElem("main:sz", "", _outStream);
            }
            else if ((*iter)->has_u())
            {
                (*iter)->get_u().toXmlElem("main:u", "", _outStream);
            }
            else if ((*iter)->has_vertAlign())
            {
                (*iter)->get_vertAlign().toXmlElem("main:vertAlign", "", _outStream);
            }
            else if ((*iter)->has_scheme())
            {
                (*iter)->get_scheme().toXmlElem("main:scheme", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_RPrElt& CT_RPrElt::default_instance()
    {    
    if (!CT_RPrElt::default_instance_)
    {
        CT_RPrElt::default_instance_ = new CT_RPrElt();
    }
    return *CT_RPrElt::default_instance_;
    }


    // CT_RPrElt::ChildGroup_1
    CT_RPrElt::ChildGroup_1::ChildGroup_1()
    :m_has_rFont(false),
    m_rFont(NULL),
    m_has_charset(false),
    m_charset(NULL),
    m_has_family(false),
    m_family(NULL),
    m_has_b(false),
    m_b(NULL),
    m_has_i(false),
    m_i(NULL),
    m_has_strike(false),
    m_strike(NULL),
    m_has_outline(false),
    m_outline(NULL),
    m_has_shadow(false),
    m_shadow(NULL),
    m_has_condense(false),
    m_condense(NULL),
    m_has_extend(false),
    m_extend(NULL),
    m_has_color(false),
    m_color(NULL),
    m_has_sz(false),
    m_sz(NULL),
    m_has_u(false),
    m_u(NULL),
    m_has_vertAlign(false),
    m_vertAlign(NULL),
    m_has_scheme(false),
    m_scheme(NULL)
    {
    }
    bool CT_RPrElt::ChildGroup_1::has_rFont() const
    {    
    return m_has_rFont;
    }

    CT_FontName* CT_RPrElt::ChildGroup_1::mutable_rFont()
    {    
    
    m_has_charset = false;
    
    if (m_charset)
    {
        delete m_charset;
        m_charset = NULL;
    }
    ;
    
    m_has_family = false;
    
    if (m_family)
    {
        delete m_family;
        m_family = NULL;
    }
    ;
    
    m_has_b = false;
    
    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;
    
    m_has_i = false;
    
    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;
    
    m_has_strike = false;
    
    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;
    
    m_has_outline = false;
    
    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;
    
    m_has_shadow = false;
    
    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;
    
    m_has_condense = false;
    
    if (m_condense)
    {
        delete m_condense;
        m_condense = NULL;
    }
    ;
    
    m_has_extend = false;
    
    if (m_extend)
    {
        delete m_extend;
        m_extend = NULL;
    }
    ;
    
    m_has_color = false;
    
    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;
    
    m_has_sz = false;
    
    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;
    
    m_has_u = false;
    
    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;
    
    m_has_vertAlign = false;
    
    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;
    
    m_has_scheme = false;
    
    if (m_scheme)
    {
        delete m_scheme;
        m_scheme = NULL;
    }
    ;
    
    m_has_rFont = true;
    if (!m_rFont)
    {
        m_rFont = new CT_FontName();
    }
    return m_rFont;
    }

    const CT_FontName& CT_RPrElt::ChildGroup_1::get_rFont() const
    {    
    if (m_rFont)
    {
        return *m_rFont;
    }
    return CT_FontName::default_instance();
    }

    bool CT_RPrElt::ChildGroup_1::has_charset() const
    {    
    return m_has_charset;
    }

    CT_IntProperty* CT_RPrElt::ChildGroup_1::mutable_charset()
    {    
    
    m_has_rFont = false;
    
    if (m_rFont)
    {
        delete m_rFont;
        m_rFont = NULL;
    }
    ;
    
    m_has_family = false;
    
    if (m_family)
    {
        delete m_family;
        m_family = NULL;
    }
    ;
    
    m_has_b = false;
    
    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;
    
    m_has_i = false;
    
    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;
    
    m_has_strike = false;
    
    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;
    
    m_has_outline = false;
    
    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;
    
    m_has_shadow = false;
    
    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;
    
    m_has_condense = false;
    
    if (m_condense)
    {
        delete m_condense;
        m_condense = NULL;
    }
    ;
    
    m_has_extend = false;
    
    if (m_extend)
    {
        delete m_extend;
        m_extend = NULL;
    }
    ;
    
    m_has_color = false;
    
    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;
    
    m_has_sz = false;
    
    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;
    
    m_has_u = false;
    
    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;
    
    m_has_vertAlign = false;
    
    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;
    
    m_has_scheme = false;
    
    if (m_scheme)
    {
        delete m_scheme;
        m_scheme = NULL;
    }
    ;
    
    m_has_charset = true;
    if (!m_charset)
    {
        m_charset = new CT_IntProperty();
    }
    return m_charset;
    }

    const CT_IntProperty& CT_RPrElt::ChildGroup_1::get_charset() const
    {    
    if (m_charset)
    {
        return *m_charset;
    }
    return CT_IntProperty::default_instance();
    }

    bool CT_RPrElt::ChildGroup_1::has_family() const
    {    
    return m_has_family;
    }

    CT_IntProperty* CT_RPrElt::ChildGroup_1::mutable_family()
    {    
    
    m_has_rFont = false;
    
    if (m_rFont)
    {
        delete m_rFont;
        m_rFont = NULL;
    }
    ;
    
    m_has_charset = false;
    
    if (m_charset)
    {
        delete m_charset;
        m_charset = NULL;
    }
    ;
    
    m_has_b = false;
    
    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;
    
    m_has_i = false;
    
    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;
    
    m_has_strike = false;
    
    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;
    
    m_has_outline = false;
    
    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;
    
    m_has_shadow = false;
    
    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;
    
    m_has_condense = false;
    
    if (m_condense)
    {
        delete m_condense;
        m_condense = NULL;
    }
    ;
    
    m_has_extend = false;
    
    if (m_extend)
    {
        delete m_extend;
        m_extend = NULL;
    }
    ;
    
    m_has_color = false;
    
    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;
    
    m_has_sz = false;
    
    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;
    
    m_has_u = false;
    
    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;
    
    m_has_vertAlign = false;
    
    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;
    
    m_has_scheme = false;
    
    if (m_scheme)
    {
        delete m_scheme;
        m_scheme = NULL;
    }
    ;
    
    m_has_family = true;
    if (!m_family)
    {
        m_family = new CT_IntProperty();
    }
    return m_family;
    }

    const CT_IntProperty& CT_RPrElt::ChildGroup_1::get_family() const
    {    
    if (m_family)
    {
        return *m_family;
    }
    return CT_IntProperty::default_instance();
    }

    bool CT_RPrElt::ChildGroup_1::has_b() const
    {    
    return m_has_b;
    }

    CT_BooleanProperty* CT_RPrElt::ChildGroup_1::mutable_b()
    {    
    
    m_has_rFont = false;
    
    if (m_rFont)
    {
        delete m_rFont;
        m_rFont = NULL;
    }
    ;
    
    m_has_charset = false;
    
    if (m_charset)
    {
        delete m_charset;
        m_charset = NULL;
    }
    ;
    
    m_has_family = false;
    
    if (m_family)
    {
        delete m_family;
        m_family = NULL;
    }
    ;
    
    m_has_i = false;
    
    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;
    
    m_has_strike = false;
    
    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;
    
    m_has_outline = false;
    
    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;
    
    m_has_shadow = false;
    
    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;
    
    m_has_condense = false;
    
    if (m_condense)
    {
        delete m_condense;
        m_condense = NULL;
    }
    ;
    
    m_has_extend = false;
    
    if (m_extend)
    {
        delete m_extend;
        m_extend = NULL;
    }
    ;
    
    m_has_color = false;
    
    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;
    
    m_has_sz = false;
    
    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;
    
    m_has_u = false;
    
    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;
    
    m_has_vertAlign = false;
    
    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;
    
    m_has_scheme = false;
    
    if (m_scheme)
    {
        delete m_scheme;
        m_scheme = NULL;
    }
    ;
    
    m_has_b = true;
    if (!m_b)
    {
        m_b = new CT_BooleanProperty();
    }
    return m_b;
    }

    const CT_BooleanProperty& CT_RPrElt::ChildGroup_1::get_b() const
    {    
    if (m_b)
    {
        return *m_b;
    }
    return CT_BooleanProperty::default_instance();
    }

    bool CT_RPrElt::ChildGroup_1::has_i() const
    {    
    return m_has_i;
    }

    CT_BooleanProperty* CT_RPrElt::ChildGroup_1::mutable_i()
    {    
    
    m_has_rFont = false;
    
    if (m_rFont)
    {
        delete m_rFont;
        m_rFont = NULL;
    }
    ;
    
    m_has_charset = false;
    
    if (m_charset)
    {
        delete m_charset;
        m_charset = NULL;
    }
    ;
    
    m_has_family = false;
    
    if (m_family)
    {
        delete m_family;
        m_family = NULL;
    }
    ;
    
    m_has_b = false;
    
    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;
    
    m_has_strike = false;
    
    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;
    
    m_has_outline = false;
    
    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;
    
    m_has_shadow = false;
    
    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;
    
    m_has_condense = false;
    
    if (m_condense)
    {
        delete m_condense;
        m_condense = NULL;
    }
    ;
    
    m_has_extend = false;
    
    if (m_extend)
    {
        delete m_extend;
        m_extend = NULL;
    }
    ;
    
    m_has_color = false;
    
    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;
    
    m_has_sz = false;
    
    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;
    
    m_has_u = false;
    
    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;
    
    m_has_vertAlign = false;
    
    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;
    
    m_has_scheme = false;
    
    if (m_scheme)
    {
        delete m_scheme;
        m_scheme = NULL;
    }
    ;
    
    m_has_i = true;
    if (!m_i)
    {
        m_i = new CT_BooleanProperty();
    }
    return m_i;
    }

    const CT_BooleanProperty& CT_RPrElt::ChildGroup_1::get_i() const
    {    
    if (m_i)
    {
        return *m_i;
    }
    return CT_BooleanProperty::default_instance();
    }

    bool CT_RPrElt::ChildGroup_1::has_strike() const
    {    
    return m_has_strike;
    }

    CT_BooleanProperty* CT_RPrElt::ChildGroup_1::mutable_strike()
    {    
    
    m_has_rFont = false;
    
    if (m_rFont)
    {
        delete m_rFont;
        m_rFont = NULL;
    }
    ;
    
    m_has_charset = false;
    
    if (m_charset)
    {
        delete m_charset;
        m_charset = NULL;
    }
    ;
    
    m_has_family = false;
    
    if (m_family)
    {
        delete m_family;
        m_family = NULL;
    }
    ;
    
    m_has_b = false;
    
    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;
    
    m_has_i = false;
    
    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;
    
    m_has_outline = false;
    
    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;
    
    m_has_shadow = false;
    
    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;
    
    m_has_condense = false;
    
    if (m_condense)
    {
        delete m_condense;
        m_condense = NULL;
    }
    ;
    
    m_has_extend = false;
    
    if (m_extend)
    {
        delete m_extend;
        m_extend = NULL;
    }
    ;
    
    m_has_color = false;
    
    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;
    
    m_has_sz = false;
    
    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;
    
    m_has_u = false;
    
    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;
    
    m_has_vertAlign = false;
    
    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;
    
    m_has_scheme = false;
    
    if (m_scheme)
    {
        delete m_scheme;
        m_scheme = NULL;
    }
    ;
    
    m_has_strike = true;
    if (!m_strike)
    {
        m_strike = new CT_BooleanProperty();
    }
    return m_strike;
    }

    const CT_BooleanProperty& CT_RPrElt::ChildGroup_1::get_strike() const
    {    
    if (m_strike)
    {
        return *m_strike;
    }
    return CT_BooleanProperty::default_instance();
    }

    bool CT_RPrElt::ChildGroup_1::has_outline() const
    {    
    return m_has_outline;
    }

    CT_BooleanProperty* CT_RPrElt::ChildGroup_1::mutable_outline()
    {    
    
    m_has_rFont = false;
    
    if (m_rFont)
    {
        delete m_rFont;
        m_rFont = NULL;
    }
    ;
    
    m_has_charset = false;
    
    if (m_charset)
    {
        delete m_charset;
        m_charset = NULL;
    }
    ;
    
    m_has_family = false;
    
    if (m_family)
    {
        delete m_family;
        m_family = NULL;
    }
    ;
    
    m_has_b = false;
    
    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;
    
    m_has_i = false;
    
    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;
    
    m_has_strike = false;
    
    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;
    
    m_has_shadow = false;
    
    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;
    
    m_has_condense = false;
    
    if (m_condense)
    {
        delete m_condense;
        m_condense = NULL;
    }
    ;
    
    m_has_extend = false;
    
    if (m_extend)
    {
        delete m_extend;
        m_extend = NULL;
    }
    ;
    
    m_has_color = false;
    
    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;
    
    m_has_sz = false;
    
    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;
    
    m_has_u = false;
    
    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;
    
    m_has_vertAlign = false;
    
    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;
    
    m_has_scheme = false;
    
    if (m_scheme)
    {
        delete m_scheme;
        m_scheme = NULL;
    }
    ;
    
    m_has_outline = true;
    if (!m_outline)
    {
        m_outline = new CT_BooleanProperty();
    }
    return m_outline;
    }

    const CT_BooleanProperty& CT_RPrElt::ChildGroup_1::get_outline() const
    {    
    if (m_outline)
    {
        return *m_outline;
    }
    return CT_BooleanProperty::default_instance();
    }

    bool CT_RPrElt::ChildGroup_1::has_shadow() const
    {    
    return m_has_shadow;
    }

    CT_BooleanProperty* CT_RPrElt::ChildGroup_1::mutable_shadow()
    {    
    
    m_has_rFont = false;
    
    if (m_rFont)
    {
        delete m_rFont;
        m_rFont = NULL;
    }
    ;
    
    m_has_charset = false;
    
    if (m_charset)
    {
        delete m_charset;
        m_charset = NULL;
    }
    ;
    
    m_has_family = false;
    
    if (m_family)
    {
        delete m_family;
        m_family = NULL;
    }
    ;
    
    m_has_b = false;
    
    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;
    
    m_has_i = false;
    
    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;
    
    m_has_strike = false;
    
    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;
    
    m_has_outline = false;
    
    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;
    
    m_has_condense = false;
    
    if (m_condense)
    {
        delete m_condense;
        m_condense = NULL;
    }
    ;
    
    m_has_extend = false;
    
    if (m_extend)
    {
        delete m_extend;
        m_extend = NULL;
    }
    ;
    
    m_has_color = false;
    
    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;
    
    m_has_sz = false;
    
    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;
    
    m_has_u = false;
    
    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;
    
    m_has_vertAlign = false;
    
    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;
    
    m_has_scheme = false;
    
    if (m_scheme)
    {
        delete m_scheme;
        m_scheme = NULL;
    }
    ;
    
    m_has_shadow = true;
    if (!m_shadow)
    {
        m_shadow = new CT_BooleanProperty();
    }
    return m_shadow;
    }

    const CT_BooleanProperty& CT_RPrElt::ChildGroup_1::get_shadow() const
    {    
    if (m_shadow)
    {
        return *m_shadow;
    }
    return CT_BooleanProperty::default_instance();
    }

    bool CT_RPrElt::ChildGroup_1::has_condense() const
    {    
    return m_has_condense;
    }

    CT_BooleanProperty* CT_RPrElt::ChildGroup_1::mutable_condense()
    {    
    
    m_has_rFont = false;
    
    if (m_rFont)
    {
        delete m_rFont;
        m_rFont = NULL;
    }
    ;
    
    m_has_charset = false;
    
    if (m_charset)
    {
        delete m_charset;
        m_charset = NULL;
    }
    ;
    
    m_has_family = false;
    
    if (m_family)
    {
        delete m_family;
        m_family = NULL;
    }
    ;
    
    m_has_b = false;
    
    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;
    
    m_has_i = false;
    
    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;
    
    m_has_strike = false;
    
    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;
    
    m_has_outline = false;
    
    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;
    
    m_has_shadow = false;
    
    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;
    
    m_has_extend = false;
    
    if (m_extend)
    {
        delete m_extend;
        m_extend = NULL;
    }
    ;
    
    m_has_color = false;
    
    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;
    
    m_has_sz = false;
    
    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;
    
    m_has_u = false;
    
    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;
    
    m_has_vertAlign = false;
    
    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;
    
    m_has_scheme = false;
    
    if (m_scheme)
    {
        delete m_scheme;
        m_scheme = NULL;
    }
    ;
    
    m_has_condense = true;
    if (!m_condense)
    {
        m_condense = new CT_BooleanProperty();
    }
    return m_condense;
    }

    const CT_BooleanProperty& CT_RPrElt::ChildGroup_1::get_condense() const
    {    
    if (m_condense)
    {
        return *m_condense;
    }
    return CT_BooleanProperty::default_instance();
    }

    bool CT_RPrElt::ChildGroup_1::has_extend() const
    {    
    return m_has_extend;
    }

    CT_BooleanProperty* CT_RPrElt::ChildGroup_1::mutable_extend()
    {    
    
    m_has_rFont = false;
    
    if (m_rFont)
    {
        delete m_rFont;
        m_rFont = NULL;
    }
    ;
    
    m_has_charset = false;
    
    if (m_charset)
    {
        delete m_charset;
        m_charset = NULL;
    }
    ;
    
    m_has_family = false;
    
    if (m_family)
    {
        delete m_family;
        m_family = NULL;
    }
    ;
    
    m_has_b = false;
    
    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;
    
    m_has_i = false;
    
    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;
    
    m_has_strike = false;
    
    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;
    
    m_has_outline = false;
    
    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;
    
    m_has_shadow = false;
    
    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;
    
    m_has_condense = false;
    
    if (m_condense)
    {
        delete m_condense;
        m_condense = NULL;
    }
    ;
    
    m_has_color = false;
    
    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;
    
    m_has_sz = false;
    
    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;
    
    m_has_u = false;
    
    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;
    
    m_has_vertAlign = false;
    
    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;
    
    m_has_scheme = false;
    
    if (m_scheme)
    {
        delete m_scheme;
        m_scheme = NULL;
    }
    ;
    
    m_has_extend = true;
    if (!m_extend)
    {
        m_extend = new CT_BooleanProperty();
    }
    return m_extend;
    }

    const CT_BooleanProperty& CT_RPrElt::ChildGroup_1::get_extend() const
    {    
    if (m_extend)
    {
        return *m_extend;
    }
    return CT_BooleanProperty::default_instance();
    }

    bool CT_RPrElt::ChildGroup_1::has_color() const
    {    
    return m_has_color;
    }

    CT_Color* CT_RPrElt::ChildGroup_1::mutable_color()
    {    
    
    m_has_rFont = false;
    
    if (m_rFont)
    {
        delete m_rFont;
        m_rFont = NULL;
    }
    ;
    
    m_has_charset = false;
    
    if (m_charset)
    {
        delete m_charset;
        m_charset = NULL;
    }
    ;
    
    m_has_family = false;
    
    if (m_family)
    {
        delete m_family;
        m_family = NULL;
    }
    ;
    
    m_has_b = false;
    
    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;
    
    m_has_i = false;
    
    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;
    
    m_has_strike = false;
    
    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;
    
    m_has_outline = false;
    
    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;
    
    m_has_shadow = false;
    
    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;
    
    m_has_condense = false;
    
    if (m_condense)
    {
        delete m_condense;
        m_condense = NULL;
    }
    ;
    
    m_has_extend = false;
    
    if (m_extend)
    {
        delete m_extend;
        m_extend = NULL;
    }
    ;
    
    m_has_sz = false;
    
    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;
    
    m_has_u = false;
    
    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;
    
    m_has_vertAlign = false;
    
    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;
    
    m_has_scheme = false;
    
    if (m_scheme)
    {
        delete m_scheme;
        m_scheme = NULL;
    }
    ;
    
    m_has_color = true;
    if (!m_color)
    {
        m_color = new CT_Color();
    }
    return m_color;
    }

    const CT_Color& CT_RPrElt::ChildGroup_1::get_color() const
    {    
    if (m_color)
    {
        return *m_color;
    }
    return CT_Color::default_instance();
    }

    bool CT_RPrElt::ChildGroup_1::has_sz() const
    {    
    return m_has_sz;
    }

    CT_FontSize* CT_RPrElt::ChildGroup_1::mutable_sz()
    {    
    
    m_has_rFont = false;
    
    if (m_rFont)
    {
        delete m_rFont;
        m_rFont = NULL;
    }
    ;
    
    m_has_charset = false;
    
    if (m_charset)
    {
        delete m_charset;
        m_charset = NULL;
    }
    ;
    
    m_has_family = false;
    
    if (m_family)
    {
        delete m_family;
        m_family = NULL;
    }
    ;
    
    m_has_b = false;
    
    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;
    
    m_has_i = false;
    
    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;
    
    m_has_strike = false;
    
    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;
    
    m_has_outline = false;
    
    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;
    
    m_has_shadow = false;
    
    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;
    
    m_has_condense = false;
    
    if (m_condense)
    {
        delete m_condense;
        m_condense = NULL;
    }
    ;
    
    m_has_extend = false;
    
    if (m_extend)
    {
        delete m_extend;
        m_extend = NULL;
    }
    ;
    
    m_has_color = false;
    
    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;
    
    m_has_u = false;
    
    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;
    
    m_has_vertAlign = false;
    
    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;
    
    m_has_scheme = false;
    
    if (m_scheme)
    {
        delete m_scheme;
        m_scheme = NULL;
    }
    ;
    
    m_has_sz = true;
    if (!m_sz)
    {
        m_sz = new CT_FontSize();
    }
    return m_sz;
    }

    const CT_FontSize& CT_RPrElt::ChildGroup_1::get_sz() const
    {    
    if (m_sz)
    {
        return *m_sz;
    }
    return CT_FontSize::default_instance();
    }

    bool CT_RPrElt::ChildGroup_1::has_u() const
    {    
    return m_has_u;
    }

    CT_UnderlineProperty* CT_RPrElt::ChildGroup_1::mutable_u()
    {    
    
    m_has_rFont = false;
    
    if (m_rFont)
    {
        delete m_rFont;
        m_rFont = NULL;
    }
    ;
    
    m_has_charset = false;
    
    if (m_charset)
    {
        delete m_charset;
        m_charset = NULL;
    }
    ;
    
    m_has_family = false;
    
    if (m_family)
    {
        delete m_family;
        m_family = NULL;
    }
    ;
    
    m_has_b = false;
    
    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;
    
    m_has_i = false;
    
    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;
    
    m_has_strike = false;
    
    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;
    
    m_has_outline = false;
    
    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;
    
    m_has_shadow = false;
    
    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;
    
    m_has_condense = false;
    
    if (m_condense)
    {
        delete m_condense;
        m_condense = NULL;
    }
    ;
    
    m_has_extend = false;
    
    if (m_extend)
    {
        delete m_extend;
        m_extend = NULL;
    }
    ;
    
    m_has_color = false;
    
    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;
    
    m_has_sz = false;
    
    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;
    
    m_has_vertAlign = false;
    
    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;
    
    m_has_scheme = false;
    
    if (m_scheme)
    {
        delete m_scheme;
        m_scheme = NULL;
    }
    ;
    
    m_has_u = true;
    if (!m_u)
    {
        m_u = new CT_UnderlineProperty();
    }
    return m_u;
    }

    const CT_UnderlineProperty& CT_RPrElt::ChildGroup_1::get_u() const
    {    
    if (m_u)
    {
        return *m_u;
    }
    return CT_UnderlineProperty::default_instance();
    }

    bool CT_RPrElt::ChildGroup_1::has_vertAlign() const
    {    
    return m_has_vertAlign;
    }

    CT_VerticalAlignFontProperty* CT_RPrElt::ChildGroup_1::mutable_vertAlign()
    {    
    
    m_has_rFont = false;
    
    if (m_rFont)
    {
        delete m_rFont;
        m_rFont = NULL;
    }
    ;
    
    m_has_charset = false;
    
    if (m_charset)
    {
        delete m_charset;
        m_charset = NULL;
    }
    ;
    
    m_has_family = false;
    
    if (m_family)
    {
        delete m_family;
        m_family = NULL;
    }
    ;
    
    m_has_b = false;
    
    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;
    
    m_has_i = false;
    
    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;
    
    m_has_strike = false;
    
    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;
    
    m_has_outline = false;
    
    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;
    
    m_has_shadow = false;
    
    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;
    
    m_has_condense = false;
    
    if (m_condense)
    {
        delete m_condense;
        m_condense = NULL;
    }
    ;
    
    m_has_extend = false;
    
    if (m_extend)
    {
        delete m_extend;
        m_extend = NULL;
    }
    ;
    
    m_has_color = false;
    
    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;
    
    m_has_sz = false;
    
    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;
    
    m_has_u = false;
    
    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;
    
    m_has_scheme = false;
    
    if (m_scheme)
    {
        delete m_scheme;
        m_scheme = NULL;
    }
    ;
    
    m_has_vertAlign = true;
    if (!m_vertAlign)
    {
        m_vertAlign = new CT_VerticalAlignFontProperty();
    }
    return m_vertAlign;
    }

    const CT_VerticalAlignFontProperty& CT_RPrElt::ChildGroup_1::get_vertAlign() const
    {    
    if (m_vertAlign)
    {
        return *m_vertAlign;
    }
    return CT_VerticalAlignFontProperty::default_instance();
    }

    bool CT_RPrElt::ChildGroup_1::has_scheme() const
    {    
    return m_has_scheme;
    }

    CT_FontScheme* CT_RPrElt::ChildGroup_1::mutable_scheme()
    {    
    
    m_has_rFont = false;
    
    if (m_rFont)
    {
        delete m_rFont;
        m_rFont = NULL;
    }
    ;
    
    m_has_charset = false;
    
    if (m_charset)
    {
        delete m_charset;
        m_charset = NULL;
    }
    ;
    
    m_has_family = false;
    
    if (m_family)
    {
        delete m_family;
        m_family = NULL;
    }
    ;
    
    m_has_b = false;
    
    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;
    
    m_has_i = false;
    
    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;
    
    m_has_strike = false;
    
    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;
    
    m_has_outline = false;
    
    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;
    
    m_has_shadow = false;
    
    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;
    
    m_has_condense = false;
    
    if (m_condense)
    {
        delete m_condense;
        m_condense = NULL;
    }
    ;
    
    m_has_extend = false;
    
    if (m_extend)
    {
        delete m_extend;
        m_extend = NULL;
    }
    ;
    
    m_has_color = false;
    
    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;
    
    m_has_sz = false;
    
    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;
    
    m_has_u = false;
    
    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;
    
    m_has_vertAlign = false;
    
    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;
    
    m_has_scheme = true;
    if (!m_scheme)
    {
        m_scheme = new CT_FontScheme();
    }
    return m_scheme;
    }

    const CT_FontScheme& CT_RPrElt::ChildGroup_1::get_scheme() const
    {    
    if (m_scheme)
    {
        return *m_scheme;
    }
    return CT_FontScheme::default_instance();
    }

CT_RPrElt* CT_RPrElt::default_instance_ = NULL;

    // CT_Rst
    CT_Rst::CT_Rst()
    :m_has_t(false),
    m_t(NULL)
    {
    }
    CT_Rst::~CT_Rst()
{
    clear();    }
    bool CT_Rst::has_t() const
    {    
    return m_has_t;
    }

    ns_s::ST_Xstring* CT_Rst::mutable_t()
    {    
    m_has_t = true;
    if (!m_t)
    {
        m_t = new ns_s::ST_Xstring();
    }
    return m_t;
    }

    const ns_s::ST_Xstring& CT_Rst::get_t() const
    {    
    if (m_t)
    {
        return *m_t;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    CT_RElt* CT_Rst::add_r()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_RElt* pNewChild = pChildGroup->mutable_r();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_PhoneticRun* CT_Rst::add_rPh()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_PhoneticRun* pNewChild = pChildGroup->mutable_rPh();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_PhoneticPr* CT_Rst::add_phoneticPr()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_PhoneticPr* pNewChild = pChildGroup->mutable_phoneticPr();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_Rst::clear()
    {    
    m_has_t = false;
    
    if (m_t)
    {
        delete m_t;
        m_t = NULL;
    }
    
     
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_Rst::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
            _outStream << ">";
            
    if (m_has_t)
    {
        _outStream << "<main:t>" << m_t->toString() << "</main:t>";;
    }
     
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_r())
            {
                (*iter)->get_r().toXmlElem("main:r", "", _outStream);
            }
            else if ((*iter)->has_rPh())
            {
                (*iter)->get_rPh().toXmlElem("main:rPh", "", _outStream);
            }
            else if ((*iter)->has_phoneticPr())
            {
                (*iter)->get_phoneticPr().toXmlElem("main:phoneticPr", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_Rst& CT_Rst::default_instance()
    {    
    if (!CT_Rst::default_instance_)
    {
        CT_Rst::default_instance_ = new CT_Rst();
    }
    return *CT_Rst::default_instance_;
    }


    // CT_Rst::ChildGroup_1
    CT_Rst::ChildGroup_1::ChildGroup_1()
    :m_has_r(false),
    m_r(NULL),
    m_has_rPh(false),
    m_rPh(NULL),
    m_has_phoneticPr(false),
    m_phoneticPr(NULL)
    {
    }
    bool CT_Rst::ChildGroup_1::has_r() const
    {    
    return m_has_r;
    }

    CT_RElt* CT_Rst::ChildGroup_1::mutable_r()
    {    
    
    m_has_rPh = false;
    
    if (m_rPh)
    {
        delete m_rPh;
        m_rPh = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_r = true;
    if (!m_r)
    {
        m_r = new CT_RElt();
    }
    return m_r;
    }

    const CT_RElt& CT_Rst::ChildGroup_1::get_r() const
    {    
    if (m_r)
    {
        return *m_r;
    }
    return CT_RElt::default_instance();
    }

    bool CT_Rst::ChildGroup_1::has_rPh() const
    {    
    return m_has_rPh;
    }

    CT_PhoneticRun* CT_Rst::ChildGroup_1::mutable_rPh()
    {    
    
    m_has_r = false;
    
    if (m_r)
    {
        delete m_r;
        m_r = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_rPh = true;
    if (!m_rPh)
    {
        m_rPh = new CT_PhoneticRun();
    }
    return m_rPh;
    }

    const CT_PhoneticRun& CT_Rst::ChildGroup_1::get_rPh() const
    {    
    if (m_rPh)
    {
        return *m_rPh;
    }
    return CT_PhoneticRun::default_instance();
    }

    bool CT_Rst::ChildGroup_1::has_phoneticPr() const
    {    
    return m_has_phoneticPr;
    }

    CT_PhoneticPr* CT_Rst::ChildGroup_1::mutable_phoneticPr()
    {    
    
    m_has_r = false;
    
    if (m_r)
    {
        delete m_r;
        m_r = NULL;
    }
    ;
    
    m_has_rPh = false;
    
    if (m_rPh)
    {
        delete m_rPh;
        m_rPh = NULL;
    }
    ;
    
    m_has_phoneticPr = true;
    if (!m_phoneticPr)
    {
        m_phoneticPr = new CT_PhoneticPr();
    }
    return m_phoneticPr;
    }

    const CT_PhoneticPr& CT_Rst::ChildGroup_1::get_phoneticPr() const
    {    
    if (m_phoneticPr)
    {
        return *m_phoneticPr;
    }
    return CT_PhoneticPr::default_instance();
    }

CT_Rst* CT_Rst::default_instance_ = NULL;

    // CT_PhoneticPr
    CT_PhoneticPr::CT_PhoneticPr()
    :m_has_fontId_attr(false),
    m_fontId_attr(NULL),
    m_has_type_attr(false),
    m_type_attr(NULL),
    m_has_alignment_attr(false),
    m_alignment_attr(NULL)
    {
    }
    CT_PhoneticPr::~CT_PhoneticPr()
{
    clear();    }
    void CT_PhoneticPr::clear()
    {    
    m_has_fontId_attr = false;
    
    if (m_fontId_attr)
    {
        delete m_fontId_attr;
        m_fontId_attr = NULL;
    }
    
    
    m_has_type_attr = false;
    
    if (m_type_attr)
    {
        delete m_type_attr;
        m_type_attr = NULL;
    }
    
    
    m_has_alignment_attr = false;
    
    if (m_alignment_attr)
    {
        delete m_alignment_attr;
        m_alignment_attr = NULL;
    }
    
    }

    void CT_PhoneticPr::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_fontId_attr)
    {
        m_fontId_attr->toXmlAttr("fontId", _outStream);
    }
    
    
    if (m_has_type_attr)
    {
        m_type_attr->toXmlAttr("type", _outStream);
    }
    
    
    if (m_has_alignment_attr)
    {
        m_alignment_attr->toXmlAttr("alignment", _outStream);
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_PhoneticPr& CT_PhoneticPr::default_instance()
    {    
    if (!CT_PhoneticPr::default_instance_)
    {
        CT_PhoneticPr::default_instance_ = new CT_PhoneticPr();
    }
    return *CT_PhoneticPr::default_instance_;
    }

    bool CT_PhoneticPr::has_fontId_attr() const
    {    
    return m_has_fontId_attr;
    }

    void CT_PhoneticPr::set_fontId_attr(const ST_FontId& _fontId_attr)
    {    
    m_has_fontId_attr = true;
    m_fontId_attr = new ST_FontId(_fontId_attr);
    }

    const ST_FontId& CT_PhoneticPr::get_fontId_attr() const
    {    
    if (m_fontId_attr)
    {
        return *m_fontId_attr;
    }
    return ST_FontId::default_instance();
    }

    bool CT_PhoneticPr::has_type_attr() const
    {    
    return m_has_type_attr;
    }

    void CT_PhoneticPr::set_type_attr(const ST_PhoneticType& _type_attr)
    {    
    m_has_type_attr = true;
    m_type_attr = new ST_PhoneticType(_type_attr);
    }

    const ST_PhoneticType& CT_PhoneticPr::get_type_attr() const
    {    
    if (m_type_attr)
    {
        return *m_type_attr;
    }
    return ST_PhoneticType::default_instance();
    }

    bool CT_PhoneticPr::has_alignment_attr() const
    {    
    return m_has_alignment_attr;
    }

    void CT_PhoneticPr::set_alignment_attr(const ST_PhoneticAlignment& _alignment_attr)
    {    
    m_has_alignment_attr = true;
    m_alignment_attr = new ST_PhoneticAlignment(_alignment_attr);
    }

    const ST_PhoneticAlignment& CT_PhoneticPr::get_alignment_attr() const
    {    
    if (m_alignment_attr)
    {
        return *m_alignment_attr;
    }
    return ST_PhoneticAlignment::default_instance();
    }

CT_PhoneticPr* CT_PhoneticPr::default_instance_ = NULL;

    // CT_RevisionHeaders
    CT_RevisionHeaders::CT_RevisionHeaders()
    :m_has_guid_attr(false),
    m_guid_attr(NULL),
    m_has_lastGuid_attr(false),
    m_lastGuid_attr(NULL),
    m_has_shared_attr(false),
    m_shared_attr(false),
    m_has_diskRevisions_attr(false),
    m_diskRevisions_attr(false),
    m_has_history_attr(false),
    m_history_attr(false),
    m_has_trackRevisions_attr(false),
    m_trackRevisions_attr(false),
    m_has_exclusive_attr(false),
    m_exclusive_attr(false),
    m_has_revisionId_attr(false),
    m_revisionId_attr(0),
    m_has_version_attr(false),
    m_version_attr(0),
    m_has_keepChangeHistory_attr(false),
    m_keepChangeHistory_attr(false),
    m_has_protected_attr(false),
    m_protected_attr(false),
    m_has_preserveHistory_attr(false),
    m_preserveHistory_attr(0)
    {
    }
    CT_RevisionHeaders::~CT_RevisionHeaders()
{
    clear();    }
    CT_RevisionHeader* CT_RevisionHeaders::add_header()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_RevisionHeader* pNewChild = pChildGroup->mutable_header();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_RevisionHeaders::clear()
    {    
    m_has_guid_attr = false;
    
    if (m_guid_attr)
    {
        delete m_guid_attr;
        m_guid_attr = NULL;
    }
    
    
    m_has_lastGuid_attr = false;
    
    if (m_lastGuid_attr)
    {
        delete m_lastGuid_attr;
        m_lastGuid_attr = NULL;
    }
    
    
    m_has_shared_attr = false;
    m_shared_attr = false;
    
    m_has_diskRevisions_attr = false;
    m_diskRevisions_attr = false;
    
    m_has_history_attr = false;
    m_history_attr = false;
    
    m_has_trackRevisions_attr = false;
    m_trackRevisions_attr = false;
    
    m_has_exclusive_attr = false;
    m_exclusive_attr = false;
    
    m_has_revisionId_attr = false;
    m_revisionId_attr = 0;
    
    m_has_version_attr = false;
    m_version_attr = 0;
    
    m_has_keepChangeHistory_attr = false;
    m_keepChangeHistory_attr = false;
    
    m_has_protected_attr = false;
    m_protected_attr = false;
    
    m_has_preserveHistory_attr = false;
    m_preserveHistory_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_RevisionHeaders::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_guid_attr)
    {
        m_guid_attr->toXmlAttr("guid", _outStream);
    }
    
    
    if (m_has_lastGuid_attr)
    {
        m_lastGuid_attr->toXmlAttr("lastGuid", _outStream);
    }
    
    
    if (m_has_shared_attr)
    {
        _outStream << " " << "shared" << "=\"" << XSD::XMLBooleanStr(m_shared_attr) << "\"";
    }
    
    
    if (m_has_diskRevisions_attr)
    {
        _outStream << " " << "diskRevisions" << "=\"" << XSD::XMLBooleanStr(m_diskRevisions_attr) << "\"";
    }
    
    
    if (m_has_history_attr)
    {
        _outStream << " " << "history" << "=\"" << XSD::XMLBooleanStr(m_history_attr) << "\"";
    }
    
    
    if (m_has_trackRevisions_attr)
    {
        _outStream << " " << "trackRevisions" << "=\"" << XSD::XMLBooleanStr(m_trackRevisions_attr) << "\"";
    }
    
    
    if (m_has_exclusive_attr)
    {
        _outStream << " " << "exclusive" << "=\"" << XSD::XMLBooleanStr(m_exclusive_attr) << "\"";
    }
    
    
    if (m_has_revisionId_attr)
    {
        _outStream << " " << "revisionId" << "=\"" << m_revisionId_attr << "\"";
    }
    
    
    if (m_has_version_attr)
    {
        _outStream << " " << "version" << "=\"" << m_version_attr << "\"";
    }
    
    
    if (m_has_keepChangeHistory_attr)
    {
        _outStream << " " << "keepChangeHistory" << "=\"" << XSD::XMLBooleanStr(m_keepChangeHistory_attr) << "\"";
    }
    
    
    if (m_has_protected_attr)
    {
        _outStream << " " << "protected" << "=\"" << XSD::XMLBooleanStr(m_protected_attr) << "\"";
    }
    
    
    if (m_has_preserveHistory_attr)
    {
        _outStream << " " << "preserveHistory" << "=\"" << m_preserveHistory_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_header())
            {
                (*iter)->get_header().toXmlElem("main:header", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_RevisionHeaders& CT_RevisionHeaders::default_instance()
    {    
    if (!CT_RevisionHeaders::default_instance_)
    {
        CT_RevisionHeaders::default_instance_ = new CT_RevisionHeaders();
    }
    return *CT_RevisionHeaders::default_instance_;
    }

    bool CT_RevisionHeaders::has_guid_attr() const
    {    
    return m_has_guid_attr;
    }

    void CT_RevisionHeaders::set_guid_attr(const ns_s::ST_Guid& _guid_attr)
    {    
    m_has_guid_attr = true;
    m_guid_attr = new ns_s::ST_Guid(_guid_attr);
    }

    const ns_s::ST_Guid& CT_RevisionHeaders::get_guid_attr() const
    {    
    if (m_guid_attr)
    {
        return *m_guid_attr;
    }
    return ns_s::ST_Guid::default_instance();
    }

    bool CT_RevisionHeaders::has_lastGuid_attr() const
    {    
    return m_has_lastGuid_attr;
    }

    void CT_RevisionHeaders::set_lastGuid_attr(const ns_s::ST_Guid& _lastGuid_attr)
    {    
    m_has_lastGuid_attr = true;
    m_lastGuid_attr = new ns_s::ST_Guid(_lastGuid_attr);
    }

    const ns_s::ST_Guid& CT_RevisionHeaders::get_lastGuid_attr() const
    {    
    if (m_lastGuid_attr)
    {
        return *m_lastGuid_attr;
    }
    return ns_s::ST_Guid::default_instance();
    }

    bool CT_RevisionHeaders::has_shared_attr() const
    {    
    return m_has_shared_attr;
    }

    void CT_RevisionHeaders::set_shared_attr(const XSD::boolean_& _shared_attr)
    {    
    m_has_shared_attr = true;
    m_shared_attr = _shared_attr;
    }

    const XSD::boolean_& CT_RevisionHeaders::get_shared_attr() const
    {    
    return m_shared_attr;
    }

    bool CT_RevisionHeaders::has_diskRevisions_attr() const
    {    
    return m_has_diskRevisions_attr;
    }

    void CT_RevisionHeaders::set_diskRevisions_attr(const XSD::boolean_& _diskRevisions_attr)
    {    
    m_has_diskRevisions_attr = true;
    m_diskRevisions_attr = _diskRevisions_attr;
    }

    const XSD::boolean_& CT_RevisionHeaders::get_diskRevisions_attr() const
    {    
    return m_diskRevisions_attr;
    }

    bool CT_RevisionHeaders::has_history_attr() const
    {    
    return m_has_history_attr;
    }

    void CT_RevisionHeaders::set_history_attr(const XSD::boolean_& _history_attr)
    {    
    m_has_history_attr = true;
    m_history_attr = _history_attr;
    }

    const XSD::boolean_& CT_RevisionHeaders::get_history_attr() const
    {    
    return m_history_attr;
    }

    bool CT_RevisionHeaders::has_trackRevisions_attr() const
    {    
    return m_has_trackRevisions_attr;
    }

    void CT_RevisionHeaders::set_trackRevisions_attr(const XSD::boolean_& _trackRevisions_attr)
    {    
    m_has_trackRevisions_attr = true;
    m_trackRevisions_attr = _trackRevisions_attr;
    }

    const XSD::boolean_& CT_RevisionHeaders::get_trackRevisions_attr() const
    {    
    return m_trackRevisions_attr;
    }

    bool CT_RevisionHeaders::has_exclusive_attr() const
    {    
    return m_has_exclusive_attr;
    }

    void CT_RevisionHeaders::set_exclusive_attr(const XSD::boolean_& _exclusive_attr)
    {    
    m_has_exclusive_attr = true;
    m_exclusive_attr = _exclusive_attr;
    }

    const XSD::boolean_& CT_RevisionHeaders::get_exclusive_attr() const
    {    
    return m_exclusive_attr;
    }

    bool CT_RevisionHeaders::has_revisionId_attr() const
    {    
    return m_has_revisionId_attr;
    }

    void CT_RevisionHeaders::set_revisionId_attr(const XSD::unsignedInt_& _revisionId_attr)
    {    
    m_has_revisionId_attr = true;
    m_revisionId_attr = _revisionId_attr;
    }

    const XSD::unsignedInt_& CT_RevisionHeaders::get_revisionId_attr() const
    {    
    return m_revisionId_attr;
    }

    bool CT_RevisionHeaders::has_version_attr() const
    {    
    return m_has_version_attr;
    }

    void CT_RevisionHeaders::set_version_attr(const XSD::int_& _version_attr)
    {    
    m_has_version_attr = true;
    m_version_attr = _version_attr;
    }

    const XSD::int_& CT_RevisionHeaders::get_version_attr() const
    {    
    return m_version_attr;
    }

    bool CT_RevisionHeaders::has_keepChangeHistory_attr() const
    {    
    return m_has_keepChangeHistory_attr;
    }

    void CT_RevisionHeaders::set_keepChangeHistory_attr(const XSD::boolean_& _keepChangeHistory_attr)
    {    
    m_has_keepChangeHistory_attr = true;
    m_keepChangeHistory_attr = _keepChangeHistory_attr;
    }

    const XSD::boolean_& CT_RevisionHeaders::get_keepChangeHistory_attr() const
    {    
    return m_keepChangeHistory_attr;
    }

    bool CT_RevisionHeaders::has_protected_attr() const
    {    
    return m_has_protected_attr;
    }

    void CT_RevisionHeaders::set_protected_attr(const XSD::boolean_& _protected_attr)
    {    
    m_has_protected_attr = true;
    m_protected_attr = _protected_attr;
    }

    const XSD::boolean_& CT_RevisionHeaders::get_protected_attr() const
    {    
    return m_protected_attr;
    }

    bool CT_RevisionHeaders::has_preserveHistory_attr() const
    {    
    return m_has_preserveHistory_attr;
    }

    void CT_RevisionHeaders::set_preserveHistory_attr(const XSD::unsignedInt_& _preserveHistory_attr)
    {    
    m_has_preserveHistory_attr = true;
    m_preserveHistory_attr = _preserveHistory_attr;
    }

    const XSD::unsignedInt_& CT_RevisionHeaders::get_preserveHistory_attr() const
    {    
    return m_preserveHistory_attr;
    }


    // CT_RevisionHeaders::ChildGroup_1
    CT_RevisionHeaders::ChildGroup_1::ChildGroup_1()
    :m_has_header(false),
    m_header(NULL)
    {
    }
    bool CT_RevisionHeaders::ChildGroup_1::has_header() const
    {    
    return m_has_header;
    }

    CT_RevisionHeader* CT_RevisionHeaders::ChildGroup_1::mutable_header()
    {    
    
    m_has_header = true;
    if (!m_header)
    {
        m_header = new CT_RevisionHeader();
    }
    return m_header;
    }

    const CT_RevisionHeader& CT_RevisionHeaders::ChildGroup_1::get_header() const
    {    
    if (m_header)
    {
        return *m_header;
    }
    return CT_RevisionHeader::default_instance();
    }

CT_RevisionHeaders* CT_RevisionHeaders::default_instance_ = NULL;

    // CT_Revisions
    CT_Revisions::CT_Revisions()

    {
    }
    CT_Revisions::~CT_Revisions()
{
    clear();    }
    CT_RevisionRowColumn* CT_Revisions::add_rrc()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_RevisionRowColumn* pNewChild = pChildGroup->mutable_rrc();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_RevisionMove* CT_Revisions::add_rm()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_RevisionMove* pNewChild = pChildGroup->mutable_rm();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_RevisionCustomView* CT_Revisions::add_rcv()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_RevisionCustomView* pNewChild = pChildGroup->mutable_rcv();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_RevisionSheetRename* CT_Revisions::add_rsnm()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_RevisionSheetRename* pNewChild = pChildGroup->mutable_rsnm();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_RevisionInsertSheet* CT_Revisions::add_ris()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_RevisionInsertSheet* pNewChild = pChildGroup->mutable_ris();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_RevisionCellChange* CT_Revisions::add_rcc()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_RevisionCellChange* pNewChild = pChildGroup->mutable_rcc();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_RevisionFormatting* CT_Revisions::add_rfmt()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_RevisionFormatting* pNewChild = pChildGroup->mutable_rfmt();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_RevisionAutoFormatting* CT_Revisions::add_raf()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_RevisionAutoFormatting* pNewChild = pChildGroup->mutable_raf();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_RevisionDefinedName* CT_Revisions::add_rdn()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_RevisionDefinedName* pNewChild = pChildGroup->mutable_rdn();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_RevisionComment* CT_Revisions::add_rcmt()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_RevisionComment* pNewChild = pChildGroup->mutable_rcmt();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_RevisionQueryTableField* CT_Revisions::add_rqt()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_RevisionQueryTableField* pNewChild = pChildGroup->mutable_rqt();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_RevisionConflict* CT_Revisions::add_rcft()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_RevisionConflict* pNewChild = pChildGroup->mutable_rcft();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_Revisions::clear()
    {    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_Revisions::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_rrc())
            {
                (*iter)->get_rrc().toXmlElem("main:rrc", "", _outStream);
            }
            else if ((*iter)->has_rm())
            {
                (*iter)->get_rm().toXmlElem("main:rm", "", _outStream);
            }
            else if ((*iter)->has_rcv())
            {
                (*iter)->get_rcv().toXmlElem("main:rcv", "", _outStream);
            }
            else if ((*iter)->has_rsnm())
            {
                (*iter)->get_rsnm().toXmlElem("main:rsnm", "", _outStream);
            }
            else if ((*iter)->has_ris())
            {
                (*iter)->get_ris().toXmlElem("main:ris", "", _outStream);
            }
            else if ((*iter)->has_rcc())
            {
                (*iter)->get_rcc().toXmlElem("main:rcc", "", _outStream);
            }
            else if ((*iter)->has_rfmt())
            {
                (*iter)->get_rfmt().toXmlElem("main:rfmt", "", _outStream);
            }
            else if ((*iter)->has_raf())
            {
                (*iter)->get_raf().toXmlElem("main:raf", "", _outStream);
            }
            else if ((*iter)->has_rdn())
            {
                (*iter)->get_rdn().toXmlElem("main:rdn", "", _outStream);
            }
            else if ((*iter)->has_rcmt())
            {
                (*iter)->get_rcmt().toXmlElem("main:rcmt", "", _outStream);
            }
            else if ((*iter)->has_rqt())
            {
                (*iter)->get_rqt().toXmlElem("main:rqt", "", _outStream);
            }
            else if ((*iter)->has_rcft())
            {
                (*iter)->get_rcft().toXmlElem("main:rcft", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_Revisions& CT_Revisions::default_instance()
    {    
    if (!CT_Revisions::default_instance_)
    {
        CT_Revisions::default_instance_ = new CT_Revisions();
    }
    return *CT_Revisions::default_instance_;
    }


    // CT_Revisions::ChildGroup_1
    CT_Revisions::ChildGroup_1::ChildGroup_1()
    :m_has_rrc(false),
    m_rrc(NULL),
    m_has_rm(false),
    m_rm(NULL),
    m_has_rcv(false),
    m_rcv(NULL),
    m_has_rsnm(false),
    m_rsnm(NULL),
    m_has_ris(false),
    m_ris(NULL),
    m_has_rcc(false),
    m_rcc(NULL),
    m_has_rfmt(false),
    m_rfmt(NULL),
    m_has_raf(false),
    m_raf(NULL),
    m_has_rdn(false),
    m_rdn(NULL),
    m_has_rcmt(false),
    m_rcmt(NULL),
    m_has_rqt(false),
    m_rqt(NULL),
    m_has_rcft(false),
    m_rcft(NULL)
    {
    }
    bool CT_Revisions::ChildGroup_1::has_rrc() const
    {    
    return m_has_rrc;
    }

    CT_RevisionRowColumn* CT_Revisions::ChildGroup_1::mutable_rrc()
    {    
    
    m_has_rm = false;
    
    if (m_rm)
    {
        delete m_rm;
        m_rm = NULL;
    }
    ;
    
    m_has_rcv = false;
    
    if (m_rcv)
    {
        delete m_rcv;
        m_rcv = NULL;
    }
    ;
    
    m_has_rsnm = false;
    
    if (m_rsnm)
    {
        delete m_rsnm;
        m_rsnm = NULL;
    }
    ;
    
    m_has_ris = false;
    
    if (m_ris)
    {
        delete m_ris;
        m_ris = NULL;
    }
    ;
    
    m_has_rcc = false;
    
    if (m_rcc)
    {
        delete m_rcc;
        m_rcc = NULL;
    }
    ;
    
    m_has_rfmt = false;
    
    if (m_rfmt)
    {
        delete m_rfmt;
        m_rfmt = NULL;
    }
    ;
    
    m_has_raf = false;
    
    if (m_raf)
    {
        delete m_raf;
        m_raf = NULL;
    }
    ;
    
    m_has_rdn = false;
    
    if (m_rdn)
    {
        delete m_rdn;
        m_rdn = NULL;
    }
    ;
    
    m_has_rcmt = false;
    
    if (m_rcmt)
    {
        delete m_rcmt;
        m_rcmt = NULL;
    }
    ;
    
    m_has_rqt = false;
    
    if (m_rqt)
    {
        delete m_rqt;
        m_rqt = NULL;
    }
    ;
    
    m_has_rcft = false;
    
    if (m_rcft)
    {
        delete m_rcft;
        m_rcft = NULL;
    }
    ;
    
    m_has_rrc = true;
    if (!m_rrc)
    {
        m_rrc = new CT_RevisionRowColumn();
    }
    return m_rrc;
    }

    const CT_RevisionRowColumn& CT_Revisions::ChildGroup_1::get_rrc() const
    {    
    if (m_rrc)
    {
        return *m_rrc;
    }
    return CT_RevisionRowColumn::default_instance();
    }

    bool CT_Revisions::ChildGroup_1::has_rm() const
    {    
    return m_has_rm;
    }

    CT_RevisionMove* CT_Revisions::ChildGroup_1::mutable_rm()
    {    
    
    m_has_rrc = false;
    
    if (m_rrc)
    {
        delete m_rrc;
        m_rrc = NULL;
    }
    ;
    
    m_has_rcv = false;
    
    if (m_rcv)
    {
        delete m_rcv;
        m_rcv = NULL;
    }
    ;
    
    m_has_rsnm = false;
    
    if (m_rsnm)
    {
        delete m_rsnm;
        m_rsnm = NULL;
    }
    ;
    
    m_has_ris = false;
    
    if (m_ris)
    {
        delete m_ris;
        m_ris = NULL;
    }
    ;
    
    m_has_rcc = false;
    
    if (m_rcc)
    {
        delete m_rcc;
        m_rcc = NULL;
    }
    ;
    
    m_has_rfmt = false;
    
    if (m_rfmt)
    {
        delete m_rfmt;
        m_rfmt = NULL;
    }
    ;
    
    m_has_raf = false;
    
    if (m_raf)
    {
        delete m_raf;
        m_raf = NULL;
    }
    ;
    
    m_has_rdn = false;
    
    if (m_rdn)
    {
        delete m_rdn;
        m_rdn = NULL;
    }
    ;
    
    m_has_rcmt = false;
    
    if (m_rcmt)
    {
        delete m_rcmt;
        m_rcmt = NULL;
    }
    ;
    
    m_has_rqt = false;
    
    if (m_rqt)
    {
        delete m_rqt;
        m_rqt = NULL;
    }
    ;
    
    m_has_rcft = false;
    
    if (m_rcft)
    {
        delete m_rcft;
        m_rcft = NULL;
    }
    ;
    
    m_has_rm = true;
    if (!m_rm)
    {
        m_rm = new CT_RevisionMove();
    }
    return m_rm;
    }

    const CT_RevisionMove& CT_Revisions::ChildGroup_1::get_rm() const
    {    
    if (m_rm)
    {
        return *m_rm;
    }
    return CT_RevisionMove::default_instance();
    }

    bool CT_Revisions::ChildGroup_1::has_rcv() const
    {    
    return m_has_rcv;
    }

    CT_RevisionCustomView* CT_Revisions::ChildGroup_1::mutable_rcv()
    {    
    
    m_has_rrc = false;
    
    if (m_rrc)
    {
        delete m_rrc;
        m_rrc = NULL;
    }
    ;
    
    m_has_rm = false;
    
    if (m_rm)
    {
        delete m_rm;
        m_rm = NULL;
    }
    ;
    
    m_has_rsnm = false;
    
    if (m_rsnm)
    {
        delete m_rsnm;
        m_rsnm = NULL;
    }
    ;
    
    m_has_ris = false;
    
    if (m_ris)
    {
        delete m_ris;
        m_ris = NULL;
    }
    ;
    
    m_has_rcc = false;
    
    if (m_rcc)
    {
        delete m_rcc;
        m_rcc = NULL;
    }
    ;
    
    m_has_rfmt = false;
    
    if (m_rfmt)
    {
        delete m_rfmt;
        m_rfmt = NULL;
    }
    ;
    
    m_has_raf = false;
    
    if (m_raf)
    {
        delete m_raf;
        m_raf = NULL;
    }
    ;
    
    m_has_rdn = false;
    
    if (m_rdn)
    {
        delete m_rdn;
        m_rdn = NULL;
    }
    ;
    
    m_has_rcmt = false;
    
    if (m_rcmt)
    {
        delete m_rcmt;
        m_rcmt = NULL;
    }
    ;
    
    m_has_rqt = false;
    
    if (m_rqt)
    {
        delete m_rqt;
        m_rqt = NULL;
    }
    ;
    
    m_has_rcft = false;
    
    if (m_rcft)
    {
        delete m_rcft;
        m_rcft = NULL;
    }
    ;
    
    m_has_rcv = true;
    if (!m_rcv)
    {
        m_rcv = new CT_RevisionCustomView();
    }
    return m_rcv;
    }

    const CT_RevisionCustomView& CT_Revisions::ChildGroup_1::get_rcv() const
    {    
    if (m_rcv)
    {
        return *m_rcv;
    }
    return CT_RevisionCustomView::default_instance();
    }

    bool CT_Revisions::ChildGroup_1::has_rsnm() const
    {    
    return m_has_rsnm;
    }

    CT_RevisionSheetRename* CT_Revisions::ChildGroup_1::mutable_rsnm()
    {    
    
    m_has_rrc = false;
    
    if (m_rrc)
    {
        delete m_rrc;
        m_rrc = NULL;
    }
    ;
    
    m_has_rm = false;
    
    if (m_rm)
    {
        delete m_rm;
        m_rm = NULL;
    }
    ;
    
    m_has_rcv = false;
    
    if (m_rcv)
    {
        delete m_rcv;
        m_rcv = NULL;
    }
    ;
    
    m_has_ris = false;
    
    if (m_ris)
    {
        delete m_ris;
        m_ris = NULL;
    }
    ;
    
    m_has_rcc = false;
    
    if (m_rcc)
    {
        delete m_rcc;
        m_rcc = NULL;
    }
    ;
    
    m_has_rfmt = false;
    
    if (m_rfmt)
    {
        delete m_rfmt;
        m_rfmt = NULL;
    }
    ;
    
    m_has_raf = false;
    
    if (m_raf)
    {
        delete m_raf;
        m_raf = NULL;
    }
    ;
    
    m_has_rdn = false;
    
    if (m_rdn)
    {
        delete m_rdn;
        m_rdn = NULL;
    }
    ;
    
    m_has_rcmt = false;
    
    if (m_rcmt)
    {
        delete m_rcmt;
        m_rcmt = NULL;
    }
    ;
    
    m_has_rqt = false;
    
    if (m_rqt)
    {
        delete m_rqt;
        m_rqt = NULL;
    }
    ;
    
    m_has_rcft = false;
    
    if (m_rcft)
    {
        delete m_rcft;
        m_rcft = NULL;
    }
    ;
    
    m_has_rsnm = true;
    if (!m_rsnm)
    {
        m_rsnm = new CT_RevisionSheetRename();
    }
    return m_rsnm;
    }

    const CT_RevisionSheetRename& CT_Revisions::ChildGroup_1::get_rsnm() const
    {    
    if (m_rsnm)
    {
        return *m_rsnm;
    }
    return CT_RevisionSheetRename::default_instance();
    }

    bool CT_Revisions::ChildGroup_1::has_ris() const
    {    
    return m_has_ris;
    }

    CT_RevisionInsertSheet* CT_Revisions::ChildGroup_1::mutable_ris()
    {    
    
    m_has_rrc = false;
    
    if (m_rrc)
    {
        delete m_rrc;
        m_rrc = NULL;
    }
    ;
    
    m_has_rm = false;
    
    if (m_rm)
    {
        delete m_rm;
        m_rm = NULL;
    }
    ;
    
    m_has_rcv = false;
    
    if (m_rcv)
    {
        delete m_rcv;
        m_rcv = NULL;
    }
    ;
    
    m_has_rsnm = false;
    
    if (m_rsnm)
    {
        delete m_rsnm;
        m_rsnm = NULL;
    }
    ;
    
    m_has_rcc = false;
    
    if (m_rcc)
    {
        delete m_rcc;
        m_rcc = NULL;
    }
    ;
    
    m_has_rfmt = false;
    
    if (m_rfmt)
    {
        delete m_rfmt;
        m_rfmt = NULL;
    }
    ;
    
    m_has_raf = false;
    
    if (m_raf)
    {
        delete m_raf;
        m_raf = NULL;
    }
    ;
    
    m_has_rdn = false;
    
    if (m_rdn)
    {
        delete m_rdn;
        m_rdn = NULL;
    }
    ;
    
    m_has_rcmt = false;
    
    if (m_rcmt)
    {
        delete m_rcmt;
        m_rcmt = NULL;
    }
    ;
    
    m_has_rqt = false;
    
    if (m_rqt)
    {
        delete m_rqt;
        m_rqt = NULL;
    }
    ;
    
    m_has_rcft = false;
    
    if (m_rcft)
    {
        delete m_rcft;
        m_rcft = NULL;
    }
    ;
    
    m_has_ris = true;
    if (!m_ris)
    {
        m_ris = new CT_RevisionInsertSheet();
    }
    return m_ris;
    }

    const CT_RevisionInsertSheet& CT_Revisions::ChildGroup_1::get_ris() const
    {    
    if (m_ris)
    {
        return *m_ris;
    }
    return CT_RevisionInsertSheet::default_instance();
    }

    bool CT_Revisions::ChildGroup_1::has_rcc() const
    {    
    return m_has_rcc;
    }

    CT_RevisionCellChange* CT_Revisions::ChildGroup_1::mutable_rcc()
    {    
    
    m_has_rrc = false;
    
    if (m_rrc)
    {
        delete m_rrc;
        m_rrc = NULL;
    }
    ;
    
    m_has_rm = false;
    
    if (m_rm)
    {
        delete m_rm;
        m_rm = NULL;
    }
    ;
    
    m_has_rcv = false;
    
    if (m_rcv)
    {
        delete m_rcv;
        m_rcv = NULL;
    }
    ;
    
    m_has_rsnm = false;
    
    if (m_rsnm)
    {
        delete m_rsnm;
        m_rsnm = NULL;
    }
    ;
    
    m_has_ris = false;
    
    if (m_ris)
    {
        delete m_ris;
        m_ris = NULL;
    }
    ;
    
    m_has_rfmt = false;
    
    if (m_rfmt)
    {
        delete m_rfmt;
        m_rfmt = NULL;
    }
    ;
    
    m_has_raf = false;
    
    if (m_raf)
    {
        delete m_raf;
        m_raf = NULL;
    }
    ;
    
    m_has_rdn = false;
    
    if (m_rdn)
    {
        delete m_rdn;
        m_rdn = NULL;
    }
    ;
    
    m_has_rcmt = false;
    
    if (m_rcmt)
    {
        delete m_rcmt;
        m_rcmt = NULL;
    }
    ;
    
    m_has_rqt = false;
    
    if (m_rqt)
    {
        delete m_rqt;
        m_rqt = NULL;
    }
    ;
    
    m_has_rcft = false;
    
    if (m_rcft)
    {
        delete m_rcft;
        m_rcft = NULL;
    }
    ;
    
    m_has_rcc = true;
    if (!m_rcc)
    {
        m_rcc = new CT_RevisionCellChange();
    }
    return m_rcc;
    }

    const CT_RevisionCellChange& CT_Revisions::ChildGroup_1::get_rcc() const
    {    
    if (m_rcc)
    {
        return *m_rcc;
    }
    return CT_RevisionCellChange::default_instance();
    }

    bool CT_Revisions::ChildGroup_1::has_rfmt() const
    {    
    return m_has_rfmt;
    }

    CT_RevisionFormatting* CT_Revisions::ChildGroup_1::mutable_rfmt()
    {    
    
    m_has_rrc = false;
    
    if (m_rrc)
    {
        delete m_rrc;
        m_rrc = NULL;
    }
    ;
    
    m_has_rm = false;
    
    if (m_rm)
    {
        delete m_rm;
        m_rm = NULL;
    }
    ;
    
    m_has_rcv = false;
    
    if (m_rcv)
    {
        delete m_rcv;
        m_rcv = NULL;
    }
    ;
    
    m_has_rsnm = false;
    
    if (m_rsnm)
    {
        delete m_rsnm;
        m_rsnm = NULL;
    }
    ;
    
    m_has_ris = false;
    
    if (m_ris)
    {
        delete m_ris;
        m_ris = NULL;
    }
    ;
    
    m_has_rcc = false;
    
    if (m_rcc)
    {
        delete m_rcc;
        m_rcc = NULL;
    }
    ;
    
    m_has_raf = false;
    
    if (m_raf)
    {
        delete m_raf;
        m_raf = NULL;
    }
    ;
    
    m_has_rdn = false;
    
    if (m_rdn)
    {
        delete m_rdn;
        m_rdn = NULL;
    }
    ;
    
    m_has_rcmt = false;
    
    if (m_rcmt)
    {
        delete m_rcmt;
        m_rcmt = NULL;
    }
    ;
    
    m_has_rqt = false;
    
    if (m_rqt)
    {
        delete m_rqt;
        m_rqt = NULL;
    }
    ;
    
    m_has_rcft = false;
    
    if (m_rcft)
    {
        delete m_rcft;
        m_rcft = NULL;
    }
    ;
    
    m_has_rfmt = true;
    if (!m_rfmt)
    {
        m_rfmt = new CT_RevisionFormatting();
    }
    return m_rfmt;
    }

    const CT_RevisionFormatting& CT_Revisions::ChildGroup_1::get_rfmt() const
    {    
    if (m_rfmt)
    {
        return *m_rfmt;
    }
    return CT_RevisionFormatting::default_instance();
    }

    bool CT_Revisions::ChildGroup_1::has_raf() const
    {    
    return m_has_raf;
    }

    CT_RevisionAutoFormatting* CT_Revisions::ChildGroup_1::mutable_raf()
    {    
    
    m_has_rrc = false;
    
    if (m_rrc)
    {
        delete m_rrc;
        m_rrc = NULL;
    }
    ;
    
    m_has_rm = false;
    
    if (m_rm)
    {
        delete m_rm;
        m_rm = NULL;
    }
    ;
    
    m_has_rcv = false;
    
    if (m_rcv)
    {
        delete m_rcv;
        m_rcv = NULL;
    }
    ;
    
    m_has_rsnm = false;
    
    if (m_rsnm)
    {
        delete m_rsnm;
        m_rsnm = NULL;
    }
    ;
    
    m_has_ris = false;
    
    if (m_ris)
    {
        delete m_ris;
        m_ris = NULL;
    }
    ;
    
    m_has_rcc = false;
    
    if (m_rcc)
    {
        delete m_rcc;
        m_rcc = NULL;
    }
    ;
    
    m_has_rfmt = false;
    
    if (m_rfmt)
    {
        delete m_rfmt;
        m_rfmt = NULL;
    }
    ;
    
    m_has_rdn = false;
    
    if (m_rdn)
    {
        delete m_rdn;
        m_rdn = NULL;
    }
    ;
    
    m_has_rcmt = false;
    
    if (m_rcmt)
    {
        delete m_rcmt;
        m_rcmt = NULL;
    }
    ;
    
    m_has_rqt = false;
    
    if (m_rqt)
    {
        delete m_rqt;
        m_rqt = NULL;
    }
    ;
    
    m_has_rcft = false;
    
    if (m_rcft)
    {
        delete m_rcft;
        m_rcft = NULL;
    }
    ;
    
    m_has_raf = true;
    if (!m_raf)
    {
        m_raf = new CT_RevisionAutoFormatting();
    }
    return m_raf;
    }

    const CT_RevisionAutoFormatting& CT_Revisions::ChildGroup_1::get_raf() const
    {    
    if (m_raf)
    {
        return *m_raf;
    }
    return CT_RevisionAutoFormatting::default_instance();
    }

    bool CT_Revisions::ChildGroup_1::has_rdn() const
    {    
    return m_has_rdn;
    }

    CT_RevisionDefinedName* CT_Revisions::ChildGroup_1::mutable_rdn()
    {    
    
    m_has_rrc = false;
    
    if (m_rrc)
    {
        delete m_rrc;
        m_rrc = NULL;
    }
    ;
    
    m_has_rm = false;
    
    if (m_rm)
    {
        delete m_rm;
        m_rm = NULL;
    }
    ;
    
    m_has_rcv = false;
    
    if (m_rcv)
    {
        delete m_rcv;
        m_rcv = NULL;
    }
    ;
    
    m_has_rsnm = false;
    
    if (m_rsnm)
    {
        delete m_rsnm;
        m_rsnm = NULL;
    }
    ;
    
    m_has_ris = false;
    
    if (m_ris)
    {
        delete m_ris;
        m_ris = NULL;
    }
    ;
    
    m_has_rcc = false;
    
    if (m_rcc)
    {
        delete m_rcc;
        m_rcc = NULL;
    }
    ;
    
    m_has_rfmt = false;
    
    if (m_rfmt)
    {
        delete m_rfmt;
        m_rfmt = NULL;
    }
    ;
    
    m_has_raf = false;
    
    if (m_raf)
    {
        delete m_raf;
        m_raf = NULL;
    }
    ;
    
    m_has_rcmt = false;
    
    if (m_rcmt)
    {
        delete m_rcmt;
        m_rcmt = NULL;
    }
    ;
    
    m_has_rqt = false;
    
    if (m_rqt)
    {
        delete m_rqt;
        m_rqt = NULL;
    }
    ;
    
    m_has_rcft = false;
    
    if (m_rcft)
    {
        delete m_rcft;
        m_rcft = NULL;
    }
    ;
    
    m_has_rdn = true;
    if (!m_rdn)
    {
        m_rdn = new CT_RevisionDefinedName();
    }
    return m_rdn;
    }

    const CT_RevisionDefinedName& CT_Revisions::ChildGroup_1::get_rdn() const
    {    
    if (m_rdn)
    {
        return *m_rdn;
    }
    return CT_RevisionDefinedName::default_instance();
    }

    bool CT_Revisions::ChildGroup_1::has_rcmt() const
    {    
    return m_has_rcmt;
    }

    CT_RevisionComment* CT_Revisions::ChildGroup_1::mutable_rcmt()
    {    
    
    m_has_rrc = false;
    
    if (m_rrc)
    {
        delete m_rrc;
        m_rrc = NULL;
    }
    ;
    
    m_has_rm = false;
    
    if (m_rm)
    {
        delete m_rm;
        m_rm = NULL;
    }
    ;
    
    m_has_rcv = false;
    
    if (m_rcv)
    {
        delete m_rcv;
        m_rcv = NULL;
    }
    ;
    
    m_has_rsnm = false;
    
    if (m_rsnm)
    {
        delete m_rsnm;
        m_rsnm = NULL;
    }
    ;
    
    m_has_ris = false;
    
    if (m_ris)
    {
        delete m_ris;
        m_ris = NULL;
    }
    ;
    
    m_has_rcc = false;
    
    if (m_rcc)
    {
        delete m_rcc;
        m_rcc = NULL;
    }
    ;
    
    m_has_rfmt = false;
    
    if (m_rfmt)
    {
        delete m_rfmt;
        m_rfmt = NULL;
    }
    ;
    
    m_has_raf = false;
    
    if (m_raf)
    {
        delete m_raf;
        m_raf = NULL;
    }
    ;
    
    m_has_rdn = false;
    
    if (m_rdn)
    {
        delete m_rdn;
        m_rdn = NULL;
    }
    ;
    
    m_has_rqt = false;
    
    if (m_rqt)
    {
        delete m_rqt;
        m_rqt = NULL;
    }
    ;
    
    m_has_rcft = false;
    
    if (m_rcft)
    {
        delete m_rcft;
        m_rcft = NULL;
    }
    ;
    
    m_has_rcmt = true;
    if (!m_rcmt)
    {
        m_rcmt = new CT_RevisionComment();
    }
    return m_rcmt;
    }

    const CT_RevisionComment& CT_Revisions::ChildGroup_1::get_rcmt() const
    {    
    if (m_rcmt)
    {
        return *m_rcmt;
    }
    return CT_RevisionComment::default_instance();
    }

    bool CT_Revisions::ChildGroup_1::has_rqt() const
    {    
    return m_has_rqt;
    }

    CT_RevisionQueryTableField* CT_Revisions::ChildGroup_1::mutable_rqt()
    {    
    
    m_has_rrc = false;
    
    if (m_rrc)
    {
        delete m_rrc;
        m_rrc = NULL;
    }
    ;
    
    m_has_rm = false;
    
    if (m_rm)
    {
        delete m_rm;
        m_rm = NULL;
    }
    ;
    
    m_has_rcv = false;
    
    if (m_rcv)
    {
        delete m_rcv;
        m_rcv = NULL;
    }
    ;
    
    m_has_rsnm = false;
    
    if (m_rsnm)
    {
        delete m_rsnm;
        m_rsnm = NULL;
    }
    ;
    
    m_has_ris = false;
    
    if (m_ris)
    {
        delete m_ris;
        m_ris = NULL;
    }
    ;
    
    m_has_rcc = false;
    
    if (m_rcc)
    {
        delete m_rcc;
        m_rcc = NULL;
    }
    ;
    
    m_has_rfmt = false;
    
    if (m_rfmt)
    {
        delete m_rfmt;
        m_rfmt = NULL;
    }
    ;
    
    m_has_raf = false;
    
    if (m_raf)
    {
        delete m_raf;
        m_raf = NULL;
    }
    ;
    
    m_has_rdn = false;
    
    if (m_rdn)
    {
        delete m_rdn;
        m_rdn = NULL;
    }
    ;
    
    m_has_rcmt = false;
    
    if (m_rcmt)
    {
        delete m_rcmt;
        m_rcmt = NULL;
    }
    ;
    
    m_has_rcft = false;
    
    if (m_rcft)
    {
        delete m_rcft;
        m_rcft = NULL;
    }
    ;
    
    m_has_rqt = true;
    if (!m_rqt)
    {
        m_rqt = new CT_RevisionQueryTableField();
    }
    return m_rqt;
    }

    const CT_RevisionQueryTableField& CT_Revisions::ChildGroup_1::get_rqt() const
    {    
    if (m_rqt)
    {
        return *m_rqt;
    }
    return CT_RevisionQueryTableField::default_instance();
    }

    bool CT_Revisions::ChildGroup_1::has_rcft() const
    {    
    return m_has_rcft;
    }

    CT_RevisionConflict* CT_Revisions::ChildGroup_1::mutable_rcft()
    {    
    
    m_has_rrc = false;
    
    if (m_rrc)
    {
        delete m_rrc;
        m_rrc = NULL;
    }
    ;
    
    m_has_rm = false;
    
    if (m_rm)
    {
        delete m_rm;
        m_rm = NULL;
    }
    ;
    
    m_has_rcv = false;
    
    if (m_rcv)
    {
        delete m_rcv;
        m_rcv = NULL;
    }
    ;
    
    m_has_rsnm = false;
    
    if (m_rsnm)
    {
        delete m_rsnm;
        m_rsnm = NULL;
    }
    ;
    
    m_has_ris = false;
    
    if (m_ris)
    {
        delete m_ris;
        m_ris = NULL;
    }
    ;
    
    m_has_rcc = false;
    
    if (m_rcc)
    {
        delete m_rcc;
        m_rcc = NULL;
    }
    ;
    
    m_has_rfmt = false;
    
    if (m_rfmt)
    {
        delete m_rfmt;
        m_rfmt = NULL;
    }
    ;
    
    m_has_raf = false;
    
    if (m_raf)
    {
        delete m_raf;
        m_raf = NULL;
    }
    ;
    
    m_has_rdn = false;
    
    if (m_rdn)
    {
        delete m_rdn;
        m_rdn = NULL;
    }
    ;
    
    m_has_rcmt = false;
    
    if (m_rcmt)
    {
        delete m_rcmt;
        m_rcmt = NULL;
    }
    ;
    
    m_has_rqt = false;
    
    if (m_rqt)
    {
        delete m_rqt;
        m_rqt = NULL;
    }
    ;
    
    m_has_rcft = true;
    if (!m_rcft)
    {
        m_rcft = new CT_RevisionConflict();
    }
    return m_rcft;
    }

    const CT_RevisionConflict& CT_Revisions::ChildGroup_1::get_rcft() const
    {    
    if (m_rcft)
    {
        return *m_rcft;
    }
    return CT_RevisionConflict::default_instance();
    }

CT_Revisions* CT_Revisions::default_instance_ = NULL;

    // CT_RevisionHeader
    CT_RevisionHeader::CT_RevisionHeader()
    :m_has_sheetIdMap(false),
    m_sheetIdMap(NULL),
    m_has_reviewedList(false),
    m_reviewedList(NULL),
    m_has_extLst(false),
    m_extLst(NULL),
    m_has_guid_attr(false),
    m_guid_attr(NULL),
    m_has_dateTime_attr(false),
    m_dateTime_attr(""),
    m_has_maxSheetId_attr(false),
    m_maxSheetId_attr(0),
    m_has_userName_attr(false),
    m_userName_attr(NULL),
    m_has_r_id_attr(false),
    m_r_id_attr(NULL),
    m_has_minRId_attr(false),
    m_minRId_attr(0),
    m_has_maxRId_attr(false),
    m_maxRId_attr(0)
    {
    }
    CT_RevisionHeader::~CT_RevisionHeader()
{
    clear();    }
    bool CT_RevisionHeader::has_sheetIdMap() const
    {    
    return m_has_sheetIdMap;
    }

    CT_SheetIdMap* CT_RevisionHeader::mutable_sheetIdMap()
    {    
    m_has_sheetIdMap = true;
    if (!m_sheetIdMap)
    {
        m_sheetIdMap = new CT_SheetIdMap();
    }
    return m_sheetIdMap;
    }

    const CT_SheetIdMap& CT_RevisionHeader::get_sheetIdMap() const
    {    
    if (m_sheetIdMap)
    {
        return *m_sheetIdMap;
    }
    return CT_SheetIdMap::default_instance();
    }

    bool CT_RevisionHeader::has_reviewedList() const
    {    
    return m_has_reviewedList;
    }

    CT_ReviewedRevisions* CT_RevisionHeader::mutable_reviewedList()
    {    
    m_has_reviewedList = true;
    if (!m_reviewedList)
    {
        m_reviewedList = new CT_ReviewedRevisions();
    }
    return m_reviewedList;
    }

    const CT_ReviewedRevisions& CT_RevisionHeader::get_reviewedList() const
    {    
    if (m_reviewedList)
    {
        return *m_reviewedList;
    }
    return CT_ReviewedRevisions::default_instance();
    }

    bool CT_RevisionHeader::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* CT_RevisionHeader::mutable_extLst()
    {    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& CT_RevisionHeader::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

    void CT_RevisionHeader::clear()
    {    
    m_has_guid_attr = false;
    
    if (m_guid_attr)
    {
        delete m_guid_attr;
        m_guid_attr = NULL;
    }
    
    
    m_has_dateTime_attr = false;
    m_dateTime_attr.clear();
    
    m_has_maxSheetId_attr = false;
    m_maxSheetId_attr = 0;
    
    m_has_userName_attr = false;
    
    if (m_userName_attr)
    {
        delete m_userName_attr;
        m_userName_attr = NULL;
    }
    
    
    m_has_r_id_attr = false;
    
    if (m_r_id_attr)
    {
        delete m_r_id_attr;
        m_r_id_attr = NULL;
    }
    
    
    m_has_minRId_attr = false;
    m_minRId_attr = 0;
    
    m_has_maxRId_attr = false;
    m_maxRId_attr = 0;
    }

    void CT_RevisionHeader::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_guid_attr)
    {
        m_guid_attr->toXmlAttr("guid", _outStream);
    }
    
    
    if (m_has_dateTime_attr)
    {
        _outStream << " " << "dateTime" << "=\"" << m_dateTime_attr << "\"";
    }
    
    
    if (m_has_maxSheetId_attr)
    {
        _outStream << " " << "maxSheetId" << "=\"" << m_maxSheetId_attr << "\"";
    }
    
    
    if (m_has_userName_attr)
    {
        m_userName_attr->toXmlAttr("userName", _outStream);
    }
    
    
    if (m_has_r_id_attr)
    {
        m_r_id_attr->toXmlAttr("r:id", _outStream);
    }
    
    
    if (m_has_minRId_attr)
    {
        _outStream << " " << "minRId" << "=\"" << m_minRId_attr << "\"";
    }
    
    
    if (m_has_maxRId_attr)
    {
        _outStream << " " << "maxRId" << "=\"" << m_maxRId_attr << "\"";
    }
    
            _outStream << ">";
            
    if (m_has_sheetIdMap)
    {
        m_sheetIdMap->toXmlElem("main:sheetIdMap", "", _outStream);;
    }
    
    if (m_has_reviewedList)
    {
        m_reviewedList->toXmlElem("main:reviewedList", "", _outStream);;
    }
    
    if (m_has_extLst)
    {
        m_extLst->toXmlElem("main:extLst", "", _outStream);;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_RevisionHeader& CT_RevisionHeader::default_instance()
    {    
    if (!CT_RevisionHeader::default_instance_)
    {
        CT_RevisionHeader::default_instance_ = new CT_RevisionHeader();
    }
    return *CT_RevisionHeader::default_instance_;
    }

    bool CT_RevisionHeader::has_guid_attr() const
    {    
    return m_has_guid_attr;
    }

    void CT_RevisionHeader::set_guid_attr(const ns_s::ST_Guid& _guid_attr)
    {    
    m_has_guid_attr = true;
    m_guid_attr = new ns_s::ST_Guid(_guid_attr);
    }

    const ns_s::ST_Guid& CT_RevisionHeader::get_guid_attr() const
    {    
    if (m_guid_attr)
    {
        return *m_guid_attr;
    }
    return ns_s::ST_Guid::default_instance();
    }

    bool CT_RevisionHeader::has_dateTime_attr() const
    {    
    return m_has_dateTime_attr;
    }

    void CT_RevisionHeader::set_dateTime_attr(const XSD::dateTime_& _dateTime_attr)
    {    
    m_has_dateTime_attr = true;
    m_dateTime_attr = _dateTime_attr;
    }

    const XSD::dateTime_& CT_RevisionHeader::get_dateTime_attr() const
    {    
    return m_dateTime_attr;
    }

    bool CT_RevisionHeader::has_maxSheetId_attr() const
    {    
    return m_has_maxSheetId_attr;
    }

    void CT_RevisionHeader::set_maxSheetId_attr(const XSD::unsignedInt_& _maxSheetId_attr)
    {    
    m_has_maxSheetId_attr = true;
    m_maxSheetId_attr = _maxSheetId_attr;
    }

    const XSD::unsignedInt_& CT_RevisionHeader::get_maxSheetId_attr() const
    {    
    return m_maxSheetId_attr;
    }

    bool CT_RevisionHeader::has_userName_attr() const
    {    
    return m_has_userName_attr;
    }

    void CT_RevisionHeader::set_userName_attr(const ns_s::ST_Xstring& _userName_attr)
    {    
    m_has_userName_attr = true;
    m_userName_attr = new ns_s::ST_Xstring(_userName_attr);
    }

    const ns_s::ST_Xstring& CT_RevisionHeader::get_userName_attr() const
    {    
    if (m_userName_attr)
    {
        return *m_userName_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_RevisionHeader::has_r_id_attr() const
    {    
    return m_has_r_id_attr;
    }

    void CT_RevisionHeader::set_r_id_attr(const ns_r::ST_RelationshipId& _r_id_attr)
    {    
    m_has_r_id_attr = true;
    m_r_id_attr = new ns_r::ST_RelationshipId(_r_id_attr);
    }

    const ns_r::ST_RelationshipId& CT_RevisionHeader::get_r_id_attr() const
    {    
    if (m_r_id_attr)
    {
        return *m_r_id_attr;
    }
    return ns_r::ST_RelationshipId::default_instance();
    }

    bool CT_RevisionHeader::has_minRId_attr() const
    {    
    return m_has_minRId_attr;
    }

    void CT_RevisionHeader::set_minRId_attr(const XSD::unsignedInt_& _minRId_attr)
    {    
    m_has_minRId_attr = true;
    m_minRId_attr = _minRId_attr;
    }

    const XSD::unsignedInt_& CT_RevisionHeader::get_minRId_attr() const
    {    
    return m_minRId_attr;
    }

    bool CT_RevisionHeader::has_maxRId_attr() const
    {    
    return m_has_maxRId_attr;
    }

    void CT_RevisionHeader::set_maxRId_attr(const XSD::unsignedInt_& _maxRId_attr)
    {    
    m_has_maxRId_attr = true;
    m_maxRId_attr = _maxRId_attr;
    }

    const XSD::unsignedInt_& CT_RevisionHeader::get_maxRId_attr() const
    {    
    return m_maxRId_attr;
    }

CT_RevisionHeader* CT_RevisionHeader::default_instance_ = NULL;

    // CT_SheetIdMap
    CT_SheetIdMap::CT_SheetIdMap()
    :m_has_count_attr(false),
    m_count_attr(0)
    {
    }
    CT_SheetIdMap::~CT_SheetIdMap()
{
    clear();    }
    CT_SheetId* CT_SheetIdMap::add_sheetId()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_SheetId* pNewChild = pChildGroup->mutable_sheetId();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_SheetIdMap::clear()
    {    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_SheetIdMap::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_sheetId())
            {
                (*iter)->get_sheetId().toXmlElem("main:sheetId", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_SheetIdMap& CT_SheetIdMap::default_instance()
    {    
    if (!CT_SheetIdMap::default_instance_)
    {
        CT_SheetIdMap::default_instance_ = new CT_SheetIdMap();
    }
    return *CT_SheetIdMap::default_instance_;
    }

    bool CT_SheetIdMap::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void CT_SheetIdMap::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& CT_SheetIdMap::get_count_attr() const
    {    
    return m_count_attr;
    }


    // CT_SheetIdMap::ChildGroup_1
    CT_SheetIdMap::ChildGroup_1::ChildGroup_1()
    :m_has_sheetId(false),
    m_sheetId(NULL)
    {
    }
    bool CT_SheetIdMap::ChildGroup_1::has_sheetId() const
    {    
    return m_has_sheetId;
    }

    CT_SheetId* CT_SheetIdMap::ChildGroup_1::mutable_sheetId()
    {    
    
    m_has_sheetId = true;
    if (!m_sheetId)
    {
        m_sheetId = new CT_SheetId();
    }
    return m_sheetId;
    }

    const CT_SheetId& CT_SheetIdMap::ChildGroup_1::get_sheetId() const
    {    
    if (m_sheetId)
    {
        return *m_sheetId;
    }
    return CT_SheetId::default_instance();
    }

CT_SheetIdMap* CT_SheetIdMap::default_instance_ = NULL;

    // CT_SheetId
    CT_SheetId::CT_SheetId()
    :m_has_val_attr(false),
    m_val_attr(0)
    {
    }
    CT_SheetId::~CT_SheetId()
{
    clear();    }
    void CT_SheetId::clear()
    {    
    m_has_val_attr = false;
    m_val_attr = 0;
    }

    void CT_SheetId::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_val_attr)
    {
        _outStream << " " << "val" << "=\"" << m_val_attr << "\"";
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_SheetId& CT_SheetId::default_instance()
    {    
    if (!CT_SheetId::default_instance_)
    {
        CT_SheetId::default_instance_ = new CT_SheetId();
    }
    return *CT_SheetId::default_instance_;
    }

    bool CT_SheetId::has_val_attr() const
    {    
    return m_has_val_attr;
    }

    void CT_SheetId::set_val_attr(const XSD::unsignedInt_& _val_attr)
    {    
    m_has_val_attr = true;
    m_val_attr = _val_attr;
    }

    const XSD::unsignedInt_& CT_SheetId::get_val_attr() const
    {    
    return m_val_attr;
    }

CT_SheetId* CT_SheetId::default_instance_ = NULL;

    // CT_ReviewedRevisions
    CT_ReviewedRevisions::CT_ReviewedRevisions()
    :m_has_count_attr(false),
    m_count_attr(0)
    {
    }
    CT_ReviewedRevisions::~CT_ReviewedRevisions()
{
    clear();    }
    CT_Reviewed* CT_ReviewedRevisions::add_reviewed()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Reviewed* pNewChild = pChildGroup->mutable_reviewed();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_ReviewedRevisions::clear()
    {    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_ReviewedRevisions::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_reviewed())
            {
                (*iter)->get_reviewed().toXmlElem("main:reviewed", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_ReviewedRevisions& CT_ReviewedRevisions::default_instance()
    {    
    if (!CT_ReviewedRevisions::default_instance_)
    {
        CT_ReviewedRevisions::default_instance_ = new CT_ReviewedRevisions();
    }
    return *CT_ReviewedRevisions::default_instance_;
    }

    bool CT_ReviewedRevisions::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void CT_ReviewedRevisions::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& CT_ReviewedRevisions::get_count_attr() const
    {    
    return m_count_attr;
    }


    // CT_ReviewedRevisions::ChildGroup_1
    CT_ReviewedRevisions::ChildGroup_1::ChildGroup_1()
    :m_has_reviewed(false),
    m_reviewed(NULL)
    {
    }
    bool CT_ReviewedRevisions::ChildGroup_1::has_reviewed() const
    {    
    return m_has_reviewed;
    }

    CT_Reviewed* CT_ReviewedRevisions::ChildGroup_1::mutable_reviewed()
    {    
    
    m_has_reviewed = true;
    if (!m_reviewed)
    {
        m_reviewed = new CT_Reviewed();
    }
    return m_reviewed;
    }

    const CT_Reviewed& CT_ReviewedRevisions::ChildGroup_1::get_reviewed() const
    {    
    if (m_reviewed)
    {
        return *m_reviewed;
    }
    return CT_Reviewed::default_instance();
    }

CT_ReviewedRevisions* CT_ReviewedRevisions::default_instance_ = NULL;

    // CT_Reviewed
    CT_Reviewed::CT_Reviewed()
    :m_has_rId_attr(false),
    m_rId_attr(0)
    {
    }
    CT_Reviewed::~CT_Reviewed()
{
    clear();    }
    void CT_Reviewed::clear()
    {    
    m_has_rId_attr = false;
    m_rId_attr = 0;
    }

    void CT_Reviewed::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_rId_attr)
    {
        _outStream << " " << "rId" << "=\"" << m_rId_attr << "\"";
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_Reviewed& CT_Reviewed::default_instance()
    {    
    if (!CT_Reviewed::default_instance_)
    {
        CT_Reviewed::default_instance_ = new CT_Reviewed();
    }
    return *CT_Reviewed::default_instance_;
    }

    bool CT_Reviewed::has_rId_attr() const
    {    
    return m_has_rId_attr;
    }

    void CT_Reviewed::set_rId_attr(const XSD::unsignedInt_& _rId_attr)
    {    
    m_has_rId_attr = true;
    m_rId_attr = _rId_attr;
    }

    const XSD::unsignedInt_& CT_Reviewed::get_rId_attr() const
    {    
    return m_rId_attr;
    }

CT_Reviewed* CT_Reviewed::default_instance_ = NULL;

    // CT_UndoInfo
    CT_UndoInfo::CT_UndoInfo()
    :m_has_index_attr(false),
    m_index_attr(0),
    m_has_exp_attr(false),
    m_exp_attr(NULL),
    m_has_ref3D_attr(false),
    m_ref3D_attr(false),
    m_has_array_attr(false),
    m_array_attr(false),
    m_has_v_attr(false),
    m_v_attr(false),
    m_has_nf_attr(false),
    m_nf_attr(false),
    m_has_cs_attr(false),
    m_cs_attr(false),
    m_has_dr_attr(false),
    m_dr_attr(NULL),
    m_has_dn_attr(false),
    m_dn_attr(NULL),
    m_has_r_attr(false),
    m_r_attr(NULL),
    m_has_sId_attr(false),
    m_sId_attr(0)
    {
    }
    CT_UndoInfo::~CT_UndoInfo()
{
    clear();    }
    void CT_UndoInfo::clear()
    {    
    m_has_index_attr = false;
    m_index_attr = 0;
    
    m_has_exp_attr = false;
    
    if (m_exp_attr)
    {
        delete m_exp_attr;
        m_exp_attr = NULL;
    }
    
    
    m_has_ref3D_attr = false;
    m_ref3D_attr = false;
    
    m_has_array_attr = false;
    m_array_attr = false;
    
    m_has_v_attr = false;
    m_v_attr = false;
    
    m_has_nf_attr = false;
    m_nf_attr = false;
    
    m_has_cs_attr = false;
    m_cs_attr = false;
    
    m_has_dr_attr = false;
    
    if (m_dr_attr)
    {
        delete m_dr_attr;
        m_dr_attr = NULL;
    }
    
    
    m_has_dn_attr = false;
    
    if (m_dn_attr)
    {
        delete m_dn_attr;
        m_dn_attr = NULL;
    }
    
    
    m_has_r_attr = false;
    
    if (m_r_attr)
    {
        delete m_r_attr;
        m_r_attr = NULL;
    }
    
    
    m_has_sId_attr = false;
    m_sId_attr = 0;
    }

    void CT_UndoInfo::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_index_attr)
    {
        _outStream << " " << "index" << "=\"" << m_index_attr << "\"";
    }
    
    
    if (m_has_exp_attr)
    {
        m_exp_attr->toXmlAttr("exp", _outStream);
    }
    
    
    if (m_has_ref3D_attr)
    {
        _outStream << " " << "ref3D" << "=\"" << XSD::XMLBooleanStr(m_ref3D_attr) << "\"";
    }
    
    
    if (m_has_array_attr)
    {
        _outStream << " " << "array" << "=\"" << XSD::XMLBooleanStr(m_array_attr) << "\"";
    }
    
    
    if (m_has_v_attr)
    {
        _outStream << " " << "v" << "=\"" << XSD::XMLBooleanStr(m_v_attr) << "\"";
    }
    
    
    if (m_has_nf_attr)
    {
        _outStream << " " << "nf" << "=\"" << XSD::XMLBooleanStr(m_nf_attr) << "\"";
    }
    
    
    if (m_has_cs_attr)
    {
        _outStream << " " << "cs" << "=\"" << XSD::XMLBooleanStr(m_cs_attr) << "\"";
    }
    
    
    if (m_has_dr_attr)
    {
        m_dr_attr->toXmlAttr("dr", _outStream);
    }
    
    
    if (m_has_dn_attr)
    {
        m_dn_attr->toXmlAttr("dn", _outStream);
    }
    
    
    if (m_has_r_attr)
    {
        m_r_attr->toXmlAttr("r", _outStream);
    }
    
    
    if (m_has_sId_attr)
    {
        _outStream << " " << "sId" << "=\"" << m_sId_attr << "\"";
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_UndoInfo& CT_UndoInfo::default_instance()
    {    
    if (!CT_UndoInfo::default_instance_)
    {
        CT_UndoInfo::default_instance_ = new CT_UndoInfo();
    }
    return *CT_UndoInfo::default_instance_;
    }

    bool CT_UndoInfo::has_index_attr() const
    {    
    return m_has_index_attr;
    }

    void CT_UndoInfo::set_index_attr(const XSD::unsignedInt_& _index_attr)
    {    
    m_has_index_attr = true;
    m_index_attr = _index_attr;
    }

    const XSD::unsignedInt_& CT_UndoInfo::get_index_attr() const
    {    
    return m_index_attr;
    }

    bool CT_UndoInfo::has_exp_attr() const
    {    
    return m_has_exp_attr;
    }

    void CT_UndoInfo::set_exp_attr(const ST_FormulaExpression& _exp_attr)
    {    
    m_has_exp_attr = true;
    m_exp_attr = new ST_FormulaExpression(_exp_attr);
    }

    const ST_FormulaExpression& CT_UndoInfo::get_exp_attr() const
    {    
    if (m_exp_attr)
    {
        return *m_exp_attr;
    }
    return ST_FormulaExpression::default_instance();
    }

    bool CT_UndoInfo::has_ref3D_attr() const
    {    
    return m_has_ref3D_attr;
    }

    void CT_UndoInfo::set_ref3D_attr(const XSD::boolean_& _ref3D_attr)
    {    
    m_has_ref3D_attr = true;
    m_ref3D_attr = _ref3D_attr;
    }

    const XSD::boolean_& CT_UndoInfo::get_ref3D_attr() const
    {    
    return m_ref3D_attr;
    }

    bool CT_UndoInfo::has_array_attr() const
    {    
    return m_has_array_attr;
    }

    void CT_UndoInfo::set_array_attr(const XSD::boolean_& _array_attr)
    {    
    m_has_array_attr = true;
    m_array_attr = _array_attr;
    }

    const XSD::boolean_& CT_UndoInfo::get_array_attr() const
    {    
    return m_array_attr;
    }

    bool CT_UndoInfo::has_v_attr() const
    {    
    return m_has_v_attr;
    }

    void CT_UndoInfo::set_v_attr(const XSD::boolean_& _v_attr)
    {    
    m_has_v_attr = true;
    m_v_attr = _v_attr;
    }

    const XSD::boolean_& CT_UndoInfo::get_v_attr() const
    {    
    return m_v_attr;
    }

    bool CT_UndoInfo::has_nf_attr() const
    {    
    return m_has_nf_attr;
    }

    void CT_UndoInfo::set_nf_attr(const XSD::boolean_& _nf_attr)
    {    
    m_has_nf_attr = true;
    m_nf_attr = _nf_attr;
    }

    const XSD::boolean_& CT_UndoInfo::get_nf_attr() const
    {    
    return m_nf_attr;
    }

    bool CT_UndoInfo::has_cs_attr() const
    {    
    return m_has_cs_attr;
    }

    void CT_UndoInfo::set_cs_attr(const XSD::boolean_& _cs_attr)
    {    
    m_has_cs_attr = true;
    m_cs_attr = _cs_attr;
    }

    const XSD::boolean_& CT_UndoInfo::get_cs_attr() const
    {    
    return m_cs_attr;
    }

    bool CT_UndoInfo::has_dr_attr() const
    {    
    return m_has_dr_attr;
    }

    void CT_UndoInfo::set_dr_attr(const ST_RefA& _dr_attr)
    {    
    m_has_dr_attr = true;
    m_dr_attr = new ST_RefA(_dr_attr);
    }

    const ST_RefA& CT_UndoInfo::get_dr_attr() const
    {    
    if (m_dr_attr)
    {
        return *m_dr_attr;
    }
    return ST_RefA::default_instance();
    }

    bool CT_UndoInfo::has_dn_attr() const
    {    
    return m_has_dn_attr;
    }

    void CT_UndoInfo::set_dn_attr(const ns_s::ST_Xstring& _dn_attr)
    {    
    m_has_dn_attr = true;
    m_dn_attr = new ns_s::ST_Xstring(_dn_attr);
    }

    const ns_s::ST_Xstring& CT_UndoInfo::get_dn_attr() const
    {    
    if (m_dn_attr)
    {
        return *m_dn_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_UndoInfo::has_r_attr() const
    {    
    return m_has_r_attr;
    }

    void CT_UndoInfo::set_r_attr(const ST_CellRef& _r_attr)
    {    
    m_has_r_attr = true;
    m_r_attr = new ST_CellRef(_r_attr);
    }

    const ST_CellRef& CT_UndoInfo::get_r_attr() const
    {    
    if (m_r_attr)
    {
        return *m_r_attr;
    }
    return ST_CellRef::default_instance();
    }

    bool CT_UndoInfo::has_sId_attr() const
    {    
    return m_has_sId_attr;
    }

    void CT_UndoInfo::set_sId_attr(const XSD::unsignedInt_& _sId_attr)
    {    
    m_has_sId_attr = true;
    m_sId_attr = _sId_attr;
    }

    const XSD::unsignedInt_& CT_UndoInfo::get_sId_attr() const
    {    
    return m_sId_attr;
    }

CT_UndoInfo* CT_UndoInfo::default_instance_ = NULL;

    // CT_RevisionRowColumn
    CT_RevisionRowColumn::CT_RevisionRowColumn()
    :m_has_rId_attr(false),
    m_rId_attr(0),
    m_has_ua_attr(false),
    m_ua_attr(false),
    m_has_ra_attr(false),
    m_ra_attr(false),
    m_has_sId_attr(false),
    m_sId_attr(0),
    m_has_eol_attr(false),
    m_eol_attr(false),
    m_has_ref_attr(false),
    m_ref_attr(NULL),
    m_has_action_attr(false),
    m_action_attr(NULL),
    m_has_edge_attr(false),
    m_edge_attr(false)
    {
    }
    CT_RevisionRowColumn::~CT_RevisionRowColumn()
{
    clear();    }
    CT_UndoInfo* CT_RevisionRowColumn::add_undo()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_UndoInfo* pNewChild = pChildGroup->mutable_undo();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_RevisionCellChange* CT_RevisionRowColumn::add_rcc()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_RevisionCellChange* pNewChild = pChildGroup->mutable_rcc();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_RevisionFormatting* CT_RevisionRowColumn::add_rfmt()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_RevisionFormatting* pNewChild = pChildGroup->mutable_rfmt();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_RevisionRowColumn::clear()
    {    
    m_has_rId_attr = false;
    m_rId_attr = 0;
    
    m_has_ua_attr = false;
    m_ua_attr = false;
    
    m_has_ra_attr = false;
    m_ra_attr = false;
    
    m_has_sId_attr = false;
    m_sId_attr = 0;
    
    m_has_eol_attr = false;
    m_eol_attr = false;
    
    m_has_ref_attr = false;
    
    if (m_ref_attr)
    {
        delete m_ref_attr;
        m_ref_attr = NULL;
    }
    
    
    m_has_action_attr = false;
    
    if (m_action_attr)
    {
        delete m_action_attr;
        m_action_attr = NULL;
    }
    
    
    m_has_edge_attr = false;
    m_edge_attr = false;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_RevisionRowColumn::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_rId_attr)
    {
        _outStream << " " << "rId" << "=\"" << m_rId_attr << "\"";
    }
    
    
    if (m_has_ua_attr)
    {
        _outStream << " " << "ua" << "=\"" << XSD::XMLBooleanStr(m_ua_attr) << "\"";
    }
    
    
    if (m_has_ra_attr)
    {
        _outStream << " " << "ra" << "=\"" << XSD::XMLBooleanStr(m_ra_attr) << "\"";
    }
    
    
    if (m_has_sId_attr)
    {
        _outStream << " " << "sId" << "=\"" << m_sId_attr << "\"";
    }
    
    
    if (m_has_eol_attr)
    {
        _outStream << " " << "eol" << "=\"" << XSD::XMLBooleanStr(m_eol_attr) << "\"";
    }
    
    
    if (m_has_ref_attr)
    {
        m_ref_attr->toXmlAttr("ref", _outStream);
    }
    
    
    if (m_has_action_attr)
    {
        m_action_attr->toXmlAttr("action", _outStream);
    }
    
    
    if (m_has_edge_attr)
    {
        _outStream << " " << "edge" << "=\"" << XSD::XMLBooleanStr(m_edge_attr) << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_undo())
            {
                (*iter)->get_undo().toXmlElem("main:undo", "", _outStream);
            }
            else if ((*iter)->has_rcc())
            {
                (*iter)->get_rcc().toXmlElem("main:rcc", "", _outStream);
            }
            else if ((*iter)->has_rfmt())
            {
                (*iter)->get_rfmt().toXmlElem("main:rfmt", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_RevisionRowColumn& CT_RevisionRowColumn::default_instance()
    {    
    if (!CT_RevisionRowColumn::default_instance_)
    {
        CT_RevisionRowColumn::default_instance_ = new CT_RevisionRowColumn();
    }
    return *CT_RevisionRowColumn::default_instance_;
    }

    bool CT_RevisionRowColumn::has_rId_attr() const
    {    
    return m_has_rId_attr;
    }

    void CT_RevisionRowColumn::set_rId_attr(const XSD::unsignedInt_& _rId_attr)
    {    
    m_has_rId_attr = true;
    m_rId_attr = _rId_attr;
    }

    const XSD::unsignedInt_& CT_RevisionRowColumn::get_rId_attr() const
    {    
    return m_rId_attr;
    }

    bool CT_RevisionRowColumn::has_ua_attr() const
    {    
    return m_has_ua_attr;
    }

    void CT_RevisionRowColumn::set_ua_attr(const XSD::boolean_& _ua_attr)
    {    
    m_has_ua_attr = true;
    m_ua_attr = _ua_attr;
    }

    const XSD::boolean_& CT_RevisionRowColumn::get_ua_attr() const
    {    
    return m_ua_attr;
    }

    bool CT_RevisionRowColumn::has_ra_attr() const
    {    
    return m_has_ra_attr;
    }

    void CT_RevisionRowColumn::set_ra_attr(const XSD::boolean_& _ra_attr)
    {    
    m_has_ra_attr = true;
    m_ra_attr = _ra_attr;
    }

    const XSD::boolean_& CT_RevisionRowColumn::get_ra_attr() const
    {    
    return m_ra_attr;
    }

    bool CT_RevisionRowColumn::has_sId_attr() const
    {    
    return m_has_sId_attr;
    }

    void CT_RevisionRowColumn::set_sId_attr(const XSD::unsignedInt_& _sId_attr)
    {    
    m_has_sId_attr = true;
    m_sId_attr = _sId_attr;
    }

    const XSD::unsignedInt_& CT_RevisionRowColumn::get_sId_attr() const
    {    
    return m_sId_attr;
    }

    bool CT_RevisionRowColumn::has_eol_attr() const
    {    
    return m_has_eol_attr;
    }

    void CT_RevisionRowColumn::set_eol_attr(const XSD::boolean_& _eol_attr)
    {    
    m_has_eol_attr = true;
    m_eol_attr = _eol_attr;
    }

    const XSD::boolean_& CT_RevisionRowColumn::get_eol_attr() const
    {    
    return m_eol_attr;
    }

    bool CT_RevisionRowColumn::has_ref_attr() const
    {    
    return m_has_ref_attr;
    }

    void CT_RevisionRowColumn::set_ref_attr(const ST_Ref& _ref_attr)
    {    
    m_has_ref_attr = true;
    m_ref_attr = new ST_Ref(_ref_attr);
    }

    const ST_Ref& CT_RevisionRowColumn::get_ref_attr() const
    {    
    if (m_ref_attr)
    {
        return *m_ref_attr;
    }
    return ST_Ref::default_instance();
    }

    bool CT_RevisionRowColumn::has_action_attr() const
    {    
    return m_has_action_attr;
    }

    void CT_RevisionRowColumn::set_action_attr(const ST_rwColActionType& _action_attr)
    {    
    m_has_action_attr = true;
    m_action_attr = new ST_rwColActionType(_action_attr);
    }

    const ST_rwColActionType& CT_RevisionRowColumn::get_action_attr() const
    {    
    if (m_action_attr)
    {
        return *m_action_attr;
    }
    return ST_rwColActionType::default_instance();
    }

    bool CT_RevisionRowColumn::has_edge_attr() const
    {    
    return m_has_edge_attr;
    }

    void CT_RevisionRowColumn::set_edge_attr(const XSD::boolean_& _edge_attr)
    {    
    m_has_edge_attr = true;
    m_edge_attr = _edge_attr;
    }

    const XSD::boolean_& CT_RevisionRowColumn::get_edge_attr() const
    {    
    return m_edge_attr;
    }


    // CT_RevisionRowColumn::ChildGroup_1
    CT_RevisionRowColumn::ChildGroup_1::ChildGroup_1()
    :m_has_undo(false),
    m_undo(NULL),
    m_has_rcc(false),
    m_rcc(NULL),
    m_has_rfmt(false),
    m_rfmt(NULL)
    {
    }
    bool CT_RevisionRowColumn::ChildGroup_1::has_undo() const
    {    
    return m_has_undo;
    }

    CT_UndoInfo* CT_RevisionRowColumn::ChildGroup_1::mutable_undo()
    {    
    
    m_has_rcc = false;
    
    if (m_rcc)
    {
        delete m_rcc;
        m_rcc = NULL;
    }
    ;
    
    m_has_rfmt = false;
    
    if (m_rfmt)
    {
        delete m_rfmt;
        m_rfmt = NULL;
    }
    ;
    
    m_has_undo = true;
    if (!m_undo)
    {
        m_undo = new CT_UndoInfo();
    }
    return m_undo;
    }

    const CT_UndoInfo& CT_RevisionRowColumn::ChildGroup_1::get_undo() const
    {    
    if (m_undo)
    {
        return *m_undo;
    }
    return CT_UndoInfo::default_instance();
    }

    bool CT_RevisionRowColumn::ChildGroup_1::has_rcc() const
    {    
    return m_has_rcc;
    }

    CT_RevisionCellChange* CT_RevisionRowColumn::ChildGroup_1::mutable_rcc()
    {    
    
    m_has_undo = false;
    
    if (m_undo)
    {
        delete m_undo;
        m_undo = NULL;
    }
    ;
    
    m_has_rfmt = false;
    
    if (m_rfmt)
    {
        delete m_rfmt;
        m_rfmt = NULL;
    }
    ;
    
    m_has_rcc = true;
    if (!m_rcc)
    {
        m_rcc = new CT_RevisionCellChange();
    }
    return m_rcc;
    }

    const CT_RevisionCellChange& CT_RevisionRowColumn::ChildGroup_1::get_rcc() const
    {    
    if (m_rcc)
    {
        return *m_rcc;
    }
    return CT_RevisionCellChange::default_instance();
    }

    bool CT_RevisionRowColumn::ChildGroup_1::has_rfmt() const
    {    
    return m_has_rfmt;
    }

    CT_RevisionFormatting* CT_RevisionRowColumn::ChildGroup_1::mutable_rfmt()
    {    
    
    m_has_undo = false;
    
    if (m_undo)
    {
        delete m_undo;
        m_undo = NULL;
    }
    ;
    
    m_has_rcc = false;
    
    if (m_rcc)
    {
        delete m_rcc;
        m_rcc = NULL;
    }
    ;
    
    m_has_rfmt = true;
    if (!m_rfmt)
    {
        m_rfmt = new CT_RevisionFormatting();
    }
    return m_rfmt;
    }

    const CT_RevisionFormatting& CT_RevisionRowColumn::ChildGroup_1::get_rfmt() const
    {    
    if (m_rfmt)
    {
        return *m_rfmt;
    }
    return CT_RevisionFormatting::default_instance();
    }

CT_RevisionRowColumn* CT_RevisionRowColumn::default_instance_ = NULL;

    // CT_RevisionMove
    CT_RevisionMove::CT_RevisionMove()
    :m_has_rId_attr(false),
    m_rId_attr(0),
    m_has_ua_attr(false),
    m_ua_attr(false),
    m_has_ra_attr(false),
    m_ra_attr(false),
    m_has_sheetId_attr(false),
    m_sheetId_attr(0),
    m_has_source_attr(false),
    m_source_attr(NULL),
    m_has_destination_attr(false),
    m_destination_attr(NULL),
    m_has_sourceSheetId_attr(false),
    m_sourceSheetId_attr(0)
    {
    }
    CT_RevisionMove::~CT_RevisionMove()
{
    clear();    }
    CT_UndoInfo* CT_RevisionMove::add_undo()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_UndoInfo* pNewChild = pChildGroup->mutable_undo();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_RevisionCellChange* CT_RevisionMove::add_rcc()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_RevisionCellChange* pNewChild = pChildGroup->mutable_rcc();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_RevisionFormatting* CT_RevisionMove::add_rfmt()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_RevisionFormatting* pNewChild = pChildGroup->mutable_rfmt();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_RevisionMove::clear()
    {    
    m_has_rId_attr = false;
    m_rId_attr = 0;
    
    m_has_ua_attr = false;
    m_ua_attr = false;
    
    m_has_ra_attr = false;
    m_ra_attr = false;
    
    m_has_sheetId_attr = false;
    m_sheetId_attr = 0;
    
    m_has_source_attr = false;
    
    if (m_source_attr)
    {
        delete m_source_attr;
        m_source_attr = NULL;
    }
    
    
    m_has_destination_attr = false;
    
    if (m_destination_attr)
    {
        delete m_destination_attr;
        m_destination_attr = NULL;
    }
    
    
    m_has_sourceSheetId_attr = false;
    m_sourceSheetId_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_RevisionMove::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_rId_attr)
    {
        _outStream << " " << "rId" << "=\"" << m_rId_attr << "\"";
    }
    
    
    if (m_has_ua_attr)
    {
        _outStream << " " << "ua" << "=\"" << XSD::XMLBooleanStr(m_ua_attr) << "\"";
    }
    
    
    if (m_has_ra_attr)
    {
        _outStream << " " << "ra" << "=\"" << XSD::XMLBooleanStr(m_ra_attr) << "\"";
    }
    
    
    if (m_has_sheetId_attr)
    {
        _outStream << " " << "sheetId" << "=\"" << m_sheetId_attr << "\"";
    }
    
    
    if (m_has_source_attr)
    {
        m_source_attr->toXmlAttr("source", _outStream);
    }
    
    
    if (m_has_destination_attr)
    {
        m_destination_attr->toXmlAttr("destination", _outStream);
    }
    
    
    if (m_has_sourceSheetId_attr)
    {
        _outStream << " " << "sourceSheetId" << "=\"" << m_sourceSheetId_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_undo())
            {
                (*iter)->get_undo().toXmlElem("main:undo", "", _outStream);
            }
            else if ((*iter)->has_rcc())
            {
                (*iter)->get_rcc().toXmlElem("main:rcc", "", _outStream);
            }
            else if ((*iter)->has_rfmt())
            {
                (*iter)->get_rfmt().toXmlElem("main:rfmt", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_RevisionMove& CT_RevisionMove::default_instance()
    {    
    if (!CT_RevisionMove::default_instance_)
    {
        CT_RevisionMove::default_instance_ = new CT_RevisionMove();
    }
    return *CT_RevisionMove::default_instance_;
    }

    bool CT_RevisionMove::has_rId_attr() const
    {    
    return m_has_rId_attr;
    }

    void CT_RevisionMove::set_rId_attr(const XSD::unsignedInt_& _rId_attr)
    {    
    m_has_rId_attr = true;
    m_rId_attr = _rId_attr;
    }

    const XSD::unsignedInt_& CT_RevisionMove::get_rId_attr() const
    {    
    return m_rId_attr;
    }

    bool CT_RevisionMove::has_ua_attr() const
    {    
    return m_has_ua_attr;
    }

    void CT_RevisionMove::set_ua_attr(const XSD::boolean_& _ua_attr)
    {    
    m_has_ua_attr = true;
    m_ua_attr = _ua_attr;
    }

    const XSD::boolean_& CT_RevisionMove::get_ua_attr() const
    {    
    return m_ua_attr;
    }

    bool CT_RevisionMove::has_ra_attr() const
    {    
    return m_has_ra_attr;
    }

    void CT_RevisionMove::set_ra_attr(const XSD::boolean_& _ra_attr)
    {    
    m_has_ra_attr = true;
    m_ra_attr = _ra_attr;
    }

    const XSD::boolean_& CT_RevisionMove::get_ra_attr() const
    {    
    return m_ra_attr;
    }

    bool CT_RevisionMove::has_sheetId_attr() const
    {    
    return m_has_sheetId_attr;
    }

    void CT_RevisionMove::set_sheetId_attr(const XSD::unsignedInt_& _sheetId_attr)
    {    
    m_has_sheetId_attr = true;
    m_sheetId_attr = _sheetId_attr;
    }

    const XSD::unsignedInt_& CT_RevisionMove::get_sheetId_attr() const
    {    
    return m_sheetId_attr;
    }

    bool CT_RevisionMove::has_source_attr() const
    {    
    return m_has_source_attr;
    }

    void CT_RevisionMove::set_source_attr(const ST_Ref& _source_attr)
    {    
    m_has_source_attr = true;
    m_source_attr = new ST_Ref(_source_attr);
    }

    const ST_Ref& CT_RevisionMove::get_source_attr() const
    {    
    if (m_source_attr)
    {
        return *m_source_attr;
    }
    return ST_Ref::default_instance();
    }

    bool CT_RevisionMove::has_destination_attr() const
    {    
    return m_has_destination_attr;
    }

    void CT_RevisionMove::set_destination_attr(const ST_Ref& _destination_attr)
    {    
    m_has_destination_attr = true;
    m_destination_attr = new ST_Ref(_destination_attr);
    }

    const ST_Ref& CT_RevisionMove::get_destination_attr() const
    {    
    if (m_destination_attr)
    {
        return *m_destination_attr;
    }
    return ST_Ref::default_instance();
    }

    bool CT_RevisionMove::has_sourceSheetId_attr() const
    {    
    return m_has_sourceSheetId_attr;
    }

    void CT_RevisionMove::set_sourceSheetId_attr(const XSD::unsignedInt_& _sourceSheetId_attr)
    {    
    m_has_sourceSheetId_attr = true;
    m_sourceSheetId_attr = _sourceSheetId_attr;
    }

    const XSD::unsignedInt_& CT_RevisionMove::get_sourceSheetId_attr() const
    {    
    return m_sourceSheetId_attr;
    }


    // CT_RevisionMove::ChildGroup_1
    CT_RevisionMove::ChildGroup_1::ChildGroup_1()
    :m_has_undo(false),
    m_undo(NULL),
    m_has_rcc(false),
    m_rcc(NULL),
    m_has_rfmt(false),
    m_rfmt(NULL)
    {
    }
    bool CT_RevisionMove::ChildGroup_1::has_undo() const
    {    
    return m_has_undo;
    }

    CT_UndoInfo* CT_RevisionMove::ChildGroup_1::mutable_undo()
    {    
    
    m_has_rcc = false;
    
    if (m_rcc)
    {
        delete m_rcc;
        m_rcc = NULL;
    }
    ;
    
    m_has_rfmt = false;
    
    if (m_rfmt)
    {
        delete m_rfmt;
        m_rfmt = NULL;
    }
    ;
    
    m_has_undo = true;
    if (!m_undo)
    {
        m_undo = new CT_UndoInfo();
    }
    return m_undo;
    }

    const CT_UndoInfo& CT_RevisionMove::ChildGroup_1::get_undo() const
    {    
    if (m_undo)
    {
        return *m_undo;
    }
    return CT_UndoInfo::default_instance();
    }

    bool CT_RevisionMove::ChildGroup_1::has_rcc() const
    {    
    return m_has_rcc;
    }

    CT_RevisionCellChange* CT_RevisionMove::ChildGroup_1::mutable_rcc()
    {    
    
    m_has_undo = false;
    
    if (m_undo)
    {
        delete m_undo;
        m_undo = NULL;
    }
    ;
    
    m_has_rfmt = false;
    
    if (m_rfmt)
    {
        delete m_rfmt;
        m_rfmt = NULL;
    }
    ;
    
    m_has_rcc = true;
    if (!m_rcc)
    {
        m_rcc = new CT_RevisionCellChange();
    }
    return m_rcc;
    }

    const CT_RevisionCellChange& CT_RevisionMove::ChildGroup_1::get_rcc() const
    {    
    if (m_rcc)
    {
        return *m_rcc;
    }
    return CT_RevisionCellChange::default_instance();
    }

    bool CT_RevisionMove::ChildGroup_1::has_rfmt() const
    {    
    return m_has_rfmt;
    }

    CT_RevisionFormatting* CT_RevisionMove::ChildGroup_1::mutable_rfmt()
    {    
    
    m_has_undo = false;
    
    if (m_undo)
    {
        delete m_undo;
        m_undo = NULL;
    }
    ;
    
    m_has_rcc = false;
    
    if (m_rcc)
    {
        delete m_rcc;
        m_rcc = NULL;
    }
    ;
    
    m_has_rfmt = true;
    if (!m_rfmt)
    {
        m_rfmt = new CT_RevisionFormatting();
    }
    return m_rfmt;
    }

    const CT_RevisionFormatting& CT_RevisionMove::ChildGroup_1::get_rfmt() const
    {    
    if (m_rfmt)
    {
        return *m_rfmt;
    }
    return CT_RevisionFormatting::default_instance();
    }

CT_RevisionMove* CT_RevisionMove::default_instance_ = NULL;

    // CT_RevisionCustomView
    CT_RevisionCustomView::CT_RevisionCustomView()
    :m_has_guid_attr(false),
    m_guid_attr(NULL),
    m_has_action_attr(false),
    m_action_attr(NULL)
    {
    }
    CT_RevisionCustomView::~CT_RevisionCustomView()
{
    clear();    }
    void CT_RevisionCustomView::clear()
    {    
    m_has_guid_attr = false;
    
    if (m_guid_attr)
    {
        delete m_guid_attr;
        m_guid_attr = NULL;
    }
    
    
    m_has_action_attr = false;
    
    if (m_action_attr)
    {
        delete m_action_attr;
        m_action_attr = NULL;
    }
    
    }

    void CT_RevisionCustomView::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_guid_attr)
    {
        m_guid_attr->toXmlAttr("guid", _outStream);
    }
    
    
    if (m_has_action_attr)
    {
        m_action_attr->toXmlAttr("action", _outStream);
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_RevisionCustomView& CT_RevisionCustomView::default_instance()
    {    
    if (!CT_RevisionCustomView::default_instance_)
    {
        CT_RevisionCustomView::default_instance_ = new CT_RevisionCustomView();
    }
    return *CT_RevisionCustomView::default_instance_;
    }

    bool CT_RevisionCustomView::has_guid_attr() const
    {    
    return m_has_guid_attr;
    }

    void CT_RevisionCustomView::set_guid_attr(const ns_s::ST_Guid& _guid_attr)
    {    
    m_has_guid_attr = true;
    m_guid_attr = new ns_s::ST_Guid(_guid_attr);
    }

    const ns_s::ST_Guid& CT_RevisionCustomView::get_guid_attr() const
    {    
    if (m_guid_attr)
    {
        return *m_guid_attr;
    }
    return ns_s::ST_Guid::default_instance();
    }

    bool CT_RevisionCustomView::has_action_attr() const
    {    
    return m_has_action_attr;
    }

    void CT_RevisionCustomView::set_action_attr(const ST_RevisionAction& _action_attr)
    {    
    m_has_action_attr = true;
    m_action_attr = new ST_RevisionAction(_action_attr);
    }

    const ST_RevisionAction& CT_RevisionCustomView::get_action_attr() const
    {    
    if (m_action_attr)
    {
        return *m_action_attr;
    }
    return ST_RevisionAction::default_instance();
    }

CT_RevisionCustomView* CT_RevisionCustomView::default_instance_ = NULL;

    // CT_RevisionSheetRename
    CT_RevisionSheetRename::CT_RevisionSheetRename()
    :m_has_extLst(false),
    m_extLst(NULL),
    m_has_rId_attr(false),
    m_rId_attr(0),
    m_has_ua_attr(false),
    m_ua_attr(false),
    m_has_ra_attr(false),
    m_ra_attr(false),
    m_has_sheetId_attr(false),
    m_sheetId_attr(0),
    m_has_oldName_attr(false),
    m_oldName_attr(NULL),
    m_has_newName_attr(false),
    m_newName_attr(NULL)
    {
    }
    CT_RevisionSheetRename::~CT_RevisionSheetRename()
{
    clear();    }
    bool CT_RevisionSheetRename::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* CT_RevisionSheetRename::mutable_extLst()
    {    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& CT_RevisionSheetRename::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

    void CT_RevisionSheetRename::clear()
    {    
    m_has_rId_attr = false;
    m_rId_attr = 0;
    
    m_has_ua_attr = false;
    m_ua_attr = false;
    
    m_has_ra_attr = false;
    m_ra_attr = false;
    
    m_has_sheetId_attr = false;
    m_sheetId_attr = 0;
    
    m_has_oldName_attr = false;
    
    if (m_oldName_attr)
    {
        delete m_oldName_attr;
        m_oldName_attr = NULL;
    }
    
    
    m_has_newName_attr = false;
    
    if (m_newName_attr)
    {
        delete m_newName_attr;
        m_newName_attr = NULL;
    }
    
    }

    void CT_RevisionSheetRename::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_rId_attr)
    {
        _outStream << " " << "rId" << "=\"" << m_rId_attr << "\"";
    }
    
    
    if (m_has_ua_attr)
    {
        _outStream << " " << "ua" << "=\"" << XSD::XMLBooleanStr(m_ua_attr) << "\"";
    }
    
    
    if (m_has_ra_attr)
    {
        _outStream << " " << "ra" << "=\"" << XSD::XMLBooleanStr(m_ra_attr) << "\"";
    }
    
    
    if (m_has_sheetId_attr)
    {
        _outStream << " " << "sheetId" << "=\"" << m_sheetId_attr << "\"";
    }
    
    
    if (m_has_oldName_attr)
    {
        m_oldName_attr->toXmlAttr("oldName", _outStream);
    }
    
    
    if (m_has_newName_attr)
    {
        m_newName_attr->toXmlAttr("newName", _outStream);
    }
    
            _outStream << ">";
            
    if (m_has_extLst)
    {
        m_extLst->toXmlElem("main:extLst", "", _outStream);;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_RevisionSheetRename& CT_RevisionSheetRename::default_instance()
    {    
    if (!CT_RevisionSheetRename::default_instance_)
    {
        CT_RevisionSheetRename::default_instance_ = new CT_RevisionSheetRename();
    }
    return *CT_RevisionSheetRename::default_instance_;
    }

    bool CT_RevisionSheetRename::has_rId_attr() const
    {    
    return m_has_rId_attr;
    }

    void CT_RevisionSheetRename::set_rId_attr(const XSD::unsignedInt_& _rId_attr)
    {    
    m_has_rId_attr = true;
    m_rId_attr = _rId_attr;
    }

    const XSD::unsignedInt_& CT_RevisionSheetRename::get_rId_attr() const
    {    
    return m_rId_attr;
    }

    bool CT_RevisionSheetRename::has_ua_attr() const
    {    
    return m_has_ua_attr;
    }

    void CT_RevisionSheetRename::set_ua_attr(const XSD::boolean_& _ua_attr)
    {    
    m_has_ua_attr = true;
    m_ua_attr = _ua_attr;
    }

    const XSD::boolean_& CT_RevisionSheetRename::get_ua_attr() const
    {    
    return m_ua_attr;
    }

    bool CT_RevisionSheetRename::has_ra_attr() const
    {    
    return m_has_ra_attr;
    }

    void CT_RevisionSheetRename::set_ra_attr(const XSD::boolean_& _ra_attr)
    {    
    m_has_ra_attr = true;
    m_ra_attr = _ra_attr;
    }

    const XSD::boolean_& CT_RevisionSheetRename::get_ra_attr() const
    {    
    return m_ra_attr;
    }

    bool CT_RevisionSheetRename::has_sheetId_attr() const
    {    
    return m_has_sheetId_attr;
    }

    void CT_RevisionSheetRename::set_sheetId_attr(const XSD::unsignedInt_& _sheetId_attr)
    {    
    m_has_sheetId_attr = true;
    m_sheetId_attr = _sheetId_attr;
    }

    const XSD::unsignedInt_& CT_RevisionSheetRename::get_sheetId_attr() const
    {    
    return m_sheetId_attr;
    }

    bool CT_RevisionSheetRename::has_oldName_attr() const
    {    
    return m_has_oldName_attr;
    }

    void CT_RevisionSheetRename::set_oldName_attr(const ns_s::ST_Xstring& _oldName_attr)
    {    
    m_has_oldName_attr = true;
    m_oldName_attr = new ns_s::ST_Xstring(_oldName_attr);
    }

    const ns_s::ST_Xstring& CT_RevisionSheetRename::get_oldName_attr() const
    {    
    if (m_oldName_attr)
    {
        return *m_oldName_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_RevisionSheetRename::has_newName_attr() const
    {    
    return m_has_newName_attr;
    }

    void CT_RevisionSheetRename::set_newName_attr(const ns_s::ST_Xstring& _newName_attr)
    {    
    m_has_newName_attr = true;
    m_newName_attr = new ns_s::ST_Xstring(_newName_attr);
    }

    const ns_s::ST_Xstring& CT_RevisionSheetRename::get_newName_attr() const
    {    
    if (m_newName_attr)
    {
        return *m_newName_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

CT_RevisionSheetRename* CT_RevisionSheetRename::default_instance_ = NULL;

    // CT_RevisionInsertSheet
    CT_RevisionInsertSheet::CT_RevisionInsertSheet()
    :m_has_rId_attr(false),
    m_rId_attr(0),
    m_has_ua_attr(false),
    m_ua_attr(false),
    m_has_ra_attr(false),
    m_ra_attr(false),
    m_has_sheetId_attr(false),
    m_sheetId_attr(0),
    m_has_name_attr(false),
    m_name_attr(NULL),
    m_has_sheetPosition_attr(false),
    m_sheetPosition_attr(0)
    {
    }
    CT_RevisionInsertSheet::~CT_RevisionInsertSheet()
{
    clear();    }
    void CT_RevisionInsertSheet::clear()
    {    
    m_has_rId_attr = false;
    m_rId_attr = 0;
    
    m_has_ua_attr = false;
    m_ua_attr = false;
    
    m_has_ra_attr = false;
    m_ra_attr = false;
    
    m_has_sheetId_attr = false;
    m_sheetId_attr = 0;
    
    m_has_name_attr = false;
    
    if (m_name_attr)
    {
        delete m_name_attr;
        m_name_attr = NULL;
    }
    
    
    m_has_sheetPosition_attr = false;
    m_sheetPosition_attr = 0;
    }

    void CT_RevisionInsertSheet::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_rId_attr)
    {
        _outStream << " " << "rId" << "=\"" << m_rId_attr << "\"";
    }
    
    
    if (m_has_ua_attr)
    {
        _outStream << " " << "ua" << "=\"" << XSD::XMLBooleanStr(m_ua_attr) << "\"";
    }
    
    
    if (m_has_ra_attr)
    {
        _outStream << " " << "ra" << "=\"" << XSD::XMLBooleanStr(m_ra_attr) << "\"";
    }
    
    
    if (m_has_sheetId_attr)
    {
        _outStream << " " << "sheetId" << "=\"" << m_sheetId_attr << "\"";
    }
    
    
    if (m_has_name_attr)
    {
        m_name_attr->toXmlAttr("name", _outStream);
    }
    
    
    if (m_has_sheetPosition_attr)
    {
        _outStream << " " << "sheetPosition" << "=\"" << m_sheetPosition_attr << "\"";
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_RevisionInsertSheet& CT_RevisionInsertSheet::default_instance()
    {    
    if (!CT_RevisionInsertSheet::default_instance_)
    {
        CT_RevisionInsertSheet::default_instance_ = new CT_RevisionInsertSheet();
    }
    return *CT_RevisionInsertSheet::default_instance_;
    }

    bool CT_RevisionInsertSheet::has_rId_attr() const
    {    
    return m_has_rId_attr;
    }

    void CT_RevisionInsertSheet::set_rId_attr(const XSD::unsignedInt_& _rId_attr)
    {    
    m_has_rId_attr = true;
    m_rId_attr = _rId_attr;
    }

    const XSD::unsignedInt_& CT_RevisionInsertSheet::get_rId_attr() const
    {    
    return m_rId_attr;
    }

    bool CT_RevisionInsertSheet::has_ua_attr() const
    {    
    return m_has_ua_attr;
    }

    void CT_RevisionInsertSheet::set_ua_attr(const XSD::boolean_& _ua_attr)
    {    
    m_has_ua_attr = true;
    m_ua_attr = _ua_attr;
    }

    const XSD::boolean_& CT_RevisionInsertSheet::get_ua_attr() const
    {    
    return m_ua_attr;
    }

    bool CT_RevisionInsertSheet::has_ra_attr() const
    {    
    return m_has_ra_attr;
    }

    void CT_RevisionInsertSheet::set_ra_attr(const XSD::boolean_& _ra_attr)
    {    
    m_has_ra_attr = true;
    m_ra_attr = _ra_attr;
    }

    const XSD::boolean_& CT_RevisionInsertSheet::get_ra_attr() const
    {    
    return m_ra_attr;
    }

    bool CT_RevisionInsertSheet::has_sheetId_attr() const
    {    
    return m_has_sheetId_attr;
    }

    void CT_RevisionInsertSheet::set_sheetId_attr(const XSD::unsignedInt_& _sheetId_attr)
    {    
    m_has_sheetId_attr = true;
    m_sheetId_attr = _sheetId_attr;
    }

    const XSD::unsignedInt_& CT_RevisionInsertSheet::get_sheetId_attr() const
    {    
    return m_sheetId_attr;
    }

    bool CT_RevisionInsertSheet::has_name_attr() const
    {    
    return m_has_name_attr;
    }

    void CT_RevisionInsertSheet::set_name_attr(const ns_s::ST_Xstring& _name_attr)
    {    
    m_has_name_attr = true;
    m_name_attr = new ns_s::ST_Xstring(_name_attr);
    }

    const ns_s::ST_Xstring& CT_RevisionInsertSheet::get_name_attr() const
    {    
    if (m_name_attr)
    {
        return *m_name_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_RevisionInsertSheet::has_sheetPosition_attr() const
    {    
    return m_has_sheetPosition_attr;
    }

    void CT_RevisionInsertSheet::set_sheetPosition_attr(const XSD::unsignedInt_& _sheetPosition_attr)
    {    
    m_has_sheetPosition_attr = true;
    m_sheetPosition_attr = _sheetPosition_attr;
    }

    const XSD::unsignedInt_& CT_RevisionInsertSheet::get_sheetPosition_attr() const
    {    
    return m_sheetPosition_attr;
    }

CT_RevisionInsertSheet* CT_RevisionInsertSheet::default_instance_ = NULL;

    // CT_RevisionCellChange
    CT_RevisionCellChange::CT_RevisionCellChange()
    :m_has_oc(false),
    m_oc(NULL),
    m_has_nc(false),
    m_nc(NULL),
    m_has_odxf(false),
    m_odxf(NULL),
    m_has_ndxf(false),
    m_ndxf(NULL),
    m_has_extLst(false),
    m_extLst(NULL),
    m_has_rId_attr(false),
    m_rId_attr(0),
    m_has_ua_attr(false),
    m_ua_attr(false),
    m_has_ra_attr(false),
    m_ra_attr(false),
    m_has_sId_attr(false),
    m_sId_attr(0),
    m_has_odxf_attr(false),
    m_odxf_attr(false),
    m_has_xfDxf_attr(false),
    m_xfDxf_attr(false),
    m_has_s_attr(false),
    m_s_attr(false),
    m_has_dxf_attr(false),
    m_dxf_attr(false),
    m_has_numFmtId_attr(false),
    m_numFmtId_attr(NULL),
    m_has_quotePrefix_attr(false),
    m_quotePrefix_attr(false),
    m_has_oldQuotePrefix_attr(false),
    m_oldQuotePrefix_attr(false),
    m_has_ph_attr(false),
    m_ph_attr(false),
    m_has_oldPh_attr(false),
    m_oldPh_attr(false),
    m_has_endOfListFormulaUpdate_attr(false),
    m_endOfListFormulaUpdate_attr(false)
    {
    }
    CT_RevisionCellChange::~CT_RevisionCellChange()
{
    clear();    }
    bool CT_RevisionCellChange::has_oc() const
    {    
    return m_has_oc;
    }

    CT_Cell* CT_RevisionCellChange::mutable_oc()
    {    
    m_has_oc = true;
    if (!m_oc)
    {
        m_oc = new CT_Cell();
    }
    return m_oc;
    }

    const CT_Cell& CT_RevisionCellChange::get_oc() const
    {    
    if (m_oc)
    {
        return *m_oc;
    }
    return CT_Cell::default_instance();
    }

    bool CT_RevisionCellChange::has_nc() const
    {    
    return m_has_nc;
    }

    CT_Cell* CT_RevisionCellChange::mutable_nc()
    {    
    m_has_nc = true;
    if (!m_nc)
    {
        m_nc = new CT_Cell();
    }
    return m_nc;
    }

    const CT_Cell& CT_RevisionCellChange::get_nc() const
    {    
    if (m_nc)
    {
        return *m_nc;
    }
    return CT_Cell::default_instance();
    }

    bool CT_RevisionCellChange::has_odxf() const
    {    
    return m_has_odxf;
    }

    CT_Dxf* CT_RevisionCellChange::mutable_odxf()
    {    
    m_has_odxf = true;
    if (!m_odxf)
    {
        m_odxf = new CT_Dxf();
    }
    return m_odxf;
    }

    const CT_Dxf& CT_RevisionCellChange::get_odxf() const
    {    
    if (m_odxf)
    {
        return *m_odxf;
    }
    return CT_Dxf::default_instance();
    }

    bool CT_RevisionCellChange::has_ndxf() const
    {    
    return m_has_ndxf;
    }

    CT_Dxf* CT_RevisionCellChange::mutable_ndxf()
    {    
    m_has_ndxf = true;
    if (!m_ndxf)
    {
        m_ndxf = new CT_Dxf();
    }
    return m_ndxf;
    }

    const CT_Dxf& CT_RevisionCellChange::get_ndxf() const
    {    
    if (m_ndxf)
    {
        return *m_ndxf;
    }
    return CT_Dxf::default_instance();
    }

    bool CT_RevisionCellChange::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* CT_RevisionCellChange::mutable_extLst()
    {    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& CT_RevisionCellChange::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

    void CT_RevisionCellChange::clear()
    {    
    m_has_rId_attr = false;
    m_rId_attr = 0;
    
    m_has_ua_attr = false;
    m_ua_attr = false;
    
    m_has_ra_attr = false;
    m_ra_attr = false;
    
    m_has_sId_attr = false;
    m_sId_attr = 0;
    
    m_has_odxf_attr = false;
    m_odxf_attr = false;
    
    m_has_xfDxf_attr = false;
    m_xfDxf_attr = false;
    
    m_has_s_attr = false;
    m_s_attr = false;
    
    m_has_dxf_attr = false;
    m_dxf_attr = false;
    
    m_has_numFmtId_attr = false;
    
    if (m_numFmtId_attr)
    {
        delete m_numFmtId_attr;
        m_numFmtId_attr = NULL;
    }
    
    
    m_has_quotePrefix_attr = false;
    m_quotePrefix_attr = false;
    
    m_has_oldQuotePrefix_attr = false;
    m_oldQuotePrefix_attr = false;
    
    m_has_ph_attr = false;
    m_ph_attr = false;
    
    m_has_oldPh_attr = false;
    m_oldPh_attr = false;
    
    m_has_endOfListFormulaUpdate_attr = false;
    m_endOfListFormulaUpdate_attr = false;
    }

    void CT_RevisionCellChange::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_rId_attr)
    {
        _outStream << " " << "rId" << "=\"" << m_rId_attr << "\"";
    }
    
    
    if (m_has_ua_attr)
    {
        _outStream << " " << "ua" << "=\"" << XSD::XMLBooleanStr(m_ua_attr) << "\"";
    }
    
    
    if (m_has_ra_attr)
    {
        _outStream << " " << "ra" << "=\"" << XSD::XMLBooleanStr(m_ra_attr) << "\"";
    }
    
    
    if (m_has_sId_attr)
    {
        _outStream << " " << "sId" << "=\"" << m_sId_attr << "\"";
    }
    
    
    if (m_has_odxf_attr)
    {
        _outStream << " " << "odxf" << "=\"" << XSD::XMLBooleanStr(m_odxf_attr) << "\"";
    }
    
    
    if (m_has_xfDxf_attr)
    {
        _outStream << " " << "xfDxf" << "=\"" << XSD::XMLBooleanStr(m_xfDxf_attr) << "\"";
    }
    
    
    if (m_has_s_attr)
    {
        _outStream << " " << "s" << "=\"" << XSD::XMLBooleanStr(m_s_attr) << "\"";
    }
    
    
    if (m_has_dxf_attr)
    {
        _outStream << " " << "dxf" << "=\"" << XSD::XMLBooleanStr(m_dxf_attr) << "\"";
    }
    
    
    if (m_has_numFmtId_attr)
    {
        m_numFmtId_attr->toXmlAttr("numFmtId", _outStream);
    }
    
    
    if (m_has_quotePrefix_attr)
    {
        _outStream << " " << "quotePrefix" << "=\"" << XSD::XMLBooleanStr(m_quotePrefix_attr) << "\"";
    }
    
    
    if (m_has_oldQuotePrefix_attr)
    {
        _outStream << " " << "oldQuotePrefix" << "=\"" << XSD::XMLBooleanStr(m_oldQuotePrefix_attr) << "\"";
    }
    
    
    if (m_has_ph_attr)
    {
        _outStream << " " << "ph" << "=\"" << XSD::XMLBooleanStr(m_ph_attr) << "\"";
    }
    
    
    if (m_has_oldPh_attr)
    {
        _outStream << " " << "oldPh" << "=\"" << XSD::XMLBooleanStr(m_oldPh_attr) << "\"";
    }
    
    
    if (m_has_endOfListFormulaUpdate_attr)
    {
        _outStream << " " << "endOfListFormulaUpdate" << "=\"" << XSD::XMLBooleanStr(m_endOfListFormulaUpdate_attr) << "\"";
    }
    
            _outStream << ">";
            
    if (m_has_oc)
    {
        m_oc->toXmlElem("main:oc", "", _outStream);;
    }
    
    if (m_has_nc)
    {
        m_nc->toXmlElem("main:nc", "", _outStream);;
    }
    
    if (m_has_odxf)
    {
        m_odxf->toXmlElem("main:odxf", "", _outStream);;
    }
    
    if (m_has_ndxf)
    {
        m_ndxf->toXmlElem("main:ndxf", "", _outStream);;
    }
    
    if (m_has_extLst)
    {
        m_extLst->toXmlElem("main:extLst", "", _outStream);;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_RevisionCellChange& CT_RevisionCellChange::default_instance()
    {    
    if (!CT_RevisionCellChange::default_instance_)
    {
        CT_RevisionCellChange::default_instance_ = new CT_RevisionCellChange();
    }
    return *CT_RevisionCellChange::default_instance_;
    }

    bool CT_RevisionCellChange::has_rId_attr() const
    {    
    return m_has_rId_attr;
    }

    void CT_RevisionCellChange::set_rId_attr(const XSD::unsignedInt_& _rId_attr)
    {    
    m_has_rId_attr = true;
    m_rId_attr = _rId_attr;
    }

    const XSD::unsignedInt_& CT_RevisionCellChange::get_rId_attr() const
    {    
    return m_rId_attr;
    }

    bool CT_RevisionCellChange::has_ua_attr() const
    {    
    return m_has_ua_attr;
    }

    void CT_RevisionCellChange::set_ua_attr(const XSD::boolean_& _ua_attr)
    {    
    m_has_ua_attr = true;
    m_ua_attr = _ua_attr;
    }

    const XSD::boolean_& CT_RevisionCellChange::get_ua_attr() const
    {    
    return m_ua_attr;
    }

    bool CT_RevisionCellChange::has_ra_attr() const
    {    
    return m_has_ra_attr;
    }

    void CT_RevisionCellChange::set_ra_attr(const XSD::boolean_& _ra_attr)
    {    
    m_has_ra_attr = true;
    m_ra_attr = _ra_attr;
    }

    const XSD::boolean_& CT_RevisionCellChange::get_ra_attr() const
    {    
    return m_ra_attr;
    }

    bool CT_RevisionCellChange::has_sId_attr() const
    {    
    return m_has_sId_attr;
    }

    void CT_RevisionCellChange::set_sId_attr(const XSD::unsignedInt_& _sId_attr)
    {    
    m_has_sId_attr = true;
    m_sId_attr = _sId_attr;
    }

    const XSD::unsignedInt_& CT_RevisionCellChange::get_sId_attr() const
    {    
    return m_sId_attr;
    }

    bool CT_RevisionCellChange::has_odxf_attr() const
    {    
    return m_has_odxf_attr;
    }

    void CT_RevisionCellChange::set_odxf_attr(const XSD::boolean_& _odxf_attr)
    {    
    m_has_odxf_attr = true;
    m_odxf_attr = _odxf_attr;
    }

    const XSD::boolean_& CT_RevisionCellChange::get_odxf_attr() const
    {    
    return m_odxf_attr;
    }

    bool CT_RevisionCellChange::has_xfDxf_attr() const
    {    
    return m_has_xfDxf_attr;
    }

    void CT_RevisionCellChange::set_xfDxf_attr(const XSD::boolean_& _xfDxf_attr)
    {    
    m_has_xfDxf_attr = true;
    m_xfDxf_attr = _xfDxf_attr;
    }

    const XSD::boolean_& CT_RevisionCellChange::get_xfDxf_attr() const
    {    
    return m_xfDxf_attr;
    }

    bool CT_RevisionCellChange::has_s_attr() const
    {    
    return m_has_s_attr;
    }

    void CT_RevisionCellChange::set_s_attr(const XSD::boolean_& _s_attr)
    {    
    m_has_s_attr = true;
    m_s_attr = _s_attr;
    }

    const XSD::boolean_& CT_RevisionCellChange::get_s_attr() const
    {    
    return m_s_attr;
    }

    bool CT_RevisionCellChange::has_dxf_attr() const
    {    
    return m_has_dxf_attr;
    }

    void CT_RevisionCellChange::set_dxf_attr(const XSD::boolean_& _dxf_attr)
    {    
    m_has_dxf_attr = true;
    m_dxf_attr = _dxf_attr;
    }

    const XSD::boolean_& CT_RevisionCellChange::get_dxf_attr() const
    {    
    return m_dxf_attr;
    }

    bool CT_RevisionCellChange::has_numFmtId_attr() const
    {    
    return m_has_numFmtId_attr;
    }

    void CT_RevisionCellChange::set_numFmtId_attr(const ST_NumFmtId& _numFmtId_attr)
    {    
    m_has_numFmtId_attr = true;
    m_numFmtId_attr = new ST_NumFmtId(_numFmtId_attr);
    }

    const ST_NumFmtId& CT_RevisionCellChange::get_numFmtId_attr() const
    {    
    if (m_numFmtId_attr)
    {
        return *m_numFmtId_attr;
    }
    return ST_NumFmtId::default_instance();
    }

    bool CT_RevisionCellChange::has_quotePrefix_attr() const
    {    
    return m_has_quotePrefix_attr;
    }

    void CT_RevisionCellChange::set_quotePrefix_attr(const XSD::boolean_& _quotePrefix_attr)
    {    
    m_has_quotePrefix_attr = true;
    m_quotePrefix_attr = _quotePrefix_attr;
    }

    const XSD::boolean_& CT_RevisionCellChange::get_quotePrefix_attr() const
    {    
    return m_quotePrefix_attr;
    }

    bool CT_RevisionCellChange::has_oldQuotePrefix_attr() const
    {    
    return m_has_oldQuotePrefix_attr;
    }

    void CT_RevisionCellChange::set_oldQuotePrefix_attr(const XSD::boolean_& _oldQuotePrefix_attr)
    {    
    m_has_oldQuotePrefix_attr = true;
    m_oldQuotePrefix_attr = _oldQuotePrefix_attr;
    }

    const XSD::boolean_& CT_RevisionCellChange::get_oldQuotePrefix_attr() const
    {    
    return m_oldQuotePrefix_attr;
    }

    bool CT_RevisionCellChange::has_ph_attr() const
    {    
    return m_has_ph_attr;
    }

    void CT_RevisionCellChange::set_ph_attr(const XSD::boolean_& _ph_attr)
    {    
    m_has_ph_attr = true;
    m_ph_attr = _ph_attr;
    }

    const XSD::boolean_& CT_RevisionCellChange::get_ph_attr() const
    {    
    return m_ph_attr;
    }

    bool CT_RevisionCellChange::has_oldPh_attr() const
    {    
    return m_has_oldPh_attr;
    }

    void CT_RevisionCellChange::set_oldPh_attr(const XSD::boolean_& _oldPh_attr)
    {    
    m_has_oldPh_attr = true;
    m_oldPh_attr = _oldPh_attr;
    }

    const XSD::boolean_& CT_RevisionCellChange::get_oldPh_attr() const
    {    
    return m_oldPh_attr;
    }

    bool CT_RevisionCellChange::has_endOfListFormulaUpdate_attr() const
    {    
    return m_has_endOfListFormulaUpdate_attr;
    }

    void CT_RevisionCellChange::set_endOfListFormulaUpdate_attr(const XSD::boolean_& _endOfListFormulaUpdate_attr)
    {    
    m_has_endOfListFormulaUpdate_attr = true;
    m_endOfListFormulaUpdate_attr = _endOfListFormulaUpdate_attr;
    }

    const XSD::boolean_& CT_RevisionCellChange::get_endOfListFormulaUpdate_attr() const
    {    
    return m_endOfListFormulaUpdate_attr;
    }

CT_RevisionCellChange* CT_RevisionCellChange::default_instance_ = NULL;

    // CT_RevisionFormatting
    CT_RevisionFormatting::CT_RevisionFormatting()
    :m_has_dxf(false),
    m_dxf(NULL),
    m_has_extLst(false),
    m_extLst(NULL),
    m_has_sheetId_attr(false),
    m_sheetId_attr(0),
    m_has_xfDxf_attr(false),
    m_xfDxf_attr(false),
    m_has_s_attr(false),
    m_s_attr(false),
    m_has_sqref_attr(false),
    m_sqref_attr(NULL),
    m_has_start_attr(false),
    m_start_attr(0),
    m_has_length_attr(false),
    m_length_attr(0)
    {
    }
    CT_RevisionFormatting::~CT_RevisionFormatting()
{
    clear();    }
    bool CT_RevisionFormatting::has_dxf() const
    {    
    return m_has_dxf;
    }

    CT_Dxf* CT_RevisionFormatting::mutable_dxf()
    {    
    m_has_dxf = true;
    if (!m_dxf)
    {
        m_dxf = new CT_Dxf();
    }
    return m_dxf;
    }

    const CT_Dxf& CT_RevisionFormatting::get_dxf() const
    {    
    if (m_dxf)
    {
        return *m_dxf;
    }
    return CT_Dxf::default_instance();
    }

    bool CT_RevisionFormatting::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* CT_RevisionFormatting::mutable_extLst()
    {    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& CT_RevisionFormatting::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

    void CT_RevisionFormatting::clear()
    {    
    m_has_sheetId_attr = false;
    m_sheetId_attr = 0;
    
    m_has_xfDxf_attr = false;
    m_xfDxf_attr = false;
    
    m_has_s_attr = false;
    m_s_attr = false;
    
    m_has_sqref_attr = false;
    
    if (m_sqref_attr)
    {
        delete m_sqref_attr;
        m_sqref_attr = NULL;
    }
    
    
    m_has_start_attr = false;
    m_start_attr = 0;
    
    m_has_length_attr = false;
    m_length_attr = 0;
    }

    void CT_RevisionFormatting::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_sheetId_attr)
    {
        _outStream << " " << "sheetId" << "=\"" << m_sheetId_attr << "\"";
    }
    
    
    if (m_has_xfDxf_attr)
    {
        _outStream << " " << "xfDxf" << "=\"" << XSD::XMLBooleanStr(m_xfDxf_attr) << "\"";
    }
    
    
    if (m_has_s_attr)
    {
        _outStream << " " << "s" << "=\"" << XSD::XMLBooleanStr(m_s_attr) << "\"";
    }
    
    
    if (m_has_sqref_attr)
    {
        m_sqref_attr->toXmlAttr("sqref", _outStream);
    }
    
    
    if (m_has_start_attr)
    {
        _outStream << " " << "start" << "=\"" << m_start_attr << "\"";
    }
    
    
    if (m_has_length_attr)
    {
        _outStream << " " << "length" << "=\"" << m_length_attr << "\"";
    }
    
            _outStream << ">";
            
    if (m_has_dxf)
    {
        m_dxf->toXmlElem("main:dxf", "", _outStream);;
    }
    
    if (m_has_extLst)
    {
        m_extLst->toXmlElem("main:extLst", "", _outStream);;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_RevisionFormatting& CT_RevisionFormatting::default_instance()
    {    
    if (!CT_RevisionFormatting::default_instance_)
    {
        CT_RevisionFormatting::default_instance_ = new CT_RevisionFormatting();
    }
    return *CT_RevisionFormatting::default_instance_;
    }

    bool CT_RevisionFormatting::has_sheetId_attr() const
    {    
    return m_has_sheetId_attr;
    }

    void CT_RevisionFormatting::set_sheetId_attr(const XSD::unsignedInt_& _sheetId_attr)
    {    
    m_has_sheetId_attr = true;
    m_sheetId_attr = _sheetId_attr;
    }

    const XSD::unsignedInt_& CT_RevisionFormatting::get_sheetId_attr() const
    {    
    return m_sheetId_attr;
    }

    bool CT_RevisionFormatting::has_xfDxf_attr() const
    {    
    return m_has_xfDxf_attr;
    }

    void CT_RevisionFormatting::set_xfDxf_attr(const XSD::boolean_& _xfDxf_attr)
    {    
    m_has_xfDxf_attr = true;
    m_xfDxf_attr = _xfDxf_attr;
    }

    const XSD::boolean_& CT_RevisionFormatting::get_xfDxf_attr() const
    {    
    return m_xfDxf_attr;
    }

    bool CT_RevisionFormatting::has_s_attr() const
    {    
    return m_has_s_attr;
    }

    void CT_RevisionFormatting::set_s_attr(const XSD::boolean_& _s_attr)
    {    
    m_has_s_attr = true;
    m_s_attr = _s_attr;
    }

    const XSD::boolean_& CT_RevisionFormatting::get_s_attr() const
    {    
    return m_s_attr;
    }

    bool CT_RevisionFormatting::has_sqref_attr() const
    {    
    return m_has_sqref_attr;
    }

    void CT_RevisionFormatting::set_sqref_attr(const ST_Sqref& _sqref_attr)
    {    
    m_has_sqref_attr = true;
    m_sqref_attr = new ST_Sqref(_sqref_attr);
    }

    const ST_Sqref& CT_RevisionFormatting::get_sqref_attr() const
    {    
    if (m_sqref_attr)
    {
        return *m_sqref_attr;
    }
    return ST_Sqref::default_instance();
    }

    bool CT_RevisionFormatting::has_start_attr() const
    {    
    return m_has_start_attr;
    }

    void CT_RevisionFormatting::set_start_attr(const XSD::unsignedInt_& _start_attr)
    {    
    m_has_start_attr = true;
    m_start_attr = _start_attr;
    }

    const XSD::unsignedInt_& CT_RevisionFormatting::get_start_attr() const
    {    
    return m_start_attr;
    }

    bool CT_RevisionFormatting::has_length_attr() const
    {    
    return m_has_length_attr;
    }

    void CT_RevisionFormatting::set_length_attr(const XSD::unsignedInt_& _length_attr)
    {    
    m_has_length_attr = true;
    m_length_attr = _length_attr;
    }

    const XSD::unsignedInt_& CT_RevisionFormatting::get_length_attr() const
    {    
    return m_length_attr;
    }

CT_RevisionFormatting* CT_RevisionFormatting::default_instance_ = NULL;

    // CT_RevisionAutoFormatting
    CT_RevisionAutoFormatting::CT_RevisionAutoFormatting()
    :m_has_sheetId_attr(false),
    m_sheetId_attr(0),
    m_has_autoFormatId_attr(false),
    m_autoFormatId_attr(0),
    m_has_applyNumberFormats_attr(false),
    m_applyNumberFormats_attr(false),
    m_has_applyBorderFormats_attr(false),
    m_applyBorderFormats_attr(false),
    m_has_applyFontFormats_attr(false),
    m_applyFontFormats_attr(false),
    m_has_applyPatternFormats_attr(false),
    m_applyPatternFormats_attr(false),
    m_has_applyAlignmentFormats_attr(false),
    m_applyAlignmentFormats_attr(false),
    m_has_applyWidthHeightFormats_attr(false),
    m_applyWidthHeightFormats_attr(false),
    m_has_ref_attr(false),
    m_ref_attr(NULL)
    {
    }
    CT_RevisionAutoFormatting::~CT_RevisionAutoFormatting()
{
    clear();    }
    void CT_RevisionAutoFormatting::clear()
    {    
    m_has_sheetId_attr = false;
    m_sheetId_attr = 0;
    
    m_has_autoFormatId_attr = false;
    m_autoFormatId_attr = 0;
    
    m_has_applyNumberFormats_attr = false;
    m_applyNumberFormats_attr = false;
    
    m_has_applyBorderFormats_attr = false;
    m_applyBorderFormats_attr = false;
    
    m_has_applyFontFormats_attr = false;
    m_applyFontFormats_attr = false;
    
    m_has_applyPatternFormats_attr = false;
    m_applyPatternFormats_attr = false;
    
    m_has_applyAlignmentFormats_attr = false;
    m_applyAlignmentFormats_attr = false;
    
    m_has_applyWidthHeightFormats_attr = false;
    m_applyWidthHeightFormats_attr = false;
    
    m_has_ref_attr = false;
    
    if (m_ref_attr)
    {
        delete m_ref_attr;
        m_ref_attr = NULL;
    }
    
    }

    void CT_RevisionAutoFormatting::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_sheetId_attr)
    {
        _outStream << " " << "sheetId" << "=\"" << m_sheetId_attr << "\"";
    }
    
    
    if (m_has_autoFormatId_attr)
    {
        _outStream << " " << "autoFormatId" << "=\"" << m_autoFormatId_attr << "\"";
    }
    
    
    if (m_has_applyNumberFormats_attr)
    {
        _outStream << " " << "applyNumberFormats" << "=\"" << XSD::XMLBooleanStr(m_applyNumberFormats_attr) << "\"";
    }
    
    
    if (m_has_applyBorderFormats_attr)
    {
        _outStream << " " << "applyBorderFormats" << "=\"" << XSD::XMLBooleanStr(m_applyBorderFormats_attr) << "\"";
    }
    
    
    if (m_has_applyFontFormats_attr)
    {
        _outStream << " " << "applyFontFormats" << "=\"" << XSD::XMLBooleanStr(m_applyFontFormats_attr) << "\"";
    }
    
    
    if (m_has_applyPatternFormats_attr)
    {
        _outStream << " " << "applyPatternFormats" << "=\"" << XSD::XMLBooleanStr(m_applyPatternFormats_attr) << "\"";
    }
    
    
    if (m_has_applyAlignmentFormats_attr)
    {
        _outStream << " " << "applyAlignmentFormats" << "=\"" << XSD::XMLBooleanStr(m_applyAlignmentFormats_attr) << "\"";
    }
    
    
    if (m_has_applyWidthHeightFormats_attr)
    {
        _outStream << " " << "applyWidthHeightFormats" << "=\"" << XSD::XMLBooleanStr(m_applyWidthHeightFormats_attr) << "\"";
    }
    
    
    if (m_has_ref_attr)
    {
        m_ref_attr->toXmlAttr("ref", _outStream);
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_RevisionAutoFormatting& CT_RevisionAutoFormatting::default_instance()
    {    
    if (!CT_RevisionAutoFormatting::default_instance_)
    {
        CT_RevisionAutoFormatting::default_instance_ = new CT_RevisionAutoFormatting();
    }
    return *CT_RevisionAutoFormatting::default_instance_;
    }

    bool CT_RevisionAutoFormatting::has_sheetId_attr() const
    {    
    return m_has_sheetId_attr;
    }

    void CT_RevisionAutoFormatting::set_sheetId_attr(const XSD::unsignedInt_& _sheetId_attr)
    {    
    m_has_sheetId_attr = true;
    m_sheetId_attr = _sheetId_attr;
    }

    const XSD::unsignedInt_& CT_RevisionAutoFormatting::get_sheetId_attr() const
    {    
    return m_sheetId_attr;
    }

    bool CT_RevisionAutoFormatting::has_autoFormatId_attr() const
    {    
    return m_has_autoFormatId_attr;
    }

    void CT_RevisionAutoFormatting::set_autoFormatId_attr(const XSD::unsignedInt_& _autoFormatId_attr)
    {    
    m_has_autoFormatId_attr = true;
    m_autoFormatId_attr = _autoFormatId_attr;
    }

    const XSD::unsignedInt_& CT_RevisionAutoFormatting::get_autoFormatId_attr() const
    {    
    return m_autoFormatId_attr;
    }

    bool CT_RevisionAutoFormatting::has_applyNumberFormats_attr() const
    {    
    return m_has_applyNumberFormats_attr;
    }

    void CT_RevisionAutoFormatting::set_applyNumberFormats_attr(const XSD::boolean_& _applyNumberFormats_attr)
    {    
    m_has_applyNumberFormats_attr = true;
    m_applyNumberFormats_attr = _applyNumberFormats_attr;
    }

    const XSD::boolean_& CT_RevisionAutoFormatting::get_applyNumberFormats_attr() const
    {    
    return m_applyNumberFormats_attr;
    }

    bool CT_RevisionAutoFormatting::has_applyBorderFormats_attr() const
    {    
    return m_has_applyBorderFormats_attr;
    }

    void CT_RevisionAutoFormatting::set_applyBorderFormats_attr(const XSD::boolean_& _applyBorderFormats_attr)
    {    
    m_has_applyBorderFormats_attr = true;
    m_applyBorderFormats_attr = _applyBorderFormats_attr;
    }

    const XSD::boolean_& CT_RevisionAutoFormatting::get_applyBorderFormats_attr() const
    {    
    return m_applyBorderFormats_attr;
    }

    bool CT_RevisionAutoFormatting::has_applyFontFormats_attr() const
    {    
    return m_has_applyFontFormats_attr;
    }

    void CT_RevisionAutoFormatting::set_applyFontFormats_attr(const XSD::boolean_& _applyFontFormats_attr)
    {    
    m_has_applyFontFormats_attr = true;
    m_applyFontFormats_attr = _applyFontFormats_attr;
    }

    const XSD::boolean_& CT_RevisionAutoFormatting::get_applyFontFormats_attr() const
    {    
    return m_applyFontFormats_attr;
    }

    bool CT_RevisionAutoFormatting::has_applyPatternFormats_attr() const
    {    
    return m_has_applyPatternFormats_attr;
    }

    void CT_RevisionAutoFormatting::set_applyPatternFormats_attr(const XSD::boolean_& _applyPatternFormats_attr)
    {    
    m_has_applyPatternFormats_attr = true;
    m_applyPatternFormats_attr = _applyPatternFormats_attr;
    }

    const XSD::boolean_& CT_RevisionAutoFormatting::get_applyPatternFormats_attr() const
    {    
    return m_applyPatternFormats_attr;
    }

    bool CT_RevisionAutoFormatting::has_applyAlignmentFormats_attr() const
    {    
    return m_has_applyAlignmentFormats_attr;
    }

    void CT_RevisionAutoFormatting::set_applyAlignmentFormats_attr(const XSD::boolean_& _applyAlignmentFormats_attr)
    {    
    m_has_applyAlignmentFormats_attr = true;
    m_applyAlignmentFormats_attr = _applyAlignmentFormats_attr;
    }

    const XSD::boolean_& CT_RevisionAutoFormatting::get_applyAlignmentFormats_attr() const
    {    
    return m_applyAlignmentFormats_attr;
    }

    bool CT_RevisionAutoFormatting::has_applyWidthHeightFormats_attr() const
    {    
    return m_has_applyWidthHeightFormats_attr;
    }

    void CT_RevisionAutoFormatting::set_applyWidthHeightFormats_attr(const XSD::boolean_& _applyWidthHeightFormats_attr)
    {    
    m_has_applyWidthHeightFormats_attr = true;
    m_applyWidthHeightFormats_attr = _applyWidthHeightFormats_attr;
    }

    const XSD::boolean_& CT_RevisionAutoFormatting::get_applyWidthHeightFormats_attr() const
    {    
    return m_applyWidthHeightFormats_attr;
    }

    bool CT_RevisionAutoFormatting::has_ref_attr() const
    {    
    return m_has_ref_attr;
    }

    void CT_RevisionAutoFormatting::set_ref_attr(const ST_Ref& _ref_attr)
    {    
    m_has_ref_attr = true;
    m_ref_attr = new ST_Ref(_ref_attr);
    }

    const ST_Ref& CT_RevisionAutoFormatting::get_ref_attr() const
    {    
    if (m_ref_attr)
    {
        return *m_ref_attr;
    }
    return ST_Ref::default_instance();
    }

CT_RevisionAutoFormatting* CT_RevisionAutoFormatting::default_instance_ = NULL;

    // CT_RevisionComment
    CT_RevisionComment::CT_RevisionComment()
    :m_has_sheetId_attr(false),
    m_sheetId_attr(0),
    m_has_cell_attr(false),
    m_cell_attr(NULL),
    m_has_guid_attr(false),
    m_guid_attr(NULL),
    m_has_action_attr(false),
    m_action_attr(NULL),
    m_has_alwaysShow_attr(false),
    m_alwaysShow_attr(false),
    m_has_old_attr(false),
    m_old_attr(false),
    m_has_hiddenRow_attr(false),
    m_hiddenRow_attr(false),
    m_has_hiddenColumn_attr(false),
    m_hiddenColumn_attr(false),
    m_has_author_attr(false),
    m_author_attr(NULL),
    m_has_oldLength_attr(false),
    m_oldLength_attr(0),
    m_has_newLength_attr(false),
    m_newLength_attr(0)
    {
    }
    CT_RevisionComment::~CT_RevisionComment()
{
    clear();    }
    void CT_RevisionComment::clear()
    {    
    m_has_sheetId_attr = false;
    m_sheetId_attr = 0;
    
    m_has_cell_attr = false;
    
    if (m_cell_attr)
    {
        delete m_cell_attr;
        m_cell_attr = NULL;
    }
    
    
    m_has_guid_attr = false;
    
    if (m_guid_attr)
    {
        delete m_guid_attr;
        m_guid_attr = NULL;
    }
    
    
    m_has_action_attr = false;
    
    if (m_action_attr)
    {
        delete m_action_attr;
        m_action_attr = NULL;
    }
    
    
    m_has_alwaysShow_attr = false;
    m_alwaysShow_attr = false;
    
    m_has_old_attr = false;
    m_old_attr = false;
    
    m_has_hiddenRow_attr = false;
    m_hiddenRow_attr = false;
    
    m_has_hiddenColumn_attr = false;
    m_hiddenColumn_attr = false;
    
    m_has_author_attr = false;
    
    if (m_author_attr)
    {
        delete m_author_attr;
        m_author_attr = NULL;
    }
    
    
    m_has_oldLength_attr = false;
    m_oldLength_attr = 0;
    
    m_has_newLength_attr = false;
    m_newLength_attr = 0;
    }

    void CT_RevisionComment::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_sheetId_attr)
    {
        _outStream << " " << "sheetId" << "=\"" << m_sheetId_attr << "\"";
    }
    
    
    if (m_has_cell_attr)
    {
        m_cell_attr->toXmlAttr("cell", _outStream);
    }
    
    
    if (m_has_guid_attr)
    {
        m_guid_attr->toXmlAttr("guid", _outStream);
    }
    
    
    if (m_has_action_attr)
    {
        m_action_attr->toXmlAttr("action", _outStream);
    }
    
    
    if (m_has_alwaysShow_attr)
    {
        _outStream << " " << "alwaysShow" << "=\"" << XSD::XMLBooleanStr(m_alwaysShow_attr) << "\"";
    }
    
    
    if (m_has_old_attr)
    {
        _outStream << " " << "old" << "=\"" << XSD::XMLBooleanStr(m_old_attr) << "\"";
    }
    
    
    if (m_has_hiddenRow_attr)
    {
        _outStream << " " << "hiddenRow" << "=\"" << XSD::XMLBooleanStr(m_hiddenRow_attr) << "\"";
    }
    
    
    if (m_has_hiddenColumn_attr)
    {
        _outStream << " " << "hiddenColumn" << "=\"" << XSD::XMLBooleanStr(m_hiddenColumn_attr) << "\"";
    }
    
    
    if (m_has_author_attr)
    {
        m_author_attr->toXmlAttr("author", _outStream);
    }
    
    
    if (m_has_oldLength_attr)
    {
        _outStream << " " << "oldLength" << "=\"" << m_oldLength_attr << "\"";
    }
    
    
    if (m_has_newLength_attr)
    {
        _outStream << " " << "newLength" << "=\"" << m_newLength_attr << "\"";
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_RevisionComment& CT_RevisionComment::default_instance()
    {    
    if (!CT_RevisionComment::default_instance_)
    {
        CT_RevisionComment::default_instance_ = new CT_RevisionComment();
    }
    return *CT_RevisionComment::default_instance_;
    }

    bool CT_RevisionComment::has_sheetId_attr() const
    {    
    return m_has_sheetId_attr;
    }

    void CT_RevisionComment::set_sheetId_attr(const XSD::unsignedInt_& _sheetId_attr)
    {    
    m_has_sheetId_attr = true;
    m_sheetId_attr = _sheetId_attr;
    }

    const XSD::unsignedInt_& CT_RevisionComment::get_sheetId_attr() const
    {    
    return m_sheetId_attr;
    }

    bool CT_RevisionComment::has_cell_attr() const
    {    
    return m_has_cell_attr;
    }

    void CT_RevisionComment::set_cell_attr(const ST_CellRef& _cell_attr)
    {    
    m_has_cell_attr = true;
    m_cell_attr = new ST_CellRef(_cell_attr);
    }

    const ST_CellRef& CT_RevisionComment::get_cell_attr() const
    {    
    if (m_cell_attr)
    {
        return *m_cell_attr;
    }
    return ST_CellRef::default_instance();
    }

    bool CT_RevisionComment::has_guid_attr() const
    {    
    return m_has_guid_attr;
    }

    void CT_RevisionComment::set_guid_attr(const ns_s::ST_Guid& _guid_attr)
    {    
    m_has_guid_attr = true;
    m_guid_attr = new ns_s::ST_Guid(_guid_attr);
    }

    const ns_s::ST_Guid& CT_RevisionComment::get_guid_attr() const
    {    
    if (m_guid_attr)
    {
        return *m_guid_attr;
    }
    return ns_s::ST_Guid::default_instance();
    }

    bool CT_RevisionComment::has_action_attr() const
    {    
    return m_has_action_attr;
    }

    void CT_RevisionComment::set_action_attr(const ST_RevisionAction& _action_attr)
    {    
    m_has_action_attr = true;
    m_action_attr = new ST_RevisionAction(_action_attr);
    }

    const ST_RevisionAction& CT_RevisionComment::get_action_attr() const
    {    
    if (m_action_attr)
    {
        return *m_action_attr;
    }
    return ST_RevisionAction::default_instance();
    }

    bool CT_RevisionComment::has_alwaysShow_attr() const
    {    
    return m_has_alwaysShow_attr;
    }

    void CT_RevisionComment::set_alwaysShow_attr(const XSD::boolean_& _alwaysShow_attr)
    {    
    m_has_alwaysShow_attr = true;
    m_alwaysShow_attr = _alwaysShow_attr;
    }

    const XSD::boolean_& CT_RevisionComment::get_alwaysShow_attr() const
    {    
    return m_alwaysShow_attr;
    }

    bool CT_RevisionComment::has_old_attr() const
    {    
    return m_has_old_attr;
    }

    void CT_RevisionComment::set_old_attr(const XSD::boolean_& _old_attr)
    {    
    m_has_old_attr = true;
    m_old_attr = _old_attr;
    }

    const XSD::boolean_& CT_RevisionComment::get_old_attr() const
    {    
    return m_old_attr;
    }

    bool CT_RevisionComment::has_hiddenRow_attr() const
    {    
    return m_has_hiddenRow_attr;
    }

    void CT_RevisionComment::set_hiddenRow_attr(const XSD::boolean_& _hiddenRow_attr)
    {    
    m_has_hiddenRow_attr = true;
    m_hiddenRow_attr = _hiddenRow_attr;
    }

    const XSD::boolean_& CT_RevisionComment::get_hiddenRow_attr() const
    {    
    return m_hiddenRow_attr;
    }

    bool CT_RevisionComment::has_hiddenColumn_attr() const
    {    
    return m_has_hiddenColumn_attr;
    }

    void CT_RevisionComment::set_hiddenColumn_attr(const XSD::boolean_& _hiddenColumn_attr)
    {    
    m_has_hiddenColumn_attr = true;
    m_hiddenColumn_attr = _hiddenColumn_attr;
    }

    const XSD::boolean_& CT_RevisionComment::get_hiddenColumn_attr() const
    {    
    return m_hiddenColumn_attr;
    }

    bool CT_RevisionComment::has_author_attr() const
    {    
    return m_has_author_attr;
    }

    void CT_RevisionComment::set_author_attr(const ns_s::ST_Xstring& _author_attr)
    {    
    m_has_author_attr = true;
    m_author_attr = new ns_s::ST_Xstring(_author_attr);
    }

    const ns_s::ST_Xstring& CT_RevisionComment::get_author_attr() const
    {    
    if (m_author_attr)
    {
        return *m_author_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_RevisionComment::has_oldLength_attr() const
    {    
    return m_has_oldLength_attr;
    }

    void CT_RevisionComment::set_oldLength_attr(const XSD::unsignedInt_& _oldLength_attr)
    {    
    m_has_oldLength_attr = true;
    m_oldLength_attr = _oldLength_attr;
    }

    const XSD::unsignedInt_& CT_RevisionComment::get_oldLength_attr() const
    {    
    return m_oldLength_attr;
    }

    bool CT_RevisionComment::has_newLength_attr() const
    {    
    return m_has_newLength_attr;
    }

    void CT_RevisionComment::set_newLength_attr(const XSD::unsignedInt_& _newLength_attr)
    {    
    m_has_newLength_attr = true;
    m_newLength_attr = _newLength_attr;
    }

    const XSD::unsignedInt_& CT_RevisionComment::get_newLength_attr() const
    {    
    return m_newLength_attr;
    }

CT_RevisionComment* CT_RevisionComment::default_instance_ = NULL;

    // CT_RevisionDefinedName
    CT_RevisionDefinedName::CT_RevisionDefinedName()
    :m_has_formula(false),
    m_formula(NULL),
    m_has_oldFormula(false),
    m_oldFormula(NULL),
    m_has_extLst(false),
    m_extLst(NULL),
    m_has_rId_attr(false),
    m_rId_attr(0),
    m_has_ua_attr(false),
    m_ua_attr(false),
    m_has_ra_attr(false),
    m_ra_attr(false),
    m_has_localSheetId_attr(false),
    m_localSheetId_attr(0),
    m_has_customView_attr(false),
    m_customView_attr(false),
    m_has_name_attr(false),
    m_name_attr(NULL),
    m_has_function_attr(false),
    m_function_attr(false),
    m_has_oldFunction_attr(false),
    m_oldFunction_attr(false),
    m_has_functionGroupId_attr(false),
    m_functionGroupId_attr(0),
    m_has_oldFunctionGroupId_attr(false),
    m_oldFunctionGroupId_attr(0),
    m_has_shortcutKey_attr(false),
    m_shortcutKey_attr(0),
    m_has_oldShortcutKey_attr(false),
    m_oldShortcutKey_attr(0),
    m_has_hidden_attr(false),
    m_hidden_attr(false),
    m_has_oldHidden_attr(false),
    m_oldHidden_attr(false),
    m_has_customMenu_attr(false),
    m_customMenu_attr(NULL),
    m_has_oldCustomMenu_attr(false),
    m_oldCustomMenu_attr(NULL),
    m_has_description_attr(false),
    m_description_attr(NULL),
    m_has_oldDescription_attr(false),
    m_oldDescription_attr(NULL),
    m_has_help_attr(false),
    m_help_attr(NULL),
    m_has_oldHelp_attr(false),
    m_oldHelp_attr(NULL),
    m_has_statusBar_attr(false),
    m_statusBar_attr(NULL),
    m_has_oldStatusBar_attr(false),
    m_oldStatusBar_attr(NULL),
    m_has_comment_attr(false),
    m_comment_attr(NULL),
    m_has_oldComment_attr(false),
    m_oldComment_attr(NULL)
    {
    }
    CT_RevisionDefinedName::~CT_RevisionDefinedName()
{
    clear();    }
    bool CT_RevisionDefinedName::has_formula() const
    {    
    return m_has_formula;
    }

    ST_Formula* CT_RevisionDefinedName::mutable_formula()
    {    
    m_has_formula = true;
    if (!m_formula)
    {
        m_formula = new ST_Formula();
    }
    return m_formula;
    }

    const ST_Formula& CT_RevisionDefinedName::get_formula() const
    {    
    if (m_formula)
    {
        return *m_formula;
    }
    return ST_Formula::default_instance();
    }

    bool CT_RevisionDefinedName::has_oldFormula() const
    {    
    return m_has_oldFormula;
    }

    ST_Formula* CT_RevisionDefinedName::mutable_oldFormula()
    {    
    m_has_oldFormula = true;
    if (!m_oldFormula)
    {
        m_oldFormula = new ST_Formula();
    }
    return m_oldFormula;
    }

    const ST_Formula& CT_RevisionDefinedName::get_oldFormula() const
    {    
    if (m_oldFormula)
    {
        return *m_oldFormula;
    }
    return ST_Formula::default_instance();
    }

    bool CT_RevisionDefinedName::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* CT_RevisionDefinedName::mutable_extLst()
    {    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& CT_RevisionDefinedName::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

    void CT_RevisionDefinedName::clear()
    {    
    m_has_rId_attr = false;
    m_rId_attr = 0;
    
    m_has_ua_attr = false;
    m_ua_attr = false;
    
    m_has_ra_attr = false;
    m_ra_attr = false;
    
    m_has_localSheetId_attr = false;
    m_localSheetId_attr = 0;
    
    m_has_customView_attr = false;
    m_customView_attr = false;
    
    m_has_name_attr = false;
    
    if (m_name_attr)
    {
        delete m_name_attr;
        m_name_attr = NULL;
    }
    
    
    m_has_function_attr = false;
    m_function_attr = false;
    
    m_has_oldFunction_attr = false;
    m_oldFunction_attr = false;
    
    m_has_functionGroupId_attr = false;
    m_functionGroupId_attr = 0;
    
    m_has_oldFunctionGroupId_attr = false;
    m_oldFunctionGroupId_attr = 0;
    
    m_has_shortcutKey_attr = false;
    m_shortcutKey_attr = 0;
    
    m_has_oldShortcutKey_attr = false;
    m_oldShortcutKey_attr = 0;
    
    m_has_hidden_attr = false;
    m_hidden_attr = false;
    
    m_has_oldHidden_attr = false;
    m_oldHidden_attr = false;
    
    m_has_customMenu_attr = false;
    
    if (m_customMenu_attr)
    {
        delete m_customMenu_attr;
        m_customMenu_attr = NULL;
    }
    
    
    m_has_oldCustomMenu_attr = false;
    
    if (m_oldCustomMenu_attr)
    {
        delete m_oldCustomMenu_attr;
        m_oldCustomMenu_attr = NULL;
    }
    
    
    m_has_description_attr = false;
    
    if (m_description_attr)
    {
        delete m_description_attr;
        m_description_attr = NULL;
    }
    
    
    m_has_oldDescription_attr = false;
    
    if (m_oldDescription_attr)
    {
        delete m_oldDescription_attr;
        m_oldDescription_attr = NULL;
    }
    
    
    m_has_help_attr = false;
    
    if (m_help_attr)
    {
        delete m_help_attr;
        m_help_attr = NULL;
    }
    
    
    m_has_oldHelp_attr = false;
    
    if (m_oldHelp_attr)
    {
        delete m_oldHelp_attr;
        m_oldHelp_attr = NULL;
    }
    
    
    m_has_statusBar_attr = false;
    
    if (m_statusBar_attr)
    {
        delete m_statusBar_attr;
        m_statusBar_attr = NULL;
    }
    
    
    m_has_oldStatusBar_attr = false;
    
    if (m_oldStatusBar_attr)
    {
        delete m_oldStatusBar_attr;
        m_oldStatusBar_attr = NULL;
    }
    
    
    m_has_comment_attr = false;
    
    if (m_comment_attr)
    {
        delete m_comment_attr;
        m_comment_attr = NULL;
    }
    
    
    m_has_oldComment_attr = false;
    
    if (m_oldComment_attr)
    {
        delete m_oldComment_attr;
        m_oldComment_attr = NULL;
    }
    
    }

    void CT_RevisionDefinedName::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_rId_attr)
    {
        _outStream << " " << "rId" << "=\"" << m_rId_attr << "\"";
    }
    
    
    if (m_has_ua_attr)
    {
        _outStream << " " << "ua" << "=\"" << XSD::XMLBooleanStr(m_ua_attr) << "\"";
    }
    
    
    if (m_has_ra_attr)
    {
        _outStream << " " << "ra" << "=\"" << XSD::XMLBooleanStr(m_ra_attr) << "\"";
    }
    
    
    if (m_has_localSheetId_attr)
    {
        _outStream << " " << "localSheetId" << "=\"" << m_localSheetId_attr << "\"";
    }
    
    
    if (m_has_customView_attr)
    {
        _outStream << " " << "customView" << "=\"" << XSD::XMLBooleanStr(m_customView_attr) << "\"";
    }
    
    
    if (m_has_name_attr)
    {
        m_name_attr->toXmlAttr("name", _outStream);
    }
    
    
    if (m_has_function_attr)
    {
        _outStream << " " << "function" << "=\"" << XSD::XMLBooleanStr(m_function_attr) << "\"";
    }
    
    
    if (m_has_oldFunction_attr)
    {
        _outStream << " " << "oldFunction" << "=\"" << XSD::XMLBooleanStr(m_oldFunction_attr) << "\"";
    }
    
    
    if (m_has_functionGroupId_attr)
    {
        _outStream << " " << "functionGroupId" << "=\"" << m_functionGroupId_attr << "\"";
    }
    
    
    if (m_has_oldFunctionGroupId_attr)
    {
        _outStream << " " << "oldFunctionGroupId" << "=\"" << m_oldFunctionGroupId_attr << "\"";
    }
    
    
    if (m_has_shortcutKey_attr)
    {
        _outStream << " " << "shortcutKey" << "=\"" << m_shortcutKey_attr << "\"";
    }
    
    
    if (m_has_oldShortcutKey_attr)
    {
        _outStream << " " << "oldShortcutKey" << "=\"" << m_oldShortcutKey_attr << "\"";
    }
    
    
    if (m_has_hidden_attr)
    {
        _outStream << " " << "hidden" << "=\"" << XSD::XMLBooleanStr(m_hidden_attr) << "\"";
    }
    
    
    if (m_has_oldHidden_attr)
    {
        _outStream << " " << "oldHidden" << "=\"" << XSD::XMLBooleanStr(m_oldHidden_attr) << "\"";
    }
    
    
    if (m_has_customMenu_attr)
    {
        m_customMenu_attr->toXmlAttr("customMenu", _outStream);
    }
    
    
    if (m_has_oldCustomMenu_attr)
    {
        m_oldCustomMenu_attr->toXmlAttr("oldCustomMenu", _outStream);
    }
    
    
    if (m_has_description_attr)
    {
        m_description_attr->toXmlAttr("description", _outStream);
    }
    
    
    if (m_has_oldDescription_attr)
    {
        m_oldDescription_attr->toXmlAttr("oldDescription", _outStream);
    }
    
    
    if (m_has_help_attr)
    {
        m_help_attr->toXmlAttr("help", _outStream);
    }
    
    
    if (m_has_oldHelp_attr)
    {
        m_oldHelp_attr->toXmlAttr("oldHelp", _outStream);
    }
    
    
    if (m_has_statusBar_attr)
    {
        m_statusBar_attr->toXmlAttr("statusBar", _outStream);
    }
    
    
    if (m_has_oldStatusBar_attr)
    {
        m_oldStatusBar_attr->toXmlAttr("oldStatusBar", _outStream);
    }
    
    
    if (m_has_comment_attr)
    {
        m_comment_attr->toXmlAttr("comment", _outStream);
    }
    
    
    if (m_has_oldComment_attr)
    {
        m_oldComment_attr->toXmlAttr("oldComment", _outStream);
    }
    
            _outStream << ">";
            
    if (m_has_formula)
    {
        _outStream << "<main:formula>" << m_formula->toString() << "</main:formula>";;
    }
    
    if (m_has_oldFormula)
    {
        _outStream << "<main:oldFormula>" << m_oldFormula->toString() << "</main:oldFormula>";;
    }
    
    if (m_has_extLst)
    {
        m_extLst->toXmlElem("main:extLst", "", _outStream);;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_RevisionDefinedName& CT_RevisionDefinedName::default_instance()
    {    
    if (!CT_RevisionDefinedName::default_instance_)
    {
        CT_RevisionDefinedName::default_instance_ = new CT_RevisionDefinedName();
    }
    return *CT_RevisionDefinedName::default_instance_;
    }

    bool CT_RevisionDefinedName::has_rId_attr() const
    {    
    return m_has_rId_attr;
    }

    void CT_RevisionDefinedName::set_rId_attr(const XSD::unsignedInt_& _rId_attr)
    {    
    m_has_rId_attr = true;
    m_rId_attr = _rId_attr;
    }

    const XSD::unsignedInt_& CT_RevisionDefinedName::get_rId_attr() const
    {    
    return m_rId_attr;
    }

    bool CT_RevisionDefinedName::has_ua_attr() const
    {    
    return m_has_ua_attr;
    }

    void CT_RevisionDefinedName::set_ua_attr(const XSD::boolean_& _ua_attr)
    {    
    m_has_ua_attr = true;
    m_ua_attr = _ua_attr;
    }

    const XSD::boolean_& CT_RevisionDefinedName::get_ua_attr() const
    {    
    return m_ua_attr;
    }

    bool CT_RevisionDefinedName::has_ra_attr() const
    {    
    return m_has_ra_attr;
    }

    void CT_RevisionDefinedName::set_ra_attr(const XSD::boolean_& _ra_attr)
    {    
    m_has_ra_attr = true;
    m_ra_attr = _ra_attr;
    }

    const XSD::boolean_& CT_RevisionDefinedName::get_ra_attr() const
    {    
    return m_ra_attr;
    }

    bool CT_RevisionDefinedName::has_localSheetId_attr() const
    {    
    return m_has_localSheetId_attr;
    }

    void CT_RevisionDefinedName::set_localSheetId_attr(const XSD::unsignedInt_& _localSheetId_attr)
    {    
    m_has_localSheetId_attr = true;
    m_localSheetId_attr = _localSheetId_attr;
    }

    const XSD::unsignedInt_& CT_RevisionDefinedName::get_localSheetId_attr() const
    {    
    return m_localSheetId_attr;
    }

    bool CT_RevisionDefinedName::has_customView_attr() const
    {    
    return m_has_customView_attr;
    }

    void CT_RevisionDefinedName::set_customView_attr(const XSD::boolean_& _customView_attr)
    {    
    m_has_customView_attr = true;
    m_customView_attr = _customView_attr;
    }

    const XSD::boolean_& CT_RevisionDefinedName::get_customView_attr() const
    {    
    return m_customView_attr;
    }

    bool CT_RevisionDefinedName::has_name_attr() const
    {    
    return m_has_name_attr;
    }

    void CT_RevisionDefinedName::set_name_attr(const ns_s::ST_Xstring& _name_attr)
    {    
    m_has_name_attr = true;
    m_name_attr = new ns_s::ST_Xstring(_name_attr);
    }

    const ns_s::ST_Xstring& CT_RevisionDefinedName::get_name_attr() const
    {    
    if (m_name_attr)
    {
        return *m_name_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_RevisionDefinedName::has_function_attr() const
    {    
    return m_has_function_attr;
    }

    void CT_RevisionDefinedName::set_function_attr(const XSD::boolean_& _function_attr)
    {    
    m_has_function_attr = true;
    m_function_attr = _function_attr;
    }

    const XSD::boolean_& CT_RevisionDefinedName::get_function_attr() const
    {    
    return m_function_attr;
    }

    bool CT_RevisionDefinedName::has_oldFunction_attr() const
    {    
    return m_has_oldFunction_attr;
    }

    void CT_RevisionDefinedName::set_oldFunction_attr(const XSD::boolean_& _oldFunction_attr)
    {    
    m_has_oldFunction_attr = true;
    m_oldFunction_attr = _oldFunction_attr;
    }

    const XSD::boolean_& CT_RevisionDefinedName::get_oldFunction_attr() const
    {    
    return m_oldFunction_attr;
    }

    bool CT_RevisionDefinedName::has_functionGroupId_attr() const
    {    
    return m_has_functionGroupId_attr;
    }

    void CT_RevisionDefinedName::set_functionGroupId_attr(const XSD::unsignedByte_& _functionGroupId_attr)
    {    
    m_has_functionGroupId_attr = true;
    m_functionGroupId_attr = _functionGroupId_attr;
    }

    const XSD::unsignedByte_& CT_RevisionDefinedName::get_functionGroupId_attr() const
    {    
    return m_functionGroupId_attr;
    }

    bool CT_RevisionDefinedName::has_oldFunctionGroupId_attr() const
    {    
    return m_has_oldFunctionGroupId_attr;
    }

    void CT_RevisionDefinedName::set_oldFunctionGroupId_attr(const XSD::unsignedByte_& _oldFunctionGroupId_attr)
    {    
    m_has_oldFunctionGroupId_attr = true;
    m_oldFunctionGroupId_attr = _oldFunctionGroupId_attr;
    }

    const XSD::unsignedByte_& CT_RevisionDefinedName::get_oldFunctionGroupId_attr() const
    {    
    return m_oldFunctionGroupId_attr;
    }

    bool CT_RevisionDefinedName::has_shortcutKey_attr() const
    {    
    return m_has_shortcutKey_attr;
    }

    void CT_RevisionDefinedName::set_shortcutKey_attr(const XSD::unsignedByte_& _shortcutKey_attr)
    {    
    m_has_shortcutKey_attr = true;
    m_shortcutKey_attr = _shortcutKey_attr;
    }

    const XSD::unsignedByte_& CT_RevisionDefinedName::get_shortcutKey_attr() const
    {    
    return m_shortcutKey_attr;
    }

    bool CT_RevisionDefinedName::has_oldShortcutKey_attr() const
    {    
    return m_has_oldShortcutKey_attr;
    }

    void CT_RevisionDefinedName::set_oldShortcutKey_attr(const XSD::unsignedByte_& _oldShortcutKey_attr)
    {    
    m_has_oldShortcutKey_attr = true;
    m_oldShortcutKey_attr = _oldShortcutKey_attr;
    }

    const XSD::unsignedByte_& CT_RevisionDefinedName::get_oldShortcutKey_attr() const
    {    
    return m_oldShortcutKey_attr;
    }

    bool CT_RevisionDefinedName::has_hidden_attr() const
    {    
    return m_has_hidden_attr;
    }

    void CT_RevisionDefinedName::set_hidden_attr(const XSD::boolean_& _hidden_attr)
    {    
    m_has_hidden_attr = true;
    m_hidden_attr = _hidden_attr;
    }

    const XSD::boolean_& CT_RevisionDefinedName::get_hidden_attr() const
    {    
    return m_hidden_attr;
    }

    bool CT_RevisionDefinedName::has_oldHidden_attr() const
    {    
    return m_has_oldHidden_attr;
    }

    void CT_RevisionDefinedName::set_oldHidden_attr(const XSD::boolean_& _oldHidden_attr)
    {    
    m_has_oldHidden_attr = true;
    m_oldHidden_attr = _oldHidden_attr;
    }

    const XSD::boolean_& CT_RevisionDefinedName::get_oldHidden_attr() const
    {    
    return m_oldHidden_attr;
    }

    bool CT_RevisionDefinedName::has_customMenu_attr() const
    {    
    return m_has_customMenu_attr;
    }

    void CT_RevisionDefinedName::set_customMenu_attr(const ns_s::ST_Xstring& _customMenu_attr)
    {    
    m_has_customMenu_attr = true;
    m_customMenu_attr = new ns_s::ST_Xstring(_customMenu_attr);
    }

    const ns_s::ST_Xstring& CT_RevisionDefinedName::get_customMenu_attr() const
    {    
    if (m_customMenu_attr)
    {
        return *m_customMenu_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_RevisionDefinedName::has_oldCustomMenu_attr() const
    {    
    return m_has_oldCustomMenu_attr;
    }

    void CT_RevisionDefinedName::set_oldCustomMenu_attr(const ns_s::ST_Xstring& _oldCustomMenu_attr)
    {    
    m_has_oldCustomMenu_attr = true;
    m_oldCustomMenu_attr = new ns_s::ST_Xstring(_oldCustomMenu_attr);
    }

    const ns_s::ST_Xstring& CT_RevisionDefinedName::get_oldCustomMenu_attr() const
    {    
    if (m_oldCustomMenu_attr)
    {
        return *m_oldCustomMenu_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_RevisionDefinedName::has_description_attr() const
    {    
    return m_has_description_attr;
    }

    void CT_RevisionDefinedName::set_description_attr(const ns_s::ST_Xstring& _description_attr)
    {    
    m_has_description_attr = true;
    m_description_attr = new ns_s::ST_Xstring(_description_attr);
    }

    const ns_s::ST_Xstring& CT_RevisionDefinedName::get_description_attr() const
    {    
    if (m_description_attr)
    {
        return *m_description_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_RevisionDefinedName::has_oldDescription_attr() const
    {    
    return m_has_oldDescription_attr;
    }

    void CT_RevisionDefinedName::set_oldDescription_attr(const ns_s::ST_Xstring& _oldDescription_attr)
    {    
    m_has_oldDescription_attr = true;
    m_oldDescription_attr = new ns_s::ST_Xstring(_oldDescription_attr);
    }

    const ns_s::ST_Xstring& CT_RevisionDefinedName::get_oldDescription_attr() const
    {    
    if (m_oldDescription_attr)
    {
        return *m_oldDescription_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_RevisionDefinedName::has_help_attr() const
    {    
    return m_has_help_attr;
    }

    void CT_RevisionDefinedName::set_help_attr(const ns_s::ST_Xstring& _help_attr)
    {    
    m_has_help_attr = true;
    m_help_attr = new ns_s::ST_Xstring(_help_attr);
    }

    const ns_s::ST_Xstring& CT_RevisionDefinedName::get_help_attr() const
    {    
    if (m_help_attr)
    {
        return *m_help_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_RevisionDefinedName::has_oldHelp_attr() const
    {    
    return m_has_oldHelp_attr;
    }

    void CT_RevisionDefinedName::set_oldHelp_attr(const ns_s::ST_Xstring& _oldHelp_attr)
    {    
    m_has_oldHelp_attr = true;
    m_oldHelp_attr = new ns_s::ST_Xstring(_oldHelp_attr);
    }

    const ns_s::ST_Xstring& CT_RevisionDefinedName::get_oldHelp_attr() const
    {    
    if (m_oldHelp_attr)
    {
        return *m_oldHelp_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_RevisionDefinedName::has_statusBar_attr() const
    {    
    return m_has_statusBar_attr;
    }

    void CT_RevisionDefinedName::set_statusBar_attr(const ns_s::ST_Xstring& _statusBar_attr)
    {    
    m_has_statusBar_attr = true;
    m_statusBar_attr = new ns_s::ST_Xstring(_statusBar_attr);
    }

    const ns_s::ST_Xstring& CT_RevisionDefinedName::get_statusBar_attr() const
    {    
    if (m_statusBar_attr)
    {
        return *m_statusBar_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_RevisionDefinedName::has_oldStatusBar_attr() const
    {    
    return m_has_oldStatusBar_attr;
    }

    void CT_RevisionDefinedName::set_oldStatusBar_attr(const ns_s::ST_Xstring& _oldStatusBar_attr)
    {    
    m_has_oldStatusBar_attr = true;
    m_oldStatusBar_attr = new ns_s::ST_Xstring(_oldStatusBar_attr);
    }

    const ns_s::ST_Xstring& CT_RevisionDefinedName::get_oldStatusBar_attr() const
    {    
    if (m_oldStatusBar_attr)
    {
        return *m_oldStatusBar_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_RevisionDefinedName::has_comment_attr() const
    {    
    return m_has_comment_attr;
    }

    void CT_RevisionDefinedName::set_comment_attr(const ns_s::ST_Xstring& _comment_attr)
    {    
    m_has_comment_attr = true;
    m_comment_attr = new ns_s::ST_Xstring(_comment_attr);
    }

    const ns_s::ST_Xstring& CT_RevisionDefinedName::get_comment_attr() const
    {    
    if (m_comment_attr)
    {
        return *m_comment_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_RevisionDefinedName::has_oldComment_attr() const
    {    
    return m_has_oldComment_attr;
    }

    void CT_RevisionDefinedName::set_oldComment_attr(const ns_s::ST_Xstring& _oldComment_attr)
    {    
    m_has_oldComment_attr = true;
    m_oldComment_attr = new ns_s::ST_Xstring(_oldComment_attr);
    }

    const ns_s::ST_Xstring& CT_RevisionDefinedName::get_oldComment_attr() const
    {    
    if (m_oldComment_attr)
    {
        return *m_oldComment_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

CT_RevisionDefinedName* CT_RevisionDefinedName::default_instance_ = NULL;

    // CT_RevisionConflict
    CT_RevisionConflict::CT_RevisionConflict()
    :m_has_rId_attr(false),
    m_rId_attr(0),
    m_has_ua_attr(false),
    m_ua_attr(false),
    m_has_ra_attr(false),
    m_ra_attr(false),
    m_has_sheetId_attr(false),
    m_sheetId_attr(0)
    {
    }
    CT_RevisionConflict::~CT_RevisionConflict()
{
    clear();    }
    void CT_RevisionConflict::clear()
    {    
    m_has_rId_attr = false;
    m_rId_attr = 0;
    
    m_has_ua_attr = false;
    m_ua_attr = false;
    
    m_has_ra_attr = false;
    m_ra_attr = false;
    
    m_has_sheetId_attr = false;
    m_sheetId_attr = 0;
    }

    void CT_RevisionConflict::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_rId_attr)
    {
        _outStream << " " << "rId" << "=\"" << m_rId_attr << "\"";
    }
    
    
    if (m_has_ua_attr)
    {
        _outStream << " " << "ua" << "=\"" << XSD::XMLBooleanStr(m_ua_attr) << "\"";
    }
    
    
    if (m_has_ra_attr)
    {
        _outStream << " " << "ra" << "=\"" << XSD::XMLBooleanStr(m_ra_attr) << "\"";
    }
    
    
    if (m_has_sheetId_attr)
    {
        _outStream << " " << "sheetId" << "=\"" << m_sheetId_attr << "\"";
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_RevisionConflict& CT_RevisionConflict::default_instance()
    {    
    if (!CT_RevisionConflict::default_instance_)
    {
        CT_RevisionConflict::default_instance_ = new CT_RevisionConflict();
    }
    return *CT_RevisionConflict::default_instance_;
    }

    bool CT_RevisionConflict::has_rId_attr() const
    {    
    return m_has_rId_attr;
    }

    void CT_RevisionConflict::set_rId_attr(const XSD::unsignedInt_& _rId_attr)
    {    
    m_has_rId_attr = true;
    m_rId_attr = _rId_attr;
    }

    const XSD::unsignedInt_& CT_RevisionConflict::get_rId_attr() const
    {    
    return m_rId_attr;
    }

    bool CT_RevisionConflict::has_ua_attr() const
    {    
    return m_has_ua_attr;
    }

    void CT_RevisionConflict::set_ua_attr(const XSD::boolean_& _ua_attr)
    {    
    m_has_ua_attr = true;
    m_ua_attr = _ua_attr;
    }

    const XSD::boolean_& CT_RevisionConflict::get_ua_attr() const
    {    
    return m_ua_attr;
    }

    bool CT_RevisionConflict::has_ra_attr() const
    {    
    return m_has_ra_attr;
    }

    void CT_RevisionConflict::set_ra_attr(const XSD::boolean_& _ra_attr)
    {    
    m_has_ra_attr = true;
    m_ra_attr = _ra_attr;
    }

    const XSD::boolean_& CT_RevisionConflict::get_ra_attr() const
    {    
    return m_ra_attr;
    }

    bool CT_RevisionConflict::has_sheetId_attr() const
    {    
    return m_has_sheetId_attr;
    }

    void CT_RevisionConflict::set_sheetId_attr(const XSD::unsignedInt_& _sheetId_attr)
    {    
    m_has_sheetId_attr = true;
    m_sheetId_attr = _sheetId_attr;
    }

    const XSD::unsignedInt_& CT_RevisionConflict::get_sheetId_attr() const
    {    
    return m_sheetId_attr;
    }

CT_RevisionConflict* CT_RevisionConflict::default_instance_ = NULL;

    // CT_RevisionQueryTableField
    CT_RevisionQueryTableField::CT_RevisionQueryTableField()
    :m_has_sheetId_attr(false),
    m_sheetId_attr(0),
    m_has_ref_attr(false),
    m_ref_attr(NULL),
    m_has_fieldId_attr(false),
    m_fieldId_attr(0)
    {
    }
    CT_RevisionQueryTableField::~CT_RevisionQueryTableField()
{
    clear();    }
    void CT_RevisionQueryTableField::clear()
    {    
    m_has_sheetId_attr = false;
    m_sheetId_attr = 0;
    
    m_has_ref_attr = false;
    
    if (m_ref_attr)
    {
        delete m_ref_attr;
        m_ref_attr = NULL;
    }
    
    
    m_has_fieldId_attr = false;
    m_fieldId_attr = 0;
    }

    void CT_RevisionQueryTableField::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_sheetId_attr)
    {
        _outStream << " " << "sheetId" << "=\"" << m_sheetId_attr << "\"";
    }
    
    
    if (m_has_ref_attr)
    {
        m_ref_attr->toXmlAttr("ref", _outStream);
    }
    
    
    if (m_has_fieldId_attr)
    {
        _outStream << " " << "fieldId" << "=\"" << m_fieldId_attr << "\"";
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_RevisionQueryTableField& CT_RevisionQueryTableField::default_instance()
    {    
    if (!CT_RevisionQueryTableField::default_instance_)
    {
        CT_RevisionQueryTableField::default_instance_ = new CT_RevisionQueryTableField();
    }
    return *CT_RevisionQueryTableField::default_instance_;
    }

    bool CT_RevisionQueryTableField::has_sheetId_attr() const
    {    
    return m_has_sheetId_attr;
    }

    void CT_RevisionQueryTableField::set_sheetId_attr(const XSD::unsignedInt_& _sheetId_attr)
    {    
    m_has_sheetId_attr = true;
    m_sheetId_attr = _sheetId_attr;
    }

    const XSD::unsignedInt_& CT_RevisionQueryTableField::get_sheetId_attr() const
    {    
    return m_sheetId_attr;
    }

    bool CT_RevisionQueryTableField::has_ref_attr() const
    {    
    return m_has_ref_attr;
    }

    void CT_RevisionQueryTableField::set_ref_attr(const ST_Ref& _ref_attr)
    {    
    m_has_ref_attr = true;
    m_ref_attr = new ST_Ref(_ref_attr);
    }

    const ST_Ref& CT_RevisionQueryTableField::get_ref_attr() const
    {    
    if (m_ref_attr)
    {
        return *m_ref_attr;
    }
    return ST_Ref::default_instance();
    }

    bool CT_RevisionQueryTableField::has_fieldId_attr() const
    {    
    return m_has_fieldId_attr;
    }

    void CT_RevisionQueryTableField::set_fieldId_attr(const XSD::unsignedInt_& _fieldId_attr)
    {    
    m_has_fieldId_attr = true;
    m_fieldId_attr = _fieldId_attr;
    }

    const XSD::unsignedInt_& CT_RevisionQueryTableField::get_fieldId_attr() const
    {    
    return m_fieldId_attr;
    }

CT_RevisionQueryTableField* CT_RevisionQueryTableField::default_instance_ = NULL;

    // CT_Users
    CT_Users::CT_Users()
    :m_has_count_attr(false),
    m_count_attr(0)
    {
    }
    CT_Users::~CT_Users()
{
    clear();    }
    CT_SharedUser* CT_Users::add_userInfo()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_SharedUser* pNewChild = pChildGroup->mutable_userInfo();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_Users::clear()
    {    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_Users::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_userInfo())
            {
                (*iter)->get_userInfo().toXmlElem("main:userInfo", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_Users& CT_Users::default_instance()
    {    
    if (!CT_Users::default_instance_)
    {
        CT_Users::default_instance_ = new CT_Users();
    }
    return *CT_Users::default_instance_;
    }

    bool CT_Users::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void CT_Users::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& CT_Users::get_count_attr() const
    {    
    return m_count_attr;
    }


    // CT_Users::ChildGroup_1
    CT_Users::ChildGroup_1::ChildGroup_1()
    :m_has_userInfo(false),
    m_userInfo(NULL)
    {
    }
    bool CT_Users::ChildGroup_1::has_userInfo() const
    {    
    return m_has_userInfo;
    }

    CT_SharedUser* CT_Users::ChildGroup_1::mutable_userInfo()
    {    
    
    m_has_userInfo = true;
    if (!m_userInfo)
    {
        m_userInfo = new CT_SharedUser();
    }
    return m_userInfo;
    }

    const CT_SharedUser& CT_Users::ChildGroup_1::get_userInfo() const
    {    
    if (m_userInfo)
    {
        return *m_userInfo;
    }
    return CT_SharedUser::default_instance();
    }

CT_Users* CT_Users::default_instance_ = NULL;

    // CT_SharedUser
    CT_SharedUser::CT_SharedUser()
    :m_has_extLst(false),
    m_extLst(NULL),
    m_has_guid_attr(false),
    m_guid_attr(NULL),
    m_has_name_attr(false),
    m_name_attr(NULL),
    m_has_id_attr(false),
    m_id_attr(0),
    m_has_dateTime_attr(false),
    m_dateTime_attr("")
    {
    }
    CT_SharedUser::~CT_SharedUser()
{
    clear();    }
    bool CT_SharedUser::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* CT_SharedUser::mutable_extLst()
    {    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& CT_SharedUser::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

    void CT_SharedUser::clear()
    {    
    m_has_guid_attr = false;
    
    if (m_guid_attr)
    {
        delete m_guid_attr;
        m_guid_attr = NULL;
    }
    
    
    m_has_name_attr = false;
    
    if (m_name_attr)
    {
        delete m_name_attr;
        m_name_attr = NULL;
    }
    
    
    m_has_id_attr = false;
    m_id_attr = 0;
    
    m_has_dateTime_attr = false;
    m_dateTime_attr.clear();
    }

    void CT_SharedUser::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_guid_attr)
    {
        m_guid_attr->toXmlAttr("guid", _outStream);
    }
    
    
    if (m_has_name_attr)
    {
        m_name_attr->toXmlAttr("name", _outStream);
    }
    
    
    if (m_has_id_attr)
    {
        _outStream << " " << "id" << "=\"" << m_id_attr << "\"";
    }
    
    
    if (m_has_dateTime_attr)
    {
        _outStream << " " << "dateTime" << "=\"" << m_dateTime_attr << "\"";
    }
    
            _outStream << ">";
            
    if (m_has_extLst)
    {
        m_extLst->toXmlElem("main:extLst", "", _outStream);;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_SharedUser& CT_SharedUser::default_instance()
    {    
    if (!CT_SharedUser::default_instance_)
    {
        CT_SharedUser::default_instance_ = new CT_SharedUser();
    }
    return *CT_SharedUser::default_instance_;
    }

    bool CT_SharedUser::has_guid_attr() const
    {    
    return m_has_guid_attr;
    }

    void CT_SharedUser::set_guid_attr(const ns_s::ST_Guid& _guid_attr)
    {    
    m_has_guid_attr = true;
    m_guid_attr = new ns_s::ST_Guid(_guid_attr);
    }

    const ns_s::ST_Guid& CT_SharedUser::get_guid_attr() const
    {    
    if (m_guid_attr)
    {
        return *m_guid_attr;
    }
    return ns_s::ST_Guid::default_instance();
    }

    bool CT_SharedUser::has_name_attr() const
    {    
    return m_has_name_attr;
    }

    void CT_SharedUser::set_name_attr(const ns_s::ST_Xstring& _name_attr)
    {    
    m_has_name_attr = true;
    m_name_attr = new ns_s::ST_Xstring(_name_attr);
    }

    const ns_s::ST_Xstring& CT_SharedUser::get_name_attr() const
    {    
    if (m_name_attr)
    {
        return *m_name_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_SharedUser::has_id_attr() const
    {    
    return m_has_id_attr;
    }

    void CT_SharedUser::set_id_attr(const XSD::int_& _id_attr)
    {    
    m_has_id_attr = true;
    m_id_attr = _id_attr;
    }

    const XSD::int_& CT_SharedUser::get_id_attr() const
    {    
    return m_id_attr;
    }

    bool CT_SharedUser::has_dateTime_attr() const
    {    
    return m_has_dateTime_attr;
    }

    void CT_SharedUser::set_dateTime_attr(const XSD::dateTime_& _dateTime_attr)
    {    
    m_has_dateTime_attr = true;
    m_dateTime_attr = _dateTime_attr;
    }

    const XSD::dateTime_& CT_SharedUser::get_dateTime_attr() const
    {    
    return m_dateTime_attr;
    }

CT_SharedUser* CT_SharedUser::default_instance_ = NULL;

    // CT_Macrosheet
    CT_Macrosheet::CT_Macrosheet()
    :m_has_sheetPr(false),
    m_sheetPr(NULL),
    m_has_dimension(false),
    m_dimension(NULL),
    m_has_sheetViews(false),
    m_sheetViews(NULL),
    m_has_sheetFormatPr(false),
    m_sheetFormatPr(NULL)
    {
    }
    CT_Macrosheet::~CT_Macrosheet()
{
    clear();    }
    bool CT_Macrosheet::has_sheetPr() const
    {    
    return m_has_sheetPr;
    }

    CT_SheetPr* CT_Macrosheet::mutable_sheetPr()
    {    
    m_has_sheetPr = true;
    if (!m_sheetPr)
    {
        m_sheetPr = new CT_SheetPr();
    }
    return m_sheetPr;
    }

    const CT_SheetPr& CT_Macrosheet::get_sheetPr() const
    {    
    if (m_sheetPr)
    {
        return *m_sheetPr;
    }
    return CT_SheetPr::default_instance();
    }

    bool CT_Macrosheet::has_dimension() const
    {    
    return m_has_dimension;
    }

    CT_SheetDimension* CT_Macrosheet::mutable_dimension()
    {    
    m_has_dimension = true;
    if (!m_dimension)
    {
        m_dimension = new CT_SheetDimension();
    }
    return m_dimension;
    }

    const CT_SheetDimension& CT_Macrosheet::get_dimension() const
    {    
    if (m_dimension)
    {
        return *m_dimension;
    }
    return CT_SheetDimension::default_instance();
    }

    bool CT_Macrosheet::has_sheetViews() const
    {    
    return m_has_sheetViews;
    }

    CT_SheetViews* CT_Macrosheet::mutable_sheetViews()
    {    
    m_has_sheetViews = true;
    if (!m_sheetViews)
    {
        m_sheetViews = new CT_SheetViews();
    }
    return m_sheetViews;
    }

    const CT_SheetViews& CT_Macrosheet::get_sheetViews() const
    {    
    if (m_sheetViews)
    {
        return *m_sheetViews;
    }
    return CT_SheetViews::default_instance();
    }

    bool CT_Macrosheet::has_sheetFormatPr() const
    {    
    return m_has_sheetFormatPr;
    }

    CT_SheetFormatPr* CT_Macrosheet::mutable_sheetFormatPr()
    {    
    m_has_sheetFormatPr = true;
    if (!m_sheetFormatPr)
    {
        m_sheetFormatPr = new CT_SheetFormatPr();
    }
    return m_sheetFormatPr;
    }

    const CT_SheetFormatPr& CT_Macrosheet::get_sheetFormatPr() const
    {    
    if (m_sheetFormatPr)
    {
        return *m_sheetFormatPr;
    }
    return CT_SheetFormatPr::default_instance();
    }

    CT_Cols* CT_Macrosheet::add_cols()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Cols* pNewChild = pChildGroup->mutable_cols();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_SheetData* CT_Macrosheet::add_sheetData()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_SheetData* pNewChild = pChildGroup->mutable_sheetData();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_SheetProtection* CT_Macrosheet::add_sheetProtection()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_SheetProtection* pNewChild = pChildGroup->mutable_sheetProtection();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_AutoFilter* CT_Macrosheet::add_autoFilter()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_AutoFilter* pNewChild = pChildGroup->mutable_autoFilter();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_SortState* CT_Macrosheet::add_sortState()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_SortState* pNewChild = pChildGroup->mutable_sortState();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_DataConsolidate* CT_Macrosheet::add_dataConsolidate()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_DataConsolidate* pNewChild = pChildGroup->mutable_dataConsolidate();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_CustomSheetViews* CT_Macrosheet::add_customSheetViews()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_CustomSheetViews* pNewChild = pChildGroup->mutable_customSheetViews();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_PhoneticPr* CT_Macrosheet::add_phoneticPr()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_PhoneticPr* pNewChild = pChildGroup->mutable_phoneticPr();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_ConditionalFormatting* CT_Macrosheet::add_conditionalFormatting()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_ConditionalFormatting* pNewChild = pChildGroup->mutable_conditionalFormatting();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_PrintOptions* CT_Macrosheet::add_printOptions()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_PrintOptions* pNewChild = pChildGroup->mutable_printOptions();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_PageMargins* CT_Macrosheet::add_pageMargins()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_PageMargins* pNewChild = pChildGroup->mutable_pageMargins();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_PageSetup* CT_Macrosheet::add_pageSetup()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_PageSetup* pNewChild = pChildGroup->mutable_pageSetup();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_HeaderFooter* CT_Macrosheet::add_headerFooter()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_HeaderFooter* pNewChild = pChildGroup->mutable_headerFooter();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_PageBreak* CT_Macrosheet::add_rowBreaks()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_PageBreak* pNewChild = pChildGroup->mutable_rowBreaks();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_PageBreak* CT_Macrosheet::add_colBreaks()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_PageBreak* pNewChild = pChildGroup->mutable_colBreaks();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_CustomProperties* CT_Macrosheet::add_customProperties()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_CustomProperties* pNewChild = pChildGroup->mutable_customProperties();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_Drawing* CT_Macrosheet::add_drawing()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Drawing* pNewChild = pChildGroup->mutable_drawing();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_LegacyDrawing* CT_Macrosheet::add_legacyDrawing()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_LegacyDrawing* pNewChild = pChildGroup->mutable_legacyDrawing();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_LegacyDrawing* CT_Macrosheet::add_legacyDrawingHF()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_LegacyDrawing* pNewChild = pChildGroup->mutable_legacyDrawingHF();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_DrawingHF* CT_Macrosheet::add_drawingHF()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_DrawingHF* pNewChild = pChildGroup->mutable_drawingHF();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_SheetBackgroundPicture* CT_Macrosheet::add_picture()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_SheetBackgroundPicture* pNewChild = pChildGroup->mutable_picture();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_OleObjects* CT_Macrosheet::add_oleObjects()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OleObjects* pNewChild = pChildGroup->mutable_oleObjects();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_ExtensionList* CT_Macrosheet::add_extLst()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_ExtensionList* pNewChild = pChildGroup->mutable_extLst();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_Macrosheet::clear()
    {    
    m_has_sheetPr = false;
    
    if (m_sheetPr)
    {
        delete m_sheetPr;
        m_sheetPr = NULL;
    }
    
    
    m_has_dimension = false;
    
    if (m_dimension)
    {
        delete m_dimension;
        m_dimension = NULL;
    }
    
    
    m_has_sheetViews = false;
    
    if (m_sheetViews)
    {
        delete m_sheetViews;
        m_sheetViews = NULL;
    }
    
    
    m_has_sheetFormatPr = false;
    
    if (m_sheetFormatPr)
    {
        delete m_sheetFormatPr;
        m_sheetFormatPr = NULL;
    }
    
     
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_Macrosheet::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
            _outStream << ">";
            
    if (m_has_sheetPr)
    {
        m_sheetPr->toXmlElem("main:sheetPr", "", _outStream);;
    }
    
    if (m_has_dimension)
    {
        m_dimension->toXmlElem("main:dimension", "", _outStream);;
    }
    
    if (m_has_sheetViews)
    {
        m_sheetViews->toXmlElem("main:sheetViews", "", _outStream);;
    }
    
    if (m_has_sheetFormatPr)
    {
        m_sheetFormatPr->toXmlElem("main:sheetFormatPr", "", _outStream);;
    }
     
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_cols())
            {
                (*iter)->get_cols().toXmlElem("main:cols", "", _outStream);
            }
            else if ((*iter)->has_sheetData())
            {
                (*iter)->get_sheetData().toXmlElem("main:sheetData", "", _outStream);
            }
            else if ((*iter)->has_sheetProtection())
            {
                (*iter)->get_sheetProtection().toXmlElem("main:sheetProtection", "", _outStream);
            }
            else if ((*iter)->has_autoFilter())
            {
                (*iter)->get_autoFilter().toXmlElem("main:autoFilter", "", _outStream);
            }
            else if ((*iter)->has_sortState())
            {
                (*iter)->get_sortState().toXmlElem("main:sortState", "", _outStream);
            }
            else if ((*iter)->has_dataConsolidate())
            {
                (*iter)->get_dataConsolidate().toXmlElem("main:dataConsolidate", "", _outStream);
            }
            else if ((*iter)->has_customSheetViews())
            {
                (*iter)->get_customSheetViews().toXmlElem("main:customSheetViews", "", _outStream);
            }
            else if ((*iter)->has_phoneticPr())
            {
                (*iter)->get_phoneticPr().toXmlElem("main:phoneticPr", "", _outStream);
            }
            else if ((*iter)->has_conditionalFormatting())
            {
                (*iter)->get_conditionalFormatting().toXmlElem("main:conditionalFormatting", "", _outStream);
            }
            else if ((*iter)->has_printOptions())
            {
                (*iter)->get_printOptions().toXmlElem("main:printOptions", "", _outStream);
            }
            else if ((*iter)->has_pageMargins())
            {
                (*iter)->get_pageMargins().toXmlElem("main:pageMargins", "", _outStream);
            }
            else if ((*iter)->has_pageSetup())
            {
                (*iter)->get_pageSetup().toXmlElem("main:pageSetup", "", _outStream);
            }
            else if ((*iter)->has_headerFooter())
            {
                (*iter)->get_headerFooter().toXmlElem("main:headerFooter", "", _outStream);
            }
            else if ((*iter)->has_rowBreaks())
            {
                (*iter)->get_rowBreaks().toXmlElem("main:rowBreaks", "", _outStream);
            }
            else if ((*iter)->has_colBreaks())
            {
                (*iter)->get_colBreaks().toXmlElem("main:colBreaks", "", _outStream);
            }
            else if ((*iter)->has_customProperties())
            {
                (*iter)->get_customProperties().toXmlElem("main:customProperties", "", _outStream);
            }
            else if ((*iter)->has_drawing())
            {
                (*iter)->get_drawing().toXmlElem("main:drawing", "", _outStream);
            }
            else if ((*iter)->has_legacyDrawing())
            {
                (*iter)->get_legacyDrawing().toXmlElem("main:legacyDrawing", "", _outStream);
            }
            else if ((*iter)->has_legacyDrawingHF())
            {
                (*iter)->get_legacyDrawingHF().toXmlElem("main:legacyDrawingHF", "", _outStream);
            }
            else if ((*iter)->has_drawingHF())
            {
                (*iter)->get_drawingHF().toXmlElem("main:drawingHF", "", _outStream);
            }
            else if ((*iter)->has_picture())
            {
                (*iter)->get_picture().toXmlElem("main:picture", "", _outStream);
            }
            else if ((*iter)->has_oleObjects())
            {
                (*iter)->get_oleObjects().toXmlElem("main:oleObjects", "", _outStream);
            }
            else if ((*iter)->has_extLst())
            {
                (*iter)->get_extLst().toXmlElem("main:extLst", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_Macrosheet& CT_Macrosheet::default_instance()
    {    
    if (!CT_Macrosheet::default_instance_)
    {
        CT_Macrosheet::default_instance_ = new CT_Macrosheet();
    }
    return *CT_Macrosheet::default_instance_;
    }


    // CT_Macrosheet::ChildGroup_1
    CT_Macrosheet::ChildGroup_1::ChildGroup_1()
    :m_has_cols(false),
    m_cols(NULL),
    m_has_sheetData(false),
    m_sheetData(NULL),
    m_has_sheetProtection(false),
    m_sheetProtection(NULL),
    m_has_autoFilter(false),
    m_autoFilter(NULL),
    m_has_sortState(false),
    m_sortState(NULL),
    m_has_dataConsolidate(false),
    m_dataConsolidate(NULL),
    m_has_customSheetViews(false),
    m_customSheetViews(NULL),
    m_has_phoneticPr(false),
    m_phoneticPr(NULL),
    m_has_conditionalFormatting(false),
    m_conditionalFormatting(NULL),
    m_has_printOptions(false),
    m_printOptions(NULL),
    m_has_pageMargins(false),
    m_pageMargins(NULL),
    m_has_pageSetup(false),
    m_pageSetup(NULL),
    m_has_headerFooter(false),
    m_headerFooter(NULL),
    m_has_rowBreaks(false),
    m_rowBreaks(NULL),
    m_has_colBreaks(false),
    m_colBreaks(NULL),
    m_has_customProperties(false),
    m_customProperties(NULL),
    m_has_drawing(false),
    m_drawing(NULL),
    m_has_legacyDrawing(false),
    m_legacyDrawing(NULL),
    m_has_legacyDrawingHF(false),
    m_legacyDrawingHF(NULL),
    m_has_drawingHF(false),
    m_drawingHF(NULL),
    m_has_picture(false),
    m_picture(NULL),
    m_has_oleObjects(false),
    m_oleObjects(NULL),
    m_has_extLst(false),
    m_extLst(NULL)
    {
    }
    bool CT_Macrosheet::ChildGroup_1::has_cols() const
    {    
    return m_has_cols;
    }

    CT_Cols* CT_Macrosheet::ChildGroup_1::mutable_cols()
    {    
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_cols = true;
    if (!m_cols)
    {
        m_cols = new CT_Cols();
    }
    return m_cols;
    }

    const CT_Cols& CT_Macrosheet::ChildGroup_1::get_cols() const
    {    
    if (m_cols)
    {
        return *m_cols;
    }
    return CT_Cols::default_instance();
    }

    bool CT_Macrosheet::ChildGroup_1::has_sheetData() const
    {    
    return m_has_sheetData;
    }

    CT_SheetData* CT_Macrosheet::ChildGroup_1::mutable_sheetData()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_sheetData = true;
    if (!m_sheetData)
    {
        m_sheetData = new CT_SheetData();
    }
    return m_sheetData;
    }

    const CT_SheetData& CT_Macrosheet::ChildGroup_1::get_sheetData() const
    {    
    if (m_sheetData)
    {
        return *m_sheetData;
    }
    return CT_SheetData::default_instance();
    }

    bool CT_Macrosheet::ChildGroup_1::has_sheetProtection() const
    {    
    return m_has_sheetProtection;
    }

    CT_SheetProtection* CT_Macrosheet::ChildGroup_1::mutable_sheetProtection()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_sheetProtection = true;
    if (!m_sheetProtection)
    {
        m_sheetProtection = new CT_SheetProtection();
    }
    return m_sheetProtection;
    }

    const CT_SheetProtection& CT_Macrosheet::ChildGroup_1::get_sheetProtection() const
    {    
    if (m_sheetProtection)
    {
        return *m_sheetProtection;
    }
    return CT_SheetProtection::default_instance();
    }

    bool CT_Macrosheet::ChildGroup_1::has_autoFilter() const
    {    
    return m_has_autoFilter;
    }

    CT_AutoFilter* CT_Macrosheet::ChildGroup_1::mutable_autoFilter()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_autoFilter = true;
    if (!m_autoFilter)
    {
        m_autoFilter = new CT_AutoFilter();
    }
    return m_autoFilter;
    }

    const CT_AutoFilter& CT_Macrosheet::ChildGroup_1::get_autoFilter() const
    {    
    if (m_autoFilter)
    {
        return *m_autoFilter;
    }
    return CT_AutoFilter::default_instance();
    }

    bool CT_Macrosheet::ChildGroup_1::has_sortState() const
    {    
    return m_has_sortState;
    }

    CT_SortState* CT_Macrosheet::ChildGroup_1::mutable_sortState()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_sortState = true;
    if (!m_sortState)
    {
        m_sortState = new CT_SortState();
    }
    return m_sortState;
    }

    const CT_SortState& CT_Macrosheet::ChildGroup_1::get_sortState() const
    {    
    if (m_sortState)
    {
        return *m_sortState;
    }
    return CT_SortState::default_instance();
    }

    bool CT_Macrosheet::ChildGroup_1::has_dataConsolidate() const
    {    
    return m_has_dataConsolidate;
    }

    CT_DataConsolidate* CT_Macrosheet::ChildGroup_1::mutable_dataConsolidate()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_dataConsolidate = true;
    if (!m_dataConsolidate)
    {
        m_dataConsolidate = new CT_DataConsolidate();
    }
    return m_dataConsolidate;
    }

    const CT_DataConsolidate& CT_Macrosheet::ChildGroup_1::get_dataConsolidate() const
    {    
    if (m_dataConsolidate)
    {
        return *m_dataConsolidate;
    }
    return CT_DataConsolidate::default_instance();
    }

    bool CT_Macrosheet::ChildGroup_1::has_customSheetViews() const
    {    
    return m_has_customSheetViews;
    }

    CT_CustomSheetViews* CT_Macrosheet::ChildGroup_1::mutable_customSheetViews()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_customSheetViews = true;
    if (!m_customSheetViews)
    {
        m_customSheetViews = new CT_CustomSheetViews();
    }
    return m_customSheetViews;
    }

    const CT_CustomSheetViews& CT_Macrosheet::ChildGroup_1::get_customSheetViews() const
    {    
    if (m_customSheetViews)
    {
        return *m_customSheetViews;
    }
    return CT_CustomSheetViews::default_instance();
    }

    bool CT_Macrosheet::ChildGroup_1::has_phoneticPr() const
    {    
    return m_has_phoneticPr;
    }

    CT_PhoneticPr* CT_Macrosheet::ChildGroup_1::mutable_phoneticPr()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_phoneticPr = true;
    if (!m_phoneticPr)
    {
        m_phoneticPr = new CT_PhoneticPr();
    }
    return m_phoneticPr;
    }

    const CT_PhoneticPr& CT_Macrosheet::ChildGroup_1::get_phoneticPr() const
    {    
    if (m_phoneticPr)
    {
        return *m_phoneticPr;
    }
    return CT_PhoneticPr::default_instance();
    }

    bool CT_Macrosheet::ChildGroup_1::has_conditionalFormatting() const
    {    
    return m_has_conditionalFormatting;
    }

    CT_ConditionalFormatting* CT_Macrosheet::ChildGroup_1::mutable_conditionalFormatting()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_conditionalFormatting = true;
    if (!m_conditionalFormatting)
    {
        m_conditionalFormatting = new CT_ConditionalFormatting();
    }
    return m_conditionalFormatting;
    }

    const CT_ConditionalFormatting& CT_Macrosheet::ChildGroup_1::get_conditionalFormatting() const
    {    
    if (m_conditionalFormatting)
    {
        return *m_conditionalFormatting;
    }
    return CT_ConditionalFormatting::default_instance();
    }

    bool CT_Macrosheet::ChildGroup_1::has_printOptions() const
    {    
    return m_has_printOptions;
    }

    CT_PrintOptions* CT_Macrosheet::ChildGroup_1::mutable_printOptions()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_printOptions = true;
    if (!m_printOptions)
    {
        m_printOptions = new CT_PrintOptions();
    }
    return m_printOptions;
    }

    const CT_PrintOptions& CT_Macrosheet::ChildGroup_1::get_printOptions() const
    {    
    if (m_printOptions)
    {
        return *m_printOptions;
    }
    return CT_PrintOptions::default_instance();
    }

    bool CT_Macrosheet::ChildGroup_1::has_pageMargins() const
    {    
    return m_has_pageMargins;
    }

    CT_PageMargins* CT_Macrosheet::ChildGroup_1::mutable_pageMargins()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_pageMargins = true;
    if (!m_pageMargins)
    {
        m_pageMargins = new CT_PageMargins();
    }
    return m_pageMargins;
    }

    const CT_PageMargins& CT_Macrosheet::ChildGroup_1::get_pageMargins() const
    {    
    if (m_pageMargins)
    {
        return *m_pageMargins;
    }
    return CT_PageMargins::default_instance();
    }

    bool CT_Macrosheet::ChildGroup_1::has_pageSetup() const
    {    
    return m_has_pageSetup;
    }

    CT_PageSetup* CT_Macrosheet::ChildGroup_1::mutable_pageSetup()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_pageSetup = true;
    if (!m_pageSetup)
    {
        m_pageSetup = new CT_PageSetup();
    }
    return m_pageSetup;
    }

    const CT_PageSetup& CT_Macrosheet::ChildGroup_1::get_pageSetup() const
    {    
    if (m_pageSetup)
    {
        return *m_pageSetup;
    }
    return CT_PageSetup::default_instance();
    }

    bool CT_Macrosheet::ChildGroup_1::has_headerFooter() const
    {    
    return m_has_headerFooter;
    }

    CT_HeaderFooter* CT_Macrosheet::ChildGroup_1::mutable_headerFooter()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_headerFooter = true;
    if (!m_headerFooter)
    {
        m_headerFooter = new CT_HeaderFooter();
    }
    return m_headerFooter;
    }

    const CT_HeaderFooter& CT_Macrosheet::ChildGroup_1::get_headerFooter() const
    {    
    if (m_headerFooter)
    {
        return *m_headerFooter;
    }
    return CT_HeaderFooter::default_instance();
    }

    bool CT_Macrosheet::ChildGroup_1::has_rowBreaks() const
    {    
    return m_has_rowBreaks;
    }

    CT_PageBreak* CT_Macrosheet::ChildGroup_1::mutable_rowBreaks()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_rowBreaks = true;
    if (!m_rowBreaks)
    {
        m_rowBreaks = new CT_PageBreak();
    }
    return m_rowBreaks;
    }

    const CT_PageBreak& CT_Macrosheet::ChildGroup_1::get_rowBreaks() const
    {    
    if (m_rowBreaks)
    {
        return *m_rowBreaks;
    }
    return CT_PageBreak::default_instance();
    }

    bool CT_Macrosheet::ChildGroup_1::has_colBreaks() const
    {    
    return m_has_colBreaks;
    }

    CT_PageBreak* CT_Macrosheet::ChildGroup_1::mutable_colBreaks()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_colBreaks = true;
    if (!m_colBreaks)
    {
        m_colBreaks = new CT_PageBreak();
    }
    return m_colBreaks;
    }

    const CT_PageBreak& CT_Macrosheet::ChildGroup_1::get_colBreaks() const
    {    
    if (m_colBreaks)
    {
        return *m_colBreaks;
    }
    return CT_PageBreak::default_instance();
    }

    bool CT_Macrosheet::ChildGroup_1::has_customProperties() const
    {    
    return m_has_customProperties;
    }

    CT_CustomProperties* CT_Macrosheet::ChildGroup_1::mutable_customProperties()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_customProperties = true;
    if (!m_customProperties)
    {
        m_customProperties = new CT_CustomProperties();
    }
    return m_customProperties;
    }

    const CT_CustomProperties& CT_Macrosheet::ChildGroup_1::get_customProperties() const
    {    
    if (m_customProperties)
    {
        return *m_customProperties;
    }
    return CT_CustomProperties::default_instance();
    }

    bool CT_Macrosheet::ChildGroup_1::has_drawing() const
    {    
    return m_has_drawing;
    }

    CT_Drawing* CT_Macrosheet::ChildGroup_1::mutable_drawing()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_drawing = true;
    if (!m_drawing)
    {
        m_drawing = new CT_Drawing();
    }
    return m_drawing;
    }

    const CT_Drawing& CT_Macrosheet::ChildGroup_1::get_drawing() const
    {    
    if (m_drawing)
    {
        return *m_drawing;
    }
    return CT_Drawing::default_instance();
    }

    bool CT_Macrosheet::ChildGroup_1::has_legacyDrawing() const
    {    
    return m_has_legacyDrawing;
    }

    CT_LegacyDrawing* CT_Macrosheet::ChildGroup_1::mutable_legacyDrawing()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_legacyDrawing = true;
    if (!m_legacyDrawing)
    {
        m_legacyDrawing = new CT_LegacyDrawing();
    }
    return m_legacyDrawing;
    }

    const CT_LegacyDrawing& CT_Macrosheet::ChildGroup_1::get_legacyDrawing() const
    {    
    if (m_legacyDrawing)
    {
        return *m_legacyDrawing;
    }
    return CT_LegacyDrawing::default_instance();
    }

    bool CT_Macrosheet::ChildGroup_1::has_legacyDrawingHF() const
    {    
    return m_has_legacyDrawingHF;
    }

    CT_LegacyDrawing* CT_Macrosheet::ChildGroup_1::mutable_legacyDrawingHF()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = true;
    if (!m_legacyDrawingHF)
    {
        m_legacyDrawingHF = new CT_LegacyDrawing();
    }
    return m_legacyDrawingHF;
    }

    const CT_LegacyDrawing& CT_Macrosheet::ChildGroup_1::get_legacyDrawingHF() const
    {    
    if (m_legacyDrawingHF)
    {
        return *m_legacyDrawingHF;
    }
    return CT_LegacyDrawing::default_instance();
    }

    bool CT_Macrosheet::ChildGroup_1::has_drawingHF() const
    {    
    return m_has_drawingHF;
    }

    CT_DrawingHF* CT_Macrosheet::ChildGroup_1::mutable_drawingHF()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_drawingHF = true;
    if (!m_drawingHF)
    {
        m_drawingHF = new CT_DrawingHF();
    }
    return m_drawingHF;
    }

    const CT_DrawingHF& CT_Macrosheet::ChildGroup_1::get_drawingHF() const
    {    
    if (m_drawingHF)
    {
        return *m_drawingHF;
    }
    return CT_DrawingHF::default_instance();
    }

    bool CT_Macrosheet::ChildGroup_1::has_picture() const
    {    
    return m_has_picture;
    }

    CT_SheetBackgroundPicture* CT_Macrosheet::ChildGroup_1::mutable_picture()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_picture = true;
    if (!m_picture)
    {
        m_picture = new CT_SheetBackgroundPicture();
    }
    return m_picture;
    }

    const CT_SheetBackgroundPicture& CT_Macrosheet::ChildGroup_1::get_picture() const
    {    
    if (m_picture)
    {
        return *m_picture;
    }
    return CT_SheetBackgroundPicture::default_instance();
    }

    bool CT_Macrosheet::ChildGroup_1::has_oleObjects() const
    {    
    return m_has_oleObjects;
    }

    CT_OleObjects* CT_Macrosheet::ChildGroup_1::mutable_oleObjects()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_oleObjects = true;
    if (!m_oleObjects)
    {
        m_oleObjects = new CT_OleObjects();
    }
    return m_oleObjects;
    }

    const CT_OleObjects& CT_Macrosheet::ChildGroup_1::get_oleObjects() const
    {    
    if (m_oleObjects)
    {
        return *m_oleObjects;
    }
    return CT_OleObjects::default_instance();
    }

    bool CT_Macrosheet::ChildGroup_1::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* CT_Macrosheet::ChildGroup_1::mutable_extLst()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& CT_Macrosheet::ChildGroup_1::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

CT_Macrosheet* CT_Macrosheet::default_instance_ = NULL;

    // CT_Dialogsheet
    CT_Dialogsheet::CT_Dialogsheet()
    :m_has_sheetPr(false),
    m_sheetPr(NULL),
    m_has_sheetViews(false),
    m_sheetViews(NULL),
    m_has_sheetFormatPr(false),
    m_sheetFormatPr(NULL),
    m_has_sheetProtection(false),
    m_sheetProtection(NULL),
    m_has_customSheetViews(false),
    m_customSheetViews(NULL),
    m_has_printOptions(false),
    m_printOptions(NULL),
    m_has_pageMargins(false),
    m_pageMargins(NULL),
    m_has_pageSetup(false),
    m_pageSetup(NULL),
    m_has_headerFooter(false),
    m_headerFooter(NULL),
    m_has_drawing(false),
    m_drawing(NULL),
    m_has_legacyDrawing(false),
    m_legacyDrawing(NULL),
    m_has_legacyDrawingHF(false),
    m_legacyDrawingHF(NULL),
    m_has_drawingHF(false),
    m_drawingHF(NULL),
    m_has_oleObjects(false),
    m_oleObjects(NULL),
    m_has_controls(false),
    m_controls(NULL),
    m_has_extLst(false),
    m_extLst(NULL)
    {
    }
    CT_Dialogsheet::~CT_Dialogsheet()
{
    clear();    }
    bool CT_Dialogsheet::has_sheetPr() const
    {    
    return m_has_sheetPr;
    }

    CT_SheetPr* CT_Dialogsheet::mutable_sheetPr()
    {    
    m_has_sheetPr = true;
    if (!m_sheetPr)
    {
        m_sheetPr = new CT_SheetPr();
    }
    return m_sheetPr;
    }

    const CT_SheetPr& CT_Dialogsheet::get_sheetPr() const
    {    
    if (m_sheetPr)
    {
        return *m_sheetPr;
    }
    return CT_SheetPr::default_instance();
    }

    bool CT_Dialogsheet::has_sheetViews() const
    {    
    return m_has_sheetViews;
    }

    CT_SheetViews* CT_Dialogsheet::mutable_sheetViews()
    {    
    m_has_sheetViews = true;
    if (!m_sheetViews)
    {
        m_sheetViews = new CT_SheetViews();
    }
    return m_sheetViews;
    }

    const CT_SheetViews& CT_Dialogsheet::get_sheetViews() const
    {    
    if (m_sheetViews)
    {
        return *m_sheetViews;
    }
    return CT_SheetViews::default_instance();
    }

    bool CT_Dialogsheet::has_sheetFormatPr() const
    {    
    return m_has_sheetFormatPr;
    }

    CT_SheetFormatPr* CT_Dialogsheet::mutable_sheetFormatPr()
    {    
    m_has_sheetFormatPr = true;
    if (!m_sheetFormatPr)
    {
        m_sheetFormatPr = new CT_SheetFormatPr();
    }
    return m_sheetFormatPr;
    }

    const CT_SheetFormatPr& CT_Dialogsheet::get_sheetFormatPr() const
    {    
    if (m_sheetFormatPr)
    {
        return *m_sheetFormatPr;
    }
    return CT_SheetFormatPr::default_instance();
    }

    bool CT_Dialogsheet::has_sheetProtection() const
    {    
    return m_has_sheetProtection;
    }

    CT_SheetProtection* CT_Dialogsheet::mutable_sheetProtection()
    {    
    m_has_sheetProtection = true;
    if (!m_sheetProtection)
    {
        m_sheetProtection = new CT_SheetProtection();
    }
    return m_sheetProtection;
    }

    const CT_SheetProtection& CT_Dialogsheet::get_sheetProtection() const
    {    
    if (m_sheetProtection)
    {
        return *m_sheetProtection;
    }
    return CT_SheetProtection::default_instance();
    }

    bool CT_Dialogsheet::has_customSheetViews() const
    {    
    return m_has_customSheetViews;
    }

    CT_CustomSheetViews* CT_Dialogsheet::mutable_customSheetViews()
    {    
    m_has_customSheetViews = true;
    if (!m_customSheetViews)
    {
        m_customSheetViews = new CT_CustomSheetViews();
    }
    return m_customSheetViews;
    }

    const CT_CustomSheetViews& CT_Dialogsheet::get_customSheetViews() const
    {    
    if (m_customSheetViews)
    {
        return *m_customSheetViews;
    }
    return CT_CustomSheetViews::default_instance();
    }

    bool CT_Dialogsheet::has_printOptions() const
    {    
    return m_has_printOptions;
    }

    CT_PrintOptions* CT_Dialogsheet::mutable_printOptions()
    {    
    m_has_printOptions = true;
    if (!m_printOptions)
    {
        m_printOptions = new CT_PrintOptions();
    }
    return m_printOptions;
    }

    const CT_PrintOptions& CT_Dialogsheet::get_printOptions() const
    {    
    if (m_printOptions)
    {
        return *m_printOptions;
    }
    return CT_PrintOptions::default_instance();
    }

    bool CT_Dialogsheet::has_pageMargins() const
    {    
    return m_has_pageMargins;
    }

    CT_PageMargins* CT_Dialogsheet::mutable_pageMargins()
    {    
    m_has_pageMargins = true;
    if (!m_pageMargins)
    {
        m_pageMargins = new CT_PageMargins();
    }
    return m_pageMargins;
    }

    const CT_PageMargins& CT_Dialogsheet::get_pageMargins() const
    {    
    if (m_pageMargins)
    {
        return *m_pageMargins;
    }
    return CT_PageMargins::default_instance();
    }

    bool CT_Dialogsheet::has_pageSetup() const
    {    
    return m_has_pageSetup;
    }

    CT_PageSetup* CT_Dialogsheet::mutable_pageSetup()
    {    
    m_has_pageSetup = true;
    if (!m_pageSetup)
    {
        m_pageSetup = new CT_PageSetup();
    }
    return m_pageSetup;
    }

    const CT_PageSetup& CT_Dialogsheet::get_pageSetup() const
    {    
    if (m_pageSetup)
    {
        return *m_pageSetup;
    }
    return CT_PageSetup::default_instance();
    }

    bool CT_Dialogsheet::has_headerFooter() const
    {    
    return m_has_headerFooter;
    }

    CT_HeaderFooter* CT_Dialogsheet::mutable_headerFooter()
    {    
    m_has_headerFooter = true;
    if (!m_headerFooter)
    {
        m_headerFooter = new CT_HeaderFooter();
    }
    return m_headerFooter;
    }

    const CT_HeaderFooter& CT_Dialogsheet::get_headerFooter() const
    {    
    if (m_headerFooter)
    {
        return *m_headerFooter;
    }
    return CT_HeaderFooter::default_instance();
    }

    bool CT_Dialogsheet::has_drawing() const
    {    
    return m_has_drawing;
    }

    CT_Drawing* CT_Dialogsheet::mutable_drawing()
    {    
    m_has_drawing = true;
    if (!m_drawing)
    {
        m_drawing = new CT_Drawing();
    }
    return m_drawing;
    }

    const CT_Drawing& CT_Dialogsheet::get_drawing() const
    {    
    if (m_drawing)
    {
        return *m_drawing;
    }
    return CT_Drawing::default_instance();
    }

    bool CT_Dialogsheet::has_legacyDrawing() const
    {    
    return m_has_legacyDrawing;
    }

    CT_LegacyDrawing* CT_Dialogsheet::mutable_legacyDrawing()
    {    
    m_has_legacyDrawing = true;
    if (!m_legacyDrawing)
    {
        m_legacyDrawing = new CT_LegacyDrawing();
    }
    return m_legacyDrawing;
    }

    const CT_LegacyDrawing& CT_Dialogsheet::get_legacyDrawing() const
    {    
    if (m_legacyDrawing)
    {
        return *m_legacyDrawing;
    }
    return CT_LegacyDrawing::default_instance();
    }

    bool CT_Dialogsheet::has_legacyDrawingHF() const
    {    
    return m_has_legacyDrawingHF;
    }

    CT_LegacyDrawing* CT_Dialogsheet::mutable_legacyDrawingHF()
    {    
    m_has_legacyDrawingHF = true;
    if (!m_legacyDrawingHF)
    {
        m_legacyDrawingHF = new CT_LegacyDrawing();
    }
    return m_legacyDrawingHF;
    }

    const CT_LegacyDrawing& CT_Dialogsheet::get_legacyDrawingHF() const
    {    
    if (m_legacyDrawingHF)
    {
        return *m_legacyDrawingHF;
    }
    return CT_LegacyDrawing::default_instance();
    }

    bool CT_Dialogsheet::has_drawingHF() const
    {    
    return m_has_drawingHF;
    }

    CT_DrawingHF* CT_Dialogsheet::mutable_drawingHF()
    {    
    m_has_drawingHF = true;
    if (!m_drawingHF)
    {
        m_drawingHF = new CT_DrawingHF();
    }
    return m_drawingHF;
    }

    const CT_DrawingHF& CT_Dialogsheet::get_drawingHF() const
    {    
    if (m_drawingHF)
    {
        return *m_drawingHF;
    }
    return CT_DrawingHF::default_instance();
    }

    bool CT_Dialogsheet::has_oleObjects() const
    {    
    return m_has_oleObjects;
    }

    CT_OleObjects* CT_Dialogsheet::mutable_oleObjects()
    {    
    m_has_oleObjects = true;
    if (!m_oleObjects)
    {
        m_oleObjects = new CT_OleObjects();
    }
    return m_oleObjects;
    }

    const CT_OleObjects& CT_Dialogsheet::get_oleObjects() const
    {    
    if (m_oleObjects)
    {
        return *m_oleObjects;
    }
    return CT_OleObjects::default_instance();
    }

    bool CT_Dialogsheet::has_controls() const
    {    
    return m_has_controls;
    }

    CT_Controls* CT_Dialogsheet::mutable_controls()
    {    
    m_has_controls = true;
    if (!m_controls)
    {
        m_controls = new CT_Controls();
    }
    return m_controls;
    }

    const CT_Controls& CT_Dialogsheet::get_controls() const
    {    
    if (m_controls)
    {
        return *m_controls;
    }
    return CT_Controls::default_instance();
    }

    bool CT_Dialogsheet::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* CT_Dialogsheet::mutable_extLst()
    {    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& CT_Dialogsheet::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

    void CT_Dialogsheet::clear()
    {    }

    void CT_Dialogsheet::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
            _outStream << ">";
            
    if (m_has_sheetPr)
    {
        m_sheetPr->toXmlElem("main:sheetPr", "", _outStream);;
    }
    
    if (m_has_sheetViews)
    {
        m_sheetViews->toXmlElem("main:sheetViews", "", _outStream);;
    }
    
    if (m_has_sheetFormatPr)
    {
        m_sheetFormatPr->toXmlElem("main:sheetFormatPr", "", _outStream);;
    }
    
    if (m_has_sheetProtection)
    {
        m_sheetProtection->toXmlElem("main:sheetProtection", "", _outStream);;
    }
    
    if (m_has_customSheetViews)
    {
        m_customSheetViews->toXmlElem("main:customSheetViews", "", _outStream);;
    }
    
    if (m_has_printOptions)
    {
        m_printOptions->toXmlElem("main:printOptions", "", _outStream);;
    }
    
    if (m_has_pageMargins)
    {
        m_pageMargins->toXmlElem("main:pageMargins", "", _outStream);;
    }
    
    if (m_has_pageSetup)
    {
        m_pageSetup->toXmlElem("main:pageSetup", "", _outStream);;
    }
    
    if (m_has_headerFooter)
    {
        m_headerFooter->toXmlElem("main:headerFooter", "", _outStream);;
    }
    
    if (m_has_drawing)
    {
        m_drawing->toXmlElem("main:drawing", "", _outStream);;
    }
    
    if (m_has_legacyDrawing)
    {
        m_legacyDrawing->toXmlElem("main:legacyDrawing", "", _outStream);;
    }
    
    if (m_has_legacyDrawingHF)
    {
        m_legacyDrawingHF->toXmlElem("main:legacyDrawingHF", "", _outStream);;
    }
    
    if (m_has_drawingHF)
    {
        m_drawingHF->toXmlElem("main:drawingHF", "", _outStream);;
    }
    
    if (m_has_oleObjects)
    {
        m_oleObjects->toXmlElem("main:oleObjects", "", _outStream);;
    }
    
    if (m_has_controls)
    {
        m_controls->toXmlElem("main:controls", "", _outStream);;
    }
    
    if (m_has_extLst)
    {
        m_extLst->toXmlElem("main:extLst", "", _outStream);;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_Dialogsheet& CT_Dialogsheet::default_instance()
    {    
    if (!CT_Dialogsheet::default_instance_)
    {
        CT_Dialogsheet::default_instance_ = new CT_Dialogsheet();
    }
    return *CT_Dialogsheet::default_instance_;
    }

CT_Dialogsheet* CT_Dialogsheet::default_instance_ = NULL;

    // CT_Worksheet
    CT_Worksheet::CT_Worksheet()
    :m_has_sheetPr(false),
    m_sheetPr(NULL),
    m_has_dimension(false),
    m_dimension(NULL),
    m_has_sheetViews(false),
    m_sheetViews(NULL),
    m_has_sheetFormatPr(false),
    m_sheetFormatPr(NULL)
    {
    }
    CT_Worksheet::~CT_Worksheet()
{
    clear();    }
    bool CT_Worksheet::has_sheetPr() const
    {    
    return m_has_sheetPr;
    }

    CT_SheetPr* CT_Worksheet::mutable_sheetPr()
    {    
    m_has_sheetPr = true;
    if (!m_sheetPr)
    {
        m_sheetPr = new CT_SheetPr();
    }
    return m_sheetPr;
    }

    const CT_SheetPr& CT_Worksheet::get_sheetPr() const
    {    
    if (m_sheetPr)
    {
        return *m_sheetPr;
    }
    return CT_SheetPr::default_instance();
    }

    bool CT_Worksheet::has_dimension() const
    {    
    return m_has_dimension;
    }

    CT_SheetDimension* CT_Worksheet::mutable_dimension()
    {    
    m_has_dimension = true;
    if (!m_dimension)
    {
        m_dimension = new CT_SheetDimension();
    }
    return m_dimension;
    }

    const CT_SheetDimension& CT_Worksheet::get_dimension() const
    {    
    if (m_dimension)
    {
        return *m_dimension;
    }
    return CT_SheetDimension::default_instance();
    }

    bool CT_Worksheet::has_sheetViews() const
    {    
    return m_has_sheetViews;
    }

    CT_SheetViews* CT_Worksheet::mutable_sheetViews()
    {    
    m_has_sheetViews = true;
    if (!m_sheetViews)
    {
        m_sheetViews = new CT_SheetViews();
    }
    return m_sheetViews;
    }

    const CT_SheetViews& CT_Worksheet::get_sheetViews() const
    {    
    if (m_sheetViews)
    {
        return *m_sheetViews;
    }
    return CT_SheetViews::default_instance();
    }

    bool CT_Worksheet::has_sheetFormatPr() const
    {    
    return m_has_sheetFormatPr;
    }

    CT_SheetFormatPr* CT_Worksheet::mutable_sheetFormatPr()
    {    
    m_has_sheetFormatPr = true;
    if (!m_sheetFormatPr)
    {
        m_sheetFormatPr = new CT_SheetFormatPr();
    }
    return m_sheetFormatPr;
    }

    const CT_SheetFormatPr& CT_Worksheet::get_sheetFormatPr() const
    {    
    if (m_sheetFormatPr)
    {
        return *m_sheetFormatPr;
    }
    return CT_SheetFormatPr::default_instance();
    }

    CT_Cols* CT_Worksheet::add_cols()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Cols* pNewChild = pChildGroup->mutable_cols();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_SheetData* CT_Worksheet::add_sheetData()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_SheetData* pNewChild = pChildGroup->mutable_sheetData();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_SheetCalcPr* CT_Worksheet::add_sheetCalcPr()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_SheetCalcPr* pNewChild = pChildGroup->mutable_sheetCalcPr();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_SheetProtection* CT_Worksheet::add_sheetProtection()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_SheetProtection* pNewChild = pChildGroup->mutable_sheetProtection();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_ProtectedRanges* CT_Worksheet::add_protectedRanges()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_ProtectedRanges* pNewChild = pChildGroup->mutable_protectedRanges();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_Scenarios* CT_Worksheet::add_scenarios()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Scenarios* pNewChild = pChildGroup->mutable_scenarios();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_AutoFilter* CT_Worksheet::add_autoFilter()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_AutoFilter* pNewChild = pChildGroup->mutable_autoFilter();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_SortState* CT_Worksheet::add_sortState()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_SortState* pNewChild = pChildGroup->mutable_sortState();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_DataConsolidate* CT_Worksheet::add_dataConsolidate()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_DataConsolidate* pNewChild = pChildGroup->mutable_dataConsolidate();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_CustomSheetViews* CT_Worksheet::add_customSheetViews()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_CustomSheetViews* pNewChild = pChildGroup->mutable_customSheetViews();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_MergeCells* CT_Worksheet::add_mergeCells()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_MergeCells* pNewChild = pChildGroup->mutable_mergeCells();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_PhoneticPr* CT_Worksheet::add_phoneticPr()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_PhoneticPr* pNewChild = pChildGroup->mutable_phoneticPr();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_ConditionalFormatting* CT_Worksheet::add_conditionalFormatting()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_ConditionalFormatting* pNewChild = pChildGroup->mutable_conditionalFormatting();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_DataValidations* CT_Worksheet::add_dataValidations()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_DataValidations* pNewChild = pChildGroup->mutable_dataValidations();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_Hyperlinks* CT_Worksheet::add_hyperlinks()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Hyperlinks* pNewChild = pChildGroup->mutable_hyperlinks();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_PrintOptions* CT_Worksheet::add_printOptions()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_PrintOptions* pNewChild = pChildGroup->mutable_printOptions();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_PageMargins* CT_Worksheet::add_pageMargins()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_PageMargins* pNewChild = pChildGroup->mutable_pageMargins();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_PageSetup* CT_Worksheet::add_pageSetup()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_PageSetup* pNewChild = pChildGroup->mutable_pageSetup();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_HeaderFooter* CT_Worksheet::add_headerFooter()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_HeaderFooter* pNewChild = pChildGroup->mutable_headerFooter();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_PageBreak* CT_Worksheet::add_rowBreaks()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_PageBreak* pNewChild = pChildGroup->mutable_rowBreaks();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_PageBreak* CT_Worksheet::add_colBreaks()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_PageBreak* pNewChild = pChildGroup->mutable_colBreaks();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_CustomProperties* CT_Worksheet::add_customProperties()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_CustomProperties* pNewChild = pChildGroup->mutable_customProperties();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_CellWatches* CT_Worksheet::add_cellWatches()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_CellWatches* pNewChild = pChildGroup->mutable_cellWatches();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_IgnoredErrors* CT_Worksheet::add_ignoredErrors()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_IgnoredErrors* pNewChild = pChildGroup->mutable_ignoredErrors();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_SmartTags* CT_Worksheet::add_smartTags()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_SmartTags* pNewChild = pChildGroup->mutable_smartTags();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_Drawing* CT_Worksheet::add_drawing()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Drawing* pNewChild = pChildGroup->mutable_drawing();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_LegacyDrawing* CT_Worksheet::add_legacyDrawing()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_LegacyDrawing* pNewChild = pChildGroup->mutable_legacyDrawing();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_LegacyDrawing* CT_Worksheet::add_legacyDrawingHF()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_LegacyDrawing* pNewChild = pChildGroup->mutable_legacyDrawingHF();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_DrawingHF* CT_Worksheet::add_drawingHF()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_DrawingHF* pNewChild = pChildGroup->mutable_drawingHF();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_SheetBackgroundPicture* CT_Worksheet::add_picture()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_SheetBackgroundPicture* pNewChild = pChildGroup->mutable_picture();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_OleObjects* CT_Worksheet::add_oleObjects()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OleObjects* pNewChild = pChildGroup->mutable_oleObjects();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_Controls* CT_Worksheet::add_controls()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Controls* pNewChild = pChildGroup->mutable_controls();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_WebPublishItems* CT_Worksheet::add_webPublishItems()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_WebPublishItems* pNewChild = pChildGroup->mutable_webPublishItems();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_TableParts* CT_Worksheet::add_tableParts()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_TableParts* pNewChild = pChildGroup->mutable_tableParts();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_ExtensionList* CT_Worksheet::add_extLst()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_ExtensionList* pNewChild = pChildGroup->mutable_extLst();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_Worksheet::clear()
    {    
    m_has_sheetPr = false;
    
    if (m_sheetPr)
    {
        delete m_sheetPr;
        m_sheetPr = NULL;
    }
    
    
    m_has_dimension = false;
    
    if (m_dimension)
    {
        delete m_dimension;
        m_dimension = NULL;
    }
    
    
    m_has_sheetViews = false;
    
    if (m_sheetViews)
    {
        delete m_sheetViews;
        m_sheetViews = NULL;
    }
    
    
    m_has_sheetFormatPr = false;
    
    if (m_sheetFormatPr)
    {
        delete m_sheetFormatPr;
        m_sheetFormatPr = NULL;
    }
    
     
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_Worksheet::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
            _outStream << ">";
            
    if (m_has_sheetPr)
    {
        m_sheetPr->toXmlElem("main:sheetPr", "", _outStream);;
    }
    
    if (m_has_dimension)
    {
        m_dimension->toXmlElem("main:dimension", "", _outStream);;
    }
    
    if (m_has_sheetViews)
    {
        m_sheetViews->toXmlElem("main:sheetViews", "", _outStream);;
    }
    
    if (m_has_sheetFormatPr)
    {
        m_sheetFormatPr->toXmlElem("main:sheetFormatPr", "", _outStream);;
    }
     
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_cols())
            {
                (*iter)->get_cols().toXmlElem("main:cols", "", _outStream);
            }
            else if ((*iter)->has_sheetData())
            {
                (*iter)->get_sheetData().toXmlElem("main:sheetData", "", _outStream);
            }
            else if ((*iter)->has_sheetCalcPr())
            {
                (*iter)->get_sheetCalcPr().toXmlElem("main:sheetCalcPr", "", _outStream);
            }
            else if ((*iter)->has_sheetProtection())
            {
                (*iter)->get_sheetProtection().toXmlElem("main:sheetProtection", "", _outStream);
            }
            else if ((*iter)->has_protectedRanges())
            {
                (*iter)->get_protectedRanges().toXmlElem("main:protectedRanges", "", _outStream);
            }
            else if ((*iter)->has_scenarios())
            {
                (*iter)->get_scenarios().toXmlElem("main:scenarios", "", _outStream);
            }
            else if ((*iter)->has_autoFilter())
            {
                (*iter)->get_autoFilter().toXmlElem("main:autoFilter", "", _outStream);
            }
            else if ((*iter)->has_sortState())
            {
                (*iter)->get_sortState().toXmlElem("main:sortState", "", _outStream);
            }
            else if ((*iter)->has_dataConsolidate())
            {
                (*iter)->get_dataConsolidate().toXmlElem("main:dataConsolidate", "", _outStream);
            }
            else if ((*iter)->has_customSheetViews())
            {
                (*iter)->get_customSheetViews().toXmlElem("main:customSheetViews", "", _outStream);
            }
            else if ((*iter)->has_mergeCells())
            {
                (*iter)->get_mergeCells().toXmlElem("main:mergeCells", "", _outStream);
            }
            else if ((*iter)->has_phoneticPr())
            {
                (*iter)->get_phoneticPr().toXmlElem("main:phoneticPr", "", _outStream);
            }
            else if ((*iter)->has_conditionalFormatting())
            {
                (*iter)->get_conditionalFormatting().toXmlElem("main:conditionalFormatting", "", _outStream);
            }
            else if ((*iter)->has_dataValidations())
            {
                (*iter)->get_dataValidations().toXmlElem("main:dataValidations", "", _outStream);
            }
            else if ((*iter)->has_hyperlinks())
            {
                (*iter)->get_hyperlinks().toXmlElem("main:hyperlinks", "", _outStream);
            }
            else if ((*iter)->has_printOptions())
            {
                (*iter)->get_printOptions().toXmlElem("main:printOptions", "", _outStream);
            }
            else if ((*iter)->has_pageMargins())
            {
                (*iter)->get_pageMargins().toXmlElem("main:pageMargins", "", _outStream);
            }
            else if ((*iter)->has_pageSetup())
            {
                (*iter)->get_pageSetup().toXmlElem("main:pageSetup", "", _outStream);
            }
            else if ((*iter)->has_headerFooter())
            {
                (*iter)->get_headerFooter().toXmlElem("main:headerFooter", "", _outStream);
            }
            else if ((*iter)->has_rowBreaks())
            {
                (*iter)->get_rowBreaks().toXmlElem("main:rowBreaks", "", _outStream);
            }
            else if ((*iter)->has_colBreaks())
            {
                (*iter)->get_colBreaks().toXmlElem("main:colBreaks", "", _outStream);
            }
            else if ((*iter)->has_customProperties())
            {
                (*iter)->get_customProperties().toXmlElem("main:customProperties", "", _outStream);
            }
            else if ((*iter)->has_cellWatches())
            {
                (*iter)->get_cellWatches().toXmlElem("main:cellWatches", "", _outStream);
            }
            else if ((*iter)->has_ignoredErrors())
            {
                (*iter)->get_ignoredErrors().toXmlElem("main:ignoredErrors", "", _outStream);
            }
            else if ((*iter)->has_smartTags())
            {
                (*iter)->get_smartTags().toXmlElem("main:smartTags", "", _outStream);
            }
            else if ((*iter)->has_drawing())
            {
                (*iter)->get_drawing().toXmlElem("main:drawing", "", _outStream);
            }
            else if ((*iter)->has_legacyDrawing())
            {
                (*iter)->get_legacyDrawing().toXmlElem("main:legacyDrawing", "", _outStream);
            }
            else if ((*iter)->has_legacyDrawingHF())
            {
                (*iter)->get_legacyDrawingHF().toXmlElem("main:legacyDrawingHF", "", _outStream);
            }
            else if ((*iter)->has_drawingHF())
            {
                (*iter)->get_drawingHF().toXmlElem("main:drawingHF", "", _outStream);
            }
            else if ((*iter)->has_picture())
            {
                (*iter)->get_picture().toXmlElem("main:picture", "", _outStream);
            }
            else if ((*iter)->has_oleObjects())
            {
                (*iter)->get_oleObjects().toXmlElem("main:oleObjects", "", _outStream);
            }
            else if ((*iter)->has_controls())
            {
                (*iter)->get_controls().toXmlElem("main:controls", "", _outStream);
            }
            else if ((*iter)->has_webPublishItems())
            {
                (*iter)->get_webPublishItems().toXmlElem("main:webPublishItems", "", _outStream);
            }
            else if ((*iter)->has_tableParts())
            {
                (*iter)->get_tableParts().toXmlElem("main:tableParts", "", _outStream);
            }
            else if ((*iter)->has_extLst())
            {
                (*iter)->get_extLst().toXmlElem("main:extLst", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_Worksheet& CT_Worksheet::default_instance()
    {    
    if (!CT_Worksheet::default_instance_)
    {
        CT_Worksheet::default_instance_ = new CT_Worksheet();
    }
    return *CT_Worksheet::default_instance_;
    }


    // CT_Worksheet::ChildGroup_1
    CT_Worksheet::ChildGroup_1::ChildGroup_1()
    :m_has_cols(false),
    m_cols(NULL),
    m_has_sheetData(false),
    m_sheetData(NULL),
    m_has_sheetCalcPr(false),
    m_sheetCalcPr(NULL),
    m_has_sheetProtection(false),
    m_sheetProtection(NULL),
    m_has_protectedRanges(false),
    m_protectedRanges(NULL),
    m_has_scenarios(false),
    m_scenarios(NULL),
    m_has_autoFilter(false),
    m_autoFilter(NULL),
    m_has_sortState(false),
    m_sortState(NULL),
    m_has_dataConsolidate(false),
    m_dataConsolidate(NULL),
    m_has_customSheetViews(false),
    m_customSheetViews(NULL),
    m_has_mergeCells(false),
    m_mergeCells(NULL),
    m_has_phoneticPr(false),
    m_phoneticPr(NULL),
    m_has_conditionalFormatting(false),
    m_conditionalFormatting(NULL),
    m_has_dataValidations(false),
    m_dataValidations(NULL),
    m_has_hyperlinks(false),
    m_hyperlinks(NULL),
    m_has_printOptions(false),
    m_printOptions(NULL),
    m_has_pageMargins(false),
    m_pageMargins(NULL),
    m_has_pageSetup(false),
    m_pageSetup(NULL),
    m_has_headerFooter(false),
    m_headerFooter(NULL),
    m_has_rowBreaks(false),
    m_rowBreaks(NULL),
    m_has_colBreaks(false),
    m_colBreaks(NULL),
    m_has_customProperties(false),
    m_customProperties(NULL),
    m_has_cellWatches(false),
    m_cellWatches(NULL),
    m_has_ignoredErrors(false),
    m_ignoredErrors(NULL),
    m_has_smartTags(false),
    m_smartTags(NULL),
    m_has_drawing(false),
    m_drawing(NULL),
    m_has_legacyDrawing(false),
    m_legacyDrawing(NULL),
    m_has_legacyDrawingHF(false),
    m_legacyDrawingHF(NULL),
    m_has_drawingHF(false),
    m_drawingHF(NULL),
    m_has_picture(false),
    m_picture(NULL),
    m_has_oleObjects(false),
    m_oleObjects(NULL),
    m_has_controls(false),
    m_controls(NULL),
    m_has_webPublishItems(false),
    m_webPublishItems(NULL),
    m_has_tableParts(false),
    m_tableParts(NULL),
    m_has_extLst(false),
    m_extLst(NULL)
    {
    }
    bool CT_Worksheet::ChildGroup_1::has_cols() const
    {    
    return m_has_cols;
    }

    CT_Cols* CT_Worksheet::ChildGroup_1::mutable_cols()
    {    
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetCalcPr = false;
    
    if (m_sheetCalcPr)
    {
        delete m_sheetCalcPr;
        m_sheetCalcPr = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_protectedRanges = false;
    
    if (m_protectedRanges)
    {
        delete m_protectedRanges;
        m_protectedRanges = NULL;
    }
    ;
    
    m_has_scenarios = false;
    
    if (m_scenarios)
    {
        delete m_scenarios;
        m_scenarios = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_mergeCells = false;
    
    if (m_mergeCells)
    {
        delete m_mergeCells;
        m_mergeCells = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_dataValidations = false;
    
    if (m_dataValidations)
    {
        delete m_dataValidations;
        m_dataValidations = NULL;
    }
    ;
    
    m_has_hyperlinks = false;
    
    if (m_hyperlinks)
    {
        delete m_hyperlinks;
        m_hyperlinks = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_cellWatches = false;
    
    if (m_cellWatches)
    {
        delete m_cellWatches;
        m_cellWatches = NULL;
    }
    ;
    
    m_has_ignoredErrors = false;
    
    if (m_ignoredErrors)
    {
        delete m_ignoredErrors;
        m_ignoredErrors = NULL;
    }
    ;
    
    m_has_smartTags = false;
    
    if (m_smartTags)
    {
        delete m_smartTags;
        m_smartTags = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_controls = false;
    
    if (m_controls)
    {
        delete m_controls;
        m_controls = NULL;
    }
    ;
    
    m_has_webPublishItems = false;
    
    if (m_webPublishItems)
    {
        delete m_webPublishItems;
        m_webPublishItems = NULL;
    }
    ;
    
    m_has_tableParts = false;
    
    if (m_tableParts)
    {
        delete m_tableParts;
        m_tableParts = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_cols = true;
    if (!m_cols)
    {
        m_cols = new CT_Cols();
    }
    return m_cols;
    }

    const CT_Cols& CT_Worksheet::ChildGroup_1::get_cols() const
    {    
    if (m_cols)
    {
        return *m_cols;
    }
    return CT_Cols::default_instance();
    }

    bool CT_Worksheet::ChildGroup_1::has_sheetData() const
    {    
    return m_has_sheetData;
    }

    CT_SheetData* CT_Worksheet::ChildGroup_1::mutable_sheetData()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetCalcPr = false;
    
    if (m_sheetCalcPr)
    {
        delete m_sheetCalcPr;
        m_sheetCalcPr = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_protectedRanges = false;
    
    if (m_protectedRanges)
    {
        delete m_protectedRanges;
        m_protectedRanges = NULL;
    }
    ;
    
    m_has_scenarios = false;
    
    if (m_scenarios)
    {
        delete m_scenarios;
        m_scenarios = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_mergeCells = false;
    
    if (m_mergeCells)
    {
        delete m_mergeCells;
        m_mergeCells = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_dataValidations = false;
    
    if (m_dataValidations)
    {
        delete m_dataValidations;
        m_dataValidations = NULL;
    }
    ;
    
    m_has_hyperlinks = false;
    
    if (m_hyperlinks)
    {
        delete m_hyperlinks;
        m_hyperlinks = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_cellWatches = false;
    
    if (m_cellWatches)
    {
        delete m_cellWatches;
        m_cellWatches = NULL;
    }
    ;
    
    m_has_ignoredErrors = false;
    
    if (m_ignoredErrors)
    {
        delete m_ignoredErrors;
        m_ignoredErrors = NULL;
    }
    ;
    
    m_has_smartTags = false;
    
    if (m_smartTags)
    {
        delete m_smartTags;
        m_smartTags = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_controls = false;
    
    if (m_controls)
    {
        delete m_controls;
        m_controls = NULL;
    }
    ;
    
    m_has_webPublishItems = false;
    
    if (m_webPublishItems)
    {
        delete m_webPublishItems;
        m_webPublishItems = NULL;
    }
    ;
    
    m_has_tableParts = false;
    
    if (m_tableParts)
    {
        delete m_tableParts;
        m_tableParts = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_sheetData = true;
    if (!m_sheetData)
    {
        m_sheetData = new CT_SheetData();
    }
    return m_sheetData;
    }

    const CT_SheetData& CT_Worksheet::ChildGroup_1::get_sheetData() const
    {    
    if (m_sheetData)
    {
        return *m_sheetData;
    }
    return CT_SheetData::default_instance();
    }

    bool CT_Worksheet::ChildGroup_1::has_sheetCalcPr() const
    {    
    return m_has_sheetCalcPr;
    }

    CT_SheetCalcPr* CT_Worksheet::ChildGroup_1::mutable_sheetCalcPr()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_protectedRanges = false;
    
    if (m_protectedRanges)
    {
        delete m_protectedRanges;
        m_protectedRanges = NULL;
    }
    ;
    
    m_has_scenarios = false;
    
    if (m_scenarios)
    {
        delete m_scenarios;
        m_scenarios = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_mergeCells = false;
    
    if (m_mergeCells)
    {
        delete m_mergeCells;
        m_mergeCells = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_dataValidations = false;
    
    if (m_dataValidations)
    {
        delete m_dataValidations;
        m_dataValidations = NULL;
    }
    ;
    
    m_has_hyperlinks = false;
    
    if (m_hyperlinks)
    {
        delete m_hyperlinks;
        m_hyperlinks = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_cellWatches = false;
    
    if (m_cellWatches)
    {
        delete m_cellWatches;
        m_cellWatches = NULL;
    }
    ;
    
    m_has_ignoredErrors = false;
    
    if (m_ignoredErrors)
    {
        delete m_ignoredErrors;
        m_ignoredErrors = NULL;
    }
    ;
    
    m_has_smartTags = false;
    
    if (m_smartTags)
    {
        delete m_smartTags;
        m_smartTags = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_controls = false;
    
    if (m_controls)
    {
        delete m_controls;
        m_controls = NULL;
    }
    ;
    
    m_has_webPublishItems = false;
    
    if (m_webPublishItems)
    {
        delete m_webPublishItems;
        m_webPublishItems = NULL;
    }
    ;
    
    m_has_tableParts = false;
    
    if (m_tableParts)
    {
        delete m_tableParts;
        m_tableParts = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_sheetCalcPr = true;
    if (!m_sheetCalcPr)
    {
        m_sheetCalcPr = new CT_SheetCalcPr();
    }
    return m_sheetCalcPr;
    }

    const CT_SheetCalcPr& CT_Worksheet::ChildGroup_1::get_sheetCalcPr() const
    {    
    if (m_sheetCalcPr)
    {
        return *m_sheetCalcPr;
    }
    return CT_SheetCalcPr::default_instance();
    }

    bool CT_Worksheet::ChildGroup_1::has_sheetProtection() const
    {    
    return m_has_sheetProtection;
    }

    CT_SheetProtection* CT_Worksheet::ChildGroup_1::mutable_sheetProtection()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetCalcPr = false;
    
    if (m_sheetCalcPr)
    {
        delete m_sheetCalcPr;
        m_sheetCalcPr = NULL;
    }
    ;
    
    m_has_protectedRanges = false;
    
    if (m_protectedRanges)
    {
        delete m_protectedRanges;
        m_protectedRanges = NULL;
    }
    ;
    
    m_has_scenarios = false;
    
    if (m_scenarios)
    {
        delete m_scenarios;
        m_scenarios = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_mergeCells = false;
    
    if (m_mergeCells)
    {
        delete m_mergeCells;
        m_mergeCells = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_dataValidations = false;
    
    if (m_dataValidations)
    {
        delete m_dataValidations;
        m_dataValidations = NULL;
    }
    ;
    
    m_has_hyperlinks = false;
    
    if (m_hyperlinks)
    {
        delete m_hyperlinks;
        m_hyperlinks = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_cellWatches = false;
    
    if (m_cellWatches)
    {
        delete m_cellWatches;
        m_cellWatches = NULL;
    }
    ;
    
    m_has_ignoredErrors = false;
    
    if (m_ignoredErrors)
    {
        delete m_ignoredErrors;
        m_ignoredErrors = NULL;
    }
    ;
    
    m_has_smartTags = false;
    
    if (m_smartTags)
    {
        delete m_smartTags;
        m_smartTags = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_controls = false;
    
    if (m_controls)
    {
        delete m_controls;
        m_controls = NULL;
    }
    ;
    
    m_has_webPublishItems = false;
    
    if (m_webPublishItems)
    {
        delete m_webPublishItems;
        m_webPublishItems = NULL;
    }
    ;
    
    m_has_tableParts = false;
    
    if (m_tableParts)
    {
        delete m_tableParts;
        m_tableParts = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_sheetProtection = true;
    if (!m_sheetProtection)
    {
        m_sheetProtection = new CT_SheetProtection();
    }
    return m_sheetProtection;
    }

    const CT_SheetProtection& CT_Worksheet::ChildGroup_1::get_sheetProtection() const
    {    
    if (m_sheetProtection)
    {
        return *m_sheetProtection;
    }
    return CT_SheetProtection::default_instance();
    }

    bool CT_Worksheet::ChildGroup_1::has_protectedRanges() const
    {    
    return m_has_protectedRanges;
    }

    CT_ProtectedRanges* CT_Worksheet::ChildGroup_1::mutable_protectedRanges()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetCalcPr = false;
    
    if (m_sheetCalcPr)
    {
        delete m_sheetCalcPr;
        m_sheetCalcPr = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_scenarios = false;
    
    if (m_scenarios)
    {
        delete m_scenarios;
        m_scenarios = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_mergeCells = false;
    
    if (m_mergeCells)
    {
        delete m_mergeCells;
        m_mergeCells = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_dataValidations = false;
    
    if (m_dataValidations)
    {
        delete m_dataValidations;
        m_dataValidations = NULL;
    }
    ;
    
    m_has_hyperlinks = false;
    
    if (m_hyperlinks)
    {
        delete m_hyperlinks;
        m_hyperlinks = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_cellWatches = false;
    
    if (m_cellWatches)
    {
        delete m_cellWatches;
        m_cellWatches = NULL;
    }
    ;
    
    m_has_ignoredErrors = false;
    
    if (m_ignoredErrors)
    {
        delete m_ignoredErrors;
        m_ignoredErrors = NULL;
    }
    ;
    
    m_has_smartTags = false;
    
    if (m_smartTags)
    {
        delete m_smartTags;
        m_smartTags = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_controls = false;
    
    if (m_controls)
    {
        delete m_controls;
        m_controls = NULL;
    }
    ;
    
    m_has_webPublishItems = false;
    
    if (m_webPublishItems)
    {
        delete m_webPublishItems;
        m_webPublishItems = NULL;
    }
    ;
    
    m_has_tableParts = false;
    
    if (m_tableParts)
    {
        delete m_tableParts;
        m_tableParts = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_protectedRanges = true;
    if (!m_protectedRanges)
    {
        m_protectedRanges = new CT_ProtectedRanges();
    }
    return m_protectedRanges;
    }

    const CT_ProtectedRanges& CT_Worksheet::ChildGroup_1::get_protectedRanges() const
    {    
    if (m_protectedRanges)
    {
        return *m_protectedRanges;
    }
    return CT_ProtectedRanges::default_instance();
    }

    bool CT_Worksheet::ChildGroup_1::has_scenarios() const
    {    
    return m_has_scenarios;
    }

    CT_Scenarios* CT_Worksheet::ChildGroup_1::mutable_scenarios()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetCalcPr = false;
    
    if (m_sheetCalcPr)
    {
        delete m_sheetCalcPr;
        m_sheetCalcPr = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_protectedRanges = false;
    
    if (m_protectedRanges)
    {
        delete m_protectedRanges;
        m_protectedRanges = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_mergeCells = false;
    
    if (m_mergeCells)
    {
        delete m_mergeCells;
        m_mergeCells = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_dataValidations = false;
    
    if (m_dataValidations)
    {
        delete m_dataValidations;
        m_dataValidations = NULL;
    }
    ;
    
    m_has_hyperlinks = false;
    
    if (m_hyperlinks)
    {
        delete m_hyperlinks;
        m_hyperlinks = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_cellWatches = false;
    
    if (m_cellWatches)
    {
        delete m_cellWatches;
        m_cellWatches = NULL;
    }
    ;
    
    m_has_ignoredErrors = false;
    
    if (m_ignoredErrors)
    {
        delete m_ignoredErrors;
        m_ignoredErrors = NULL;
    }
    ;
    
    m_has_smartTags = false;
    
    if (m_smartTags)
    {
        delete m_smartTags;
        m_smartTags = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_controls = false;
    
    if (m_controls)
    {
        delete m_controls;
        m_controls = NULL;
    }
    ;
    
    m_has_webPublishItems = false;
    
    if (m_webPublishItems)
    {
        delete m_webPublishItems;
        m_webPublishItems = NULL;
    }
    ;
    
    m_has_tableParts = false;
    
    if (m_tableParts)
    {
        delete m_tableParts;
        m_tableParts = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_scenarios = true;
    if (!m_scenarios)
    {
        m_scenarios = new CT_Scenarios();
    }
    return m_scenarios;
    }

    const CT_Scenarios& CT_Worksheet::ChildGroup_1::get_scenarios() const
    {    
    if (m_scenarios)
    {
        return *m_scenarios;
    }
    return CT_Scenarios::default_instance();
    }

    bool CT_Worksheet::ChildGroup_1::has_autoFilter() const
    {    
    return m_has_autoFilter;
    }

    CT_AutoFilter* CT_Worksheet::ChildGroup_1::mutable_autoFilter()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetCalcPr = false;
    
    if (m_sheetCalcPr)
    {
        delete m_sheetCalcPr;
        m_sheetCalcPr = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_protectedRanges = false;
    
    if (m_protectedRanges)
    {
        delete m_protectedRanges;
        m_protectedRanges = NULL;
    }
    ;
    
    m_has_scenarios = false;
    
    if (m_scenarios)
    {
        delete m_scenarios;
        m_scenarios = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_mergeCells = false;
    
    if (m_mergeCells)
    {
        delete m_mergeCells;
        m_mergeCells = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_dataValidations = false;
    
    if (m_dataValidations)
    {
        delete m_dataValidations;
        m_dataValidations = NULL;
    }
    ;
    
    m_has_hyperlinks = false;
    
    if (m_hyperlinks)
    {
        delete m_hyperlinks;
        m_hyperlinks = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_cellWatches = false;
    
    if (m_cellWatches)
    {
        delete m_cellWatches;
        m_cellWatches = NULL;
    }
    ;
    
    m_has_ignoredErrors = false;
    
    if (m_ignoredErrors)
    {
        delete m_ignoredErrors;
        m_ignoredErrors = NULL;
    }
    ;
    
    m_has_smartTags = false;
    
    if (m_smartTags)
    {
        delete m_smartTags;
        m_smartTags = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_controls = false;
    
    if (m_controls)
    {
        delete m_controls;
        m_controls = NULL;
    }
    ;
    
    m_has_webPublishItems = false;
    
    if (m_webPublishItems)
    {
        delete m_webPublishItems;
        m_webPublishItems = NULL;
    }
    ;
    
    m_has_tableParts = false;
    
    if (m_tableParts)
    {
        delete m_tableParts;
        m_tableParts = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_autoFilter = true;
    if (!m_autoFilter)
    {
        m_autoFilter = new CT_AutoFilter();
    }
    return m_autoFilter;
    }

    const CT_AutoFilter& CT_Worksheet::ChildGroup_1::get_autoFilter() const
    {    
    if (m_autoFilter)
    {
        return *m_autoFilter;
    }
    return CT_AutoFilter::default_instance();
    }

    bool CT_Worksheet::ChildGroup_1::has_sortState() const
    {    
    return m_has_sortState;
    }

    CT_SortState* CT_Worksheet::ChildGroup_1::mutable_sortState()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetCalcPr = false;
    
    if (m_sheetCalcPr)
    {
        delete m_sheetCalcPr;
        m_sheetCalcPr = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_protectedRanges = false;
    
    if (m_protectedRanges)
    {
        delete m_protectedRanges;
        m_protectedRanges = NULL;
    }
    ;
    
    m_has_scenarios = false;
    
    if (m_scenarios)
    {
        delete m_scenarios;
        m_scenarios = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_mergeCells = false;
    
    if (m_mergeCells)
    {
        delete m_mergeCells;
        m_mergeCells = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_dataValidations = false;
    
    if (m_dataValidations)
    {
        delete m_dataValidations;
        m_dataValidations = NULL;
    }
    ;
    
    m_has_hyperlinks = false;
    
    if (m_hyperlinks)
    {
        delete m_hyperlinks;
        m_hyperlinks = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_cellWatches = false;
    
    if (m_cellWatches)
    {
        delete m_cellWatches;
        m_cellWatches = NULL;
    }
    ;
    
    m_has_ignoredErrors = false;
    
    if (m_ignoredErrors)
    {
        delete m_ignoredErrors;
        m_ignoredErrors = NULL;
    }
    ;
    
    m_has_smartTags = false;
    
    if (m_smartTags)
    {
        delete m_smartTags;
        m_smartTags = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_controls = false;
    
    if (m_controls)
    {
        delete m_controls;
        m_controls = NULL;
    }
    ;
    
    m_has_webPublishItems = false;
    
    if (m_webPublishItems)
    {
        delete m_webPublishItems;
        m_webPublishItems = NULL;
    }
    ;
    
    m_has_tableParts = false;
    
    if (m_tableParts)
    {
        delete m_tableParts;
        m_tableParts = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_sortState = true;
    if (!m_sortState)
    {
        m_sortState = new CT_SortState();
    }
    return m_sortState;
    }

    const CT_SortState& CT_Worksheet::ChildGroup_1::get_sortState() const
    {    
    if (m_sortState)
    {
        return *m_sortState;
    }
    return CT_SortState::default_instance();
    }

    bool CT_Worksheet::ChildGroup_1::has_dataConsolidate() const
    {    
    return m_has_dataConsolidate;
    }

    CT_DataConsolidate* CT_Worksheet::ChildGroup_1::mutable_dataConsolidate()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetCalcPr = false;
    
    if (m_sheetCalcPr)
    {
        delete m_sheetCalcPr;
        m_sheetCalcPr = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_protectedRanges = false;
    
    if (m_protectedRanges)
    {
        delete m_protectedRanges;
        m_protectedRanges = NULL;
    }
    ;
    
    m_has_scenarios = false;
    
    if (m_scenarios)
    {
        delete m_scenarios;
        m_scenarios = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_mergeCells = false;
    
    if (m_mergeCells)
    {
        delete m_mergeCells;
        m_mergeCells = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_dataValidations = false;
    
    if (m_dataValidations)
    {
        delete m_dataValidations;
        m_dataValidations = NULL;
    }
    ;
    
    m_has_hyperlinks = false;
    
    if (m_hyperlinks)
    {
        delete m_hyperlinks;
        m_hyperlinks = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_cellWatches = false;
    
    if (m_cellWatches)
    {
        delete m_cellWatches;
        m_cellWatches = NULL;
    }
    ;
    
    m_has_ignoredErrors = false;
    
    if (m_ignoredErrors)
    {
        delete m_ignoredErrors;
        m_ignoredErrors = NULL;
    }
    ;
    
    m_has_smartTags = false;
    
    if (m_smartTags)
    {
        delete m_smartTags;
        m_smartTags = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_controls = false;
    
    if (m_controls)
    {
        delete m_controls;
        m_controls = NULL;
    }
    ;
    
    m_has_webPublishItems = false;
    
    if (m_webPublishItems)
    {
        delete m_webPublishItems;
        m_webPublishItems = NULL;
    }
    ;
    
    m_has_tableParts = false;
    
    if (m_tableParts)
    {
        delete m_tableParts;
        m_tableParts = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_dataConsolidate = true;
    if (!m_dataConsolidate)
    {
        m_dataConsolidate = new CT_DataConsolidate();
    }
    return m_dataConsolidate;
    }

    const CT_DataConsolidate& CT_Worksheet::ChildGroup_1::get_dataConsolidate() const
    {    
    if (m_dataConsolidate)
    {
        return *m_dataConsolidate;
    }
    return CT_DataConsolidate::default_instance();
    }

    bool CT_Worksheet::ChildGroup_1::has_customSheetViews() const
    {    
    return m_has_customSheetViews;
    }

    CT_CustomSheetViews* CT_Worksheet::ChildGroup_1::mutable_customSheetViews()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetCalcPr = false;
    
    if (m_sheetCalcPr)
    {
        delete m_sheetCalcPr;
        m_sheetCalcPr = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_protectedRanges = false;
    
    if (m_protectedRanges)
    {
        delete m_protectedRanges;
        m_protectedRanges = NULL;
    }
    ;
    
    m_has_scenarios = false;
    
    if (m_scenarios)
    {
        delete m_scenarios;
        m_scenarios = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_mergeCells = false;
    
    if (m_mergeCells)
    {
        delete m_mergeCells;
        m_mergeCells = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_dataValidations = false;
    
    if (m_dataValidations)
    {
        delete m_dataValidations;
        m_dataValidations = NULL;
    }
    ;
    
    m_has_hyperlinks = false;
    
    if (m_hyperlinks)
    {
        delete m_hyperlinks;
        m_hyperlinks = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_cellWatches = false;
    
    if (m_cellWatches)
    {
        delete m_cellWatches;
        m_cellWatches = NULL;
    }
    ;
    
    m_has_ignoredErrors = false;
    
    if (m_ignoredErrors)
    {
        delete m_ignoredErrors;
        m_ignoredErrors = NULL;
    }
    ;
    
    m_has_smartTags = false;
    
    if (m_smartTags)
    {
        delete m_smartTags;
        m_smartTags = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_controls = false;
    
    if (m_controls)
    {
        delete m_controls;
        m_controls = NULL;
    }
    ;
    
    m_has_webPublishItems = false;
    
    if (m_webPublishItems)
    {
        delete m_webPublishItems;
        m_webPublishItems = NULL;
    }
    ;
    
    m_has_tableParts = false;
    
    if (m_tableParts)
    {
        delete m_tableParts;
        m_tableParts = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_customSheetViews = true;
    if (!m_customSheetViews)
    {
        m_customSheetViews = new CT_CustomSheetViews();
    }
    return m_customSheetViews;
    }

    const CT_CustomSheetViews& CT_Worksheet::ChildGroup_1::get_customSheetViews() const
    {    
    if (m_customSheetViews)
    {
        return *m_customSheetViews;
    }
    return CT_CustomSheetViews::default_instance();
    }

    bool CT_Worksheet::ChildGroup_1::has_mergeCells() const
    {    
    return m_has_mergeCells;
    }

    CT_MergeCells* CT_Worksheet::ChildGroup_1::mutable_mergeCells()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetCalcPr = false;
    
    if (m_sheetCalcPr)
    {
        delete m_sheetCalcPr;
        m_sheetCalcPr = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_protectedRanges = false;
    
    if (m_protectedRanges)
    {
        delete m_protectedRanges;
        m_protectedRanges = NULL;
    }
    ;
    
    m_has_scenarios = false;
    
    if (m_scenarios)
    {
        delete m_scenarios;
        m_scenarios = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_dataValidations = false;
    
    if (m_dataValidations)
    {
        delete m_dataValidations;
        m_dataValidations = NULL;
    }
    ;
    
    m_has_hyperlinks = false;
    
    if (m_hyperlinks)
    {
        delete m_hyperlinks;
        m_hyperlinks = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_cellWatches = false;
    
    if (m_cellWatches)
    {
        delete m_cellWatches;
        m_cellWatches = NULL;
    }
    ;
    
    m_has_ignoredErrors = false;
    
    if (m_ignoredErrors)
    {
        delete m_ignoredErrors;
        m_ignoredErrors = NULL;
    }
    ;
    
    m_has_smartTags = false;
    
    if (m_smartTags)
    {
        delete m_smartTags;
        m_smartTags = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_controls = false;
    
    if (m_controls)
    {
        delete m_controls;
        m_controls = NULL;
    }
    ;
    
    m_has_webPublishItems = false;
    
    if (m_webPublishItems)
    {
        delete m_webPublishItems;
        m_webPublishItems = NULL;
    }
    ;
    
    m_has_tableParts = false;
    
    if (m_tableParts)
    {
        delete m_tableParts;
        m_tableParts = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_mergeCells = true;
    if (!m_mergeCells)
    {
        m_mergeCells = new CT_MergeCells();
    }
    return m_mergeCells;
    }

    const CT_MergeCells& CT_Worksheet::ChildGroup_1::get_mergeCells() const
    {    
    if (m_mergeCells)
    {
        return *m_mergeCells;
    }
    return CT_MergeCells::default_instance();
    }

    bool CT_Worksheet::ChildGroup_1::has_phoneticPr() const
    {    
    return m_has_phoneticPr;
    }

    CT_PhoneticPr* CT_Worksheet::ChildGroup_1::mutable_phoneticPr()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetCalcPr = false;
    
    if (m_sheetCalcPr)
    {
        delete m_sheetCalcPr;
        m_sheetCalcPr = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_protectedRanges = false;
    
    if (m_protectedRanges)
    {
        delete m_protectedRanges;
        m_protectedRanges = NULL;
    }
    ;
    
    m_has_scenarios = false;
    
    if (m_scenarios)
    {
        delete m_scenarios;
        m_scenarios = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_mergeCells = false;
    
    if (m_mergeCells)
    {
        delete m_mergeCells;
        m_mergeCells = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_dataValidations = false;
    
    if (m_dataValidations)
    {
        delete m_dataValidations;
        m_dataValidations = NULL;
    }
    ;
    
    m_has_hyperlinks = false;
    
    if (m_hyperlinks)
    {
        delete m_hyperlinks;
        m_hyperlinks = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_cellWatches = false;
    
    if (m_cellWatches)
    {
        delete m_cellWatches;
        m_cellWatches = NULL;
    }
    ;
    
    m_has_ignoredErrors = false;
    
    if (m_ignoredErrors)
    {
        delete m_ignoredErrors;
        m_ignoredErrors = NULL;
    }
    ;
    
    m_has_smartTags = false;
    
    if (m_smartTags)
    {
        delete m_smartTags;
        m_smartTags = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_controls = false;
    
    if (m_controls)
    {
        delete m_controls;
        m_controls = NULL;
    }
    ;
    
    m_has_webPublishItems = false;
    
    if (m_webPublishItems)
    {
        delete m_webPublishItems;
        m_webPublishItems = NULL;
    }
    ;
    
    m_has_tableParts = false;
    
    if (m_tableParts)
    {
        delete m_tableParts;
        m_tableParts = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_phoneticPr = true;
    if (!m_phoneticPr)
    {
        m_phoneticPr = new CT_PhoneticPr();
    }
    return m_phoneticPr;
    }

    const CT_PhoneticPr& CT_Worksheet::ChildGroup_1::get_phoneticPr() const
    {    
    if (m_phoneticPr)
    {
        return *m_phoneticPr;
    }
    return CT_PhoneticPr::default_instance();
    }

    bool CT_Worksheet::ChildGroup_1::has_conditionalFormatting() const
    {    
    return m_has_conditionalFormatting;
    }

    CT_ConditionalFormatting* CT_Worksheet::ChildGroup_1::mutable_conditionalFormatting()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetCalcPr = false;
    
    if (m_sheetCalcPr)
    {
        delete m_sheetCalcPr;
        m_sheetCalcPr = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_protectedRanges = false;
    
    if (m_protectedRanges)
    {
        delete m_protectedRanges;
        m_protectedRanges = NULL;
    }
    ;
    
    m_has_scenarios = false;
    
    if (m_scenarios)
    {
        delete m_scenarios;
        m_scenarios = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_mergeCells = false;
    
    if (m_mergeCells)
    {
        delete m_mergeCells;
        m_mergeCells = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_dataValidations = false;
    
    if (m_dataValidations)
    {
        delete m_dataValidations;
        m_dataValidations = NULL;
    }
    ;
    
    m_has_hyperlinks = false;
    
    if (m_hyperlinks)
    {
        delete m_hyperlinks;
        m_hyperlinks = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_cellWatches = false;
    
    if (m_cellWatches)
    {
        delete m_cellWatches;
        m_cellWatches = NULL;
    }
    ;
    
    m_has_ignoredErrors = false;
    
    if (m_ignoredErrors)
    {
        delete m_ignoredErrors;
        m_ignoredErrors = NULL;
    }
    ;
    
    m_has_smartTags = false;
    
    if (m_smartTags)
    {
        delete m_smartTags;
        m_smartTags = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_controls = false;
    
    if (m_controls)
    {
        delete m_controls;
        m_controls = NULL;
    }
    ;
    
    m_has_webPublishItems = false;
    
    if (m_webPublishItems)
    {
        delete m_webPublishItems;
        m_webPublishItems = NULL;
    }
    ;
    
    m_has_tableParts = false;
    
    if (m_tableParts)
    {
        delete m_tableParts;
        m_tableParts = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_conditionalFormatting = true;
    if (!m_conditionalFormatting)
    {
        m_conditionalFormatting = new CT_ConditionalFormatting();
    }
    return m_conditionalFormatting;
    }

    const CT_ConditionalFormatting& CT_Worksheet::ChildGroup_1::get_conditionalFormatting() const
    {    
    if (m_conditionalFormatting)
    {
        return *m_conditionalFormatting;
    }
    return CT_ConditionalFormatting::default_instance();
    }

    bool CT_Worksheet::ChildGroup_1::has_dataValidations() const
    {    
    return m_has_dataValidations;
    }

    CT_DataValidations* CT_Worksheet::ChildGroup_1::mutable_dataValidations()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetCalcPr = false;
    
    if (m_sheetCalcPr)
    {
        delete m_sheetCalcPr;
        m_sheetCalcPr = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_protectedRanges = false;
    
    if (m_protectedRanges)
    {
        delete m_protectedRanges;
        m_protectedRanges = NULL;
    }
    ;
    
    m_has_scenarios = false;
    
    if (m_scenarios)
    {
        delete m_scenarios;
        m_scenarios = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_mergeCells = false;
    
    if (m_mergeCells)
    {
        delete m_mergeCells;
        m_mergeCells = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_hyperlinks = false;
    
    if (m_hyperlinks)
    {
        delete m_hyperlinks;
        m_hyperlinks = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_cellWatches = false;
    
    if (m_cellWatches)
    {
        delete m_cellWatches;
        m_cellWatches = NULL;
    }
    ;
    
    m_has_ignoredErrors = false;
    
    if (m_ignoredErrors)
    {
        delete m_ignoredErrors;
        m_ignoredErrors = NULL;
    }
    ;
    
    m_has_smartTags = false;
    
    if (m_smartTags)
    {
        delete m_smartTags;
        m_smartTags = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_controls = false;
    
    if (m_controls)
    {
        delete m_controls;
        m_controls = NULL;
    }
    ;
    
    m_has_webPublishItems = false;
    
    if (m_webPublishItems)
    {
        delete m_webPublishItems;
        m_webPublishItems = NULL;
    }
    ;
    
    m_has_tableParts = false;
    
    if (m_tableParts)
    {
        delete m_tableParts;
        m_tableParts = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_dataValidations = true;
    if (!m_dataValidations)
    {
        m_dataValidations = new CT_DataValidations();
    }
    return m_dataValidations;
    }

    const CT_DataValidations& CT_Worksheet::ChildGroup_1::get_dataValidations() const
    {    
    if (m_dataValidations)
    {
        return *m_dataValidations;
    }
    return CT_DataValidations::default_instance();
    }

    bool CT_Worksheet::ChildGroup_1::has_hyperlinks() const
    {    
    return m_has_hyperlinks;
    }

    CT_Hyperlinks* CT_Worksheet::ChildGroup_1::mutable_hyperlinks()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetCalcPr = false;
    
    if (m_sheetCalcPr)
    {
        delete m_sheetCalcPr;
        m_sheetCalcPr = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_protectedRanges = false;
    
    if (m_protectedRanges)
    {
        delete m_protectedRanges;
        m_protectedRanges = NULL;
    }
    ;
    
    m_has_scenarios = false;
    
    if (m_scenarios)
    {
        delete m_scenarios;
        m_scenarios = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_mergeCells = false;
    
    if (m_mergeCells)
    {
        delete m_mergeCells;
        m_mergeCells = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_dataValidations = false;
    
    if (m_dataValidations)
    {
        delete m_dataValidations;
        m_dataValidations = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_cellWatches = false;
    
    if (m_cellWatches)
    {
        delete m_cellWatches;
        m_cellWatches = NULL;
    }
    ;
    
    m_has_ignoredErrors = false;
    
    if (m_ignoredErrors)
    {
        delete m_ignoredErrors;
        m_ignoredErrors = NULL;
    }
    ;
    
    m_has_smartTags = false;
    
    if (m_smartTags)
    {
        delete m_smartTags;
        m_smartTags = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_controls = false;
    
    if (m_controls)
    {
        delete m_controls;
        m_controls = NULL;
    }
    ;
    
    m_has_webPublishItems = false;
    
    if (m_webPublishItems)
    {
        delete m_webPublishItems;
        m_webPublishItems = NULL;
    }
    ;
    
    m_has_tableParts = false;
    
    if (m_tableParts)
    {
        delete m_tableParts;
        m_tableParts = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_hyperlinks = true;
    if (!m_hyperlinks)
    {
        m_hyperlinks = new CT_Hyperlinks();
    }
    return m_hyperlinks;
    }

    const CT_Hyperlinks& CT_Worksheet::ChildGroup_1::get_hyperlinks() const
    {    
    if (m_hyperlinks)
    {
        return *m_hyperlinks;
    }
    return CT_Hyperlinks::default_instance();
    }

    bool CT_Worksheet::ChildGroup_1::has_printOptions() const
    {    
    return m_has_printOptions;
    }

    CT_PrintOptions* CT_Worksheet::ChildGroup_1::mutable_printOptions()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetCalcPr = false;
    
    if (m_sheetCalcPr)
    {
        delete m_sheetCalcPr;
        m_sheetCalcPr = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_protectedRanges = false;
    
    if (m_protectedRanges)
    {
        delete m_protectedRanges;
        m_protectedRanges = NULL;
    }
    ;
    
    m_has_scenarios = false;
    
    if (m_scenarios)
    {
        delete m_scenarios;
        m_scenarios = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_mergeCells = false;
    
    if (m_mergeCells)
    {
        delete m_mergeCells;
        m_mergeCells = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_dataValidations = false;
    
    if (m_dataValidations)
    {
        delete m_dataValidations;
        m_dataValidations = NULL;
    }
    ;
    
    m_has_hyperlinks = false;
    
    if (m_hyperlinks)
    {
        delete m_hyperlinks;
        m_hyperlinks = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_cellWatches = false;
    
    if (m_cellWatches)
    {
        delete m_cellWatches;
        m_cellWatches = NULL;
    }
    ;
    
    m_has_ignoredErrors = false;
    
    if (m_ignoredErrors)
    {
        delete m_ignoredErrors;
        m_ignoredErrors = NULL;
    }
    ;
    
    m_has_smartTags = false;
    
    if (m_smartTags)
    {
        delete m_smartTags;
        m_smartTags = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_controls = false;
    
    if (m_controls)
    {
        delete m_controls;
        m_controls = NULL;
    }
    ;
    
    m_has_webPublishItems = false;
    
    if (m_webPublishItems)
    {
        delete m_webPublishItems;
        m_webPublishItems = NULL;
    }
    ;
    
    m_has_tableParts = false;
    
    if (m_tableParts)
    {
        delete m_tableParts;
        m_tableParts = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_printOptions = true;
    if (!m_printOptions)
    {
        m_printOptions = new CT_PrintOptions();
    }
    return m_printOptions;
    }

    const CT_PrintOptions& CT_Worksheet::ChildGroup_1::get_printOptions() const
    {    
    if (m_printOptions)
    {
        return *m_printOptions;
    }
    return CT_PrintOptions::default_instance();
    }

    bool CT_Worksheet::ChildGroup_1::has_pageMargins() const
    {    
    return m_has_pageMargins;
    }

    CT_PageMargins* CT_Worksheet::ChildGroup_1::mutable_pageMargins()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetCalcPr = false;
    
    if (m_sheetCalcPr)
    {
        delete m_sheetCalcPr;
        m_sheetCalcPr = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_protectedRanges = false;
    
    if (m_protectedRanges)
    {
        delete m_protectedRanges;
        m_protectedRanges = NULL;
    }
    ;
    
    m_has_scenarios = false;
    
    if (m_scenarios)
    {
        delete m_scenarios;
        m_scenarios = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_mergeCells = false;
    
    if (m_mergeCells)
    {
        delete m_mergeCells;
        m_mergeCells = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_dataValidations = false;
    
    if (m_dataValidations)
    {
        delete m_dataValidations;
        m_dataValidations = NULL;
    }
    ;
    
    m_has_hyperlinks = false;
    
    if (m_hyperlinks)
    {
        delete m_hyperlinks;
        m_hyperlinks = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_cellWatches = false;
    
    if (m_cellWatches)
    {
        delete m_cellWatches;
        m_cellWatches = NULL;
    }
    ;
    
    m_has_ignoredErrors = false;
    
    if (m_ignoredErrors)
    {
        delete m_ignoredErrors;
        m_ignoredErrors = NULL;
    }
    ;
    
    m_has_smartTags = false;
    
    if (m_smartTags)
    {
        delete m_smartTags;
        m_smartTags = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_controls = false;
    
    if (m_controls)
    {
        delete m_controls;
        m_controls = NULL;
    }
    ;
    
    m_has_webPublishItems = false;
    
    if (m_webPublishItems)
    {
        delete m_webPublishItems;
        m_webPublishItems = NULL;
    }
    ;
    
    m_has_tableParts = false;
    
    if (m_tableParts)
    {
        delete m_tableParts;
        m_tableParts = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_pageMargins = true;
    if (!m_pageMargins)
    {
        m_pageMargins = new CT_PageMargins();
    }
    return m_pageMargins;
    }

    const CT_PageMargins& CT_Worksheet::ChildGroup_1::get_pageMargins() const
    {    
    if (m_pageMargins)
    {
        return *m_pageMargins;
    }
    return CT_PageMargins::default_instance();
    }

    bool CT_Worksheet::ChildGroup_1::has_pageSetup() const
    {    
    return m_has_pageSetup;
    }

    CT_PageSetup* CT_Worksheet::ChildGroup_1::mutable_pageSetup()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetCalcPr = false;
    
    if (m_sheetCalcPr)
    {
        delete m_sheetCalcPr;
        m_sheetCalcPr = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_protectedRanges = false;
    
    if (m_protectedRanges)
    {
        delete m_protectedRanges;
        m_protectedRanges = NULL;
    }
    ;
    
    m_has_scenarios = false;
    
    if (m_scenarios)
    {
        delete m_scenarios;
        m_scenarios = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_mergeCells = false;
    
    if (m_mergeCells)
    {
        delete m_mergeCells;
        m_mergeCells = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_dataValidations = false;
    
    if (m_dataValidations)
    {
        delete m_dataValidations;
        m_dataValidations = NULL;
    }
    ;
    
    m_has_hyperlinks = false;
    
    if (m_hyperlinks)
    {
        delete m_hyperlinks;
        m_hyperlinks = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_cellWatches = false;
    
    if (m_cellWatches)
    {
        delete m_cellWatches;
        m_cellWatches = NULL;
    }
    ;
    
    m_has_ignoredErrors = false;
    
    if (m_ignoredErrors)
    {
        delete m_ignoredErrors;
        m_ignoredErrors = NULL;
    }
    ;
    
    m_has_smartTags = false;
    
    if (m_smartTags)
    {
        delete m_smartTags;
        m_smartTags = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_controls = false;
    
    if (m_controls)
    {
        delete m_controls;
        m_controls = NULL;
    }
    ;
    
    m_has_webPublishItems = false;
    
    if (m_webPublishItems)
    {
        delete m_webPublishItems;
        m_webPublishItems = NULL;
    }
    ;
    
    m_has_tableParts = false;
    
    if (m_tableParts)
    {
        delete m_tableParts;
        m_tableParts = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_pageSetup = true;
    if (!m_pageSetup)
    {
        m_pageSetup = new CT_PageSetup();
    }
    return m_pageSetup;
    }

    const CT_PageSetup& CT_Worksheet::ChildGroup_1::get_pageSetup() const
    {    
    if (m_pageSetup)
    {
        return *m_pageSetup;
    }
    return CT_PageSetup::default_instance();
    }

    bool CT_Worksheet::ChildGroup_1::has_headerFooter() const
    {    
    return m_has_headerFooter;
    }

    CT_HeaderFooter* CT_Worksheet::ChildGroup_1::mutable_headerFooter()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetCalcPr = false;
    
    if (m_sheetCalcPr)
    {
        delete m_sheetCalcPr;
        m_sheetCalcPr = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_protectedRanges = false;
    
    if (m_protectedRanges)
    {
        delete m_protectedRanges;
        m_protectedRanges = NULL;
    }
    ;
    
    m_has_scenarios = false;
    
    if (m_scenarios)
    {
        delete m_scenarios;
        m_scenarios = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_mergeCells = false;
    
    if (m_mergeCells)
    {
        delete m_mergeCells;
        m_mergeCells = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_dataValidations = false;
    
    if (m_dataValidations)
    {
        delete m_dataValidations;
        m_dataValidations = NULL;
    }
    ;
    
    m_has_hyperlinks = false;
    
    if (m_hyperlinks)
    {
        delete m_hyperlinks;
        m_hyperlinks = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_cellWatches = false;
    
    if (m_cellWatches)
    {
        delete m_cellWatches;
        m_cellWatches = NULL;
    }
    ;
    
    m_has_ignoredErrors = false;
    
    if (m_ignoredErrors)
    {
        delete m_ignoredErrors;
        m_ignoredErrors = NULL;
    }
    ;
    
    m_has_smartTags = false;
    
    if (m_smartTags)
    {
        delete m_smartTags;
        m_smartTags = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_controls = false;
    
    if (m_controls)
    {
        delete m_controls;
        m_controls = NULL;
    }
    ;
    
    m_has_webPublishItems = false;
    
    if (m_webPublishItems)
    {
        delete m_webPublishItems;
        m_webPublishItems = NULL;
    }
    ;
    
    m_has_tableParts = false;
    
    if (m_tableParts)
    {
        delete m_tableParts;
        m_tableParts = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_headerFooter = true;
    if (!m_headerFooter)
    {
        m_headerFooter = new CT_HeaderFooter();
    }
    return m_headerFooter;
    }

    const CT_HeaderFooter& CT_Worksheet::ChildGroup_1::get_headerFooter() const
    {    
    if (m_headerFooter)
    {
        return *m_headerFooter;
    }
    return CT_HeaderFooter::default_instance();
    }

    bool CT_Worksheet::ChildGroup_1::has_rowBreaks() const
    {    
    return m_has_rowBreaks;
    }

    CT_PageBreak* CT_Worksheet::ChildGroup_1::mutable_rowBreaks()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetCalcPr = false;
    
    if (m_sheetCalcPr)
    {
        delete m_sheetCalcPr;
        m_sheetCalcPr = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_protectedRanges = false;
    
    if (m_protectedRanges)
    {
        delete m_protectedRanges;
        m_protectedRanges = NULL;
    }
    ;
    
    m_has_scenarios = false;
    
    if (m_scenarios)
    {
        delete m_scenarios;
        m_scenarios = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_mergeCells = false;
    
    if (m_mergeCells)
    {
        delete m_mergeCells;
        m_mergeCells = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_dataValidations = false;
    
    if (m_dataValidations)
    {
        delete m_dataValidations;
        m_dataValidations = NULL;
    }
    ;
    
    m_has_hyperlinks = false;
    
    if (m_hyperlinks)
    {
        delete m_hyperlinks;
        m_hyperlinks = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_cellWatches = false;
    
    if (m_cellWatches)
    {
        delete m_cellWatches;
        m_cellWatches = NULL;
    }
    ;
    
    m_has_ignoredErrors = false;
    
    if (m_ignoredErrors)
    {
        delete m_ignoredErrors;
        m_ignoredErrors = NULL;
    }
    ;
    
    m_has_smartTags = false;
    
    if (m_smartTags)
    {
        delete m_smartTags;
        m_smartTags = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_controls = false;
    
    if (m_controls)
    {
        delete m_controls;
        m_controls = NULL;
    }
    ;
    
    m_has_webPublishItems = false;
    
    if (m_webPublishItems)
    {
        delete m_webPublishItems;
        m_webPublishItems = NULL;
    }
    ;
    
    m_has_tableParts = false;
    
    if (m_tableParts)
    {
        delete m_tableParts;
        m_tableParts = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_rowBreaks = true;
    if (!m_rowBreaks)
    {
        m_rowBreaks = new CT_PageBreak();
    }
    return m_rowBreaks;
    }

    const CT_PageBreak& CT_Worksheet::ChildGroup_1::get_rowBreaks() const
    {    
    if (m_rowBreaks)
    {
        return *m_rowBreaks;
    }
    return CT_PageBreak::default_instance();
    }

    bool CT_Worksheet::ChildGroup_1::has_colBreaks() const
    {    
    return m_has_colBreaks;
    }

    CT_PageBreak* CT_Worksheet::ChildGroup_1::mutable_colBreaks()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetCalcPr = false;
    
    if (m_sheetCalcPr)
    {
        delete m_sheetCalcPr;
        m_sheetCalcPr = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_protectedRanges = false;
    
    if (m_protectedRanges)
    {
        delete m_protectedRanges;
        m_protectedRanges = NULL;
    }
    ;
    
    m_has_scenarios = false;
    
    if (m_scenarios)
    {
        delete m_scenarios;
        m_scenarios = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_mergeCells = false;
    
    if (m_mergeCells)
    {
        delete m_mergeCells;
        m_mergeCells = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_dataValidations = false;
    
    if (m_dataValidations)
    {
        delete m_dataValidations;
        m_dataValidations = NULL;
    }
    ;
    
    m_has_hyperlinks = false;
    
    if (m_hyperlinks)
    {
        delete m_hyperlinks;
        m_hyperlinks = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_cellWatches = false;
    
    if (m_cellWatches)
    {
        delete m_cellWatches;
        m_cellWatches = NULL;
    }
    ;
    
    m_has_ignoredErrors = false;
    
    if (m_ignoredErrors)
    {
        delete m_ignoredErrors;
        m_ignoredErrors = NULL;
    }
    ;
    
    m_has_smartTags = false;
    
    if (m_smartTags)
    {
        delete m_smartTags;
        m_smartTags = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_controls = false;
    
    if (m_controls)
    {
        delete m_controls;
        m_controls = NULL;
    }
    ;
    
    m_has_webPublishItems = false;
    
    if (m_webPublishItems)
    {
        delete m_webPublishItems;
        m_webPublishItems = NULL;
    }
    ;
    
    m_has_tableParts = false;
    
    if (m_tableParts)
    {
        delete m_tableParts;
        m_tableParts = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_colBreaks = true;
    if (!m_colBreaks)
    {
        m_colBreaks = new CT_PageBreak();
    }
    return m_colBreaks;
    }

    const CT_PageBreak& CT_Worksheet::ChildGroup_1::get_colBreaks() const
    {    
    if (m_colBreaks)
    {
        return *m_colBreaks;
    }
    return CT_PageBreak::default_instance();
    }

    bool CT_Worksheet::ChildGroup_1::has_customProperties() const
    {    
    return m_has_customProperties;
    }

    CT_CustomProperties* CT_Worksheet::ChildGroup_1::mutable_customProperties()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetCalcPr = false;
    
    if (m_sheetCalcPr)
    {
        delete m_sheetCalcPr;
        m_sheetCalcPr = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_protectedRanges = false;
    
    if (m_protectedRanges)
    {
        delete m_protectedRanges;
        m_protectedRanges = NULL;
    }
    ;
    
    m_has_scenarios = false;
    
    if (m_scenarios)
    {
        delete m_scenarios;
        m_scenarios = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_mergeCells = false;
    
    if (m_mergeCells)
    {
        delete m_mergeCells;
        m_mergeCells = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_dataValidations = false;
    
    if (m_dataValidations)
    {
        delete m_dataValidations;
        m_dataValidations = NULL;
    }
    ;
    
    m_has_hyperlinks = false;
    
    if (m_hyperlinks)
    {
        delete m_hyperlinks;
        m_hyperlinks = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_cellWatches = false;
    
    if (m_cellWatches)
    {
        delete m_cellWatches;
        m_cellWatches = NULL;
    }
    ;
    
    m_has_ignoredErrors = false;
    
    if (m_ignoredErrors)
    {
        delete m_ignoredErrors;
        m_ignoredErrors = NULL;
    }
    ;
    
    m_has_smartTags = false;
    
    if (m_smartTags)
    {
        delete m_smartTags;
        m_smartTags = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_controls = false;
    
    if (m_controls)
    {
        delete m_controls;
        m_controls = NULL;
    }
    ;
    
    m_has_webPublishItems = false;
    
    if (m_webPublishItems)
    {
        delete m_webPublishItems;
        m_webPublishItems = NULL;
    }
    ;
    
    m_has_tableParts = false;
    
    if (m_tableParts)
    {
        delete m_tableParts;
        m_tableParts = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_customProperties = true;
    if (!m_customProperties)
    {
        m_customProperties = new CT_CustomProperties();
    }
    return m_customProperties;
    }

    const CT_CustomProperties& CT_Worksheet::ChildGroup_1::get_customProperties() const
    {    
    if (m_customProperties)
    {
        return *m_customProperties;
    }
    return CT_CustomProperties::default_instance();
    }

    bool CT_Worksheet::ChildGroup_1::has_cellWatches() const
    {    
    return m_has_cellWatches;
    }

    CT_CellWatches* CT_Worksheet::ChildGroup_1::mutable_cellWatches()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetCalcPr = false;
    
    if (m_sheetCalcPr)
    {
        delete m_sheetCalcPr;
        m_sheetCalcPr = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_protectedRanges = false;
    
    if (m_protectedRanges)
    {
        delete m_protectedRanges;
        m_protectedRanges = NULL;
    }
    ;
    
    m_has_scenarios = false;
    
    if (m_scenarios)
    {
        delete m_scenarios;
        m_scenarios = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_mergeCells = false;
    
    if (m_mergeCells)
    {
        delete m_mergeCells;
        m_mergeCells = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_dataValidations = false;
    
    if (m_dataValidations)
    {
        delete m_dataValidations;
        m_dataValidations = NULL;
    }
    ;
    
    m_has_hyperlinks = false;
    
    if (m_hyperlinks)
    {
        delete m_hyperlinks;
        m_hyperlinks = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_ignoredErrors = false;
    
    if (m_ignoredErrors)
    {
        delete m_ignoredErrors;
        m_ignoredErrors = NULL;
    }
    ;
    
    m_has_smartTags = false;
    
    if (m_smartTags)
    {
        delete m_smartTags;
        m_smartTags = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_controls = false;
    
    if (m_controls)
    {
        delete m_controls;
        m_controls = NULL;
    }
    ;
    
    m_has_webPublishItems = false;
    
    if (m_webPublishItems)
    {
        delete m_webPublishItems;
        m_webPublishItems = NULL;
    }
    ;
    
    m_has_tableParts = false;
    
    if (m_tableParts)
    {
        delete m_tableParts;
        m_tableParts = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_cellWatches = true;
    if (!m_cellWatches)
    {
        m_cellWatches = new CT_CellWatches();
    }
    return m_cellWatches;
    }

    const CT_CellWatches& CT_Worksheet::ChildGroup_1::get_cellWatches() const
    {    
    if (m_cellWatches)
    {
        return *m_cellWatches;
    }
    return CT_CellWatches::default_instance();
    }

    bool CT_Worksheet::ChildGroup_1::has_ignoredErrors() const
    {    
    return m_has_ignoredErrors;
    }

    CT_IgnoredErrors* CT_Worksheet::ChildGroup_1::mutable_ignoredErrors()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetCalcPr = false;
    
    if (m_sheetCalcPr)
    {
        delete m_sheetCalcPr;
        m_sheetCalcPr = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_protectedRanges = false;
    
    if (m_protectedRanges)
    {
        delete m_protectedRanges;
        m_protectedRanges = NULL;
    }
    ;
    
    m_has_scenarios = false;
    
    if (m_scenarios)
    {
        delete m_scenarios;
        m_scenarios = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_mergeCells = false;
    
    if (m_mergeCells)
    {
        delete m_mergeCells;
        m_mergeCells = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_dataValidations = false;
    
    if (m_dataValidations)
    {
        delete m_dataValidations;
        m_dataValidations = NULL;
    }
    ;
    
    m_has_hyperlinks = false;
    
    if (m_hyperlinks)
    {
        delete m_hyperlinks;
        m_hyperlinks = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_cellWatches = false;
    
    if (m_cellWatches)
    {
        delete m_cellWatches;
        m_cellWatches = NULL;
    }
    ;
    
    m_has_smartTags = false;
    
    if (m_smartTags)
    {
        delete m_smartTags;
        m_smartTags = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_controls = false;
    
    if (m_controls)
    {
        delete m_controls;
        m_controls = NULL;
    }
    ;
    
    m_has_webPublishItems = false;
    
    if (m_webPublishItems)
    {
        delete m_webPublishItems;
        m_webPublishItems = NULL;
    }
    ;
    
    m_has_tableParts = false;
    
    if (m_tableParts)
    {
        delete m_tableParts;
        m_tableParts = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_ignoredErrors = true;
    if (!m_ignoredErrors)
    {
        m_ignoredErrors = new CT_IgnoredErrors();
    }
    return m_ignoredErrors;
    }

    const CT_IgnoredErrors& CT_Worksheet::ChildGroup_1::get_ignoredErrors() const
    {    
    if (m_ignoredErrors)
    {
        return *m_ignoredErrors;
    }
    return CT_IgnoredErrors::default_instance();
    }

    bool CT_Worksheet::ChildGroup_1::has_smartTags() const
    {    
    return m_has_smartTags;
    }

    CT_SmartTags* CT_Worksheet::ChildGroup_1::mutable_smartTags()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetCalcPr = false;
    
    if (m_sheetCalcPr)
    {
        delete m_sheetCalcPr;
        m_sheetCalcPr = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_protectedRanges = false;
    
    if (m_protectedRanges)
    {
        delete m_protectedRanges;
        m_protectedRanges = NULL;
    }
    ;
    
    m_has_scenarios = false;
    
    if (m_scenarios)
    {
        delete m_scenarios;
        m_scenarios = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_mergeCells = false;
    
    if (m_mergeCells)
    {
        delete m_mergeCells;
        m_mergeCells = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_dataValidations = false;
    
    if (m_dataValidations)
    {
        delete m_dataValidations;
        m_dataValidations = NULL;
    }
    ;
    
    m_has_hyperlinks = false;
    
    if (m_hyperlinks)
    {
        delete m_hyperlinks;
        m_hyperlinks = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_cellWatches = false;
    
    if (m_cellWatches)
    {
        delete m_cellWatches;
        m_cellWatches = NULL;
    }
    ;
    
    m_has_ignoredErrors = false;
    
    if (m_ignoredErrors)
    {
        delete m_ignoredErrors;
        m_ignoredErrors = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_controls = false;
    
    if (m_controls)
    {
        delete m_controls;
        m_controls = NULL;
    }
    ;
    
    m_has_webPublishItems = false;
    
    if (m_webPublishItems)
    {
        delete m_webPublishItems;
        m_webPublishItems = NULL;
    }
    ;
    
    m_has_tableParts = false;
    
    if (m_tableParts)
    {
        delete m_tableParts;
        m_tableParts = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_smartTags = true;
    if (!m_smartTags)
    {
        m_smartTags = new CT_SmartTags();
    }
    return m_smartTags;
    }

    const CT_SmartTags& CT_Worksheet::ChildGroup_1::get_smartTags() const
    {    
    if (m_smartTags)
    {
        return *m_smartTags;
    }
    return CT_SmartTags::default_instance();
    }

    bool CT_Worksheet::ChildGroup_1::has_drawing() const
    {    
    return m_has_drawing;
    }

    CT_Drawing* CT_Worksheet::ChildGroup_1::mutable_drawing()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetCalcPr = false;
    
    if (m_sheetCalcPr)
    {
        delete m_sheetCalcPr;
        m_sheetCalcPr = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_protectedRanges = false;
    
    if (m_protectedRanges)
    {
        delete m_protectedRanges;
        m_protectedRanges = NULL;
    }
    ;
    
    m_has_scenarios = false;
    
    if (m_scenarios)
    {
        delete m_scenarios;
        m_scenarios = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_mergeCells = false;
    
    if (m_mergeCells)
    {
        delete m_mergeCells;
        m_mergeCells = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_dataValidations = false;
    
    if (m_dataValidations)
    {
        delete m_dataValidations;
        m_dataValidations = NULL;
    }
    ;
    
    m_has_hyperlinks = false;
    
    if (m_hyperlinks)
    {
        delete m_hyperlinks;
        m_hyperlinks = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_cellWatches = false;
    
    if (m_cellWatches)
    {
        delete m_cellWatches;
        m_cellWatches = NULL;
    }
    ;
    
    m_has_ignoredErrors = false;
    
    if (m_ignoredErrors)
    {
        delete m_ignoredErrors;
        m_ignoredErrors = NULL;
    }
    ;
    
    m_has_smartTags = false;
    
    if (m_smartTags)
    {
        delete m_smartTags;
        m_smartTags = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_controls = false;
    
    if (m_controls)
    {
        delete m_controls;
        m_controls = NULL;
    }
    ;
    
    m_has_webPublishItems = false;
    
    if (m_webPublishItems)
    {
        delete m_webPublishItems;
        m_webPublishItems = NULL;
    }
    ;
    
    m_has_tableParts = false;
    
    if (m_tableParts)
    {
        delete m_tableParts;
        m_tableParts = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_drawing = true;
    if (!m_drawing)
    {
        m_drawing = new CT_Drawing();
    }
    return m_drawing;
    }

    const CT_Drawing& CT_Worksheet::ChildGroup_1::get_drawing() const
    {    
    if (m_drawing)
    {
        return *m_drawing;
    }
    return CT_Drawing::default_instance();
    }

    bool CT_Worksheet::ChildGroup_1::has_legacyDrawing() const
    {    
    return m_has_legacyDrawing;
    }

    CT_LegacyDrawing* CT_Worksheet::ChildGroup_1::mutable_legacyDrawing()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetCalcPr = false;
    
    if (m_sheetCalcPr)
    {
        delete m_sheetCalcPr;
        m_sheetCalcPr = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_protectedRanges = false;
    
    if (m_protectedRanges)
    {
        delete m_protectedRanges;
        m_protectedRanges = NULL;
    }
    ;
    
    m_has_scenarios = false;
    
    if (m_scenarios)
    {
        delete m_scenarios;
        m_scenarios = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_mergeCells = false;
    
    if (m_mergeCells)
    {
        delete m_mergeCells;
        m_mergeCells = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_dataValidations = false;
    
    if (m_dataValidations)
    {
        delete m_dataValidations;
        m_dataValidations = NULL;
    }
    ;
    
    m_has_hyperlinks = false;
    
    if (m_hyperlinks)
    {
        delete m_hyperlinks;
        m_hyperlinks = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_cellWatches = false;
    
    if (m_cellWatches)
    {
        delete m_cellWatches;
        m_cellWatches = NULL;
    }
    ;
    
    m_has_ignoredErrors = false;
    
    if (m_ignoredErrors)
    {
        delete m_ignoredErrors;
        m_ignoredErrors = NULL;
    }
    ;
    
    m_has_smartTags = false;
    
    if (m_smartTags)
    {
        delete m_smartTags;
        m_smartTags = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_controls = false;
    
    if (m_controls)
    {
        delete m_controls;
        m_controls = NULL;
    }
    ;
    
    m_has_webPublishItems = false;
    
    if (m_webPublishItems)
    {
        delete m_webPublishItems;
        m_webPublishItems = NULL;
    }
    ;
    
    m_has_tableParts = false;
    
    if (m_tableParts)
    {
        delete m_tableParts;
        m_tableParts = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_legacyDrawing = true;
    if (!m_legacyDrawing)
    {
        m_legacyDrawing = new CT_LegacyDrawing();
    }
    return m_legacyDrawing;
    }

    const CT_LegacyDrawing& CT_Worksheet::ChildGroup_1::get_legacyDrawing() const
    {    
    if (m_legacyDrawing)
    {
        return *m_legacyDrawing;
    }
    return CT_LegacyDrawing::default_instance();
    }

    bool CT_Worksheet::ChildGroup_1::has_legacyDrawingHF() const
    {    
    return m_has_legacyDrawingHF;
    }

    CT_LegacyDrawing* CT_Worksheet::ChildGroup_1::mutable_legacyDrawingHF()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetCalcPr = false;
    
    if (m_sheetCalcPr)
    {
        delete m_sheetCalcPr;
        m_sheetCalcPr = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_protectedRanges = false;
    
    if (m_protectedRanges)
    {
        delete m_protectedRanges;
        m_protectedRanges = NULL;
    }
    ;
    
    m_has_scenarios = false;
    
    if (m_scenarios)
    {
        delete m_scenarios;
        m_scenarios = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_mergeCells = false;
    
    if (m_mergeCells)
    {
        delete m_mergeCells;
        m_mergeCells = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_dataValidations = false;
    
    if (m_dataValidations)
    {
        delete m_dataValidations;
        m_dataValidations = NULL;
    }
    ;
    
    m_has_hyperlinks = false;
    
    if (m_hyperlinks)
    {
        delete m_hyperlinks;
        m_hyperlinks = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_cellWatches = false;
    
    if (m_cellWatches)
    {
        delete m_cellWatches;
        m_cellWatches = NULL;
    }
    ;
    
    m_has_ignoredErrors = false;
    
    if (m_ignoredErrors)
    {
        delete m_ignoredErrors;
        m_ignoredErrors = NULL;
    }
    ;
    
    m_has_smartTags = false;
    
    if (m_smartTags)
    {
        delete m_smartTags;
        m_smartTags = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_controls = false;
    
    if (m_controls)
    {
        delete m_controls;
        m_controls = NULL;
    }
    ;
    
    m_has_webPublishItems = false;
    
    if (m_webPublishItems)
    {
        delete m_webPublishItems;
        m_webPublishItems = NULL;
    }
    ;
    
    m_has_tableParts = false;
    
    if (m_tableParts)
    {
        delete m_tableParts;
        m_tableParts = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = true;
    if (!m_legacyDrawingHF)
    {
        m_legacyDrawingHF = new CT_LegacyDrawing();
    }
    return m_legacyDrawingHF;
    }

    const CT_LegacyDrawing& CT_Worksheet::ChildGroup_1::get_legacyDrawingHF() const
    {    
    if (m_legacyDrawingHF)
    {
        return *m_legacyDrawingHF;
    }
    return CT_LegacyDrawing::default_instance();
    }

    bool CT_Worksheet::ChildGroup_1::has_drawingHF() const
    {    
    return m_has_drawingHF;
    }

    CT_DrawingHF* CT_Worksheet::ChildGroup_1::mutable_drawingHF()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetCalcPr = false;
    
    if (m_sheetCalcPr)
    {
        delete m_sheetCalcPr;
        m_sheetCalcPr = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_protectedRanges = false;
    
    if (m_protectedRanges)
    {
        delete m_protectedRanges;
        m_protectedRanges = NULL;
    }
    ;
    
    m_has_scenarios = false;
    
    if (m_scenarios)
    {
        delete m_scenarios;
        m_scenarios = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_mergeCells = false;
    
    if (m_mergeCells)
    {
        delete m_mergeCells;
        m_mergeCells = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_dataValidations = false;
    
    if (m_dataValidations)
    {
        delete m_dataValidations;
        m_dataValidations = NULL;
    }
    ;
    
    m_has_hyperlinks = false;
    
    if (m_hyperlinks)
    {
        delete m_hyperlinks;
        m_hyperlinks = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_cellWatches = false;
    
    if (m_cellWatches)
    {
        delete m_cellWatches;
        m_cellWatches = NULL;
    }
    ;
    
    m_has_ignoredErrors = false;
    
    if (m_ignoredErrors)
    {
        delete m_ignoredErrors;
        m_ignoredErrors = NULL;
    }
    ;
    
    m_has_smartTags = false;
    
    if (m_smartTags)
    {
        delete m_smartTags;
        m_smartTags = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_controls = false;
    
    if (m_controls)
    {
        delete m_controls;
        m_controls = NULL;
    }
    ;
    
    m_has_webPublishItems = false;
    
    if (m_webPublishItems)
    {
        delete m_webPublishItems;
        m_webPublishItems = NULL;
    }
    ;
    
    m_has_tableParts = false;
    
    if (m_tableParts)
    {
        delete m_tableParts;
        m_tableParts = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_drawingHF = true;
    if (!m_drawingHF)
    {
        m_drawingHF = new CT_DrawingHF();
    }
    return m_drawingHF;
    }

    const CT_DrawingHF& CT_Worksheet::ChildGroup_1::get_drawingHF() const
    {    
    if (m_drawingHF)
    {
        return *m_drawingHF;
    }
    return CT_DrawingHF::default_instance();
    }

    bool CT_Worksheet::ChildGroup_1::has_picture() const
    {    
    return m_has_picture;
    }

    CT_SheetBackgroundPicture* CT_Worksheet::ChildGroup_1::mutable_picture()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetCalcPr = false;
    
    if (m_sheetCalcPr)
    {
        delete m_sheetCalcPr;
        m_sheetCalcPr = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_protectedRanges = false;
    
    if (m_protectedRanges)
    {
        delete m_protectedRanges;
        m_protectedRanges = NULL;
    }
    ;
    
    m_has_scenarios = false;
    
    if (m_scenarios)
    {
        delete m_scenarios;
        m_scenarios = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_mergeCells = false;
    
    if (m_mergeCells)
    {
        delete m_mergeCells;
        m_mergeCells = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_dataValidations = false;
    
    if (m_dataValidations)
    {
        delete m_dataValidations;
        m_dataValidations = NULL;
    }
    ;
    
    m_has_hyperlinks = false;
    
    if (m_hyperlinks)
    {
        delete m_hyperlinks;
        m_hyperlinks = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_cellWatches = false;
    
    if (m_cellWatches)
    {
        delete m_cellWatches;
        m_cellWatches = NULL;
    }
    ;
    
    m_has_ignoredErrors = false;
    
    if (m_ignoredErrors)
    {
        delete m_ignoredErrors;
        m_ignoredErrors = NULL;
    }
    ;
    
    m_has_smartTags = false;
    
    if (m_smartTags)
    {
        delete m_smartTags;
        m_smartTags = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_controls = false;
    
    if (m_controls)
    {
        delete m_controls;
        m_controls = NULL;
    }
    ;
    
    m_has_webPublishItems = false;
    
    if (m_webPublishItems)
    {
        delete m_webPublishItems;
        m_webPublishItems = NULL;
    }
    ;
    
    m_has_tableParts = false;
    
    if (m_tableParts)
    {
        delete m_tableParts;
        m_tableParts = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_picture = true;
    if (!m_picture)
    {
        m_picture = new CT_SheetBackgroundPicture();
    }
    return m_picture;
    }

    const CT_SheetBackgroundPicture& CT_Worksheet::ChildGroup_1::get_picture() const
    {    
    if (m_picture)
    {
        return *m_picture;
    }
    return CT_SheetBackgroundPicture::default_instance();
    }

    bool CT_Worksheet::ChildGroup_1::has_oleObjects() const
    {    
    return m_has_oleObjects;
    }

    CT_OleObjects* CT_Worksheet::ChildGroup_1::mutable_oleObjects()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetCalcPr = false;
    
    if (m_sheetCalcPr)
    {
        delete m_sheetCalcPr;
        m_sheetCalcPr = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_protectedRanges = false;
    
    if (m_protectedRanges)
    {
        delete m_protectedRanges;
        m_protectedRanges = NULL;
    }
    ;
    
    m_has_scenarios = false;
    
    if (m_scenarios)
    {
        delete m_scenarios;
        m_scenarios = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_mergeCells = false;
    
    if (m_mergeCells)
    {
        delete m_mergeCells;
        m_mergeCells = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_dataValidations = false;
    
    if (m_dataValidations)
    {
        delete m_dataValidations;
        m_dataValidations = NULL;
    }
    ;
    
    m_has_hyperlinks = false;
    
    if (m_hyperlinks)
    {
        delete m_hyperlinks;
        m_hyperlinks = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_cellWatches = false;
    
    if (m_cellWatches)
    {
        delete m_cellWatches;
        m_cellWatches = NULL;
    }
    ;
    
    m_has_ignoredErrors = false;
    
    if (m_ignoredErrors)
    {
        delete m_ignoredErrors;
        m_ignoredErrors = NULL;
    }
    ;
    
    m_has_smartTags = false;
    
    if (m_smartTags)
    {
        delete m_smartTags;
        m_smartTags = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_controls = false;
    
    if (m_controls)
    {
        delete m_controls;
        m_controls = NULL;
    }
    ;
    
    m_has_webPublishItems = false;
    
    if (m_webPublishItems)
    {
        delete m_webPublishItems;
        m_webPublishItems = NULL;
    }
    ;
    
    m_has_tableParts = false;
    
    if (m_tableParts)
    {
        delete m_tableParts;
        m_tableParts = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_oleObjects = true;
    if (!m_oleObjects)
    {
        m_oleObjects = new CT_OleObjects();
    }
    return m_oleObjects;
    }

    const CT_OleObjects& CT_Worksheet::ChildGroup_1::get_oleObjects() const
    {    
    if (m_oleObjects)
    {
        return *m_oleObjects;
    }
    return CT_OleObjects::default_instance();
    }

    bool CT_Worksheet::ChildGroup_1::has_controls() const
    {    
    return m_has_controls;
    }

    CT_Controls* CT_Worksheet::ChildGroup_1::mutable_controls()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetCalcPr = false;
    
    if (m_sheetCalcPr)
    {
        delete m_sheetCalcPr;
        m_sheetCalcPr = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_protectedRanges = false;
    
    if (m_protectedRanges)
    {
        delete m_protectedRanges;
        m_protectedRanges = NULL;
    }
    ;
    
    m_has_scenarios = false;
    
    if (m_scenarios)
    {
        delete m_scenarios;
        m_scenarios = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_mergeCells = false;
    
    if (m_mergeCells)
    {
        delete m_mergeCells;
        m_mergeCells = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_dataValidations = false;
    
    if (m_dataValidations)
    {
        delete m_dataValidations;
        m_dataValidations = NULL;
    }
    ;
    
    m_has_hyperlinks = false;
    
    if (m_hyperlinks)
    {
        delete m_hyperlinks;
        m_hyperlinks = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_cellWatches = false;
    
    if (m_cellWatches)
    {
        delete m_cellWatches;
        m_cellWatches = NULL;
    }
    ;
    
    m_has_ignoredErrors = false;
    
    if (m_ignoredErrors)
    {
        delete m_ignoredErrors;
        m_ignoredErrors = NULL;
    }
    ;
    
    m_has_smartTags = false;
    
    if (m_smartTags)
    {
        delete m_smartTags;
        m_smartTags = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_webPublishItems = false;
    
    if (m_webPublishItems)
    {
        delete m_webPublishItems;
        m_webPublishItems = NULL;
    }
    ;
    
    m_has_tableParts = false;
    
    if (m_tableParts)
    {
        delete m_tableParts;
        m_tableParts = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_controls = true;
    if (!m_controls)
    {
        m_controls = new CT_Controls();
    }
    return m_controls;
    }

    const CT_Controls& CT_Worksheet::ChildGroup_1::get_controls() const
    {    
    if (m_controls)
    {
        return *m_controls;
    }
    return CT_Controls::default_instance();
    }

    bool CT_Worksheet::ChildGroup_1::has_webPublishItems() const
    {    
    return m_has_webPublishItems;
    }

    CT_WebPublishItems* CT_Worksheet::ChildGroup_1::mutable_webPublishItems()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetCalcPr = false;
    
    if (m_sheetCalcPr)
    {
        delete m_sheetCalcPr;
        m_sheetCalcPr = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_protectedRanges = false;
    
    if (m_protectedRanges)
    {
        delete m_protectedRanges;
        m_protectedRanges = NULL;
    }
    ;
    
    m_has_scenarios = false;
    
    if (m_scenarios)
    {
        delete m_scenarios;
        m_scenarios = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_mergeCells = false;
    
    if (m_mergeCells)
    {
        delete m_mergeCells;
        m_mergeCells = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_dataValidations = false;
    
    if (m_dataValidations)
    {
        delete m_dataValidations;
        m_dataValidations = NULL;
    }
    ;
    
    m_has_hyperlinks = false;
    
    if (m_hyperlinks)
    {
        delete m_hyperlinks;
        m_hyperlinks = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_cellWatches = false;
    
    if (m_cellWatches)
    {
        delete m_cellWatches;
        m_cellWatches = NULL;
    }
    ;
    
    m_has_ignoredErrors = false;
    
    if (m_ignoredErrors)
    {
        delete m_ignoredErrors;
        m_ignoredErrors = NULL;
    }
    ;
    
    m_has_smartTags = false;
    
    if (m_smartTags)
    {
        delete m_smartTags;
        m_smartTags = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_controls = false;
    
    if (m_controls)
    {
        delete m_controls;
        m_controls = NULL;
    }
    ;
    
    m_has_tableParts = false;
    
    if (m_tableParts)
    {
        delete m_tableParts;
        m_tableParts = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_webPublishItems = true;
    if (!m_webPublishItems)
    {
        m_webPublishItems = new CT_WebPublishItems();
    }
    return m_webPublishItems;
    }

    const CT_WebPublishItems& CT_Worksheet::ChildGroup_1::get_webPublishItems() const
    {    
    if (m_webPublishItems)
    {
        return *m_webPublishItems;
    }
    return CT_WebPublishItems::default_instance();
    }

    bool CT_Worksheet::ChildGroup_1::has_tableParts() const
    {    
    return m_has_tableParts;
    }

    CT_TableParts* CT_Worksheet::ChildGroup_1::mutable_tableParts()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetCalcPr = false;
    
    if (m_sheetCalcPr)
    {
        delete m_sheetCalcPr;
        m_sheetCalcPr = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_protectedRanges = false;
    
    if (m_protectedRanges)
    {
        delete m_protectedRanges;
        m_protectedRanges = NULL;
    }
    ;
    
    m_has_scenarios = false;
    
    if (m_scenarios)
    {
        delete m_scenarios;
        m_scenarios = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_mergeCells = false;
    
    if (m_mergeCells)
    {
        delete m_mergeCells;
        m_mergeCells = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_dataValidations = false;
    
    if (m_dataValidations)
    {
        delete m_dataValidations;
        m_dataValidations = NULL;
    }
    ;
    
    m_has_hyperlinks = false;
    
    if (m_hyperlinks)
    {
        delete m_hyperlinks;
        m_hyperlinks = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_cellWatches = false;
    
    if (m_cellWatches)
    {
        delete m_cellWatches;
        m_cellWatches = NULL;
    }
    ;
    
    m_has_ignoredErrors = false;
    
    if (m_ignoredErrors)
    {
        delete m_ignoredErrors;
        m_ignoredErrors = NULL;
    }
    ;
    
    m_has_smartTags = false;
    
    if (m_smartTags)
    {
        delete m_smartTags;
        m_smartTags = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_controls = false;
    
    if (m_controls)
    {
        delete m_controls;
        m_controls = NULL;
    }
    ;
    
    m_has_webPublishItems = false;
    
    if (m_webPublishItems)
    {
        delete m_webPublishItems;
        m_webPublishItems = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_tableParts = true;
    if (!m_tableParts)
    {
        m_tableParts = new CT_TableParts();
    }
    return m_tableParts;
    }

    const CT_TableParts& CT_Worksheet::ChildGroup_1::get_tableParts() const
    {    
    if (m_tableParts)
    {
        return *m_tableParts;
    }
    return CT_TableParts::default_instance();
    }

    bool CT_Worksheet::ChildGroup_1::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* CT_Worksheet::ChildGroup_1::mutable_extLst()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetCalcPr = false;
    
    if (m_sheetCalcPr)
    {
        delete m_sheetCalcPr;
        m_sheetCalcPr = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_protectedRanges = false;
    
    if (m_protectedRanges)
    {
        delete m_protectedRanges;
        m_protectedRanges = NULL;
    }
    ;
    
    m_has_scenarios = false;
    
    if (m_scenarios)
    {
        delete m_scenarios;
        m_scenarios = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_mergeCells = false;
    
    if (m_mergeCells)
    {
        delete m_mergeCells;
        m_mergeCells = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_dataValidations = false;
    
    if (m_dataValidations)
    {
        delete m_dataValidations;
        m_dataValidations = NULL;
    }
    ;
    
    m_has_hyperlinks = false;
    
    if (m_hyperlinks)
    {
        delete m_hyperlinks;
        m_hyperlinks = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_cellWatches = false;
    
    if (m_cellWatches)
    {
        delete m_cellWatches;
        m_cellWatches = NULL;
    }
    ;
    
    m_has_ignoredErrors = false;
    
    if (m_ignoredErrors)
    {
        delete m_ignoredErrors;
        m_ignoredErrors = NULL;
    }
    ;
    
    m_has_smartTags = false;
    
    if (m_smartTags)
    {
        delete m_smartTags;
        m_smartTags = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_controls = false;
    
    if (m_controls)
    {
        delete m_controls;
        m_controls = NULL;
    }
    ;
    
    m_has_webPublishItems = false;
    
    if (m_webPublishItems)
    {
        delete m_webPublishItems;
        m_webPublishItems = NULL;
    }
    ;
    
    m_has_tableParts = false;
    
    if (m_tableParts)
    {
        delete m_tableParts;
        m_tableParts = NULL;
    }
    ;
    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& CT_Worksheet::ChildGroup_1::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

CT_Worksheet* CT_Worksheet::default_instance_ = NULL;

    // CT_SheetData
    CT_SheetData::CT_SheetData()

    {
    }
    CT_SheetData::~CT_SheetData()
{
    clear();    }
    CT_Row* CT_SheetData::add_row()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Row* pNewChild = pChildGroup->mutable_row();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_SheetData::clear()
    {    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_SheetData::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_row())
            {
                (*iter)->get_row().toXmlElem("main:row", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_SheetData& CT_SheetData::default_instance()
    {    
    if (!CT_SheetData::default_instance_)
    {
        CT_SheetData::default_instance_ = new CT_SheetData();
    }
    return *CT_SheetData::default_instance_;
    }


    // CT_SheetData::ChildGroup_1
    CT_SheetData::ChildGroup_1::ChildGroup_1()
    :m_has_row(false),
    m_row(NULL)
    {
    }
    bool CT_SheetData::ChildGroup_1::has_row() const
    {    
    return m_has_row;
    }

    CT_Row* CT_SheetData::ChildGroup_1::mutable_row()
    {    
    
    m_has_row = true;
    if (!m_row)
    {
        m_row = new CT_Row();
    }
    return m_row;
    }

    const CT_Row& CT_SheetData::ChildGroup_1::get_row() const
    {    
    if (m_row)
    {
        return *m_row;
    }
    return CT_Row::default_instance();
    }

CT_SheetData* CT_SheetData::default_instance_ = NULL;

    // CT_SheetCalcPr
    CT_SheetCalcPr::CT_SheetCalcPr()
    :m_has_fullCalcOnLoad_attr(false),
    m_fullCalcOnLoad_attr(false)
    {
    }
    CT_SheetCalcPr::~CT_SheetCalcPr()
{
    clear();    }
    void CT_SheetCalcPr::clear()
    {    
    m_has_fullCalcOnLoad_attr = false;
    m_fullCalcOnLoad_attr = false;
    }

    void CT_SheetCalcPr::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_fullCalcOnLoad_attr)
    {
        _outStream << " " << "fullCalcOnLoad" << "=\"" << XSD::XMLBooleanStr(m_fullCalcOnLoad_attr) << "\"";
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_SheetCalcPr& CT_SheetCalcPr::default_instance()
    {    
    if (!CT_SheetCalcPr::default_instance_)
    {
        CT_SheetCalcPr::default_instance_ = new CT_SheetCalcPr();
    }
    return *CT_SheetCalcPr::default_instance_;
    }

    bool CT_SheetCalcPr::has_fullCalcOnLoad_attr() const
    {    
    return m_has_fullCalcOnLoad_attr;
    }

    void CT_SheetCalcPr::set_fullCalcOnLoad_attr(const XSD::boolean_& _fullCalcOnLoad_attr)
    {    
    m_has_fullCalcOnLoad_attr = true;
    m_fullCalcOnLoad_attr = _fullCalcOnLoad_attr;
    }

    const XSD::boolean_& CT_SheetCalcPr::get_fullCalcOnLoad_attr() const
    {    
    return m_fullCalcOnLoad_attr;
    }

CT_SheetCalcPr* CT_SheetCalcPr::default_instance_ = NULL;

    // CT_SheetFormatPr
    CT_SheetFormatPr::CT_SheetFormatPr()
    :m_has_baseColWidth_attr(false),
    m_baseColWidth_attr(0),
    m_has_defaultColWidth_attr(false),
    m_defaultColWidth_attr(0),
    m_has_defaultRowHeight_attr(false),
    m_defaultRowHeight_attr(0),
    m_has_customHeight_attr(false),
    m_customHeight_attr(false),
    m_has_zeroHeight_attr(false),
    m_zeroHeight_attr(false),
    m_has_thickTop_attr(false),
    m_thickTop_attr(false),
    m_has_thickBottom_attr(false),
    m_thickBottom_attr(false),
    m_has_outlineLevelRow_attr(false),
    m_outlineLevelRow_attr(0),
    m_has_outlineLevelCol_attr(false),
    m_outlineLevelCol_attr(0)
    {
    }
    CT_SheetFormatPr::~CT_SheetFormatPr()
{
    clear();    }
    void CT_SheetFormatPr::clear()
    {    
    m_has_baseColWidth_attr = false;
    m_baseColWidth_attr = 0;
    
    m_has_defaultColWidth_attr = false;
    m_defaultColWidth_attr = 0;
    
    m_has_defaultRowHeight_attr = false;
    m_defaultRowHeight_attr = 0;
    
    m_has_customHeight_attr = false;
    m_customHeight_attr = false;
    
    m_has_zeroHeight_attr = false;
    m_zeroHeight_attr = false;
    
    m_has_thickTop_attr = false;
    m_thickTop_attr = false;
    
    m_has_thickBottom_attr = false;
    m_thickBottom_attr = false;
    
    m_has_outlineLevelRow_attr = false;
    m_outlineLevelRow_attr = 0;
    
    m_has_outlineLevelCol_attr = false;
    m_outlineLevelCol_attr = 0;
    }

    void CT_SheetFormatPr::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_baseColWidth_attr)
    {
        _outStream << " " << "baseColWidth" << "=\"" << m_baseColWidth_attr << "\"";
    }
    
    
    if (m_has_defaultColWidth_attr)
    {
        _outStream << " " << "defaultColWidth" << "=\"" << m_defaultColWidth_attr << "\"";
    }
    
    
    if (m_has_defaultRowHeight_attr)
    {
        _outStream << " " << "defaultRowHeight" << "=\"" << m_defaultRowHeight_attr << "\"";
    }
    
    
    if (m_has_customHeight_attr)
    {
        _outStream << " " << "customHeight" << "=\"" << XSD::XMLBooleanStr(m_customHeight_attr) << "\"";
    }
    
    
    if (m_has_zeroHeight_attr)
    {
        _outStream << " " << "zeroHeight" << "=\"" << XSD::XMLBooleanStr(m_zeroHeight_attr) << "\"";
    }
    
    
    if (m_has_thickTop_attr)
    {
        _outStream << " " << "thickTop" << "=\"" << XSD::XMLBooleanStr(m_thickTop_attr) << "\"";
    }
    
    
    if (m_has_thickBottom_attr)
    {
        _outStream << " " << "thickBottom" << "=\"" << XSD::XMLBooleanStr(m_thickBottom_attr) << "\"";
    }
    
    
    if (m_has_outlineLevelRow_attr)
    {
        _outStream << " " << "outlineLevelRow" << "=\"" << m_outlineLevelRow_attr << "\"";
    }
    
    
    if (m_has_outlineLevelCol_attr)
    {
        _outStream << " " << "outlineLevelCol" << "=\"" << m_outlineLevelCol_attr << "\"";
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_SheetFormatPr& CT_SheetFormatPr::default_instance()
    {    
    if (!CT_SheetFormatPr::default_instance_)
    {
        CT_SheetFormatPr::default_instance_ = new CT_SheetFormatPr();
    }
    return *CT_SheetFormatPr::default_instance_;
    }

    bool CT_SheetFormatPr::has_baseColWidth_attr() const
    {    
    return m_has_baseColWidth_attr;
    }

    void CT_SheetFormatPr::set_baseColWidth_attr(const XSD::unsignedInt_& _baseColWidth_attr)
    {    
    m_has_baseColWidth_attr = true;
    m_baseColWidth_attr = _baseColWidth_attr;
    }

    const XSD::unsignedInt_& CT_SheetFormatPr::get_baseColWidth_attr() const
    {    
    return m_baseColWidth_attr;
    }

    bool CT_SheetFormatPr::has_defaultColWidth_attr() const
    {    
    return m_has_defaultColWidth_attr;
    }

    void CT_SheetFormatPr::set_defaultColWidth_attr(const XSD::double_& _defaultColWidth_attr)
    {    
    m_has_defaultColWidth_attr = true;
    m_defaultColWidth_attr = _defaultColWidth_attr;
    }

    const XSD::double_& CT_SheetFormatPr::get_defaultColWidth_attr() const
    {    
    return m_defaultColWidth_attr;
    }

    bool CT_SheetFormatPr::has_defaultRowHeight_attr() const
    {    
    return m_has_defaultRowHeight_attr;
    }

    void CT_SheetFormatPr::set_defaultRowHeight_attr(const XSD::double_& _defaultRowHeight_attr)
    {    
    m_has_defaultRowHeight_attr = true;
    m_defaultRowHeight_attr = _defaultRowHeight_attr;
    }

    const XSD::double_& CT_SheetFormatPr::get_defaultRowHeight_attr() const
    {    
    return m_defaultRowHeight_attr;
    }

    bool CT_SheetFormatPr::has_customHeight_attr() const
    {    
    return m_has_customHeight_attr;
    }

    void CT_SheetFormatPr::set_customHeight_attr(const XSD::boolean_& _customHeight_attr)
    {    
    m_has_customHeight_attr = true;
    m_customHeight_attr = _customHeight_attr;
    }

    const XSD::boolean_& CT_SheetFormatPr::get_customHeight_attr() const
    {    
    return m_customHeight_attr;
    }

    bool CT_SheetFormatPr::has_zeroHeight_attr() const
    {    
    return m_has_zeroHeight_attr;
    }

    void CT_SheetFormatPr::set_zeroHeight_attr(const XSD::boolean_& _zeroHeight_attr)
    {    
    m_has_zeroHeight_attr = true;
    m_zeroHeight_attr = _zeroHeight_attr;
    }

    const XSD::boolean_& CT_SheetFormatPr::get_zeroHeight_attr() const
    {    
    return m_zeroHeight_attr;
    }

    bool CT_SheetFormatPr::has_thickTop_attr() const
    {    
    return m_has_thickTop_attr;
    }

    void CT_SheetFormatPr::set_thickTop_attr(const XSD::boolean_& _thickTop_attr)
    {    
    m_has_thickTop_attr = true;
    m_thickTop_attr = _thickTop_attr;
    }

    const XSD::boolean_& CT_SheetFormatPr::get_thickTop_attr() const
    {    
    return m_thickTop_attr;
    }

    bool CT_SheetFormatPr::has_thickBottom_attr() const
    {    
    return m_has_thickBottom_attr;
    }

    void CT_SheetFormatPr::set_thickBottom_attr(const XSD::boolean_& _thickBottom_attr)
    {    
    m_has_thickBottom_attr = true;
    m_thickBottom_attr = _thickBottom_attr;
    }

    const XSD::boolean_& CT_SheetFormatPr::get_thickBottom_attr() const
    {    
    return m_thickBottom_attr;
    }

    bool CT_SheetFormatPr::has_outlineLevelRow_attr() const
    {    
    return m_has_outlineLevelRow_attr;
    }

    void CT_SheetFormatPr::set_outlineLevelRow_attr(const XSD::unsignedByte_& _outlineLevelRow_attr)
    {    
    m_has_outlineLevelRow_attr = true;
    m_outlineLevelRow_attr = _outlineLevelRow_attr;
    }

    const XSD::unsignedByte_& CT_SheetFormatPr::get_outlineLevelRow_attr() const
    {    
    return m_outlineLevelRow_attr;
    }

    bool CT_SheetFormatPr::has_outlineLevelCol_attr() const
    {    
    return m_has_outlineLevelCol_attr;
    }

    void CT_SheetFormatPr::set_outlineLevelCol_attr(const XSD::unsignedByte_& _outlineLevelCol_attr)
    {    
    m_has_outlineLevelCol_attr = true;
    m_outlineLevelCol_attr = _outlineLevelCol_attr;
    }

    const XSD::unsignedByte_& CT_SheetFormatPr::get_outlineLevelCol_attr() const
    {    
    return m_outlineLevelCol_attr;
    }

CT_SheetFormatPr* CT_SheetFormatPr::default_instance_ = NULL;

    // CT_Cols
    CT_Cols::CT_Cols()

    {
    }
    CT_Cols::~CT_Cols()
{
    clear();    }
    CT_Col* CT_Cols::add_col()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Col* pNewChild = pChildGroup->mutable_col();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_Cols::clear()
    {    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_Cols::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_col())
            {
                (*iter)->get_col().toXmlElem("main:col", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_Cols& CT_Cols::default_instance()
    {    
    if (!CT_Cols::default_instance_)
    {
        CT_Cols::default_instance_ = new CT_Cols();
    }
    return *CT_Cols::default_instance_;
    }


    // CT_Cols::ChildGroup_1
    CT_Cols::ChildGroup_1::ChildGroup_1()
    :m_has_col(false),
    m_col(NULL)
    {
    }
    bool CT_Cols::ChildGroup_1::has_col() const
    {    
    return m_has_col;
    }

    CT_Col* CT_Cols::ChildGroup_1::mutable_col()
    {    
    
    m_has_col = true;
    if (!m_col)
    {
        m_col = new CT_Col();
    }
    return m_col;
    }

    const CT_Col& CT_Cols::ChildGroup_1::get_col() const
    {    
    if (m_col)
    {
        return *m_col;
    }
    return CT_Col::default_instance();
    }

CT_Cols* CT_Cols::default_instance_ = NULL;

    // CT_Col
    CT_Col::CT_Col()
    :m_has_min_attr(false),
    m_min_attr(0),
    m_has_max_attr(false),
    m_max_attr(0),
    m_has_width_attr(false),
    m_width_attr(0),
    m_has_style_attr(false),
    m_style_attr(0),
    m_has_hidden_attr(false),
    m_hidden_attr(false),
    m_has_bestFit_attr(false),
    m_bestFit_attr(false),
    m_has_customWidth_attr(false),
    m_customWidth_attr(false),
    m_has_phonetic_attr(false),
    m_phonetic_attr(false),
    m_has_outlineLevel_attr(false),
    m_outlineLevel_attr(0),
    m_has_collapsed_attr(false),
    m_collapsed_attr(false)
    {
    }
    CT_Col::~CT_Col()
{
    clear();    }
    void CT_Col::clear()
    {    
    m_has_min_attr = false;
    m_min_attr = 0;
    
    m_has_max_attr = false;
    m_max_attr = 0;
    
    m_has_width_attr = false;
    m_width_attr = 0;
    
    m_has_style_attr = false;
    m_style_attr = 0;
    
    m_has_hidden_attr = false;
    m_hidden_attr = false;
    
    m_has_bestFit_attr = false;
    m_bestFit_attr = false;
    
    m_has_customWidth_attr = false;
    m_customWidth_attr = false;
    
    m_has_phonetic_attr = false;
    m_phonetic_attr = false;
    
    m_has_outlineLevel_attr = false;
    m_outlineLevel_attr = 0;
    
    m_has_collapsed_attr = false;
    m_collapsed_attr = false;
    }

    void CT_Col::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_min_attr)
    {
        _outStream << " " << "min" << "=\"" << m_min_attr << "\"";
    }
    
    
    if (m_has_max_attr)
    {
        _outStream << " " << "max" << "=\"" << m_max_attr << "\"";
    }
    
    
    if (m_has_width_attr)
    {
        _outStream << " " << "width" << "=\"" << m_width_attr << "\"";
    }
    
    
    if (m_has_style_attr)
    {
        _outStream << " " << "style" << "=\"" << m_style_attr << "\"";
    }
    
    
    if (m_has_hidden_attr)
    {
        _outStream << " " << "hidden" << "=\"" << XSD::XMLBooleanStr(m_hidden_attr) << "\"";
    }
    
    
    if (m_has_bestFit_attr)
    {
        _outStream << " " << "bestFit" << "=\"" << XSD::XMLBooleanStr(m_bestFit_attr) << "\"";
    }
    
    
    if (m_has_customWidth_attr)
    {
        _outStream << " " << "customWidth" << "=\"" << XSD::XMLBooleanStr(m_customWidth_attr) << "\"";
    }
    
    
    if (m_has_phonetic_attr)
    {
        _outStream << " " << "phonetic" << "=\"" << XSD::XMLBooleanStr(m_phonetic_attr) << "\"";
    }
    
    
    if (m_has_outlineLevel_attr)
    {
        _outStream << " " << "outlineLevel" << "=\"" << m_outlineLevel_attr << "\"";
    }
    
    
    if (m_has_collapsed_attr)
    {
        _outStream << " " << "collapsed" << "=\"" << XSD::XMLBooleanStr(m_collapsed_attr) << "\"";
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_Col& CT_Col::default_instance()
    {    
    if (!CT_Col::default_instance_)
    {
        CT_Col::default_instance_ = new CT_Col();
    }
    return *CT_Col::default_instance_;
    }

    bool CT_Col::has_min_attr() const
    {    
    return m_has_min_attr;
    }

    void CT_Col::set_min_attr(const XSD::unsignedInt_& _min_attr)
    {    
    m_has_min_attr = true;
    m_min_attr = _min_attr;
    }

    const XSD::unsignedInt_& CT_Col::get_min_attr() const
    {    
    return m_min_attr;
    }

    bool CT_Col::has_max_attr() const
    {    
    return m_has_max_attr;
    }

    void CT_Col::set_max_attr(const XSD::unsignedInt_& _max_attr)
    {    
    m_has_max_attr = true;
    m_max_attr = _max_attr;
    }

    const XSD::unsignedInt_& CT_Col::get_max_attr() const
    {    
    return m_max_attr;
    }

    bool CT_Col::has_width_attr() const
    {    
    return m_has_width_attr;
    }

    void CT_Col::set_width_attr(const XSD::double_& _width_attr)
    {    
    m_has_width_attr = true;
    m_width_attr = _width_attr;
    }

    const XSD::double_& CT_Col::get_width_attr() const
    {    
    return m_width_attr;
    }

    bool CT_Col::has_style_attr() const
    {    
    return m_has_style_attr;
    }

    void CT_Col::set_style_attr(const XSD::unsignedInt_& _style_attr)
    {    
    m_has_style_attr = true;
    m_style_attr = _style_attr;
    }

    const XSD::unsignedInt_& CT_Col::get_style_attr() const
    {    
    return m_style_attr;
    }

    bool CT_Col::has_hidden_attr() const
    {    
    return m_has_hidden_attr;
    }

    void CT_Col::set_hidden_attr(const XSD::boolean_& _hidden_attr)
    {    
    m_has_hidden_attr = true;
    m_hidden_attr = _hidden_attr;
    }

    const XSD::boolean_& CT_Col::get_hidden_attr() const
    {    
    return m_hidden_attr;
    }

    bool CT_Col::has_bestFit_attr() const
    {    
    return m_has_bestFit_attr;
    }

    void CT_Col::set_bestFit_attr(const XSD::boolean_& _bestFit_attr)
    {    
    m_has_bestFit_attr = true;
    m_bestFit_attr = _bestFit_attr;
    }

    const XSD::boolean_& CT_Col::get_bestFit_attr() const
    {    
    return m_bestFit_attr;
    }

    bool CT_Col::has_customWidth_attr() const
    {    
    return m_has_customWidth_attr;
    }

    void CT_Col::set_customWidth_attr(const XSD::boolean_& _customWidth_attr)
    {    
    m_has_customWidth_attr = true;
    m_customWidth_attr = _customWidth_attr;
    }

    const XSD::boolean_& CT_Col::get_customWidth_attr() const
    {    
    return m_customWidth_attr;
    }

    bool CT_Col::has_phonetic_attr() const
    {    
    return m_has_phonetic_attr;
    }

    void CT_Col::set_phonetic_attr(const XSD::boolean_& _phonetic_attr)
    {    
    m_has_phonetic_attr = true;
    m_phonetic_attr = _phonetic_attr;
    }

    const XSD::boolean_& CT_Col::get_phonetic_attr() const
    {    
    return m_phonetic_attr;
    }

    bool CT_Col::has_outlineLevel_attr() const
    {    
    return m_has_outlineLevel_attr;
    }

    void CT_Col::set_outlineLevel_attr(const XSD::unsignedByte_& _outlineLevel_attr)
    {    
    m_has_outlineLevel_attr = true;
    m_outlineLevel_attr = _outlineLevel_attr;
    }

    const XSD::unsignedByte_& CT_Col::get_outlineLevel_attr() const
    {    
    return m_outlineLevel_attr;
    }

    bool CT_Col::has_collapsed_attr() const
    {    
    return m_has_collapsed_attr;
    }

    void CT_Col::set_collapsed_attr(const XSD::boolean_& _collapsed_attr)
    {    
    m_has_collapsed_attr = true;
    m_collapsed_attr = _collapsed_attr;
    }

    const XSD::boolean_& CT_Col::get_collapsed_attr() const
    {    
    return m_collapsed_attr;
    }

CT_Col* CT_Col::default_instance_ = NULL;

    // CT_Row
    CT_Row::CT_Row()
    :m_has_r_attr(false),
    m_r_attr(0),
    m_has_spans_attr(false),
    m_spans_attr(NULL),
    m_has_s_attr(false),
    m_s_attr(0),
    m_has_customFormat_attr(false),
    m_customFormat_attr(false),
    m_has_ht_attr(false),
    m_ht_attr(0),
    m_has_hidden_attr(false),
    m_hidden_attr(false),
    m_has_customHeight_attr(false),
    m_customHeight_attr(false),
    m_has_outlineLevel_attr(false),
    m_outlineLevel_attr(0),
    m_has_collapsed_attr(false),
    m_collapsed_attr(false),
    m_has_thickTop_attr(false),
    m_thickTop_attr(false),
    m_has_thickBot_attr(false),
    m_thickBot_attr(false),
    m_has_ph_attr(false),
    m_ph_attr(false)
    {
    }
    CT_Row::~CT_Row()
{
    clear();    }
    CT_Cell* CT_Row::add_c()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Cell* pNewChild = pChildGroup->mutable_c();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_ExtensionList* CT_Row::add_extLst()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_ExtensionList* pNewChild = pChildGroup->mutable_extLst();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_Row::clear()
    {    
    m_has_r_attr = false;
    m_r_attr = 0;
    
    m_has_spans_attr = false;
    
    if (m_spans_attr)
    {
        delete m_spans_attr;
        m_spans_attr = NULL;
    }
    
    
    m_has_s_attr = false;
    m_s_attr = 0;
    
    m_has_customFormat_attr = false;
    m_customFormat_attr = false;
    
    m_has_ht_attr = false;
    m_ht_attr = 0;
    
    m_has_hidden_attr = false;
    m_hidden_attr = false;
    
    m_has_customHeight_attr = false;
    m_customHeight_attr = false;
    
    m_has_outlineLevel_attr = false;
    m_outlineLevel_attr = 0;
    
    m_has_collapsed_attr = false;
    m_collapsed_attr = false;
    
    m_has_thickTop_attr = false;
    m_thickTop_attr = false;
    
    m_has_thickBot_attr = false;
    m_thickBot_attr = false;
    
    m_has_ph_attr = false;
    m_ph_attr = false;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_Row::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_r_attr)
    {
        _outStream << " " << "r" << "=\"" << m_r_attr << "\"";
    }
    
    
    if (m_has_spans_attr)
    {
        m_spans_attr->toXmlAttr("spans", _outStream);
    }
    
    
    if (m_has_s_attr)
    {
        _outStream << " " << "s" << "=\"" << m_s_attr << "\"";
    }
    
    
    if (m_has_customFormat_attr)
    {
        _outStream << " " << "customFormat" << "=\"" << XSD::XMLBooleanStr(m_customFormat_attr) << "\"";
    }
    
    
    if (m_has_ht_attr)
    {
        _outStream << " " << "ht" << "=\"" << m_ht_attr << "\"";
    }
    
    
    if (m_has_hidden_attr)
    {
        _outStream << " " << "hidden" << "=\"" << XSD::XMLBooleanStr(m_hidden_attr) << "\"";
    }
    
    
    if (m_has_customHeight_attr)
    {
        _outStream << " " << "customHeight" << "=\"" << XSD::XMLBooleanStr(m_customHeight_attr) << "\"";
    }
    
    
    if (m_has_outlineLevel_attr)
    {
        _outStream << " " << "outlineLevel" << "=\"" << m_outlineLevel_attr << "\"";
    }
    
    
    if (m_has_collapsed_attr)
    {
        _outStream << " " << "collapsed" << "=\"" << XSD::XMLBooleanStr(m_collapsed_attr) << "\"";
    }
    
    
    if (m_has_thickTop_attr)
    {
        _outStream << " " << "thickTop" << "=\"" << XSD::XMLBooleanStr(m_thickTop_attr) << "\"";
    }
    
    
    if (m_has_thickBot_attr)
    {
        _outStream << " " << "thickBot" << "=\"" << XSD::XMLBooleanStr(m_thickBot_attr) << "\"";
    }
    
    
    if (m_has_ph_attr)
    {
        _outStream << " " << "ph" << "=\"" << XSD::XMLBooleanStr(m_ph_attr) << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_c())
            {
                (*iter)->get_c().toXmlElem("main:c", "", _outStream);
            }
            else if ((*iter)->has_extLst())
            {
                (*iter)->get_extLst().toXmlElem("main:extLst", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_Row& CT_Row::default_instance()
    {    
    if (!CT_Row::default_instance_)
    {
        CT_Row::default_instance_ = new CT_Row();
    }
    return *CT_Row::default_instance_;
    }

    bool CT_Row::has_r_attr() const
    {    
    return m_has_r_attr;
    }

    void CT_Row::set_r_attr(const XSD::unsignedInt_& _r_attr)
    {    
    m_has_r_attr = true;
    m_r_attr = _r_attr;
    }

    const XSD::unsignedInt_& CT_Row::get_r_attr() const
    {    
    return m_r_attr;
    }

    bool CT_Row::has_spans_attr() const
    {    
    return m_has_spans_attr;
    }

    void CT_Row::set_spans_attr(const ST_CellSpans& _spans_attr)
    {    
    m_has_spans_attr = true;
    m_spans_attr = new ST_CellSpans(_spans_attr);
    }

    const ST_CellSpans& CT_Row::get_spans_attr() const
    {    
    if (m_spans_attr)
    {
        return *m_spans_attr;
    }
    return ST_CellSpans::default_instance();
    }

    bool CT_Row::has_s_attr() const
    {    
    return m_has_s_attr;
    }

    void CT_Row::set_s_attr(const XSD::unsignedInt_& _s_attr)
    {    
    m_has_s_attr = true;
    m_s_attr = _s_attr;
    }

    const XSD::unsignedInt_& CT_Row::get_s_attr() const
    {    
    return m_s_attr;
    }

    bool CT_Row::has_customFormat_attr() const
    {    
    return m_has_customFormat_attr;
    }

    void CT_Row::set_customFormat_attr(const XSD::boolean_& _customFormat_attr)
    {    
    m_has_customFormat_attr = true;
    m_customFormat_attr = _customFormat_attr;
    }

    const XSD::boolean_& CT_Row::get_customFormat_attr() const
    {    
    return m_customFormat_attr;
    }

    bool CT_Row::has_ht_attr() const
    {    
    return m_has_ht_attr;
    }

    void CT_Row::set_ht_attr(const XSD::double_& _ht_attr)
    {    
    m_has_ht_attr = true;
    m_ht_attr = _ht_attr;
    }

    const XSD::double_& CT_Row::get_ht_attr() const
    {    
    return m_ht_attr;
    }

    bool CT_Row::has_hidden_attr() const
    {    
    return m_has_hidden_attr;
    }

    void CT_Row::set_hidden_attr(const XSD::boolean_& _hidden_attr)
    {    
    m_has_hidden_attr = true;
    m_hidden_attr = _hidden_attr;
    }

    const XSD::boolean_& CT_Row::get_hidden_attr() const
    {    
    return m_hidden_attr;
    }

    bool CT_Row::has_customHeight_attr() const
    {    
    return m_has_customHeight_attr;
    }

    void CT_Row::set_customHeight_attr(const XSD::boolean_& _customHeight_attr)
    {    
    m_has_customHeight_attr = true;
    m_customHeight_attr = _customHeight_attr;
    }

    const XSD::boolean_& CT_Row::get_customHeight_attr() const
    {    
    return m_customHeight_attr;
    }

    bool CT_Row::has_outlineLevel_attr() const
    {    
    return m_has_outlineLevel_attr;
    }

    void CT_Row::set_outlineLevel_attr(const XSD::unsignedByte_& _outlineLevel_attr)
    {    
    m_has_outlineLevel_attr = true;
    m_outlineLevel_attr = _outlineLevel_attr;
    }

    const XSD::unsignedByte_& CT_Row::get_outlineLevel_attr() const
    {    
    return m_outlineLevel_attr;
    }

    bool CT_Row::has_collapsed_attr() const
    {    
    return m_has_collapsed_attr;
    }

    void CT_Row::set_collapsed_attr(const XSD::boolean_& _collapsed_attr)
    {    
    m_has_collapsed_attr = true;
    m_collapsed_attr = _collapsed_attr;
    }

    const XSD::boolean_& CT_Row::get_collapsed_attr() const
    {    
    return m_collapsed_attr;
    }

    bool CT_Row::has_thickTop_attr() const
    {    
    return m_has_thickTop_attr;
    }

    void CT_Row::set_thickTop_attr(const XSD::boolean_& _thickTop_attr)
    {    
    m_has_thickTop_attr = true;
    m_thickTop_attr = _thickTop_attr;
    }

    const XSD::boolean_& CT_Row::get_thickTop_attr() const
    {    
    return m_thickTop_attr;
    }

    bool CT_Row::has_thickBot_attr() const
    {    
    return m_has_thickBot_attr;
    }

    void CT_Row::set_thickBot_attr(const XSD::boolean_& _thickBot_attr)
    {    
    m_has_thickBot_attr = true;
    m_thickBot_attr = _thickBot_attr;
    }

    const XSD::boolean_& CT_Row::get_thickBot_attr() const
    {    
    return m_thickBot_attr;
    }

    bool CT_Row::has_ph_attr() const
    {    
    return m_has_ph_attr;
    }

    void CT_Row::set_ph_attr(const XSD::boolean_& _ph_attr)
    {    
    m_has_ph_attr = true;
    m_ph_attr = _ph_attr;
    }

    const XSD::boolean_& CT_Row::get_ph_attr() const
    {    
    return m_ph_attr;
    }


    // CT_Row::ChildGroup_1
    CT_Row::ChildGroup_1::ChildGroup_1()
    :m_has_c(false),
    m_c(NULL),
    m_has_extLst(false),
    m_extLst(NULL)
    {
    }
    bool CT_Row::ChildGroup_1::has_c() const
    {    
    return m_has_c;
    }

    CT_Cell* CT_Row::ChildGroup_1::mutable_c()
    {    
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_c = true;
    if (!m_c)
    {
        m_c = new CT_Cell();
    }
    return m_c;
    }

    const CT_Cell& CT_Row::ChildGroup_1::get_c() const
    {    
    if (m_c)
    {
        return *m_c;
    }
    return CT_Cell::default_instance();
    }

    bool CT_Row::ChildGroup_1::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* CT_Row::ChildGroup_1::mutable_extLst()
    {    
    
    m_has_c = false;
    
    if (m_c)
    {
        delete m_c;
        m_c = NULL;
    }
    ;
    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& CT_Row::ChildGroup_1::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

CT_Row* CT_Row::default_instance_ = NULL;

    // CT_Cell
    CT_Cell::CT_Cell()
    :m_has_f(false),
    m_f(NULL),
    m_has_v(false),
    m_v(NULL),
    m_has_is(false),
    m_is(NULL),
    m_has_extLst(false),
    m_extLst(NULL),
    m_has_r_attr(false),
    m_r_attr(NULL),
    m_has_s_attr(false),
    m_s_attr(0),
    m_has_t_attr(false),
    m_t_attr(NULL),
    m_has_cm_attr(false),
    m_cm_attr(0),
    m_has_vm_attr(false),
    m_vm_attr(0),
    m_has_ph_attr(false),
    m_ph_attr(false)
    {
    }
    CT_Cell::~CT_Cell()
{
    clear();    }
    bool CT_Cell::has_f() const
    {    
    return m_has_f;
    }

    CT_CellFormula* CT_Cell::mutable_f()
    {    
    m_has_f = true;
    if (!m_f)
    {
        m_f = new CT_CellFormula();
    }
    return m_f;
    }

    const CT_CellFormula& CT_Cell::get_f() const
    {    
    if (m_f)
    {
        return *m_f;
    }
    return CT_CellFormula::default_instance();
    }

    bool CT_Cell::has_v() const
    {    
    return m_has_v;
    }

    ns_s::ST_Xstring* CT_Cell::mutable_v()
    {    
    m_has_v = true;
    if (!m_v)
    {
        m_v = new ns_s::ST_Xstring();
    }
    return m_v;
    }

    const ns_s::ST_Xstring& CT_Cell::get_v() const
    {    
    if (m_v)
    {
        return *m_v;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_Cell::has_is() const
    {    
    return m_has_is;
    }

    CT_Rst* CT_Cell::mutable_is()
    {    
    m_has_is = true;
    if (!m_is)
    {
        m_is = new CT_Rst();
    }
    return m_is;
    }

    const CT_Rst& CT_Cell::get_is() const
    {    
    if (m_is)
    {
        return *m_is;
    }
    return CT_Rst::default_instance();
    }

    bool CT_Cell::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* CT_Cell::mutable_extLst()
    {    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& CT_Cell::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

    void CT_Cell::clear()
    {    
    m_has_r_attr = false;
    
    if (m_r_attr)
    {
        delete m_r_attr;
        m_r_attr = NULL;
    }
    
    
    m_has_s_attr = false;
    m_s_attr = 0;
    
    m_has_t_attr = false;
    
    if (m_t_attr)
    {
        delete m_t_attr;
        m_t_attr = NULL;
    }
    
    
    m_has_cm_attr = false;
    m_cm_attr = 0;
    
    m_has_vm_attr = false;
    m_vm_attr = 0;
    
    m_has_ph_attr = false;
    m_ph_attr = false;
    }

    void CT_Cell::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_r_attr)
    {
        m_r_attr->toXmlAttr("r", _outStream);
    }
    
    
    if (m_has_s_attr)
    {
        _outStream << " " << "s" << "=\"" << m_s_attr << "\"";
    }
    
    
    if (m_has_t_attr)
    {
        m_t_attr->toXmlAttr("t", _outStream);
    }
    
    
    if (m_has_cm_attr)
    {
        _outStream << " " << "cm" << "=\"" << m_cm_attr << "\"";
    }
    
    
    if (m_has_vm_attr)
    {
        _outStream << " " << "vm" << "=\"" << m_vm_attr << "\"";
    }
    
    
    if (m_has_ph_attr)
    {
        _outStream << " " << "ph" << "=\"" << XSD::XMLBooleanStr(m_ph_attr) << "\"";
    }
    
            _outStream << ">";
            
    if (m_has_f)
    {
        m_f->toXmlElem("main:f", "", _outStream);;
    }
    
    if (m_has_v)
    {
        _outStream << "<main:v>" << m_v->toString() << "</main:v>";;
    }
    
    if (m_has_is)
    {
        m_is->toXmlElem("main:is", "", _outStream);;
    }
    
    if (m_has_extLst)
    {
        m_extLst->toXmlElem("main:extLst", "", _outStream);;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_Cell& CT_Cell::default_instance()
    {    
    if (!CT_Cell::default_instance_)
    {
        CT_Cell::default_instance_ = new CT_Cell();
    }
    return *CT_Cell::default_instance_;
    }

    bool CT_Cell::has_r_attr() const
    {    
    return m_has_r_attr;
    }

    void CT_Cell::set_r_attr(const ST_CellRef& _r_attr)
    {    
    m_has_r_attr = true;
    m_r_attr = new ST_CellRef(_r_attr);
    }

    const ST_CellRef& CT_Cell::get_r_attr() const
    {    
    if (m_r_attr)
    {
        return *m_r_attr;
    }
    return ST_CellRef::default_instance();
    }

    bool CT_Cell::has_s_attr() const
    {    
    return m_has_s_attr;
    }

    void CT_Cell::set_s_attr(const XSD::unsignedInt_& _s_attr)
    {    
    m_has_s_attr = true;
    m_s_attr = _s_attr;
    }

    const XSD::unsignedInt_& CT_Cell::get_s_attr() const
    {    
    return m_s_attr;
    }

    bool CT_Cell::has_t_attr() const
    {    
    return m_has_t_attr;
    }

    void CT_Cell::set_t_attr(const ST_CellType& _t_attr)
    {    
    m_has_t_attr = true;
    m_t_attr = new ST_CellType(_t_attr);
    }

    const ST_CellType& CT_Cell::get_t_attr() const
    {    
    if (m_t_attr)
    {
        return *m_t_attr;
    }
    return ST_CellType::default_instance();
    }

    bool CT_Cell::has_cm_attr() const
    {    
    return m_has_cm_attr;
    }

    void CT_Cell::set_cm_attr(const XSD::unsignedInt_& _cm_attr)
    {    
    m_has_cm_attr = true;
    m_cm_attr = _cm_attr;
    }

    const XSD::unsignedInt_& CT_Cell::get_cm_attr() const
    {    
    return m_cm_attr;
    }

    bool CT_Cell::has_vm_attr() const
    {    
    return m_has_vm_attr;
    }

    void CT_Cell::set_vm_attr(const XSD::unsignedInt_& _vm_attr)
    {    
    m_has_vm_attr = true;
    m_vm_attr = _vm_attr;
    }

    const XSD::unsignedInt_& CT_Cell::get_vm_attr() const
    {    
    return m_vm_attr;
    }

    bool CT_Cell::has_ph_attr() const
    {    
    return m_has_ph_attr;
    }

    void CT_Cell::set_ph_attr(const XSD::boolean_& _ph_attr)
    {    
    m_has_ph_attr = true;
    m_ph_attr = _ph_attr;
    }

    const XSD::boolean_& CT_Cell::get_ph_attr() const
    {    
    return m_ph_attr;
    }

CT_Cell* CT_Cell::default_instance_ = NULL;

    // CT_SheetPr
    CT_SheetPr::CT_SheetPr()
    :m_has_tabColor(false),
    m_tabColor(NULL),
    m_has_outlinePr(false),
    m_outlinePr(NULL),
    m_has_pageSetUpPr(false),
    m_pageSetUpPr(NULL),
    m_has_syncHorizontal_attr(false),
    m_syncHorizontal_attr(false),
    m_has_syncVertical_attr(false),
    m_syncVertical_attr(false),
    m_has_syncRef_attr(false),
    m_syncRef_attr(NULL),
    m_has_transitionEvaluation_attr(false),
    m_transitionEvaluation_attr(false),
    m_has_transitionEntry_attr(false),
    m_transitionEntry_attr(false),
    m_has_published_attr(false),
    m_published_attr(false),
    m_has_codeName_attr(false),
    m_codeName_attr(""),
    m_has_filterMode_attr(false),
    m_filterMode_attr(false),
    m_has_enableFormatConditionsCalculation_attr(false),
    m_enableFormatConditionsCalculation_attr(false)
    {
    }
    CT_SheetPr::~CT_SheetPr()
{
    clear();    }
    bool CT_SheetPr::has_tabColor() const
    {    
    return m_has_tabColor;
    }

    CT_Color* CT_SheetPr::mutable_tabColor()
    {    
    m_has_tabColor = true;
    if (!m_tabColor)
    {
        m_tabColor = new CT_Color();
    }
    return m_tabColor;
    }

    const CT_Color& CT_SheetPr::get_tabColor() const
    {    
    if (m_tabColor)
    {
        return *m_tabColor;
    }
    return CT_Color::default_instance();
    }

    bool CT_SheetPr::has_outlinePr() const
    {    
    return m_has_outlinePr;
    }

    CT_OutlinePr* CT_SheetPr::mutable_outlinePr()
    {    
    m_has_outlinePr = true;
    if (!m_outlinePr)
    {
        m_outlinePr = new CT_OutlinePr();
    }
    return m_outlinePr;
    }

    const CT_OutlinePr& CT_SheetPr::get_outlinePr() const
    {    
    if (m_outlinePr)
    {
        return *m_outlinePr;
    }
    return CT_OutlinePr::default_instance();
    }

    bool CT_SheetPr::has_pageSetUpPr() const
    {    
    return m_has_pageSetUpPr;
    }

    CT_PageSetUpPr* CT_SheetPr::mutable_pageSetUpPr()
    {    
    m_has_pageSetUpPr = true;
    if (!m_pageSetUpPr)
    {
        m_pageSetUpPr = new CT_PageSetUpPr();
    }
    return m_pageSetUpPr;
    }

    const CT_PageSetUpPr& CT_SheetPr::get_pageSetUpPr() const
    {    
    if (m_pageSetUpPr)
    {
        return *m_pageSetUpPr;
    }
    return CT_PageSetUpPr::default_instance();
    }

    void CT_SheetPr::clear()
    {    
    m_has_syncHorizontal_attr = false;
    m_syncHorizontal_attr = false;
    
    m_has_syncVertical_attr = false;
    m_syncVertical_attr = false;
    
    m_has_syncRef_attr = false;
    
    if (m_syncRef_attr)
    {
        delete m_syncRef_attr;
        m_syncRef_attr = NULL;
    }
    
    
    m_has_transitionEvaluation_attr = false;
    m_transitionEvaluation_attr = false;
    
    m_has_transitionEntry_attr = false;
    m_transitionEntry_attr = false;
    
    m_has_published_attr = false;
    m_published_attr = false;
    
    m_has_codeName_attr = false;
    m_codeName_attr.clear();
    
    m_has_filterMode_attr = false;
    m_filterMode_attr = false;
    
    m_has_enableFormatConditionsCalculation_attr = false;
    m_enableFormatConditionsCalculation_attr = false;
    }

    void CT_SheetPr::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_syncHorizontal_attr)
    {
        _outStream << " " << "syncHorizontal" << "=\"" << XSD::XMLBooleanStr(m_syncHorizontal_attr) << "\"";
    }
    
    
    if (m_has_syncVertical_attr)
    {
        _outStream << " " << "syncVertical" << "=\"" << XSD::XMLBooleanStr(m_syncVertical_attr) << "\"";
    }
    
    
    if (m_has_syncRef_attr)
    {
        m_syncRef_attr->toXmlAttr("syncRef", _outStream);
    }
    
    
    if (m_has_transitionEvaluation_attr)
    {
        _outStream << " " << "transitionEvaluation" << "=\"" << XSD::XMLBooleanStr(m_transitionEvaluation_attr) << "\"";
    }
    
    
    if (m_has_transitionEntry_attr)
    {
        _outStream << " " << "transitionEntry" << "=\"" << XSD::XMLBooleanStr(m_transitionEntry_attr) << "\"";
    }
    
    
    if (m_has_published_attr)
    {
        _outStream << " " << "published" << "=\"" << XSD::XMLBooleanStr(m_published_attr) << "\"";
    }
    
    
    if (m_has_codeName_attr)
    {
        _outStream << " " << "codeName" << "=\"" << m_codeName_attr << "\"";
    }
    
    
    if (m_has_filterMode_attr)
    {
        _outStream << " " << "filterMode" << "=\"" << XSD::XMLBooleanStr(m_filterMode_attr) << "\"";
    }
    
    
    if (m_has_enableFormatConditionsCalculation_attr)
    {
        _outStream << " " << "enableFormatConditionsCalculation" << "=\"" << XSD::XMLBooleanStr(m_enableFormatConditionsCalculation_attr) << "\"";
    }
    
            _outStream << ">";
            
    if (m_has_tabColor)
    {
        m_tabColor->toXmlElem("main:tabColor", "", _outStream);;
    }
    
    if (m_has_outlinePr)
    {
        m_outlinePr->toXmlElem("main:outlinePr", "", _outStream);;
    }
    
    if (m_has_pageSetUpPr)
    {
        m_pageSetUpPr->toXmlElem("main:pageSetUpPr", "", _outStream);;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_SheetPr& CT_SheetPr::default_instance()
    {    
    if (!CT_SheetPr::default_instance_)
    {
        CT_SheetPr::default_instance_ = new CT_SheetPr();
    }
    return *CT_SheetPr::default_instance_;
    }

    bool CT_SheetPr::has_syncHorizontal_attr() const
    {    
    return m_has_syncHorizontal_attr;
    }

    void CT_SheetPr::set_syncHorizontal_attr(const XSD::boolean_& _syncHorizontal_attr)
    {    
    m_has_syncHorizontal_attr = true;
    m_syncHorizontal_attr = _syncHorizontal_attr;
    }

    const XSD::boolean_& CT_SheetPr::get_syncHorizontal_attr() const
    {    
    return m_syncHorizontal_attr;
    }

    bool CT_SheetPr::has_syncVertical_attr() const
    {    
    return m_has_syncVertical_attr;
    }

    void CT_SheetPr::set_syncVertical_attr(const XSD::boolean_& _syncVertical_attr)
    {    
    m_has_syncVertical_attr = true;
    m_syncVertical_attr = _syncVertical_attr;
    }

    const XSD::boolean_& CT_SheetPr::get_syncVertical_attr() const
    {    
    return m_syncVertical_attr;
    }

    bool CT_SheetPr::has_syncRef_attr() const
    {    
    return m_has_syncRef_attr;
    }

    void CT_SheetPr::set_syncRef_attr(const ST_Ref& _syncRef_attr)
    {    
    m_has_syncRef_attr = true;
    m_syncRef_attr = new ST_Ref(_syncRef_attr);
    }

    const ST_Ref& CT_SheetPr::get_syncRef_attr() const
    {    
    if (m_syncRef_attr)
    {
        return *m_syncRef_attr;
    }
    return ST_Ref::default_instance();
    }

    bool CT_SheetPr::has_transitionEvaluation_attr() const
    {    
    return m_has_transitionEvaluation_attr;
    }

    void CT_SheetPr::set_transitionEvaluation_attr(const XSD::boolean_& _transitionEvaluation_attr)
    {    
    m_has_transitionEvaluation_attr = true;
    m_transitionEvaluation_attr = _transitionEvaluation_attr;
    }

    const XSD::boolean_& CT_SheetPr::get_transitionEvaluation_attr() const
    {    
    return m_transitionEvaluation_attr;
    }

    bool CT_SheetPr::has_transitionEntry_attr() const
    {    
    return m_has_transitionEntry_attr;
    }

    void CT_SheetPr::set_transitionEntry_attr(const XSD::boolean_& _transitionEntry_attr)
    {    
    m_has_transitionEntry_attr = true;
    m_transitionEntry_attr = _transitionEntry_attr;
    }

    const XSD::boolean_& CT_SheetPr::get_transitionEntry_attr() const
    {    
    return m_transitionEntry_attr;
    }

    bool CT_SheetPr::has_published_attr() const
    {    
    return m_has_published_attr;
    }

    void CT_SheetPr::set_published_attr(const XSD::boolean_& _published_attr)
    {    
    m_has_published_attr = true;
    m_published_attr = _published_attr;
    }

    const XSD::boolean_& CT_SheetPr::get_published_attr() const
    {    
    return m_published_attr;
    }

    bool CT_SheetPr::has_codeName_attr() const
    {    
    return m_has_codeName_attr;
    }

    void CT_SheetPr::set_codeName_attr(const XSD::string_& _codeName_attr)
    {    
    m_has_codeName_attr = true;
    m_codeName_attr = _codeName_attr;
    }

    const XSD::string_& CT_SheetPr::get_codeName_attr() const
    {    
    return m_codeName_attr;
    }

    bool CT_SheetPr::has_filterMode_attr() const
    {    
    return m_has_filterMode_attr;
    }

    void CT_SheetPr::set_filterMode_attr(const XSD::boolean_& _filterMode_attr)
    {    
    m_has_filterMode_attr = true;
    m_filterMode_attr = _filterMode_attr;
    }

    const XSD::boolean_& CT_SheetPr::get_filterMode_attr() const
    {    
    return m_filterMode_attr;
    }

    bool CT_SheetPr::has_enableFormatConditionsCalculation_attr() const
    {    
    return m_has_enableFormatConditionsCalculation_attr;
    }

    void CT_SheetPr::set_enableFormatConditionsCalculation_attr(const XSD::boolean_& _enableFormatConditionsCalculation_attr)
    {    
    m_has_enableFormatConditionsCalculation_attr = true;
    m_enableFormatConditionsCalculation_attr = _enableFormatConditionsCalculation_attr;
    }

    const XSD::boolean_& CT_SheetPr::get_enableFormatConditionsCalculation_attr() const
    {    
    return m_enableFormatConditionsCalculation_attr;
    }

CT_SheetPr* CT_SheetPr::default_instance_ = NULL;

    // CT_SheetDimension
    CT_SheetDimension::CT_SheetDimension()
    :m_has_ref_attr(false),
    m_ref_attr(NULL)
    {
    }
    CT_SheetDimension::~CT_SheetDimension()
{
    clear();    }
    void CT_SheetDimension::clear()
    {    
    m_has_ref_attr = false;
    
    if (m_ref_attr)
    {
        delete m_ref_attr;
        m_ref_attr = NULL;
    }
    
    }

    void CT_SheetDimension::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_ref_attr)
    {
        m_ref_attr->toXmlAttr("ref", _outStream);
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_SheetDimension& CT_SheetDimension::default_instance()
    {    
    if (!CT_SheetDimension::default_instance_)
    {
        CT_SheetDimension::default_instance_ = new CT_SheetDimension();
    }
    return *CT_SheetDimension::default_instance_;
    }

    bool CT_SheetDimension::has_ref_attr() const
    {    
    return m_has_ref_attr;
    }

    void CT_SheetDimension::set_ref_attr(const ST_Ref& _ref_attr)
    {    
    m_has_ref_attr = true;
    m_ref_attr = new ST_Ref(_ref_attr);
    }

    const ST_Ref& CT_SheetDimension::get_ref_attr() const
    {    
    if (m_ref_attr)
    {
        return *m_ref_attr;
    }
    return ST_Ref::default_instance();
    }

CT_SheetDimension* CT_SheetDimension::default_instance_ = NULL;

    // CT_SheetViews
    CT_SheetViews::CT_SheetViews()

    {
    }
    CT_SheetViews::~CT_SheetViews()
{
    clear();    }
    CT_SheetView* CT_SheetViews::add_sheetView()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_SheetView* pNewChild = pChildGroup->mutable_sheetView();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_ExtensionList* CT_SheetViews::add_extLst()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_ExtensionList* pNewChild = pChildGroup->mutable_extLst();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_SheetViews::clear()
    {    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_SheetViews::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_sheetView())
            {
                (*iter)->get_sheetView().toXmlElem("main:sheetView", "", _outStream);
            }
            else if ((*iter)->has_extLst())
            {
                (*iter)->get_extLst().toXmlElem("main:extLst", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_SheetViews& CT_SheetViews::default_instance()
    {    
    if (!CT_SheetViews::default_instance_)
    {
        CT_SheetViews::default_instance_ = new CT_SheetViews();
    }
    return *CT_SheetViews::default_instance_;
    }


    // CT_SheetViews::ChildGroup_1
    CT_SheetViews::ChildGroup_1::ChildGroup_1()
    :m_has_sheetView(false),
    m_sheetView(NULL),
    m_has_extLst(false),
    m_extLst(NULL)
    {
    }
    bool CT_SheetViews::ChildGroup_1::has_sheetView() const
    {    
    return m_has_sheetView;
    }

    CT_SheetView* CT_SheetViews::ChildGroup_1::mutable_sheetView()
    {    
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_sheetView = true;
    if (!m_sheetView)
    {
        m_sheetView = new CT_SheetView();
    }
    return m_sheetView;
    }

    const CT_SheetView& CT_SheetViews::ChildGroup_1::get_sheetView() const
    {    
    if (m_sheetView)
    {
        return *m_sheetView;
    }
    return CT_SheetView::default_instance();
    }

    bool CT_SheetViews::ChildGroup_1::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* CT_SheetViews::ChildGroup_1::mutable_extLst()
    {    
    
    m_has_sheetView = false;
    
    if (m_sheetView)
    {
        delete m_sheetView;
        m_sheetView = NULL;
    }
    ;
    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& CT_SheetViews::ChildGroup_1::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

CT_SheetViews* CT_SheetViews::default_instance_ = NULL;

    // CT_SheetView
    CT_SheetView::CT_SheetView()
    :m_has_pane(false),
    m_pane(NULL),
    m_has_windowProtection_attr(false),
    m_windowProtection_attr(false),
    m_has_showFormulas_attr(false),
    m_showFormulas_attr(false),
    m_has_showGridLines_attr(false),
    m_showGridLines_attr(false),
    m_has_showRowColHeaders_attr(false),
    m_showRowColHeaders_attr(false),
    m_has_showZeros_attr(false),
    m_showZeros_attr(false),
    m_has_rightToLeft_attr(false),
    m_rightToLeft_attr(false),
    m_has_tabSelected_attr(false),
    m_tabSelected_attr(false),
    m_has_showRuler_attr(false),
    m_showRuler_attr(false),
    m_has_showOutlineSymbols_attr(false),
    m_showOutlineSymbols_attr(false),
    m_has_defaultGridColor_attr(false),
    m_defaultGridColor_attr(false),
    m_has_showWhiteSpace_attr(false),
    m_showWhiteSpace_attr(false),
    m_has_view_attr(false),
    m_view_attr(NULL),
    m_has_topLeftCell_attr(false),
    m_topLeftCell_attr(NULL),
    m_has_colorId_attr(false),
    m_colorId_attr(0),
    m_has_zoomScale_attr(false),
    m_zoomScale_attr(0),
    m_has_zoomScaleNormal_attr(false),
    m_zoomScaleNormal_attr(0),
    m_has_zoomScaleSheetLayoutView_attr(false),
    m_zoomScaleSheetLayoutView_attr(0),
    m_has_zoomScalePageLayoutView_attr(false),
    m_zoomScalePageLayoutView_attr(0),
    m_has_workbookViewId_attr(false),
    m_workbookViewId_attr(0)
    {
    }
    CT_SheetView::~CT_SheetView()
{
    clear();    }
    bool CT_SheetView::has_pane() const
    {    
    return m_has_pane;
    }

    CT_Pane* CT_SheetView::mutable_pane()
    {    
    m_has_pane = true;
    if (!m_pane)
    {
        m_pane = new CT_Pane();
    }
    return m_pane;
    }

    const CT_Pane& CT_SheetView::get_pane() const
    {    
    if (m_pane)
    {
        return *m_pane;
    }
    return CT_Pane::default_instance();
    }

    CT_Selection* CT_SheetView::add_selection()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Selection* pNewChild = pChildGroup->mutable_selection();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_PivotSelection* CT_SheetView::add_pivotSelection()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_PivotSelection* pNewChild = pChildGroup->mutable_pivotSelection();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_ExtensionList* CT_SheetView::add_extLst()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_ExtensionList* pNewChild = pChildGroup->mutable_extLst();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_SheetView::clear()
    {    
    m_has_windowProtection_attr = false;
    m_windowProtection_attr = false;
    
    m_has_showFormulas_attr = false;
    m_showFormulas_attr = false;
    
    m_has_showGridLines_attr = false;
    m_showGridLines_attr = false;
    
    m_has_showRowColHeaders_attr = false;
    m_showRowColHeaders_attr = false;
    
    m_has_showZeros_attr = false;
    m_showZeros_attr = false;
    
    m_has_rightToLeft_attr = false;
    m_rightToLeft_attr = false;
    
    m_has_tabSelected_attr = false;
    m_tabSelected_attr = false;
    
    m_has_showRuler_attr = false;
    m_showRuler_attr = false;
    
    m_has_showOutlineSymbols_attr = false;
    m_showOutlineSymbols_attr = false;
    
    m_has_defaultGridColor_attr = false;
    m_defaultGridColor_attr = false;
    
    m_has_showWhiteSpace_attr = false;
    m_showWhiteSpace_attr = false;
    
    m_has_view_attr = false;
    
    if (m_view_attr)
    {
        delete m_view_attr;
        m_view_attr = NULL;
    }
    
    
    m_has_topLeftCell_attr = false;
    
    if (m_topLeftCell_attr)
    {
        delete m_topLeftCell_attr;
        m_topLeftCell_attr = NULL;
    }
    
    
    m_has_colorId_attr = false;
    m_colorId_attr = 0;
    
    m_has_zoomScale_attr = false;
    m_zoomScale_attr = 0;
    
    m_has_zoomScaleNormal_attr = false;
    m_zoomScaleNormal_attr = 0;
    
    m_has_zoomScaleSheetLayoutView_attr = false;
    m_zoomScaleSheetLayoutView_attr = 0;
    
    m_has_zoomScalePageLayoutView_attr = false;
    m_zoomScalePageLayoutView_attr = 0;
    
    m_has_workbookViewId_attr = false;
    m_workbookViewId_attr = 0;
    
    m_has_pane = false;
    
    if (m_pane)
    {
        delete m_pane;
        m_pane = NULL;
    }
    
     
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_SheetView::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_windowProtection_attr)
    {
        _outStream << " " << "windowProtection" << "=\"" << XSD::XMLBooleanStr(m_windowProtection_attr) << "\"";
    }
    
    
    if (m_has_showFormulas_attr)
    {
        _outStream << " " << "showFormulas" << "=\"" << XSD::XMLBooleanStr(m_showFormulas_attr) << "\"";
    }
    
    
    if (m_has_showGridLines_attr)
    {
        _outStream << " " << "showGridLines" << "=\"" << XSD::XMLBooleanStr(m_showGridLines_attr) << "\"";
    }
    
    
    if (m_has_showRowColHeaders_attr)
    {
        _outStream << " " << "showRowColHeaders" << "=\"" << XSD::XMLBooleanStr(m_showRowColHeaders_attr) << "\"";
    }
    
    
    if (m_has_showZeros_attr)
    {
        _outStream << " " << "showZeros" << "=\"" << XSD::XMLBooleanStr(m_showZeros_attr) << "\"";
    }
    
    
    if (m_has_rightToLeft_attr)
    {
        _outStream << " " << "rightToLeft" << "=\"" << XSD::XMLBooleanStr(m_rightToLeft_attr) << "\"";
    }
    
    
    if (m_has_tabSelected_attr)
    {
        _outStream << " " << "tabSelected" << "=\"" << XSD::XMLBooleanStr(m_tabSelected_attr) << "\"";
    }
    
    
    if (m_has_showRuler_attr)
    {
        _outStream << " " << "showRuler" << "=\"" << XSD::XMLBooleanStr(m_showRuler_attr) << "\"";
    }
    
    
    if (m_has_showOutlineSymbols_attr)
    {
        _outStream << " " << "showOutlineSymbols" << "=\"" << XSD::XMLBooleanStr(m_showOutlineSymbols_attr) << "\"";
    }
    
    
    if (m_has_defaultGridColor_attr)
    {
        _outStream << " " << "defaultGridColor" << "=\"" << XSD::XMLBooleanStr(m_defaultGridColor_attr) << "\"";
    }
    
    
    if (m_has_showWhiteSpace_attr)
    {
        _outStream << " " << "showWhiteSpace" << "=\"" << XSD::XMLBooleanStr(m_showWhiteSpace_attr) << "\"";
    }
    
    
    if (m_has_view_attr)
    {
        m_view_attr->toXmlAttr("view", _outStream);
    }
    
    
    if (m_has_topLeftCell_attr)
    {
        m_topLeftCell_attr->toXmlAttr("topLeftCell", _outStream);
    }
    
    
    if (m_has_colorId_attr)
    {
        _outStream << " " << "colorId" << "=\"" << m_colorId_attr << "\"";
    }
    
    
    if (m_has_zoomScale_attr)
    {
        _outStream << " " << "zoomScale" << "=\"" << m_zoomScale_attr << "\"";
    }
    
    
    if (m_has_zoomScaleNormal_attr)
    {
        _outStream << " " << "zoomScaleNormal" << "=\"" << m_zoomScaleNormal_attr << "\"";
    }
    
    
    if (m_has_zoomScaleSheetLayoutView_attr)
    {
        _outStream << " " << "zoomScaleSheetLayoutView" << "=\"" << m_zoomScaleSheetLayoutView_attr << "\"";
    }
    
    
    if (m_has_zoomScalePageLayoutView_attr)
    {
        _outStream << " " << "zoomScalePageLayoutView" << "=\"" << m_zoomScalePageLayoutView_attr << "\"";
    }
    
    
    if (m_has_workbookViewId_attr)
    {
        _outStream << " " << "workbookViewId" << "=\"" << m_workbookViewId_attr << "\"";
    }
    
            _outStream << ">";
            
    if (m_has_pane)
    {
        m_pane->toXmlElem("main:pane", "", _outStream);;
    }
     
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_selection())
            {
                (*iter)->get_selection().toXmlElem("main:selection", "", _outStream);
            }
            else if ((*iter)->has_pivotSelection())
            {
                (*iter)->get_pivotSelection().toXmlElem("main:pivotSelection", "", _outStream);
            }
            else if ((*iter)->has_extLst())
            {
                (*iter)->get_extLst().toXmlElem("main:extLst", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_SheetView& CT_SheetView::default_instance()
    {    
    if (!CT_SheetView::default_instance_)
    {
        CT_SheetView::default_instance_ = new CT_SheetView();
    }
    return *CT_SheetView::default_instance_;
    }

    bool CT_SheetView::has_windowProtection_attr() const
    {    
    return m_has_windowProtection_attr;
    }

    void CT_SheetView::set_windowProtection_attr(const XSD::boolean_& _windowProtection_attr)
    {    
    m_has_windowProtection_attr = true;
    m_windowProtection_attr = _windowProtection_attr;
    }

    const XSD::boolean_& CT_SheetView::get_windowProtection_attr() const
    {    
    return m_windowProtection_attr;
    }

    bool CT_SheetView::has_showFormulas_attr() const
    {    
    return m_has_showFormulas_attr;
    }

    void CT_SheetView::set_showFormulas_attr(const XSD::boolean_& _showFormulas_attr)
    {    
    m_has_showFormulas_attr = true;
    m_showFormulas_attr = _showFormulas_attr;
    }

    const XSD::boolean_& CT_SheetView::get_showFormulas_attr() const
    {    
    return m_showFormulas_attr;
    }

    bool CT_SheetView::has_showGridLines_attr() const
    {    
    return m_has_showGridLines_attr;
    }

    void CT_SheetView::set_showGridLines_attr(const XSD::boolean_& _showGridLines_attr)
    {    
    m_has_showGridLines_attr = true;
    m_showGridLines_attr = _showGridLines_attr;
    }

    const XSD::boolean_& CT_SheetView::get_showGridLines_attr() const
    {    
    return m_showGridLines_attr;
    }

    bool CT_SheetView::has_showRowColHeaders_attr() const
    {    
    return m_has_showRowColHeaders_attr;
    }

    void CT_SheetView::set_showRowColHeaders_attr(const XSD::boolean_& _showRowColHeaders_attr)
    {    
    m_has_showRowColHeaders_attr = true;
    m_showRowColHeaders_attr = _showRowColHeaders_attr;
    }

    const XSD::boolean_& CT_SheetView::get_showRowColHeaders_attr() const
    {    
    return m_showRowColHeaders_attr;
    }

    bool CT_SheetView::has_showZeros_attr() const
    {    
    return m_has_showZeros_attr;
    }

    void CT_SheetView::set_showZeros_attr(const XSD::boolean_& _showZeros_attr)
    {    
    m_has_showZeros_attr = true;
    m_showZeros_attr = _showZeros_attr;
    }

    const XSD::boolean_& CT_SheetView::get_showZeros_attr() const
    {    
    return m_showZeros_attr;
    }

    bool CT_SheetView::has_rightToLeft_attr() const
    {    
    return m_has_rightToLeft_attr;
    }

    void CT_SheetView::set_rightToLeft_attr(const XSD::boolean_& _rightToLeft_attr)
    {    
    m_has_rightToLeft_attr = true;
    m_rightToLeft_attr = _rightToLeft_attr;
    }

    const XSD::boolean_& CT_SheetView::get_rightToLeft_attr() const
    {    
    return m_rightToLeft_attr;
    }

    bool CT_SheetView::has_tabSelected_attr() const
    {    
    return m_has_tabSelected_attr;
    }

    void CT_SheetView::set_tabSelected_attr(const XSD::boolean_& _tabSelected_attr)
    {    
    m_has_tabSelected_attr = true;
    m_tabSelected_attr = _tabSelected_attr;
    }

    const XSD::boolean_& CT_SheetView::get_tabSelected_attr() const
    {    
    return m_tabSelected_attr;
    }

    bool CT_SheetView::has_showRuler_attr() const
    {    
    return m_has_showRuler_attr;
    }

    void CT_SheetView::set_showRuler_attr(const XSD::boolean_& _showRuler_attr)
    {    
    m_has_showRuler_attr = true;
    m_showRuler_attr = _showRuler_attr;
    }

    const XSD::boolean_& CT_SheetView::get_showRuler_attr() const
    {    
    return m_showRuler_attr;
    }

    bool CT_SheetView::has_showOutlineSymbols_attr() const
    {    
    return m_has_showOutlineSymbols_attr;
    }

    void CT_SheetView::set_showOutlineSymbols_attr(const XSD::boolean_& _showOutlineSymbols_attr)
    {    
    m_has_showOutlineSymbols_attr = true;
    m_showOutlineSymbols_attr = _showOutlineSymbols_attr;
    }

    const XSD::boolean_& CT_SheetView::get_showOutlineSymbols_attr() const
    {    
    return m_showOutlineSymbols_attr;
    }

    bool CT_SheetView::has_defaultGridColor_attr() const
    {    
    return m_has_defaultGridColor_attr;
    }

    void CT_SheetView::set_defaultGridColor_attr(const XSD::boolean_& _defaultGridColor_attr)
    {    
    m_has_defaultGridColor_attr = true;
    m_defaultGridColor_attr = _defaultGridColor_attr;
    }

    const XSD::boolean_& CT_SheetView::get_defaultGridColor_attr() const
    {    
    return m_defaultGridColor_attr;
    }

    bool CT_SheetView::has_showWhiteSpace_attr() const
    {    
    return m_has_showWhiteSpace_attr;
    }

    void CT_SheetView::set_showWhiteSpace_attr(const XSD::boolean_& _showWhiteSpace_attr)
    {    
    m_has_showWhiteSpace_attr = true;
    m_showWhiteSpace_attr = _showWhiteSpace_attr;
    }

    const XSD::boolean_& CT_SheetView::get_showWhiteSpace_attr() const
    {    
    return m_showWhiteSpace_attr;
    }

    bool CT_SheetView::has_view_attr() const
    {    
    return m_has_view_attr;
    }

    void CT_SheetView::set_view_attr(const ST_SheetViewType& _view_attr)
    {    
    m_has_view_attr = true;
    m_view_attr = new ST_SheetViewType(_view_attr);
    }

    const ST_SheetViewType& CT_SheetView::get_view_attr() const
    {    
    if (m_view_attr)
    {
        return *m_view_attr;
    }
    return ST_SheetViewType::default_instance();
    }

    bool CT_SheetView::has_topLeftCell_attr() const
    {    
    return m_has_topLeftCell_attr;
    }

    void CT_SheetView::set_topLeftCell_attr(const ST_CellRef& _topLeftCell_attr)
    {    
    m_has_topLeftCell_attr = true;
    m_topLeftCell_attr = new ST_CellRef(_topLeftCell_attr);
    }

    const ST_CellRef& CT_SheetView::get_topLeftCell_attr() const
    {    
    if (m_topLeftCell_attr)
    {
        return *m_topLeftCell_attr;
    }
    return ST_CellRef::default_instance();
    }

    bool CT_SheetView::has_colorId_attr() const
    {    
    return m_has_colorId_attr;
    }

    void CT_SheetView::set_colorId_attr(const XSD::unsignedInt_& _colorId_attr)
    {    
    m_has_colorId_attr = true;
    m_colorId_attr = _colorId_attr;
    }

    const XSD::unsignedInt_& CT_SheetView::get_colorId_attr() const
    {    
    return m_colorId_attr;
    }

    bool CT_SheetView::has_zoomScale_attr() const
    {    
    return m_has_zoomScale_attr;
    }

    void CT_SheetView::set_zoomScale_attr(const XSD::unsignedInt_& _zoomScale_attr)
    {    
    m_has_zoomScale_attr = true;
    m_zoomScale_attr = _zoomScale_attr;
    }

    const XSD::unsignedInt_& CT_SheetView::get_zoomScale_attr() const
    {    
    return m_zoomScale_attr;
    }

    bool CT_SheetView::has_zoomScaleNormal_attr() const
    {    
    return m_has_zoomScaleNormal_attr;
    }

    void CT_SheetView::set_zoomScaleNormal_attr(const XSD::unsignedInt_& _zoomScaleNormal_attr)
    {    
    m_has_zoomScaleNormal_attr = true;
    m_zoomScaleNormal_attr = _zoomScaleNormal_attr;
    }

    const XSD::unsignedInt_& CT_SheetView::get_zoomScaleNormal_attr() const
    {    
    return m_zoomScaleNormal_attr;
    }

    bool CT_SheetView::has_zoomScaleSheetLayoutView_attr() const
    {    
    return m_has_zoomScaleSheetLayoutView_attr;
    }

    void CT_SheetView::set_zoomScaleSheetLayoutView_attr(const XSD::unsignedInt_& _zoomScaleSheetLayoutView_attr)
    {    
    m_has_zoomScaleSheetLayoutView_attr = true;
    m_zoomScaleSheetLayoutView_attr = _zoomScaleSheetLayoutView_attr;
    }

    const XSD::unsignedInt_& CT_SheetView::get_zoomScaleSheetLayoutView_attr() const
    {    
    return m_zoomScaleSheetLayoutView_attr;
    }

    bool CT_SheetView::has_zoomScalePageLayoutView_attr() const
    {    
    return m_has_zoomScalePageLayoutView_attr;
    }

    void CT_SheetView::set_zoomScalePageLayoutView_attr(const XSD::unsignedInt_& _zoomScalePageLayoutView_attr)
    {    
    m_has_zoomScalePageLayoutView_attr = true;
    m_zoomScalePageLayoutView_attr = _zoomScalePageLayoutView_attr;
    }

    const XSD::unsignedInt_& CT_SheetView::get_zoomScalePageLayoutView_attr() const
    {    
    return m_zoomScalePageLayoutView_attr;
    }

    bool CT_SheetView::has_workbookViewId_attr() const
    {    
    return m_has_workbookViewId_attr;
    }

    void CT_SheetView::set_workbookViewId_attr(const XSD::unsignedInt_& _workbookViewId_attr)
    {    
    m_has_workbookViewId_attr = true;
    m_workbookViewId_attr = _workbookViewId_attr;
    }

    const XSD::unsignedInt_& CT_SheetView::get_workbookViewId_attr() const
    {    
    return m_workbookViewId_attr;
    }


    // CT_SheetView::ChildGroup_1
    CT_SheetView::ChildGroup_1::ChildGroup_1()
    :m_has_selection(false),
    m_selection(NULL),
    m_has_pivotSelection(false),
    m_pivotSelection(NULL),
    m_has_extLst(false),
    m_extLst(NULL)
    {
    }
    bool CT_SheetView::ChildGroup_1::has_selection() const
    {    
    return m_has_selection;
    }

    CT_Selection* CT_SheetView::ChildGroup_1::mutable_selection()
    {    
    
    m_has_pivotSelection = false;
    
    if (m_pivotSelection)
    {
        delete m_pivotSelection;
        m_pivotSelection = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_selection = true;
    if (!m_selection)
    {
        m_selection = new CT_Selection();
    }
    return m_selection;
    }

    const CT_Selection& CT_SheetView::ChildGroup_1::get_selection() const
    {    
    if (m_selection)
    {
        return *m_selection;
    }
    return CT_Selection::default_instance();
    }

    bool CT_SheetView::ChildGroup_1::has_pivotSelection() const
    {    
    return m_has_pivotSelection;
    }

    CT_PivotSelection* CT_SheetView::ChildGroup_1::mutable_pivotSelection()
    {    
    
    m_has_selection = false;
    
    if (m_selection)
    {
        delete m_selection;
        m_selection = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_pivotSelection = true;
    if (!m_pivotSelection)
    {
        m_pivotSelection = new CT_PivotSelection();
    }
    return m_pivotSelection;
    }

    const CT_PivotSelection& CT_SheetView::ChildGroup_1::get_pivotSelection() const
    {    
    if (m_pivotSelection)
    {
        return *m_pivotSelection;
    }
    return CT_PivotSelection::default_instance();
    }

    bool CT_SheetView::ChildGroup_1::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* CT_SheetView::ChildGroup_1::mutable_extLst()
    {    
    
    m_has_selection = false;
    
    if (m_selection)
    {
        delete m_selection;
        m_selection = NULL;
    }
    ;
    
    m_has_pivotSelection = false;
    
    if (m_pivotSelection)
    {
        delete m_pivotSelection;
        m_pivotSelection = NULL;
    }
    ;
    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& CT_SheetView::ChildGroup_1::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

CT_SheetView* CT_SheetView::default_instance_ = NULL;

    // CT_Pane
    CT_Pane::CT_Pane()
    :m_has_xSplit_attr(false),
    m_xSplit_attr(0),
    m_has_ySplit_attr(false),
    m_ySplit_attr(0),
    m_has_topLeftCell_attr(false),
    m_topLeftCell_attr(NULL),
    m_has_activePane_attr(false),
    m_activePane_attr(NULL),
    m_has_state_attr(false),
    m_state_attr(NULL)
    {
    }
    CT_Pane::~CT_Pane()
{
    clear();    }
    void CT_Pane::clear()
    {    
    m_has_xSplit_attr = false;
    m_xSplit_attr = 0;
    
    m_has_ySplit_attr = false;
    m_ySplit_attr = 0;
    
    m_has_topLeftCell_attr = false;
    
    if (m_topLeftCell_attr)
    {
        delete m_topLeftCell_attr;
        m_topLeftCell_attr = NULL;
    }
    
    
    m_has_activePane_attr = false;
    
    if (m_activePane_attr)
    {
        delete m_activePane_attr;
        m_activePane_attr = NULL;
    }
    
    
    m_has_state_attr = false;
    
    if (m_state_attr)
    {
        delete m_state_attr;
        m_state_attr = NULL;
    }
    
    }

    void CT_Pane::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_xSplit_attr)
    {
        _outStream << " " << "xSplit" << "=\"" << m_xSplit_attr << "\"";
    }
    
    
    if (m_has_ySplit_attr)
    {
        _outStream << " " << "ySplit" << "=\"" << m_ySplit_attr << "\"";
    }
    
    
    if (m_has_topLeftCell_attr)
    {
        m_topLeftCell_attr->toXmlAttr("topLeftCell", _outStream);
    }
    
    
    if (m_has_activePane_attr)
    {
        m_activePane_attr->toXmlAttr("activePane", _outStream);
    }
    
    
    if (m_has_state_attr)
    {
        m_state_attr->toXmlAttr("state", _outStream);
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_Pane& CT_Pane::default_instance()
    {    
    if (!CT_Pane::default_instance_)
    {
        CT_Pane::default_instance_ = new CT_Pane();
    }
    return *CT_Pane::default_instance_;
    }

    bool CT_Pane::has_xSplit_attr() const
    {    
    return m_has_xSplit_attr;
    }

    void CT_Pane::set_xSplit_attr(const XSD::double_& _xSplit_attr)
    {    
    m_has_xSplit_attr = true;
    m_xSplit_attr = _xSplit_attr;
    }

    const XSD::double_& CT_Pane::get_xSplit_attr() const
    {    
    return m_xSplit_attr;
    }

    bool CT_Pane::has_ySplit_attr() const
    {    
    return m_has_ySplit_attr;
    }

    void CT_Pane::set_ySplit_attr(const XSD::double_& _ySplit_attr)
    {    
    m_has_ySplit_attr = true;
    m_ySplit_attr = _ySplit_attr;
    }

    const XSD::double_& CT_Pane::get_ySplit_attr() const
    {    
    return m_ySplit_attr;
    }

    bool CT_Pane::has_topLeftCell_attr() const
    {    
    return m_has_topLeftCell_attr;
    }

    void CT_Pane::set_topLeftCell_attr(const ST_CellRef& _topLeftCell_attr)
    {    
    m_has_topLeftCell_attr = true;
    m_topLeftCell_attr = new ST_CellRef(_topLeftCell_attr);
    }

    const ST_CellRef& CT_Pane::get_topLeftCell_attr() const
    {    
    if (m_topLeftCell_attr)
    {
        return *m_topLeftCell_attr;
    }
    return ST_CellRef::default_instance();
    }

    bool CT_Pane::has_activePane_attr() const
    {    
    return m_has_activePane_attr;
    }

    void CT_Pane::set_activePane_attr(const ST_Pane& _activePane_attr)
    {    
    m_has_activePane_attr = true;
    m_activePane_attr = new ST_Pane(_activePane_attr);
    }

    const ST_Pane& CT_Pane::get_activePane_attr() const
    {    
    if (m_activePane_attr)
    {
        return *m_activePane_attr;
    }
    return ST_Pane::default_instance();
    }

    bool CT_Pane::has_state_attr() const
    {    
    return m_has_state_attr;
    }

    void CT_Pane::set_state_attr(const ST_PaneState& _state_attr)
    {    
    m_has_state_attr = true;
    m_state_attr = new ST_PaneState(_state_attr);
    }

    const ST_PaneState& CT_Pane::get_state_attr() const
    {    
    if (m_state_attr)
    {
        return *m_state_attr;
    }
    return ST_PaneState::default_instance();
    }

CT_Pane* CT_Pane::default_instance_ = NULL;

    // CT_PivotSelection
    CT_PivotSelection::CT_PivotSelection()
    :m_has_pivotArea(false),
    m_pivotArea(NULL),
    m_has_pane_attr(false),
    m_pane_attr(NULL),
    m_has_showHeader_attr(false),
    m_showHeader_attr(false),
    m_has_label_attr(false),
    m_label_attr(false),
    m_has_data_attr(false),
    m_data_attr(false),
    m_has_extendable_attr(false),
    m_extendable_attr(false),
    m_has_count_attr(false),
    m_count_attr(0),
    m_has_axis_attr(false),
    m_axis_attr(NULL),
    m_has_dimension_attr(false),
    m_dimension_attr(0),
    m_has_start_attr(false),
    m_start_attr(0),
    m_has_min_attr(false),
    m_min_attr(0),
    m_has_max_attr(false),
    m_max_attr(0),
    m_has_activeRow_attr(false),
    m_activeRow_attr(0),
    m_has_activeCol_attr(false),
    m_activeCol_attr(0),
    m_has_previousRow_attr(false),
    m_previousRow_attr(0),
    m_has_previousCol_attr(false),
    m_previousCol_attr(0),
    m_has_click_attr(false),
    m_click_attr(0),
    m_has_r_id_attr(false),
    m_r_id_attr(NULL)
    {
    }
    CT_PivotSelection::~CT_PivotSelection()
{
    clear();    }
    bool CT_PivotSelection::has_pivotArea() const
    {    
    return m_has_pivotArea;
    }

    CT_PivotArea* CT_PivotSelection::mutable_pivotArea()
    {    
    m_has_pivotArea = true;
    if (!m_pivotArea)
    {
        m_pivotArea = new CT_PivotArea();
    }
    return m_pivotArea;
    }

    const CT_PivotArea& CT_PivotSelection::get_pivotArea() const
    {    
    if (m_pivotArea)
    {
        return *m_pivotArea;
    }
    return CT_PivotArea::default_instance();
    }

    void CT_PivotSelection::clear()
    {    
    m_has_pane_attr = false;
    
    if (m_pane_attr)
    {
        delete m_pane_attr;
        m_pane_attr = NULL;
    }
    
    
    m_has_showHeader_attr = false;
    m_showHeader_attr = false;
    
    m_has_label_attr = false;
    m_label_attr = false;
    
    m_has_data_attr = false;
    m_data_attr = false;
    
    m_has_extendable_attr = false;
    m_extendable_attr = false;
    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    m_has_axis_attr = false;
    
    if (m_axis_attr)
    {
        delete m_axis_attr;
        m_axis_attr = NULL;
    }
    
    
    m_has_dimension_attr = false;
    m_dimension_attr = 0;
    
    m_has_start_attr = false;
    m_start_attr = 0;
    
    m_has_min_attr = false;
    m_min_attr = 0;
    
    m_has_max_attr = false;
    m_max_attr = 0;
    
    m_has_activeRow_attr = false;
    m_activeRow_attr = 0;
    
    m_has_activeCol_attr = false;
    m_activeCol_attr = 0;
    
    m_has_previousRow_attr = false;
    m_previousRow_attr = 0;
    
    m_has_previousCol_attr = false;
    m_previousCol_attr = 0;
    
    m_has_click_attr = false;
    m_click_attr = 0;
    
    m_has_r_id_attr = false;
    
    if (m_r_id_attr)
    {
        delete m_r_id_attr;
        m_r_id_attr = NULL;
    }
    
    }

    void CT_PivotSelection::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_pane_attr)
    {
        m_pane_attr->toXmlAttr("pane", _outStream);
    }
    
    
    if (m_has_showHeader_attr)
    {
        _outStream << " " << "showHeader" << "=\"" << XSD::XMLBooleanStr(m_showHeader_attr) << "\"";
    }
    
    
    if (m_has_label_attr)
    {
        _outStream << " " << "label" << "=\"" << XSD::XMLBooleanStr(m_label_attr) << "\"";
    }
    
    
    if (m_has_data_attr)
    {
        _outStream << " " << "data" << "=\"" << XSD::XMLBooleanStr(m_data_attr) << "\"";
    }
    
    
    if (m_has_extendable_attr)
    {
        _outStream << " " << "extendable" << "=\"" << XSD::XMLBooleanStr(m_extendable_attr) << "\"";
    }
    
    
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
    
    if (m_has_axis_attr)
    {
        m_axis_attr->toXmlAttr("axis", _outStream);
    }
    
    
    if (m_has_dimension_attr)
    {
        _outStream << " " << "dimension" << "=\"" << m_dimension_attr << "\"";
    }
    
    
    if (m_has_start_attr)
    {
        _outStream << " " << "start" << "=\"" << m_start_attr << "\"";
    }
    
    
    if (m_has_min_attr)
    {
        _outStream << " " << "min" << "=\"" << m_min_attr << "\"";
    }
    
    
    if (m_has_max_attr)
    {
        _outStream << " " << "max" << "=\"" << m_max_attr << "\"";
    }
    
    
    if (m_has_activeRow_attr)
    {
        _outStream << " " << "activeRow" << "=\"" << m_activeRow_attr << "\"";
    }
    
    
    if (m_has_activeCol_attr)
    {
        _outStream << " " << "activeCol" << "=\"" << m_activeCol_attr << "\"";
    }
    
    
    if (m_has_previousRow_attr)
    {
        _outStream << " " << "previousRow" << "=\"" << m_previousRow_attr << "\"";
    }
    
    
    if (m_has_previousCol_attr)
    {
        _outStream << " " << "previousCol" << "=\"" << m_previousCol_attr << "\"";
    }
    
    
    if (m_has_click_attr)
    {
        _outStream << " " << "click" << "=\"" << m_click_attr << "\"";
    }
    
    
    if (m_has_r_id_attr)
    {
        m_r_id_attr->toXmlAttr("r:id", _outStream);
    }
    
            _outStream << ">";
            
    if (m_has_pivotArea)
    {
        m_pivotArea->toXmlElem("main:pivotArea", "", _outStream);;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_PivotSelection& CT_PivotSelection::default_instance()
    {    
    if (!CT_PivotSelection::default_instance_)
    {
        CT_PivotSelection::default_instance_ = new CT_PivotSelection();
    }
    return *CT_PivotSelection::default_instance_;
    }

    bool CT_PivotSelection::has_pane_attr() const
    {    
    return m_has_pane_attr;
    }

    void CT_PivotSelection::set_pane_attr(const ST_Pane& _pane_attr)
    {    
    m_has_pane_attr = true;
    m_pane_attr = new ST_Pane(_pane_attr);
    }

    const ST_Pane& CT_PivotSelection::get_pane_attr() const
    {    
    if (m_pane_attr)
    {
        return *m_pane_attr;
    }
    return ST_Pane::default_instance();
    }

    bool CT_PivotSelection::has_showHeader_attr() const
    {    
    return m_has_showHeader_attr;
    }

    void CT_PivotSelection::set_showHeader_attr(const XSD::boolean_& _showHeader_attr)
    {    
    m_has_showHeader_attr = true;
    m_showHeader_attr = _showHeader_attr;
    }

    const XSD::boolean_& CT_PivotSelection::get_showHeader_attr() const
    {    
    return m_showHeader_attr;
    }

    bool CT_PivotSelection::has_label_attr() const
    {    
    return m_has_label_attr;
    }

    void CT_PivotSelection::set_label_attr(const XSD::boolean_& _label_attr)
    {    
    m_has_label_attr = true;
    m_label_attr = _label_attr;
    }

    const XSD::boolean_& CT_PivotSelection::get_label_attr() const
    {    
    return m_label_attr;
    }

    bool CT_PivotSelection::has_data_attr() const
    {    
    return m_has_data_attr;
    }

    void CT_PivotSelection::set_data_attr(const XSD::boolean_& _data_attr)
    {    
    m_has_data_attr = true;
    m_data_attr = _data_attr;
    }

    const XSD::boolean_& CT_PivotSelection::get_data_attr() const
    {    
    return m_data_attr;
    }

    bool CT_PivotSelection::has_extendable_attr() const
    {    
    return m_has_extendable_attr;
    }

    void CT_PivotSelection::set_extendable_attr(const XSD::boolean_& _extendable_attr)
    {    
    m_has_extendable_attr = true;
    m_extendable_attr = _extendable_attr;
    }

    const XSD::boolean_& CT_PivotSelection::get_extendable_attr() const
    {    
    return m_extendable_attr;
    }

    bool CT_PivotSelection::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void CT_PivotSelection::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& CT_PivotSelection::get_count_attr() const
    {    
    return m_count_attr;
    }

    bool CT_PivotSelection::has_axis_attr() const
    {    
    return m_has_axis_attr;
    }

    void CT_PivotSelection::set_axis_attr(const ST_Axis& _axis_attr)
    {    
    m_has_axis_attr = true;
    m_axis_attr = new ST_Axis(_axis_attr);
    }

    const ST_Axis& CT_PivotSelection::get_axis_attr() const
    {    
    if (m_axis_attr)
    {
        return *m_axis_attr;
    }
    return ST_Axis::default_instance();
    }

    bool CT_PivotSelection::has_dimension_attr() const
    {    
    return m_has_dimension_attr;
    }

    void CT_PivotSelection::set_dimension_attr(const XSD::unsignedInt_& _dimension_attr)
    {    
    m_has_dimension_attr = true;
    m_dimension_attr = _dimension_attr;
    }

    const XSD::unsignedInt_& CT_PivotSelection::get_dimension_attr() const
    {    
    return m_dimension_attr;
    }

    bool CT_PivotSelection::has_start_attr() const
    {    
    return m_has_start_attr;
    }

    void CT_PivotSelection::set_start_attr(const XSD::unsignedInt_& _start_attr)
    {    
    m_has_start_attr = true;
    m_start_attr = _start_attr;
    }

    const XSD::unsignedInt_& CT_PivotSelection::get_start_attr() const
    {    
    return m_start_attr;
    }

    bool CT_PivotSelection::has_min_attr() const
    {    
    return m_has_min_attr;
    }

    void CT_PivotSelection::set_min_attr(const XSD::unsignedInt_& _min_attr)
    {    
    m_has_min_attr = true;
    m_min_attr = _min_attr;
    }

    const XSD::unsignedInt_& CT_PivotSelection::get_min_attr() const
    {    
    return m_min_attr;
    }

    bool CT_PivotSelection::has_max_attr() const
    {    
    return m_has_max_attr;
    }

    void CT_PivotSelection::set_max_attr(const XSD::unsignedInt_& _max_attr)
    {    
    m_has_max_attr = true;
    m_max_attr = _max_attr;
    }

    const XSD::unsignedInt_& CT_PivotSelection::get_max_attr() const
    {    
    return m_max_attr;
    }

    bool CT_PivotSelection::has_activeRow_attr() const
    {    
    return m_has_activeRow_attr;
    }

    void CT_PivotSelection::set_activeRow_attr(const XSD::unsignedInt_& _activeRow_attr)
    {    
    m_has_activeRow_attr = true;
    m_activeRow_attr = _activeRow_attr;
    }

    const XSD::unsignedInt_& CT_PivotSelection::get_activeRow_attr() const
    {    
    return m_activeRow_attr;
    }

    bool CT_PivotSelection::has_activeCol_attr() const
    {    
    return m_has_activeCol_attr;
    }

    void CT_PivotSelection::set_activeCol_attr(const XSD::unsignedInt_& _activeCol_attr)
    {    
    m_has_activeCol_attr = true;
    m_activeCol_attr = _activeCol_attr;
    }

    const XSD::unsignedInt_& CT_PivotSelection::get_activeCol_attr() const
    {    
    return m_activeCol_attr;
    }

    bool CT_PivotSelection::has_previousRow_attr() const
    {    
    return m_has_previousRow_attr;
    }

    void CT_PivotSelection::set_previousRow_attr(const XSD::unsignedInt_& _previousRow_attr)
    {    
    m_has_previousRow_attr = true;
    m_previousRow_attr = _previousRow_attr;
    }

    const XSD::unsignedInt_& CT_PivotSelection::get_previousRow_attr() const
    {    
    return m_previousRow_attr;
    }

    bool CT_PivotSelection::has_previousCol_attr() const
    {    
    return m_has_previousCol_attr;
    }

    void CT_PivotSelection::set_previousCol_attr(const XSD::unsignedInt_& _previousCol_attr)
    {    
    m_has_previousCol_attr = true;
    m_previousCol_attr = _previousCol_attr;
    }

    const XSD::unsignedInt_& CT_PivotSelection::get_previousCol_attr() const
    {    
    return m_previousCol_attr;
    }

    bool CT_PivotSelection::has_click_attr() const
    {    
    return m_has_click_attr;
    }

    void CT_PivotSelection::set_click_attr(const XSD::unsignedInt_& _click_attr)
    {    
    m_has_click_attr = true;
    m_click_attr = _click_attr;
    }

    const XSD::unsignedInt_& CT_PivotSelection::get_click_attr() const
    {    
    return m_click_attr;
    }

    bool CT_PivotSelection::has_r_id_attr() const
    {    
    return m_has_r_id_attr;
    }

    void CT_PivotSelection::set_r_id_attr(const ns_r::ST_RelationshipId& _r_id_attr)
    {    
    m_has_r_id_attr = true;
    m_r_id_attr = new ns_r::ST_RelationshipId(_r_id_attr);
    }

    const ns_r::ST_RelationshipId& CT_PivotSelection::get_r_id_attr() const
    {    
    if (m_r_id_attr)
    {
        return *m_r_id_attr;
    }
    return ns_r::ST_RelationshipId::default_instance();
    }

CT_PivotSelection* CT_PivotSelection::default_instance_ = NULL;

    // CT_Selection
    CT_Selection::CT_Selection()
    :m_has_pane_attr(false),
    m_pane_attr(NULL),
    m_has_activeCell_attr(false),
    m_activeCell_attr(NULL),
    m_has_activeCellId_attr(false),
    m_activeCellId_attr(0),
    m_has_sqref_attr(false),
    m_sqref_attr(NULL)
    {
    }
    CT_Selection::~CT_Selection()
{
    clear();    }
    void CT_Selection::clear()
    {    
    m_has_pane_attr = false;
    
    if (m_pane_attr)
    {
        delete m_pane_attr;
        m_pane_attr = NULL;
    }
    
    
    m_has_activeCell_attr = false;
    
    if (m_activeCell_attr)
    {
        delete m_activeCell_attr;
        m_activeCell_attr = NULL;
    }
    
    
    m_has_activeCellId_attr = false;
    m_activeCellId_attr = 0;
    
    m_has_sqref_attr = false;
    
    if (m_sqref_attr)
    {
        delete m_sqref_attr;
        m_sqref_attr = NULL;
    }
    
    }

    void CT_Selection::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_pane_attr)
    {
        m_pane_attr->toXmlAttr("pane", _outStream);
    }
    
    
    if (m_has_activeCell_attr)
    {
        m_activeCell_attr->toXmlAttr("activeCell", _outStream);
    }
    
    
    if (m_has_activeCellId_attr)
    {
        _outStream << " " << "activeCellId" << "=\"" << m_activeCellId_attr << "\"";
    }
    
    
    if (m_has_sqref_attr)
    {
        m_sqref_attr->toXmlAttr("sqref", _outStream);
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_Selection& CT_Selection::default_instance()
    {    
    if (!CT_Selection::default_instance_)
    {
        CT_Selection::default_instance_ = new CT_Selection();
    }
    return *CT_Selection::default_instance_;
    }

    bool CT_Selection::has_pane_attr() const
    {    
    return m_has_pane_attr;
    }

    void CT_Selection::set_pane_attr(const ST_Pane& _pane_attr)
    {    
    m_has_pane_attr = true;
    m_pane_attr = new ST_Pane(_pane_attr);
    }

    const ST_Pane& CT_Selection::get_pane_attr() const
    {    
    if (m_pane_attr)
    {
        return *m_pane_attr;
    }
    return ST_Pane::default_instance();
    }

    bool CT_Selection::has_activeCell_attr() const
    {    
    return m_has_activeCell_attr;
    }

    void CT_Selection::set_activeCell_attr(const ST_CellRef& _activeCell_attr)
    {    
    m_has_activeCell_attr = true;
    m_activeCell_attr = new ST_CellRef(_activeCell_attr);
    }

    const ST_CellRef& CT_Selection::get_activeCell_attr() const
    {    
    if (m_activeCell_attr)
    {
        return *m_activeCell_attr;
    }
    return ST_CellRef::default_instance();
    }

    bool CT_Selection::has_activeCellId_attr() const
    {    
    return m_has_activeCellId_attr;
    }

    void CT_Selection::set_activeCellId_attr(const XSD::unsignedInt_& _activeCellId_attr)
    {    
    m_has_activeCellId_attr = true;
    m_activeCellId_attr = _activeCellId_attr;
    }

    const XSD::unsignedInt_& CT_Selection::get_activeCellId_attr() const
    {    
    return m_activeCellId_attr;
    }

    bool CT_Selection::has_sqref_attr() const
    {    
    return m_has_sqref_attr;
    }

    void CT_Selection::set_sqref_attr(const ST_Sqref& _sqref_attr)
    {    
    m_has_sqref_attr = true;
    m_sqref_attr = new ST_Sqref(_sqref_attr);
    }

    const ST_Sqref& CT_Selection::get_sqref_attr() const
    {    
    if (m_sqref_attr)
    {
        return *m_sqref_attr;
    }
    return ST_Sqref::default_instance();
    }

CT_Selection* CT_Selection::default_instance_ = NULL;

    // CT_PageBreak
    CT_PageBreak::CT_PageBreak()
    :m_has_count_attr(false),
    m_count_attr(0),
    m_has_manualBreakCount_attr(false),
    m_manualBreakCount_attr(0)
    {
    }
    CT_PageBreak::~CT_PageBreak()
{
    clear();    }
    CT_Break* CT_PageBreak::add_brk()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Break* pNewChild = pChildGroup->mutable_brk();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_PageBreak::clear()
    {    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    m_has_manualBreakCount_attr = false;
    m_manualBreakCount_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_PageBreak::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
    
    if (m_has_manualBreakCount_attr)
    {
        _outStream << " " << "manualBreakCount" << "=\"" << m_manualBreakCount_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_brk())
            {
                (*iter)->get_brk().toXmlElem("main:brk", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_PageBreak& CT_PageBreak::default_instance()
    {    
    if (!CT_PageBreak::default_instance_)
    {
        CT_PageBreak::default_instance_ = new CT_PageBreak();
    }
    return *CT_PageBreak::default_instance_;
    }

    bool CT_PageBreak::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void CT_PageBreak::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& CT_PageBreak::get_count_attr() const
    {    
    return m_count_attr;
    }

    bool CT_PageBreak::has_manualBreakCount_attr() const
    {    
    return m_has_manualBreakCount_attr;
    }

    void CT_PageBreak::set_manualBreakCount_attr(const XSD::unsignedInt_& _manualBreakCount_attr)
    {    
    m_has_manualBreakCount_attr = true;
    m_manualBreakCount_attr = _manualBreakCount_attr;
    }

    const XSD::unsignedInt_& CT_PageBreak::get_manualBreakCount_attr() const
    {    
    return m_manualBreakCount_attr;
    }


    // CT_PageBreak::ChildGroup_1
    CT_PageBreak::ChildGroup_1::ChildGroup_1()
    :m_has_brk(false),
    m_brk(NULL)
    {
    }
    bool CT_PageBreak::ChildGroup_1::has_brk() const
    {    
    return m_has_brk;
    }

    CT_Break* CT_PageBreak::ChildGroup_1::mutable_brk()
    {    
    
    m_has_brk = true;
    if (!m_brk)
    {
        m_brk = new CT_Break();
    }
    return m_brk;
    }

    const CT_Break& CT_PageBreak::ChildGroup_1::get_brk() const
    {    
    if (m_brk)
    {
        return *m_brk;
    }
    return CT_Break::default_instance();
    }

CT_PageBreak* CT_PageBreak::default_instance_ = NULL;

    // CT_Break
    CT_Break::CT_Break()
    :m_has_id_attr(false),
    m_id_attr(0),
    m_has_min_attr(false),
    m_min_attr(0),
    m_has_max_attr(false),
    m_max_attr(0),
    m_has_man_attr(false),
    m_man_attr(false),
    m_has_pt_attr(false),
    m_pt_attr(false)
    {
    }
    CT_Break::~CT_Break()
{
    clear();    }
    void CT_Break::clear()
    {    
    m_has_id_attr = false;
    m_id_attr = 0;
    
    m_has_min_attr = false;
    m_min_attr = 0;
    
    m_has_max_attr = false;
    m_max_attr = 0;
    
    m_has_man_attr = false;
    m_man_attr = false;
    
    m_has_pt_attr = false;
    m_pt_attr = false;
    }

    void CT_Break::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_id_attr)
    {
        _outStream << " " << "id" << "=\"" << m_id_attr << "\"";
    }
    
    
    if (m_has_min_attr)
    {
        _outStream << " " << "min" << "=\"" << m_min_attr << "\"";
    }
    
    
    if (m_has_max_attr)
    {
        _outStream << " " << "max" << "=\"" << m_max_attr << "\"";
    }
    
    
    if (m_has_man_attr)
    {
        _outStream << " " << "man" << "=\"" << XSD::XMLBooleanStr(m_man_attr) << "\"";
    }
    
    
    if (m_has_pt_attr)
    {
        _outStream << " " << "pt" << "=\"" << XSD::XMLBooleanStr(m_pt_attr) << "\"";
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_Break& CT_Break::default_instance()
    {    
    if (!CT_Break::default_instance_)
    {
        CT_Break::default_instance_ = new CT_Break();
    }
    return *CT_Break::default_instance_;
    }

    bool CT_Break::has_id_attr() const
    {    
    return m_has_id_attr;
    }

    void CT_Break::set_id_attr(const XSD::unsignedInt_& _id_attr)
    {    
    m_has_id_attr = true;
    m_id_attr = _id_attr;
    }

    const XSD::unsignedInt_& CT_Break::get_id_attr() const
    {    
    return m_id_attr;
    }

    bool CT_Break::has_min_attr() const
    {    
    return m_has_min_attr;
    }

    void CT_Break::set_min_attr(const XSD::unsignedInt_& _min_attr)
    {    
    m_has_min_attr = true;
    m_min_attr = _min_attr;
    }

    const XSD::unsignedInt_& CT_Break::get_min_attr() const
    {    
    return m_min_attr;
    }

    bool CT_Break::has_max_attr() const
    {    
    return m_has_max_attr;
    }

    void CT_Break::set_max_attr(const XSD::unsignedInt_& _max_attr)
    {    
    m_has_max_attr = true;
    m_max_attr = _max_attr;
    }

    const XSD::unsignedInt_& CT_Break::get_max_attr() const
    {    
    return m_max_attr;
    }

    bool CT_Break::has_man_attr() const
    {    
    return m_has_man_attr;
    }

    void CT_Break::set_man_attr(const XSD::boolean_& _man_attr)
    {    
    m_has_man_attr = true;
    m_man_attr = _man_attr;
    }

    const XSD::boolean_& CT_Break::get_man_attr() const
    {    
    return m_man_attr;
    }

    bool CT_Break::has_pt_attr() const
    {    
    return m_has_pt_attr;
    }

    void CT_Break::set_pt_attr(const XSD::boolean_& _pt_attr)
    {    
    m_has_pt_attr = true;
    m_pt_attr = _pt_attr;
    }

    const XSD::boolean_& CT_Break::get_pt_attr() const
    {    
    return m_pt_attr;
    }

CT_Break* CT_Break::default_instance_ = NULL;

    // CT_OutlinePr
    CT_OutlinePr::CT_OutlinePr()
    :m_has_applyStyles_attr(false),
    m_applyStyles_attr(false),
    m_has_summaryBelow_attr(false),
    m_summaryBelow_attr(false),
    m_has_summaryRight_attr(false),
    m_summaryRight_attr(false),
    m_has_showOutlineSymbols_attr(false),
    m_showOutlineSymbols_attr(false)
    {
    }
    CT_OutlinePr::~CT_OutlinePr()
{
    clear();    }
    void CT_OutlinePr::clear()
    {    
    m_has_applyStyles_attr = false;
    m_applyStyles_attr = false;
    
    m_has_summaryBelow_attr = false;
    m_summaryBelow_attr = false;
    
    m_has_summaryRight_attr = false;
    m_summaryRight_attr = false;
    
    m_has_showOutlineSymbols_attr = false;
    m_showOutlineSymbols_attr = false;
    }

    void CT_OutlinePr::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_applyStyles_attr)
    {
        _outStream << " " << "applyStyles" << "=\"" << XSD::XMLBooleanStr(m_applyStyles_attr) << "\"";
    }
    
    
    if (m_has_summaryBelow_attr)
    {
        _outStream << " " << "summaryBelow" << "=\"" << XSD::XMLBooleanStr(m_summaryBelow_attr) << "\"";
    }
    
    
    if (m_has_summaryRight_attr)
    {
        _outStream << " " << "summaryRight" << "=\"" << XSD::XMLBooleanStr(m_summaryRight_attr) << "\"";
    }
    
    
    if (m_has_showOutlineSymbols_attr)
    {
        _outStream << " " << "showOutlineSymbols" << "=\"" << XSD::XMLBooleanStr(m_showOutlineSymbols_attr) << "\"";
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_OutlinePr& CT_OutlinePr::default_instance()
    {    
    if (!CT_OutlinePr::default_instance_)
    {
        CT_OutlinePr::default_instance_ = new CT_OutlinePr();
    }
    return *CT_OutlinePr::default_instance_;
    }

    bool CT_OutlinePr::has_applyStyles_attr() const
    {    
    return m_has_applyStyles_attr;
    }

    void CT_OutlinePr::set_applyStyles_attr(const XSD::boolean_& _applyStyles_attr)
    {    
    m_has_applyStyles_attr = true;
    m_applyStyles_attr = _applyStyles_attr;
    }

    const XSD::boolean_& CT_OutlinePr::get_applyStyles_attr() const
    {    
    return m_applyStyles_attr;
    }

    bool CT_OutlinePr::has_summaryBelow_attr() const
    {    
    return m_has_summaryBelow_attr;
    }

    void CT_OutlinePr::set_summaryBelow_attr(const XSD::boolean_& _summaryBelow_attr)
    {    
    m_has_summaryBelow_attr = true;
    m_summaryBelow_attr = _summaryBelow_attr;
    }

    const XSD::boolean_& CT_OutlinePr::get_summaryBelow_attr() const
    {    
    return m_summaryBelow_attr;
    }

    bool CT_OutlinePr::has_summaryRight_attr() const
    {    
    return m_has_summaryRight_attr;
    }

    void CT_OutlinePr::set_summaryRight_attr(const XSD::boolean_& _summaryRight_attr)
    {    
    m_has_summaryRight_attr = true;
    m_summaryRight_attr = _summaryRight_attr;
    }

    const XSD::boolean_& CT_OutlinePr::get_summaryRight_attr() const
    {    
    return m_summaryRight_attr;
    }

    bool CT_OutlinePr::has_showOutlineSymbols_attr() const
    {    
    return m_has_showOutlineSymbols_attr;
    }

    void CT_OutlinePr::set_showOutlineSymbols_attr(const XSD::boolean_& _showOutlineSymbols_attr)
    {    
    m_has_showOutlineSymbols_attr = true;
    m_showOutlineSymbols_attr = _showOutlineSymbols_attr;
    }

    const XSD::boolean_& CT_OutlinePr::get_showOutlineSymbols_attr() const
    {    
    return m_showOutlineSymbols_attr;
    }

CT_OutlinePr* CT_OutlinePr::default_instance_ = NULL;

    // CT_PageSetUpPr
    CT_PageSetUpPr::CT_PageSetUpPr()
    :m_has_autoPageBreaks_attr(false),
    m_autoPageBreaks_attr(false),
    m_has_fitToPage_attr(false),
    m_fitToPage_attr(false)
    {
    }
    CT_PageSetUpPr::~CT_PageSetUpPr()
{
    clear();    }
    void CT_PageSetUpPr::clear()
    {    
    m_has_autoPageBreaks_attr = false;
    m_autoPageBreaks_attr = false;
    
    m_has_fitToPage_attr = false;
    m_fitToPage_attr = false;
    }

    void CT_PageSetUpPr::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_autoPageBreaks_attr)
    {
        _outStream << " " << "autoPageBreaks" << "=\"" << XSD::XMLBooleanStr(m_autoPageBreaks_attr) << "\"";
    }
    
    
    if (m_has_fitToPage_attr)
    {
        _outStream << " " << "fitToPage" << "=\"" << XSD::XMLBooleanStr(m_fitToPage_attr) << "\"";
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_PageSetUpPr& CT_PageSetUpPr::default_instance()
    {    
    if (!CT_PageSetUpPr::default_instance_)
    {
        CT_PageSetUpPr::default_instance_ = new CT_PageSetUpPr();
    }
    return *CT_PageSetUpPr::default_instance_;
    }

    bool CT_PageSetUpPr::has_autoPageBreaks_attr() const
    {    
    return m_has_autoPageBreaks_attr;
    }

    void CT_PageSetUpPr::set_autoPageBreaks_attr(const XSD::boolean_& _autoPageBreaks_attr)
    {    
    m_has_autoPageBreaks_attr = true;
    m_autoPageBreaks_attr = _autoPageBreaks_attr;
    }

    const XSD::boolean_& CT_PageSetUpPr::get_autoPageBreaks_attr() const
    {    
    return m_autoPageBreaks_attr;
    }

    bool CT_PageSetUpPr::has_fitToPage_attr() const
    {    
    return m_has_fitToPage_attr;
    }

    void CT_PageSetUpPr::set_fitToPage_attr(const XSD::boolean_& _fitToPage_attr)
    {    
    m_has_fitToPage_attr = true;
    m_fitToPage_attr = _fitToPage_attr;
    }

    const XSD::boolean_& CT_PageSetUpPr::get_fitToPage_attr() const
    {    
    return m_fitToPage_attr;
    }

CT_PageSetUpPr* CT_PageSetUpPr::default_instance_ = NULL;

    // CT_DataConsolidate
    CT_DataConsolidate::CT_DataConsolidate()
    :m_has_dataRefs(false),
    m_dataRefs(NULL),
    m_has_function_attr(false),
    m_function_attr(NULL),
    m_has_startLabels_attr(false),
    m_startLabels_attr(false),
    m_has_leftLabels_attr(false),
    m_leftLabels_attr(false),
    m_has_topLabels_attr(false),
    m_topLabels_attr(false),
    m_has_link_attr(false),
    m_link_attr(false)
    {
    }
    CT_DataConsolidate::~CT_DataConsolidate()
{
    clear();    }
    bool CT_DataConsolidate::has_dataRefs() const
    {    
    return m_has_dataRefs;
    }

    CT_DataRefs* CT_DataConsolidate::mutable_dataRefs()
    {    
    m_has_dataRefs = true;
    if (!m_dataRefs)
    {
        m_dataRefs = new CT_DataRefs();
    }
    return m_dataRefs;
    }

    const CT_DataRefs& CT_DataConsolidate::get_dataRefs() const
    {    
    if (m_dataRefs)
    {
        return *m_dataRefs;
    }
    return CT_DataRefs::default_instance();
    }

    void CT_DataConsolidate::clear()
    {    
    m_has_function_attr = false;
    
    if (m_function_attr)
    {
        delete m_function_attr;
        m_function_attr = NULL;
    }
    
    
    m_has_startLabels_attr = false;
    m_startLabels_attr = false;
    
    m_has_leftLabels_attr = false;
    m_leftLabels_attr = false;
    
    m_has_topLabels_attr = false;
    m_topLabels_attr = false;
    
    m_has_link_attr = false;
    m_link_attr = false;
    }

    void CT_DataConsolidate::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_function_attr)
    {
        m_function_attr->toXmlAttr("function", _outStream);
    }
    
    
    if (m_has_startLabels_attr)
    {
        _outStream << " " << "startLabels" << "=\"" << XSD::XMLBooleanStr(m_startLabels_attr) << "\"";
    }
    
    
    if (m_has_leftLabels_attr)
    {
        _outStream << " " << "leftLabels" << "=\"" << XSD::XMLBooleanStr(m_leftLabels_attr) << "\"";
    }
    
    
    if (m_has_topLabels_attr)
    {
        _outStream << " " << "topLabels" << "=\"" << XSD::XMLBooleanStr(m_topLabels_attr) << "\"";
    }
    
    
    if (m_has_link_attr)
    {
        _outStream << " " << "link" << "=\"" << XSD::XMLBooleanStr(m_link_attr) << "\"";
    }
    
            _outStream << ">";
            
    if (m_has_dataRefs)
    {
        m_dataRefs->toXmlElem("main:dataRefs", "", _outStream);;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_DataConsolidate& CT_DataConsolidate::default_instance()
    {    
    if (!CT_DataConsolidate::default_instance_)
    {
        CT_DataConsolidate::default_instance_ = new CT_DataConsolidate();
    }
    return *CT_DataConsolidate::default_instance_;
    }

    bool CT_DataConsolidate::has_function_attr() const
    {    
    return m_has_function_attr;
    }

    void CT_DataConsolidate::set_function_attr(const ST_DataConsolidateFunction& _function_attr)
    {    
    m_has_function_attr = true;
    m_function_attr = new ST_DataConsolidateFunction(_function_attr);
    }

    const ST_DataConsolidateFunction& CT_DataConsolidate::get_function_attr() const
    {    
    if (m_function_attr)
    {
        return *m_function_attr;
    }
    return ST_DataConsolidateFunction::default_instance();
    }

    bool CT_DataConsolidate::has_startLabels_attr() const
    {    
    return m_has_startLabels_attr;
    }

    void CT_DataConsolidate::set_startLabels_attr(const XSD::boolean_& _startLabels_attr)
    {    
    m_has_startLabels_attr = true;
    m_startLabels_attr = _startLabels_attr;
    }

    const XSD::boolean_& CT_DataConsolidate::get_startLabels_attr() const
    {    
    return m_startLabels_attr;
    }

    bool CT_DataConsolidate::has_leftLabels_attr() const
    {    
    return m_has_leftLabels_attr;
    }

    void CT_DataConsolidate::set_leftLabels_attr(const XSD::boolean_& _leftLabels_attr)
    {    
    m_has_leftLabels_attr = true;
    m_leftLabels_attr = _leftLabels_attr;
    }

    const XSD::boolean_& CT_DataConsolidate::get_leftLabels_attr() const
    {    
    return m_leftLabels_attr;
    }

    bool CT_DataConsolidate::has_topLabels_attr() const
    {    
    return m_has_topLabels_attr;
    }

    void CT_DataConsolidate::set_topLabels_attr(const XSD::boolean_& _topLabels_attr)
    {    
    m_has_topLabels_attr = true;
    m_topLabels_attr = _topLabels_attr;
    }

    const XSD::boolean_& CT_DataConsolidate::get_topLabels_attr() const
    {    
    return m_topLabels_attr;
    }

    bool CT_DataConsolidate::has_link_attr() const
    {    
    return m_has_link_attr;
    }

    void CT_DataConsolidate::set_link_attr(const XSD::boolean_& _link_attr)
    {    
    m_has_link_attr = true;
    m_link_attr = _link_attr;
    }

    const XSD::boolean_& CT_DataConsolidate::get_link_attr() const
    {    
    return m_link_attr;
    }

CT_DataConsolidate* CT_DataConsolidate::default_instance_ = NULL;

    // CT_DataRefs
    CT_DataRefs::CT_DataRefs()
    :m_has_count_attr(false),
    m_count_attr(0)
    {
    }
    CT_DataRefs::~CT_DataRefs()
{
    clear();    }
    CT_DataRef* CT_DataRefs::add_dataRef()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_DataRef* pNewChild = pChildGroup->mutable_dataRef();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_DataRefs::clear()
    {    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_DataRefs::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_dataRef())
            {
                (*iter)->get_dataRef().toXmlElem("main:dataRef", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_DataRefs& CT_DataRefs::default_instance()
    {    
    if (!CT_DataRefs::default_instance_)
    {
        CT_DataRefs::default_instance_ = new CT_DataRefs();
    }
    return *CT_DataRefs::default_instance_;
    }

    bool CT_DataRefs::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void CT_DataRefs::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& CT_DataRefs::get_count_attr() const
    {    
    return m_count_attr;
    }


    // CT_DataRefs::ChildGroup_1
    CT_DataRefs::ChildGroup_1::ChildGroup_1()
    :m_has_dataRef(false),
    m_dataRef(NULL)
    {
    }
    bool CT_DataRefs::ChildGroup_1::has_dataRef() const
    {    
    return m_has_dataRef;
    }

    CT_DataRef* CT_DataRefs::ChildGroup_1::mutable_dataRef()
    {    
    
    m_has_dataRef = true;
    if (!m_dataRef)
    {
        m_dataRef = new CT_DataRef();
    }
    return m_dataRef;
    }

    const CT_DataRef& CT_DataRefs::ChildGroup_1::get_dataRef() const
    {    
    if (m_dataRef)
    {
        return *m_dataRef;
    }
    return CT_DataRef::default_instance();
    }

CT_DataRefs* CT_DataRefs::default_instance_ = NULL;

    // CT_DataRef
    CT_DataRef::CT_DataRef()
    :m_has_ref_attr(false),
    m_ref_attr(NULL),
    m_has_name_attr(false),
    m_name_attr(NULL),
    m_has_sheet_attr(false),
    m_sheet_attr(NULL),
    m_has_r_id_attr(false),
    m_r_id_attr(NULL)
    {
    }
    CT_DataRef::~CT_DataRef()
{
    clear();    }
    void CT_DataRef::clear()
    {    
    m_has_ref_attr = false;
    
    if (m_ref_attr)
    {
        delete m_ref_attr;
        m_ref_attr = NULL;
    }
    
    
    m_has_name_attr = false;
    
    if (m_name_attr)
    {
        delete m_name_attr;
        m_name_attr = NULL;
    }
    
    
    m_has_sheet_attr = false;
    
    if (m_sheet_attr)
    {
        delete m_sheet_attr;
        m_sheet_attr = NULL;
    }
    
    
    m_has_r_id_attr = false;
    
    if (m_r_id_attr)
    {
        delete m_r_id_attr;
        m_r_id_attr = NULL;
    }
    
    }

    void CT_DataRef::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_ref_attr)
    {
        m_ref_attr->toXmlAttr("ref", _outStream);
    }
    
    
    if (m_has_name_attr)
    {
        m_name_attr->toXmlAttr("name", _outStream);
    }
    
    
    if (m_has_sheet_attr)
    {
        m_sheet_attr->toXmlAttr("sheet", _outStream);
    }
    
    
    if (m_has_r_id_attr)
    {
        m_r_id_attr->toXmlAttr("r:id", _outStream);
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_DataRef& CT_DataRef::default_instance()
    {    
    if (!CT_DataRef::default_instance_)
    {
        CT_DataRef::default_instance_ = new CT_DataRef();
    }
    return *CT_DataRef::default_instance_;
    }

    bool CT_DataRef::has_ref_attr() const
    {    
    return m_has_ref_attr;
    }

    void CT_DataRef::set_ref_attr(const ST_Ref& _ref_attr)
    {    
    m_has_ref_attr = true;
    m_ref_attr = new ST_Ref(_ref_attr);
    }

    const ST_Ref& CT_DataRef::get_ref_attr() const
    {    
    if (m_ref_attr)
    {
        return *m_ref_attr;
    }
    return ST_Ref::default_instance();
    }

    bool CT_DataRef::has_name_attr() const
    {    
    return m_has_name_attr;
    }

    void CT_DataRef::set_name_attr(const ns_s::ST_Xstring& _name_attr)
    {    
    m_has_name_attr = true;
    m_name_attr = new ns_s::ST_Xstring(_name_attr);
    }

    const ns_s::ST_Xstring& CT_DataRef::get_name_attr() const
    {    
    if (m_name_attr)
    {
        return *m_name_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_DataRef::has_sheet_attr() const
    {    
    return m_has_sheet_attr;
    }

    void CT_DataRef::set_sheet_attr(const ns_s::ST_Xstring& _sheet_attr)
    {    
    m_has_sheet_attr = true;
    m_sheet_attr = new ns_s::ST_Xstring(_sheet_attr);
    }

    const ns_s::ST_Xstring& CT_DataRef::get_sheet_attr() const
    {    
    if (m_sheet_attr)
    {
        return *m_sheet_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_DataRef::has_r_id_attr() const
    {    
    return m_has_r_id_attr;
    }

    void CT_DataRef::set_r_id_attr(const ns_r::ST_RelationshipId& _r_id_attr)
    {    
    m_has_r_id_attr = true;
    m_r_id_attr = new ns_r::ST_RelationshipId(_r_id_attr);
    }

    const ns_r::ST_RelationshipId& CT_DataRef::get_r_id_attr() const
    {    
    if (m_r_id_attr)
    {
        return *m_r_id_attr;
    }
    return ns_r::ST_RelationshipId::default_instance();
    }

CT_DataRef* CT_DataRef::default_instance_ = NULL;

    // CT_MergeCells
    CT_MergeCells::CT_MergeCells()
    :m_has_count_attr(false),
    m_count_attr(0)
    {
    }
    CT_MergeCells::~CT_MergeCells()
{
    clear();    }
    CT_MergeCell* CT_MergeCells::add_mergeCell()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_MergeCell* pNewChild = pChildGroup->mutable_mergeCell();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_MergeCells::clear()
    {    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_MergeCells::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_mergeCell())
            {
                (*iter)->get_mergeCell().toXmlElem("main:mergeCell", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_MergeCells& CT_MergeCells::default_instance()
    {    
    if (!CT_MergeCells::default_instance_)
    {
        CT_MergeCells::default_instance_ = new CT_MergeCells();
    }
    return *CT_MergeCells::default_instance_;
    }

    bool CT_MergeCells::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void CT_MergeCells::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& CT_MergeCells::get_count_attr() const
    {    
    return m_count_attr;
    }


    // CT_MergeCells::ChildGroup_1
    CT_MergeCells::ChildGroup_1::ChildGroup_1()
    :m_has_mergeCell(false),
    m_mergeCell(NULL)
    {
    }
    bool CT_MergeCells::ChildGroup_1::has_mergeCell() const
    {    
    return m_has_mergeCell;
    }

    CT_MergeCell* CT_MergeCells::ChildGroup_1::mutable_mergeCell()
    {    
    
    m_has_mergeCell = true;
    if (!m_mergeCell)
    {
        m_mergeCell = new CT_MergeCell();
    }
    return m_mergeCell;
    }

    const CT_MergeCell& CT_MergeCells::ChildGroup_1::get_mergeCell() const
    {    
    if (m_mergeCell)
    {
        return *m_mergeCell;
    }
    return CT_MergeCell::default_instance();
    }

CT_MergeCells* CT_MergeCells::default_instance_ = NULL;

    // CT_MergeCell
    CT_MergeCell::CT_MergeCell()
    :m_has_ref_attr(false),
    m_ref_attr(NULL)
    {
    }
    CT_MergeCell::~CT_MergeCell()
{
    clear();    }
    void CT_MergeCell::clear()
    {    
    m_has_ref_attr = false;
    
    if (m_ref_attr)
    {
        delete m_ref_attr;
        m_ref_attr = NULL;
    }
    
    }

    void CT_MergeCell::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_ref_attr)
    {
        m_ref_attr->toXmlAttr("ref", _outStream);
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_MergeCell& CT_MergeCell::default_instance()
    {    
    if (!CT_MergeCell::default_instance_)
    {
        CT_MergeCell::default_instance_ = new CT_MergeCell();
    }
    return *CT_MergeCell::default_instance_;
    }

    bool CT_MergeCell::has_ref_attr() const
    {    
    return m_has_ref_attr;
    }

    void CT_MergeCell::set_ref_attr(const ST_Ref& _ref_attr)
    {    
    m_has_ref_attr = true;
    m_ref_attr = new ST_Ref(_ref_attr);
    }

    const ST_Ref& CT_MergeCell::get_ref_attr() const
    {    
    if (m_ref_attr)
    {
        return *m_ref_attr;
    }
    return ST_Ref::default_instance();
    }

CT_MergeCell* CT_MergeCell::default_instance_ = NULL;

    // CT_SmartTags
    CT_SmartTags::CT_SmartTags()

    {
    }
    CT_SmartTags::~CT_SmartTags()
{
    clear();    }
    CT_CellSmartTags* CT_SmartTags::add_cellSmartTags()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_CellSmartTags* pNewChild = pChildGroup->mutable_cellSmartTags();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_SmartTags::clear()
    {    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_SmartTags::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_cellSmartTags())
            {
                (*iter)->get_cellSmartTags().toXmlElem("main:cellSmartTags", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_SmartTags& CT_SmartTags::default_instance()
    {    
    if (!CT_SmartTags::default_instance_)
    {
        CT_SmartTags::default_instance_ = new CT_SmartTags();
    }
    return *CT_SmartTags::default_instance_;
    }


    // CT_SmartTags::ChildGroup_1
    CT_SmartTags::ChildGroup_1::ChildGroup_1()
    :m_has_cellSmartTags(false),
    m_cellSmartTags(NULL)
    {
    }
    bool CT_SmartTags::ChildGroup_1::has_cellSmartTags() const
    {    
    return m_has_cellSmartTags;
    }

    CT_CellSmartTags* CT_SmartTags::ChildGroup_1::mutable_cellSmartTags()
    {    
    
    m_has_cellSmartTags = true;
    if (!m_cellSmartTags)
    {
        m_cellSmartTags = new CT_CellSmartTags();
    }
    return m_cellSmartTags;
    }

    const CT_CellSmartTags& CT_SmartTags::ChildGroup_1::get_cellSmartTags() const
    {    
    if (m_cellSmartTags)
    {
        return *m_cellSmartTags;
    }
    return CT_CellSmartTags::default_instance();
    }

CT_SmartTags* CT_SmartTags::default_instance_ = NULL;

    // CT_CellSmartTags
    CT_CellSmartTags::CT_CellSmartTags()
    :m_has_r_attr(false),
    m_r_attr(NULL)
    {
    }
    CT_CellSmartTags::~CT_CellSmartTags()
{
    clear();    }
    CT_CellSmartTag* CT_CellSmartTags::add_cellSmartTag()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_CellSmartTag* pNewChild = pChildGroup->mutable_cellSmartTag();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_CellSmartTags::clear()
    {    
    m_has_r_attr = false;
    
    if (m_r_attr)
    {
        delete m_r_attr;
        m_r_attr = NULL;
    }
    
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_CellSmartTags::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_r_attr)
    {
        m_r_attr->toXmlAttr("r", _outStream);
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_cellSmartTag())
            {
                (*iter)->get_cellSmartTag().toXmlElem("main:cellSmartTag", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_CellSmartTags& CT_CellSmartTags::default_instance()
    {    
    if (!CT_CellSmartTags::default_instance_)
    {
        CT_CellSmartTags::default_instance_ = new CT_CellSmartTags();
    }
    return *CT_CellSmartTags::default_instance_;
    }

    bool CT_CellSmartTags::has_r_attr() const
    {    
    return m_has_r_attr;
    }

    void CT_CellSmartTags::set_r_attr(const ST_CellRef& _r_attr)
    {    
    m_has_r_attr = true;
    m_r_attr = new ST_CellRef(_r_attr);
    }

    const ST_CellRef& CT_CellSmartTags::get_r_attr() const
    {    
    if (m_r_attr)
    {
        return *m_r_attr;
    }
    return ST_CellRef::default_instance();
    }


    // CT_CellSmartTags::ChildGroup_1
    CT_CellSmartTags::ChildGroup_1::ChildGroup_1()
    :m_has_cellSmartTag(false),
    m_cellSmartTag(NULL)
    {
    }
    bool CT_CellSmartTags::ChildGroup_1::has_cellSmartTag() const
    {    
    return m_has_cellSmartTag;
    }

    CT_CellSmartTag* CT_CellSmartTags::ChildGroup_1::mutable_cellSmartTag()
    {    
    
    m_has_cellSmartTag = true;
    if (!m_cellSmartTag)
    {
        m_cellSmartTag = new CT_CellSmartTag();
    }
    return m_cellSmartTag;
    }

    const CT_CellSmartTag& CT_CellSmartTags::ChildGroup_1::get_cellSmartTag() const
    {    
    if (m_cellSmartTag)
    {
        return *m_cellSmartTag;
    }
    return CT_CellSmartTag::default_instance();
    }

CT_CellSmartTags* CT_CellSmartTags::default_instance_ = NULL;

    // CT_CellSmartTag
    CT_CellSmartTag::CT_CellSmartTag()
    :m_has_type_attr(false),
    m_type_attr(0),
    m_has_deleted_attr(false),
    m_deleted_attr(false),
    m_has_xmlBased_attr(false),
    m_xmlBased_attr(false)
    {
    }
    CT_CellSmartTag::~CT_CellSmartTag()
{
    clear();    }
    CT_CellSmartTagPr* CT_CellSmartTag::add_cellSmartTagPr()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_CellSmartTagPr* pNewChild = pChildGroup->mutable_cellSmartTagPr();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_CellSmartTag::clear()
    {    
    m_has_type_attr = false;
    m_type_attr = 0;
    
    m_has_deleted_attr = false;
    m_deleted_attr = false;
    
    m_has_xmlBased_attr = false;
    m_xmlBased_attr = false;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_CellSmartTag::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_type_attr)
    {
        _outStream << " " << "type" << "=\"" << m_type_attr << "\"";
    }
    
    
    if (m_has_deleted_attr)
    {
        _outStream << " " << "deleted" << "=\"" << XSD::XMLBooleanStr(m_deleted_attr) << "\"";
    }
    
    
    if (m_has_xmlBased_attr)
    {
        _outStream << " " << "xmlBased" << "=\"" << XSD::XMLBooleanStr(m_xmlBased_attr) << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_cellSmartTagPr())
            {
                (*iter)->get_cellSmartTagPr().toXmlElem("main:cellSmartTagPr", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_CellSmartTag& CT_CellSmartTag::default_instance()
    {    
    if (!CT_CellSmartTag::default_instance_)
    {
        CT_CellSmartTag::default_instance_ = new CT_CellSmartTag();
    }
    return *CT_CellSmartTag::default_instance_;
    }

    bool CT_CellSmartTag::has_type_attr() const
    {    
    return m_has_type_attr;
    }

    void CT_CellSmartTag::set_type_attr(const XSD::unsignedInt_& _type_attr)
    {    
    m_has_type_attr = true;
    m_type_attr = _type_attr;
    }

    const XSD::unsignedInt_& CT_CellSmartTag::get_type_attr() const
    {    
    return m_type_attr;
    }

    bool CT_CellSmartTag::has_deleted_attr() const
    {    
    return m_has_deleted_attr;
    }

    void CT_CellSmartTag::set_deleted_attr(const XSD::boolean_& _deleted_attr)
    {    
    m_has_deleted_attr = true;
    m_deleted_attr = _deleted_attr;
    }

    const XSD::boolean_& CT_CellSmartTag::get_deleted_attr() const
    {    
    return m_deleted_attr;
    }

    bool CT_CellSmartTag::has_xmlBased_attr() const
    {    
    return m_has_xmlBased_attr;
    }

    void CT_CellSmartTag::set_xmlBased_attr(const XSD::boolean_& _xmlBased_attr)
    {    
    m_has_xmlBased_attr = true;
    m_xmlBased_attr = _xmlBased_attr;
    }

    const XSD::boolean_& CT_CellSmartTag::get_xmlBased_attr() const
    {    
    return m_xmlBased_attr;
    }


    // CT_CellSmartTag::ChildGroup_1
    CT_CellSmartTag::ChildGroup_1::ChildGroup_1()
    :m_has_cellSmartTagPr(false),
    m_cellSmartTagPr(NULL)
    {
    }
    bool CT_CellSmartTag::ChildGroup_1::has_cellSmartTagPr() const
    {    
    return m_has_cellSmartTagPr;
    }

    CT_CellSmartTagPr* CT_CellSmartTag::ChildGroup_1::mutable_cellSmartTagPr()
    {    
    
    m_has_cellSmartTagPr = true;
    if (!m_cellSmartTagPr)
    {
        m_cellSmartTagPr = new CT_CellSmartTagPr();
    }
    return m_cellSmartTagPr;
    }

    const CT_CellSmartTagPr& CT_CellSmartTag::ChildGroup_1::get_cellSmartTagPr() const
    {    
    if (m_cellSmartTagPr)
    {
        return *m_cellSmartTagPr;
    }
    return CT_CellSmartTagPr::default_instance();
    }

CT_CellSmartTag* CT_CellSmartTag::default_instance_ = NULL;

    // CT_CellSmartTagPr
    CT_CellSmartTagPr::CT_CellSmartTagPr()
    :m_has_key_attr(false),
    m_key_attr(NULL),
    m_has_val_attr(false),
    m_val_attr(NULL)
    {
    }
    CT_CellSmartTagPr::~CT_CellSmartTagPr()
{
    clear();    }
    void CT_CellSmartTagPr::clear()
    {    
    m_has_key_attr = false;
    
    if (m_key_attr)
    {
        delete m_key_attr;
        m_key_attr = NULL;
    }
    
    
    m_has_val_attr = false;
    
    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }
    
    }

    void CT_CellSmartTagPr::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_key_attr)
    {
        m_key_attr->toXmlAttr("key", _outStream);
    }
    
    
    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("val", _outStream);
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_CellSmartTagPr& CT_CellSmartTagPr::default_instance()
    {    
    if (!CT_CellSmartTagPr::default_instance_)
    {
        CT_CellSmartTagPr::default_instance_ = new CT_CellSmartTagPr();
    }
    return *CT_CellSmartTagPr::default_instance_;
    }

    bool CT_CellSmartTagPr::has_key_attr() const
    {    
    return m_has_key_attr;
    }

    void CT_CellSmartTagPr::set_key_attr(const ns_s::ST_Xstring& _key_attr)
    {    
    m_has_key_attr = true;
    m_key_attr = new ns_s::ST_Xstring(_key_attr);
    }

    const ns_s::ST_Xstring& CT_CellSmartTagPr::get_key_attr() const
    {    
    if (m_key_attr)
    {
        return *m_key_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_CellSmartTagPr::has_val_attr() const
    {    
    return m_has_val_attr;
    }

    void CT_CellSmartTagPr::set_val_attr(const ns_s::ST_Xstring& _val_attr)
    {    
    m_has_val_attr = true;
    m_val_attr = new ns_s::ST_Xstring(_val_attr);
    }

    const ns_s::ST_Xstring& CT_CellSmartTagPr::get_val_attr() const
    {    
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

CT_CellSmartTagPr* CT_CellSmartTagPr::default_instance_ = NULL;

    // CT_Drawing
    CT_Drawing::CT_Drawing()
    :m_has_r_id_attr(false),
    m_r_id_attr(NULL)
    {
    }
    CT_Drawing::~CT_Drawing()
{
    clear();    }
    void CT_Drawing::clear()
    {    
    m_has_r_id_attr = false;
    
    if (m_r_id_attr)
    {
        delete m_r_id_attr;
        m_r_id_attr = NULL;
    }
    
    }

    void CT_Drawing::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_r_id_attr)
    {
        m_r_id_attr->toXmlAttr("r:id", _outStream);
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_Drawing& CT_Drawing::default_instance()
    {    
    if (!CT_Drawing::default_instance_)
    {
        CT_Drawing::default_instance_ = new CT_Drawing();
    }
    return *CT_Drawing::default_instance_;
    }

    bool CT_Drawing::has_r_id_attr() const
    {    
    return m_has_r_id_attr;
    }

    void CT_Drawing::set_r_id_attr(const ns_r::ST_RelationshipId& _r_id_attr)
    {    
    m_has_r_id_attr = true;
    m_r_id_attr = new ns_r::ST_RelationshipId(_r_id_attr);
    }

    const ns_r::ST_RelationshipId& CT_Drawing::get_r_id_attr() const
    {    
    if (m_r_id_attr)
    {
        return *m_r_id_attr;
    }
    return ns_r::ST_RelationshipId::default_instance();
    }

CT_Drawing* CT_Drawing::default_instance_ = NULL;

    // CT_LegacyDrawing
    CT_LegacyDrawing::CT_LegacyDrawing()
    :m_has_r_id_attr(false),
    m_r_id_attr(NULL)
    {
    }
    CT_LegacyDrawing::~CT_LegacyDrawing()
{
    clear();    }
    void CT_LegacyDrawing::clear()
    {    
    m_has_r_id_attr = false;
    
    if (m_r_id_attr)
    {
        delete m_r_id_attr;
        m_r_id_attr = NULL;
    }
    
    }

    void CT_LegacyDrawing::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_r_id_attr)
    {
        m_r_id_attr->toXmlAttr("r:id", _outStream);
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_LegacyDrawing& CT_LegacyDrawing::default_instance()
    {    
    if (!CT_LegacyDrawing::default_instance_)
    {
        CT_LegacyDrawing::default_instance_ = new CT_LegacyDrawing();
    }
    return *CT_LegacyDrawing::default_instance_;
    }

    bool CT_LegacyDrawing::has_r_id_attr() const
    {    
    return m_has_r_id_attr;
    }

    void CT_LegacyDrawing::set_r_id_attr(const ns_r::ST_RelationshipId& _r_id_attr)
    {    
    m_has_r_id_attr = true;
    m_r_id_attr = new ns_r::ST_RelationshipId(_r_id_attr);
    }

    const ns_r::ST_RelationshipId& CT_LegacyDrawing::get_r_id_attr() const
    {    
    if (m_r_id_attr)
    {
        return *m_r_id_attr;
    }
    return ns_r::ST_RelationshipId::default_instance();
    }

CT_LegacyDrawing* CT_LegacyDrawing::default_instance_ = NULL;

    // CT_DrawingHF
    CT_DrawingHF::CT_DrawingHF()
    :m_has_r_id_attr(false),
    m_r_id_attr(NULL),
    m_has_lho_attr(false),
    m_lho_attr(0),
    m_has_lhe_attr(false),
    m_lhe_attr(0),
    m_has_lhf_attr(false),
    m_lhf_attr(0),
    m_has_cho_attr(false),
    m_cho_attr(0),
    m_has_che_attr(false),
    m_che_attr(0),
    m_has_chf_attr(false),
    m_chf_attr(0),
    m_has_rho_attr(false),
    m_rho_attr(0),
    m_has_rhe_attr(false),
    m_rhe_attr(0),
    m_has_rhf_attr(false),
    m_rhf_attr(0),
    m_has_lfo_attr(false),
    m_lfo_attr(0),
    m_has_lfe_attr(false),
    m_lfe_attr(0),
    m_has_lff_attr(false),
    m_lff_attr(0),
    m_has_cfo_attr(false),
    m_cfo_attr(0),
    m_has_cfe_attr(false),
    m_cfe_attr(0),
    m_has_cff_attr(false),
    m_cff_attr(0),
    m_has_rfo_attr(false),
    m_rfo_attr(0),
    m_has_rfe_attr(false),
    m_rfe_attr(0),
    m_has_rff_attr(false),
    m_rff_attr(0)
    {
    }
    CT_DrawingHF::~CT_DrawingHF()
{
    clear();    }
    void CT_DrawingHF::clear()
    {    
    m_has_r_id_attr = false;
    
    if (m_r_id_attr)
    {
        delete m_r_id_attr;
        m_r_id_attr = NULL;
    }
    
    
    m_has_lho_attr = false;
    m_lho_attr = 0;
    
    m_has_lhe_attr = false;
    m_lhe_attr = 0;
    
    m_has_lhf_attr = false;
    m_lhf_attr = 0;
    
    m_has_cho_attr = false;
    m_cho_attr = 0;
    
    m_has_che_attr = false;
    m_che_attr = 0;
    
    m_has_chf_attr = false;
    m_chf_attr = 0;
    
    m_has_rho_attr = false;
    m_rho_attr = 0;
    
    m_has_rhe_attr = false;
    m_rhe_attr = 0;
    
    m_has_rhf_attr = false;
    m_rhf_attr = 0;
    
    m_has_lfo_attr = false;
    m_lfo_attr = 0;
    
    m_has_lfe_attr = false;
    m_lfe_attr = 0;
    
    m_has_lff_attr = false;
    m_lff_attr = 0;
    
    m_has_cfo_attr = false;
    m_cfo_attr = 0;
    
    m_has_cfe_attr = false;
    m_cfe_attr = 0;
    
    m_has_cff_attr = false;
    m_cff_attr = 0;
    
    m_has_rfo_attr = false;
    m_rfo_attr = 0;
    
    m_has_rfe_attr = false;
    m_rfe_attr = 0;
    
    m_has_rff_attr = false;
    m_rff_attr = 0;
    }

    void CT_DrawingHF::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_r_id_attr)
    {
        m_r_id_attr->toXmlAttr("r:id", _outStream);
    }
    
    
    if (m_has_lho_attr)
    {
        _outStream << " " << "lho" << "=\"" << m_lho_attr << "\"";
    }
    
    
    if (m_has_lhe_attr)
    {
        _outStream << " " << "lhe" << "=\"" << m_lhe_attr << "\"";
    }
    
    
    if (m_has_lhf_attr)
    {
        _outStream << " " << "lhf" << "=\"" << m_lhf_attr << "\"";
    }
    
    
    if (m_has_cho_attr)
    {
        _outStream << " " << "cho" << "=\"" << m_cho_attr << "\"";
    }
    
    
    if (m_has_che_attr)
    {
        _outStream << " " << "che" << "=\"" << m_che_attr << "\"";
    }
    
    
    if (m_has_chf_attr)
    {
        _outStream << " " << "chf" << "=\"" << m_chf_attr << "\"";
    }
    
    
    if (m_has_rho_attr)
    {
        _outStream << " " << "rho" << "=\"" << m_rho_attr << "\"";
    }
    
    
    if (m_has_rhe_attr)
    {
        _outStream << " " << "rhe" << "=\"" << m_rhe_attr << "\"";
    }
    
    
    if (m_has_rhf_attr)
    {
        _outStream << " " << "rhf" << "=\"" << m_rhf_attr << "\"";
    }
    
    
    if (m_has_lfo_attr)
    {
        _outStream << " " << "lfo" << "=\"" << m_lfo_attr << "\"";
    }
    
    
    if (m_has_lfe_attr)
    {
        _outStream << " " << "lfe" << "=\"" << m_lfe_attr << "\"";
    }
    
    
    if (m_has_lff_attr)
    {
        _outStream << " " << "lff" << "=\"" << m_lff_attr << "\"";
    }
    
    
    if (m_has_cfo_attr)
    {
        _outStream << " " << "cfo" << "=\"" << m_cfo_attr << "\"";
    }
    
    
    if (m_has_cfe_attr)
    {
        _outStream << " " << "cfe" << "=\"" << m_cfe_attr << "\"";
    }
    
    
    if (m_has_cff_attr)
    {
        _outStream << " " << "cff" << "=\"" << m_cff_attr << "\"";
    }
    
    
    if (m_has_rfo_attr)
    {
        _outStream << " " << "rfo" << "=\"" << m_rfo_attr << "\"";
    }
    
    
    if (m_has_rfe_attr)
    {
        _outStream << " " << "rfe" << "=\"" << m_rfe_attr << "\"";
    }
    
    
    if (m_has_rff_attr)
    {
        _outStream << " " << "rff" << "=\"" << m_rff_attr << "\"";
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_DrawingHF& CT_DrawingHF::default_instance()
    {    
    if (!CT_DrawingHF::default_instance_)
    {
        CT_DrawingHF::default_instance_ = new CT_DrawingHF();
    }
    return *CT_DrawingHF::default_instance_;
    }

    bool CT_DrawingHF::has_r_id_attr() const
    {    
    return m_has_r_id_attr;
    }

    void CT_DrawingHF::set_r_id_attr(const ns_r::ST_RelationshipId& _r_id_attr)
    {    
    m_has_r_id_attr = true;
    m_r_id_attr = new ns_r::ST_RelationshipId(_r_id_attr);
    }

    const ns_r::ST_RelationshipId& CT_DrawingHF::get_r_id_attr() const
    {    
    if (m_r_id_attr)
    {
        return *m_r_id_attr;
    }
    return ns_r::ST_RelationshipId::default_instance();
    }

    bool CT_DrawingHF::has_lho_attr() const
    {    
    return m_has_lho_attr;
    }

    void CT_DrawingHF::set_lho_attr(const XSD::unsignedInt_& _lho_attr)
    {    
    m_has_lho_attr = true;
    m_lho_attr = _lho_attr;
    }

    const XSD::unsignedInt_& CT_DrawingHF::get_lho_attr() const
    {    
    return m_lho_attr;
    }

    bool CT_DrawingHF::has_lhe_attr() const
    {    
    return m_has_lhe_attr;
    }

    void CT_DrawingHF::set_lhe_attr(const XSD::unsignedInt_& _lhe_attr)
    {    
    m_has_lhe_attr = true;
    m_lhe_attr = _lhe_attr;
    }

    const XSD::unsignedInt_& CT_DrawingHF::get_lhe_attr() const
    {    
    return m_lhe_attr;
    }

    bool CT_DrawingHF::has_lhf_attr() const
    {    
    return m_has_lhf_attr;
    }

    void CT_DrawingHF::set_lhf_attr(const XSD::unsignedInt_& _lhf_attr)
    {    
    m_has_lhf_attr = true;
    m_lhf_attr = _lhf_attr;
    }

    const XSD::unsignedInt_& CT_DrawingHF::get_lhf_attr() const
    {    
    return m_lhf_attr;
    }

    bool CT_DrawingHF::has_cho_attr() const
    {    
    return m_has_cho_attr;
    }

    void CT_DrawingHF::set_cho_attr(const XSD::unsignedInt_& _cho_attr)
    {    
    m_has_cho_attr = true;
    m_cho_attr = _cho_attr;
    }

    const XSD::unsignedInt_& CT_DrawingHF::get_cho_attr() const
    {    
    return m_cho_attr;
    }

    bool CT_DrawingHF::has_che_attr() const
    {    
    return m_has_che_attr;
    }

    void CT_DrawingHF::set_che_attr(const XSD::unsignedInt_& _che_attr)
    {    
    m_has_che_attr = true;
    m_che_attr = _che_attr;
    }

    const XSD::unsignedInt_& CT_DrawingHF::get_che_attr() const
    {    
    return m_che_attr;
    }

    bool CT_DrawingHF::has_chf_attr() const
    {    
    return m_has_chf_attr;
    }

    void CT_DrawingHF::set_chf_attr(const XSD::unsignedInt_& _chf_attr)
    {    
    m_has_chf_attr = true;
    m_chf_attr = _chf_attr;
    }

    const XSD::unsignedInt_& CT_DrawingHF::get_chf_attr() const
    {    
    return m_chf_attr;
    }

    bool CT_DrawingHF::has_rho_attr() const
    {    
    return m_has_rho_attr;
    }

    void CT_DrawingHF::set_rho_attr(const XSD::unsignedInt_& _rho_attr)
    {    
    m_has_rho_attr = true;
    m_rho_attr = _rho_attr;
    }

    const XSD::unsignedInt_& CT_DrawingHF::get_rho_attr() const
    {    
    return m_rho_attr;
    }

    bool CT_DrawingHF::has_rhe_attr() const
    {    
    return m_has_rhe_attr;
    }

    void CT_DrawingHF::set_rhe_attr(const XSD::unsignedInt_& _rhe_attr)
    {    
    m_has_rhe_attr = true;
    m_rhe_attr = _rhe_attr;
    }

    const XSD::unsignedInt_& CT_DrawingHF::get_rhe_attr() const
    {    
    return m_rhe_attr;
    }

    bool CT_DrawingHF::has_rhf_attr() const
    {    
    return m_has_rhf_attr;
    }

    void CT_DrawingHF::set_rhf_attr(const XSD::unsignedInt_& _rhf_attr)
    {    
    m_has_rhf_attr = true;
    m_rhf_attr = _rhf_attr;
    }

    const XSD::unsignedInt_& CT_DrawingHF::get_rhf_attr() const
    {    
    return m_rhf_attr;
    }

    bool CT_DrawingHF::has_lfo_attr() const
    {    
    return m_has_lfo_attr;
    }

    void CT_DrawingHF::set_lfo_attr(const XSD::unsignedInt_& _lfo_attr)
    {    
    m_has_lfo_attr = true;
    m_lfo_attr = _lfo_attr;
    }

    const XSD::unsignedInt_& CT_DrawingHF::get_lfo_attr() const
    {    
    return m_lfo_attr;
    }

    bool CT_DrawingHF::has_lfe_attr() const
    {    
    return m_has_lfe_attr;
    }

    void CT_DrawingHF::set_lfe_attr(const XSD::unsignedInt_& _lfe_attr)
    {    
    m_has_lfe_attr = true;
    m_lfe_attr = _lfe_attr;
    }

    const XSD::unsignedInt_& CT_DrawingHF::get_lfe_attr() const
    {    
    return m_lfe_attr;
    }

    bool CT_DrawingHF::has_lff_attr() const
    {    
    return m_has_lff_attr;
    }

    void CT_DrawingHF::set_lff_attr(const XSD::unsignedInt_& _lff_attr)
    {    
    m_has_lff_attr = true;
    m_lff_attr = _lff_attr;
    }

    const XSD::unsignedInt_& CT_DrawingHF::get_lff_attr() const
    {    
    return m_lff_attr;
    }

    bool CT_DrawingHF::has_cfo_attr() const
    {    
    return m_has_cfo_attr;
    }

    void CT_DrawingHF::set_cfo_attr(const XSD::unsignedInt_& _cfo_attr)
    {    
    m_has_cfo_attr = true;
    m_cfo_attr = _cfo_attr;
    }

    const XSD::unsignedInt_& CT_DrawingHF::get_cfo_attr() const
    {    
    return m_cfo_attr;
    }

    bool CT_DrawingHF::has_cfe_attr() const
    {    
    return m_has_cfe_attr;
    }

    void CT_DrawingHF::set_cfe_attr(const XSD::unsignedInt_& _cfe_attr)
    {    
    m_has_cfe_attr = true;
    m_cfe_attr = _cfe_attr;
    }

    const XSD::unsignedInt_& CT_DrawingHF::get_cfe_attr() const
    {    
    return m_cfe_attr;
    }

    bool CT_DrawingHF::has_cff_attr() const
    {    
    return m_has_cff_attr;
    }

    void CT_DrawingHF::set_cff_attr(const XSD::unsignedInt_& _cff_attr)
    {    
    m_has_cff_attr = true;
    m_cff_attr = _cff_attr;
    }

    const XSD::unsignedInt_& CT_DrawingHF::get_cff_attr() const
    {    
    return m_cff_attr;
    }

    bool CT_DrawingHF::has_rfo_attr() const
    {    
    return m_has_rfo_attr;
    }

    void CT_DrawingHF::set_rfo_attr(const XSD::unsignedInt_& _rfo_attr)
    {    
    m_has_rfo_attr = true;
    m_rfo_attr = _rfo_attr;
    }

    const XSD::unsignedInt_& CT_DrawingHF::get_rfo_attr() const
    {    
    return m_rfo_attr;
    }

    bool CT_DrawingHF::has_rfe_attr() const
    {    
    return m_has_rfe_attr;
    }

    void CT_DrawingHF::set_rfe_attr(const XSD::unsignedInt_& _rfe_attr)
    {    
    m_has_rfe_attr = true;
    m_rfe_attr = _rfe_attr;
    }

    const XSD::unsignedInt_& CT_DrawingHF::get_rfe_attr() const
    {    
    return m_rfe_attr;
    }

    bool CT_DrawingHF::has_rff_attr() const
    {    
    return m_has_rff_attr;
    }

    void CT_DrawingHF::set_rff_attr(const XSD::unsignedInt_& _rff_attr)
    {    
    m_has_rff_attr = true;
    m_rff_attr = _rff_attr;
    }

    const XSD::unsignedInt_& CT_DrawingHF::get_rff_attr() const
    {    
    return m_rff_attr;
    }

CT_DrawingHF* CT_DrawingHF::default_instance_ = NULL;

    // CT_CustomSheetViews
    CT_CustomSheetViews::CT_CustomSheetViews()

    {
    }
    CT_CustomSheetViews::~CT_CustomSheetViews()
{
    clear();    }
    CT_CustomSheetView* CT_CustomSheetViews::add_customSheetView()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_CustomSheetView* pNewChild = pChildGroup->mutable_customSheetView();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_CustomSheetViews::clear()
    {    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_CustomSheetViews::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_customSheetView())
            {
                (*iter)->get_customSheetView().toXmlElem("main:customSheetView", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_CustomSheetViews& CT_CustomSheetViews::default_instance()
    {    
    if (!CT_CustomSheetViews::default_instance_)
    {
        CT_CustomSheetViews::default_instance_ = new CT_CustomSheetViews();
    }
    return *CT_CustomSheetViews::default_instance_;
    }


    // CT_CustomSheetViews::ChildGroup_1
    CT_CustomSheetViews::ChildGroup_1::ChildGroup_1()
    :m_has_customSheetView(false),
    m_customSheetView(NULL)
    {
    }
    bool CT_CustomSheetViews::ChildGroup_1::has_customSheetView() const
    {    
    return m_has_customSheetView;
    }

    CT_CustomSheetView* CT_CustomSheetViews::ChildGroup_1::mutable_customSheetView()
    {    
    
    m_has_customSheetView = true;
    if (!m_customSheetView)
    {
        m_customSheetView = new CT_CustomSheetView();
    }
    return m_customSheetView;
    }

    const CT_CustomSheetView& CT_CustomSheetViews::ChildGroup_1::get_customSheetView() const
    {    
    if (m_customSheetView)
    {
        return *m_customSheetView;
    }
    return CT_CustomSheetView::default_instance();
    }

CT_CustomSheetViews* CT_CustomSheetViews::default_instance_ = NULL;

    // CT_CustomSheetView
    CT_CustomSheetView::CT_CustomSheetView()
    :m_has_pane(false),
    m_pane(NULL),
    m_has_selection(false),
    m_selection(NULL),
    m_has_rowBreaks(false),
    m_rowBreaks(NULL),
    m_has_colBreaks(false),
    m_colBreaks(NULL),
    m_has_pageMargins(false),
    m_pageMargins(NULL),
    m_has_printOptions(false),
    m_printOptions(NULL),
    m_has_pageSetup(false),
    m_pageSetup(NULL),
    m_has_headerFooter(false),
    m_headerFooter(NULL),
    m_has_autoFilter(false),
    m_autoFilter(NULL),
    m_has_extLst(false),
    m_extLst(NULL),
    m_has_guid_attr(false),
    m_guid_attr(NULL),
    m_has_scale_attr(false),
    m_scale_attr(0),
    m_has_colorId_attr(false),
    m_colorId_attr(0),
    m_has_showPageBreaks_attr(false),
    m_showPageBreaks_attr(false),
    m_has_showFormulas_attr(false),
    m_showFormulas_attr(false),
    m_has_showGridLines_attr(false),
    m_showGridLines_attr(false),
    m_has_showRowCol_attr(false),
    m_showRowCol_attr(false),
    m_has_outlineSymbols_attr(false),
    m_outlineSymbols_attr(false),
    m_has_zeroValues_attr(false),
    m_zeroValues_attr(false),
    m_has_fitToPage_attr(false),
    m_fitToPage_attr(false),
    m_has_printArea_attr(false),
    m_printArea_attr(false),
    m_has_filter_attr(false),
    m_filter_attr(false),
    m_has_showAutoFilter_attr(false),
    m_showAutoFilter_attr(false),
    m_has_hiddenRows_attr(false),
    m_hiddenRows_attr(false),
    m_has_hiddenColumns_attr(false),
    m_hiddenColumns_attr(false),
    m_has_state_attr(false),
    m_state_attr(NULL),
    m_has_filterUnique_attr(false),
    m_filterUnique_attr(false),
    m_has_view_attr(false),
    m_view_attr(NULL),
    m_has_showRuler_attr(false),
    m_showRuler_attr(false),
    m_has_topLeftCell_attr(false),
    m_topLeftCell_attr(NULL)
    {
    }
    CT_CustomSheetView::~CT_CustomSheetView()
{
    clear();    }
    bool CT_CustomSheetView::has_pane() const
    {    
    return m_has_pane;
    }

    CT_Pane* CT_CustomSheetView::mutable_pane()
    {    
    m_has_pane = true;
    if (!m_pane)
    {
        m_pane = new CT_Pane();
    }
    return m_pane;
    }

    const CT_Pane& CT_CustomSheetView::get_pane() const
    {    
    if (m_pane)
    {
        return *m_pane;
    }
    return CT_Pane::default_instance();
    }

    bool CT_CustomSheetView::has_selection() const
    {    
    return m_has_selection;
    }

    CT_Selection* CT_CustomSheetView::mutable_selection()
    {    
    m_has_selection = true;
    if (!m_selection)
    {
        m_selection = new CT_Selection();
    }
    return m_selection;
    }

    const CT_Selection& CT_CustomSheetView::get_selection() const
    {    
    if (m_selection)
    {
        return *m_selection;
    }
    return CT_Selection::default_instance();
    }

    bool CT_CustomSheetView::has_rowBreaks() const
    {    
    return m_has_rowBreaks;
    }

    CT_PageBreak* CT_CustomSheetView::mutable_rowBreaks()
    {    
    m_has_rowBreaks = true;
    if (!m_rowBreaks)
    {
        m_rowBreaks = new CT_PageBreak();
    }
    return m_rowBreaks;
    }

    const CT_PageBreak& CT_CustomSheetView::get_rowBreaks() const
    {    
    if (m_rowBreaks)
    {
        return *m_rowBreaks;
    }
    return CT_PageBreak::default_instance();
    }

    bool CT_CustomSheetView::has_colBreaks() const
    {    
    return m_has_colBreaks;
    }

    CT_PageBreak* CT_CustomSheetView::mutable_colBreaks()
    {    
    m_has_colBreaks = true;
    if (!m_colBreaks)
    {
        m_colBreaks = new CT_PageBreak();
    }
    return m_colBreaks;
    }

    const CT_PageBreak& CT_CustomSheetView::get_colBreaks() const
    {    
    if (m_colBreaks)
    {
        return *m_colBreaks;
    }
    return CT_PageBreak::default_instance();
    }

    bool CT_CustomSheetView::has_pageMargins() const
    {    
    return m_has_pageMargins;
    }

    CT_PageMargins* CT_CustomSheetView::mutable_pageMargins()
    {    
    m_has_pageMargins = true;
    if (!m_pageMargins)
    {
        m_pageMargins = new CT_PageMargins();
    }
    return m_pageMargins;
    }

    const CT_PageMargins& CT_CustomSheetView::get_pageMargins() const
    {    
    if (m_pageMargins)
    {
        return *m_pageMargins;
    }
    return CT_PageMargins::default_instance();
    }

    bool CT_CustomSheetView::has_printOptions() const
    {    
    return m_has_printOptions;
    }

    CT_PrintOptions* CT_CustomSheetView::mutable_printOptions()
    {    
    m_has_printOptions = true;
    if (!m_printOptions)
    {
        m_printOptions = new CT_PrintOptions();
    }
    return m_printOptions;
    }

    const CT_PrintOptions& CT_CustomSheetView::get_printOptions() const
    {    
    if (m_printOptions)
    {
        return *m_printOptions;
    }
    return CT_PrintOptions::default_instance();
    }

    bool CT_CustomSheetView::has_pageSetup() const
    {    
    return m_has_pageSetup;
    }

    CT_PageSetup* CT_CustomSheetView::mutable_pageSetup()
    {    
    m_has_pageSetup = true;
    if (!m_pageSetup)
    {
        m_pageSetup = new CT_PageSetup();
    }
    return m_pageSetup;
    }

    const CT_PageSetup& CT_CustomSheetView::get_pageSetup() const
    {    
    if (m_pageSetup)
    {
        return *m_pageSetup;
    }
    return CT_PageSetup::default_instance();
    }

    bool CT_CustomSheetView::has_headerFooter() const
    {    
    return m_has_headerFooter;
    }

    CT_HeaderFooter* CT_CustomSheetView::mutable_headerFooter()
    {    
    m_has_headerFooter = true;
    if (!m_headerFooter)
    {
        m_headerFooter = new CT_HeaderFooter();
    }
    return m_headerFooter;
    }

    const CT_HeaderFooter& CT_CustomSheetView::get_headerFooter() const
    {    
    if (m_headerFooter)
    {
        return *m_headerFooter;
    }
    return CT_HeaderFooter::default_instance();
    }

    bool CT_CustomSheetView::has_autoFilter() const
    {    
    return m_has_autoFilter;
    }

    CT_AutoFilter* CT_CustomSheetView::mutable_autoFilter()
    {    
    m_has_autoFilter = true;
    if (!m_autoFilter)
    {
        m_autoFilter = new CT_AutoFilter();
    }
    return m_autoFilter;
    }

    const CT_AutoFilter& CT_CustomSheetView::get_autoFilter() const
    {    
    if (m_autoFilter)
    {
        return *m_autoFilter;
    }
    return CT_AutoFilter::default_instance();
    }

    bool CT_CustomSheetView::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* CT_CustomSheetView::mutable_extLst()
    {    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& CT_CustomSheetView::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

    void CT_CustomSheetView::clear()
    {    
    m_has_guid_attr = false;
    
    if (m_guid_attr)
    {
        delete m_guid_attr;
        m_guid_attr = NULL;
    }
    
    
    m_has_scale_attr = false;
    m_scale_attr = 0;
    
    m_has_colorId_attr = false;
    m_colorId_attr = 0;
    
    m_has_showPageBreaks_attr = false;
    m_showPageBreaks_attr = false;
    
    m_has_showFormulas_attr = false;
    m_showFormulas_attr = false;
    
    m_has_showGridLines_attr = false;
    m_showGridLines_attr = false;
    
    m_has_showRowCol_attr = false;
    m_showRowCol_attr = false;
    
    m_has_outlineSymbols_attr = false;
    m_outlineSymbols_attr = false;
    
    m_has_zeroValues_attr = false;
    m_zeroValues_attr = false;
    
    m_has_fitToPage_attr = false;
    m_fitToPage_attr = false;
    
    m_has_printArea_attr = false;
    m_printArea_attr = false;
    
    m_has_filter_attr = false;
    m_filter_attr = false;
    
    m_has_showAutoFilter_attr = false;
    m_showAutoFilter_attr = false;
    
    m_has_hiddenRows_attr = false;
    m_hiddenRows_attr = false;
    
    m_has_hiddenColumns_attr = false;
    m_hiddenColumns_attr = false;
    
    m_has_state_attr = false;
    
    if (m_state_attr)
    {
        delete m_state_attr;
        m_state_attr = NULL;
    }
    
    
    m_has_filterUnique_attr = false;
    m_filterUnique_attr = false;
    
    m_has_view_attr = false;
    
    if (m_view_attr)
    {
        delete m_view_attr;
        m_view_attr = NULL;
    }
    
    
    m_has_showRuler_attr = false;
    m_showRuler_attr = false;
    
    m_has_topLeftCell_attr = false;
    
    if (m_topLeftCell_attr)
    {
        delete m_topLeftCell_attr;
        m_topLeftCell_attr = NULL;
    }
    
    }

    void CT_CustomSheetView::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_guid_attr)
    {
        m_guid_attr->toXmlAttr("guid", _outStream);
    }
    
    
    if (m_has_scale_attr)
    {
        _outStream << " " << "scale" << "=\"" << m_scale_attr << "\"";
    }
    
    
    if (m_has_colorId_attr)
    {
        _outStream << " " << "colorId" << "=\"" << m_colorId_attr << "\"";
    }
    
    
    if (m_has_showPageBreaks_attr)
    {
        _outStream << " " << "showPageBreaks" << "=\"" << XSD::XMLBooleanStr(m_showPageBreaks_attr) << "\"";
    }
    
    
    if (m_has_showFormulas_attr)
    {
        _outStream << " " << "showFormulas" << "=\"" << XSD::XMLBooleanStr(m_showFormulas_attr) << "\"";
    }
    
    
    if (m_has_showGridLines_attr)
    {
        _outStream << " " << "showGridLines" << "=\"" << XSD::XMLBooleanStr(m_showGridLines_attr) << "\"";
    }
    
    
    if (m_has_showRowCol_attr)
    {
        _outStream << " " << "showRowCol" << "=\"" << XSD::XMLBooleanStr(m_showRowCol_attr) << "\"";
    }
    
    
    if (m_has_outlineSymbols_attr)
    {
        _outStream << " " << "outlineSymbols" << "=\"" << XSD::XMLBooleanStr(m_outlineSymbols_attr) << "\"";
    }
    
    
    if (m_has_zeroValues_attr)
    {
        _outStream << " " << "zeroValues" << "=\"" << XSD::XMLBooleanStr(m_zeroValues_attr) << "\"";
    }
    
    
    if (m_has_fitToPage_attr)
    {
        _outStream << " " << "fitToPage" << "=\"" << XSD::XMLBooleanStr(m_fitToPage_attr) << "\"";
    }
    
    
    if (m_has_printArea_attr)
    {
        _outStream << " " << "printArea" << "=\"" << XSD::XMLBooleanStr(m_printArea_attr) << "\"";
    }
    
    
    if (m_has_filter_attr)
    {
        _outStream << " " << "filter" << "=\"" << XSD::XMLBooleanStr(m_filter_attr) << "\"";
    }
    
    
    if (m_has_showAutoFilter_attr)
    {
        _outStream << " " << "showAutoFilter" << "=\"" << XSD::XMLBooleanStr(m_showAutoFilter_attr) << "\"";
    }
    
    
    if (m_has_hiddenRows_attr)
    {
        _outStream << " " << "hiddenRows" << "=\"" << XSD::XMLBooleanStr(m_hiddenRows_attr) << "\"";
    }
    
    
    if (m_has_hiddenColumns_attr)
    {
        _outStream << " " << "hiddenColumns" << "=\"" << XSD::XMLBooleanStr(m_hiddenColumns_attr) << "\"";
    }
    
    
    if (m_has_state_attr)
    {
        m_state_attr->toXmlAttr("state", _outStream);
    }
    
    
    if (m_has_filterUnique_attr)
    {
        _outStream << " " << "filterUnique" << "=\"" << XSD::XMLBooleanStr(m_filterUnique_attr) << "\"";
    }
    
    
    if (m_has_view_attr)
    {
        m_view_attr->toXmlAttr("view", _outStream);
    }
    
    
    if (m_has_showRuler_attr)
    {
        _outStream << " " << "showRuler" << "=\"" << XSD::XMLBooleanStr(m_showRuler_attr) << "\"";
    }
    
    
    if (m_has_topLeftCell_attr)
    {
        m_topLeftCell_attr->toXmlAttr("topLeftCell", _outStream);
    }
    
            _outStream << ">";
            
    if (m_has_pane)
    {
        m_pane->toXmlElem("main:pane", "", _outStream);;
    }
    
    if (m_has_selection)
    {
        m_selection->toXmlElem("main:selection", "", _outStream);;
    }
    
    if (m_has_rowBreaks)
    {
        m_rowBreaks->toXmlElem("main:rowBreaks", "", _outStream);;
    }
    
    if (m_has_colBreaks)
    {
        m_colBreaks->toXmlElem("main:colBreaks", "", _outStream);;
    }
    
    if (m_has_pageMargins)
    {
        m_pageMargins->toXmlElem("main:pageMargins", "", _outStream);;
    }
    
    if (m_has_printOptions)
    {
        m_printOptions->toXmlElem("main:printOptions", "", _outStream);;
    }
    
    if (m_has_pageSetup)
    {
        m_pageSetup->toXmlElem("main:pageSetup", "", _outStream);;
    }
    
    if (m_has_headerFooter)
    {
        m_headerFooter->toXmlElem("main:headerFooter", "", _outStream);;
    }
    
    if (m_has_autoFilter)
    {
        m_autoFilter->toXmlElem("main:autoFilter", "", _outStream);;
    }
    
    if (m_has_extLst)
    {
        m_extLst->toXmlElem("main:extLst", "", _outStream);;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_CustomSheetView& CT_CustomSheetView::default_instance()
    {    
    if (!CT_CustomSheetView::default_instance_)
    {
        CT_CustomSheetView::default_instance_ = new CT_CustomSheetView();
    }
    return *CT_CustomSheetView::default_instance_;
    }

    bool CT_CustomSheetView::has_guid_attr() const
    {    
    return m_has_guid_attr;
    }

    void CT_CustomSheetView::set_guid_attr(const ns_s::ST_Guid& _guid_attr)
    {    
    m_has_guid_attr = true;
    m_guid_attr = new ns_s::ST_Guid(_guid_attr);
    }

    const ns_s::ST_Guid& CT_CustomSheetView::get_guid_attr() const
    {    
    if (m_guid_attr)
    {
        return *m_guid_attr;
    }
    return ns_s::ST_Guid::default_instance();
    }

    bool CT_CustomSheetView::has_scale_attr() const
    {    
    return m_has_scale_attr;
    }

    void CT_CustomSheetView::set_scale_attr(const XSD::unsignedInt_& _scale_attr)
    {    
    m_has_scale_attr = true;
    m_scale_attr = _scale_attr;
    }

    const XSD::unsignedInt_& CT_CustomSheetView::get_scale_attr() const
    {    
    return m_scale_attr;
    }

    bool CT_CustomSheetView::has_colorId_attr() const
    {    
    return m_has_colorId_attr;
    }

    void CT_CustomSheetView::set_colorId_attr(const XSD::unsignedInt_& _colorId_attr)
    {    
    m_has_colorId_attr = true;
    m_colorId_attr = _colorId_attr;
    }

    const XSD::unsignedInt_& CT_CustomSheetView::get_colorId_attr() const
    {    
    return m_colorId_attr;
    }

    bool CT_CustomSheetView::has_showPageBreaks_attr() const
    {    
    return m_has_showPageBreaks_attr;
    }

    void CT_CustomSheetView::set_showPageBreaks_attr(const XSD::boolean_& _showPageBreaks_attr)
    {    
    m_has_showPageBreaks_attr = true;
    m_showPageBreaks_attr = _showPageBreaks_attr;
    }

    const XSD::boolean_& CT_CustomSheetView::get_showPageBreaks_attr() const
    {    
    return m_showPageBreaks_attr;
    }

    bool CT_CustomSheetView::has_showFormulas_attr() const
    {    
    return m_has_showFormulas_attr;
    }

    void CT_CustomSheetView::set_showFormulas_attr(const XSD::boolean_& _showFormulas_attr)
    {    
    m_has_showFormulas_attr = true;
    m_showFormulas_attr = _showFormulas_attr;
    }

    const XSD::boolean_& CT_CustomSheetView::get_showFormulas_attr() const
    {    
    return m_showFormulas_attr;
    }

    bool CT_CustomSheetView::has_showGridLines_attr() const
    {    
    return m_has_showGridLines_attr;
    }

    void CT_CustomSheetView::set_showGridLines_attr(const XSD::boolean_& _showGridLines_attr)
    {    
    m_has_showGridLines_attr = true;
    m_showGridLines_attr = _showGridLines_attr;
    }

    const XSD::boolean_& CT_CustomSheetView::get_showGridLines_attr() const
    {    
    return m_showGridLines_attr;
    }

    bool CT_CustomSheetView::has_showRowCol_attr() const
    {    
    return m_has_showRowCol_attr;
    }

    void CT_CustomSheetView::set_showRowCol_attr(const XSD::boolean_& _showRowCol_attr)
    {    
    m_has_showRowCol_attr = true;
    m_showRowCol_attr = _showRowCol_attr;
    }

    const XSD::boolean_& CT_CustomSheetView::get_showRowCol_attr() const
    {    
    return m_showRowCol_attr;
    }

    bool CT_CustomSheetView::has_outlineSymbols_attr() const
    {    
    return m_has_outlineSymbols_attr;
    }

    void CT_CustomSheetView::set_outlineSymbols_attr(const XSD::boolean_& _outlineSymbols_attr)
    {    
    m_has_outlineSymbols_attr = true;
    m_outlineSymbols_attr = _outlineSymbols_attr;
    }

    const XSD::boolean_& CT_CustomSheetView::get_outlineSymbols_attr() const
    {    
    return m_outlineSymbols_attr;
    }

    bool CT_CustomSheetView::has_zeroValues_attr() const
    {    
    return m_has_zeroValues_attr;
    }

    void CT_CustomSheetView::set_zeroValues_attr(const XSD::boolean_& _zeroValues_attr)
    {    
    m_has_zeroValues_attr = true;
    m_zeroValues_attr = _zeroValues_attr;
    }

    const XSD::boolean_& CT_CustomSheetView::get_zeroValues_attr() const
    {    
    return m_zeroValues_attr;
    }

    bool CT_CustomSheetView::has_fitToPage_attr() const
    {    
    return m_has_fitToPage_attr;
    }

    void CT_CustomSheetView::set_fitToPage_attr(const XSD::boolean_& _fitToPage_attr)
    {    
    m_has_fitToPage_attr = true;
    m_fitToPage_attr = _fitToPage_attr;
    }

    const XSD::boolean_& CT_CustomSheetView::get_fitToPage_attr() const
    {    
    return m_fitToPage_attr;
    }

    bool CT_CustomSheetView::has_printArea_attr() const
    {    
    return m_has_printArea_attr;
    }

    void CT_CustomSheetView::set_printArea_attr(const XSD::boolean_& _printArea_attr)
    {    
    m_has_printArea_attr = true;
    m_printArea_attr = _printArea_attr;
    }

    const XSD::boolean_& CT_CustomSheetView::get_printArea_attr() const
    {    
    return m_printArea_attr;
    }

    bool CT_CustomSheetView::has_filter_attr() const
    {    
    return m_has_filter_attr;
    }

    void CT_CustomSheetView::set_filter_attr(const XSD::boolean_& _filter_attr)
    {    
    m_has_filter_attr = true;
    m_filter_attr = _filter_attr;
    }

    const XSD::boolean_& CT_CustomSheetView::get_filter_attr() const
    {    
    return m_filter_attr;
    }

    bool CT_CustomSheetView::has_showAutoFilter_attr() const
    {    
    return m_has_showAutoFilter_attr;
    }

    void CT_CustomSheetView::set_showAutoFilter_attr(const XSD::boolean_& _showAutoFilter_attr)
    {    
    m_has_showAutoFilter_attr = true;
    m_showAutoFilter_attr = _showAutoFilter_attr;
    }

    const XSD::boolean_& CT_CustomSheetView::get_showAutoFilter_attr() const
    {    
    return m_showAutoFilter_attr;
    }

    bool CT_CustomSheetView::has_hiddenRows_attr() const
    {    
    return m_has_hiddenRows_attr;
    }

    void CT_CustomSheetView::set_hiddenRows_attr(const XSD::boolean_& _hiddenRows_attr)
    {    
    m_has_hiddenRows_attr = true;
    m_hiddenRows_attr = _hiddenRows_attr;
    }

    const XSD::boolean_& CT_CustomSheetView::get_hiddenRows_attr() const
    {    
    return m_hiddenRows_attr;
    }

    bool CT_CustomSheetView::has_hiddenColumns_attr() const
    {    
    return m_has_hiddenColumns_attr;
    }

    void CT_CustomSheetView::set_hiddenColumns_attr(const XSD::boolean_& _hiddenColumns_attr)
    {    
    m_has_hiddenColumns_attr = true;
    m_hiddenColumns_attr = _hiddenColumns_attr;
    }

    const XSD::boolean_& CT_CustomSheetView::get_hiddenColumns_attr() const
    {    
    return m_hiddenColumns_attr;
    }

    bool CT_CustomSheetView::has_state_attr() const
    {    
    return m_has_state_attr;
    }

    void CT_CustomSheetView::set_state_attr(const ST_SheetState& _state_attr)
    {    
    m_has_state_attr = true;
    m_state_attr = new ST_SheetState(_state_attr);
    }

    const ST_SheetState& CT_CustomSheetView::get_state_attr() const
    {    
    if (m_state_attr)
    {
        return *m_state_attr;
    }
    return ST_SheetState::default_instance();
    }

    bool CT_CustomSheetView::has_filterUnique_attr() const
    {    
    return m_has_filterUnique_attr;
    }

    void CT_CustomSheetView::set_filterUnique_attr(const XSD::boolean_& _filterUnique_attr)
    {    
    m_has_filterUnique_attr = true;
    m_filterUnique_attr = _filterUnique_attr;
    }

    const XSD::boolean_& CT_CustomSheetView::get_filterUnique_attr() const
    {    
    return m_filterUnique_attr;
    }

    bool CT_CustomSheetView::has_view_attr() const
    {    
    return m_has_view_attr;
    }

    void CT_CustomSheetView::set_view_attr(const ST_SheetViewType& _view_attr)
    {    
    m_has_view_attr = true;
    m_view_attr = new ST_SheetViewType(_view_attr);
    }

    const ST_SheetViewType& CT_CustomSheetView::get_view_attr() const
    {    
    if (m_view_attr)
    {
        return *m_view_attr;
    }
    return ST_SheetViewType::default_instance();
    }

    bool CT_CustomSheetView::has_showRuler_attr() const
    {    
    return m_has_showRuler_attr;
    }

    void CT_CustomSheetView::set_showRuler_attr(const XSD::boolean_& _showRuler_attr)
    {    
    m_has_showRuler_attr = true;
    m_showRuler_attr = _showRuler_attr;
    }

    const XSD::boolean_& CT_CustomSheetView::get_showRuler_attr() const
    {    
    return m_showRuler_attr;
    }

    bool CT_CustomSheetView::has_topLeftCell_attr() const
    {    
    return m_has_topLeftCell_attr;
    }

    void CT_CustomSheetView::set_topLeftCell_attr(const ST_CellRef& _topLeftCell_attr)
    {    
    m_has_topLeftCell_attr = true;
    m_topLeftCell_attr = new ST_CellRef(_topLeftCell_attr);
    }

    const ST_CellRef& CT_CustomSheetView::get_topLeftCell_attr() const
    {    
    if (m_topLeftCell_attr)
    {
        return *m_topLeftCell_attr;
    }
    return ST_CellRef::default_instance();
    }

CT_CustomSheetView* CT_CustomSheetView::default_instance_ = NULL;

    // CT_DataValidations
    CT_DataValidations::CT_DataValidations()
    :m_has_disablePrompts_attr(false),
    m_disablePrompts_attr(false),
    m_has_xWindow_attr(false),
    m_xWindow_attr(0),
    m_has_yWindow_attr(false),
    m_yWindow_attr(0),
    m_has_count_attr(false),
    m_count_attr(0)
    {
    }
    CT_DataValidations::~CT_DataValidations()
{
    clear();    }
    CT_DataValidation* CT_DataValidations::add_dataValidation()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_DataValidation* pNewChild = pChildGroup->mutable_dataValidation();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_DataValidations::clear()
    {    
    m_has_disablePrompts_attr = false;
    m_disablePrompts_attr = false;
    
    m_has_xWindow_attr = false;
    m_xWindow_attr = 0;
    
    m_has_yWindow_attr = false;
    m_yWindow_attr = 0;
    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_DataValidations::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_disablePrompts_attr)
    {
        _outStream << " " << "disablePrompts" << "=\"" << XSD::XMLBooleanStr(m_disablePrompts_attr) << "\"";
    }
    
    
    if (m_has_xWindow_attr)
    {
        _outStream << " " << "xWindow" << "=\"" << m_xWindow_attr << "\"";
    }
    
    
    if (m_has_yWindow_attr)
    {
        _outStream << " " << "yWindow" << "=\"" << m_yWindow_attr << "\"";
    }
    
    
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_dataValidation())
            {
                (*iter)->get_dataValidation().toXmlElem("main:dataValidation", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_DataValidations& CT_DataValidations::default_instance()
    {    
    if (!CT_DataValidations::default_instance_)
    {
        CT_DataValidations::default_instance_ = new CT_DataValidations();
    }
    return *CT_DataValidations::default_instance_;
    }

    bool CT_DataValidations::has_disablePrompts_attr() const
    {    
    return m_has_disablePrompts_attr;
    }

    void CT_DataValidations::set_disablePrompts_attr(const XSD::boolean_& _disablePrompts_attr)
    {    
    m_has_disablePrompts_attr = true;
    m_disablePrompts_attr = _disablePrompts_attr;
    }

    const XSD::boolean_& CT_DataValidations::get_disablePrompts_attr() const
    {    
    return m_disablePrompts_attr;
    }

    bool CT_DataValidations::has_xWindow_attr() const
    {    
    return m_has_xWindow_attr;
    }

    void CT_DataValidations::set_xWindow_attr(const XSD::unsignedInt_& _xWindow_attr)
    {    
    m_has_xWindow_attr = true;
    m_xWindow_attr = _xWindow_attr;
    }

    const XSD::unsignedInt_& CT_DataValidations::get_xWindow_attr() const
    {    
    return m_xWindow_attr;
    }

    bool CT_DataValidations::has_yWindow_attr() const
    {    
    return m_has_yWindow_attr;
    }

    void CT_DataValidations::set_yWindow_attr(const XSD::unsignedInt_& _yWindow_attr)
    {    
    m_has_yWindow_attr = true;
    m_yWindow_attr = _yWindow_attr;
    }

    const XSD::unsignedInt_& CT_DataValidations::get_yWindow_attr() const
    {    
    return m_yWindow_attr;
    }

    bool CT_DataValidations::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void CT_DataValidations::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& CT_DataValidations::get_count_attr() const
    {    
    return m_count_attr;
    }


    // CT_DataValidations::ChildGroup_1
    CT_DataValidations::ChildGroup_1::ChildGroup_1()
    :m_has_dataValidation(false),
    m_dataValidation(NULL)
    {
    }
    bool CT_DataValidations::ChildGroup_1::has_dataValidation() const
    {    
    return m_has_dataValidation;
    }

    CT_DataValidation* CT_DataValidations::ChildGroup_1::mutable_dataValidation()
    {    
    
    m_has_dataValidation = true;
    if (!m_dataValidation)
    {
        m_dataValidation = new CT_DataValidation();
    }
    return m_dataValidation;
    }

    const CT_DataValidation& CT_DataValidations::ChildGroup_1::get_dataValidation() const
    {    
    if (m_dataValidation)
    {
        return *m_dataValidation;
    }
    return CT_DataValidation::default_instance();
    }

CT_DataValidations* CT_DataValidations::default_instance_ = NULL;

    // CT_DataValidation
    CT_DataValidation::CT_DataValidation()
    :m_has_formula1(false),
    m_formula1(NULL),
    m_has_formula2(false),
    m_formula2(NULL),
    m_has_type_attr(false),
    m_type_attr(NULL),
    m_has_errorStyle_attr(false),
    m_errorStyle_attr(NULL),
    m_has_imeMode_attr(false),
    m_imeMode_attr(NULL),
    m_has_operator_attr(false),
    m_operator_attr(NULL),
    m_has_allowBlank_attr(false),
    m_allowBlank_attr(false),
    m_has_showDropDown_attr(false),
    m_showDropDown_attr(false),
    m_has_showInputMessage_attr(false),
    m_showInputMessage_attr(false),
    m_has_showErrorMessage_attr(false),
    m_showErrorMessage_attr(false),
    m_has_errorTitle_attr(false),
    m_errorTitle_attr(NULL),
    m_has_error_attr(false),
    m_error_attr(NULL),
    m_has_promptTitle_attr(false),
    m_promptTitle_attr(NULL),
    m_has_prompt_attr(false),
    m_prompt_attr(NULL),
    m_has_sqref_attr(false),
    m_sqref_attr(NULL)
    {
    }
    CT_DataValidation::~CT_DataValidation()
{
    clear();    }
    bool CT_DataValidation::has_formula1() const
    {    
    return m_has_formula1;
    }

    ST_Formula* CT_DataValidation::mutable_formula1()
    {    
    m_has_formula1 = true;
    if (!m_formula1)
    {
        m_formula1 = new ST_Formula();
    }
    return m_formula1;
    }

    const ST_Formula& CT_DataValidation::get_formula1() const
    {    
    if (m_formula1)
    {
        return *m_formula1;
    }
    return ST_Formula::default_instance();
    }

    bool CT_DataValidation::has_formula2() const
    {    
    return m_has_formula2;
    }

    ST_Formula* CT_DataValidation::mutable_formula2()
    {    
    m_has_formula2 = true;
    if (!m_formula2)
    {
        m_formula2 = new ST_Formula();
    }
    return m_formula2;
    }

    const ST_Formula& CT_DataValidation::get_formula2() const
    {    
    if (m_formula2)
    {
        return *m_formula2;
    }
    return ST_Formula::default_instance();
    }

    void CT_DataValidation::clear()
    {    
    m_has_type_attr = false;
    
    if (m_type_attr)
    {
        delete m_type_attr;
        m_type_attr = NULL;
    }
    
    
    m_has_errorStyle_attr = false;
    
    if (m_errorStyle_attr)
    {
        delete m_errorStyle_attr;
        m_errorStyle_attr = NULL;
    }
    
    
    m_has_imeMode_attr = false;
    
    if (m_imeMode_attr)
    {
        delete m_imeMode_attr;
        m_imeMode_attr = NULL;
    }
    
    
    m_has_operator_attr = false;
    
    if (m_operator_attr)
    {
        delete m_operator_attr;
        m_operator_attr = NULL;
    }
    
    
    m_has_allowBlank_attr = false;
    m_allowBlank_attr = false;
    
    m_has_showDropDown_attr = false;
    m_showDropDown_attr = false;
    
    m_has_showInputMessage_attr = false;
    m_showInputMessage_attr = false;
    
    m_has_showErrorMessage_attr = false;
    m_showErrorMessage_attr = false;
    
    m_has_errorTitle_attr = false;
    
    if (m_errorTitle_attr)
    {
        delete m_errorTitle_attr;
        m_errorTitle_attr = NULL;
    }
    
    
    m_has_error_attr = false;
    
    if (m_error_attr)
    {
        delete m_error_attr;
        m_error_attr = NULL;
    }
    
    
    m_has_promptTitle_attr = false;
    
    if (m_promptTitle_attr)
    {
        delete m_promptTitle_attr;
        m_promptTitle_attr = NULL;
    }
    
    
    m_has_prompt_attr = false;
    
    if (m_prompt_attr)
    {
        delete m_prompt_attr;
        m_prompt_attr = NULL;
    }
    
    
    m_has_sqref_attr = false;
    
    if (m_sqref_attr)
    {
        delete m_sqref_attr;
        m_sqref_attr = NULL;
    }
    
    }

    void CT_DataValidation::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_type_attr)
    {
        m_type_attr->toXmlAttr("type", _outStream);
    }
    
    
    if (m_has_errorStyle_attr)
    {
        m_errorStyle_attr->toXmlAttr("errorStyle", _outStream);
    }
    
    
    if (m_has_imeMode_attr)
    {
        m_imeMode_attr->toXmlAttr("imeMode", _outStream);
    }
    
    
    if (m_has_operator_attr)
    {
        m_operator_attr->toXmlAttr("operator", _outStream);
    }
    
    
    if (m_has_allowBlank_attr)
    {
        _outStream << " " << "allowBlank" << "=\"" << XSD::XMLBooleanStr(m_allowBlank_attr) << "\"";
    }
    
    
    if (m_has_showDropDown_attr)
    {
        _outStream << " " << "showDropDown" << "=\"" << XSD::XMLBooleanStr(m_showDropDown_attr) << "\"";
    }
    
    
    if (m_has_showInputMessage_attr)
    {
        _outStream << " " << "showInputMessage" << "=\"" << XSD::XMLBooleanStr(m_showInputMessage_attr) << "\"";
    }
    
    
    if (m_has_showErrorMessage_attr)
    {
        _outStream << " " << "showErrorMessage" << "=\"" << XSD::XMLBooleanStr(m_showErrorMessage_attr) << "\"";
    }
    
    
    if (m_has_errorTitle_attr)
    {
        m_errorTitle_attr->toXmlAttr("errorTitle", _outStream);
    }
    
    
    if (m_has_error_attr)
    {
        m_error_attr->toXmlAttr("error", _outStream);
    }
    
    
    if (m_has_promptTitle_attr)
    {
        m_promptTitle_attr->toXmlAttr("promptTitle", _outStream);
    }
    
    
    if (m_has_prompt_attr)
    {
        m_prompt_attr->toXmlAttr("prompt", _outStream);
    }
    
    
    if (m_has_sqref_attr)
    {
        m_sqref_attr->toXmlAttr("sqref", _outStream);
    }
    
            _outStream << ">";
            
    if (m_has_formula1)
    {
        _outStream << "<main:formula1>" << m_formula1->toString() << "</main:formula1>";;
    }
    
    if (m_has_formula2)
    {
        _outStream << "<main:formula2>" << m_formula2->toString() << "</main:formula2>";;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_DataValidation& CT_DataValidation::default_instance()
    {    
    if (!CT_DataValidation::default_instance_)
    {
        CT_DataValidation::default_instance_ = new CT_DataValidation();
    }
    return *CT_DataValidation::default_instance_;
    }

    bool CT_DataValidation::has_type_attr() const
    {    
    return m_has_type_attr;
    }

    void CT_DataValidation::set_type_attr(const ST_DataValidationType& _type_attr)
    {    
    m_has_type_attr = true;
    m_type_attr = new ST_DataValidationType(_type_attr);
    }

    const ST_DataValidationType& CT_DataValidation::get_type_attr() const
    {    
    if (m_type_attr)
    {
        return *m_type_attr;
    }
    return ST_DataValidationType::default_instance();
    }

    bool CT_DataValidation::has_errorStyle_attr() const
    {    
    return m_has_errorStyle_attr;
    }

    void CT_DataValidation::set_errorStyle_attr(const ST_DataValidationErrorStyle& _errorStyle_attr)
    {    
    m_has_errorStyle_attr = true;
    m_errorStyle_attr = new ST_DataValidationErrorStyle(_errorStyle_attr);
    }

    const ST_DataValidationErrorStyle& CT_DataValidation::get_errorStyle_attr() const
    {    
    if (m_errorStyle_attr)
    {
        return *m_errorStyle_attr;
    }
    return ST_DataValidationErrorStyle::default_instance();
    }

    bool CT_DataValidation::has_imeMode_attr() const
    {    
    return m_has_imeMode_attr;
    }

    void CT_DataValidation::set_imeMode_attr(const ST_DataValidationImeMode& _imeMode_attr)
    {    
    m_has_imeMode_attr = true;
    m_imeMode_attr = new ST_DataValidationImeMode(_imeMode_attr);
    }

    const ST_DataValidationImeMode& CT_DataValidation::get_imeMode_attr() const
    {    
    if (m_imeMode_attr)
    {
        return *m_imeMode_attr;
    }
    return ST_DataValidationImeMode::default_instance();
    }

    bool CT_DataValidation::has_operator_attr() const
    {    
    return m_has_operator_attr;
    }

    void CT_DataValidation::set_operator_attr(const ST_DataValidationOperator& _operator_attr)
    {    
    m_has_operator_attr = true;
    m_operator_attr = new ST_DataValidationOperator(_operator_attr);
    }

    const ST_DataValidationOperator& CT_DataValidation::get_operator_attr() const
    {    
    if (m_operator_attr)
    {
        return *m_operator_attr;
    }
    return ST_DataValidationOperator::default_instance();
    }

    bool CT_DataValidation::has_allowBlank_attr() const
    {    
    return m_has_allowBlank_attr;
    }

    void CT_DataValidation::set_allowBlank_attr(const XSD::boolean_& _allowBlank_attr)
    {    
    m_has_allowBlank_attr = true;
    m_allowBlank_attr = _allowBlank_attr;
    }

    const XSD::boolean_& CT_DataValidation::get_allowBlank_attr() const
    {    
    return m_allowBlank_attr;
    }

    bool CT_DataValidation::has_showDropDown_attr() const
    {    
    return m_has_showDropDown_attr;
    }

    void CT_DataValidation::set_showDropDown_attr(const XSD::boolean_& _showDropDown_attr)
    {    
    m_has_showDropDown_attr = true;
    m_showDropDown_attr = _showDropDown_attr;
    }

    const XSD::boolean_& CT_DataValidation::get_showDropDown_attr() const
    {    
    return m_showDropDown_attr;
    }

    bool CT_DataValidation::has_showInputMessage_attr() const
    {    
    return m_has_showInputMessage_attr;
    }

    void CT_DataValidation::set_showInputMessage_attr(const XSD::boolean_& _showInputMessage_attr)
    {    
    m_has_showInputMessage_attr = true;
    m_showInputMessage_attr = _showInputMessage_attr;
    }

    const XSD::boolean_& CT_DataValidation::get_showInputMessage_attr() const
    {    
    return m_showInputMessage_attr;
    }

    bool CT_DataValidation::has_showErrorMessage_attr() const
    {    
    return m_has_showErrorMessage_attr;
    }

    void CT_DataValidation::set_showErrorMessage_attr(const XSD::boolean_& _showErrorMessage_attr)
    {    
    m_has_showErrorMessage_attr = true;
    m_showErrorMessage_attr = _showErrorMessage_attr;
    }

    const XSD::boolean_& CT_DataValidation::get_showErrorMessage_attr() const
    {    
    return m_showErrorMessage_attr;
    }

    bool CT_DataValidation::has_errorTitle_attr() const
    {    
    return m_has_errorTitle_attr;
    }

    void CT_DataValidation::set_errorTitle_attr(const ns_s::ST_Xstring& _errorTitle_attr)
    {    
    m_has_errorTitle_attr = true;
    m_errorTitle_attr = new ns_s::ST_Xstring(_errorTitle_attr);
    }

    const ns_s::ST_Xstring& CT_DataValidation::get_errorTitle_attr() const
    {    
    if (m_errorTitle_attr)
    {
        return *m_errorTitle_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_DataValidation::has_error_attr() const
    {    
    return m_has_error_attr;
    }

    void CT_DataValidation::set_error_attr(const ns_s::ST_Xstring& _error_attr)
    {    
    m_has_error_attr = true;
    m_error_attr = new ns_s::ST_Xstring(_error_attr);
    }

    const ns_s::ST_Xstring& CT_DataValidation::get_error_attr() const
    {    
    if (m_error_attr)
    {
        return *m_error_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_DataValidation::has_promptTitle_attr() const
    {    
    return m_has_promptTitle_attr;
    }

    void CT_DataValidation::set_promptTitle_attr(const ns_s::ST_Xstring& _promptTitle_attr)
    {    
    m_has_promptTitle_attr = true;
    m_promptTitle_attr = new ns_s::ST_Xstring(_promptTitle_attr);
    }

    const ns_s::ST_Xstring& CT_DataValidation::get_promptTitle_attr() const
    {    
    if (m_promptTitle_attr)
    {
        return *m_promptTitle_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_DataValidation::has_prompt_attr() const
    {    
    return m_has_prompt_attr;
    }

    void CT_DataValidation::set_prompt_attr(const ns_s::ST_Xstring& _prompt_attr)
    {    
    m_has_prompt_attr = true;
    m_prompt_attr = new ns_s::ST_Xstring(_prompt_attr);
    }

    const ns_s::ST_Xstring& CT_DataValidation::get_prompt_attr() const
    {    
    if (m_prompt_attr)
    {
        return *m_prompt_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_DataValidation::has_sqref_attr() const
    {    
    return m_has_sqref_attr;
    }

    void CT_DataValidation::set_sqref_attr(const ST_Sqref& _sqref_attr)
    {    
    m_has_sqref_attr = true;
    m_sqref_attr = new ST_Sqref(_sqref_attr);
    }

    const ST_Sqref& CT_DataValidation::get_sqref_attr() const
    {    
    if (m_sqref_attr)
    {
        return *m_sqref_attr;
    }
    return ST_Sqref::default_instance();
    }

CT_DataValidation* CT_DataValidation::default_instance_ = NULL;

    // CT_ConditionalFormatting
    CT_ConditionalFormatting::CT_ConditionalFormatting()
    :m_has_pivot_attr(false),
    m_pivot_attr(false),
    m_has_sqref_attr(false),
    m_sqref_attr(NULL)
    {
    }
    CT_ConditionalFormatting::~CT_ConditionalFormatting()
{
    clear();    }
    CT_CfRule* CT_ConditionalFormatting::add_cfRule()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_CfRule* pNewChild = pChildGroup->mutable_cfRule();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_ExtensionList* CT_ConditionalFormatting::add_extLst()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_ExtensionList* pNewChild = pChildGroup->mutable_extLst();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_ConditionalFormatting::clear()
    {    
    m_has_pivot_attr = false;
    m_pivot_attr = false;
    
    m_has_sqref_attr = false;
    
    if (m_sqref_attr)
    {
        delete m_sqref_attr;
        m_sqref_attr = NULL;
    }
    
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_ConditionalFormatting::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_pivot_attr)
    {
        _outStream << " " << "pivot" << "=\"" << XSD::XMLBooleanStr(m_pivot_attr) << "\"";
    }
    
    
    if (m_has_sqref_attr)
    {
        m_sqref_attr->toXmlAttr("sqref", _outStream);
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_cfRule())
            {
                (*iter)->get_cfRule().toXmlElem("main:cfRule", "", _outStream);
            }
            else if ((*iter)->has_extLst())
            {
                (*iter)->get_extLst().toXmlElem("main:extLst", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_ConditionalFormatting& CT_ConditionalFormatting::default_instance()
    {    
    if (!CT_ConditionalFormatting::default_instance_)
    {
        CT_ConditionalFormatting::default_instance_ = new CT_ConditionalFormatting();
    }
    return *CT_ConditionalFormatting::default_instance_;
    }

    bool CT_ConditionalFormatting::has_pivot_attr() const
    {    
    return m_has_pivot_attr;
    }

    void CT_ConditionalFormatting::set_pivot_attr(const XSD::boolean_& _pivot_attr)
    {    
    m_has_pivot_attr = true;
    m_pivot_attr = _pivot_attr;
    }

    const XSD::boolean_& CT_ConditionalFormatting::get_pivot_attr() const
    {    
    return m_pivot_attr;
    }

    bool CT_ConditionalFormatting::has_sqref_attr() const
    {    
    return m_has_sqref_attr;
    }

    void CT_ConditionalFormatting::set_sqref_attr(const ST_Sqref& _sqref_attr)
    {    
    m_has_sqref_attr = true;
    m_sqref_attr = new ST_Sqref(_sqref_attr);
    }

    const ST_Sqref& CT_ConditionalFormatting::get_sqref_attr() const
    {    
    if (m_sqref_attr)
    {
        return *m_sqref_attr;
    }
    return ST_Sqref::default_instance();
    }


    // CT_ConditionalFormatting::ChildGroup_1
    CT_ConditionalFormatting::ChildGroup_1::ChildGroup_1()
    :m_has_cfRule(false),
    m_cfRule(NULL),
    m_has_extLst(false),
    m_extLst(NULL)
    {
    }
    bool CT_ConditionalFormatting::ChildGroup_1::has_cfRule() const
    {    
    return m_has_cfRule;
    }

    CT_CfRule* CT_ConditionalFormatting::ChildGroup_1::mutable_cfRule()
    {    
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_cfRule = true;
    if (!m_cfRule)
    {
        m_cfRule = new CT_CfRule();
    }
    return m_cfRule;
    }

    const CT_CfRule& CT_ConditionalFormatting::ChildGroup_1::get_cfRule() const
    {    
    if (m_cfRule)
    {
        return *m_cfRule;
    }
    return CT_CfRule::default_instance();
    }

    bool CT_ConditionalFormatting::ChildGroup_1::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* CT_ConditionalFormatting::ChildGroup_1::mutable_extLst()
    {    
    
    m_has_cfRule = false;
    
    if (m_cfRule)
    {
        delete m_cfRule;
        m_cfRule = NULL;
    }
    ;
    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& CT_ConditionalFormatting::ChildGroup_1::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

CT_ConditionalFormatting* CT_ConditionalFormatting::default_instance_ = NULL;

    // CT_CfRule
    CT_CfRule::CT_CfRule()
    :m_has_type_attr(false),
    m_type_attr(NULL),
    m_has_dxfId_attr(false),
    m_dxfId_attr(NULL),
    m_has_priority_attr(false),
    m_priority_attr(0),
    m_has_stopIfTrue_attr(false),
    m_stopIfTrue_attr(false),
    m_has_aboveAverage_attr(false),
    m_aboveAverage_attr(false),
    m_has_percent_attr(false),
    m_percent_attr(false),
    m_has_bottom_attr(false),
    m_bottom_attr(false),
    m_has_operator_attr(false),
    m_operator_attr(NULL),
    m_has_text_attr(false),
    m_text_attr(""),
    m_has_timePeriod_attr(false),
    m_timePeriod_attr(NULL),
    m_has_rank_attr(false),
    m_rank_attr(0),
    m_has_stdDev_attr(false),
    m_stdDev_attr(0),
    m_has_equalAverage_attr(false),
    m_equalAverage_attr(false)
    {
    }
    CT_CfRule::~CT_CfRule()
{
    clear();    }
    ST_Formula* CT_CfRule::add_formula()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    ST_Formula* pNewChild = pChildGroup->mutable_formula();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_ColorScale* CT_CfRule::add_colorScale()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_ColorScale* pNewChild = pChildGroup->mutable_colorScale();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_DataBar* CT_CfRule::add_dataBar()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_DataBar* pNewChild = pChildGroup->mutable_dataBar();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_IconSet* CT_CfRule::add_iconSet()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_IconSet* pNewChild = pChildGroup->mutable_iconSet();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_ExtensionList* CT_CfRule::add_extLst()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_ExtensionList* pNewChild = pChildGroup->mutable_extLst();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_CfRule::clear()
    {    
    m_has_type_attr = false;
    
    if (m_type_attr)
    {
        delete m_type_attr;
        m_type_attr = NULL;
    }
    
    
    m_has_dxfId_attr = false;
    
    if (m_dxfId_attr)
    {
        delete m_dxfId_attr;
        m_dxfId_attr = NULL;
    }
    
    
    m_has_priority_attr = false;
    m_priority_attr = 0;
    
    m_has_stopIfTrue_attr = false;
    m_stopIfTrue_attr = false;
    
    m_has_aboveAverage_attr = false;
    m_aboveAverage_attr = false;
    
    m_has_percent_attr = false;
    m_percent_attr = false;
    
    m_has_bottom_attr = false;
    m_bottom_attr = false;
    
    m_has_operator_attr = false;
    
    if (m_operator_attr)
    {
        delete m_operator_attr;
        m_operator_attr = NULL;
    }
    
    
    m_has_text_attr = false;
    m_text_attr.clear();
    
    m_has_timePeriod_attr = false;
    
    if (m_timePeriod_attr)
    {
        delete m_timePeriod_attr;
        m_timePeriod_attr = NULL;
    }
    
    
    m_has_rank_attr = false;
    m_rank_attr = 0;
    
    m_has_stdDev_attr = false;
    m_stdDev_attr = 0;
    
    m_has_equalAverage_attr = false;
    m_equalAverage_attr = false;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_CfRule::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_type_attr)
    {
        m_type_attr->toXmlAttr("type", _outStream);
    }
    
    
    if (m_has_dxfId_attr)
    {
        m_dxfId_attr->toXmlAttr("dxfId", _outStream);
    }
    
    
    if (m_has_priority_attr)
    {
        _outStream << " " << "priority" << "=\"" << m_priority_attr << "\"";
    }
    
    
    if (m_has_stopIfTrue_attr)
    {
        _outStream << " " << "stopIfTrue" << "=\"" << XSD::XMLBooleanStr(m_stopIfTrue_attr) << "\"";
    }
    
    
    if (m_has_aboveAverage_attr)
    {
        _outStream << " " << "aboveAverage" << "=\"" << XSD::XMLBooleanStr(m_aboveAverage_attr) << "\"";
    }
    
    
    if (m_has_percent_attr)
    {
        _outStream << " " << "percent" << "=\"" << XSD::XMLBooleanStr(m_percent_attr) << "\"";
    }
    
    
    if (m_has_bottom_attr)
    {
        _outStream << " " << "bottom" << "=\"" << XSD::XMLBooleanStr(m_bottom_attr) << "\"";
    }
    
    
    if (m_has_operator_attr)
    {
        m_operator_attr->toXmlAttr("operator", _outStream);
    }
    
    
    if (m_has_text_attr)
    {
        _outStream << " " << "text" << "=\"" << m_text_attr << "\"";
    }
    
    
    if (m_has_timePeriod_attr)
    {
        m_timePeriod_attr->toXmlAttr("timePeriod", _outStream);
    }
    
    
    if (m_has_rank_attr)
    {
        _outStream << " " << "rank" << "=\"" << m_rank_attr << "\"";
    }
    
    
    if (m_has_stdDev_attr)
    {
        _outStream << " " << "stdDev" << "=\"" << m_stdDev_attr << "\"";
    }
    
    
    if (m_has_equalAverage_attr)
    {
        _outStream << " " << "equalAverage" << "=\"" << XSD::XMLBooleanStr(m_equalAverage_attr) << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_formula())
            {
                _outStream << "<main:formula>" << (*iter)->get_formula().toString() << "</main:formula>";
            }
            else if ((*iter)->has_colorScale())
            {
                (*iter)->get_colorScale().toXmlElem("main:colorScale", "", _outStream);
            }
            else if ((*iter)->has_dataBar())
            {
                (*iter)->get_dataBar().toXmlElem("main:dataBar", "", _outStream);
            }
            else if ((*iter)->has_iconSet())
            {
                (*iter)->get_iconSet().toXmlElem("main:iconSet", "", _outStream);
            }
            else if ((*iter)->has_extLst())
            {
                (*iter)->get_extLst().toXmlElem("main:extLst", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_CfRule& CT_CfRule::default_instance()
    {    
    if (!CT_CfRule::default_instance_)
    {
        CT_CfRule::default_instance_ = new CT_CfRule();
    }
    return *CT_CfRule::default_instance_;
    }

    bool CT_CfRule::has_type_attr() const
    {    
    return m_has_type_attr;
    }

    void CT_CfRule::set_type_attr(const ST_CfType& _type_attr)
    {    
    m_has_type_attr = true;
    m_type_attr = new ST_CfType(_type_attr);
    }

    const ST_CfType& CT_CfRule::get_type_attr() const
    {    
    if (m_type_attr)
    {
        return *m_type_attr;
    }
    return ST_CfType::default_instance();
    }

    bool CT_CfRule::has_dxfId_attr() const
    {    
    return m_has_dxfId_attr;
    }

    void CT_CfRule::set_dxfId_attr(const ST_DxfId& _dxfId_attr)
    {    
    m_has_dxfId_attr = true;
    m_dxfId_attr = new ST_DxfId(_dxfId_attr);
    }

    const ST_DxfId& CT_CfRule::get_dxfId_attr() const
    {    
    if (m_dxfId_attr)
    {
        return *m_dxfId_attr;
    }
    return ST_DxfId::default_instance();
    }

    bool CT_CfRule::has_priority_attr() const
    {    
    return m_has_priority_attr;
    }

    void CT_CfRule::set_priority_attr(const XSD::int_& _priority_attr)
    {    
    m_has_priority_attr = true;
    m_priority_attr = _priority_attr;
    }

    const XSD::int_& CT_CfRule::get_priority_attr() const
    {    
    return m_priority_attr;
    }

    bool CT_CfRule::has_stopIfTrue_attr() const
    {    
    return m_has_stopIfTrue_attr;
    }

    void CT_CfRule::set_stopIfTrue_attr(const XSD::boolean_& _stopIfTrue_attr)
    {    
    m_has_stopIfTrue_attr = true;
    m_stopIfTrue_attr = _stopIfTrue_attr;
    }

    const XSD::boolean_& CT_CfRule::get_stopIfTrue_attr() const
    {    
    return m_stopIfTrue_attr;
    }

    bool CT_CfRule::has_aboveAverage_attr() const
    {    
    return m_has_aboveAverage_attr;
    }

    void CT_CfRule::set_aboveAverage_attr(const XSD::boolean_& _aboveAverage_attr)
    {    
    m_has_aboveAverage_attr = true;
    m_aboveAverage_attr = _aboveAverage_attr;
    }

    const XSD::boolean_& CT_CfRule::get_aboveAverage_attr() const
    {    
    return m_aboveAverage_attr;
    }

    bool CT_CfRule::has_percent_attr() const
    {    
    return m_has_percent_attr;
    }

    void CT_CfRule::set_percent_attr(const XSD::boolean_& _percent_attr)
    {    
    m_has_percent_attr = true;
    m_percent_attr = _percent_attr;
    }

    const XSD::boolean_& CT_CfRule::get_percent_attr() const
    {    
    return m_percent_attr;
    }

    bool CT_CfRule::has_bottom_attr() const
    {    
    return m_has_bottom_attr;
    }

    void CT_CfRule::set_bottom_attr(const XSD::boolean_& _bottom_attr)
    {    
    m_has_bottom_attr = true;
    m_bottom_attr = _bottom_attr;
    }

    const XSD::boolean_& CT_CfRule::get_bottom_attr() const
    {    
    return m_bottom_attr;
    }

    bool CT_CfRule::has_operator_attr() const
    {    
    return m_has_operator_attr;
    }

    void CT_CfRule::set_operator_attr(const ST_ConditionalFormattingOperator& _operator_attr)
    {    
    m_has_operator_attr = true;
    m_operator_attr = new ST_ConditionalFormattingOperator(_operator_attr);
    }

    const ST_ConditionalFormattingOperator& CT_CfRule::get_operator_attr() const
    {    
    if (m_operator_attr)
    {
        return *m_operator_attr;
    }
    return ST_ConditionalFormattingOperator::default_instance();
    }

    bool CT_CfRule::has_text_attr() const
    {    
    return m_has_text_attr;
    }

    void CT_CfRule::set_text_attr(const XSD::string_& _text_attr)
    {    
    m_has_text_attr = true;
    m_text_attr = _text_attr;
    }

    const XSD::string_& CT_CfRule::get_text_attr() const
    {    
    return m_text_attr;
    }

    bool CT_CfRule::has_timePeriod_attr() const
    {    
    return m_has_timePeriod_attr;
    }

    void CT_CfRule::set_timePeriod_attr(const ST_TimePeriod& _timePeriod_attr)
    {    
    m_has_timePeriod_attr = true;
    m_timePeriod_attr = new ST_TimePeriod(_timePeriod_attr);
    }

    const ST_TimePeriod& CT_CfRule::get_timePeriod_attr() const
    {    
    if (m_timePeriod_attr)
    {
        return *m_timePeriod_attr;
    }
    return ST_TimePeriod::default_instance();
    }

    bool CT_CfRule::has_rank_attr() const
    {    
    return m_has_rank_attr;
    }

    void CT_CfRule::set_rank_attr(const XSD::unsignedInt_& _rank_attr)
    {    
    m_has_rank_attr = true;
    m_rank_attr = _rank_attr;
    }

    const XSD::unsignedInt_& CT_CfRule::get_rank_attr() const
    {    
    return m_rank_attr;
    }

    bool CT_CfRule::has_stdDev_attr() const
    {    
    return m_has_stdDev_attr;
    }

    void CT_CfRule::set_stdDev_attr(const XSD::int_& _stdDev_attr)
    {    
    m_has_stdDev_attr = true;
    m_stdDev_attr = _stdDev_attr;
    }

    const XSD::int_& CT_CfRule::get_stdDev_attr() const
    {    
    return m_stdDev_attr;
    }

    bool CT_CfRule::has_equalAverage_attr() const
    {    
    return m_has_equalAverage_attr;
    }

    void CT_CfRule::set_equalAverage_attr(const XSD::boolean_& _equalAverage_attr)
    {    
    m_has_equalAverage_attr = true;
    m_equalAverage_attr = _equalAverage_attr;
    }

    const XSD::boolean_& CT_CfRule::get_equalAverage_attr() const
    {    
    return m_equalAverage_attr;
    }


    // CT_CfRule::ChildGroup_1
    CT_CfRule::ChildGroup_1::ChildGroup_1()
    :m_has_formula(false),
    m_formula(NULL),
    m_has_colorScale(false),
    m_colorScale(NULL),
    m_has_dataBar(false),
    m_dataBar(NULL),
    m_has_iconSet(false),
    m_iconSet(NULL),
    m_has_extLst(false),
    m_extLst(NULL)
    {
    }
    bool CT_CfRule::ChildGroup_1::has_formula() const
    {    
    return m_has_formula;
    }

    ST_Formula* CT_CfRule::ChildGroup_1::mutable_formula()
    {    
    
    m_has_colorScale = false;
    
    if (m_colorScale)
    {
        delete m_colorScale;
        m_colorScale = NULL;
    }
    ;
    
    m_has_dataBar = false;
    
    if (m_dataBar)
    {
        delete m_dataBar;
        m_dataBar = NULL;
    }
    ;
    
    m_has_iconSet = false;
    
    if (m_iconSet)
    {
        delete m_iconSet;
        m_iconSet = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_formula = true;
    if (!m_formula)
    {
        m_formula = new ST_Formula();
    }
    return m_formula;
    }

    const ST_Formula& CT_CfRule::ChildGroup_1::get_formula() const
    {    
    if (m_formula)
    {
        return *m_formula;
    }
    return ST_Formula::default_instance();
    }

    bool CT_CfRule::ChildGroup_1::has_colorScale() const
    {    
    return m_has_colorScale;
    }

    CT_ColorScale* CT_CfRule::ChildGroup_1::mutable_colorScale()
    {    
    
    m_has_formula = false;
    
    if (m_formula)
    {
        delete m_formula;
        m_formula = NULL;
    }
    ;
    
    m_has_dataBar = false;
    
    if (m_dataBar)
    {
        delete m_dataBar;
        m_dataBar = NULL;
    }
    ;
    
    m_has_iconSet = false;
    
    if (m_iconSet)
    {
        delete m_iconSet;
        m_iconSet = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_colorScale = true;
    if (!m_colorScale)
    {
        m_colorScale = new CT_ColorScale();
    }
    return m_colorScale;
    }

    const CT_ColorScale& CT_CfRule::ChildGroup_1::get_colorScale() const
    {    
    if (m_colorScale)
    {
        return *m_colorScale;
    }
    return CT_ColorScale::default_instance();
    }

    bool CT_CfRule::ChildGroup_1::has_dataBar() const
    {    
    return m_has_dataBar;
    }

    CT_DataBar* CT_CfRule::ChildGroup_1::mutable_dataBar()
    {    
    
    m_has_formula = false;
    
    if (m_formula)
    {
        delete m_formula;
        m_formula = NULL;
    }
    ;
    
    m_has_colorScale = false;
    
    if (m_colorScale)
    {
        delete m_colorScale;
        m_colorScale = NULL;
    }
    ;
    
    m_has_iconSet = false;
    
    if (m_iconSet)
    {
        delete m_iconSet;
        m_iconSet = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_dataBar = true;
    if (!m_dataBar)
    {
        m_dataBar = new CT_DataBar();
    }
    return m_dataBar;
    }

    const CT_DataBar& CT_CfRule::ChildGroup_1::get_dataBar() const
    {    
    if (m_dataBar)
    {
        return *m_dataBar;
    }
    return CT_DataBar::default_instance();
    }

    bool CT_CfRule::ChildGroup_1::has_iconSet() const
    {    
    return m_has_iconSet;
    }

    CT_IconSet* CT_CfRule::ChildGroup_1::mutable_iconSet()
    {    
    
    m_has_formula = false;
    
    if (m_formula)
    {
        delete m_formula;
        m_formula = NULL;
    }
    ;
    
    m_has_colorScale = false;
    
    if (m_colorScale)
    {
        delete m_colorScale;
        m_colorScale = NULL;
    }
    ;
    
    m_has_dataBar = false;
    
    if (m_dataBar)
    {
        delete m_dataBar;
        m_dataBar = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_iconSet = true;
    if (!m_iconSet)
    {
        m_iconSet = new CT_IconSet();
    }
    return m_iconSet;
    }

    const CT_IconSet& CT_CfRule::ChildGroup_1::get_iconSet() const
    {    
    if (m_iconSet)
    {
        return *m_iconSet;
    }
    return CT_IconSet::default_instance();
    }

    bool CT_CfRule::ChildGroup_1::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* CT_CfRule::ChildGroup_1::mutable_extLst()
    {    
    
    m_has_formula = false;
    
    if (m_formula)
    {
        delete m_formula;
        m_formula = NULL;
    }
    ;
    
    m_has_colorScale = false;
    
    if (m_colorScale)
    {
        delete m_colorScale;
        m_colorScale = NULL;
    }
    ;
    
    m_has_dataBar = false;
    
    if (m_dataBar)
    {
        delete m_dataBar;
        m_dataBar = NULL;
    }
    ;
    
    m_has_iconSet = false;
    
    if (m_iconSet)
    {
        delete m_iconSet;
        m_iconSet = NULL;
    }
    ;
    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& CT_CfRule::ChildGroup_1::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

CT_CfRule* CT_CfRule::default_instance_ = NULL;

    // CT_Hyperlinks
    CT_Hyperlinks::CT_Hyperlinks()

    {
    }
    CT_Hyperlinks::~CT_Hyperlinks()
{
    clear();    }
    CT_Hyperlink* CT_Hyperlinks::add_hyperlink()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Hyperlink* pNewChild = pChildGroup->mutable_hyperlink();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_Hyperlinks::clear()
    {    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_Hyperlinks::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_hyperlink())
            {
                (*iter)->get_hyperlink().toXmlElem("main:hyperlink", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_Hyperlinks& CT_Hyperlinks::default_instance()
    {    
    if (!CT_Hyperlinks::default_instance_)
    {
        CT_Hyperlinks::default_instance_ = new CT_Hyperlinks();
    }
    return *CT_Hyperlinks::default_instance_;
    }


    // CT_Hyperlinks::ChildGroup_1
    CT_Hyperlinks::ChildGroup_1::ChildGroup_1()
    :m_has_hyperlink(false),
    m_hyperlink(NULL)
    {
    }
    bool CT_Hyperlinks::ChildGroup_1::has_hyperlink() const
    {    
    return m_has_hyperlink;
    }

    CT_Hyperlink* CT_Hyperlinks::ChildGroup_1::mutable_hyperlink()
    {    
    
    m_has_hyperlink = true;
    if (!m_hyperlink)
    {
        m_hyperlink = new CT_Hyperlink();
    }
    return m_hyperlink;
    }

    const CT_Hyperlink& CT_Hyperlinks::ChildGroup_1::get_hyperlink() const
    {    
    if (m_hyperlink)
    {
        return *m_hyperlink;
    }
    return CT_Hyperlink::default_instance();
    }

CT_Hyperlinks* CT_Hyperlinks::default_instance_ = NULL;

    // CT_Hyperlink
    CT_Hyperlink::CT_Hyperlink()
    :m_has_ref_attr(false),
    m_ref_attr(NULL),
    m_has_r_id_attr(false),
    m_r_id_attr(NULL),
    m_has_location_attr(false),
    m_location_attr(NULL),
    m_has_tooltip_attr(false),
    m_tooltip_attr(NULL),
    m_has_display_attr(false),
    m_display_attr(NULL)
    {
    }
    CT_Hyperlink::~CT_Hyperlink()
{
    clear();    }
    void CT_Hyperlink::clear()
    {    
    m_has_ref_attr = false;
    
    if (m_ref_attr)
    {
        delete m_ref_attr;
        m_ref_attr = NULL;
    }
    
    
    m_has_r_id_attr = false;
    
    if (m_r_id_attr)
    {
        delete m_r_id_attr;
        m_r_id_attr = NULL;
    }
    
    
    m_has_location_attr = false;
    
    if (m_location_attr)
    {
        delete m_location_attr;
        m_location_attr = NULL;
    }
    
    
    m_has_tooltip_attr = false;
    
    if (m_tooltip_attr)
    {
        delete m_tooltip_attr;
        m_tooltip_attr = NULL;
    }
    
    
    m_has_display_attr = false;
    
    if (m_display_attr)
    {
        delete m_display_attr;
        m_display_attr = NULL;
    }
    
    }

    void CT_Hyperlink::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_ref_attr)
    {
        m_ref_attr->toXmlAttr("ref", _outStream);
    }
    
    
    if (m_has_r_id_attr)
    {
        m_r_id_attr->toXmlAttr("r:id", _outStream);
    }
    
    
    if (m_has_location_attr)
    {
        m_location_attr->toXmlAttr("location", _outStream);
    }
    
    
    if (m_has_tooltip_attr)
    {
        m_tooltip_attr->toXmlAttr("tooltip", _outStream);
    }
    
    
    if (m_has_display_attr)
    {
        m_display_attr->toXmlAttr("display", _outStream);
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_Hyperlink& CT_Hyperlink::default_instance()
    {    
    if (!CT_Hyperlink::default_instance_)
    {
        CT_Hyperlink::default_instance_ = new CT_Hyperlink();
    }
    return *CT_Hyperlink::default_instance_;
    }

    bool CT_Hyperlink::has_ref_attr() const
    {    
    return m_has_ref_attr;
    }

    void CT_Hyperlink::set_ref_attr(const ST_Ref& _ref_attr)
    {    
    m_has_ref_attr = true;
    m_ref_attr = new ST_Ref(_ref_attr);
    }

    const ST_Ref& CT_Hyperlink::get_ref_attr() const
    {    
    if (m_ref_attr)
    {
        return *m_ref_attr;
    }
    return ST_Ref::default_instance();
    }

    bool CT_Hyperlink::has_r_id_attr() const
    {    
    return m_has_r_id_attr;
    }

    void CT_Hyperlink::set_r_id_attr(const ns_r::ST_RelationshipId& _r_id_attr)
    {    
    m_has_r_id_attr = true;
    m_r_id_attr = new ns_r::ST_RelationshipId(_r_id_attr);
    }

    const ns_r::ST_RelationshipId& CT_Hyperlink::get_r_id_attr() const
    {    
    if (m_r_id_attr)
    {
        return *m_r_id_attr;
    }
    return ns_r::ST_RelationshipId::default_instance();
    }

    bool CT_Hyperlink::has_location_attr() const
    {    
    return m_has_location_attr;
    }

    void CT_Hyperlink::set_location_attr(const ns_s::ST_Xstring& _location_attr)
    {    
    m_has_location_attr = true;
    m_location_attr = new ns_s::ST_Xstring(_location_attr);
    }

    const ns_s::ST_Xstring& CT_Hyperlink::get_location_attr() const
    {    
    if (m_location_attr)
    {
        return *m_location_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_Hyperlink::has_tooltip_attr() const
    {    
    return m_has_tooltip_attr;
    }

    void CT_Hyperlink::set_tooltip_attr(const ns_s::ST_Xstring& _tooltip_attr)
    {    
    m_has_tooltip_attr = true;
    m_tooltip_attr = new ns_s::ST_Xstring(_tooltip_attr);
    }

    const ns_s::ST_Xstring& CT_Hyperlink::get_tooltip_attr() const
    {    
    if (m_tooltip_attr)
    {
        return *m_tooltip_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_Hyperlink::has_display_attr() const
    {    
    return m_has_display_attr;
    }

    void CT_Hyperlink::set_display_attr(const ns_s::ST_Xstring& _display_attr)
    {    
    m_has_display_attr = true;
    m_display_attr = new ns_s::ST_Xstring(_display_attr);
    }

    const ns_s::ST_Xstring& CT_Hyperlink::get_display_attr() const
    {    
    if (m_display_attr)
    {
        return *m_display_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

CT_Hyperlink* CT_Hyperlink::default_instance_ = NULL;

    // CT_CellFormula
    CT_CellFormula::CT_CellFormula()
    :m_has_t_attr(false),
    m_t_attr(NULL),
    m_has_aca_attr(false),
    m_aca_attr(false),
    m_has_ref_attr(false),
    m_ref_attr(NULL),
    m_has_dt2D_attr(false),
    m_dt2D_attr(false),
    m_has_dtr_attr(false),
    m_dtr_attr(false),
    m_has_del1_attr(false),
    m_del1_attr(false),
    m_has_del2_attr(false),
    m_del2_attr(false),
    m_has_r1_attr(false),
    m_r1_attr(NULL),
    m_has_r2_attr(false),
    m_r2_attr(NULL),
    m_has_ca_attr(false),
    m_ca_attr(false),
    m_has_si_attr(false),
    m_si_attr(0),
    m_has_bx_attr(false),
    m_bx_attr(false)
    {
    }
    CT_CellFormula::~CT_CellFormula()
{
    clear();    }
    void CT_CellFormula::clear()
    {    
    m_has_t_attr = false;
    
    if (m_t_attr)
    {
        delete m_t_attr;
        m_t_attr = NULL;
    }
    
    
    m_has_aca_attr = false;
    m_aca_attr = false;
    
    m_has_ref_attr = false;
    
    if (m_ref_attr)
    {
        delete m_ref_attr;
        m_ref_attr = NULL;
    }
    
    
    m_has_dt2D_attr = false;
    m_dt2D_attr = false;
    
    m_has_dtr_attr = false;
    m_dtr_attr = false;
    
    m_has_del1_attr = false;
    m_del1_attr = false;
    
    m_has_del2_attr = false;
    m_del2_attr = false;
    
    m_has_r1_attr = false;
    
    if (m_r1_attr)
    {
        delete m_r1_attr;
        m_r1_attr = NULL;
    }
    
    
    m_has_r2_attr = false;
    
    if (m_r2_attr)
    {
        delete m_r2_attr;
        m_r2_attr = NULL;
    }
    
    
    m_has_ca_attr = false;
    m_ca_attr = false;
    
    m_has_si_attr = false;
    m_si_attr = 0;
    
    m_has_bx_attr = false;
    m_bx_attr = false;
    }

    void CT_CellFormula::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_t_attr)
    {
        m_t_attr->toXmlAttr("t", _outStream);
    }
    
    
    if (m_has_aca_attr)
    {
        _outStream << " " << "aca" << "=\"" << XSD::XMLBooleanStr(m_aca_attr) << "\"";
    }
    
    
    if (m_has_ref_attr)
    {
        m_ref_attr->toXmlAttr("ref", _outStream);
    }
    
    
    if (m_has_dt2D_attr)
    {
        _outStream << " " << "dt2D" << "=\"" << XSD::XMLBooleanStr(m_dt2D_attr) << "\"";
    }
    
    
    if (m_has_dtr_attr)
    {
        _outStream << " " << "dtr" << "=\"" << XSD::XMLBooleanStr(m_dtr_attr) << "\"";
    }
    
    
    if (m_has_del1_attr)
    {
        _outStream << " " << "del1" << "=\"" << XSD::XMLBooleanStr(m_del1_attr) << "\"";
    }
    
    
    if (m_has_del2_attr)
    {
        _outStream << " " << "del2" << "=\"" << XSD::XMLBooleanStr(m_del2_attr) << "\"";
    }
    
    
    if (m_has_r1_attr)
    {
        m_r1_attr->toXmlAttr("r1", _outStream);
    }
    
    
    if (m_has_r2_attr)
    {
        m_r2_attr->toXmlAttr("r2", _outStream);
    }
    
    
    if (m_has_ca_attr)
    {
        _outStream << " " << "ca" << "=\"" << XSD::XMLBooleanStr(m_ca_attr) << "\"";
    }
    
    
    if (m_has_si_attr)
    {
        _outStream << " " << "si" << "=\"" << m_si_attr << "\"";
    }
    
    
    if (m_has_bx_attr)
    {
        _outStream << " " << "bx" << "=\"" << XSD::XMLBooleanStr(m_bx_attr) << "\"";
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_CellFormula& CT_CellFormula::default_instance()
    {    
    if (!CT_CellFormula::default_instance_)
    {
        CT_CellFormula::default_instance_ = new CT_CellFormula();
    }
    return *CT_CellFormula::default_instance_;
    }

    bool CT_CellFormula::has_t_attr() const
    {    
    return m_has_t_attr;
    }

    void CT_CellFormula::set_t_attr(const ST_CellFormulaType& _t_attr)
    {    
    m_has_t_attr = true;
    m_t_attr = new ST_CellFormulaType(_t_attr);
    }

    const ST_CellFormulaType& CT_CellFormula::get_t_attr() const
    {    
    if (m_t_attr)
    {
        return *m_t_attr;
    }
    return ST_CellFormulaType::default_instance();
    }

    bool CT_CellFormula::has_aca_attr() const
    {    
    return m_has_aca_attr;
    }

    void CT_CellFormula::set_aca_attr(const XSD::boolean_& _aca_attr)
    {    
    m_has_aca_attr = true;
    m_aca_attr = _aca_attr;
    }

    const XSD::boolean_& CT_CellFormula::get_aca_attr() const
    {    
    return m_aca_attr;
    }

    bool CT_CellFormula::has_ref_attr() const
    {    
    return m_has_ref_attr;
    }

    void CT_CellFormula::set_ref_attr(const ST_Ref& _ref_attr)
    {    
    m_has_ref_attr = true;
    m_ref_attr = new ST_Ref(_ref_attr);
    }

    const ST_Ref& CT_CellFormula::get_ref_attr() const
    {    
    if (m_ref_attr)
    {
        return *m_ref_attr;
    }
    return ST_Ref::default_instance();
    }

    bool CT_CellFormula::has_dt2D_attr() const
    {    
    return m_has_dt2D_attr;
    }

    void CT_CellFormula::set_dt2D_attr(const XSD::boolean_& _dt2D_attr)
    {    
    m_has_dt2D_attr = true;
    m_dt2D_attr = _dt2D_attr;
    }

    const XSD::boolean_& CT_CellFormula::get_dt2D_attr() const
    {    
    return m_dt2D_attr;
    }

    bool CT_CellFormula::has_dtr_attr() const
    {    
    return m_has_dtr_attr;
    }

    void CT_CellFormula::set_dtr_attr(const XSD::boolean_& _dtr_attr)
    {    
    m_has_dtr_attr = true;
    m_dtr_attr = _dtr_attr;
    }

    const XSD::boolean_& CT_CellFormula::get_dtr_attr() const
    {    
    return m_dtr_attr;
    }

    bool CT_CellFormula::has_del1_attr() const
    {    
    return m_has_del1_attr;
    }

    void CT_CellFormula::set_del1_attr(const XSD::boolean_& _del1_attr)
    {    
    m_has_del1_attr = true;
    m_del1_attr = _del1_attr;
    }

    const XSD::boolean_& CT_CellFormula::get_del1_attr() const
    {    
    return m_del1_attr;
    }

    bool CT_CellFormula::has_del2_attr() const
    {    
    return m_has_del2_attr;
    }

    void CT_CellFormula::set_del2_attr(const XSD::boolean_& _del2_attr)
    {    
    m_has_del2_attr = true;
    m_del2_attr = _del2_attr;
    }

    const XSD::boolean_& CT_CellFormula::get_del2_attr() const
    {    
    return m_del2_attr;
    }

    bool CT_CellFormula::has_r1_attr() const
    {    
    return m_has_r1_attr;
    }

    void CT_CellFormula::set_r1_attr(const ST_CellRef& _r1_attr)
    {    
    m_has_r1_attr = true;
    m_r1_attr = new ST_CellRef(_r1_attr);
    }

    const ST_CellRef& CT_CellFormula::get_r1_attr() const
    {    
    if (m_r1_attr)
    {
        return *m_r1_attr;
    }
    return ST_CellRef::default_instance();
    }

    bool CT_CellFormula::has_r2_attr() const
    {    
    return m_has_r2_attr;
    }

    void CT_CellFormula::set_r2_attr(const ST_CellRef& _r2_attr)
    {    
    m_has_r2_attr = true;
    m_r2_attr = new ST_CellRef(_r2_attr);
    }

    const ST_CellRef& CT_CellFormula::get_r2_attr() const
    {    
    if (m_r2_attr)
    {
        return *m_r2_attr;
    }
    return ST_CellRef::default_instance();
    }

    bool CT_CellFormula::has_ca_attr() const
    {    
    return m_has_ca_attr;
    }

    void CT_CellFormula::set_ca_attr(const XSD::boolean_& _ca_attr)
    {    
    m_has_ca_attr = true;
    m_ca_attr = _ca_attr;
    }

    const XSD::boolean_& CT_CellFormula::get_ca_attr() const
    {    
    return m_ca_attr;
    }

    bool CT_CellFormula::has_si_attr() const
    {    
    return m_has_si_attr;
    }

    void CT_CellFormula::set_si_attr(const XSD::unsignedInt_& _si_attr)
    {    
    m_has_si_attr = true;
    m_si_attr = _si_attr;
    }

    const XSD::unsignedInt_& CT_CellFormula::get_si_attr() const
    {    
    return m_si_attr;
    }

    bool CT_CellFormula::has_bx_attr() const
    {    
    return m_has_bx_attr;
    }

    void CT_CellFormula::set_bx_attr(const XSD::boolean_& _bx_attr)
    {    
    m_has_bx_attr = true;
    m_bx_attr = _bx_attr;
    }

    const XSD::boolean_& CT_CellFormula::get_bx_attr() const
    {    
    return m_bx_attr;
    }

CT_CellFormula* CT_CellFormula::default_instance_ = NULL;

    // CT_ColorScale
    CT_ColorScale::CT_ColorScale()

    {
    }
    CT_ColorScale::~CT_ColorScale()
{
    clear();    }
    CT_Cfvo* CT_ColorScale::add_cfvo()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Cfvo* pNewChild = pChildGroup->mutable_cfvo();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_Color* CT_ColorScale::add_color()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Color* pNewChild = pChildGroup->mutable_color();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_ColorScale::clear()
    {    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_ColorScale::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_cfvo())
            {
                (*iter)->get_cfvo().toXmlElem("main:cfvo", "", _outStream);
            }
            else if ((*iter)->has_color())
            {
                (*iter)->get_color().toXmlElem("main:color", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_ColorScale& CT_ColorScale::default_instance()
    {    
    if (!CT_ColorScale::default_instance_)
    {
        CT_ColorScale::default_instance_ = new CT_ColorScale();
    }
    return *CT_ColorScale::default_instance_;
    }


    // CT_ColorScale::ChildGroup_1
    CT_ColorScale::ChildGroup_1::ChildGroup_1()
    :m_has_cfvo(false),
    m_cfvo(NULL),
    m_has_color(false),
    m_color(NULL)
    {
    }
    bool CT_ColorScale::ChildGroup_1::has_cfvo() const
    {    
    return m_has_cfvo;
    }

    CT_Cfvo* CT_ColorScale::ChildGroup_1::mutable_cfvo()
    {    
    
    m_has_color = false;
    
    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;
    
    m_has_cfvo = true;
    if (!m_cfvo)
    {
        m_cfvo = new CT_Cfvo();
    }
    return m_cfvo;
    }

    const CT_Cfvo& CT_ColorScale::ChildGroup_1::get_cfvo() const
    {    
    if (m_cfvo)
    {
        return *m_cfvo;
    }
    return CT_Cfvo::default_instance();
    }

    bool CT_ColorScale::ChildGroup_1::has_color() const
    {    
    return m_has_color;
    }

    CT_Color* CT_ColorScale::ChildGroup_1::mutable_color()
    {    
    
    m_has_cfvo = false;
    
    if (m_cfvo)
    {
        delete m_cfvo;
        m_cfvo = NULL;
    }
    ;
    
    m_has_color = true;
    if (!m_color)
    {
        m_color = new CT_Color();
    }
    return m_color;
    }

    const CT_Color& CT_ColorScale::ChildGroup_1::get_color() const
    {    
    if (m_color)
    {
        return *m_color;
    }
    return CT_Color::default_instance();
    }

CT_ColorScale* CT_ColorScale::default_instance_ = NULL;

    // CT_DataBar
    CT_DataBar::CT_DataBar()
    :m_has_minLength_attr(false),
    m_minLength_attr(0),
    m_has_maxLength_attr(false),
    m_maxLength_attr(0),
    m_has_showValue_attr(false),
    m_showValue_attr(false)
    {
    }
    CT_DataBar::~CT_DataBar()
{
    clear();    }
    CT_Cfvo* CT_DataBar::add_cfvo()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Cfvo* pNewChild = pChildGroup->mutable_cfvo();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_Color* CT_DataBar::add_color()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Color* pNewChild = pChildGroup->mutable_color();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_DataBar::clear()
    {    
    m_has_minLength_attr = false;
    m_minLength_attr = 0;
    
    m_has_maxLength_attr = false;
    m_maxLength_attr = 0;
    
    m_has_showValue_attr = false;
    m_showValue_attr = false;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_DataBar::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_minLength_attr)
    {
        _outStream << " " << "minLength" << "=\"" << m_minLength_attr << "\"";
    }
    
    
    if (m_has_maxLength_attr)
    {
        _outStream << " " << "maxLength" << "=\"" << m_maxLength_attr << "\"";
    }
    
    
    if (m_has_showValue_attr)
    {
        _outStream << " " << "showValue" << "=\"" << XSD::XMLBooleanStr(m_showValue_attr) << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_cfvo())
            {
                (*iter)->get_cfvo().toXmlElem("main:cfvo", "", _outStream);
            }
            else if ((*iter)->has_color())
            {
                (*iter)->get_color().toXmlElem("main:color", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_DataBar& CT_DataBar::default_instance()
    {    
    if (!CT_DataBar::default_instance_)
    {
        CT_DataBar::default_instance_ = new CT_DataBar();
    }
    return *CT_DataBar::default_instance_;
    }

    bool CT_DataBar::has_minLength_attr() const
    {    
    return m_has_minLength_attr;
    }

    void CT_DataBar::set_minLength_attr(const XSD::unsignedInt_& _minLength_attr)
    {    
    m_has_minLength_attr = true;
    m_minLength_attr = _minLength_attr;
    }

    const XSD::unsignedInt_& CT_DataBar::get_minLength_attr() const
    {    
    return m_minLength_attr;
    }

    bool CT_DataBar::has_maxLength_attr() const
    {    
    return m_has_maxLength_attr;
    }

    void CT_DataBar::set_maxLength_attr(const XSD::unsignedInt_& _maxLength_attr)
    {    
    m_has_maxLength_attr = true;
    m_maxLength_attr = _maxLength_attr;
    }

    const XSD::unsignedInt_& CT_DataBar::get_maxLength_attr() const
    {    
    return m_maxLength_attr;
    }

    bool CT_DataBar::has_showValue_attr() const
    {    
    return m_has_showValue_attr;
    }

    void CT_DataBar::set_showValue_attr(const XSD::boolean_& _showValue_attr)
    {    
    m_has_showValue_attr = true;
    m_showValue_attr = _showValue_attr;
    }

    const XSD::boolean_& CT_DataBar::get_showValue_attr() const
    {    
    return m_showValue_attr;
    }


    // CT_DataBar::ChildGroup_1
    CT_DataBar::ChildGroup_1::ChildGroup_1()
    :m_has_cfvo(false),
    m_cfvo(NULL),
    m_has_color(false),
    m_color(NULL)
    {
    }
    bool CT_DataBar::ChildGroup_1::has_cfvo() const
    {    
    return m_has_cfvo;
    }

    CT_Cfvo* CT_DataBar::ChildGroup_1::mutable_cfvo()
    {    
    
    m_has_color = false;
    
    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;
    
    m_has_cfvo = true;
    if (!m_cfvo)
    {
        m_cfvo = new CT_Cfvo();
    }
    return m_cfvo;
    }

    const CT_Cfvo& CT_DataBar::ChildGroup_1::get_cfvo() const
    {    
    if (m_cfvo)
    {
        return *m_cfvo;
    }
    return CT_Cfvo::default_instance();
    }

    bool CT_DataBar::ChildGroup_1::has_color() const
    {    
    return m_has_color;
    }

    CT_Color* CT_DataBar::ChildGroup_1::mutable_color()
    {    
    
    m_has_cfvo = false;
    
    if (m_cfvo)
    {
        delete m_cfvo;
        m_cfvo = NULL;
    }
    ;
    
    m_has_color = true;
    if (!m_color)
    {
        m_color = new CT_Color();
    }
    return m_color;
    }

    const CT_Color& CT_DataBar::ChildGroup_1::get_color() const
    {    
    if (m_color)
    {
        return *m_color;
    }
    return CT_Color::default_instance();
    }

CT_DataBar* CT_DataBar::default_instance_ = NULL;

    // CT_IconSet
    CT_IconSet::CT_IconSet()
    :m_has_iconSet_attr(false),
    m_iconSet_attr(NULL),
    m_has_showValue_attr(false),
    m_showValue_attr(false),
    m_has_percent_attr(false),
    m_percent_attr(false),
    m_has_reverse_attr(false),
    m_reverse_attr(false)
    {
    }
    CT_IconSet::~CT_IconSet()
{
    clear();    }
    CT_Cfvo* CT_IconSet::add_cfvo()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Cfvo* pNewChild = pChildGroup->mutable_cfvo();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_IconSet::clear()
    {    
    m_has_iconSet_attr = false;
    
    if (m_iconSet_attr)
    {
        delete m_iconSet_attr;
        m_iconSet_attr = NULL;
    }
    
    
    m_has_showValue_attr = false;
    m_showValue_attr = false;
    
    m_has_percent_attr = false;
    m_percent_attr = false;
    
    m_has_reverse_attr = false;
    m_reverse_attr = false;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_IconSet::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_iconSet_attr)
    {
        m_iconSet_attr->toXmlAttr("iconSet", _outStream);
    }
    
    
    if (m_has_showValue_attr)
    {
        _outStream << " " << "showValue" << "=\"" << XSD::XMLBooleanStr(m_showValue_attr) << "\"";
    }
    
    
    if (m_has_percent_attr)
    {
        _outStream << " " << "percent" << "=\"" << XSD::XMLBooleanStr(m_percent_attr) << "\"";
    }
    
    
    if (m_has_reverse_attr)
    {
        _outStream << " " << "reverse" << "=\"" << XSD::XMLBooleanStr(m_reverse_attr) << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_cfvo())
            {
                (*iter)->get_cfvo().toXmlElem("main:cfvo", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_IconSet& CT_IconSet::default_instance()
    {    
    if (!CT_IconSet::default_instance_)
    {
        CT_IconSet::default_instance_ = new CT_IconSet();
    }
    return *CT_IconSet::default_instance_;
    }

    bool CT_IconSet::has_iconSet_attr() const
    {    
    return m_has_iconSet_attr;
    }

    void CT_IconSet::set_iconSet_attr(const ST_IconSetType& _iconSet_attr)
    {    
    m_has_iconSet_attr = true;
    m_iconSet_attr = new ST_IconSetType(_iconSet_attr);
    }

    const ST_IconSetType& CT_IconSet::get_iconSet_attr() const
    {    
    if (m_iconSet_attr)
    {
        return *m_iconSet_attr;
    }
    return ST_IconSetType::default_instance();
    }

    bool CT_IconSet::has_showValue_attr() const
    {    
    return m_has_showValue_attr;
    }

    void CT_IconSet::set_showValue_attr(const XSD::boolean_& _showValue_attr)
    {    
    m_has_showValue_attr = true;
    m_showValue_attr = _showValue_attr;
    }

    const XSD::boolean_& CT_IconSet::get_showValue_attr() const
    {    
    return m_showValue_attr;
    }

    bool CT_IconSet::has_percent_attr() const
    {    
    return m_has_percent_attr;
    }

    void CT_IconSet::set_percent_attr(const XSD::boolean_& _percent_attr)
    {    
    m_has_percent_attr = true;
    m_percent_attr = _percent_attr;
    }

    const XSD::boolean_& CT_IconSet::get_percent_attr() const
    {    
    return m_percent_attr;
    }

    bool CT_IconSet::has_reverse_attr() const
    {    
    return m_has_reverse_attr;
    }

    void CT_IconSet::set_reverse_attr(const XSD::boolean_& _reverse_attr)
    {    
    m_has_reverse_attr = true;
    m_reverse_attr = _reverse_attr;
    }

    const XSD::boolean_& CT_IconSet::get_reverse_attr() const
    {    
    return m_reverse_attr;
    }


    // CT_IconSet::ChildGroup_1
    CT_IconSet::ChildGroup_1::ChildGroup_1()
    :m_has_cfvo(false),
    m_cfvo(NULL)
    {
    }
    bool CT_IconSet::ChildGroup_1::has_cfvo() const
    {    
    return m_has_cfvo;
    }

    CT_Cfvo* CT_IconSet::ChildGroup_1::mutable_cfvo()
    {    
    
    m_has_cfvo = true;
    if (!m_cfvo)
    {
        m_cfvo = new CT_Cfvo();
    }
    return m_cfvo;
    }

    const CT_Cfvo& CT_IconSet::ChildGroup_1::get_cfvo() const
    {    
    if (m_cfvo)
    {
        return *m_cfvo;
    }
    return CT_Cfvo::default_instance();
    }

CT_IconSet* CT_IconSet::default_instance_ = NULL;

    // CT_Cfvo
    CT_Cfvo::CT_Cfvo()
    :m_has_extLst(false),
    m_extLst(NULL),
    m_has_type_attr(false),
    m_type_attr(NULL),
    m_has_val_attr(false),
    m_val_attr(NULL),
    m_has_gte_attr(false),
    m_gte_attr(false)
    {
    }
    CT_Cfvo::~CT_Cfvo()
{
    clear();    }
    bool CT_Cfvo::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* CT_Cfvo::mutable_extLst()
    {    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& CT_Cfvo::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

    void CT_Cfvo::clear()
    {    
    m_has_type_attr = false;
    
    if (m_type_attr)
    {
        delete m_type_attr;
        m_type_attr = NULL;
    }
    
    
    m_has_val_attr = false;
    
    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }
    
    
    m_has_gte_attr = false;
    m_gte_attr = false;
    }

    void CT_Cfvo::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_type_attr)
    {
        m_type_attr->toXmlAttr("type", _outStream);
    }
    
    
    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("val", _outStream);
    }
    
    
    if (m_has_gte_attr)
    {
        _outStream << " " << "gte" << "=\"" << XSD::XMLBooleanStr(m_gte_attr) << "\"";
    }
    
            _outStream << ">";
            
    if (m_has_extLst)
    {
        m_extLst->toXmlElem("main:extLst", "", _outStream);;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_Cfvo& CT_Cfvo::default_instance()
    {    
    if (!CT_Cfvo::default_instance_)
    {
        CT_Cfvo::default_instance_ = new CT_Cfvo();
    }
    return *CT_Cfvo::default_instance_;
    }

    bool CT_Cfvo::has_type_attr() const
    {    
    return m_has_type_attr;
    }

    void CT_Cfvo::set_type_attr(const ST_CfvoType& _type_attr)
    {    
    m_has_type_attr = true;
    m_type_attr = new ST_CfvoType(_type_attr);
    }

    const ST_CfvoType& CT_Cfvo::get_type_attr() const
    {    
    if (m_type_attr)
    {
        return *m_type_attr;
    }
    return ST_CfvoType::default_instance();
    }

    bool CT_Cfvo::has_val_attr() const
    {    
    return m_has_val_attr;
    }

    void CT_Cfvo::set_val_attr(const ns_s::ST_Xstring& _val_attr)
    {    
    m_has_val_attr = true;
    m_val_attr = new ns_s::ST_Xstring(_val_attr);
    }

    const ns_s::ST_Xstring& CT_Cfvo::get_val_attr() const
    {    
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_Cfvo::has_gte_attr() const
    {    
    return m_has_gte_attr;
    }

    void CT_Cfvo::set_gte_attr(const XSD::boolean_& _gte_attr)
    {    
    m_has_gte_attr = true;
    m_gte_attr = _gte_attr;
    }

    const XSD::boolean_& CT_Cfvo::get_gte_attr() const
    {    
    return m_gte_attr;
    }

CT_Cfvo* CT_Cfvo::default_instance_ = NULL;

    // CT_PageMargins
    CT_PageMargins::CT_PageMargins()
    :m_has_left_attr(false),
    m_left_attr(0),
    m_has_right_attr(false),
    m_right_attr(0),
    m_has_top_attr(false),
    m_top_attr(0),
    m_has_bottom_attr(false),
    m_bottom_attr(0),
    m_has_header_attr(false),
    m_header_attr(0),
    m_has_footer_attr(false),
    m_footer_attr(0)
    {
    }
    CT_PageMargins::~CT_PageMargins()
{
    clear();    }
    void CT_PageMargins::clear()
    {    
    m_has_left_attr = false;
    m_left_attr = 0;
    
    m_has_right_attr = false;
    m_right_attr = 0;
    
    m_has_top_attr = false;
    m_top_attr = 0;
    
    m_has_bottom_attr = false;
    m_bottom_attr = 0;
    
    m_has_header_attr = false;
    m_header_attr = 0;
    
    m_has_footer_attr = false;
    m_footer_attr = 0;
    }

    void CT_PageMargins::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_left_attr)
    {
        _outStream << " " << "left" << "=\"" << m_left_attr << "\"";
    }
    
    
    if (m_has_right_attr)
    {
        _outStream << " " << "right" << "=\"" << m_right_attr << "\"";
    }
    
    
    if (m_has_top_attr)
    {
        _outStream << " " << "top" << "=\"" << m_top_attr << "\"";
    }
    
    
    if (m_has_bottom_attr)
    {
        _outStream << " " << "bottom" << "=\"" << m_bottom_attr << "\"";
    }
    
    
    if (m_has_header_attr)
    {
        _outStream << " " << "header" << "=\"" << m_header_attr << "\"";
    }
    
    
    if (m_has_footer_attr)
    {
        _outStream << " " << "footer" << "=\"" << m_footer_attr << "\"";
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_PageMargins& CT_PageMargins::default_instance()
    {    
    if (!CT_PageMargins::default_instance_)
    {
        CT_PageMargins::default_instance_ = new CT_PageMargins();
    }
    return *CT_PageMargins::default_instance_;
    }

    bool CT_PageMargins::has_left_attr() const
    {    
    return m_has_left_attr;
    }

    void CT_PageMargins::set_left_attr(const XSD::double_& _left_attr)
    {    
    m_has_left_attr = true;
    m_left_attr = _left_attr;
    }

    const XSD::double_& CT_PageMargins::get_left_attr() const
    {    
    return m_left_attr;
    }

    bool CT_PageMargins::has_right_attr() const
    {    
    return m_has_right_attr;
    }

    void CT_PageMargins::set_right_attr(const XSD::double_& _right_attr)
    {    
    m_has_right_attr = true;
    m_right_attr = _right_attr;
    }

    const XSD::double_& CT_PageMargins::get_right_attr() const
    {    
    return m_right_attr;
    }

    bool CT_PageMargins::has_top_attr() const
    {    
    return m_has_top_attr;
    }

    void CT_PageMargins::set_top_attr(const XSD::double_& _top_attr)
    {    
    m_has_top_attr = true;
    m_top_attr = _top_attr;
    }

    const XSD::double_& CT_PageMargins::get_top_attr() const
    {    
    return m_top_attr;
    }

    bool CT_PageMargins::has_bottom_attr() const
    {    
    return m_has_bottom_attr;
    }

    void CT_PageMargins::set_bottom_attr(const XSD::double_& _bottom_attr)
    {    
    m_has_bottom_attr = true;
    m_bottom_attr = _bottom_attr;
    }

    const XSD::double_& CT_PageMargins::get_bottom_attr() const
    {    
    return m_bottom_attr;
    }

    bool CT_PageMargins::has_header_attr() const
    {    
    return m_has_header_attr;
    }

    void CT_PageMargins::set_header_attr(const XSD::double_& _header_attr)
    {    
    m_has_header_attr = true;
    m_header_attr = _header_attr;
    }

    const XSD::double_& CT_PageMargins::get_header_attr() const
    {    
    return m_header_attr;
    }

    bool CT_PageMargins::has_footer_attr() const
    {    
    return m_has_footer_attr;
    }

    void CT_PageMargins::set_footer_attr(const XSD::double_& _footer_attr)
    {    
    m_has_footer_attr = true;
    m_footer_attr = _footer_attr;
    }

    const XSD::double_& CT_PageMargins::get_footer_attr() const
    {    
    return m_footer_attr;
    }

CT_PageMargins* CT_PageMargins::default_instance_ = NULL;

    // CT_PrintOptions
    CT_PrintOptions::CT_PrintOptions()
    :m_has_horizontalCentered_attr(false),
    m_horizontalCentered_attr(false),
    m_has_verticalCentered_attr(false),
    m_verticalCentered_attr(false),
    m_has_headings_attr(false),
    m_headings_attr(false),
    m_has_gridLines_attr(false),
    m_gridLines_attr(false),
    m_has_gridLinesSet_attr(false),
    m_gridLinesSet_attr(false)
    {
    }
    CT_PrintOptions::~CT_PrintOptions()
{
    clear();    }
    void CT_PrintOptions::clear()
    {    
    m_has_horizontalCentered_attr = false;
    m_horizontalCentered_attr = false;
    
    m_has_verticalCentered_attr = false;
    m_verticalCentered_attr = false;
    
    m_has_headings_attr = false;
    m_headings_attr = false;
    
    m_has_gridLines_attr = false;
    m_gridLines_attr = false;
    
    m_has_gridLinesSet_attr = false;
    m_gridLinesSet_attr = false;
    }

    void CT_PrintOptions::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_horizontalCentered_attr)
    {
        _outStream << " " << "horizontalCentered" << "=\"" << XSD::XMLBooleanStr(m_horizontalCentered_attr) << "\"";
    }
    
    
    if (m_has_verticalCentered_attr)
    {
        _outStream << " " << "verticalCentered" << "=\"" << XSD::XMLBooleanStr(m_verticalCentered_attr) << "\"";
    }
    
    
    if (m_has_headings_attr)
    {
        _outStream << " " << "headings" << "=\"" << XSD::XMLBooleanStr(m_headings_attr) << "\"";
    }
    
    
    if (m_has_gridLines_attr)
    {
        _outStream << " " << "gridLines" << "=\"" << XSD::XMLBooleanStr(m_gridLines_attr) << "\"";
    }
    
    
    if (m_has_gridLinesSet_attr)
    {
        _outStream << " " << "gridLinesSet" << "=\"" << XSD::XMLBooleanStr(m_gridLinesSet_attr) << "\"";
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_PrintOptions& CT_PrintOptions::default_instance()
    {    
    if (!CT_PrintOptions::default_instance_)
    {
        CT_PrintOptions::default_instance_ = new CT_PrintOptions();
    }
    return *CT_PrintOptions::default_instance_;
    }

    bool CT_PrintOptions::has_horizontalCentered_attr() const
    {    
    return m_has_horizontalCentered_attr;
    }

    void CT_PrintOptions::set_horizontalCentered_attr(const XSD::boolean_& _horizontalCentered_attr)
    {    
    m_has_horizontalCentered_attr = true;
    m_horizontalCentered_attr = _horizontalCentered_attr;
    }

    const XSD::boolean_& CT_PrintOptions::get_horizontalCentered_attr() const
    {    
    return m_horizontalCentered_attr;
    }

    bool CT_PrintOptions::has_verticalCentered_attr() const
    {    
    return m_has_verticalCentered_attr;
    }

    void CT_PrintOptions::set_verticalCentered_attr(const XSD::boolean_& _verticalCentered_attr)
    {    
    m_has_verticalCentered_attr = true;
    m_verticalCentered_attr = _verticalCentered_attr;
    }

    const XSD::boolean_& CT_PrintOptions::get_verticalCentered_attr() const
    {    
    return m_verticalCentered_attr;
    }

    bool CT_PrintOptions::has_headings_attr() const
    {    
    return m_has_headings_attr;
    }

    void CT_PrintOptions::set_headings_attr(const XSD::boolean_& _headings_attr)
    {    
    m_has_headings_attr = true;
    m_headings_attr = _headings_attr;
    }

    const XSD::boolean_& CT_PrintOptions::get_headings_attr() const
    {    
    return m_headings_attr;
    }

    bool CT_PrintOptions::has_gridLines_attr() const
    {    
    return m_has_gridLines_attr;
    }

    void CT_PrintOptions::set_gridLines_attr(const XSD::boolean_& _gridLines_attr)
    {    
    m_has_gridLines_attr = true;
    m_gridLines_attr = _gridLines_attr;
    }

    const XSD::boolean_& CT_PrintOptions::get_gridLines_attr() const
    {    
    return m_gridLines_attr;
    }

    bool CT_PrintOptions::has_gridLinesSet_attr() const
    {    
    return m_has_gridLinesSet_attr;
    }

    void CT_PrintOptions::set_gridLinesSet_attr(const XSD::boolean_& _gridLinesSet_attr)
    {    
    m_has_gridLinesSet_attr = true;
    m_gridLinesSet_attr = _gridLinesSet_attr;
    }

    const XSD::boolean_& CT_PrintOptions::get_gridLinesSet_attr() const
    {    
    return m_gridLinesSet_attr;
    }

CT_PrintOptions* CT_PrintOptions::default_instance_ = NULL;

    // CT_PageSetup
    CT_PageSetup::CT_PageSetup()
    :m_has_paperSize_attr(false),
    m_paperSize_attr(0),
    m_has_paperHeight_attr(false),
    m_paperHeight_attr(NULL),
    m_has_paperWidth_attr(false),
    m_paperWidth_attr(NULL),
    m_has_scale_attr(false),
    m_scale_attr(0),
    m_has_firstPageNumber_attr(false),
    m_firstPageNumber_attr(0),
    m_has_fitToWidth_attr(false),
    m_fitToWidth_attr(0),
    m_has_fitToHeight_attr(false),
    m_fitToHeight_attr(0),
    m_has_pageOrder_attr(false),
    m_pageOrder_attr(NULL),
    m_has_orientation_attr(false),
    m_orientation_attr(NULL),
    m_has_usePrinterDefaults_attr(false),
    m_usePrinterDefaults_attr(false),
    m_has_blackAndWhite_attr(false),
    m_blackAndWhite_attr(false),
    m_has_draft_attr(false),
    m_draft_attr(false),
    m_has_cellComments_attr(false),
    m_cellComments_attr(NULL),
    m_has_useFirstPageNumber_attr(false),
    m_useFirstPageNumber_attr(false),
    m_has_errors_attr(false),
    m_errors_attr(NULL),
    m_has_horizontalDpi_attr(false),
    m_horizontalDpi_attr(0),
    m_has_verticalDpi_attr(false),
    m_verticalDpi_attr(0),
    m_has_copies_attr(false),
    m_copies_attr(0),
    m_has_r_id_attr(false),
    m_r_id_attr(NULL)
    {
    }
    CT_PageSetup::~CT_PageSetup()
{
    clear();    }
    void CT_PageSetup::clear()
    {    
    m_has_paperSize_attr = false;
    m_paperSize_attr = 0;
    
    m_has_paperHeight_attr = false;
    
    if (m_paperHeight_attr)
    {
        delete m_paperHeight_attr;
        m_paperHeight_attr = NULL;
    }
    
    
    m_has_paperWidth_attr = false;
    
    if (m_paperWidth_attr)
    {
        delete m_paperWidth_attr;
        m_paperWidth_attr = NULL;
    }
    
    
    m_has_scale_attr = false;
    m_scale_attr = 0;
    
    m_has_firstPageNumber_attr = false;
    m_firstPageNumber_attr = 0;
    
    m_has_fitToWidth_attr = false;
    m_fitToWidth_attr = 0;
    
    m_has_fitToHeight_attr = false;
    m_fitToHeight_attr = 0;
    
    m_has_pageOrder_attr = false;
    
    if (m_pageOrder_attr)
    {
        delete m_pageOrder_attr;
        m_pageOrder_attr = NULL;
    }
    
    
    m_has_orientation_attr = false;
    
    if (m_orientation_attr)
    {
        delete m_orientation_attr;
        m_orientation_attr = NULL;
    }
    
    
    m_has_usePrinterDefaults_attr = false;
    m_usePrinterDefaults_attr = false;
    
    m_has_blackAndWhite_attr = false;
    m_blackAndWhite_attr = false;
    
    m_has_draft_attr = false;
    m_draft_attr = false;
    
    m_has_cellComments_attr = false;
    
    if (m_cellComments_attr)
    {
        delete m_cellComments_attr;
        m_cellComments_attr = NULL;
    }
    
    
    m_has_useFirstPageNumber_attr = false;
    m_useFirstPageNumber_attr = false;
    
    m_has_errors_attr = false;
    
    if (m_errors_attr)
    {
        delete m_errors_attr;
        m_errors_attr = NULL;
    }
    
    
    m_has_horizontalDpi_attr = false;
    m_horizontalDpi_attr = 0;
    
    m_has_verticalDpi_attr = false;
    m_verticalDpi_attr = 0;
    
    m_has_copies_attr = false;
    m_copies_attr = 0;
    
    m_has_r_id_attr = false;
    
    if (m_r_id_attr)
    {
        delete m_r_id_attr;
        m_r_id_attr = NULL;
    }
    
    }

    void CT_PageSetup::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_paperSize_attr)
    {
        _outStream << " " << "paperSize" << "=\"" << m_paperSize_attr << "\"";
    }
    
    
    if (m_has_paperHeight_attr)
    {
        m_paperHeight_attr->toXmlAttr("paperHeight", _outStream);
    }
    
    
    if (m_has_paperWidth_attr)
    {
        m_paperWidth_attr->toXmlAttr("paperWidth", _outStream);
    }
    
    
    if (m_has_scale_attr)
    {
        _outStream << " " << "scale" << "=\"" << m_scale_attr << "\"";
    }
    
    
    if (m_has_firstPageNumber_attr)
    {
        _outStream << " " << "firstPageNumber" << "=\"" << m_firstPageNumber_attr << "\"";
    }
    
    
    if (m_has_fitToWidth_attr)
    {
        _outStream << " " << "fitToWidth" << "=\"" << m_fitToWidth_attr << "\"";
    }
    
    
    if (m_has_fitToHeight_attr)
    {
        _outStream << " " << "fitToHeight" << "=\"" << m_fitToHeight_attr << "\"";
    }
    
    
    if (m_has_pageOrder_attr)
    {
        m_pageOrder_attr->toXmlAttr("pageOrder", _outStream);
    }
    
    
    if (m_has_orientation_attr)
    {
        m_orientation_attr->toXmlAttr("orientation", _outStream);
    }
    
    
    if (m_has_usePrinterDefaults_attr)
    {
        _outStream << " " << "usePrinterDefaults" << "=\"" << XSD::XMLBooleanStr(m_usePrinterDefaults_attr) << "\"";
    }
    
    
    if (m_has_blackAndWhite_attr)
    {
        _outStream << " " << "blackAndWhite" << "=\"" << XSD::XMLBooleanStr(m_blackAndWhite_attr) << "\"";
    }
    
    
    if (m_has_draft_attr)
    {
        _outStream << " " << "draft" << "=\"" << XSD::XMLBooleanStr(m_draft_attr) << "\"";
    }
    
    
    if (m_has_cellComments_attr)
    {
        m_cellComments_attr->toXmlAttr("cellComments", _outStream);
    }
    
    
    if (m_has_useFirstPageNumber_attr)
    {
        _outStream << " " << "useFirstPageNumber" << "=\"" << XSD::XMLBooleanStr(m_useFirstPageNumber_attr) << "\"";
    }
    
    
    if (m_has_errors_attr)
    {
        m_errors_attr->toXmlAttr("errors", _outStream);
    }
    
    
    if (m_has_horizontalDpi_attr)
    {
        _outStream << " " << "horizontalDpi" << "=\"" << m_horizontalDpi_attr << "\"";
    }
    
    
    if (m_has_verticalDpi_attr)
    {
        _outStream << " " << "verticalDpi" << "=\"" << m_verticalDpi_attr << "\"";
    }
    
    
    if (m_has_copies_attr)
    {
        _outStream << " " << "copies" << "=\"" << m_copies_attr << "\"";
    }
    
    
    if (m_has_r_id_attr)
    {
        m_r_id_attr->toXmlAttr("r:id", _outStream);
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_PageSetup& CT_PageSetup::default_instance()
    {    
    if (!CT_PageSetup::default_instance_)
    {
        CT_PageSetup::default_instance_ = new CT_PageSetup();
    }
    return *CT_PageSetup::default_instance_;
    }

    bool CT_PageSetup::has_paperSize_attr() const
    {    
    return m_has_paperSize_attr;
    }

    void CT_PageSetup::set_paperSize_attr(const XSD::unsignedInt_& _paperSize_attr)
    {    
    m_has_paperSize_attr = true;
    m_paperSize_attr = _paperSize_attr;
    }

    const XSD::unsignedInt_& CT_PageSetup::get_paperSize_attr() const
    {    
    return m_paperSize_attr;
    }

    bool CT_PageSetup::has_paperHeight_attr() const
    {    
    return m_has_paperHeight_attr;
    }

    void CT_PageSetup::set_paperHeight_attr(const ns_s::ST_PositiveUniversalMeasure& _paperHeight_attr)
    {    
    m_has_paperHeight_attr = true;
    m_paperHeight_attr = new ns_s::ST_PositiveUniversalMeasure(_paperHeight_attr);
    }

    const ns_s::ST_PositiveUniversalMeasure& CT_PageSetup::get_paperHeight_attr() const
    {    
    if (m_paperHeight_attr)
    {
        return *m_paperHeight_attr;
    }
    return ns_s::ST_PositiveUniversalMeasure::default_instance();
    }

    bool CT_PageSetup::has_paperWidth_attr() const
    {    
    return m_has_paperWidth_attr;
    }

    void CT_PageSetup::set_paperWidth_attr(const ns_s::ST_PositiveUniversalMeasure& _paperWidth_attr)
    {    
    m_has_paperWidth_attr = true;
    m_paperWidth_attr = new ns_s::ST_PositiveUniversalMeasure(_paperWidth_attr);
    }

    const ns_s::ST_PositiveUniversalMeasure& CT_PageSetup::get_paperWidth_attr() const
    {    
    if (m_paperWidth_attr)
    {
        return *m_paperWidth_attr;
    }
    return ns_s::ST_PositiveUniversalMeasure::default_instance();
    }

    bool CT_PageSetup::has_scale_attr() const
    {    
    return m_has_scale_attr;
    }

    void CT_PageSetup::set_scale_attr(const XSD::unsignedInt_& _scale_attr)
    {    
    m_has_scale_attr = true;
    m_scale_attr = _scale_attr;
    }

    const XSD::unsignedInt_& CT_PageSetup::get_scale_attr() const
    {    
    return m_scale_attr;
    }

    bool CT_PageSetup::has_firstPageNumber_attr() const
    {    
    return m_has_firstPageNumber_attr;
    }

    void CT_PageSetup::set_firstPageNumber_attr(const XSD::unsignedInt_& _firstPageNumber_attr)
    {    
    m_has_firstPageNumber_attr = true;
    m_firstPageNumber_attr = _firstPageNumber_attr;
    }

    const XSD::unsignedInt_& CT_PageSetup::get_firstPageNumber_attr() const
    {    
    return m_firstPageNumber_attr;
    }

    bool CT_PageSetup::has_fitToWidth_attr() const
    {    
    return m_has_fitToWidth_attr;
    }

    void CT_PageSetup::set_fitToWidth_attr(const XSD::unsignedInt_& _fitToWidth_attr)
    {    
    m_has_fitToWidth_attr = true;
    m_fitToWidth_attr = _fitToWidth_attr;
    }

    const XSD::unsignedInt_& CT_PageSetup::get_fitToWidth_attr() const
    {    
    return m_fitToWidth_attr;
    }

    bool CT_PageSetup::has_fitToHeight_attr() const
    {    
    return m_has_fitToHeight_attr;
    }

    void CT_PageSetup::set_fitToHeight_attr(const XSD::unsignedInt_& _fitToHeight_attr)
    {    
    m_has_fitToHeight_attr = true;
    m_fitToHeight_attr = _fitToHeight_attr;
    }

    const XSD::unsignedInt_& CT_PageSetup::get_fitToHeight_attr() const
    {    
    return m_fitToHeight_attr;
    }

    bool CT_PageSetup::has_pageOrder_attr() const
    {    
    return m_has_pageOrder_attr;
    }

    void CT_PageSetup::set_pageOrder_attr(const ST_PageOrder& _pageOrder_attr)
    {    
    m_has_pageOrder_attr = true;
    m_pageOrder_attr = new ST_PageOrder(_pageOrder_attr);
    }

    const ST_PageOrder& CT_PageSetup::get_pageOrder_attr() const
    {    
    if (m_pageOrder_attr)
    {
        return *m_pageOrder_attr;
    }
    return ST_PageOrder::default_instance();
    }

    bool CT_PageSetup::has_orientation_attr() const
    {    
    return m_has_orientation_attr;
    }

    void CT_PageSetup::set_orientation_attr(const ST_Orientation& _orientation_attr)
    {    
    m_has_orientation_attr = true;
    m_orientation_attr = new ST_Orientation(_orientation_attr);
    }

    const ST_Orientation& CT_PageSetup::get_orientation_attr() const
    {    
    if (m_orientation_attr)
    {
        return *m_orientation_attr;
    }
    return ST_Orientation::default_instance();
    }

    bool CT_PageSetup::has_usePrinterDefaults_attr() const
    {    
    return m_has_usePrinterDefaults_attr;
    }

    void CT_PageSetup::set_usePrinterDefaults_attr(const XSD::boolean_& _usePrinterDefaults_attr)
    {    
    m_has_usePrinterDefaults_attr = true;
    m_usePrinterDefaults_attr = _usePrinterDefaults_attr;
    }

    const XSD::boolean_& CT_PageSetup::get_usePrinterDefaults_attr() const
    {    
    return m_usePrinterDefaults_attr;
    }

    bool CT_PageSetup::has_blackAndWhite_attr() const
    {    
    return m_has_blackAndWhite_attr;
    }

    void CT_PageSetup::set_blackAndWhite_attr(const XSD::boolean_& _blackAndWhite_attr)
    {    
    m_has_blackAndWhite_attr = true;
    m_blackAndWhite_attr = _blackAndWhite_attr;
    }

    const XSD::boolean_& CT_PageSetup::get_blackAndWhite_attr() const
    {    
    return m_blackAndWhite_attr;
    }

    bool CT_PageSetup::has_draft_attr() const
    {    
    return m_has_draft_attr;
    }

    void CT_PageSetup::set_draft_attr(const XSD::boolean_& _draft_attr)
    {    
    m_has_draft_attr = true;
    m_draft_attr = _draft_attr;
    }

    const XSD::boolean_& CT_PageSetup::get_draft_attr() const
    {    
    return m_draft_attr;
    }

    bool CT_PageSetup::has_cellComments_attr() const
    {    
    return m_has_cellComments_attr;
    }

    void CT_PageSetup::set_cellComments_attr(const ST_CellComments& _cellComments_attr)
    {    
    m_has_cellComments_attr = true;
    m_cellComments_attr = new ST_CellComments(_cellComments_attr);
    }

    const ST_CellComments& CT_PageSetup::get_cellComments_attr() const
    {    
    if (m_cellComments_attr)
    {
        return *m_cellComments_attr;
    }
    return ST_CellComments::default_instance();
    }

    bool CT_PageSetup::has_useFirstPageNumber_attr() const
    {    
    return m_has_useFirstPageNumber_attr;
    }

    void CT_PageSetup::set_useFirstPageNumber_attr(const XSD::boolean_& _useFirstPageNumber_attr)
    {    
    m_has_useFirstPageNumber_attr = true;
    m_useFirstPageNumber_attr = _useFirstPageNumber_attr;
    }

    const XSD::boolean_& CT_PageSetup::get_useFirstPageNumber_attr() const
    {    
    return m_useFirstPageNumber_attr;
    }

    bool CT_PageSetup::has_errors_attr() const
    {    
    return m_has_errors_attr;
    }

    void CT_PageSetup::set_errors_attr(const ST_PrintError& _errors_attr)
    {    
    m_has_errors_attr = true;
    m_errors_attr = new ST_PrintError(_errors_attr);
    }

    const ST_PrintError& CT_PageSetup::get_errors_attr() const
    {    
    if (m_errors_attr)
    {
        return *m_errors_attr;
    }
    return ST_PrintError::default_instance();
    }

    bool CT_PageSetup::has_horizontalDpi_attr() const
    {    
    return m_has_horizontalDpi_attr;
    }

    void CT_PageSetup::set_horizontalDpi_attr(const XSD::unsignedInt_& _horizontalDpi_attr)
    {    
    m_has_horizontalDpi_attr = true;
    m_horizontalDpi_attr = _horizontalDpi_attr;
    }

    const XSD::unsignedInt_& CT_PageSetup::get_horizontalDpi_attr() const
    {    
    return m_horizontalDpi_attr;
    }

    bool CT_PageSetup::has_verticalDpi_attr() const
    {    
    return m_has_verticalDpi_attr;
    }

    void CT_PageSetup::set_verticalDpi_attr(const XSD::unsignedInt_& _verticalDpi_attr)
    {    
    m_has_verticalDpi_attr = true;
    m_verticalDpi_attr = _verticalDpi_attr;
    }

    const XSD::unsignedInt_& CT_PageSetup::get_verticalDpi_attr() const
    {    
    return m_verticalDpi_attr;
    }

    bool CT_PageSetup::has_copies_attr() const
    {    
    return m_has_copies_attr;
    }

    void CT_PageSetup::set_copies_attr(const XSD::unsignedInt_& _copies_attr)
    {    
    m_has_copies_attr = true;
    m_copies_attr = _copies_attr;
    }

    const XSD::unsignedInt_& CT_PageSetup::get_copies_attr() const
    {    
    return m_copies_attr;
    }

    bool CT_PageSetup::has_r_id_attr() const
    {    
    return m_has_r_id_attr;
    }

    void CT_PageSetup::set_r_id_attr(const ns_r::ST_RelationshipId& _r_id_attr)
    {    
    m_has_r_id_attr = true;
    m_r_id_attr = new ns_r::ST_RelationshipId(_r_id_attr);
    }

    const ns_r::ST_RelationshipId& CT_PageSetup::get_r_id_attr() const
    {    
    if (m_r_id_attr)
    {
        return *m_r_id_attr;
    }
    return ns_r::ST_RelationshipId::default_instance();
    }

CT_PageSetup* CT_PageSetup::default_instance_ = NULL;

    // CT_HeaderFooter
    CT_HeaderFooter::CT_HeaderFooter()
    :m_has_oddHeader(false),
    m_oddHeader(NULL),
    m_has_oddFooter(false),
    m_oddFooter(NULL),
    m_has_evenHeader(false),
    m_evenHeader(NULL),
    m_has_evenFooter(false),
    m_evenFooter(NULL),
    m_has_firstHeader(false),
    m_firstHeader(NULL),
    m_has_firstFooter(false),
    m_firstFooter(NULL),
    m_has_differentOddEven_attr(false),
    m_differentOddEven_attr(false),
    m_has_differentFirst_attr(false),
    m_differentFirst_attr(false),
    m_has_scaleWithDoc_attr(false),
    m_scaleWithDoc_attr(false),
    m_has_alignWithMargins_attr(false),
    m_alignWithMargins_attr(false)
    {
    }
    CT_HeaderFooter::~CT_HeaderFooter()
{
    clear();    }
    bool CT_HeaderFooter::has_oddHeader() const
    {    
    return m_has_oddHeader;
    }

    ns_s::ST_Xstring* CT_HeaderFooter::mutable_oddHeader()
    {    
    m_has_oddHeader = true;
    if (!m_oddHeader)
    {
        m_oddHeader = new ns_s::ST_Xstring();
    }
    return m_oddHeader;
    }

    const ns_s::ST_Xstring& CT_HeaderFooter::get_oddHeader() const
    {    
    if (m_oddHeader)
    {
        return *m_oddHeader;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_HeaderFooter::has_oddFooter() const
    {    
    return m_has_oddFooter;
    }

    ns_s::ST_Xstring* CT_HeaderFooter::mutable_oddFooter()
    {    
    m_has_oddFooter = true;
    if (!m_oddFooter)
    {
        m_oddFooter = new ns_s::ST_Xstring();
    }
    return m_oddFooter;
    }

    const ns_s::ST_Xstring& CT_HeaderFooter::get_oddFooter() const
    {    
    if (m_oddFooter)
    {
        return *m_oddFooter;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_HeaderFooter::has_evenHeader() const
    {    
    return m_has_evenHeader;
    }

    ns_s::ST_Xstring* CT_HeaderFooter::mutable_evenHeader()
    {    
    m_has_evenHeader = true;
    if (!m_evenHeader)
    {
        m_evenHeader = new ns_s::ST_Xstring();
    }
    return m_evenHeader;
    }

    const ns_s::ST_Xstring& CT_HeaderFooter::get_evenHeader() const
    {    
    if (m_evenHeader)
    {
        return *m_evenHeader;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_HeaderFooter::has_evenFooter() const
    {    
    return m_has_evenFooter;
    }

    ns_s::ST_Xstring* CT_HeaderFooter::mutable_evenFooter()
    {    
    m_has_evenFooter = true;
    if (!m_evenFooter)
    {
        m_evenFooter = new ns_s::ST_Xstring();
    }
    return m_evenFooter;
    }

    const ns_s::ST_Xstring& CT_HeaderFooter::get_evenFooter() const
    {    
    if (m_evenFooter)
    {
        return *m_evenFooter;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_HeaderFooter::has_firstHeader() const
    {    
    return m_has_firstHeader;
    }

    ns_s::ST_Xstring* CT_HeaderFooter::mutable_firstHeader()
    {    
    m_has_firstHeader = true;
    if (!m_firstHeader)
    {
        m_firstHeader = new ns_s::ST_Xstring();
    }
    return m_firstHeader;
    }

    const ns_s::ST_Xstring& CT_HeaderFooter::get_firstHeader() const
    {    
    if (m_firstHeader)
    {
        return *m_firstHeader;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_HeaderFooter::has_firstFooter() const
    {    
    return m_has_firstFooter;
    }

    ns_s::ST_Xstring* CT_HeaderFooter::mutable_firstFooter()
    {    
    m_has_firstFooter = true;
    if (!m_firstFooter)
    {
        m_firstFooter = new ns_s::ST_Xstring();
    }
    return m_firstFooter;
    }

    const ns_s::ST_Xstring& CT_HeaderFooter::get_firstFooter() const
    {    
    if (m_firstFooter)
    {
        return *m_firstFooter;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    void CT_HeaderFooter::clear()
    {    
    m_has_differentOddEven_attr = false;
    m_differentOddEven_attr = false;
    
    m_has_differentFirst_attr = false;
    m_differentFirst_attr = false;
    
    m_has_scaleWithDoc_attr = false;
    m_scaleWithDoc_attr = false;
    
    m_has_alignWithMargins_attr = false;
    m_alignWithMargins_attr = false;
    }

    void CT_HeaderFooter::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_differentOddEven_attr)
    {
        _outStream << " " << "differentOddEven" << "=\"" << XSD::XMLBooleanStr(m_differentOddEven_attr) << "\"";
    }
    
    
    if (m_has_differentFirst_attr)
    {
        _outStream << " " << "differentFirst" << "=\"" << XSD::XMLBooleanStr(m_differentFirst_attr) << "\"";
    }
    
    
    if (m_has_scaleWithDoc_attr)
    {
        _outStream << " " << "scaleWithDoc" << "=\"" << XSD::XMLBooleanStr(m_scaleWithDoc_attr) << "\"";
    }
    
    
    if (m_has_alignWithMargins_attr)
    {
        _outStream << " " << "alignWithMargins" << "=\"" << XSD::XMLBooleanStr(m_alignWithMargins_attr) << "\"";
    }
    
            _outStream << ">";
            
    if (m_has_oddHeader)
    {
        _outStream << "<main:oddHeader>" << m_oddHeader->toString() << "</main:oddHeader>";;
    }
    
    if (m_has_oddFooter)
    {
        _outStream << "<main:oddFooter>" << m_oddFooter->toString() << "</main:oddFooter>";;
    }
    
    if (m_has_evenHeader)
    {
        _outStream << "<main:evenHeader>" << m_evenHeader->toString() << "</main:evenHeader>";;
    }
    
    if (m_has_evenFooter)
    {
        _outStream << "<main:evenFooter>" << m_evenFooter->toString() << "</main:evenFooter>";;
    }
    
    if (m_has_firstHeader)
    {
        _outStream << "<main:firstHeader>" << m_firstHeader->toString() << "</main:firstHeader>";;
    }
    
    if (m_has_firstFooter)
    {
        _outStream << "<main:firstFooter>" << m_firstFooter->toString() << "</main:firstFooter>";;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_HeaderFooter& CT_HeaderFooter::default_instance()
    {    
    if (!CT_HeaderFooter::default_instance_)
    {
        CT_HeaderFooter::default_instance_ = new CT_HeaderFooter();
    }
    return *CT_HeaderFooter::default_instance_;
    }

    bool CT_HeaderFooter::has_differentOddEven_attr() const
    {    
    return m_has_differentOddEven_attr;
    }

    void CT_HeaderFooter::set_differentOddEven_attr(const XSD::boolean_& _differentOddEven_attr)
    {    
    m_has_differentOddEven_attr = true;
    m_differentOddEven_attr = _differentOddEven_attr;
    }

    const XSD::boolean_& CT_HeaderFooter::get_differentOddEven_attr() const
    {    
    return m_differentOddEven_attr;
    }

    bool CT_HeaderFooter::has_differentFirst_attr() const
    {    
    return m_has_differentFirst_attr;
    }

    void CT_HeaderFooter::set_differentFirst_attr(const XSD::boolean_& _differentFirst_attr)
    {    
    m_has_differentFirst_attr = true;
    m_differentFirst_attr = _differentFirst_attr;
    }

    const XSD::boolean_& CT_HeaderFooter::get_differentFirst_attr() const
    {    
    return m_differentFirst_attr;
    }

    bool CT_HeaderFooter::has_scaleWithDoc_attr() const
    {    
    return m_has_scaleWithDoc_attr;
    }

    void CT_HeaderFooter::set_scaleWithDoc_attr(const XSD::boolean_& _scaleWithDoc_attr)
    {    
    m_has_scaleWithDoc_attr = true;
    m_scaleWithDoc_attr = _scaleWithDoc_attr;
    }

    const XSD::boolean_& CT_HeaderFooter::get_scaleWithDoc_attr() const
    {    
    return m_scaleWithDoc_attr;
    }

    bool CT_HeaderFooter::has_alignWithMargins_attr() const
    {    
    return m_has_alignWithMargins_attr;
    }

    void CT_HeaderFooter::set_alignWithMargins_attr(const XSD::boolean_& _alignWithMargins_attr)
    {    
    m_has_alignWithMargins_attr = true;
    m_alignWithMargins_attr = _alignWithMargins_attr;
    }

    const XSD::boolean_& CT_HeaderFooter::get_alignWithMargins_attr() const
    {    
    return m_alignWithMargins_attr;
    }

CT_HeaderFooter* CT_HeaderFooter::default_instance_ = NULL;

    // CT_Scenarios
    CT_Scenarios::CT_Scenarios()
    :m_has_current_attr(false),
    m_current_attr(0),
    m_has_show_attr(false),
    m_show_attr(0),
    m_has_sqref_attr(false),
    m_sqref_attr(NULL)
    {
    }
    CT_Scenarios::~CT_Scenarios()
{
    clear();    }
    CT_Scenario* CT_Scenarios::add_scenario()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Scenario* pNewChild = pChildGroup->mutable_scenario();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_Scenarios::clear()
    {    
    m_has_current_attr = false;
    m_current_attr = 0;
    
    m_has_show_attr = false;
    m_show_attr = 0;
    
    m_has_sqref_attr = false;
    
    if (m_sqref_attr)
    {
        delete m_sqref_attr;
        m_sqref_attr = NULL;
    }
    
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_Scenarios::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_current_attr)
    {
        _outStream << " " << "current" << "=\"" << m_current_attr << "\"";
    }
    
    
    if (m_has_show_attr)
    {
        _outStream << " " << "show" << "=\"" << m_show_attr << "\"";
    }
    
    
    if (m_has_sqref_attr)
    {
        m_sqref_attr->toXmlAttr("sqref", _outStream);
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_scenario())
            {
                (*iter)->get_scenario().toXmlElem("main:scenario", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_Scenarios& CT_Scenarios::default_instance()
    {    
    if (!CT_Scenarios::default_instance_)
    {
        CT_Scenarios::default_instance_ = new CT_Scenarios();
    }
    return *CT_Scenarios::default_instance_;
    }

    bool CT_Scenarios::has_current_attr() const
    {    
    return m_has_current_attr;
    }

    void CT_Scenarios::set_current_attr(const XSD::unsignedInt_& _current_attr)
    {    
    m_has_current_attr = true;
    m_current_attr = _current_attr;
    }

    const XSD::unsignedInt_& CT_Scenarios::get_current_attr() const
    {    
    return m_current_attr;
    }

    bool CT_Scenarios::has_show_attr() const
    {    
    return m_has_show_attr;
    }

    void CT_Scenarios::set_show_attr(const XSD::unsignedInt_& _show_attr)
    {    
    m_has_show_attr = true;
    m_show_attr = _show_attr;
    }

    const XSD::unsignedInt_& CT_Scenarios::get_show_attr() const
    {    
    return m_show_attr;
    }

    bool CT_Scenarios::has_sqref_attr() const
    {    
    return m_has_sqref_attr;
    }

    void CT_Scenarios::set_sqref_attr(const ST_Sqref& _sqref_attr)
    {    
    m_has_sqref_attr = true;
    m_sqref_attr = new ST_Sqref(_sqref_attr);
    }

    const ST_Sqref& CT_Scenarios::get_sqref_attr() const
    {    
    if (m_sqref_attr)
    {
        return *m_sqref_attr;
    }
    return ST_Sqref::default_instance();
    }


    // CT_Scenarios::ChildGroup_1
    CT_Scenarios::ChildGroup_1::ChildGroup_1()
    :m_has_scenario(false),
    m_scenario(NULL)
    {
    }
    bool CT_Scenarios::ChildGroup_1::has_scenario() const
    {    
    return m_has_scenario;
    }

    CT_Scenario* CT_Scenarios::ChildGroup_1::mutable_scenario()
    {    
    
    m_has_scenario = true;
    if (!m_scenario)
    {
        m_scenario = new CT_Scenario();
    }
    return m_scenario;
    }

    const CT_Scenario& CT_Scenarios::ChildGroup_1::get_scenario() const
    {    
    if (m_scenario)
    {
        return *m_scenario;
    }
    return CT_Scenario::default_instance();
    }

CT_Scenarios* CT_Scenarios::default_instance_ = NULL;

    // CT_SheetProtection
    CT_SheetProtection::CT_SheetProtection()
    :m_has_password_attr(false),
    m_password_attr(NULL),
    m_has_algorithmName_attr(false),
    m_algorithmName_attr(NULL),
    m_has_hashValue_attr(false),
    m_hashValue_attr(""),
    m_has_saltValue_attr(false),
    m_saltValue_attr(""),
    m_has_spinCount_attr(false),
    m_spinCount_attr(0),
    m_has_sheet_attr(false),
    m_sheet_attr(false),
    m_has_objects_attr(false),
    m_objects_attr(false),
    m_has_scenarios_attr(false),
    m_scenarios_attr(false),
    m_has_formatCells_attr(false),
    m_formatCells_attr(false),
    m_has_formatColumns_attr(false),
    m_formatColumns_attr(false),
    m_has_formatRows_attr(false),
    m_formatRows_attr(false),
    m_has_insertColumns_attr(false),
    m_insertColumns_attr(false),
    m_has_insertRows_attr(false),
    m_insertRows_attr(false),
    m_has_insertHyperlinks_attr(false),
    m_insertHyperlinks_attr(false),
    m_has_deleteColumns_attr(false),
    m_deleteColumns_attr(false),
    m_has_deleteRows_attr(false),
    m_deleteRows_attr(false),
    m_has_selectLockedCells_attr(false),
    m_selectLockedCells_attr(false),
    m_has_sort_attr(false),
    m_sort_attr(false),
    m_has_autoFilter_attr(false),
    m_autoFilter_attr(false),
    m_has_pivotTables_attr(false),
    m_pivotTables_attr(false),
    m_has_selectUnlockedCells_attr(false),
    m_selectUnlockedCells_attr(false)
    {
    }
    CT_SheetProtection::~CT_SheetProtection()
{
    clear();    }
    void CT_SheetProtection::clear()
    {    
    m_has_password_attr = false;
    
    if (m_password_attr)
    {
        delete m_password_attr;
        m_password_attr = NULL;
    }
    
    
    m_has_algorithmName_attr = false;
    
    if (m_algorithmName_attr)
    {
        delete m_algorithmName_attr;
        m_algorithmName_attr = NULL;
    }
    
    
    m_has_hashValue_attr = false;
    m_hashValue_attr.clear();
    
    m_has_saltValue_attr = false;
    m_saltValue_attr.clear();
    
    m_has_spinCount_attr = false;
    m_spinCount_attr = 0;
    
    m_has_sheet_attr = false;
    m_sheet_attr = false;
    
    m_has_objects_attr = false;
    m_objects_attr = false;
    
    m_has_scenarios_attr = false;
    m_scenarios_attr = false;
    
    m_has_formatCells_attr = false;
    m_formatCells_attr = false;
    
    m_has_formatColumns_attr = false;
    m_formatColumns_attr = false;
    
    m_has_formatRows_attr = false;
    m_formatRows_attr = false;
    
    m_has_insertColumns_attr = false;
    m_insertColumns_attr = false;
    
    m_has_insertRows_attr = false;
    m_insertRows_attr = false;
    
    m_has_insertHyperlinks_attr = false;
    m_insertHyperlinks_attr = false;
    
    m_has_deleteColumns_attr = false;
    m_deleteColumns_attr = false;
    
    m_has_deleteRows_attr = false;
    m_deleteRows_attr = false;
    
    m_has_selectLockedCells_attr = false;
    m_selectLockedCells_attr = false;
    
    m_has_sort_attr = false;
    m_sort_attr = false;
    
    m_has_autoFilter_attr = false;
    m_autoFilter_attr = false;
    
    m_has_pivotTables_attr = false;
    m_pivotTables_attr = false;
    
    m_has_selectUnlockedCells_attr = false;
    m_selectUnlockedCells_attr = false;
    }

    void CT_SheetProtection::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_password_attr)
    {
        m_password_attr->toXmlAttr("password", _outStream);
    }
    
    
    if (m_has_algorithmName_attr)
    {
        m_algorithmName_attr->toXmlAttr("algorithmName", _outStream);
    }
    
    
    if (m_has_hashValue_attr)
    {
        _outStream << " " << "hashValue" << "=\"" << m_hashValue_attr << "\"";
    }
    
    
    if (m_has_saltValue_attr)
    {
        _outStream << " " << "saltValue" << "=\"" << m_saltValue_attr << "\"";
    }
    
    
    if (m_has_spinCount_attr)
    {
        _outStream << " " << "spinCount" << "=\"" << m_spinCount_attr << "\"";
    }
    
    
    if (m_has_sheet_attr)
    {
        _outStream << " " << "sheet" << "=\"" << XSD::XMLBooleanStr(m_sheet_attr) << "\"";
    }
    
    
    if (m_has_objects_attr)
    {
        _outStream << " " << "objects" << "=\"" << XSD::XMLBooleanStr(m_objects_attr) << "\"";
    }
    
    
    if (m_has_scenarios_attr)
    {
        _outStream << " " << "scenarios" << "=\"" << XSD::XMLBooleanStr(m_scenarios_attr) << "\"";
    }
    
    
    if (m_has_formatCells_attr)
    {
        _outStream << " " << "formatCells" << "=\"" << XSD::XMLBooleanStr(m_formatCells_attr) << "\"";
    }
    
    
    if (m_has_formatColumns_attr)
    {
        _outStream << " " << "formatColumns" << "=\"" << XSD::XMLBooleanStr(m_formatColumns_attr) << "\"";
    }
    
    
    if (m_has_formatRows_attr)
    {
        _outStream << " " << "formatRows" << "=\"" << XSD::XMLBooleanStr(m_formatRows_attr) << "\"";
    }
    
    
    if (m_has_insertColumns_attr)
    {
        _outStream << " " << "insertColumns" << "=\"" << XSD::XMLBooleanStr(m_insertColumns_attr) << "\"";
    }
    
    
    if (m_has_insertRows_attr)
    {
        _outStream << " " << "insertRows" << "=\"" << XSD::XMLBooleanStr(m_insertRows_attr) << "\"";
    }
    
    
    if (m_has_insertHyperlinks_attr)
    {
        _outStream << " " << "insertHyperlinks" << "=\"" << XSD::XMLBooleanStr(m_insertHyperlinks_attr) << "\"";
    }
    
    
    if (m_has_deleteColumns_attr)
    {
        _outStream << " " << "deleteColumns" << "=\"" << XSD::XMLBooleanStr(m_deleteColumns_attr) << "\"";
    }
    
    
    if (m_has_deleteRows_attr)
    {
        _outStream << " " << "deleteRows" << "=\"" << XSD::XMLBooleanStr(m_deleteRows_attr) << "\"";
    }
    
    
    if (m_has_selectLockedCells_attr)
    {
        _outStream << " " << "selectLockedCells" << "=\"" << XSD::XMLBooleanStr(m_selectLockedCells_attr) << "\"";
    }
    
    
    if (m_has_sort_attr)
    {
        _outStream << " " << "sort" << "=\"" << XSD::XMLBooleanStr(m_sort_attr) << "\"";
    }
    
    
    if (m_has_autoFilter_attr)
    {
        _outStream << " " << "autoFilter" << "=\"" << XSD::XMLBooleanStr(m_autoFilter_attr) << "\"";
    }
    
    
    if (m_has_pivotTables_attr)
    {
        _outStream << " " << "pivotTables" << "=\"" << XSD::XMLBooleanStr(m_pivotTables_attr) << "\"";
    }
    
    
    if (m_has_selectUnlockedCells_attr)
    {
        _outStream << " " << "selectUnlockedCells" << "=\"" << XSD::XMLBooleanStr(m_selectUnlockedCells_attr) << "\"";
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_SheetProtection& CT_SheetProtection::default_instance()
    {    
    if (!CT_SheetProtection::default_instance_)
    {
        CT_SheetProtection::default_instance_ = new CT_SheetProtection();
    }
    return *CT_SheetProtection::default_instance_;
    }

    bool CT_SheetProtection::has_password_attr() const
    {    
    return m_has_password_attr;
    }

    void CT_SheetProtection::set_password_attr(const ST_UnsignedShortHex& _password_attr)
    {    
    m_has_password_attr = true;
    m_password_attr = new ST_UnsignedShortHex(_password_attr);
    }

    const ST_UnsignedShortHex& CT_SheetProtection::get_password_attr() const
    {    
    if (m_password_attr)
    {
        return *m_password_attr;
    }
    return ST_UnsignedShortHex::default_instance();
    }

    bool CT_SheetProtection::has_algorithmName_attr() const
    {    
    return m_has_algorithmName_attr;
    }

    void CT_SheetProtection::set_algorithmName_attr(const ns_s::ST_Xstring& _algorithmName_attr)
    {    
    m_has_algorithmName_attr = true;
    m_algorithmName_attr = new ns_s::ST_Xstring(_algorithmName_attr);
    }

    const ns_s::ST_Xstring& CT_SheetProtection::get_algorithmName_attr() const
    {    
    if (m_algorithmName_attr)
    {
        return *m_algorithmName_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_SheetProtection::has_hashValue_attr() const
    {    
    return m_has_hashValue_attr;
    }

    void CT_SheetProtection::set_hashValue_attr(const XSD::base64Binary_& _hashValue_attr)
    {    
    m_has_hashValue_attr = true;
    m_hashValue_attr = _hashValue_attr;
    }

    const XSD::base64Binary_& CT_SheetProtection::get_hashValue_attr() const
    {    
    return m_hashValue_attr;
    }

    bool CT_SheetProtection::has_saltValue_attr() const
    {    
    return m_has_saltValue_attr;
    }

    void CT_SheetProtection::set_saltValue_attr(const XSD::base64Binary_& _saltValue_attr)
    {    
    m_has_saltValue_attr = true;
    m_saltValue_attr = _saltValue_attr;
    }

    const XSD::base64Binary_& CT_SheetProtection::get_saltValue_attr() const
    {    
    return m_saltValue_attr;
    }

    bool CT_SheetProtection::has_spinCount_attr() const
    {    
    return m_has_spinCount_attr;
    }

    void CT_SheetProtection::set_spinCount_attr(const XSD::unsignedInt_& _spinCount_attr)
    {    
    m_has_spinCount_attr = true;
    m_spinCount_attr = _spinCount_attr;
    }

    const XSD::unsignedInt_& CT_SheetProtection::get_spinCount_attr() const
    {    
    return m_spinCount_attr;
    }

    bool CT_SheetProtection::has_sheet_attr() const
    {    
    return m_has_sheet_attr;
    }

    void CT_SheetProtection::set_sheet_attr(const XSD::boolean_& _sheet_attr)
    {    
    m_has_sheet_attr = true;
    m_sheet_attr = _sheet_attr;
    }

    const XSD::boolean_& CT_SheetProtection::get_sheet_attr() const
    {    
    return m_sheet_attr;
    }

    bool CT_SheetProtection::has_objects_attr() const
    {    
    return m_has_objects_attr;
    }

    void CT_SheetProtection::set_objects_attr(const XSD::boolean_& _objects_attr)
    {    
    m_has_objects_attr = true;
    m_objects_attr = _objects_attr;
    }

    const XSD::boolean_& CT_SheetProtection::get_objects_attr() const
    {    
    return m_objects_attr;
    }

    bool CT_SheetProtection::has_scenarios_attr() const
    {    
    return m_has_scenarios_attr;
    }

    void CT_SheetProtection::set_scenarios_attr(const XSD::boolean_& _scenarios_attr)
    {    
    m_has_scenarios_attr = true;
    m_scenarios_attr = _scenarios_attr;
    }

    const XSD::boolean_& CT_SheetProtection::get_scenarios_attr() const
    {    
    return m_scenarios_attr;
    }

    bool CT_SheetProtection::has_formatCells_attr() const
    {    
    return m_has_formatCells_attr;
    }

    void CT_SheetProtection::set_formatCells_attr(const XSD::boolean_& _formatCells_attr)
    {    
    m_has_formatCells_attr = true;
    m_formatCells_attr = _formatCells_attr;
    }

    const XSD::boolean_& CT_SheetProtection::get_formatCells_attr() const
    {    
    return m_formatCells_attr;
    }

    bool CT_SheetProtection::has_formatColumns_attr() const
    {    
    return m_has_formatColumns_attr;
    }

    void CT_SheetProtection::set_formatColumns_attr(const XSD::boolean_& _formatColumns_attr)
    {    
    m_has_formatColumns_attr = true;
    m_formatColumns_attr = _formatColumns_attr;
    }

    const XSD::boolean_& CT_SheetProtection::get_formatColumns_attr() const
    {    
    return m_formatColumns_attr;
    }

    bool CT_SheetProtection::has_formatRows_attr() const
    {    
    return m_has_formatRows_attr;
    }

    void CT_SheetProtection::set_formatRows_attr(const XSD::boolean_& _formatRows_attr)
    {    
    m_has_formatRows_attr = true;
    m_formatRows_attr = _formatRows_attr;
    }

    const XSD::boolean_& CT_SheetProtection::get_formatRows_attr() const
    {    
    return m_formatRows_attr;
    }

    bool CT_SheetProtection::has_insertColumns_attr() const
    {    
    return m_has_insertColumns_attr;
    }

    void CT_SheetProtection::set_insertColumns_attr(const XSD::boolean_& _insertColumns_attr)
    {    
    m_has_insertColumns_attr = true;
    m_insertColumns_attr = _insertColumns_attr;
    }

    const XSD::boolean_& CT_SheetProtection::get_insertColumns_attr() const
    {    
    return m_insertColumns_attr;
    }

    bool CT_SheetProtection::has_insertRows_attr() const
    {    
    return m_has_insertRows_attr;
    }

    void CT_SheetProtection::set_insertRows_attr(const XSD::boolean_& _insertRows_attr)
    {    
    m_has_insertRows_attr = true;
    m_insertRows_attr = _insertRows_attr;
    }

    const XSD::boolean_& CT_SheetProtection::get_insertRows_attr() const
    {    
    return m_insertRows_attr;
    }

    bool CT_SheetProtection::has_insertHyperlinks_attr() const
    {    
    return m_has_insertHyperlinks_attr;
    }

    void CT_SheetProtection::set_insertHyperlinks_attr(const XSD::boolean_& _insertHyperlinks_attr)
    {    
    m_has_insertHyperlinks_attr = true;
    m_insertHyperlinks_attr = _insertHyperlinks_attr;
    }

    const XSD::boolean_& CT_SheetProtection::get_insertHyperlinks_attr() const
    {    
    return m_insertHyperlinks_attr;
    }

    bool CT_SheetProtection::has_deleteColumns_attr() const
    {    
    return m_has_deleteColumns_attr;
    }

    void CT_SheetProtection::set_deleteColumns_attr(const XSD::boolean_& _deleteColumns_attr)
    {    
    m_has_deleteColumns_attr = true;
    m_deleteColumns_attr = _deleteColumns_attr;
    }

    const XSD::boolean_& CT_SheetProtection::get_deleteColumns_attr() const
    {    
    return m_deleteColumns_attr;
    }

    bool CT_SheetProtection::has_deleteRows_attr() const
    {    
    return m_has_deleteRows_attr;
    }

    void CT_SheetProtection::set_deleteRows_attr(const XSD::boolean_& _deleteRows_attr)
    {    
    m_has_deleteRows_attr = true;
    m_deleteRows_attr = _deleteRows_attr;
    }

    const XSD::boolean_& CT_SheetProtection::get_deleteRows_attr() const
    {    
    return m_deleteRows_attr;
    }

    bool CT_SheetProtection::has_selectLockedCells_attr() const
    {    
    return m_has_selectLockedCells_attr;
    }

    void CT_SheetProtection::set_selectLockedCells_attr(const XSD::boolean_& _selectLockedCells_attr)
    {    
    m_has_selectLockedCells_attr = true;
    m_selectLockedCells_attr = _selectLockedCells_attr;
    }

    const XSD::boolean_& CT_SheetProtection::get_selectLockedCells_attr() const
    {    
    return m_selectLockedCells_attr;
    }

    bool CT_SheetProtection::has_sort_attr() const
    {    
    return m_has_sort_attr;
    }

    void CT_SheetProtection::set_sort_attr(const XSD::boolean_& _sort_attr)
    {    
    m_has_sort_attr = true;
    m_sort_attr = _sort_attr;
    }

    const XSD::boolean_& CT_SheetProtection::get_sort_attr() const
    {    
    return m_sort_attr;
    }

    bool CT_SheetProtection::has_autoFilter_attr() const
    {    
    return m_has_autoFilter_attr;
    }

    void CT_SheetProtection::set_autoFilter_attr(const XSD::boolean_& _autoFilter_attr)
    {    
    m_has_autoFilter_attr = true;
    m_autoFilter_attr = _autoFilter_attr;
    }

    const XSD::boolean_& CT_SheetProtection::get_autoFilter_attr() const
    {    
    return m_autoFilter_attr;
    }

    bool CT_SheetProtection::has_pivotTables_attr() const
    {    
    return m_has_pivotTables_attr;
    }

    void CT_SheetProtection::set_pivotTables_attr(const XSD::boolean_& _pivotTables_attr)
    {    
    m_has_pivotTables_attr = true;
    m_pivotTables_attr = _pivotTables_attr;
    }

    const XSD::boolean_& CT_SheetProtection::get_pivotTables_attr() const
    {    
    return m_pivotTables_attr;
    }

    bool CT_SheetProtection::has_selectUnlockedCells_attr() const
    {    
    return m_has_selectUnlockedCells_attr;
    }

    void CT_SheetProtection::set_selectUnlockedCells_attr(const XSD::boolean_& _selectUnlockedCells_attr)
    {    
    m_has_selectUnlockedCells_attr = true;
    m_selectUnlockedCells_attr = _selectUnlockedCells_attr;
    }

    const XSD::boolean_& CT_SheetProtection::get_selectUnlockedCells_attr() const
    {    
    return m_selectUnlockedCells_attr;
    }

CT_SheetProtection* CT_SheetProtection::default_instance_ = NULL;

    // CT_ProtectedRanges
    CT_ProtectedRanges::CT_ProtectedRanges()

    {
    }
    CT_ProtectedRanges::~CT_ProtectedRanges()
{
    clear();    }
    CT_ProtectedRange* CT_ProtectedRanges::add_protectedRange()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_ProtectedRange* pNewChild = pChildGroup->mutable_protectedRange();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_ProtectedRanges::clear()
    {    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_ProtectedRanges::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_protectedRange())
            {
                (*iter)->get_protectedRange().toXmlElem("main:protectedRange", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_ProtectedRanges& CT_ProtectedRanges::default_instance()
    {    
    if (!CT_ProtectedRanges::default_instance_)
    {
        CT_ProtectedRanges::default_instance_ = new CT_ProtectedRanges();
    }
    return *CT_ProtectedRanges::default_instance_;
    }


    // CT_ProtectedRanges::ChildGroup_1
    CT_ProtectedRanges::ChildGroup_1::ChildGroup_1()
    :m_has_protectedRange(false),
    m_protectedRange(NULL)
    {
    }
    bool CT_ProtectedRanges::ChildGroup_1::has_protectedRange() const
    {    
    return m_has_protectedRange;
    }

    CT_ProtectedRange* CT_ProtectedRanges::ChildGroup_1::mutable_protectedRange()
    {    
    
    m_has_protectedRange = true;
    if (!m_protectedRange)
    {
        m_protectedRange = new CT_ProtectedRange();
    }
    return m_protectedRange;
    }

    const CT_ProtectedRange& CT_ProtectedRanges::ChildGroup_1::get_protectedRange() const
    {    
    if (m_protectedRange)
    {
        return *m_protectedRange;
    }
    return CT_ProtectedRange::default_instance();
    }

CT_ProtectedRanges* CT_ProtectedRanges::default_instance_ = NULL;

    // CT_ProtectedRange
    CT_ProtectedRange::CT_ProtectedRange()
    :m_has_password_attr(false),
    m_password_attr(NULL),
    m_has_sqref_attr(false),
    m_sqref_attr(NULL),
    m_has_name_attr(false),
    m_name_attr(NULL),
    m_has_securityDescriptor_attr(false),
    m_securityDescriptor_attr(""),
    m_has_algorithmName_attr(false),
    m_algorithmName_attr(NULL),
    m_has_hashValue_attr(false),
    m_hashValue_attr(""),
    m_has_saltValue_attr(false),
    m_saltValue_attr(""),
    m_has_spinCount_attr(false),
    m_spinCount_attr(0)
    {
    }
    CT_ProtectedRange::~CT_ProtectedRange()
{
    clear();    }
    void CT_ProtectedRange::add_securityDescriptor(const XSD::string_& _securityDescriptor)
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    pChildGroup->set_securityDescriptor(_securityDescriptor);
    m_childGroupList_1.push_back(pChildGroup);
    }

    void CT_ProtectedRange::clear()
    {    
    m_has_password_attr = false;
    
    if (m_password_attr)
    {
        delete m_password_attr;
        m_password_attr = NULL;
    }
    
    
    m_has_sqref_attr = false;
    
    if (m_sqref_attr)
    {
        delete m_sqref_attr;
        m_sqref_attr = NULL;
    }
    
    
    m_has_name_attr = false;
    
    if (m_name_attr)
    {
        delete m_name_attr;
        m_name_attr = NULL;
    }
    
    
    m_has_securityDescriptor_attr = false;
    m_securityDescriptor_attr.clear();
    
    m_has_algorithmName_attr = false;
    
    if (m_algorithmName_attr)
    {
        delete m_algorithmName_attr;
        m_algorithmName_attr = NULL;
    }
    
    
    m_has_hashValue_attr = false;
    m_hashValue_attr.clear();
    
    m_has_saltValue_attr = false;
    m_saltValue_attr.clear();
    
    m_has_spinCount_attr = false;
    m_spinCount_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_ProtectedRange::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_password_attr)
    {
        m_password_attr->toXmlAttr("password", _outStream);
    }
    
    
    if (m_has_sqref_attr)
    {
        m_sqref_attr->toXmlAttr("sqref", _outStream);
    }
    
    
    if (m_has_name_attr)
    {
        m_name_attr->toXmlAttr("name", _outStream);
    }
    
    
    if (m_has_securityDescriptor_attr)
    {
        _outStream << " " << "securityDescriptor" << "=\"" << m_securityDescriptor_attr << "\"";
    }
    
    
    if (m_has_algorithmName_attr)
    {
        m_algorithmName_attr->toXmlAttr("algorithmName", _outStream);
    }
    
    
    if (m_has_hashValue_attr)
    {
        _outStream << " " << "hashValue" << "=\"" << m_hashValue_attr << "\"";
    }
    
    
    if (m_has_saltValue_attr)
    {
        _outStream << " " << "saltValue" << "=\"" << m_saltValue_attr << "\"";
    }
    
    
    if (m_has_spinCount_attr)
    {
        _outStream << " " << "spinCount" << "=\"" << m_spinCount_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_securityDescriptor())
            {
                _outStream << "<main:securityDescriptor>" << (*iter)->get_securityDescriptor() << "</main:securityDescriptor>";
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_ProtectedRange& CT_ProtectedRange::default_instance()
    {    
    if (!CT_ProtectedRange::default_instance_)
    {
        CT_ProtectedRange::default_instance_ = new CT_ProtectedRange();
    }
    return *CT_ProtectedRange::default_instance_;
    }

    bool CT_ProtectedRange::has_password_attr() const
    {    
    return m_has_password_attr;
    }

    void CT_ProtectedRange::set_password_attr(const ST_UnsignedShortHex& _password_attr)
    {    
    m_has_password_attr = true;
    m_password_attr = new ST_UnsignedShortHex(_password_attr);
    }

    const ST_UnsignedShortHex& CT_ProtectedRange::get_password_attr() const
    {    
    if (m_password_attr)
    {
        return *m_password_attr;
    }
    return ST_UnsignedShortHex::default_instance();
    }

    bool CT_ProtectedRange::has_sqref_attr() const
    {    
    return m_has_sqref_attr;
    }

    void CT_ProtectedRange::set_sqref_attr(const ST_Sqref& _sqref_attr)
    {    
    m_has_sqref_attr = true;
    m_sqref_attr = new ST_Sqref(_sqref_attr);
    }

    const ST_Sqref& CT_ProtectedRange::get_sqref_attr() const
    {    
    if (m_sqref_attr)
    {
        return *m_sqref_attr;
    }
    return ST_Sqref::default_instance();
    }

    bool CT_ProtectedRange::has_name_attr() const
    {    
    return m_has_name_attr;
    }

    void CT_ProtectedRange::set_name_attr(const ns_s::ST_Xstring& _name_attr)
    {    
    m_has_name_attr = true;
    m_name_attr = new ns_s::ST_Xstring(_name_attr);
    }

    const ns_s::ST_Xstring& CT_ProtectedRange::get_name_attr() const
    {    
    if (m_name_attr)
    {
        return *m_name_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_ProtectedRange::has_securityDescriptor_attr() const
    {    
    return m_has_securityDescriptor_attr;
    }

    void CT_ProtectedRange::set_securityDescriptor_attr(const XSD::string_& _securityDescriptor_attr)
    {    
    m_has_securityDescriptor_attr = true;
    m_securityDescriptor_attr = _securityDescriptor_attr;
    }

    const XSD::string_& CT_ProtectedRange::get_securityDescriptor_attr() const
    {    
    return m_securityDescriptor_attr;
    }

    bool CT_ProtectedRange::has_algorithmName_attr() const
    {    
    return m_has_algorithmName_attr;
    }

    void CT_ProtectedRange::set_algorithmName_attr(const ns_s::ST_Xstring& _algorithmName_attr)
    {    
    m_has_algorithmName_attr = true;
    m_algorithmName_attr = new ns_s::ST_Xstring(_algorithmName_attr);
    }

    const ns_s::ST_Xstring& CT_ProtectedRange::get_algorithmName_attr() const
    {    
    if (m_algorithmName_attr)
    {
        return *m_algorithmName_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_ProtectedRange::has_hashValue_attr() const
    {    
    return m_has_hashValue_attr;
    }

    void CT_ProtectedRange::set_hashValue_attr(const XSD::base64Binary_& _hashValue_attr)
    {    
    m_has_hashValue_attr = true;
    m_hashValue_attr = _hashValue_attr;
    }

    const XSD::base64Binary_& CT_ProtectedRange::get_hashValue_attr() const
    {    
    return m_hashValue_attr;
    }

    bool CT_ProtectedRange::has_saltValue_attr() const
    {    
    return m_has_saltValue_attr;
    }

    void CT_ProtectedRange::set_saltValue_attr(const XSD::base64Binary_& _saltValue_attr)
    {    
    m_has_saltValue_attr = true;
    m_saltValue_attr = _saltValue_attr;
    }

    const XSD::base64Binary_& CT_ProtectedRange::get_saltValue_attr() const
    {    
    return m_saltValue_attr;
    }

    bool CT_ProtectedRange::has_spinCount_attr() const
    {    
    return m_has_spinCount_attr;
    }

    void CT_ProtectedRange::set_spinCount_attr(const XSD::unsignedInt_& _spinCount_attr)
    {    
    m_has_spinCount_attr = true;
    m_spinCount_attr = _spinCount_attr;
    }

    const XSD::unsignedInt_& CT_ProtectedRange::get_spinCount_attr() const
    {    
    return m_spinCount_attr;
    }


    // CT_ProtectedRange::ChildGroup_1
    CT_ProtectedRange::ChildGroup_1::ChildGroup_1()
    :m_has_securityDescriptor(false),
    m_securityDescriptor("")
    {
    }
    bool CT_ProtectedRange::ChildGroup_1::has_securityDescriptor() const
    {    
    return m_has_securityDescriptor;
    }

    void CT_ProtectedRange::ChildGroup_1::set_securityDescriptor(const XSD::string_& _securityDescriptor)
    {    
    
    m_has_securityDescriptor = true;
    m_securityDescriptor = _securityDescriptor;
    }

    const XSD::string_& CT_ProtectedRange::ChildGroup_1::get_securityDescriptor() const
    {    
    return m_securityDescriptor;
    }

CT_ProtectedRange* CT_ProtectedRange::default_instance_ = NULL;

    // CT_Scenario
    CT_Scenario::CT_Scenario()
    :m_has_name_attr(false),
    m_name_attr(NULL),
    m_has_locked_attr(false),
    m_locked_attr(false),
    m_has_hidden_attr(false),
    m_hidden_attr(false),
    m_has_count_attr(false),
    m_count_attr(0),
    m_has_user_attr(false),
    m_user_attr(NULL),
    m_has_comment_attr(false),
    m_comment_attr(NULL)
    {
    }
    CT_Scenario::~CT_Scenario()
{
    clear();    }
    CT_InputCells* CT_Scenario::add_inputCells()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_InputCells* pNewChild = pChildGroup->mutable_inputCells();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_Scenario::clear()
    {    
    m_has_name_attr = false;
    
    if (m_name_attr)
    {
        delete m_name_attr;
        m_name_attr = NULL;
    }
    
    
    m_has_locked_attr = false;
    m_locked_attr = false;
    
    m_has_hidden_attr = false;
    m_hidden_attr = false;
    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    m_has_user_attr = false;
    
    if (m_user_attr)
    {
        delete m_user_attr;
        m_user_attr = NULL;
    }
    
    
    m_has_comment_attr = false;
    
    if (m_comment_attr)
    {
        delete m_comment_attr;
        m_comment_attr = NULL;
    }
    
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_Scenario::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_name_attr)
    {
        m_name_attr->toXmlAttr("name", _outStream);
    }
    
    
    if (m_has_locked_attr)
    {
        _outStream << " " << "locked" << "=\"" << XSD::XMLBooleanStr(m_locked_attr) << "\"";
    }
    
    
    if (m_has_hidden_attr)
    {
        _outStream << " " << "hidden" << "=\"" << XSD::XMLBooleanStr(m_hidden_attr) << "\"";
    }
    
    
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
    
    if (m_has_user_attr)
    {
        m_user_attr->toXmlAttr("user", _outStream);
    }
    
    
    if (m_has_comment_attr)
    {
        m_comment_attr->toXmlAttr("comment", _outStream);
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_inputCells())
            {
                (*iter)->get_inputCells().toXmlElem("main:inputCells", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_Scenario& CT_Scenario::default_instance()
    {    
    if (!CT_Scenario::default_instance_)
    {
        CT_Scenario::default_instance_ = new CT_Scenario();
    }
    return *CT_Scenario::default_instance_;
    }

    bool CT_Scenario::has_name_attr() const
    {    
    return m_has_name_attr;
    }

    void CT_Scenario::set_name_attr(const ns_s::ST_Xstring& _name_attr)
    {    
    m_has_name_attr = true;
    m_name_attr = new ns_s::ST_Xstring(_name_attr);
    }

    const ns_s::ST_Xstring& CT_Scenario::get_name_attr() const
    {    
    if (m_name_attr)
    {
        return *m_name_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_Scenario::has_locked_attr() const
    {    
    return m_has_locked_attr;
    }

    void CT_Scenario::set_locked_attr(const XSD::boolean_& _locked_attr)
    {    
    m_has_locked_attr = true;
    m_locked_attr = _locked_attr;
    }

    const XSD::boolean_& CT_Scenario::get_locked_attr() const
    {    
    return m_locked_attr;
    }

    bool CT_Scenario::has_hidden_attr() const
    {    
    return m_has_hidden_attr;
    }

    void CT_Scenario::set_hidden_attr(const XSD::boolean_& _hidden_attr)
    {    
    m_has_hidden_attr = true;
    m_hidden_attr = _hidden_attr;
    }

    const XSD::boolean_& CT_Scenario::get_hidden_attr() const
    {    
    return m_hidden_attr;
    }

    bool CT_Scenario::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void CT_Scenario::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& CT_Scenario::get_count_attr() const
    {    
    return m_count_attr;
    }

    bool CT_Scenario::has_user_attr() const
    {    
    return m_has_user_attr;
    }

    void CT_Scenario::set_user_attr(const ns_s::ST_Xstring& _user_attr)
    {    
    m_has_user_attr = true;
    m_user_attr = new ns_s::ST_Xstring(_user_attr);
    }

    const ns_s::ST_Xstring& CT_Scenario::get_user_attr() const
    {    
    if (m_user_attr)
    {
        return *m_user_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_Scenario::has_comment_attr() const
    {    
    return m_has_comment_attr;
    }

    void CT_Scenario::set_comment_attr(const ns_s::ST_Xstring& _comment_attr)
    {    
    m_has_comment_attr = true;
    m_comment_attr = new ns_s::ST_Xstring(_comment_attr);
    }

    const ns_s::ST_Xstring& CT_Scenario::get_comment_attr() const
    {    
    if (m_comment_attr)
    {
        return *m_comment_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }


    // CT_Scenario::ChildGroup_1
    CT_Scenario::ChildGroup_1::ChildGroup_1()
    :m_has_inputCells(false),
    m_inputCells(NULL)
    {
    }
    bool CT_Scenario::ChildGroup_1::has_inputCells() const
    {    
    return m_has_inputCells;
    }

    CT_InputCells* CT_Scenario::ChildGroup_1::mutable_inputCells()
    {    
    
    m_has_inputCells = true;
    if (!m_inputCells)
    {
        m_inputCells = new CT_InputCells();
    }
    return m_inputCells;
    }

    const CT_InputCells& CT_Scenario::ChildGroup_1::get_inputCells() const
    {    
    if (m_inputCells)
    {
        return *m_inputCells;
    }
    return CT_InputCells::default_instance();
    }

CT_Scenario* CT_Scenario::default_instance_ = NULL;

    // CT_InputCells
    CT_InputCells::CT_InputCells()
    :m_has_r_attr(false),
    m_r_attr(NULL),
    m_has_deleted_attr(false),
    m_deleted_attr(false),
    m_has_undone_attr(false),
    m_undone_attr(false),
    m_has_val_attr(false),
    m_val_attr(NULL),
    m_has_numFmtId_attr(false),
    m_numFmtId_attr(NULL)
    {
    }
    CT_InputCells::~CT_InputCells()
{
    clear();    }
    void CT_InputCells::clear()
    {    
    m_has_r_attr = false;
    
    if (m_r_attr)
    {
        delete m_r_attr;
        m_r_attr = NULL;
    }
    
    
    m_has_deleted_attr = false;
    m_deleted_attr = false;
    
    m_has_undone_attr = false;
    m_undone_attr = false;
    
    m_has_val_attr = false;
    
    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }
    
    
    m_has_numFmtId_attr = false;
    
    if (m_numFmtId_attr)
    {
        delete m_numFmtId_attr;
        m_numFmtId_attr = NULL;
    }
    
    }

    void CT_InputCells::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_r_attr)
    {
        m_r_attr->toXmlAttr("r", _outStream);
    }
    
    
    if (m_has_deleted_attr)
    {
        _outStream << " " << "deleted" << "=\"" << XSD::XMLBooleanStr(m_deleted_attr) << "\"";
    }
    
    
    if (m_has_undone_attr)
    {
        _outStream << " " << "undone" << "=\"" << XSD::XMLBooleanStr(m_undone_attr) << "\"";
    }
    
    
    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("val", _outStream);
    }
    
    
    if (m_has_numFmtId_attr)
    {
        m_numFmtId_attr->toXmlAttr("numFmtId", _outStream);
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_InputCells& CT_InputCells::default_instance()
    {    
    if (!CT_InputCells::default_instance_)
    {
        CT_InputCells::default_instance_ = new CT_InputCells();
    }
    return *CT_InputCells::default_instance_;
    }

    bool CT_InputCells::has_r_attr() const
    {    
    return m_has_r_attr;
    }

    void CT_InputCells::set_r_attr(const ST_CellRef& _r_attr)
    {    
    m_has_r_attr = true;
    m_r_attr = new ST_CellRef(_r_attr);
    }

    const ST_CellRef& CT_InputCells::get_r_attr() const
    {    
    if (m_r_attr)
    {
        return *m_r_attr;
    }
    return ST_CellRef::default_instance();
    }

    bool CT_InputCells::has_deleted_attr() const
    {    
    return m_has_deleted_attr;
    }

    void CT_InputCells::set_deleted_attr(const XSD::boolean_& _deleted_attr)
    {    
    m_has_deleted_attr = true;
    m_deleted_attr = _deleted_attr;
    }

    const XSD::boolean_& CT_InputCells::get_deleted_attr() const
    {    
    return m_deleted_attr;
    }

    bool CT_InputCells::has_undone_attr() const
    {    
    return m_has_undone_attr;
    }

    void CT_InputCells::set_undone_attr(const XSD::boolean_& _undone_attr)
    {    
    m_has_undone_attr = true;
    m_undone_attr = _undone_attr;
    }

    const XSD::boolean_& CT_InputCells::get_undone_attr() const
    {    
    return m_undone_attr;
    }

    bool CT_InputCells::has_val_attr() const
    {    
    return m_has_val_attr;
    }

    void CT_InputCells::set_val_attr(const ns_s::ST_Xstring& _val_attr)
    {    
    m_has_val_attr = true;
    m_val_attr = new ns_s::ST_Xstring(_val_attr);
    }

    const ns_s::ST_Xstring& CT_InputCells::get_val_attr() const
    {    
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_InputCells::has_numFmtId_attr() const
    {    
    return m_has_numFmtId_attr;
    }

    void CT_InputCells::set_numFmtId_attr(const ST_NumFmtId& _numFmtId_attr)
    {    
    m_has_numFmtId_attr = true;
    m_numFmtId_attr = new ST_NumFmtId(_numFmtId_attr);
    }

    const ST_NumFmtId& CT_InputCells::get_numFmtId_attr() const
    {    
    if (m_numFmtId_attr)
    {
        return *m_numFmtId_attr;
    }
    return ST_NumFmtId::default_instance();
    }

CT_InputCells* CT_InputCells::default_instance_ = NULL;

    // CT_CellWatches
    CT_CellWatches::CT_CellWatches()

    {
    }
    CT_CellWatches::~CT_CellWatches()
{
    clear();    }
    CT_CellWatch* CT_CellWatches::add_cellWatch()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_CellWatch* pNewChild = pChildGroup->mutable_cellWatch();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_CellWatches::clear()
    {    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_CellWatches::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_cellWatch())
            {
                (*iter)->get_cellWatch().toXmlElem("main:cellWatch", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_CellWatches& CT_CellWatches::default_instance()
    {    
    if (!CT_CellWatches::default_instance_)
    {
        CT_CellWatches::default_instance_ = new CT_CellWatches();
    }
    return *CT_CellWatches::default_instance_;
    }


    // CT_CellWatches::ChildGroup_1
    CT_CellWatches::ChildGroup_1::ChildGroup_1()
    :m_has_cellWatch(false),
    m_cellWatch(NULL)
    {
    }
    bool CT_CellWatches::ChildGroup_1::has_cellWatch() const
    {    
    return m_has_cellWatch;
    }

    CT_CellWatch* CT_CellWatches::ChildGroup_1::mutable_cellWatch()
    {    
    
    m_has_cellWatch = true;
    if (!m_cellWatch)
    {
        m_cellWatch = new CT_CellWatch();
    }
    return m_cellWatch;
    }

    const CT_CellWatch& CT_CellWatches::ChildGroup_1::get_cellWatch() const
    {    
    if (m_cellWatch)
    {
        return *m_cellWatch;
    }
    return CT_CellWatch::default_instance();
    }

CT_CellWatches* CT_CellWatches::default_instance_ = NULL;

    // CT_CellWatch
    CT_CellWatch::CT_CellWatch()
    :m_has_r_attr(false),
    m_r_attr(NULL)
    {
    }
    CT_CellWatch::~CT_CellWatch()
{
    clear();    }
    void CT_CellWatch::clear()
    {    
    m_has_r_attr = false;
    
    if (m_r_attr)
    {
        delete m_r_attr;
        m_r_attr = NULL;
    }
    
    }

    void CT_CellWatch::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_r_attr)
    {
        m_r_attr->toXmlAttr("r", _outStream);
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_CellWatch& CT_CellWatch::default_instance()
    {    
    if (!CT_CellWatch::default_instance_)
    {
        CT_CellWatch::default_instance_ = new CT_CellWatch();
    }
    return *CT_CellWatch::default_instance_;
    }

    bool CT_CellWatch::has_r_attr() const
    {    
    return m_has_r_attr;
    }

    void CT_CellWatch::set_r_attr(const ST_CellRef& _r_attr)
    {    
    m_has_r_attr = true;
    m_r_attr = new ST_CellRef(_r_attr);
    }

    const ST_CellRef& CT_CellWatch::get_r_attr() const
    {    
    if (m_r_attr)
    {
        return *m_r_attr;
    }
    return ST_CellRef::default_instance();
    }

CT_CellWatch* CT_CellWatch::default_instance_ = NULL;

    // CT_Chartsheet
    CT_Chartsheet::CT_Chartsheet()
    :m_has_sheetPr(false),
    m_sheetPr(NULL),
    m_has_sheetViews(false),
    m_sheetViews(NULL),
    m_has_sheetProtection(false),
    m_sheetProtection(NULL),
    m_has_customSheetViews(false),
    m_customSheetViews(NULL),
    m_has_pageMargins(false),
    m_pageMargins(NULL),
    m_has_pageSetup(false),
    m_pageSetup(NULL),
    m_has_headerFooter(false),
    m_headerFooter(NULL),
    m_has_drawing(false),
    m_drawing(NULL),
    m_has_legacyDrawing(false),
    m_legacyDrawing(NULL),
    m_has_legacyDrawingHF(false),
    m_legacyDrawingHF(NULL),
    m_has_drawingHF(false),
    m_drawingHF(NULL),
    m_has_picture(false),
    m_picture(NULL),
    m_has_webPublishItems(false),
    m_webPublishItems(NULL),
    m_has_extLst(false),
    m_extLst(NULL)
    {
    }
    CT_Chartsheet::~CT_Chartsheet()
{
    clear();    }
    bool CT_Chartsheet::has_sheetPr() const
    {    
    return m_has_sheetPr;
    }

    CT_ChartsheetPr* CT_Chartsheet::mutable_sheetPr()
    {    
    m_has_sheetPr = true;
    if (!m_sheetPr)
    {
        m_sheetPr = new CT_ChartsheetPr();
    }
    return m_sheetPr;
    }

    const CT_ChartsheetPr& CT_Chartsheet::get_sheetPr() const
    {    
    if (m_sheetPr)
    {
        return *m_sheetPr;
    }
    return CT_ChartsheetPr::default_instance();
    }

    bool CT_Chartsheet::has_sheetViews() const
    {    
    return m_has_sheetViews;
    }

    CT_ChartsheetViews* CT_Chartsheet::mutable_sheetViews()
    {    
    m_has_sheetViews = true;
    if (!m_sheetViews)
    {
        m_sheetViews = new CT_ChartsheetViews();
    }
    return m_sheetViews;
    }

    const CT_ChartsheetViews& CT_Chartsheet::get_sheetViews() const
    {    
    if (m_sheetViews)
    {
        return *m_sheetViews;
    }
    return CT_ChartsheetViews::default_instance();
    }

    bool CT_Chartsheet::has_sheetProtection() const
    {    
    return m_has_sheetProtection;
    }

    CT_ChartsheetProtection* CT_Chartsheet::mutable_sheetProtection()
    {    
    m_has_sheetProtection = true;
    if (!m_sheetProtection)
    {
        m_sheetProtection = new CT_ChartsheetProtection();
    }
    return m_sheetProtection;
    }

    const CT_ChartsheetProtection& CT_Chartsheet::get_sheetProtection() const
    {    
    if (m_sheetProtection)
    {
        return *m_sheetProtection;
    }
    return CT_ChartsheetProtection::default_instance();
    }

    bool CT_Chartsheet::has_customSheetViews() const
    {    
    return m_has_customSheetViews;
    }

    CT_CustomChartsheetViews* CT_Chartsheet::mutable_customSheetViews()
    {    
    m_has_customSheetViews = true;
    if (!m_customSheetViews)
    {
        m_customSheetViews = new CT_CustomChartsheetViews();
    }
    return m_customSheetViews;
    }

    const CT_CustomChartsheetViews& CT_Chartsheet::get_customSheetViews() const
    {    
    if (m_customSheetViews)
    {
        return *m_customSheetViews;
    }
    return CT_CustomChartsheetViews::default_instance();
    }

    bool CT_Chartsheet::has_pageMargins() const
    {    
    return m_has_pageMargins;
    }

    CT_PageMargins* CT_Chartsheet::mutable_pageMargins()
    {    
    m_has_pageMargins = true;
    if (!m_pageMargins)
    {
        m_pageMargins = new CT_PageMargins();
    }
    return m_pageMargins;
    }

    const CT_PageMargins& CT_Chartsheet::get_pageMargins() const
    {    
    if (m_pageMargins)
    {
        return *m_pageMargins;
    }
    return CT_PageMargins::default_instance();
    }

    bool CT_Chartsheet::has_pageSetup() const
    {    
    return m_has_pageSetup;
    }

    CT_CsPageSetup* CT_Chartsheet::mutable_pageSetup()
    {    
    m_has_pageSetup = true;
    if (!m_pageSetup)
    {
        m_pageSetup = new CT_CsPageSetup();
    }
    return m_pageSetup;
    }

    const CT_CsPageSetup& CT_Chartsheet::get_pageSetup() const
    {    
    if (m_pageSetup)
    {
        return *m_pageSetup;
    }
    return CT_CsPageSetup::default_instance();
    }

    bool CT_Chartsheet::has_headerFooter() const
    {    
    return m_has_headerFooter;
    }

    CT_HeaderFooter* CT_Chartsheet::mutable_headerFooter()
    {    
    m_has_headerFooter = true;
    if (!m_headerFooter)
    {
        m_headerFooter = new CT_HeaderFooter();
    }
    return m_headerFooter;
    }

    const CT_HeaderFooter& CT_Chartsheet::get_headerFooter() const
    {    
    if (m_headerFooter)
    {
        return *m_headerFooter;
    }
    return CT_HeaderFooter::default_instance();
    }

    bool CT_Chartsheet::has_drawing() const
    {    
    return m_has_drawing;
    }

    CT_Drawing* CT_Chartsheet::mutable_drawing()
    {    
    m_has_drawing = true;
    if (!m_drawing)
    {
        m_drawing = new CT_Drawing();
    }
    return m_drawing;
    }

    const CT_Drawing& CT_Chartsheet::get_drawing() const
    {    
    if (m_drawing)
    {
        return *m_drawing;
    }
    return CT_Drawing::default_instance();
    }

    bool CT_Chartsheet::has_legacyDrawing() const
    {    
    return m_has_legacyDrawing;
    }

    CT_LegacyDrawing* CT_Chartsheet::mutable_legacyDrawing()
    {    
    m_has_legacyDrawing = true;
    if (!m_legacyDrawing)
    {
        m_legacyDrawing = new CT_LegacyDrawing();
    }
    return m_legacyDrawing;
    }

    const CT_LegacyDrawing& CT_Chartsheet::get_legacyDrawing() const
    {    
    if (m_legacyDrawing)
    {
        return *m_legacyDrawing;
    }
    return CT_LegacyDrawing::default_instance();
    }

    bool CT_Chartsheet::has_legacyDrawingHF() const
    {    
    return m_has_legacyDrawingHF;
    }

    CT_LegacyDrawing* CT_Chartsheet::mutable_legacyDrawingHF()
    {    
    m_has_legacyDrawingHF = true;
    if (!m_legacyDrawingHF)
    {
        m_legacyDrawingHF = new CT_LegacyDrawing();
    }
    return m_legacyDrawingHF;
    }

    const CT_LegacyDrawing& CT_Chartsheet::get_legacyDrawingHF() const
    {    
    if (m_legacyDrawingHF)
    {
        return *m_legacyDrawingHF;
    }
    return CT_LegacyDrawing::default_instance();
    }

    bool CT_Chartsheet::has_drawingHF() const
    {    
    return m_has_drawingHF;
    }

    CT_DrawingHF* CT_Chartsheet::mutable_drawingHF()
    {    
    m_has_drawingHF = true;
    if (!m_drawingHF)
    {
        m_drawingHF = new CT_DrawingHF();
    }
    return m_drawingHF;
    }

    const CT_DrawingHF& CT_Chartsheet::get_drawingHF() const
    {    
    if (m_drawingHF)
    {
        return *m_drawingHF;
    }
    return CT_DrawingHF::default_instance();
    }

    bool CT_Chartsheet::has_picture() const
    {    
    return m_has_picture;
    }

    CT_SheetBackgroundPicture* CT_Chartsheet::mutable_picture()
    {    
    m_has_picture = true;
    if (!m_picture)
    {
        m_picture = new CT_SheetBackgroundPicture();
    }
    return m_picture;
    }

    const CT_SheetBackgroundPicture& CT_Chartsheet::get_picture() const
    {    
    if (m_picture)
    {
        return *m_picture;
    }
    return CT_SheetBackgroundPicture::default_instance();
    }

    bool CT_Chartsheet::has_webPublishItems() const
    {    
    return m_has_webPublishItems;
    }

    CT_WebPublishItems* CT_Chartsheet::mutable_webPublishItems()
    {    
    m_has_webPublishItems = true;
    if (!m_webPublishItems)
    {
        m_webPublishItems = new CT_WebPublishItems();
    }
    return m_webPublishItems;
    }

    const CT_WebPublishItems& CT_Chartsheet::get_webPublishItems() const
    {    
    if (m_webPublishItems)
    {
        return *m_webPublishItems;
    }
    return CT_WebPublishItems::default_instance();
    }

    bool CT_Chartsheet::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* CT_Chartsheet::mutable_extLst()
    {    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& CT_Chartsheet::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

    void CT_Chartsheet::clear()
    {    }

    void CT_Chartsheet::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
            _outStream << ">";
            
    if (m_has_sheetPr)
    {
        m_sheetPr->toXmlElem("main:sheetPr", "", _outStream);;
    }
    
    if (m_has_sheetViews)
    {
        m_sheetViews->toXmlElem("main:sheetViews", "", _outStream);;
    }
    
    if (m_has_sheetProtection)
    {
        m_sheetProtection->toXmlElem("main:sheetProtection", "", _outStream);;
    }
    
    if (m_has_customSheetViews)
    {
        m_customSheetViews->toXmlElem("main:customSheetViews", "", _outStream);;
    }
    
    if (m_has_pageMargins)
    {
        m_pageMargins->toXmlElem("main:pageMargins", "", _outStream);;
    }
    
    if (m_has_pageSetup)
    {
        m_pageSetup->toXmlElem("main:pageSetup", "", _outStream);;
    }
    
    if (m_has_headerFooter)
    {
        m_headerFooter->toXmlElem("main:headerFooter", "", _outStream);;
    }
    
    if (m_has_drawing)
    {
        m_drawing->toXmlElem("main:drawing", "", _outStream);;
    }
    
    if (m_has_legacyDrawing)
    {
        m_legacyDrawing->toXmlElem("main:legacyDrawing", "", _outStream);;
    }
    
    if (m_has_legacyDrawingHF)
    {
        m_legacyDrawingHF->toXmlElem("main:legacyDrawingHF", "", _outStream);;
    }
    
    if (m_has_drawingHF)
    {
        m_drawingHF->toXmlElem("main:drawingHF", "", _outStream);;
    }
    
    if (m_has_picture)
    {
        m_picture->toXmlElem("main:picture", "", _outStream);;
    }
    
    if (m_has_webPublishItems)
    {
        m_webPublishItems->toXmlElem("main:webPublishItems", "", _outStream);;
    }
    
    if (m_has_extLst)
    {
        m_extLst->toXmlElem("main:extLst", "", _outStream);;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_Chartsheet& CT_Chartsheet::default_instance()
    {    
    if (!CT_Chartsheet::default_instance_)
    {
        CT_Chartsheet::default_instance_ = new CT_Chartsheet();
    }
    return *CT_Chartsheet::default_instance_;
    }

CT_Chartsheet* CT_Chartsheet::default_instance_ = NULL;

    // CT_ChartsheetPr
    CT_ChartsheetPr::CT_ChartsheetPr()
    :m_has_tabColor(false),
    m_tabColor(NULL),
    m_has_published_attr(false),
    m_published_attr(false),
    m_has_codeName_attr(false),
    m_codeName_attr("")
    {
    }
    CT_ChartsheetPr::~CT_ChartsheetPr()
{
    clear();    }
    bool CT_ChartsheetPr::has_tabColor() const
    {    
    return m_has_tabColor;
    }

    CT_Color* CT_ChartsheetPr::mutable_tabColor()
    {    
    m_has_tabColor = true;
    if (!m_tabColor)
    {
        m_tabColor = new CT_Color();
    }
    return m_tabColor;
    }

    const CT_Color& CT_ChartsheetPr::get_tabColor() const
    {    
    if (m_tabColor)
    {
        return *m_tabColor;
    }
    return CT_Color::default_instance();
    }

    void CT_ChartsheetPr::clear()
    {    
    m_has_published_attr = false;
    m_published_attr = false;
    
    m_has_codeName_attr = false;
    m_codeName_attr.clear();
    }

    void CT_ChartsheetPr::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_published_attr)
    {
        _outStream << " " << "published" << "=\"" << XSD::XMLBooleanStr(m_published_attr) << "\"";
    }
    
    
    if (m_has_codeName_attr)
    {
        _outStream << " " << "codeName" << "=\"" << m_codeName_attr << "\"";
    }
    
            _outStream << ">";
            
    if (m_has_tabColor)
    {
        m_tabColor->toXmlElem("main:tabColor", "", _outStream);;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_ChartsheetPr& CT_ChartsheetPr::default_instance()
    {    
    if (!CT_ChartsheetPr::default_instance_)
    {
        CT_ChartsheetPr::default_instance_ = new CT_ChartsheetPr();
    }
    return *CT_ChartsheetPr::default_instance_;
    }

    bool CT_ChartsheetPr::has_published_attr() const
    {    
    return m_has_published_attr;
    }

    void CT_ChartsheetPr::set_published_attr(const XSD::boolean_& _published_attr)
    {    
    m_has_published_attr = true;
    m_published_attr = _published_attr;
    }

    const XSD::boolean_& CT_ChartsheetPr::get_published_attr() const
    {    
    return m_published_attr;
    }

    bool CT_ChartsheetPr::has_codeName_attr() const
    {    
    return m_has_codeName_attr;
    }

    void CT_ChartsheetPr::set_codeName_attr(const XSD::string_& _codeName_attr)
    {    
    m_has_codeName_attr = true;
    m_codeName_attr = _codeName_attr;
    }

    const XSD::string_& CT_ChartsheetPr::get_codeName_attr() const
    {    
    return m_codeName_attr;
    }

CT_ChartsheetPr* CT_ChartsheetPr::default_instance_ = NULL;

    // CT_ChartsheetViews
    CT_ChartsheetViews::CT_ChartsheetViews()

    {
    }
    CT_ChartsheetViews::~CT_ChartsheetViews()
{
    clear();    }
    CT_ChartsheetView* CT_ChartsheetViews::add_sheetView()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_ChartsheetView* pNewChild = pChildGroup->mutable_sheetView();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_ExtensionList* CT_ChartsheetViews::add_extLst()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_ExtensionList* pNewChild = pChildGroup->mutable_extLst();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_ChartsheetViews::clear()
    {    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_ChartsheetViews::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_sheetView())
            {
                (*iter)->get_sheetView().toXmlElem("main:sheetView", "", _outStream);
            }
            else if ((*iter)->has_extLst())
            {
                (*iter)->get_extLst().toXmlElem("main:extLst", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_ChartsheetViews& CT_ChartsheetViews::default_instance()
    {    
    if (!CT_ChartsheetViews::default_instance_)
    {
        CT_ChartsheetViews::default_instance_ = new CT_ChartsheetViews();
    }
    return *CT_ChartsheetViews::default_instance_;
    }


    // CT_ChartsheetViews::ChildGroup_1
    CT_ChartsheetViews::ChildGroup_1::ChildGroup_1()
    :m_has_sheetView(false),
    m_sheetView(NULL),
    m_has_extLst(false),
    m_extLst(NULL)
    {
    }
    bool CT_ChartsheetViews::ChildGroup_1::has_sheetView() const
    {    
    return m_has_sheetView;
    }

    CT_ChartsheetView* CT_ChartsheetViews::ChildGroup_1::mutable_sheetView()
    {    
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_sheetView = true;
    if (!m_sheetView)
    {
        m_sheetView = new CT_ChartsheetView();
    }
    return m_sheetView;
    }

    const CT_ChartsheetView& CT_ChartsheetViews::ChildGroup_1::get_sheetView() const
    {    
    if (m_sheetView)
    {
        return *m_sheetView;
    }
    return CT_ChartsheetView::default_instance();
    }

    bool CT_ChartsheetViews::ChildGroup_1::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* CT_ChartsheetViews::ChildGroup_1::mutable_extLst()
    {    
    
    m_has_sheetView = false;
    
    if (m_sheetView)
    {
        delete m_sheetView;
        m_sheetView = NULL;
    }
    ;
    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& CT_ChartsheetViews::ChildGroup_1::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

CT_ChartsheetViews* CT_ChartsheetViews::default_instance_ = NULL;

    // CT_ChartsheetView
    CT_ChartsheetView::CT_ChartsheetView()
    :m_has_extLst(false),
    m_extLst(NULL),
    m_has_tabSelected_attr(false),
    m_tabSelected_attr(false),
    m_has_zoomScale_attr(false),
    m_zoomScale_attr(0),
    m_has_workbookViewId_attr(false),
    m_workbookViewId_attr(0),
    m_has_zoomToFit_attr(false),
    m_zoomToFit_attr(false)
    {
    }
    CT_ChartsheetView::~CT_ChartsheetView()
{
    clear();    }
    bool CT_ChartsheetView::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* CT_ChartsheetView::mutable_extLst()
    {    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& CT_ChartsheetView::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

    void CT_ChartsheetView::clear()
    {    
    m_has_tabSelected_attr = false;
    m_tabSelected_attr = false;
    
    m_has_zoomScale_attr = false;
    m_zoomScale_attr = 0;
    
    m_has_workbookViewId_attr = false;
    m_workbookViewId_attr = 0;
    
    m_has_zoomToFit_attr = false;
    m_zoomToFit_attr = false;
    }

    void CT_ChartsheetView::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_tabSelected_attr)
    {
        _outStream << " " << "tabSelected" << "=\"" << XSD::XMLBooleanStr(m_tabSelected_attr) << "\"";
    }
    
    
    if (m_has_zoomScale_attr)
    {
        _outStream << " " << "zoomScale" << "=\"" << m_zoomScale_attr << "\"";
    }
    
    
    if (m_has_workbookViewId_attr)
    {
        _outStream << " " << "workbookViewId" << "=\"" << m_workbookViewId_attr << "\"";
    }
    
    
    if (m_has_zoomToFit_attr)
    {
        _outStream << " " << "zoomToFit" << "=\"" << XSD::XMLBooleanStr(m_zoomToFit_attr) << "\"";
    }
    
            _outStream << ">";
            
    if (m_has_extLst)
    {
        m_extLst->toXmlElem("main:extLst", "", _outStream);;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_ChartsheetView& CT_ChartsheetView::default_instance()
    {    
    if (!CT_ChartsheetView::default_instance_)
    {
        CT_ChartsheetView::default_instance_ = new CT_ChartsheetView();
    }
    return *CT_ChartsheetView::default_instance_;
    }

    bool CT_ChartsheetView::has_tabSelected_attr() const
    {    
    return m_has_tabSelected_attr;
    }

    void CT_ChartsheetView::set_tabSelected_attr(const XSD::boolean_& _tabSelected_attr)
    {    
    m_has_tabSelected_attr = true;
    m_tabSelected_attr = _tabSelected_attr;
    }

    const XSD::boolean_& CT_ChartsheetView::get_tabSelected_attr() const
    {    
    return m_tabSelected_attr;
    }

    bool CT_ChartsheetView::has_zoomScale_attr() const
    {    
    return m_has_zoomScale_attr;
    }

    void CT_ChartsheetView::set_zoomScale_attr(const XSD::unsignedInt_& _zoomScale_attr)
    {    
    m_has_zoomScale_attr = true;
    m_zoomScale_attr = _zoomScale_attr;
    }

    const XSD::unsignedInt_& CT_ChartsheetView::get_zoomScale_attr() const
    {    
    return m_zoomScale_attr;
    }

    bool CT_ChartsheetView::has_workbookViewId_attr() const
    {    
    return m_has_workbookViewId_attr;
    }

    void CT_ChartsheetView::set_workbookViewId_attr(const XSD::unsignedInt_& _workbookViewId_attr)
    {    
    m_has_workbookViewId_attr = true;
    m_workbookViewId_attr = _workbookViewId_attr;
    }

    const XSD::unsignedInt_& CT_ChartsheetView::get_workbookViewId_attr() const
    {    
    return m_workbookViewId_attr;
    }

    bool CT_ChartsheetView::has_zoomToFit_attr() const
    {    
    return m_has_zoomToFit_attr;
    }

    void CT_ChartsheetView::set_zoomToFit_attr(const XSD::boolean_& _zoomToFit_attr)
    {    
    m_has_zoomToFit_attr = true;
    m_zoomToFit_attr = _zoomToFit_attr;
    }

    const XSD::boolean_& CT_ChartsheetView::get_zoomToFit_attr() const
    {    
    return m_zoomToFit_attr;
    }

CT_ChartsheetView* CT_ChartsheetView::default_instance_ = NULL;

    // CT_ChartsheetProtection
    CT_ChartsheetProtection::CT_ChartsheetProtection()
    :m_has_password_attr(false),
    m_password_attr(NULL),
    m_has_algorithmName_attr(false),
    m_algorithmName_attr(NULL),
    m_has_hashValue_attr(false),
    m_hashValue_attr(""),
    m_has_saltValue_attr(false),
    m_saltValue_attr(""),
    m_has_spinCount_attr(false),
    m_spinCount_attr(0),
    m_has_content_attr(false),
    m_content_attr(false),
    m_has_objects_attr(false),
    m_objects_attr(false)
    {
    }
    CT_ChartsheetProtection::~CT_ChartsheetProtection()
{
    clear();    }
    void CT_ChartsheetProtection::clear()
    {    
    m_has_password_attr = false;
    
    if (m_password_attr)
    {
        delete m_password_attr;
        m_password_attr = NULL;
    }
    
    
    m_has_algorithmName_attr = false;
    
    if (m_algorithmName_attr)
    {
        delete m_algorithmName_attr;
        m_algorithmName_attr = NULL;
    }
    
    
    m_has_hashValue_attr = false;
    m_hashValue_attr.clear();
    
    m_has_saltValue_attr = false;
    m_saltValue_attr.clear();
    
    m_has_spinCount_attr = false;
    m_spinCount_attr = 0;
    
    m_has_content_attr = false;
    m_content_attr = false;
    
    m_has_objects_attr = false;
    m_objects_attr = false;
    }

    void CT_ChartsheetProtection::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_password_attr)
    {
        m_password_attr->toXmlAttr("password", _outStream);
    }
    
    
    if (m_has_algorithmName_attr)
    {
        m_algorithmName_attr->toXmlAttr("algorithmName", _outStream);
    }
    
    
    if (m_has_hashValue_attr)
    {
        _outStream << " " << "hashValue" << "=\"" << m_hashValue_attr << "\"";
    }
    
    
    if (m_has_saltValue_attr)
    {
        _outStream << " " << "saltValue" << "=\"" << m_saltValue_attr << "\"";
    }
    
    
    if (m_has_spinCount_attr)
    {
        _outStream << " " << "spinCount" << "=\"" << m_spinCount_attr << "\"";
    }
    
    
    if (m_has_content_attr)
    {
        _outStream << " " << "content" << "=\"" << XSD::XMLBooleanStr(m_content_attr) << "\"";
    }
    
    
    if (m_has_objects_attr)
    {
        _outStream << " " << "objects" << "=\"" << XSD::XMLBooleanStr(m_objects_attr) << "\"";
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_ChartsheetProtection& CT_ChartsheetProtection::default_instance()
    {    
    if (!CT_ChartsheetProtection::default_instance_)
    {
        CT_ChartsheetProtection::default_instance_ = new CT_ChartsheetProtection();
    }
    return *CT_ChartsheetProtection::default_instance_;
    }

    bool CT_ChartsheetProtection::has_password_attr() const
    {    
    return m_has_password_attr;
    }

    void CT_ChartsheetProtection::set_password_attr(const ST_UnsignedShortHex& _password_attr)
    {    
    m_has_password_attr = true;
    m_password_attr = new ST_UnsignedShortHex(_password_attr);
    }

    const ST_UnsignedShortHex& CT_ChartsheetProtection::get_password_attr() const
    {    
    if (m_password_attr)
    {
        return *m_password_attr;
    }
    return ST_UnsignedShortHex::default_instance();
    }

    bool CT_ChartsheetProtection::has_algorithmName_attr() const
    {    
    return m_has_algorithmName_attr;
    }

    void CT_ChartsheetProtection::set_algorithmName_attr(const ns_s::ST_Xstring& _algorithmName_attr)
    {    
    m_has_algorithmName_attr = true;
    m_algorithmName_attr = new ns_s::ST_Xstring(_algorithmName_attr);
    }

    const ns_s::ST_Xstring& CT_ChartsheetProtection::get_algorithmName_attr() const
    {    
    if (m_algorithmName_attr)
    {
        return *m_algorithmName_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_ChartsheetProtection::has_hashValue_attr() const
    {    
    return m_has_hashValue_attr;
    }

    void CT_ChartsheetProtection::set_hashValue_attr(const XSD::base64Binary_& _hashValue_attr)
    {    
    m_has_hashValue_attr = true;
    m_hashValue_attr = _hashValue_attr;
    }

    const XSD::base64Binary_& CT_ChartsheetProtection::get_hashValue_attr() const
    {    
    return m_hashValue_attr;
    }

    bool CT_ChartsheetProtection::has_saltValue_attr() const
    {    
    return m_has_saltValue_attr;
    }

    void CT_ChartsheetProtection::set_saltValue_attr(const XSD::base64Binary_& _saltValue_attr)
    {    
    m_has_saltValue_attr = true;
    m_saltValue_attr = _saltValue_attr;
    }

    const XSD::base64Binary_& CT_ChartsheetProtection::get_saltValue_attr() const
    {    
    return m_saltValue_attr;
    }

    bool CT_ChartsheetProtection::has_spinCount_attr() const
    {    
    return m_has_spinCount_attr;
    }

    void CT_ChartsheetProtection::set_spinCount_attr(const XSD::unsignedInt_& _spinCount_attr)
    {    
    m_has_spinCount_attr = true;
    m_spinCount_attr = _spinCount_attr;
    }

    const XSD::unsignedInt_& CT_ChartsheetProtection::get_spinCount_attr() const
    {    
    return m_spinCount_attr;
    }

    bool CT_ChartsheetProtection::has_content_attr() const
    {    
    return m_has_content_attr;
    }

    void CT_ChartsheetProtection::set_content_attr(const XSD::boolean_& _content_attr)
    {    
    m_has_content_attr = true;
    m_content_attr = _content_attr;
    }

    const XSD::boolean_& CT_ChartsheetProtection::get_content_attr() const
    {    
    return m_content_attr;
    }

    bool CT_ChartsheetProtection::has_objects_attr() const
    {    
    return m_has_objects_attr;
    }

    void CT_ChartsheetProtection::set_objects_attr(const XSD::boolean_& _objects_attr)
    {    
    m_has_objects_attr = true;
    m_objects_attr = _objects_attr;
    }

    const XSD::boolean_& CT_ChartsheetProtection::get_objects_attr() const
    {    
    return m_objects_attr;
    }

CT_ChartsheetProtection* CT_ChartsheetProtection::default_instance_ = NULL;

    // CT_CsPageSetup
    CT_CsPageSetup::CT_CsPageSetup()
    :m_has_paperSize_attr(false),
    m_paperSize_attr(0),
    m_has_paperHeight_attr(false),
    m_paperHeight_attr(NULL),
    m_has_paperWidth_attr(false),
    m_paperWidth_attr(NULL),
    m_has_firstPageNumber_attr(false),
    m_firstPageNumber_attr(0),
    m_has_orientation_attr(false),
    m_orientation_attr(NULL),
    m_has_usePrinterDefaults_attr(false),
    m_usePrinterDefaults_attr(false),
    m_has_blackAndWhite_attr(false),
    m_blackAndWhite_attr(false),
    m_has_draft_attr(false),
    m_draft_attr(false),
    m_has_useFirstPageNumber_attr(false),
    m_useFirstPageNumber_attr(false),
    m_has_horizontalDpi_attr(false),
    m_horizontalDpi_attr(0),
    m_has_verticalDpi_attr(false),
    m_verticalDpi_attr(0),
    m_has_copies_attr(false),
    m_copies_attr(0),
    m_has_r_id_attr(false),
    m_r_id_attr(NULL)
    {
    }
    CT_CsPageSetup::~CT_CsPageSetup()
{
    clear();    }
    void CT_CsPageSetup::clear()
    {    
    m_has_paperSize_attr = false;
    m_paperSize_attr = 0;
    
    m_has_paperHeight_attr = false;
    
    if (m_paperHeight_attr)
    {
        delete m_paperHeight_attr;
        m_paperHeight_attr = NULL;
    }
    
    
    m_has_paperWidth_attr = false;
    
    if (m_paperWidth_attr)
    {
        delete m_paperWidth_attr;
        m_paperWidth_attr = NULL;
    }
    
    
    m_has_firstPageNumber_attr = false;
    m_firstPageNumber_attr = 0;
    
    m_has_orientation_attr = false;
    
    if (m_orientation_attr)
    {
        delete m_orientation_attr;
        m_orientation_attr = NULL;
    }
    
    
    m_has_usePrinterDefaults_attr = false;
    m_usePrinterDefaults_attr = false;
    
    m_has_blackAndWhite_attr = false;
    m_blackAndWhite_attr = false;
    
    m_has_draft_attr = false;
    m_draft_attr = false;
    
    m_has_useFirstPageNumber_attr = false;
    m_useFirstPageNumber_attr = false;
    
    m_has_horizontalDpi_attr = false;
    m_horizontalDpi_attr = 0;
    
    m_has_verticalDpi_attr = false;
    m_verticalDpi_attr = 0;
    
    m_has_copies_attr = false;
    m_copies_attr = 0;
    
    m_has_r_id_attr = false;
    
    if (m_r_id_attr)
    {
        delete m_r_id_attr;
        m_r_id_attr = NULL;
    }
    
    }

    void CT_CsPageSetup::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_paperSize_attr)
    {
        _outStream << " " << "paperSize" << "=\"" << m_paperSize_attr << "\"";
    }
    
    
    if (m_has_paperHeight_attr)
    {
        m_paperHeight_attr->toXmlAttr("paperHeight", _outStream);
    }
    
    
    if (m_has_paperWidth_attr)
    {
        m_paperWidth_attr->toXmlAttr("paperWidth", _outStream);
    }
    
    
    if (m_has_firstPageNumber_attr)
    {
        _outStream << " " << "firstPageNumber" << "=\"" << m_firstPageNumber_attr << "\"";
    }
    
    
    if (m_has_orientation_attr)
    {
        m_orientation_attr->toXmlAttr("orientation", _outStream);
    }
    
    
    if (m_has_usePrinterDefaults_attr)
    {
        _outStream << " " << "usePrinterDefaults" << "=\"" << XSD::XMLBooleanStr(m_usePrinterDefaults_attr) << "\"";
    }
    
    
    if (m_has_blackAndWhite_attr)
    {
        _outStream << " " << "blackAndWhite" << "=\"" << XSD::XMLBooleanStr(m_blackAndWhite_attr) << "\"";
    }
    
    
    if (m_has_draft_attr)
    {
        _outStream << " " << "draft" << "=\"" << XSD::XMLBooleanStr(m_draft_attr) << "\"";
    }
    
    
    if (m_has_useFirstPageNumber_attr)
    {
        _outStream << " " << "useFirstPageNumber" << "=\"" << XSD::XMLBooleanStr(m_useFirstPageNumber_attr) << "\"";
    }
    
    
    if (m_has_horizontalDpi_attr)
    {
        _outStream << " " << "horizontalDpi" << "=\"" << m_horizontalDpi_attr << "\"";
    }
    
    
    if (m_has_verticalDpi_attr)
    {
        _outStream << " " << "verticalDpi" << "=\"" << m_verticalDpi_attr << "\"";
    }
    
    
    if (m_has_copies_attr)
    {
        _outStream << " " << "copies" << "=\"" << m_copies_attr << "\"";
    }
    
    
    if (m_has_r_id_attr)
    {
        m_r_id_attr->toXmlAttr("r:id", _outStream);
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_CsPageSetup& CT_CsPageSetup::default_instance()
    {    
    if (!CT_CsPageSetup::default_instance_)
    {
        CT_CsPageSetup::default_instance_ = new CT_CsPageSetup();
    }
    return *CT_CsPageSetup::default_instance_;
    }

    bool CT_CsPageSetup::has_paperSize_attr() const
    {    
    return m_has_paperSize_attr;
    }

    void CT_CsPageSetup::set_paperSize_attr(const XSD::unsignedInt_& _paperSize_attr)
    {    
    m_has_paperSize_attr = true;
    m_paperSize_attr = _paperSize_attr;
    }

    const XSD::unsignedInt_& CT_CsPageSetup::get_paperSize_attr() const
    {    
    return m_paperSize_attr;
    }

    bool CT_CsPageSetup::has_paperHeight_attr() const
    {    
    return m_has_paperHeight_attr;
    }

    void CT_CsPageSetup::set_paperHeight_attr(const ns_s::ST_PositiveUniversalMeasure& _paperHeight_attr)
    {    
    m_has_paperHeight_attr = true;
    m_paperHeight_attr = new ns_s::ST_PositiveUniversalMeasure(_paperHeight_attr);
    }

    const ns_s::ST_PositiveUniversalMeasure& CT_CsPageSetup::get_paperHeight_attr() const
    {    
    if (m_paperHeight_attr)
    {
        return *m_paperHeight_attr;
    }
    return ns_s::ST_PositiveUniversalMeasure::default_instance();
    }

    bool CT_CsPageSetup::has_paperWidth_attr() const
    {    
    return m_has_paperWidth_attr;
    }

    void CT_CsPageSetup::set_paperWidth_attr(const ns_s::ST_PositiveUniversalMeasure& _paperWidth_attr)
    {    
    m_has_paperWidth_attr = true;
    m_paperWidth_attr = new ns_s::ST_PositiveUniversalMeasure(_paperWidth_attr);
    }

    const ns_s::ST_PositiveUniversalMeasure& CT_CsPageSetup::get_paperWidth_attr() const
    {    
    if (m_paperWidth_attr)
    {
        return *m_paperWidth_attr;
    }
    return ns_s::ST_PositiveUniversalMeasure::default_instance();
    }

    bool CT_CsPageSetup::has_firstPageNumber_attr() const
    {    
    return m_has_firstPageNumber_attr;
    }

    void CT_CsPageSetup::set_firstPageNumber_attr(const XSD::unsignedInt_& _firstPageNumber_attr)
    {    
    m_has_firstPageNumber_attr = true;
    m_firstPageNumber_attr = _firstPageNumber_attr;
    }

    const XSD::unsignedInt_& CT_CsPageSetup::get_firstPageNumber_attr() const
    {    
    return m_firstPageNumber_attr;
    }

    bool CT_CsPageSetup::has_orientation_attr() const
    {    
    return m_has_orientation_attr;
    }

    void CT_CsPageSetup::set_orientation_attr(const ST_Orientation& _orientation_attr)
    {    
    m_has_orientation_attr = true;
    m_orientation_attr = new ST_Orientation(_orientation_attr);
    }

    const ST_Orientation& CT_CsPageSetup::get_orientation_attr() const
    {    
    if (m_orientation_attr)
    {
        return *m_orientation_attr;
    }
    return ST_Orientation::default_instance();
    }

    bool CT_CsPageSetup::has_usePrinterDefaults_attr() const
    {    
    return m_has_usePrinterDefaults_attr;
    }

    void CT_CsPageSetup::set_usePrinterDefaults_attr(const XSD::boolean_& _usePrinterDefaults_attr)
    {    
    m_has_usePrinterDefaults_attr = true;
    m_usePrinterDefaults_attr = _usePrinterDefaults_attr;
    }

    const XSD::boolean_& CT_CsPageSetup::get_usePrinterDefaults_attr() const
    {    
    return m_usePrinterDefaults_attr;
    }

    bool CT_CsPageSetup::has_blackAndWhite_attr() const
    {    
    return m_has_blackAndWhite_attr;
    }

    void CT_CsPageSetup::set_blackAndWhite_attr(const XSD::boolean_& _blackAndWhite_attr)
    {    
    m_has_blackAndWhite_attr = true;
    m_blackAndWhite_attr = _blackAndWhite_attr;
    }

    const XSD::boolean_& CT_CsPageSetup::get_blackAndWhite_attr() const
    {    
    return m_blackAndWhite_attr;
    }

    bool CT_CsPageSetup::has_draft_attr() const
    {    
    return m_has_draft_attr;
    }

    void CT_CsPageSetup::set_draft_attr(const XSD::boolean_& _draft_attr)
    {    
    m_has_draft_attr = true;
    m_draft_attr = _draft_attr;
    }

    const XSD::boolean_& CT_CsPageSetup::get_draft_attr() const
    {    
    return m_draft_attr;
    }

    bool CT_CsPageSetup::has_useFirstPageNumber_attr() const
    {    
    return m_has_useFirstPageNumber_attr;
    }

    void CT_CsPageSetup::set_useFirstPageNumber_attr(const XSD::boolean_& _useFirstPageNumber_attr)
    {    
    m_has_useFirstPageNumber_attr = true;
    m_useFirstPageNumber_attr = _useFirstPageNumber_attr;
    }

    const XSD::boolean_& CT_CsPageSetup::get_useFirstPageNumber_attr() const
    {    
    return m_useFirstPageNumber_attr;
    }

    bool CT_CsPageSetup::has_horizontalDpi_attr() const
    {    
    return m_has_horizontalDpi_attr;
    }

    void CT_CsPageSetup::set_horizontalDpi_attr(const XSD::unsignedInt_& _horizontalDpi_attr)
    {    
    m_has_horizontalDpi_attr = true;
    m_horizontalDpi_attr = _horizontalDpi_attr;
    }

    const XSD::unsignedInt_& CT_CsPageSetup::get_horizontalDpi_attr() const
    {    
    return m_horizontalDpi_attr;
    }

    bool CT_CsPageSetup::has_verticalDpi_attr() const
    {    
    return m_has_verticalDpi_attr;
    }

    void CT_CsPageSetup::set_verticalDpi_attr(const XSD::unsignedInt_& _verticalDpi_attr)
    {    
    m_has_verticalDpi_attr = true;
    m_verticalDpi_attr = _verticalDpi_attr;
    }

    const XSD::unsignedInt_& CT_CsPageSetup::get_verticalDpi_attr() const
    {    
    return m_verticalDpi_attr;
    }

    bool CT_CsPageSetup::has_copies_attr() const
    {    
    return m_has_copies_attr;
    }

    void CT_CsPageSetup::set_copies_attr(const XSD::unsignedInt_& _copies_attr)
    {    
    m_has_copies_attr = true;
    m_copies_attr = _copies_attr;
    }

    const XSD::unsignedInt_& CT_CsPageSetup::get_copies_attr() const
    {    
    return m_copies_attr;
    }

    bool CT_CsPageSetup::has_r_id_attr() const
    {    
    return m_has_r_id_attr;
    }

    void CT_CsPageSetup::set_r_id_attr(const ns_r::ST_RelationshipId& _r_id_attr)
    {    
    m_has_r_id_attr = true;
    m_r_id_attr = new ns_r::ST_RelationshipId(_r_id_attr);
    }

    const ns_r::ST_RelationshipId& CT_CsPageSetup::get_r_id_attr() const
    {    
    if (m_r_id_attr)
    {
        return *m_r_id_attr;
    }
    return ns_r::ST_RelationshipId::default_instance();
    }

CT_CsPageSetup* CT_CsPageSetup::default_instance_ = NULL;

    // CT_CustomChartsheetViews
    CT_CustomChartsheetViews::CT_CustomChartsheetViews()

    {
    }
    CT_CustomChartsheetViews::~CT_CustomChartsheetViews()
{
    clear();    }
    CT_CustomChartsheetView* CT_CustomChartsheetViews::add_customSheetView()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_CustomChartsheetView* pNewChild = pChildGroup->mutable_customSheetView();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_CustomChartsheetViews::clear()
    {    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_CustomChartsheetViews::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_customSheetView())
            {
                (*iter)->get_customSheetView().toXmlElem("main:customSheetView", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_CustomChartsheetViews& CT_CustomChartsheetViews::default_instance()
    {    
    if (!CT_CustomChartsheetViews::default_instance_)
    {
        CT_CustomChartsheetViews::default_instance_ = new CT_CustomChartsheetViews();
    }
    return *CT_CustomChartsheetViews::default_instance_;
    }


    // CT_CustomChartsheetViews::ChildGroup_1
    CT_CustomChartsheetViews::ChildGroup_1::ChildGroup_1()
    :m_has_customSheetView(false),
    m_customSheetView(NULL)
    {
    }
    bool CT_CustomChartsheetViews::ChildGroup_1::has_customSheetView() const
    {    
    return m_has_customSheetView;
    }

    CT_CustomChartsheetView* CT_CustomChartsheetViews::ChildGroup_1::mutable_customSheetView()
    {    
    
    m_has_customSheetView = true;
    if (!m_customSheetView)
    {
        m_customSheetView = new CT_CustomChartsheetView();
    }
    return m_customSheetView;
    }

    const CT_CustomChartsheetView& CT_CustomChartsheetViews::ChildGroup_1::get_customSheetView() const
    {    
    if (m_customSheetView)
    {
        return *m_customSheetView;
    }
    return CT_CustomChartsheetView::default_instance();
    }

CT_CustomChartsheetViews* CT_CustomChartsheetViews::default_instance_ = NULL;

    // CT_CustomChartsheetView
    CT_CustomChartsheetView::CT_CustomChartsheetView()
    :m_has_pageMargins(false),
    m_pageMargins(NULL),
    m_has_pageSetup(false),
    m_pageSetup(NULL),
    m_has_headerFooter(false),
    m_headerFooter(NULL),
    m_has_guid_attr(false),
    m_guid_attr(NULL),
    m_has_scale_attr(false),
    m_scale_attr(0),
    m_has_state_attr(false),
    m_state_attr(NULL),
    m_has_zoomToFit_attr(false),
    m_zoomToFit_attr(false)
    {
    }
    CT_CustomChartsheetView::~CT_CustomChartsheetView()
{
    clear();    }
    bool CT_CustomChartsheetView::has_pageMargins() const
    {    
    return m_has_pageMargins;
    }

    CT_PageMargins* CT_CustomChartsheetView::mutable_pageMargins()
    {    
    m_has_pageMargins = true;
    if (!m_pageMargins)
    {
        m_pageMargins = new CT_PageMargins();
    }
    return m_pageMargins;
    }

    const CT_PageMargins& CT_CustomChartsheetView::get_pageMargins() const
    {    
    if (m_pageMargins)
    {
        return *m_pageMargins;
    }
    return CT_PageMargins::default_instance();
    }

    bool CT_CustomChartsheetView::has_pageSetup() const
    {    
    return m_has_pageSetup;
    }

    CT_CsPageSetup* CT_CustomChartsheetView::mutable_pageSetup()
    {    
    m_has_pageSetup = true;
    if (!m_pageSetup)
    {
        m_pageSetup = new CT_CsPageSetup();
    }
    return m_pageSetup;
    }

    const CT_CsPageSetup& CT_CustomChartsheetView::get_pageSetup() const
    {    
    if (m_pageSetup)
    {
        return *m_pageSetup;
    }
    return CT_CsPageSetup::default_instance();
    }

    bool CT_CustomChartsheetView::has_headerFooter() const
    {    
    return m_has_headerFooter;
    }

    CT_HeaderFooter* CT_CustomChartsheetView::mutable_headerFooter()
    {    
    m_has_headerFooter = true;
    if (!m_headerFooter)
    {
        m_headerFooter = new CT_HeaderFooter();
    }
    return m_headerFooter;
    }

    const CT_HeaderFooter& CT_CustomChartsheetView::get_headerFooter() const
    {    
    if (m_headerFooter)
    {
        return *m_headerFooter;
    }
    return CT_HeaderFooter::default_instance();
    }

    void CT_CustomChartsheetView::clear()
    {    
    m_has_guid_attr = false;
    
    if (m_guid_attr)
    {
        delete m_guid_attr;
        m_guid_attr = NULL;
    }
    
    
    m_has_scale_attr = false;
    m_scale_attr = 0;
    
    m_has_state_attr = false;
    
    if (m_state_attr)
    {
        delete m_state_attr;
        m_state_attr = NULL;
    }
    
    
    m_has_zoomToFit_attr = false;
    m_zoomToFit_attr = false;
    }

    void CT_CustomChartsheetView::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_guid_attr)
    {
        m_guid_attr->toXmlAttr("guid", _outStream);
    }
    
    
    if (m_has_scale_attr)
    {
        _outStream << " " << "scale" << "=\"" << m_scale_attr << "\"";
    }
    
    
    if (m_has_state_attr)
    {
        m_state_attr->toXmlAttr("state", _outStream);
    }
    
    
    if (m_has_zoomToFit_attr)
    {
        _outStream << " " << "zoomToFit" << "=\"" << XSD::XMLBooleanStr(m_zoomToFit_attr) << "\"";
    }
    
            _outStream << ">";
            
    if (m_has_pageMargins)
    {
        m_pageMargins->toXmlElem("main:pageMargins", "", _outStream);;
    }
    
    if (m_has_pageSetup)
    {
        m_pageSetup->toXmlElem("main:pageSetup", "", _outStream);;
    }
    
    if (m_has_headerFooter)
    {
        m_headerFooter->toXmlElem("main:headerFooter", "", _outStream);;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_CustomChartsheetView& CT_CustomChartsheetView::default_instance()
    {    
    if (!CT_CustomChartsheetView::default_instance_)
    {
        CT_CustomChartsheetView::default_instance_ = new CT_CustomChartsheetView();
    }
    return *CT_CustomChartsheetView::default_instance_;
    }

    bool CT_CustomChartsheetView::has_guid_attr() const
    {    
    return m_has_guid_attr;
    }

    void CT_CustomChartsheetView::set_guid_attr(const ns_s::ST_Guid& _guid_attr)
    {    
    m_has_guid_attr = true;
    m_guid_attr = new ns_s::ST_Guid(_guid_attr);
    }

    const ns_s::ST_Guid& CT_CustomChartsheetView::get_guid_attr() const
    {    
    if (m_guid_attr)
    {
        return *m_guid_attr;
    }
    return ns_s::ST_Guid::default_instance();
    }

    bool CT_CustomChartsheetView::has_scale_attr() const
    {    
    return m_has_scale_attr;
    }

    void CT_CustomChartsheetView::set_scale_attr(const XSD::unsignedInt_& _scale_attr)
    {    
    m_has_scale_attr = true;
    m_scale_attr = _scale_attr;
    }

    const XSD::unsignedInt_& CT_CustomChartsheetView::get_scale_attr() const
    {    
    return m_scale_attr;
    }

    bool CT_CustomChartsheetView::has_state_attr() const
    {    
    return m_has_state_attr;
    }

    void CT_CustomChartsheetView::set_state_attr(const ST_SheetState& _state_attr)
    {    
    m_has_state_attr = true;
    m_state_attr = new ST_SheetState(_state_attr);
    }

    const ST_SheetState& CT_CustomChartsheetView::get_state_attr() const
    {    
    if (m_state_attr)
    {
        return *m_state_attr;
    }
    return ST_SheetState::default_instance();
    }

    bool CT_CustomChartsheetView::has_zoomToFit_attr() const
    {    
    return m_has_zoomToFit_attr;
    }

    void CT_CustomChartsheetView::set_zoomToFit_attr(const XSD::boolean_& _zoomToFit_attr)
    {    
    m_has_zoomToFit_attr = true;
    m_zoomToFit_attr = _zoomToFit_attr;
    }

    const XSD::boolean_& CT_CustomChartsheetView::get_zoomToFit_attr() const
    {    
    return m_zoomToFit_attr;
    }

CT_CustomChartsheetView* CT_CustomChartsheetView::default_instance_ = NULL;

    // CT_CustomProperties
    CT_CustomProperties::CT_CustomProperties()

    {
    }
    CT_CustomProperties::~CT_CustomProperties()
{
    clear();    }
    CT_CustomProperty* CT_CustomProperties::add_customPr()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_CustomProperty* pNewChild = pChildGroup->mutable_customPr();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_CustomProperties::clear()
    {    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_CustomProperties::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_customPr())
            {
                (*iter)->get_customPr().toXmlElem("main:customPr", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_CustomProperties& CT_CustomProperties::default_instance()
    {    
    if (!CT_CustomProperties::default_instance_)
    {
        CT_CustomProperties::default_instance_ = new CT_CustomProperties();
    }
    return *CT_CustomProperties::default_instance_;
    }


    // CT_CustomProperties::ChildGroup_1
    CT_CustomProperties::ChildGroup_1::ChildGroup_1()
    :m_has_customPr(false),
    m_customPr(NULL)
    {
    }
    bool CT_CustomProperties::ChildGroup_1::has_customPr() const
    {    
    return m_has_customPr;
    }

    CT_CustomProperty* CT_CustomProperties::ChildGroup_1::mutable_customPr()
    {    
    
    m_has_customPr = true;
    if (!m_customPr)
    {
        m_customPr = new CT_CustomProperty();
    }
    return m_customPr;
    }

    const CT_CustomProperty& CT_CustomProperties::ChildGroup_1::get_customPr() const
    {    
    if (m_customPr)
    {
        return *m_customPr;
    }
    return CT_CustomProperty::default_instance();
    }

CT_CustomProperties* CT_CustomProperties::default_instance_ = NULL;

    // CT_CustomProperty
    CT_CustomProperty::CT_CustomProperty()
    :m_has_name_attr(false),
    m_name_attr(NULL),
    m_has_r_id_attr(false),
    m_r_id_attr(NULL)
    {
    }
    CT_CustomProperty::~CT_CustomProperty()
{
    clear();    }
    void CT_CustomProperty::clear()
    {    
    m_has_name_attr = false;
    
    if (m_name_attr)
    {
        delete m_name_attr;
        m_name_attr = NULL;
    }
    
    
    m_has_r_id_attr = false;
    
    if (m_r_id_attr)
    {
        delete m_r_id_attr;
        m_r_id_attr = NULL;
    }
    
    }

    void CT_CustomProperty::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_name_attr)
    {
        m_name_attr->toXmlAttr("name", _outStream);
    }
    
    
    if (m_has_r_id_attr)
    {
        m_r_id_attr->toXmlAttr("r:id", _outStream);
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_CustomProperty& CT_CustomProperty::default_instance()
    {    
    if (!CT_CustomProperty::default_instance_)
    {
        CT_CustomProperty::default_instance_ = new CT_CustomProperty();
    }
    return *CT_CustomProperty::default_instance_;
    }

    bool CT_CustomProperty::has_name_attr() const
    {    
    return m_has_name_attr;
    }

    void CT_CustomProperty::set_name_attr(const ns_s::ST_Xstring& _name_attr)
    {    
    m_has_name_attr = true;
    m_name_attr = new ns_s::ST_Xstring(_name_attr);
    }

    const ns_s::ST_Xstring& CT_CustomProperty::get_name_attr() const
    {    
    if (m_name_attr)
    {
        return *m_name_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_CustomProperty::has_r_id_attr() const
    {    
    return m_has_r_id_attr;
    }

    void CT_CustomProperty::set_r_id_attr(const ns_r::ST_RelationshipId& _r_id_attr)
    {    
    m_has_r_id_attr = true;
    m_r_id_attr = new ns_r::ST_RelationshipId(_r_id_attr);
    }

    const ns_r::ST_RelationshipId& CT_CustomProperty::get_r_id_attr() const
    {    
    if (m_r_id_attr)
    {
        return *m_r_id_attr;
    }
    return ns_r::ST_RelationshipId::default_instance();
    }

CT_CustomProperty* CT_CustomProperty::default_instance_ = NULL;

    // CT_OleObjects
    CT_OleObjects::CT_OleObjects()

    {
    }
    CT_OleObjects::~CT_OleObjects()
{
    clear();    }
    CT_OleObject* CT_OleObjects::add_oleObject()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OleObject* pNewChild = pChildGroup->mutable_oleObject();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_OleObjects::clear()
    {    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_OleObjects::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_oleObject())
            {
                (*iter)->get_oleObject().toXmlElem("main:oleObject", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_OleObjects& CT_OleObjects::default_instance()
    {    
    if (!CT_OleObjects::default_instance_)
    {
        CT_OleObjects::default_instance_ = new CT_OleObjects();
    }
    return *CT_OleObjects::default_instance_;
    }


    // CT_OleObjects::ChildGroup_1
    CT_OleObjects::ChildGroup_1::ChildGroup_1()
    :m_has_oleObject(false),
    m_oleObject(NULL)
    {
    }
    bool CT_OleObjects::ChildGroup_1::has_oleObject() const
    {    
    return m_has_oleObject;
    }

    CT_OleObject* CT_OleObjects::ChildGroup_1::mutable_oleObject()
    {    
    
    m_has_oleObject = true;
    if (!m_oleObject)
    {
        m_oleObject = new CT_OleObject();
    }
    return m_oleObject;
    }

    const CT_OleObject& CT_OleObjects::ChildGroup_1::get_oleObject() const
    {    
    if (m_oleObject)
    {
        return *m_oleObject;
    }
    return CT_OleObject::default_instance();
    }

CT_OleObjects* CT_OleObjects::default_instance_ = NULL;

    // CT_OleObject
    CT_OleObject::CT_OleObject()
    :m_has_objectPr(false),
    m_objectPr(NULL),
    m_has_progId_attr(false),
    m_progId_attr(""),
    m_has_dvAspect_attr(false),
    m_dvAspect_attr(NULL),
    m_has_link_attr(false),
    m_link_attr(NULL),
    m_has_oleUpdate_attr(false),
    m_oleUpdate_attr(NULL),
    m_has_autoLoad_attr(false),
    m_autoLoad_attr(false),
    m_has_shapeId_attr(false),
    m_shapeId_attr(0),
    m_has_r_id_attr(false),
    m_r_id_attr(NULL)
    {
    }
    CT_OleObject::~CT_OleObject()
{
    clear();    }
    bool CT_OleObject::has_objectPr() const
    {    
    return m_has_objectPr;
    }

    CT_ObjectPr* CT_OleObject::mutable_objectPr()
    {    
    m_has_objectPr = true;
    if (!m_objectPr)
    {
        m_objectPr = new CT_ObjectPr();
    }
    return m_objectPr;
    }

    const CT_ObjectPr& CT_OleObject::get_objectPr() const
    {    
    if (m_objectPr)
    {
        return *m_objectPr;
    }
    return CT_ObjectPr::default_instance();
    }

    void CT_OleObject::clear()
    {    
    m_has_progId_attr = false;
    m_progId_attr.clear();
    
    m_has_dvAspect_attr = false;
    
    if (m_dvAspect_attr)
    {
        delete m_dvAspect_attr;
        m_dvAspect_attr = NULL;
    }
    
    
    m_has_link_attr = false;
    
    if (m_link_attr)
    {
        delete m_link_attr;
        m_link_attr = NULL;
    }
    
    
    m_has_oleUpdate_attr = false;
    
    if (m_oleUpdate_attr)
    {
        delete m_oleUpdate_attr;
        m_oleUpdate_attr = NULL;
    }
    
    
    m_has_autoLoad_attr = false;
    m_autoLoad_attr = false;
    
    m_has_shapeId_attr = false;
    m_shapeId_attr = 0;
    
    m_has_r_id_attr = false;
    
    if (m_r_id_attr)
    {
        delete m_r_id_attr;
        m_r_id_attr = NULL;
    }
    
    }

    void CT_OleObject::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_progId_attr)
    {
        _outStream << " " << "progId" << "=\"" << m_progId_attr << "\"";
    }
    
    
    if (m_has_dvAspect_attr)
    {
        m_dvAspect_attr->toXmlAttr("dvAspect", _outStream);
    }
    
    
    if (m_has_link_attr)
    {
        m_link_attr->toXmlAttr("link", _outStream);
    }
    
    
    if (m_has_oleUpdate_attr)
    {
        m_oleUpdate_attr->toXmlAttr("oleUpdate", _outStream);
    }
    
    
    if (m_has_autoLoad_attr)
    {
        _outStream << " " << "autoLoad" << "=\"" << XSD::XMLBooleanStr(m_autoLoad_attr) << "\"";
    }
    
    
    if (m_has_shapeId_attr)
    {
        _outStream << " " << "shapeId" << "=\"" << m_shapeId_attr << "\"";
    }
    
    
    if (m_has_r_id_attr)
    {
        m_r_id_attr->toXmlAttr("r:id", _outStream);
    }
    
            _outStream << ">";
            
    if (m_has_objectPr)
    {
        m_objectPr->toXmlElem("main:objectPr", "", _outStream);;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_OleObject& CT_OleObject::default_instance()
    {    
    if (!CT_OleObject::default_instance_)
    {
        CT_OleObject::default_instance_ = new CT_OleObject();
    }
    return *CT_OleObject::default_instance_;
    }

    bool CT_OleObject::has_progId_attr() const
    {    
    return m_has_progId_attr;
    }

    void CT_OleObject::set_progId_attr(const XSD::string_& _progId_attr)
    {    
    m_has_progId_attr = true;
    m_progId_attr = _progId_attr;
    }

    const XSD::string_& CT_OleObject::get_progId_attr() const
    {    
    return m_progId_attr;
    }

    bool CT_OleObject::has_dvAspect_attr() const
    {    
    return m_has_dvAspect_attr;
    }

    void CT_OleObject::set_dvAspect_attr(const ST_DvAspect& _dvAspect_attr)
    {    
    m_has_dvAspect_attr = true;
    m_dvAspect_attr = new ST_DvAspect(_dvAspect_attr);
    }

    const ST_DvAspect& CT_OleObject::get_dvAspect_attr() const
    {    
    if (m_dvAspect_attr)
    {
        return *m_dvAspect_attr;
    }
    return ST_DvAspect::default_instance();
    }

    bool CT_OleObject::has_link_attr() const
    {    
    return m_has_link_attr;
    }

    void CT_OleObject::set_link_attr(const ns_s::ST_Xstring& _link_attr)
    {    
    m_has_link_attr = true;
    m_link_attr = new ns_s::ST_Xstring(_link_attr);
    }

    const ns_s::ST_Xstring& CT_OleObject::get_link_attr() const
    {    
    if (m_link_attr)
    {
        return *m_link_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_OleObject::has_oleUpdate_attr() const
    {    
    return m_has_oleUpdate_attr;
    }

    void CT_OleObject::set_oleUpdate_attr(const ST_OleUpdate& _oleUpdate_attr)
    {    
    m_has_oleUpdate_attr = true;
    m_oleUpdate_attr = new ST_OleUpdate(_oleUpdate_attr);
    }

    const ST_OleUpdate& CT_OleObject::get_oleUpdate_attr() const
    {    
    if (m_oleUpdate_attr)
    {
        return *m_oleUpdate_attr;
    }
    return ST_OleUpdate::default_instance();
    }

    bool CT_OleObject::has_autoLoad_attr() const
    {    
    return m_has_autoLoad_attr;
    }

    void CT_OleObject::set_autoLoad_attr(const XSD::boolean_& _autoLoad_attr)
    {    
    m_has_autoLoad_attr = true;
    m_autoLoad_attr = _autoLoad_attr;
    }

    const XSD::boolean_& CT_OleObject::get_autoLoad_attr() const
    {    
    return m_autoLoad_attr;
    }

    bool CT_OleObject::has_shapeId_attr() const
    {    
    return m_has_shapeId_attr;
    }

    void CT_OleObject::set_shapeId_attr(const XSD::unsignedInt_& _shapeId_attr)
    {    
    m_has_shapeId_attr = true;
    m_shapeId_attr = _shapeId_attr;
    }

    const XSD::unsignedInt_& CT_OleObject::get_shapeId_attr() const
    {    
    return m_shapeId_attr;
    }

    bool CT_OleObject::has_r_id_attr() const
    {    
    return m_has_r_id_attr;
    }

    void CT_OleObject::set_r_id_attr(const ns_r::ST_RelationshipId& _r_id_attr)
    {    
    m_has_r_id_attr = true;
    m_r_id_attr = new ns_r::ST_RelationshipId(_r_id_attr);
    }

    const ns_r::ST_RelationshipId& CT_OleObject::get_r_id_attr() const
    {    
    if (m_r_id_attr)
    {
        return *m_r_id_attr;
    }
    return ns_r::ST_RelationshipId::default_instance();
    }

CT_OleObject* CT_OleObject::default_instance_ = NULL;

    // CT_ObjectPr
    CT_ObjectPr::CT_ObjectPr()
    :m_has_anchor(false),
    m_anchor(NULL),
    m_has_locked_attr(false),
    m_locked_attr(false),
    m_has_defaultSize_attr(false),
    m_defaultSize_attr(false),
    m_has_print_attr(false),
    m_print_attr(false),
    m_has_disabled_attr(false),
    m_disabled_attr(false),
    m_has_uiObject_attr(false),
    m_uiObject_attr(false),
    m_has_autoFill_attr(false),
    m_autoFill_attr(false),
    m_has_autoLine_attr(false),
    m_autoLine_attr(false),
    m_has_autoPict_attr(false),
    m_autoPict_attr(false),
    m_has_macro_attr(false),
    m_macro_attr(NULL),
    m_has_altText_attr(false),
    m_altText_attr(NULL),
    m_has_dde_attr(false),
    m_dde_attr(false),
    m_has_r_id_attr(false),
    m_r_id_attr(NULL)
    {
    }
    CT_ObjectPr::~CT_ObjectPr()
{
    clear();    }
    bool CT_ObjectPr::has_anchor() const
    {    
    return m_has_anchor;
    }

    CT_ObjectAnchor* CT_ObjectPr::mutable_anchor()
    {    
    m_has_anchor = true;
    if (!m_anchor)
    {
        m_anchor = new CT_ObjectAnchor();
    }
    return m_anchor;
    }

    const CT_ObjectAnchor& CT_ObjectPr::get_anchor() const
    {    
    if (m_anchor)
    {
        return *m_anchor;
    }
    return CT_ObjectAnchor::default_instance();
    }

    void CT_ObjectPr::clear()
    {    
    m_has_locked_attr = false;
    m_locked_attr = false;
    
    m_has_defaultSize_attr = false;
    m_defaultSize_attr = false;
    
    m_has_print_attr = false;
    m_print_attr = false;
    
    m_has_disabled_attr = false;
    m_disabled_attr = false;
    
    m_has_uiObject_attr = false;
    m_uiObject_attr = false;
    
    m_has_autoFill_attr = false;
    m_autoFill_attr = false;
    
    m_has_autoLine_attr = false;
    m_autoLine_attr = false;
    
    m_has_autoPict_attr = false;
    m_autoPict_attr = false;
    
    m_has_macro_attr = false;
    
    if (m_macro_attr)
    {
        delete m_macro_attr;
        m_macro_attr = NULL;
    }
    
    
    m_has_altText_attr = false;
    
    if (m_altText_attr)
    {
        delete m_altText_attr;
        m_altText_attr = NULL;
    }
    
    
    m_has_dde_attr = false;
    m_dde_attr = false;
    
    m_has_r_id_attr = false;
    
    if (m_r_id_attr)
    {
        delete m_r_id_attr;
        m_r_id_attr = NULL;
    }
    
    }

    void CT_ObjectPr::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_locked_attr)
    {
        _outStream << " " << "locked" << "=\"" << XSD::XMLBooleanStr(m_locked_attr) << "\"";
    }
    
    
    if (m_has_defaultSize_attr)
    {
        _outStream << " " << "defaultSize" << "=\"" << XSD::XMLBooleanStr(m_defaultSize_attr) << "\"";
    }
    
    
    if (m_has_print_attr)
    {
        _outStream << " " << "print" << "=\"" << XSD::XMLBooleanStr(m_print_attr) << "\"";
    }
    
    
    if (m_has_disabled_attr)
    {
        _outStream << " " << "disabled" << "=\"" << XSD::XMLBooleanStr(m_disabled_attr) << "\"";
    }
    
    
    if (m_has_uiObject_attr)
    {
        _outStream << " " << "uiObject" << "=\"" << XSD::XMLBooleanStr(m_uiObject_attr) << "\"";
    }
    
    
    if (m_has_autoFill_attr)
    {
        _outStream << " " << "autoFill" << "=\"" << XSD::XMLBooleanStr(m_autoFill_attr) << "\"";
    }
    
    
    if (m_has_autoLine_attr)
    {
        _outStream << " " << "autoLine" << "=\"" << XSD::XMLBooleanStr(m_autoLine_attr) << "\"";
    }
    
    
    if (m_has_autoPict_attr)
    {
        _outStream << " " << "autoPict" << "=\"" << XSD::XMLBooleanStr(m_autoPict_attr) << "\"";
    }
    
    
    if (m_has_macro_attr)
    {
        m_macro_attr->toXmlAttr("macro", _outStream);
    }
    
    
    if (m_has_altText_attr)
    {
        m_altText_attr->toXmlAttr("altText", _outStream);
    }
    
    
    if (m_has_dde_attr)
    {
        _outStream << " " << "dde" << "=\"" << XSD::XMLBooleanStr(m_dde_attr) << "\"";
    }
    
    
    if (m_has_r_id_attr)
    {
        m_r_id_attr->toXmlAttr("r:id", _outStream);
    }
    
            _outStream << ">";
            
    if (m_has_anchor)
    {
        m_anchor->toXmlElem("main:anchor", "", _outStream);;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_ObjectPr& CT_ObjectPr::default_instance()
    {    
    if (!CT_ObjectPr::default_instance_)
    {
        CT_ObjectPr::default_instance_ = new CT_ObjectPr();
    }
    return *CT_ObjectPr::default_instance_;
    }

    bool CT_ObjectPr::has_locked_attr() const
    {    
    return m_has_locked_attr;
    }

    void CT_ObjectPr::set_locked_attr(const XSD::boolean_& _locked_attr)
    {    
    m_has_locked_attr = true;
    m_locked_attr = _locked_attr;
    }

    const XSD::boolean_& CT_ObjectPr::get_locked_attr() const
    {    
    return m_locked_attr;
    }

    bool CT_ObjectPr::has_defaultSize_attr() const
    {    
    return m_has_defaultSize_attr;
    }

    void CT_ObjectPr::set_defaultSize_attr(const XSD::boolean_& _defaultSize_attr)
    {    
    m_has_defaultSize_attr = true;
    m_defaultSize_attr = _defaultSize_attr;
    }

    const XSD::boolean_& CT_ObjectPr::get_defaultSize_attr() const
    {    
    return m_defaultSize_attr;
    }

    bool CT_ObjectPr::has_print_attr() const
    {    
    return m_has_print_attr;
    }

    void CT_ObjectPr::set_print_attr(const XSD::boolean_& _print_attr)
    {    
    m_has_print_attr = true;
    m_print_attr = _print_attr;
    }

    const XSD::boolean_& CT_ObjectPr::get_print_attr() const
    {    
    return m_print_attr;
    }

    bool CT_ObjectPr::has_disabled_attr() const
    {    
    return m_has_disabled_attr;
    }

    void CT_ObjectPr::set_disabled_attr(const XSD::boolean_& _disabled_attr)
    {    
    m_has_disabled_attr = true;
    m_disabled_attr = _disabled_attr;
    }

    const XSD::boolean_& CT_ObjectPr::get_disabled_attr() const
    {    
    return m_disabled_attr;
    }

    bool CT_ObjectPr::has_uiObject_attr() const
    {    
    return m_has_uiObject_attr;
    }

    void CT_ObjectPr::set_uiObject_attr(const XSD::boolean_& _uiObject_attr)
    {    
    m_has_uiObject_attr = true;
    m_uiObject_attr = _uiObject_attr;
    }

    const XSD::boolean_& CT_ObjectPr::get_uiObject_attr() const
    {    
    return m_uiObject_attr;
    }

    bool CT_ObjectPr::has_autoFill_attr() const
    {    
    return m_has_autoFill_attr;
    }

    void CT_ObjectPr::set_autoFill_attr(const XSD::boolean_& _autoFill_attr)
    {    
    m_has_autoFill_attr = true;
    m_autoFill_attr = _autoFill_attr;
    }

    const XSD::boolean_& CT_ObjectPr::get_autoFill_attr() const
    {    
    return m_autoFill_attr;
    }

    bool CT_ObjectPr::has_autoLine_attr() const
    {    
    return m_has_autoLine_attr;
    }

    void CT_ObjectPr::set_autoLine_attr(const XSD::boolean_& _autoLine_attr)
    {    
    m_has_autoLine_attr = true;
    m_autoLine_attr = _autoLine_attr;
    }

    const XSD::boolean_& CT_ObjectPr::get_autoLine_attr() const
    {    
    return m_autoLine_attr;
    }

    bool CT_ObjectPr::has_autoPict_attr() const
    {    
    return m_has_autoPict_attr;
    }

    void CT_ObjectPr::set_autoPict_attr(const XSD::boolean_& _autoPict_attr)
    {    
    m_has_autoPict_attr = true;
    m_autoPict_attr = _autoPict_attr;
    }

    const XSD::boolean_& CT_ObjectPr::get_autoPict_attr() const
    {    
    return m_autoPict_attr;
    }

    bool CT_ObjectPr::has_macro_attr() const
    {    
    return m_has_macro_attr;
    }

    void CT_ObjectPr::set_macro_attr(const ST_Formula& _macro_attr)
    {    
    m_has_macro_attr = true;
    m_macro_attr = new ST_Formula(_macro_attr);
    }

    const ST_Formula& CT_ObjectPr::get_macro_attr() const
    {    
    if (m_macro_attr)
    {
        return *m_macro_attr;
    }
    return ST_Formula::default_instance();
    }

    bool CT_ObjectPr::has_altText_attr() const
    {    
    return m_has_altText_attr;
    }

    void CT_ObjectPr::set_altText_attr(const ns_s::ST_Xstring& _altText_attr)
    {    
    m_has_altText_attr = true;
    m_altText_attr = new ns_s::ST_Xstring(_altText_attr);
    }

    const ns_s::ST_Xstring& CT_ObjectPr::get_altText_attr() const
    {    
    if (m_altText_attr)
    {
        return *m_altText_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_ObjectPr::has_dde_attr() const
    {    
    return m_has_dde_attr;
    }

    void CT_ObjectPr::set_dde_attr(const XSD::boolean_& _dde_attr)
    {    
    m_has_dde_attr = true;
    m_dde_attr = _dde_attr;
    }

    const XSD::boolean_& CT_ObjectPr::get_dde_attr() const
    {    
    return m_dde_attr;
    }

    bool CT_ObjectPr::has_r_id_attr() const
    {    
    return m_has_r_id_attr;
    }

    void CT_ObjectPr::set_r_id_attr(const ns_r::ST_RelationshipId& _r_id_attr)
    {    
    m_has_r_id_attr = true;
    m_r_id_attr = new ns_r::ST_RelationshipId(_r_id_attr);
    }

    const ns_r::ST_RelationshipId& CT_ObjectPr::get_r_id_attr() const
    {    
    if (m_r_id_attr)
    {
        return *m_r_id_attr;
    }
    return ns_r::ST_RelationshipId::default_instance();
    }

CT_ObjectPr* CT_ObjectPr::default_instance_ = NULL;

    // CT_WebPublishItems
    CT_WebPublishItems::CT_WebPublishItems()
    :m_has_count_attr(false),
    m_count_attr(0)
    {
    }
    CT_WebPublishItems::~CT_WebPublishItems()
{
    clear();    }
    CT_WebPublishItem* CT_WebPublishItems::add_webPublishItem()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_WebPublishItem* pNewChild = pChildGroup->mutable_webPublishItem();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_WebPublishItems::clear()
    {    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_WebPublishItems::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_webPublishItem())
            {
                (*iter)->get_webPublishItem().toXmlElem("main:webPublishItem", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_WebPublishItems& CT_WebPublishItems::default_instance()
    {    
    if (!CT_WebPublishItems::default_instance_)
    {
        CT_WebPublishItems::default_instance_ = new CT_WebPublishItems();
    }
    return *CT_WebPublishItems::default_instance_;
    }

    bool CT_WebPublishItems::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void CT_WebPublishItems::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& CT_WebPublishItems::get_count_attr() const
    {    
    return m_count_attr;
    }


    // CT_WebPublishItems::ChildGroup_1
    CT_WebPublishItems::ChildGroup_1::ChildGroup_1()
    :m_has_webPublishItem(false),
    m_webPublishItem(NULL)
    {
    }
    bool CT_WebPublishItems::ChildGroup_1::has_webPublishItem() const
    {    
    return m_has_webPublishItem;
    }

    CT_WebPublishItem* CT_WebPublishItems::ChildGroup_1::mutable_webPublishItem()
    {    
    
    m_has_webPublishItem = true;
    if (!m_webPublishItem)
    {
        m_webPublishItem = new CT_WebPublishItem();
    }
    return m_webPublishItem;
    }

    const CT_WebPublishItem& CT_WebPublishItems::ChildGroup_1::get_webPublishItem() const
    {    
    if (m_webPublishItem)
    {
        return *m_webPublishItem;
    }
    return CT_WebPublishItem::default_instance();
    }

CT_WebPublishItems* CT_WebPublishItems::default_instance_ = NULL;

    // CT_WebPublishItem
    CT_WebPublishItem::CT_WebPublishItem()
    :m_has_id_attr(false),
    m_id_attr(0),
    m_has_divId_attr(false),
    m_divId_attr(NULL),
    m_has_sourceType_attr(false),
    m_sourceType_attr(NULL),
    m_has_sourceRef_attr(false),
    m_sourceRef_attr(NULL),
    m_has_sourceObject_attr(false),
    m_sourceObject_attr(NULL),
    m_has_destinationFile_attr(false),
    m_destinationFile_attr(NULL),
    m_has_title_attr(false),
    m_title_attr(NULL),
    m_has_autoRepublish_attr(false),
    m_autoRepublish_attr(false)
    {
    }
    CT_WebPublishItem::~CT_WebPublishItem()
{
    clear();    }
    void CT_WebPublishItem::clear()
    {    
    m_has_id_attr = false;
    m_id_attr = 0;
    
    m_has_divId_attr = false;
    
    if (m_divId_attr)
    {
        delete m_divId_attr;
        m_divId_attr = NULL;
    }
    
    
    m_has_sourceType_attr = false;
    
    if (m_sourceType_attr)
    {
        delete m_sourceType_attr;
        m_sourceType_attr = NULL;
    }
    
    
    m_has_sourceRef_attr = false;
    
    if (m_sourceRef_attr)
    {
        delete m_sourceRef_attr;
        m_sourceRef_attr = NULL;
    }
    
    
    m_has_sourceObject_attr = false;
    
    if (m_sourceObject_attr)
    {
        delete m_sourceObject_attr;
        m_sourceObject_attr = NULL;
    }
    
    
    m_has_destinationFile_attr = false;
    
    if (m_destinationFile_attr)
    {
        delete m_destinationFile_attr;
        m_destinationFile_attr = NULL;
    }
    
    
    m_has_title_attr = false;
    
    if (m_title_attr)
    {
        delete m_title_attr;
        m_title_attr = NULL;
    }
    
    
    m_has_autoRepublish_attr = false;
    m_autoRepublish_attr = false;
    }

    void CT_WebPublishItem::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_id_attr)
    {
        _outStream << " " << "id" << "=\"" << m_id_attr << "\"";
    }
    
    
    if (m_has_divId_attr)
    {
        m_divId_attr->toXmlAttr("divId", _outStream);
    }
    
    
    if (m_has_sourceType_attr)
    {
        m_sourceType_attr->toXmlAttr("sourceType", _outStream);
    }
    
    
    if (m_has_sourceRef_attr)
    {
        m_sourceRef_attr->toXmlAttr("sourceRef", _outStream);
    }
    
    
    if (m_has_sourceObject_attr)
    {
        m_sourceObject_attr->toXmlAttr("sourceObject", _outStream);
    }
    
    
    if (m_has_destinationFile_attr)
    {
        m_destinationFile_attr->toXmlAttr("destinationFile", _outStream);
    }
    
    
    if (m_has_title_attr)
    {
        m_title_attr->toXmlAttr("title", _outStream);
    }
    
    
    if (m_has_autoRepublish_attr)
    {
        _outStream << " " << "autoRepublish" << "=\"" << XSD::XMLBooleanStr(m_autoRepublish_attr) << "\"";
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_WebPublishItem& CT_WebPublishItem::default_instance()
    {    
    if (!CT_WebPublishItem::default_instance_)
    {
        CT_WebPublishItem::default_instance_ = new CT_WebPublishItem();
    }
    return *CT_WebPublishItem::default_instance_;
    }

    bool CT_WebPublishItem::has_id_attr() const
    {    
    return m_has_id_attr;
    }

    void CT_WebPublishItem::set_id_attr(const XSD::unsignedInt_& _id_attr)
    {    
    m_has_id_attr = true;
    m_id_attr = _id_attr;
    }

    const XSD::unsignedInt_& CT_WebPublishItem::get_id_attr() const
    {    
    return m_id_attr;
    }

    bool CT_WebPublishItem::has_divId_attr() const
    {    
    return m_has_divId_attr;
    }

    void CT_WebPublishItem::set_divId_attr(const ns_s::ST_Xstring& _divId_attr)
    {    
    m_has_divId_attr = true;
    m_divId_attr = new ns_s::ST_Xstring(_divId_attr);
    }

    const ns_s::ST_Xstring& CT_WebPublishItem::get_divId_attr() const
    {    
    if (m_divId_attr)
    {
        return *m_divId_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_WebPublishItem::has_sourceType_attr() const
    {    
    return m_has_sourceType_attr;
    }

    void CT_WebPublishItem::set_sourceType_attr(const ST_WebSourceType& _sourceType_attr)
    {    
    m_has_sourceType_attr = true;
    m_sourceType_attr = new ST_WebSourceType(_sourceType_attr);
    }

    const ST_WebSourceType& CT_WebPublishItem::get_sourceType_attr() const
    {    
    if (m_sourceType_attr)
    {
        return *m_sourceType_attr;
    }
    return ST_WebSourceType::default_instance();
    }

    bool CT_WebPublishItem::has_sourceRef_attr() const
    {    
    return m_has_sourceRef_attr;
    }

    void CT_WebPublishItem::set_sourceRef_attr(const ST_Ref& _sourceRef_attr)
    {    
    m_has_sourceRef_attr = true;
    m_sourceRef_attr = new ST_Ref(_sourceRef_attr);
    }

    const ST_Ref& CT_WebPublishItem::get_sourceRef_attr() const
    {    
    if (m_sourceRef_attr)
    {
        return *m_sourceRef_attr;
    }
    return ST_Ref::default_instance();
    }

    bool CT_WebPublishItem::has_sourceObject_attr() const
    {    
    return m_has_sourceObject_attr;
    }

    void CT_WebPublishItem::set_sourceObject_attr(const ns_s::ST_Xstring& _sourceObject_attr)
    {    
    m_has_sourceObject_attr = true;
    m_sourceObject_attr = new ns_s::ST_Xstring(_sourceObject_attr);
    }

    const ns_s::ST_Xstring& CT_WebPublishItem::get_sourceObject_attr() const
    {    
    if (m_sourceObject_attr)
    {
        return *m_sourceObject_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_WebPublishItem::has_destinationFile_attr() const
    {    
    return m_has_destinationFile_attr;
    }

    void CT_WebPublishItem::set_destinationFile_attr(const ns_s::ST_Xstring& _destinationFile_attr)
    {    
    m_has_destinationFile_attr = true;
    m_destinationFile_attr = new ns_s::ST_Xstring(_destinationFile_attr);
    }

    const ns_s::ST_Xstring& CT_WebPublishItem::get_destinationFile_attr() const
    {    
    if (m_destinationFile_attr)
    {
        return *m_destinationFile_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_WebPublishItem::has_title_attr() const
    {    
    return m_has_title_attr;
    }

    void CT_WebPublishItem::set_title_attr(const ns_s::ST_Xstring& _title_attr)
    {    
    m_has_title_attr = true;
    m_title_attr = new ns_s::ST_Xstring(_title_attr);
    }

    const ns_s::ST_Xstring& CT_WebPublishItem::get_title_attr() const
    {    
    if (m_title_attr)
    {
        return *m_title_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_WebPublishItem::has_autoRepublish_attr() const
    {    
    return m_has_autoRepublish_attr;
    }

    void CT_WebPublishItem::set_autoRepublish_attr(const XSD::boolean_& _autoRepublish_attr)
    {    
    m_has_autoRepublish_attr = true;
    m_autoRepublish_attr = _autoRepublish_attr;
    }

    const XSD::boolean_& CT_WebPublishItem::get_autoRepublish_attr() const
    {    
    return m_autoRepublish_attr;
    }

CT_WebPublishItem* CT_WebPublishItem::default_instance_ = NULL;

    // CT_Controls
    CT_Controls::CT_Controls()

    {
    }
    CT_Controls::~CT_Controls()
{
    clear();    }
    CT_Control* CT_Controls::add_control()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Control* pNewChild = pChildGroup->mutable_control();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_Controls::clear()
    {    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_Controls::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_control())
            {
                (*iter)->get_control().toXmlElem("main:control", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_Controls& CT_Controls::default_instance()
    {    
    if (!CT_Controls::default_instance_)
    {
        CT_Controls::default_instance_ = new CT_Controls();
    }
    return *CT_Controls::default_instance_;
    }


    // CT_Controls::ChildGroup_1
    CT_Controls::ChildGroup_1::ChildGroup_1()
    :m_has_control(false),
    m_control(NULL)
    {
    }
    bool CT_Controls::ChildGroup_1::has_control() const
    {    
    return m_has_control;
    }

    CT_Control* CT_Controls::ChildGroup_1::mutable_control()
    {    
    
    m_has_control = true;
    if (!m_control)
    {
        m_control = new CT_Control();
    }
    return m_control;
    }

    const CT_Control& CT_Controls::ChildGroup_1::get_control() const
    {    
    if (m_control)
    {
        return *m_control;
    }
    return CT_Control::default_instance();
    }

CT_Controls* CT_Controls::default_instance_ = NULL;

    // CT_Control
    CT_Control::CT_Control()
    :m_has_controlPr(false),
    m_controlPr(NULL),
    m_has_shapeId_attr(false),
    m_shapeId_attr(0),
    m_has_r_id_attr(false),
    m_r_id_attr(NULL),
    m_has_name_attr(false),
    m_name_attr("")
    {
    }
    CT_Control::~CT_Control()
{
    clear();    }
    bool CT_Control::has_controlPr() const
    {    
    return m_has_controlPr;
    }

    CT_ControlPr* CT_Control::mutable_controlPr()
    {    
    m_has_controlPr = true;
    if (!m_controlPr)
    {
        m_controlPr = new CT_ControlPr();
    }
    return m_controlPr;
    }

    const CT_ControlPr& CT_Control::get_controlPr() const
    {    
    if (m_controlPr)
    {
        return *m_controlPr;
    }
    return CT_ControlPr::default_instance();
    }

    void CT_Control::clear()
    {    
    m_has_shapeId_attr = false;
    m_shapeId_attr = 0;
    
    m_has_r_id_attr = false;
    
    if (m_r_id_attr)
    {
        delete m_r_id_attr;
        m_r_id_attr = NULL;
    }
    
    
    m_has_name_attr = false;
    m_name_attr.clear();
    }

    void CT_Control::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_shapeId_attr)
    {
        _outStream << " " << "shapeId" << "=\"" << m_shapeId_attr << "\"";
    }
    
    
    if (m_has_r_id_attr)
    {
        m_r_id_attr->toXmlAttr("r:id", _outStream);
    }
    
    
    if (m_has_name_attr)
    {
        _outStream << " " << "name" << "=\"" << m_name_attr << "\"";
    }
    
            _outStream << ">";
            
    if (m_has_controlPr)
    {
        m_controlPr->toXmlElem("main:controlPr", "", _outStream);;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_Control& CT_Control::default_instance()
    {    
    if (!CT_Control::default_instance_)
    {
        CT_Control::default_instance_ = new CT_Control();
    }
    return *CT_Control::default_instance_;
    }

    bool CT_Control::has_shapeId_attr() const
    {    
    return m_has_shapeId_attr;
    }

    void CT_Control::set_shapeId_attr(const XSD::unsignedInt_& _shapeId_attr)
    {    
    m_has_shapeId_attr = true;
    m_shapeId_attr = _shapeId_attr;
    }

    const XSD::unsignedInt_& CT_Control::get_shapeId_attr() const
    {    
    return m_shapeId_attr;
    }

    bool CT_Control::has_r_id_attr() const
    {    
    return m_has_r_id_attr;
    }

    void CT_Control::set_r_id_attr(const ns_r::ST_RelationshipId& _r_id_attr)
    {    
    m_has_r_id_attr = true;
    m_r_id_attr = new ns_r::ST_RelationshipId(_r_id_attr);
    }

    const ns_r::ST_RelationshipId& CT_Control::get_r_id_attr() const
    {    
    if (m_r_id_attr)
    {
        return *m_r_id_attr;
    }
    return ns_r::ST_RelationshipId::default_instance();
    }

    bool CT_Control::has_name_attr() const
    {    
    return m_has_name_attr;
    }

    void CT_Control::set_name_attr(const XSD::string_& _name_attr)
    {    
    m_has_name_attr = true;
    m_name_attr = _name_attr;
    }

    const XSD::string_& CT_Control::get_name_attr() const
    {    
    return m_name_attr;
    }

CT_Control* CT_Control::default_instance_ = NULL;

    // CT_ControlPr
    CT_ControlPr::CT_ControlPr()
    :m_has_anchor(false),
    m_anchor(NULL),
    m_has_locked_attr(false),
    m_locked_attr(false),
    m_has_defaultSize_attr(false),
    m_defaultSize_attr(false),
    m_has_print_attr(false),
    m_print_attr(false),
    m_has_disabled_attr(false),
    m_disabled_attr(false),
    m_has_recalcAlways_attr(false),
    m_recalcAlways_attr(false),
    m_has_uiObject_attr(false),
    m_uiObject_attr(false),
    m_has_autoFill_attr(false),
    m_autoFill_attr(false),
    m_has_autoLine_attr(false),
    m_autoLine_attr(false),
    m_has_autoPict_attr(false),
    m_autoPict_attr(false),
    m_has_macro_attr(false),
    m_macro_attr(NULL),
    m_has_altText_attr(false),
    m_altText_attr(NULL),
    m_has_linkedCell_attr(false),
    m_linkedCell_attr(NULL),
    m_has_listFillRange_attr(false),
    m_listFillRange_attr(NULL),
    m_has_cf_attr(false),
    m_cf_attr(NULL),
    m_has_r_id_attr(false),
    m_r_id_attr(NULL)
    {
    }
    CT_ControlPr::~CT_ControlPr()
{
    clear();    }
    bool CT_ControlPr::has_anchor() const
    {    
    return m_has_anchor;
    }

    CT_ObjectAnchor* CT_ControlPr::mutable_anchor()
    {    
    m_has_anchor = true;
    if (!m_anchor)
    {
        m_anchor = new CT_ObjectAnchor();
    }
    return m_anchor;
    }

    const CT_ObjectAnchor& CT_ControlPr::get_anchor() const
    {    
    if (m_anchor)
    {
        return *m_anchor;
    }
    return CT_ObjectAnchor::default_instance();
    }

    void CT_ControlPr::clear()
    {    
    m_has_locked_attr = false;
    m_locked_attr = false;
    
    m_has_defaultSize_attr = false;
    m_defaultSize_attr = false;
    
    m_has_print_attr = false;
    m_print_attr = false;
    
    m_has_disabled_attr = false;
    m_disabled_attr = false;
    
    m_has_recalcAlways_attr = false;
    m_recalcAlways_attr = false;
    
    m_has_uiObject_attr = false;
    m_uiObject_attr = false;
    
    m_has_autoFill_attr = false;
    m_autoFill_attr = false;
    
    m_has_autoLine_attr = false;
    m_autoLine_attr = false;
    
    m_has_autoPict_attr = false;
    m_autoPict_attr = false;
    
    m_has_macro_attr = false;
    
    if (m_macro_attr)
    {
        delete m_macro_attr;
        m_macro_attr = NULL;
    }
    
    
    m_has_altText_attr = false;
    
    if (m_altText_attr)
    {
        delete m_altText_attr;
        m_altText_attr = NULL;
    }
    
    
    m_has_linkedCell_attr = false;
    
    if (m_linkedCell_attr)
    {
        delete m_linkedCell_attr;
        m_linkedCell_attr = NULL;
    }
    
    
    m_has_listFillRange_attr = false;
    
    if (m_listFillRange_attr)
    {
        delete m_listFillRange_attr;
        m_listFillRange_attr = NULL;
    }
    
    
    m_has_cf_attr = false;
    
    if (m_cf_attr)
    {
        delete m_cf_attr;
        m_cf_attr = NULL;
    }
    
    
    m_has_r_id_attr = false;
    
    if (m_r_id_attr)
    {
        delete m_r_id_attr;
        m_r_id_attr = NULL;
    }
    
    }

    void CT_ControlPr::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_locked_attr)
    {
        _outStream << " " << "locked" << "=\"" << XSD::XMLBooleanStr(m_locked_attr) << "\"";
    }
    
    
    if (m_has_defaultSize_attr)
    {
        _outStream << " " << "defaultSize" << "=\"" << XSD::XMLBooleanStr(m_defaultSize_attr) << "\"";
    }
    
    
    if (m_has_print_attr)
    {
        _outStream << " " << "print" << "=\"" << XSD::XMLBooleanStr(m_print_attr) << "\"";
    }
    
    
    if (m_has_disabled_attr)
    {
        _outStream << " " << "disabled" << "=\"" << XSD::XMLBooleanStr(m_disabled_attr) << "\"";
    }
    
    
    if (m_has_recalcAlways_attr)
    {
        _outStream << " " << "recalcAlways" << "=\"" << XSD::XMLBooleanStr(m_recalcAlways_attr) << "\"";
    }
    
    
    if (m_has_uiObject_attr)
    {
        _outStream << " " << "uiObject" << "=\"" << XSD::XMLBooleanStr(m_uiObject_attr) << "\"";
    }
    
    
    if (m_has_autoFill_attr)
    {
        _outStream << " " << "autoFill" << "=\"" << XSD::XMLBooleanStr(m_autoFill_attr) << "\"";
    }
    
    
    if (m_has_autoLine_attr)
    {
        _outStream << " " << "autoLine" << "=\"" << XSD::XMLBooleanStr(m_autoLine_attr) << "\"";
    }
    
    
    if (m_has_autoPict_attr)
    {
        _outStream << " " << "autoPict" << "=\"" << XSD::XMLBooleanStr(m_autoPict_attr) << "\"";
    }
    
    
    if (m_has_macro_attr)
    {
        m_macro_attr->toXmlAttr("macro", _outStream);
    }
    
    
    if (m_has_altText_attr)
    {
        m_altText_attr->toXmlAttr("altText", _outStream);
    }
    
    
    if (m_has_linkedCell_attr)
    {
        m_linkedCell_attr->toXmlAttr("linkedCell", _outStream);
    }
    
    
    if (m_has_listFillRange_attr)
    {
        m_listFillRange_attr->toXmlAttr("listFillRange", _outStream);
    }
    
    
    if (m_has_cf_attr)
    {
        m_cf_attr->toXmlAttr("cf", _outStream);
    }
    
    
    if (m_has_r_id_attr)
    {
        m_r_id_attr->toXmlAttr("r:id", _outStream);
    }
    
            _outStream << ">";
            
    if (m_has_anchor)
    {
        m_anchor->toXmlElem("main:anchor", "", _outStream);;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_ControlPr& CT_ControlPr::default_instance()
    {    
    if (!CT_ControlPr::default_instance_)
    {
        CT_ControlPr::default_instance_ = new CT_ControlPr();
    }
    return *CT_ControlPr::default_instance_;
    }

    bool CT_ControlPr::has_locked_attr() const
    {    
    return m_has_locked_attr;
    }

    void CT_ControlPr::set_locked_attr(const XSD::boolean_& _locked_attr)
    {    
    m_has_locked_attr = true;
    m_locked_attr = _locked_attr;
    }

    const XSD::boolean_& CT_ControlPr::get_locked_attr() const
    {    
    return m_locked_attr;
    }

    bool CT_ControlPr::has_defaultSize_attr() const
    {    
    return m_has_defaultSize_attr;
    }

    void CT_ControlPr::set_defaultSize_attr(const XSD::boolean_& _defaultSize_attr)
    {    
    m_has_defaultSize_attr = true;
    m_defaultSize_attr = _defaultSize_attr;
    }

    const XSD::boolean_& CT_ControlPr::get_defaultSize_attr() const
    {    
    return m_defaultSize_attr;
    }

    bool CT_ControlPr::has_print_attr() const
    {    
    return m_has_print_attr;
    }

    void CT_ControlPr::set_print_attr(const XSD::boolean_& _print_attr)
    {    
    m_has_print_attr = true;
    m_print_attr = _print_attr;
    }

    const XSD::boolean_& CT_ControlPr::get_print_attr() const
    {    
    return m_print_attr;
    }

    bool CT_ControlPr::has_disabled_attr() const
    {    
    return m_has_disabled_attr;
    }

    void CT_ControlPr::set_disabled_attr(const XSD::boolean_& _disabled_attr)
    {    
    m_has_disabled_attr = true;
    m_disabled_attr = _disabled_attr;
    }

    const XSD::boolean_& CT_ControlPr::get_disabled_attr() const
    {    
    return m_disabled_attr;
    }

    bool CT_ControlPr::has_recalcAlways_attr() const
    {    
    return m_has_recalcAlways_attr;
    }

    void CT_ControlPr::set_recalcAlways_attr(const XSD::boolean_& _recalcAlways_attr)
    {    
    m_has_recalcAlways_attr = true;
    m_recalcAlways_attr = _recalcAlways_attr;
    }

    const XSD::boolean_& CT_ControlPr::get_recalcAlways_attr() const
    {    
    return m_recalcAlways_attr;
    }

    bool CT_ControlPr::has_uiObject_attr() const
    {    
    return m_has_uiObject_attr;
    }

    void CT_ControlPr::set_uiObject_attr(const XSD::boolean_& _uiObject_attr)
    {    
    m_has_uiObject_attr = true;
    m_uiObject_attr = _uiObject_attr;
    }

    const XSD::boolean_& CT_ControlPr::get_uiObject_attr() const
    {    
    return m_uiObject_attr;
    }

    bool CT_ControlPr::has_autoFill_attr() const
    {    
    return m_has_autoFill_attr;
    }

    void CT_ControlPr::set_autoFill_attr(const XSD::boolean_& _autoFill_attr)
    {    
    m_has_autoFill_attr = true;
    m_autoFill_attr = _autoFill_attr;
    }

    const XSD::boolean_& CT_ControlPr::get_autoFill_attr() const
    {    
    return m_autoFill_attr;
    }

    bool CT_ControlPr::has_autoLine_attr() const
    {    
    return m_has_autoLine_attr;
    }

    void CT_ControlPr::set_autoLine_attr(const XSD::boolean_& _autoLine_attr)
    {    
    m_has_autoLine_attr = true;
    m_autoLine_attr = _autoLine_attr;
    }

    const XSD::boolean_& CT_ControlPr::get_autoLine_attr() const
    {    
    return m_autoLine_attr;
    }

    bool CT_ControlPr::has_autoPict_attr() const
    {    
    return m_has_autoPict_attr;
    }

    void CT_ControlPr::set_autoPict_attr(const XSD::boolean_& _autoPict_attr)
    {    
    m_has_autoPict_attr = true;
    m_autoPict_attr = _autoPict_attr;
    }

    const XSD::boolean_& CT_ControlPr::get_autoPict_attr() const
    {    
    return m_autoPict_attr;
    }

    bool CT_ControlPr::has_macro_attr() const
    {    
    return m_has_macro_attr;
    }

    void CT_ControlPr::set_macro_attr(const ST_Formula& _macro_attr)
    {    
    m_has_macro_attr = true;
    m_macro_attr = new ST_Formula(_macro_attr);
    }

    const ST_Formula& CT_ControlPr::get_macro_attr() const
    {    
    if (m_macro_attr)
    {
        return *m_macro_attr;
    }
    return ST_Formula::default_instance();
    }

    bool CT_ControlPr::has_altText_attr() const
    {    
    return m_has_altText_attr;
    }

    void CT_ControlPr::set_altText_attr(const ns_s::ST_Xstring& _altText_attr)
    {    
    m_has_altText_attr = true;
    m_altText_attr = new ns_s::ST_Xstring(_altText_attr);
    }

    const ns_s::ST_Xstring& CT_ControlPr::get_altText_attr() const
    {    
    if (m_altText_attr)
    {
        return *m_altText_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_ControlPr::has_linkedCell_attr() const
    {    
    return m_has_linkedCell_attr;
    }

    void CT_ControlPr::set_linkedCell_attr(const ST_Formula& _linkedCell_attr)
    {    
    m_has_linkedCell_attr = true;
    m_linkedCell_attr = new ST_Formula(_linkedCell_attr);
    }

    const ST_Formula& CT_ControlPr::get_linkedCell_attr() const
    {    
    if (m_linkedCell_attr)
    {
        return *m_linkedCell_attr;
    }
    return ST_Formula::default_instance();
    }

    bool CT_ControlPr::has_listFillRange_attr() const
    {    
    return m_has_listFillRange_attr;
    }

    void CT_ControlPr::set_listFillRange_attr(const ST_Formula& _listFillRange_attr)
    {    
    m_has_listFillRange_attr = true;
    m_listFillRange_attr = new ST_Formula(_listFillRange_attr);
    }

    const ST_Formula& CT_ControlPr::get_listFillRange_attr() const
    {    
    if (m_listFillRange_attr)
    {
        return *m_listFillRange_attr;
    }
    return ST_Formula::default_instance();
    }

    bool CT_ControlPr::has_cf_attr() const
    {    
    return m_has_cf_attr;
    }

    void CT_ControlPr::set_cf_attr(const ns_s::ST_Xstring& _cf_attr)
    {    
    m_has_cf_attr = true;
    m_cf_attr = new ns_s::ST_Xstring(_cf_attr);
    }

    const ns_s::ST_Xstring& CT_ControlPr::get_cf_attr() const
    {    
    if (m_cf_attr)
    {
        return *m_cf_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_ControlPr::has_r_id_attr() const
    {    
    return m_has_r_id_attr;
    }

    void CT_ControlPr::set_r_id_attr(const ns_r::ST_RelationshipId& _r_id_attr)
    {    
    m_has_r_id_attr = true;
    m_r_id_attr = new ns_r::ST_RelationshipId(_r_id_attr);
    }

    const ns_r::ST_RelationshipId& CT_ControlPr::get_r_id_attr() const
    {    
    if (m_r_id_attr)
    {
        return *m_r_id_attr;
    }
    return ns_r::ST_RelationshipId::default_instance();
    }

CT_ControlPr* CT_ControlPr::default_instance_ = NULL;

    // CT_IgnoredErrors
    CT_IgnoredErrors::CT_IgnoredErrors()

    {
    }
    CT_IgnoredErrors::~CT_IgnoredErrors()
{
    clear();    }
    CT_IgnoredError* CT_IgnoredErrors::add_ignoredError()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_IgnoredError* pNewChild = pChildGroup->mutable_ignoredError();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_ExtensionList* CT_IgnoredErrors::add_extLst()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_ExtensionList* pNewChild = pChildGroup->mutable_extLst();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_IgnoredErrors::clear()
    {    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_IgnoredErrors::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_ignoredError())
            {
                (*iter)->get_ignoredError().toXmlElem("main:ignoredError", "", _outStream);
            }
            else if ((*iter)->has_extLst())
            {
                (*iter)->get_extLst().toXmlElem("main:extLst", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_IgnoredErrors& CT_IgnoredErrors::default_instance()
    {    
    if (!CT_IgnoredErrors::default_instance_)
    {
        CT_IgnoredErrors::default_instance_ = new CT_IgnoredErrors();
    }
    return *CT_IgnoredErrors::default_instance_;
    }


    // CT_IgnoredErrors::ChildGroup_1
    CT_IgnoredErrors::ChildGroup_1::ChildGroup_1()
    :m_has_ignoredError(false),
    m_ignoredError(NULL),
    m_has_extLst(false),
    m_extLst(NULL)
    {
    }
    bool CT_IgnoredErrors::ChildGroup_1::has_ignoredError() const
    {    
    return m_has_ignoredError;
    }

    CT_IgnoredError* CT_IgnoredErrors::ChildGroup_1::mutable_ignoredError()
    {    
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_ignoredError = true;
    if (!m_ignoredError)
    {
        m_ignoredError = new CT_IgnoredError();
    }
    return m_ignoredError;
    }

    const CT_IgnoredError& CT_IgnoredErrors::ChildGroup_1::get_ignoredError() const
    {    
    if (m_ignoredError)
    {
        return *m_ignoredError;
    }
    return CT_IgnoredError::default_instance();
    }

    bool CT_IgnoredErrors::ChildGroup_1::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* CT_IgnoredErrors::ChildGroup_1::mutable_extLst()
    {    
    
    m_has_ignoredError = false;
    
    if (m_ignoredError)
    {
        delete m_ignoredError;
        m_ignoredError = NULL;
    }
    ;
    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& CT_IgnoredErrors::ChildGroup_1::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

CT_IgnoredErrors* CT_IgnoredErrors::default_instance_ = NULL;

    // CT_IgnoredError
    CT_IgnoredError::CT_IgnoredError()
    :m_has_sqref_attr(false),
    m_sqref_attr(NULL),
    m_has_evalError_attr(false),
    m_evalError_attr(false),
    m_has_twoDigitTextYear_attr(false),
    m_twoDigitTextYear_attr(false),
    m_has_numberStoredAsText_attr(false),
    m_numberStoredAsText_attr(false),
    m_has_formula_attr(false),
    m_formula_attr(false),
    m_has_formulaRange_attr(false),
    m_formulaRange_attr(false),
    m_has_unlockedFormula_attr(false),
    m_unlockedFormula_attr(false),
    m_has_emptyCellReference_attr(false),
    m_emptyCellReference_attr(false),
    m_has_listDataValidation_attr(false),
    m_listDataValidation_attr(false),
    m_has_calculatedColumn_attr(false),
    m_calculatedColumn_attr(false)
    {
    }
    CT_IgnoredError::~CT_IgnoredError()
{
    clear();    }
    void CT_IgnoredError::clear()
    {    
    m_has_sqref_attr = false;
    
    if (m_sqref_attr)
    {
        delete m_sqref_attr;
        m_sqref_attr = NULL;
    }
    
    
    m_has_evalError_attr = false;
    m_evalError_attr = false;
    
    m_has_twoDigitTextYear_attr = false;
    m_twoDigitTextYear_attr = false;
    
    m_has_numberStoredAsText_attr = false;
    m_numberStoredAsText_attr = false;
    
    m_has_formula_attr = false;
    m_formula_attr = false;
    
    m_has_formulaRange_attr = false;
    m_formulaRange_attr = false;
    
    m_has_unlockedFormula_attr = false;
    m_unlockedFormula_attr = false;
    
    m_has_emptyCellReference_attr = false;
    m_emptyCellReference_attr = false;
    
    m_has_listDataValidation_attr = false;
    m_listDataValidation_attr = false;
    
    m_has_calculatedColumn_attr = false;
    m_calculatedColumn_attr = false;
    }

    void CT_IgnoredError::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_sqref_attr)
    {
        m_sqref_attr->toXmlAttr("sqref", _outStream);
    }
    
    
    if (m_has_evalError_attr)
    {
        _outStream << " " << "evalError" << "=\"" << XSD::XMLBooleanStr(m_evalError_attr) << "\"";
    }
    
    
    if (m_has_twoDigitTextYear_attr)
    {
        _outStream << " " << "twoDigitTextYear" << "=\"" << XSD::XMLBooleanStr(m_twoDigitTextYear_attr) << "\"";
    }
    
    
    if (m_has_numberStoredAsText_attr)
    {
        _outStream << " " << "numberStoredAsText" << "=\"" << XSD::XMLBooleanStr(m_numberStoredAsText_attr) << "\"";
    }
    
    
    if (m_has_formula_attr)
    {
        _outStream << " " << "formula" << "=\"" << XSD::XMLBooleanStr(m_formula_attr) << "\"";
    }
    
    
    if (m_has_formulaRange_attr)
    {
        _outStream << " " << "formulaRange" << "=\"" << XSD::XMLBooleanStr(m_formulaRange_attr) << "\"";
    }
    
    
    if (m_has_unlockedFormula_attr)
    {
        _outStream << " " << "unlockedFormula" << "=\"" << XSD::XMLBooleanStr(m_unlockedFormula_attr) << "\"";
    }
    
    
    if (m_has_emptyCellReference_attr)
    {
        _outStream << " " << "emptyCellReference" << "=\"" << XSD::XMLBooleanStr(m_emptyCellReference_attr) << "\"";
    }
    
    
    if (m_has_listDataValidation_attr)
    {
        _outStream << " " << "listDataValidation" << "=\"" << XSD::XMLBooleanStr(m_listDataValidation_attr) << "\"";
    }
    
    
    if (m_has_calculatedColumn_attr)
    {
        _outStream << " " << "calculatedColumn" << "=\"" << XSD::XMLBooleanStr(m_calculatedColumn_attr) << "\"";
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_IgnoredError& CT_IgnoredError::default_instance()
    {    
    if (!CT_IgnoredError::default_instance_)
    {
        CT_IgnoredError::default_instance_ = new CT_IgnoredError();
    }
    return *CT_IgnoredError::default_instance_;
    }

    bool CT_IgnoredError::has_sqref_attr() const
    {    
    return m_has_sqref_attr;
    }

    void CT_IgnoredError::set_sqref_attr(const ST_Sqref& _sqref_attr)
    {    
    m_has_sqref_attr = true;
    m_sqref_attr = new ST_Sqref(_sqref_attr);
    }

    const ST_Sqref& CT_IgnoredError::get_sqref_attr() const
    {    
    if (m_sqref_attr)
    {
        return *m_sqref_attr;
    }
    return ST_Sqref::default_instance();
    }

    bool CT_IgnoredError::has_evalError_attr() const
    {    
    return m_has_evalError_attr;
    }

    void CT_IgnoredError::set_evalError_attr(const XSD::boolean_& _evalError_attr)
    {    
    m_has_evalError_attr = true;
    m_evalError_attr = _evalError_attr;
    }

    const XSD::boolean_& CT_IgnoredError::get_evalError_attr() const
    {    
    return m_evalError_attr;
    }

    bool CT_IgnoredError::has_twoDigitTextYear_attr() const
    {    
    return m_has_twoDigitTextYear_attr;
    }

    void CT_IgnoredError::set_twoDigitTextYear_attr(const XSD::boolean_& _twoDigitTextYear_attr)
    {    
    m_has_twoDigitTextYear_attr = true;
    m_twoDigitTextYear_attr = _twoDigitTextYear_attr;
    }

    const XSD::boolean_& CT_IgnoredError::get_twoDigitTextYear_attr() const
    {    
    return m_twoDigitTextYear_attr;
    }

    bool CT_IgnoredError::has_numberStoredAsText_attr() const
    {    
    return m_has_numberStoredAsText_attr;
    }

    void CT_IgnoredError::set_numberStoredAsText_attr(const XSD::boolean_& _numberStoredAsText_attr)
    {    
    m_has_numberStoredAsText_attr = true;
    m_numberStoredAsText_attr = _numberStoredAsText_attr;
    }

    const XSD::boolean_& CT_IgnoredError::get_numberStoredAsText_attr() const
    {    
    return m_numberStoredAsText_attr;
    }

    bool CT_IgnoredError::has_formula_attr() const
    {    
    return m_has_formula_attr;
    }

    void CT_IgnoredError::set_formula_attr(const XSD::boolean_& _formula_attr)
    {    
    m_has_formula_attr = true;
    m_formula_attr = _formula_attr;
    }

    const XSD::boolean_& CT_IgnoredError::get_formula_attr() const
    {    
    return m_formula_attr;
    }

    bool CT_IgnoredError::has_formulaRange_attr() const
    {    
    return m_has_formulaRange_attr;
    }

    void CT_IgnoredError::set_formulaRange_attr(const XSD::boolean_& _formulaRange_attr)
    {    
    m_has_formulaRange_attr = true;
    m_formulaRange_attr = _formulaRange_attr;
    }

    const XSD::boolean_& CT_IgnoredError::get_formulaRange_attr() const
    {    
    return m_formulaRange_attr;
    }

    bool CT_IgnoredError::has_unlockedFormula_attr() const
    {    
    return m_has_unlockedFormula_attr;
    }

    void CT_IgnoredError::set_unlockedFormula_attr(const XSD::boolean_& _unlockedFormula_attr)
    {    
    m_has_unlockedFormula_attr = true;
    m_unlockedFormula_attr = _unlockedFormula_attr;
    }

    const XSD::boolean_& CT_IgnoredError::get_unlockedFormula_attr() const
    {    
    return m_unlockedFormula_attr;
    }

    bool CT_IgnoredError::has_emptyCellReference_attr() const
    {    
    return m_has_emptyCellReference_attr;
    }

    void CT_IgnoredError::set_emptyCellReference_attr(const XSD::boolean_& _emptyCellReference_attr)
    {    
    m_has_emptyCellReference_attr = true;
    m_emptyCellReference_attr = _emptyCellReference_attr;
    }

    const XSD::boolean_& CT_IgnoredError::get_emptyCellReference_attr() const
    {    
    return m_emptyCellReference_attr;
    }

    bool CT_IgnoredError::has_listDataValidation_attr() const
    {    
    return m_has_listDataValidation_attr;
    }

    void CT_IgnoredError::set_listDataValidation_attr(const XSD::boolean_& _listDataValidation_attr)
    {    
    m_has_listDataValidation_attr = true;
    m_listDataValidation_attr = _listDataValidation_attr;
    }

    const XSD::boolean_& CT_IgnoredError::get_listDataValidation_attr() const
    {    
    return m_listDataValidation_attr;
    }

    bool CT_IgnoredError::has_calculatedColumn_attr() const
    {    
    return m_has_calculatedColumn_attr;
    }

    void CT_IgnoredError::set_calculatedColumn_attr(const XSD::boolean_& _calculatedColumn_attr)
    {    
    m_has_calculatedColumn_attr = true;
    m_calculatedColumn_attr = _calculatedColumn_attr;
    }

    const XSD::boolean_& CT_IgnoredError::get_calculatedColumn_attr() const
    {    
    return m_calculatedColumn_attr;
    }

CT_IgnoredError* CT_IgnoredError::default_instance_ = NULL;

    // CT_TableParts
    CT_TableParts::CT_TableParts()
    :m_has_count_attr(false),
    m_count_attr(0)
    {
    }
    CT_TableParts::~CT_TableParts()
{
    clear();    }
    CT_TablePart* CT_TableParts::add_tablePart()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_TablePart* pNewChild = pChildGroup->mutable_tablePart();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_TableParts::clear()
    {    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_TableParts::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_tablePart())
            {
                (*iter)->get_tablePart().toXmlElem("main:tablePart", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_TableParts& CT_TableParts::default_instance()
    {    
    if (!CT_TableParts::default_instance_)
    {
        CT_TableParts::default_instance_ = new CT_TableParts();
    }
    return *CT_TableParts::default_instance_;
    }

    bool CT_TableParts::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void CT_TableParts::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& CT_TableParts::get_count_attr() const
    {    
    return m_count_attr;
    }


    // CT_TableParts::ChildGroup_1
    CT_TableParts::ChildGroup_1::ChildGroup_1()
    :m_has_tablePart(false),
    m_tablePart(NULL)
    {
    }
    bool CT_TableParts::ChildGroup_1::has_tablePart() const
    {    
    return m_has_tablePart;
    }

    CT_TablePart* CT_TableParts::ChildGroup_1::mutable_tablePart()
    {    
    
    m_has_tablePart = true;
    if (!m_tablePart)
    {
        m_tablePart = new CT_TablePart();
    }
    return m_tablePart;
    }

    const CT_TablePart& CT_TableParts::ChildGroup_1::get_tablePart() const
    {    
    if (m_tablePart)
    {
        return *m_tablePart;
    }
    return CT_TablePart::default_instance();
    }

CT_TableParts* CT_TableParts::default_instance_ = NULL;

    // CT_TablePart
    CT_TablePart::CT_TablePart()
    :m_has_r_id_attr(false),
    m_r_id_attr(NULL)
    {
    }
    CT_TablePart::~CT_TablePart()
{
    clear();    }
    void CT_TablePart::clear()
    {    
    m_has_r_id_attr = false;
    
    if (m_r_id_attr)
    {
        delete m_r_id_attr;
        m_r_id_attr = NULL;
    }
    
    }

    void CT_TablePart::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_r_id_attr)
    {
        m_r_id_attr->toXmlAttr("r:id", _outStream);
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_TablePart& CT_TablePart::default_instance()
    {    
    if (!CT_TablePart::default_instance_)
    {
        CT_TablePart::default_instance_ = new CT_TablePart();
    }
    return *CT_TablePart::default_instance_;
    }

    bool CT_TablePart::has_r_id_attr() const
    {    
    return m_has_r_id_attr;
    }

    void CT_TablePart::set_r_id_attr(const ns_r::ST_RelationshipId& _r_id_attr)
    {    
    m_has_r_id_attr = true;
    m_r_id_attr = new ns_r::ST_RelationshipId(_r_id_attr);
    }

    const ns_r::ST_RelationshipId& CT_TablePart::get_r_id_attr() const
    {    
    if (m_r_id_attr)
    {
        return *m_r_id_attr;
    }
    return ns_r::ST_RelationshipId::default_instance();
    }

CT_TablePart* CT_TablePart::default_instance_ = NULL;

    // CT_Metadata
    CT_Metadata::CT_Metadata()
    :m_has_metadataTypes(false),
    m_metadataTypes(NULL),
    m_has_metadataStrings(false),
    m_metadataStrings(NULL),
    m_has_mdxMetadata(false),
    m_mdxMetadata(NULL)
    {
    }
    CT_Metadata::~CT_Metadata()
{
    clear();    }
    bool CT_Metadata::has_metadataTypes() const
    {    
    return m_has_metadataTypes;
    }

    CT_MetadataTypes* CT_Metadata::mutable_metadataTypes()
    {    
    m_has_metadataTypes = true;
    if (!m_metadataTypes)
    {
        m_metadataTypes = new CT_MetadataTypes();
    }
    return m_metadataTypes;
    }

    const CT_MetadataTypes& CT_Metadata::get_metadataTypes() const
    {    
    if (m_metadataTypes)
    {
        return *m_metadataTypes;
    }
    return CT_MetadataTypes::default_instance();
    }

    bool CT_Metadata::has_metadataStrings() const
    {    
    return m_has_metadataStrings;
    }

    CT_MetadataStrings* CT_Metadata::mutable_metadataStrings()
    {    
    m_has_metadataStrings = true;
    if (!m_metadataStrings)
    {
        m_metadataStrings = new CT_MetadataStrings();
    }
    return m_metadataStrings;
    }

    const CT_MetadataStrings& CT_Metadata::get_metadataStrings() const
    {    
    if (m_metadataStrings)
    {
        return *m_metadataStrings;
    }
    return CT_MetadataStrings::default_instance();
    }

    bool CT_Metadata::has_mdxMetadata() const
    {    
    return m_has_mdxMetadata;
    }

    CT_MdxMetadata* CT_Metadata::mutable_mdxMetadata()
    {    
    m_has_mdxMetadata = true;
    if (!m_mdxMetadata)
    {
        m_mdxMetadata = new CT_MdxMetadata();
    }
    return m_mdxMetadata;
    }

    const CT_MdxMetadata& CT_Metadata::get_mdxMetadata() const
    {    
    if (m_mdxMetadata)
    {
        return *m_mdxMetadata;
    }
    return CT_MdxMetadata::default_instance();
    }

    CT_FutureMetadata* CT_Metadata::add_futureMetadata()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_FutureMetadata* pNewChild = pChildGroup->mutable_futureMetadata();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_MetadataBlocks* CT_Metadata::add_cellMetadata()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_MetadataBlocks* pNewChild = pChildGroup->mutable_cellMetadata();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_MetadataBlocks* CT_Metadata::add_valueMetadata()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_MetadataBlocks* pNewChild = pChildGroup->mutable_valueMetadata();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_ExtensionList* CT_Metadata::add_extLst()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_ExtensionList* pNewChild = pChildGroup->mutable_extLst();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_Metadata::clear()
    {    
    m_has_metadataTypes = false;
    
    if (m_metadataTypes)
    {
        delete m_metadataTypes;
        m_metadataTypes = NULL;
    }
    
    
    m_has_metadataStrings = false;
    
    if (m_metadataStrings)
    {
        delete m_metadataStrings;
        m_metadataStrings = NULL;
    }
    
    
    m_has_mdxMetadata = false;
    
    if (m_mdxMetadata)
    {
        delete m_mdxMetadata;
        m_mdxMetadata = NULL;
    }
    
     
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_Metadata::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
            _outStream << ">";
            
    if (m_has_metadataTypes)
    {
        m_metadataTypes->toXmlElem("main:metadataTypes", "", _outStream);;
    }
    
    if (m_has_metadataStrings)
    {
        m_metadataStrings->toXmlElem("main:metadataStrings", "", _outStream);;
    }
    
    if (m_has_mdxMetadata)
    {
        m_mdxMetadata->toXmlElem("main:mdxMetadata", "", _outStream);;
    }
     
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_futureMetadata())
            {
                (*iter)->get_futureMetadata().toXmlElem("main:futureMetadata", "", _outStream);
            }
            else if ((*iter)->has_cellMetadata())
            {
                (*iter)->get_cellMetadata().toXmlElem("main:cellMetadata", "", _outStream);
            }
            else if ((*iter)->has_valueMetadata())
            {
                (*iter)->get_valueMetadata().toXmlElem("main:valueMetadata", "", _outStream);
            }
            else if ((*iter)->has_extLst())
            {
                (*iter)->get_extLst().toXmlElem("main:extLst", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_Metadata& CT_Metadata::default_instance()
    {    
    if (!CT_Metadata::default_instance_)
    {
        CT_Metadata::default_instance_ = new CT_Metadata();
    }
    return *CT_Metadata::default_instance_;
    }


    // CT_Metadata::ChildGroup_1
    CT_Metadata::ChildGroup_1::ChildGroup_1()
    :m_has_futureMetadata(false),
    m_futureMetadata(NULL),
    m_has_cellMetadata(false),
    m_cellMetadata(NULL),
    m_has_valueMetadata(false),
    m_valueMetadata(NULL),
    m_has_extLst(false),
    m_extLst(NULL)
    {
    }
    bool CT_Metadata::ChildGroup_1::has_futureMetadata() const
    {    
    return m_has_futureMetadata;
    }

    CT_FutureMetadata* CT_Metadata::ChildGroup_1::mutable_futureMetadata()
    {    
    
    m_has_cellMetadata = false;
    
    if (m_cellMetadata)
    {
        delete m_cellMetadata;
        m_cellMetadata = NULL;
    }
    ;
    
    m_has_valueMetadata = false;
    
    if (m_valueMetadata)
    {
        delete m_valueMetadata;
        m_valueMetadata = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_futureMetadata = true;
    if (!m_futureMetadata)
    {
        m_futureMetadata = new CT_FutureMetadata();
    }
    return m_futureMetadata;
    }

    const CT_FutureMetadata& CT_Metadata::ChildGroup_1::get_futureMetadata() const
    {    
    if (m_futureMetadata)
    {
        return *m_futureMetadata;
    }
    return CT_FutureMetadata::default_instance();
    }

    bool CT_Metadata::ChildGroup_1::has_cellMetadata() const
    {    
    return m_has_cellMetadata;
    }

    CT_MetadataBlocks* CT_Metadata::ChildGroup_1::mutable_cellMetadata()
    {    
    
    m_has_futureMetadata = false;
    
    if (m_futureMetadata)
    {
        delete m_futureMetadata;
        m_futureMetadata = NULL;
    }
    ;
    
    m_has_valueMetadata = false;
    
    if (m_valueMetadata)
    {
        delete m_valueMetadata;
        m_valueMetadata = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_cellMetadata = true;
    if (!m_cellMetadata)
    {
        m_cellMetadata = new CT_MetadataBlocks();
    }
    return m_cellMetadata;
    }

    const CT_MetadataBlocks& CT_Metadata::ChildGroup_1::get_cellMetadata() const
    {    
    if (m_cellMetadata)
    {
        return *m_cellMetadata;
    }
    return CT_MetadataBlocks::default_instance();
    }

    bool CT_Metadata::ChildGroup_1::has_valueMetadata() const
    {    
    return m_has_valueMetadata;
    }

    CT_MetadataBlocks* CT_Metadata::ChildGroup_1::mutable_valueMetadata()
    {    
    
    m_has_futureMetadata = false;
    
    if (m_futureMetadata)
    {
        delete m_futureMetadata;
        m_futureMetadata = NULL;
    }
    ;
    
    m_has_cellMetadata = false;
    
    if (m_cellMetadata)
    {
        delete m_cellMetadata;
        m_cellMetadata = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_valueMetadata = true;
    if (!m_valueMetadata)
    {
        m_valueMetadata = new CT_MetadataBlocks();
    }
    return m_valueMetadata;
    }

    const CT_MetadataBlocks& CT_Metadata::ChildGroup_1::get_valueMetadata() const
    {    
    if (m_valueMetadata)
    {
        return *m_valueMetadata;
    }
    return CT_MetadataBlocks::default_instance();
    }

    bool CT_Metadata::ChildGroup_1::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* CT_Metadata::ChildGroup_1::mutable_extLst()
    {    
    
    m_has_futureMetadata = false;
    
    if (m_futureMetadata)
    {
        delete m_futureMetadata;
        m_futureMetadata = NULL;
    }
    ;
    
    m_has_cellMetadata = false;
    
    if (m_cellMetadata)
    {
        delete m_cellMetadata;
        m_cellMetadata = NULL;
    }
    ;
    
    m_has_valueMetadata = false;
    
    if (m_valueMetadata)
    {
        delete m_valueMetadata;
        m_valueMetadata = NULL;
    }
    ;
    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& CT_Metadata::ChildGroup_1::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

CT_Metadata* CT_Metadata::default_instance_ = NULL;

    // CT_MetadataTypes
    CT_MetadataTypes::CT_MetadataTypes()
    :m_has_count_attr(false),
    m_count_attr(0)
    {
    }
    CT_MetadataTypes::~CT_MetadataTypes()
{
    clear();    }
    CT_MetadataType* CT_MetadataTypes::add_metadataType()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_MetadataType* pNewChild = pChildGroup->mutable_metadataType();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_MetadataTypes::clear()
    {    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_MetadataTypes::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_metadataType())
            {
                (*iter)->get_metadataType().toXmlElem("main:metadataType", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_MetadataTypes& CT_MetadataTypes::default_instance()
    {    
    if (!CT_MetadataTypes::default_instance_)
    {
        CT_MetadataTypes::default_instance_ = new CT_MetadataTypes();
    }
    return *CT_MetadataTypes::default_instance_;
    }

    bool CT_MetadataTypes::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void CT_MetadataTypes::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& CT_MetadataTypes::get_count_attr() const
    {    
    return m_count_attr;
    }


    // CT_MetadataTypes::ChildGroup_1
    CT_MetadataTypes::ChildGroup_1::ChildGroup_1()
    :m_has_metadataType(false),
    m_metadataType(NULL)
    {
    }
    bool CT_MetadataTypes::ChildGroup_1::has_metadataType() const
    {    
    return m_has_metadataType;
    }

    CT_MetadataType* CT_MetadataTypes::ChildGroup_1::mutable_metadataType()
    {    
    
    m_has_metadataType = true;
    if (!m_metadataType)
    {
        m_metadataType = new CT_MetadataType();
    }
    return m_metadataType;
    }

    const CT_MetadataType& CT_MetadataTypes::ChildGroup_1::get_metadataType() const
    {    
    if (m_metadataType)
    {
        return *m_metadataType;
    }
    return CT_MetadataType::default_instance();
    }

CT_MetadataTypes* CT_MetadataTypes::default_instance_ = NULL;

    // CT_MetadataType
    CT_MetadataType::CT_MetadataType()
    :m_has_name_attr(false),
    m_name_attr(NULL),
    m_has_minSupportedVersion_attr(false),
    m_minSupportedVersion_attr(0),
    m_has_ghostRow_attr(false),
    m_ghostRow_attr(false),
    m_has_ghostCol_attr(false),
    m_ghostCol_attr(false),
    m_has_edit_attr(false),
    m_edit_attr(false),
    m_has_delete_attr(false),
    m_delete_attr(false),
    m_has_copy_attr(false),
    m_copy_attr(false),
    m_has_pasteAll_attr(false),
    m_pasteAll_attr(false),
    m_has_pasteFormulas_attr(false),
    m_pasteFormulas_attr(false),
    m_has_pasteValues_attr(false),
    m_pasteValues_attr(false),
    m_has_pasteFormats_attr(false),
    m_pasteFormats_attr(false),
    m_has_pasteComments_attr(false),
    m_pasteComments_attr(false),
    m_has_pasteDataValidation_attr(false),
    m_pasteDataValidation_attr(false),
    m_has_pasteBorders_attr(false),
    m_pasteBorders_attr(false),
    m_has_pasteColWidths_attr(false),
    m_pasteColWidths_attr(false),
    m_has_pasteNumberFormats_attr(false),
    m_pasteNumberFormats_attr(false),
    m_has_merge_attr(false),
    m_merge_attr(false),
    m_has_splitFirst_attr(false),
    m_splitFirst_attr(false),
    m_has_splitAll_attr(false),
    m_splitAll_attr(false),
    m_has_rowColShift_attr(false),
    m_rowColShift_attr(false),
    m_has_clearAll_attr(false),
    m_clearAll_attr(false),
    m_has_clearFormats_attr(false),
    m_clearFormats_attr(false),
    m_has_clearContents_attr(false),
    m_clearContents_attr(false),
    m_has_clearComments_attr(false),
    m_clearComments_attr(false),
    m_has_assign_attr(false),
    m_assign_attr(false),
    m_has_coerce_attr(false),
    m_coerce_attr(false),
    m_has_adjust_attr(false),
    m_adjust_attr(false),
    m_has_cellMeta_attr(false),
    m_cellMeta_attr(false)
    {
    }
    CT_MetadataType::~CT_MetadataType()
{
    clear();    }
    void CT_MetadataType::clear()
    {    
    m_has_name_attr = false;
    
    if (m_name_attr)
    {
        delete m_name_attr;
        m_name_attr = NULL;
    }
    
    
    m_has_minSupportedVersion_attr = false;
    m_minSupportedVersion_attr = 0;
    
    m_has_ghostRow_attr = false;
    m_ghostRow_attr = false;
    
    m_has_ghostCol_attr = false;
    m_ghostCol_attr = false;
    
    m_has_edit_attr = false;
    m_edit_attr = false;
    
    m_has_delete_attr = false;
    m_delete_attr = false;
    
    m_has_copy_attr = false;
    m_copy_attr = false;
    
    m_has_pasteAll_attr = false;
    m_pasteAll_attr = false;
    
    m_has_pasteFormulas_attr = false;
    m_pasteFormulas_attr = false;
    
    m_has_pasteValues_attr = false;
    m_pasteValues_attr = false;
    
    m_has_pasteFormats_attr = false;
    m_pasteFormats_attr = false;
    
    m_has_pasteComments_attr = false;
    m_pasteComments_attr = false;
    
    m_has_pasteDataValidation_attr = false;
    m_pasteDataValidation_attr = false;
    
    m_has_pasteBorders_attr = false;
    m_pasteBorders_attr = false;
    
    m_has_pasteColWidths_attr = false;
    m_pasteColWidths_attr = false;
    
    m_has_pasteNumberFormats_attr = false;
    m_pasteNumberFormats_attr = false;
    
    m_has_merge_attr = false;
    m_merge_attr = false;
    
    m_has_splitFirst_attr = false;
    m_splitFirst_attr = false;
    
    m_has_splitAll_attr = false;
    m_splitAll_attr = false;
    
    m_has_rowColShift_attr = false;
    m_rowColShift_attr = false;
    
    m_has_clearAll_attr = false;
    m_clearAll_attr = false;
    
    m_has_clearFormats_attr = false;
    m_clearFormats_attr = false;
    
    m_has_clearContents_attr = false;
    m_clearContents_attr = false;
    
    m_has_clearComments_attr = false;
    m_clearComments_attr = false;
    
    m_has_assign_attr = false;
    m_assign_attr = false;
    
    m_has_coerce_attr = false;
    m_coerce_attr = false;
    
    m_has_adjust_attr = false;
    m_adjust_attr = false;
    
    m_has_cellMeta_attr = false;
    m_cellMeta_attr = false;
    }

    void CT_MetadataType::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_name_attr)
    {
        m_name_attr->toXmlAttr("name", _outStream);
    }
    
    
    if (m_has_minSupportedVersion_attr)
    {
        _outStream << " " << "minSupportedVersion" << "=\"" << m_minSupportedVersion_attr << "\"";
    }
    
    
    if (m_has_ghostRow_attr)
    {
        _outStream << " " << "ghostRow" << "=\"" << XSD::XMLBooleanStr(m_ghostRow_attr) << "\"";
    }
    
    
    if (m_has_ghostCol_attr)
    {
        _outStream << " " << "ghostCol" << "=\"" << XSD::XMLBooleanStr(m_ghostCol_attr) << "\"";
    }
    
    
    if (m_has_edit_attr)
    {
        _outStream << " " << "edit" << "=\"" << XSD::XMLBooleanStr(m_edit_attr) << "\"";
    }
    
    
    if (m_has_delete_attr)
    {
        _outStream << " " << "delete" << "=\"" << XSD::XMLBooleanStr(m_delete_attr) << "\"";
    }
    
    
    if (m_has_copy_attr)
    {
        _outStream << " " << "copy" << "=\"" << XSD::XMLBooleanStr(m_copy_attr) << "\"";
    }
    
    
    if (m_has_pasteAll_attr)
    {
        _outStream << " " << "pasteAll" << "=\"" << XSD::XMLBooleanStr(m_pasteAll_attr) << "\"";
    }
    
    
    if (m_has_pasteFormulas_attr)
    {
        _outStream << " " << "pasteFormulas" << "=\"" << XSD::XMLBooleanStr(m_pasteFormulas_attr) << "\"";
    }
    
    
    if (m_has_pasteValues_attr)
    {
        _outStream << " " << "pasteValues" << "=\"" << XSD::XMLBooleanStr(m_pasteValues_attr) << "\"";
    }
    
    
    if (m_has_pasteFormats_attr)
    {
        _outStream << " " << "pasteFormats" << "=\"" << XSD::XMLBooleanStr(m_pasteFormats_attr) << "\"";
    }
    
    
    if (m_has_pasteComments_attr)
    {
        _outStream << " " << "pasteComments" << "=\"" << XSD::XMLBooleanStr(m_pasteComments_attr) << "\"";
    }
    
    
    if (m_has_pasteDataValidation_attr)
    {
        _outStream << " " << "pasteDataValidation" << "=\"" << XSD::XMLBooleanStr(m_pasteDataValidation_attr) << "\"";
    }
    
    
    if (m_has_pasteBorders_attr)
    {
        _outStream << " " << "pasteBorders" << "=\"" << XSD::XMLBooleanStr(m_pasteBorders_attr) << "\"";
    }
    
    
    if (m_has_pasteColWidths_attr)
    {
        _outStream << " " << "pasteColWidths" << "=\"" << XSD::XMLBooleanStr(m_pasteColWidths_attr) << "\"";
    }
    
    
    if (m_has_pasteNumberFormats_attr)
    {
        _outStream << " " << "pasteNumberFormats" << "=\"" << XSD::XMLBooleanStr(m_pasteNumberFormats_attr) << "\"";
    }
    
    
    if (m_has_merge_attr)
    {
        _outStream << " " << "merge" << "=\"" << XSD::XMLBooleanStr(m_merge_attr) << "\"";
    }
    
    
    if (m_has_splitFirst_attr)
    {
        _outStream << " " << "splitFirst" << "=\"" << XSD::XMLBooleanStr(m_splitFirst_attr) << "\"";
    }
    
    
    if (m_has_splitAll_attr)
    {
        _outStream << " " << "splitAll" << "=\"" << XSD::XMLBooleanStr(m_splitAll_attr) << "\"";
    }
    
    
    if (m_has_rowColShift_attr)
    {
        _outStream << " " << "rowColShift" << "=\"" << XSD::XMLBooleanStr(m_rowColShift_attr) << "\"";
    }
    
    
    if (m_has_clearAll_attr)
    {
        _outStream << " " << "clearAll" << "=\"" << XSD::XMLBooleanStr(m_clearAll_attr) << "\"";
    }
    
    
    if (m_has_clearFormats_attr)
    {
        _outStream << " " << "clearFormats" << "=\"" << XSD::XMLBooleanStr(m_clearFormats_attr) << "\"";
    }
    
    
    if (m_has_clearContents_attr)
    {
        _outStream << " " << "clearContents" << "=\"" << XSD::XMLBooleanStr(m_clearContents_attr) << "\"";
    }
    
    
    if (m_has_clearComments_attr)
    {
        _outStream << " " << "clearComments" << "=\"" << XSD::XMLBooleanStr(m_clearComments_attr) << "\"";
    }
    
    
    if (m_has_assign_attr)
    {
        _outStream << " " << "assign" << "=\"" << XSD::XMLBooleanStr(m_assign_attr) << "\"";
    }
    
    
    if (m_has_coerce_attr)
    {
        _outStream << " " << "coerce" << "=\"" << XSD::XMLBooleanStr(m_coerce_attr) << "\"";
    }
    
    
    if (m_has_adjust_attr)
    {
        _outStream << " " << "adjust" << "=\"" << XSD::XMLBooleanStr(m_adjust_attr) << "\"";
    }
    
    
    if (m_has_cellMeta_attr)
    {
        _outStream << " " << "cellMeta" << "=\"" << XSD::XMLBooleanStr(m_cellMeta_attr) << "\"";
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_MetadataType& CT_MetadataType::default_instance()
    {    
    if (!CT_MetadataType::default_instance_)
    {
        CT_MetadataType::default_instance_ = new CT_MetadataType();
    }
    return *CT_MetadataType::default_instance_;
    }

    bool CT_MetadataType::has_name_attr() const
    {    
    return m_has_name_attr;
    }

    void CT_MetadataType::set_name_attr(const ns_s::ST_Xstring& _name_attr)
    {    
    m_has_name_attr = true;
    m_name_attr = new ns_s::ST_Xstring(_name_attr);
    }

    const ns_s::ST_Xstring& CT_MetadataType::get_name_attr() const
    {    
    if (m_name_attr)
    {
        return *m_name_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_MetadataType::has_minSupportedVersion_attr() const
    {    
    return m_has_minSupportedVersion_attr;
    }

    void CT_MetadataType::set_minSupportedVersion_attr(const XSD::unsignedInt_& _minSupportedVersion_attr)
    {    
    m_has_minSupportedVersion_attr = true;
    m_minSupportedVersion_attr = _minSupportedVersion_attr;
    }

    const XSD::unsignedInt_& CT_MetadataType::get_minSupportedVersion_attr() const
    {    
    return m_minSupportedVersion_attr;
    }

    bool CT_MetadataType::has_ghostRow_attr() const
    {    
    return m_has_ghostRow_attr;
    }

    void CT_MetadataType::set_ghostRow_attr(const XSD::boolean_& _ghostRow_attr)
    {    
    m_has_ghostRow_attr = true;
    m_ghostRow_attr = _ghostRow_attr;
    }

    const XSD::boolean_& CT_MetadataType::get_ghostRow_attr() const
    {    
    return m_ghostRow_attr;
    }

    bool CT_MetadataType::has_ghostCol_attr() const
    {    
    return m_has_ghostCol_attr;
    }

    void CT_MetadataType::set_ghostCol_attr(const XSD::boolean_& _ghostCol_attr)
    {    
    m_has_ghostCol_attr = true;
    m_ghostCol_attr = _ghostCol_attr;
    }

    const XSD::boolean_& CT_MetadataType::get_ghostCol_attr() const
    {    
    return m_ghostCol_attr;
    }

    bool CT_MetadataType::has_edit_attr() const
    {    
    return m_has_edit_attr;
    }

    void CT_MetadataType::set_edit_attr(const XSD::boolean_& _edit_attr)
    {    
    m_has_edit_attr = true;
    m_edit_attr = _edit_attr;
    }

    const XSD::boolean_& CT_MetadataType::get_edit_attr() const
    {    
    return m_edit_attr;
    }

    bool CT_MetadataType::has_delete_attr() const
    {    
    return m_has_delete_attr;
    }

    void CT_MetadataType::set_delete_attr(const XSD::boolean_& _delete_attr)
    {    
    m_has_delete_attr = true;
    m_delete_attr = _delete_attr;
    }

    const XSD::boolean_& CT_MetadataType::get_delete_attr() const
    {    
    return m_delete_attr;
    }

    bool CT_MetadataType::has_copy_attr() const
    {    
    return m_has_copy_attr;
    }

    void CT_MetadataType::set_copy_attr(const XSD::boolean_& _copy_attr)
    {    
    m_has_copy_attr = true;
    m_copy_attr = _copy_attr;
    }

    const XSD::boolean_& CT_MetadataType::get_copy_attr() const
    {    
    return m_copy_attr;
    }

    bool CT_MetadataType::has_pasteAll_attr() const
    {    
    return m_has_pasteAll_attr;
    }

    void CT_MetadataType::set_pasteAll_attr(const XSD::boolean_& _pasteAll_attr)
    {    
    m_has_pasteAll_attr = true;
    m_pasteAll_attr = _pasteAll_attr;
    }

    const XSD::boolean_& CT_MetadataType::get_pasteAll_attr() const
    {    
    return m_pasteAll_attr;
    }

    bool CT_MetadataType::has_pasteFormulas_attr() const
    {    
    return m_has_pasteFormulas_attr;
    }

    void CT_MetadataType::set_pasteFormulas_attr(const XSD::boolean_& _pasteFormulas_attr)
    {    
    m_has_pasteFormulas_attr = true;
    m_pasteFormulas_attr = _pasteFormulas_attr;
    }

    const XSD::boolean_& CT_MetadataType::get_pasteFormulas_attr() const
    {    
    return m_pasteFormulas_attr;
    }

    bool CT_MetadataType::has_pasteValues_attr() const
    {    
    return m_has_pasteValues_attr;
    }

    void CT_MetadataType::set_pasteValues_attr(const XSD::boolean_& _pasteValues_attr)
    {    
    m_has_pasteValues_attr = true;
    m_pasteValues_attr = _pasteValues_attr;
    }

    const XSD::boolean_& CT_MetadataType::get_pasteValues_attr() const
    {    
    return m_pasteValues_attr;
    }

    bool CT_MetadataType::has_pasteFormats_attr() const
    {    
    return m_has_pasteFormats_attr;
    }

    void CT_MetadataType::set_pasteFormats_attr(const XSD::boolean_& _pasteFormats_attr)
    {    
    m_has_pasteFormats_attr = true;
    m_pasteFormats_attr = _pasteFormats_attr;
    }

    const XSD::boolean_& CT_MetadataType::get_pasteFormats_attr() const
    {    
    return m_pasteFormats_attr;
    }

    bool CT_MetadataType::has_pasteComments_attr() const
    {    
    return m_has_pasteComments_attr;
    }

    void CT_MetadataType::set_pasteComments_attr(const XSD::boolean_& _pasteComments_attr)
    {    
    m_has_pasteComments_attr = true;
    m_pasteComments_attr = _pasteComments_attr;
    }

    const XSD::boolean_& CT_MetadataType::get_pasteComments_attr() const
    {    
    return m_pasteComments_attr;
    }

    bool CT_MetadataType::has_pasteDataValidation_attr() const
    {    
    return m_has_pasteDataValidation_attr;
    }

    void CT_MetadataType::set_pasteDataValidation_attr(const XSD::boolean_& _pasteDataValidation_attr)
    {    
    m_has_pasteDataValidation_attr = true;
    m_pasteDataValidation_attr = _pasteDataValidation_attr;
    }

    const XSD::boolean_& CT_MetadataType::get_pasteDataValidation_attr() const
    {    
    return m_pasteDataValidation_attr;
    }

    bool CT_MetadataType::has_pasteBorders_attr() const
    {    
    return m_has_pasteBorders_attr;
    }

    void CT_MetadataType::set_pasteBorders_attr(const XSD::boolean_& _pasteBorders_attr)
    {    
    m_has_pasteBorders_attr = true;
    m_pasteBorders_attr = _pasteBorders_attr;
    }

    const XSD::boolean_& CT_MetadataType::get_pasteBorders_attr() const
    {    
    return m_pasteBorders_attr;
    }

    bool CT_MetadataType::has_pasteColWidths_attr() const
    {    
    return m_has_pasteColWidths_attr;
    }

    void CT_MetadataType::set_pasteColWidths_attr(const XSD::boolean_& _pasteColWidths_attr)
    {    
    m_has_pasteColWidths_attr = true;
    m_pasteColWidths_attr = _pasteColWidths_attr;
    }

    const XSD::boolean_& CT_MetadataType::get_pasteColWidths_attr() const
    {    
    return m_pasteColWidths_attr;
    }

    bool CT_MetadataType::has_pasteNumberFormats_attr() const
    {    
    return m_has_pasteNumberFormats_attr;
    }

    void CT_MetadataType::set_pasteNumberFormats_attr(const XSD::boolean_& _pasteNumberFormats_attr)
    {    
    m_has_pasteNumberFormats_attr = true;
    m_pasteNumberFormats_attr = _pasteNumberFormats_attr;
    }

    const XSD::boolean_& CT_MetadataType::get_pasteNumberFormats_attr() const
    {    
    return m_pasteNumberFormats_attr;
    }

    bool CT_MetadataType::has_merge_attr() const
    {    
    return m_has_merge_attr;
    }

    void CT_MetadataType::set_merge_attr(const XSD::boolean_& _merge_attr)
    {    
    m_has_merge_attr = true;
    m_merge_attr = _merge_attr;
    }

    const XSD::boolean_& CT_MetadataType::get_merge_attr() const
    {    
    return m_merge_attr;
    }

    bool CT_MetadataType::has_splitFirst_attr() const
    {    
    return m_has_splitFirst_attr;
    }

    void CT_MetadataType::set_splitFirst_attr(const XSD::boolean_& _splitFirst_attr)
    {    
    m_has_splitFirst_attr = true;
    m_splitFirst_attr = _splitFirst_attr;
    }

    const XSD::boolean_& CT_MetadataType::get_splitFirst_attr() const
    {    
    return m_splitFirst_attr;
    }

    bool CT_MetadataType::has_splitAll_attr() const
    {    
    return m_has_splitAll_attr;
    }

    void CT_MetadataType::set_splitAll_attr(const XSD::boolean_& _splitAll_attr)
    {    
    m_has_splitAll_attr = true;
    m_splitAll_attr = _splitAll_attr;
    }

    const XSD::boolean_& CT_MetadataType::get_splitAll_attr() const
    {    
    return m_splitAll_attr;
    }

    bool CT_MetadataType::has_rowColShift_attr() const
    {    
    return m_has_rowColShift_attr;
    }

    void CT_MetadataType::set_rowColShift_attr(const XSD::boolean_& _rowColShift_attr)
    {    
    m_has_rowColShift_attr = true;
    m_rowColShift_attr = _rowColShift_attr;
    }

    const XSD::boolean_& CT_MetadataType::get_rowColShift_attr() const
    {    
    return m_rowColShift_attr;
    }

    bool CT_MetadataType::has_clearAll_attr() const
    {    
    return m_has_clearAll_attr;
    }

    void CT_MetadataType::set_clearAll_attr(const XSD::boolean_& _clearAll_attr)
    {    
    m_has_clearAll_attr = true;
    m_clearAll_attr = _clearAll_attr;
    }

    const XSD::boolean_& CT_MetadataType::get_clearAll_attr() const
    {    
    return m_clearAll_attr;
    }

    bool CT_MetadataType::has_clearFormats_attr() const
    {    
    return m_has_clearFormats_attr;
    }

    void CT_MetadataType::set_clearFormats_attr(const XSD::boolean_& _clearFormats_attr)
    {    
    m_has_clearFormats_attr = true;
    m_clearFormats_attr = _clearFormats_attr;
    }

    const XSD::boolean_& CT_MetadataType::get_clearFormats_attr() const
    {    
    return m_clearFormats_attr;
    }

    bool CT_MetadataType::has_clearContents_attr() const
    {    
    return m_has_clearContents_attr;
    }

    void CT_MetadataType::set_clearContents_attr(const XSD::boolean_& _clearContents_attr)
    {    
    m_has_clearContents_attr = true;
    m_clearContents_attr = _clearContents_attr;
    }

    const XSD::boolean_& CT_MetadataType::get_clearContents_attr() const
    {    
    return m_clearContents_attr;
    }

    bool CT_MetadataType::has_clearComments_attr() const
    {    
    return m_has_clearComments_attr;
    }

    void CT_MetadataType::set_clearComments_attr(const XSD::boolean_& _clearComments_attr)
    {    
    m_has_clearComments_attr = true;
    m_clearComments_attr = _clearComments_attr;
    }

    const XSD::boolean_& CT_MetadataType::get_clearComments_attr() const
    {    
    return m_clearComments_attr;
    }

    bool CT_MetadataType::has_assign_attr() const
    {    
    return m_has_assign_attr;
    }

    void CT_MetadataType::set_assign_attr(const XSD::boolean_& _assign_attr)
    {    
    m_has_assign_attr = true;
    m_assign_attr = _assign_attr;
    }

    const XSD::boolean_& CT_MetadataType::get_assign_attr() const
    {    
    return m_assign_attr;
    }

    bool CT_MetadataType::has_coerce_attr() const
    {    
    return m_has_coerce_attr;
    }

    void CT_MetadataType::set_coerce_attr(const XSD::boolean_& _coerce_attr)
    {    
    m_has_coerce_attr = true;
    m_coerce_attr = _coerce_attr;
    }

    const XSD::boolean_& CT_MetadataType::get_coerce_attr() const
    {    
    return m_coerce_attr;
    }

    bool CT_MetadataType::has_adjust_attr() const
    {    
    return m_has_adjust_attr;
    }

    void CT_MetadataType::set_adjust_attr(const XSD::boolean_& _adjust_attr)
    {    
    m_has_adjust_attr = true;
    m_adjust_attr = _adjust_attr;
    }

    const XSD::boolean_& CT_MetadataType::get_adjust_attr() const
    {    
    return m_adjust_attr;
    }

    bool CT_MetadataType::has_cellMeta_attr() const
    {    
    return m_has_cellMeta_attr;
    }

    void CT_MetadataType::set_cellMeta_attr(const XSD::boolean_& _cellMeta_attr)
    {    
    m_has_cellMeta_attr = true;
    m_cellMeta_attr = _cellMeta_attr;
    }

    const XSD::boolean_& CT_MetadataType::get_cellMeta_attr() const
    {    
    return m_cellMeta_attr;
    }

CT_MetadataType* CT_MetadataType::default_instance_ = NULL;

    // CT_MetadataBlocks
    CT_MetadataBlocks::CT_MetadataBlocks()
    :m_has_count_attr(false),
    m_count_attr(0)
    {
    }
    CT_MetadataBlocks::~CT_MetadataBlocks()
{
    clear();    }
    CT_MetadataBlock* CT_MetadataBlocks::add_bk()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_MetadataBlock* pNewChild = pChildGroup->mutable_bk();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_MetadataBlocks::clear()
    {    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_MetadataBlocks::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_bk())
            {
                (*iter)->get_bk().toXmlElem("main:bk", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_MetadataBlocks& CT_MetadataBlocks::default_instance()
    {    
    if (!CT_MetadataBlocks::default_instance_)
    {
        CT_MetadataBlocks::default_instance_ = new CT_MetadataBlocks();
    }
    return *CT_MetadataBlocks::default_instance_;
    }

    bool CT_MetadataBlocks::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void CT_MetadataBlocks::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& CT_MetadataBlocks::get_count_attr() const
    {    
    return m_count_attr;
    }


    // CT_MetadataBlocks::ChildGroup_1
    CT_MetadataBlocks::ChildGroup_1::ChildGroup_1()
    :m_has_bk(false),
    m_bk(NULL)
    {
    }
    bool CT_MetadataBlocks::ChildGroup_1::has_bk() const
    {    
    return m_has_bk;
    }

    CT_MetadataBlock* CT_MetadataBlocks::ChildGroup_1::mutable_bk()
    {    
    
    m_has_bk = true;
    if (!m_bk)
    {
        m_bk = new CT_MetadataBlock();
    }
    return m_bk;
    }

    const CT_MetadataBlock& CT_MetadataBlocks::ChildGroup_1::get_bk() const
    {    
    if (m_bk)
    {
        return *m_bk;
    }
    return CT_MetadataBlock::default_instance();
    }

CT_MetadataBlocks* CT_MetadataBlocks::default_instance_ = NULL;

    // CT_MetadataBlock
    CT_MetadataBlock::CT_MetadataBlock()

    {
    }
    CT_MetadataBlock::~CT_MetadataBlock()
{
    clear();    }
    CT_MetadataRecord* CT_MetadataBlock::add_rc()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_MetadataRecord* pNewChild = pChildGroup->mutable_rc();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_MetadataBlock::clear()
    {    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_MetadataBlock::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_rc())
            {
                (*iter)->get_rc().toXmlElem("main:rc", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_MetadataBlock& CT_MetadataBlock::default_instance()
    {    
    if (!CT_MetadataBlock::default_instance_)
    {
        CT_MetadataBlock::default_instance_ = new CT_MetadataBlock();
    }
    return *CT_MetadataBlock::default_instance_;
    }


    // CT_MetadataBlock::ChildGroup_1
    CT_MetadataBlock::ChildGroup_1::ChildGroup_1()
    :m_has_rc(false),
    m_rc(NULL)
    {
    }
    bool CT_MetadataBlock::ChildGroup_1::has_rc() const
    {    
    return m_has_rc;
    }

    CT_MetadataRecord* CT_MetadataBlock::ChildGroup_1::mutable_rc()
    {    
    
    m_has_rc = true;
    if (!m_rc)
    {
        m_rc = new CT_MetadataRecord();
    }
    return m_rc;
    }

    const CT_MetadataRecord& CT_MetadataBlock::ChildGroup_1::get_rc() const
    {    
    if (m_rc)
    {
        return *m_rc;
    }
    return CT_MetadataRecord::default_instance();
    }

CT_MetadataBlock* CT_MetadataBlock::default_instance_ = NULL;

    // CT_MetadataRecord
    CT_MetadataRecord::CT_MetadataRecord()
    :m_has_t_attr(false),
    m_t_attr(0),
    m_has_v_attr(false),
    m_v_attr(0)
    {
    }
    CT_MetadataRecord::~CT_MetadataRecord()
{
    clear();    }
    void CT_MetadataRecord::clear()
    {    
    m_has_t_attr = false;
    m_t_attr = 0;
    
    m_has_v_attr = false;
    m_v_attr = 0;
    }

    void CT_MetadataRecord::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_t_attr)
    {
        _outStream << " " << "t" << "=\"" << m_t_attr << "\"";
    }
    
    
    if (m_has_v_attr)
    {
        _outStream << " " << "v" << "=\"" << m_v_attr << "\"";
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_MetadataRecord& CT_MetadataRecord::default_instance()
    {    
    if (!CT_MetadataRecord::default_instance_)
    {
        CT_MetadataRecord::default_instance_ = new CT_MetadataRecord();
    }
    return *CT_MetadataRecord::default_instance_;
    }

    bool CT_MetadataRecord::has_t_attr() const
    {    
    return m_has_t_attr;
    }

    void CT_MetadataRecord::set_t_attr(const XSD::unsignedInt_& _t_attr)
    {    
    m_has_t_attr = true;
    m_t_attr = _t_attr;
    }

    const XSD::unsignedInt_& CT_MetadataRecord::get_t_attr() const
    {    
    return m_t_attr;
    }

    bool CT_MetadataRecord::has_v_attr() const
    {    
    return m_has_v_attr;
    }

    void CT_MetadataRecord::set_v_attr(const XSD::unsignedInt_& _v_attr)
    {    
    m_has_v_attr = true;
    m_v_attr = _v_attr;
    }

    const XSD::unsignedInt_& CT_MetadataRecord::get_v_attr() const
    {    
    return m_v_attr;
    }

CT_MetadataRecord* CT_MetadataRecord::default_instance_ = NULL;

    // CT_FutureMetadata
    CT_FutureMetadata::CT_FutureMetadata()
    :m_has_name_attr(false),
    m_name_attr(NULL),
    m_has_count_attr(false),
    m_count_attr(0)
    {
    }
    CT_FutureMetadata::~CT_FutureMetadata()
{
    clear();    }
    CT_FutureMetadataBlock* CT_FutureMetadata::add_bk()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_FutureMetadataBlock* pNewChild = pChildGroup->mutable_bk();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_ExtensionList* CT_FutureMetadata::add_extLst()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_ExtensionList* pNewChild = pChildGroup->mutable_extLst();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_FutureMetadata::clear()
    {    
    m_has_name_attr = false;
    
    if (m_name_attr)
    {
        delete m_name_attr;
        m_name_attr = NULL;
    }
    
    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_FutureMetadata::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_name_attr)
    {
        m_name_attr->toXmlAttr("name", _outStream);
    }
    
    
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_bk())
            {
                (*iter)->get_bk().toXmlElem("main:bk", "", _outStream);
            }
            else if ((*iter)->has_extLst())
            {
                (*iter)->get_extLst().toXmlElem("main:extLst", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_FutureMetadata& CT_FutureMetadata::default_instance()
    {    
    if (!CT_FutureMetadata::default_instance_)
    {
        CT_FutureMetadata::default_instance_ = new CT_FutureMetadata();
    }
    return *CT_FutureMetadata::default_instance_;
    }

    bool CT_FutureMetadata::has_name_attr() const
    {    
    return m_has_name_attr;
    }

    void CT_FutureMetadata::set_name_attr(const ns_s::ST_Xstring& _name_attr)
    {    
    m_has_name_attr = true;
    m_name_attr = new ns_s::ST_Xstring(_name_attr);
    }

    const ns_s::ST_Xstring& CT_FutureMetadata::get_name_attr() const
    {    
    if (m_name_attr)
    {
        return *m_name_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_FutureMetadata::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void CT_FutureMetadata::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& CT_FutureMetadata::get_count_attr() const
    {    
    return m_count_attr;
    }


    // CT_FutureMetadata::ChildGroup_1
    CT_FutureMetadata::ChildGroup_1::ChildGroup_1()
    :m_has_bk(false),
    m_bk(NULL),
    m_has_extLst(false),
    m_extLst(NULL)
    {
    }
    bool CT_FutureMetadata::ChildGroup_1::has_bk() const
    {    
    return m_has_bk;
    }

    CT_FutureMetadataBlock* CT_FutureMetadata::ChildGroup_1::mutable_bk()
    {    
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_bk = true;
    if (!m_bk)
    {
        m_bk = new CT_FutureMetadataBlock();
    }
    return m_bk;
    }

    const CT_FutureMetadataBlock& CT_FutureMetadata::ChildGroup_1::get_bk() const
    {    
    if (m_bk)
    {
        return *m_bk;
    }
    return CT_FutureMetadataBlock::default_instance();
    }

    bool CT_FutureMetadata::ChildGroup_1::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* CT_FutureMetadata::ChildGroup_1::mutable_extLst()
    {    
    
    m_has_bk = false;
    
    if (m_bk)
    {
        delete m_bk;
        m_bk = NULL;
    }
    ;
    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& CT_FutureMetadata::ChildGroup_1::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

CT_FutureMetadata* CT_FutureMetadata::default_instance_ = NULL;

    // CT_FutureMetadataBlock
    CT_FutureMetadataBlock::CT_FutureMetadataBlock()
    :m_has_extLst(false),
    m_extLst(NULL)
    {
    }
    CT_FutureMetadataBlock::~CT_FutureMetadataBlock()
{
    clear();    }
    bool CT_FutureMetadataBlock::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* CT_FutureMetadataBlock::mutable_extLst()
    {    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& CT_FutureMetadataBlock::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

    void CT_FutureMetadataBlock::clear()
    {    }

    void CT_FutureMetadataBlock::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
            _outStream << ">";
            
    if (m_has_extLst)
    {
        m_extLst->toXmlElem("main:extLst", "", _outStream);;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_FutureMetadataBlock& CT_FutureMetadataBlock::default_instance()
    {    
    if (!CT_FutureMetadataBlock::default_instance_)
    {
        CT_FutureMetadataBlock::default_instance_ = new CT_FutureMetadataBlock();
    }
    return *CT_FutureMetadataBlock::default_instance_;
    }

CT_FutureMetadataBlock* CT_FutureMetadataBlock::default_instance_ = NULL;

    // CT_MdxMetadata
    CT_MdxMetadata::CT_MdxMetadata()
    :m_has_count_attr(false),
    m_count_attr(0)
    {
    }
    CT_MdxMetadata::~CT_MdxMetadata()
{
    clear();    }
    CT_Mdx* CT_MdxMetadata::add_mdx()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Mdx* pNewChild = pChildGroup->mutable_mdx();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_MdxMetadata::clear()
    {    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_MdxMetadata::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_mdx())
            {
                (*iter)->get_mdx().toXmlElem("main:mdx", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_MdxMetadata& CT_MdxMetadata::default_instance()
    {    
    if (!CT_MdxMetadata::default_instance_)
    {
        CT_MdxMetadata::default_instance_ = new CT_MdxMetadata();
    }
    return *CT_MdxMetadata::default_instance_;
    }

    bool CT_MdxMetadata::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void CT_MdxMetadata::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& CT_MdxMetadata::get_count_attr() const
    {    
    return m_count_attr;
    }


    // CT_MdxMetadata::ChildGroup_1
    CT_MdxMetadata::ChildGroup_1::ChildGroup_1()
    :m_has_mdx(false),
    m_mdx(NULL)
    {
    }
    bool CT_MdxMetadata::ChildGroup_1::has_mdx() const
    {    
    return m_has_mdx;
    }

    CT_Mdx* CT_MdxMetadata::ChildGroup_1::mutable_mdx()
    {    
    
    m_has_mdx = true;
    if (!m_mdx)
    {
        m_mdx = new CT_Mdx();
    }
    return m_mdx;
    }

    const CT_Mdx& CT_MdxMetadata::ChildGroup_1::get_mdx() const
    {    
    if (m_mdx)
    {
        return *m_mdx;
    }
    return CT_Mdx::default_instance();
    }

CT_MdxMetadata* CT_MdxMetadata::default_instance_ = NULL;

    // CT_Mdx
    CT_Mdx::CT_Mdx()
    :m_has_t(false),
    m_t(NULL),
    m_has_ms(false),
    m_ms(NULL),
    m_has_p(false),
    m_p(NULL),
    m_has_k(false),
    m_k(NULL),
    m_has_n_attr(false),
    m_n_attr(0),
    m_has_f_attr(false),
    m_f_attr(NULL)
    {
    }
    CT_Mdx::~CT_Mdx()
{
    clear();    }
    bool CT_Mdx::has_t() const
    {    
    return m_has_t;
    }

    CT_MdxTuple* CT_Mdx::mutable_t()
    {    
    
    m_has_ms = false;
    
    if (m_ms)
    {
        delete m_ms;
        m_ms = NULL;
    }
    ;
    
    m_has_p = false;
    
    if (m_p)
    {
        delete m_p;
        m_p = NULL;
    }
    ;
    
    m_has_k = false;
    
    if (m_k)
    {
        delete m_k;
        m_k = NULL;
    }
    ;
    
    m_has_t = true;
    if (!m_t)
    {
        m_t = new CT_MdxTuple();
    }
    return m_t;
    }

    const CT_MdxTuple& CT_Mdx::get_t() const
    {    
    if (m_t)
    {
        return *m_t;
    }
    return CT_MdxTuple::default_instance();
    }

    bool CT_Mdx::has_ms() const
    {    
    return m_has_ms;
    }

    CT_MdxSet* CT_Mdx::mutable_ms()
    {    
    
    m_has_t = false;
    
    if (m_t)
    {
        delete m_t;
        m_t = NULL;
    }
    ;
    
    m_has_p = false;
    
    if (m_p)
    {
        delete m_p;
        m_p = NULL;
    }
    ;
    
    m_has_k = false;
    
    if (m_k)
    {
        delete m_k;
        m_k = NULL;
    }
    ;
    
    m_has_ms = true;
    if (!m_ms)
    {
        m_ms = new CT_MdxSet();
    }
    return m_ms;
    }

    const CT_MdxSet& CT_Mdx::get_ms() const
    {    
    if (m_ms)
    {
        return *m_ms;
    }
    return CT_MdxSet::default_instance();
    }

    bool CT_Mdx::has_p() const
    {    
    return m_has_p;
    }

    CT_MdxMemeberProp* CT_Mdx::mutable_p()
    {    
    
    m_has_t = false;
    
    if (m_t)
    {
        delete m_t;
        m_t = NULL;
    }
    ;
    
    m_has_ms = false;
    
    if (m_ms)
    {
        delete m_ms;
        m_ms = NULL;
    }
    ;
    
    m_has_k = false;
    
    if (m_k)
    {
        delete m_k;
        m_k = NULL;
    }
    ;
    
    m_has_p = true;
    if (!m_p)
    {
        m_p = new CT_MdxMemeberProp();
    }
    return m_p;
    }

    const CT_MdxMemeberProp& CT_Mdx::get_p() const
    {    
    if (m_p)
    {
        return *m_p;
    }
    return CT_MdxMemeberProp::default_instance();
    }

    bool CT_Mdx::has_k() const
    {    
    return m_has_k;
    }

    CT_MdxKPI* CT_Mdx::mutable_k()
    {    
    
    m_has_t = false;
    
    if (m_t)
    {
        delete m_t;
        m_t = NULL;
    }
    ;
    
    m_has_ms = false;
    
    if (m_ms)
    {
        delete m_ms;
        m_ms = NULL;
    }
    ;
    
    m_has_p = false;
    
    if (m_p)
    {
        delete m_p;
        m_p = NULL;
    }
    ;
    
    m_has_k = true;
    if (!m_k)
    {
        m_k = new CT_MdxKPI();
    }
    return m_k;
    }

    const CT_MdxKPI& CT_Mdx::get_k() const
    {    
    if (m_k)
    {
        return *m_k;
    }
    return CT_MdxKPI::default_instance();
    }

    void CT_Mdx::clear()
    {    
    m_has_n_attr = false;
    m_n_attr = 0;
    
    m_has_f_attr = false;
    
    if (m_f_attr)
    {
        delete m_f_attr;
        m_f_attr = NULL;
    }
    
    }

    void CT_Mdx::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_n_attr)
    {
        _outStream << " " << "n" << "=\"" << m_n_attr << "\"";
    }
    
    
    if (m_has_f_attr)
    {
        m_f_attr->toXmlAttr("f", _outStream);
    }
    
            _outStream << ">";
            
    if (m_has_t)
    {
        m_t->toXmlElem("main:t", "", _outStream);;
    }
    
    if (m_has_ms)
    {
        m_ms->toXmlElem("main:ms", "", _outStream);;
    }
    
    if (m_has_p)
    {
        m_p->toXmlElem("main:p", "", _outStream);;
    }
    
    if (m_has_k)
    {
        m_k->toXmlElem("main:k", "", _outStream);;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_Mdx& CT_Mdx::default_instance()
    {    
    if (!CT_Mdx::default_instance_)
    {
        CT_Mdx::default_instance_ = new CT_Mdx();
    }
    return *CT_Mdx::default_instance_;
    }

    bool CT_Mdx::has_n_attr() const
    {    
    return m_has_n_attr;
    }

    void CT_Mdx::set_n_attr(const XSD::unsignedInt_& _n_attr)
    {    
    m_has_n_attr = true;
    m_n_attr = _n_attr;
    }

    const XSD::unsignedInt_& CT_Mdx::get_n_attr() const
    {    
    return m_n_attr;
    }

    bool CT_Mdx::has_f_attr() const
    {    
    return m_has_f_attr;
    }

    void CT_Mdx::set_f_attr(const ST_MdxFunctionType& _f_attr)
    {    
    m_has_f_attr = true;
    m_f_attr = new ST_MdxFunctionType(_f_attr);
    }

    const ST_MdxFunctionType& CT_Mdx::get_f_attr() const
    {    
    if (m_f_attr)
    {
        return *m_f_attr;
    }
    return ST_MdxFunctionType::default_instance();
    }

CT_Mdx* CT_Mdx::default_instance_ = NULL;

    // CT_MdxTuple
    CT_MdxTuple::CT_MdxTuple()
    :m_has_c_attr(false),
    m_c_attr(0),
    m_has_ct_attr(false),
    m_ct_attr(NULL),
    m_has_si_attr(false),
    m_si_attr(0),
    m_has_fi_attr(false),
    m_fi_attr(0),
    m_has_bc_attr(false),
    m_bc_attr(NULL),
    m_has_fc_attr(false),
    m_fc_attr(NULL),
    m_has_i_attr(false),
    m_i_attr(false),
    m_has_u_attr(false),
    m_u_attr(false),
    m_has_st_attr(false),
    m_st_attr(false),
    m_has_b_attr(false),
    m_b_attr(false)
    {
    }
    CT_MdxTuple::~CT_MdxTuple()
{
    clear();    }
    CT_MetadataStringIndex* CT_MdxTuple::add_n()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_MetadataStringIndex* pNewChild = pChildGroup->mutable_n();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_MdxTuple::clear()
    {    
    m_has_c_attr = false;
    m_c_attr = 0;
    
    m_has_ct_attr = false;
    
    if (m_ct_attr)
    {
        delete m_ct_attr;
        m_ct_attr = NULL;
    }
    
    
    m_has_si_attr = false;
    m_si_attr = 0;
    
    m_has_fi_attr = false;
    m_fi_attr = 0;
    
    m_has_bc_attr = false;
    
    if (m_bc_attr)
    {
        delete m_bc_attr;
        m_bc_attr = NULL;
    }
    
    
    m_has_fc_attr = false;
    
    if (m_fc_attr)
    {
        delete m_fc_attr;
        m_fc_attr = NULL;
    }
    
    
    m_has_i_attr = false;
    m_i_attr = false;
    
    m_has_u_attr = false;
    m_u_attr = false;
    
    m_has_st_attr = false;
    m_st_attr = false;
    
    m_has_b_attr = false;
    m_b_attr = false;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_MdxTuple::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_c_attr)
    {
        _outStream << " " << "c" << "=\"" << m_c_attr << "\"";
    }
    
    
    if (m_has_ct_attr)
    {
        m_ct_attr->toXmlAttr("ct", _outStream);
    }
    
    
    if (m_has_si_attr)
    {
        _outStream << " " << "si" << "=\"" << m_si_attr << "\"";
    }
    
    
    if (m_has_fi_attr)
    {
        _outStream << " " << "fi" << "=\"" << m_fi_attr << "\"";
    }
    
    
    if (m_has_bc_attr)
    {
        m_bc_attr->toXmlAttr("bc", _outStream);
    }
    
    
    if (m_has_fc_attr)
    {
        m_fc_attr->toXmlAttr("fc", _outStream);
    }
    
    
    if (m_has_i_attr)
    {
        _outStream << " " << "i" << "=\"" << XSD::XMLBooleanStr(m_i_attr) << "\"";
    }
    
    
    if (m_has_u_attr)
    {
        _outStream << " " << "u" << "=\"" << XSD::XMLBooleanStr(m_u_attr) << "\"";
    }
    
    
    if (m_has_st_attr)
    {
        _outStream << " " << "st" << "=\"" << XSD::XMLBooleanStr(m_st_attr) << "\"";
    }
    
    
    if (m_has_b_attr)
    {
        _outStream << " " << "b" << "=\"" << XSD::XMLBooleanStr(m_b_attr) << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_n())
            {
                (*iter)->get_n().toXmlElem("main:n", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_MdxTuple& CT_MdxTuple::default_instance()
    {    
    if (!CT_MdxTuple::default_instance_)
    {
        CT_MdxTuple::default_instance_ = new CT_MdxTuple();
    }
    return *CT_MdxTuple::default_instance_;
    }

    bool CT_MdxTuple::has_c_attr() const
    {    
    return m_has_c_attr;
    }

    void CT_MdxTuple::set_c_attr(const XSD::unsignedInt_& _c_attr)
    {    
    m_has_c_attr = true;
    m_c_attr = _c_attr;
    }

    const XSD::unsignedInt_& CT_MdxTuple::get_c_attr() const
    {    
    return m_c_attr;
    }

    bool CT_MdxTuple::has_ct_attr() const
    {    
    return m_has_ct_attr;
    }

    void CT_MdxTuple::set_ct_attr(const ns_s::ST_Xstring& _ct_attr)
    {    
    m_has_ct_attr = true;
    m_ct_attr = new ns_s::ST_Xstring(_ct_attr);
    }

    const ns_s::ST_Xstring& CT_MdxTuple::get_ct_attr() const
    {    
    if (m_ct_attr)
    {
        return *m_ct_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_MdxTuple::has_si_attr() const
    {    
    return m_has_si_attr;
    }

    void CT_MdxTuple::set_si_attr(const XSD::unsignedInt_& _si_attr)
    {    
    m_has_si_attr = true;
    m_si_attr = _si_attr;
    }

    const XSD::unsignedInt_& CT_MdxTuple::get_si_attr() const
    {    
    return m_si_attr;
    }

    bool CT_MdxTuple::has_fi_attr() const
    {    
    return m_has_fi_attr;
    }

    void CT_MdxTuple::set_fi_attr(const XSD::unsignedInt_& _fi_attr)
    {    
    m_has_fi_attr = true;
    m_fi_attr = _fi_attr;
    }

    const XSD::unsignedInt_& CT_MdxTuple::get_fi_attr() const
    {    
    return m_fi_attr;
    }

    bool CT_MdxTuple::has_bc_attr() const
    {    
    return m_has_bc_attr;
    }

    void CT_MdxTuple::set_bc_attr(const ST_UnsignedIntHex& _bc_attr)
    {    
    m_has_bc_attr = true;
    m_bc_attr = new ST_UnsignedIntHex(_bc_attr);
    }

    const ST_UnsignedIntHex& CT_MdxTuple::get_bc_attr() const
    {    
    if (m_bc_attr)
    {
        return *m_bc_attr;
    }
    return ST_UnsignedIntHex::default_instance();
    }

    bool CT_MdxTuple::has_fc_attr() const
    {    
    return m_has_fc_attr;
    }

    void CT_MdxTuple::set_fc_attr(const ST_UnsignedIntHex& _fc_attr)
    {    
    m_has_fc_attr = true;
    m_fc_attr = new ST_UnsignedIntHex(_fc_attr);
    }

    const ST_UnsignedIntHex& CT_MdxTuple::get_fc_attr() const
    {    
    if (m_fc_attr)
    {
        return *m_fc_attr;
    }
    return ST_UnsignedIntHex::default_instance();
    }

    bool CT_MdxTuple::has_i_attr() const
    {    
    return m_has_i_attr;
    }

    void CT_MdxTuple::set_i_attr(const XSD::boolean_& _i_attr)
    {    
    m_has_i_attr = true;
    m_i_attr = _i_attr;
    }

    const XSD::boolean_& CT_MdxTuple::get_i_attr() const
    {    
    return m_i_attr;
    }

    bool CT_MdxTuple::has_u_attr() const
    {    
    return m_has_u_attr;
    }

    void CT_MdxTuple::set_u_attr(const XSD::boolean_& _u_attr)
    {    
    m_has_u_attr = true;
    m_u_attr = _u_attr;
    }

    const XSD::boolean_& CT_MdxTuple::get_u_attr() const
    {    
    return m_u_attr;
    }

    bool CT_MdxTuple::has_st_attr() const
    {    
    return m_has_st_attr;
    }

    void CT_MdxTuple::set_st_attr(const XSD::boolean_& _st_attr)
    {    
    m_has_st_attr = true;
    m_st_attr = _st_attr;
    }

    const XSD::boolean_& CT_MdxTuple::get_st_attr() const
    {    
    return m_st_attr;
    }

    bool CT_MdxTuple::has_b_attr() const
    {    
    return m_has_b_attr;
    }

    void CT_MdxTuple::set_b_attr(const XSD::boolean_& _b_attr)
    {    
    m_has_b_attr = true;
    m_b_attr = _b_attr;
    }

    const XSD::boolean_& CT_MdxTuple::get_b_attr() const
    {    
    return m_b_attr;
    }


    // CT_MdxTuple::ChildGroup_1
    CT_MdxTuple::ChildGroup_1::ChildGroup_1()
    :m_has_n(false),
    m_n(NULL)
    {
    }
    bool CT_MdxTuple::ChildGroup_1::has_n() const
    {    
    return m_has_n;
    }

    CT_MetadataStringIndex* CT_MdxTuple::ChildGroup_1::mutable_n()
    {    
    
    m_has_n = true;
    if (!m_n)
    {
        m_n = new CT_MetadataStringIndex();
    }
    return m_n;
    }

    const CT_MetadataStringIndex& CT_MdxTuple::ChildGroup_1::get_n() const
    {    
    if (m_n)
    {
        return *m_n;
    }
    return CT_MetadataStringIndex::default_instance();
    }

CT_MdxTuple* CT_MdxTuple::default_instance_ = NULL;

    // CT_MdxSet
    CT_MdxSet::CT_MdxSet()
    :m_has_ns_attr(false),
    m_ns_attr(0),
    m_has_c_attr(false),
    m_c_attr(0),
    m_has_o_attr(false),
    m_o_attr(NULL)
    {
    }
    CT_MdxSet::~CT_MdxSet()
{
    clear();    }
    CT_MetadataStringIndex* CT_MdxSet::add_n()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_MetadataStringIndex* pNewChild = pChildGroup->mutable_n();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_MdxSet::clear()
    {    
    m_has_ns_attr = false;
    m_ns_attr = 0;
    
    m_has_c_attr = false;
    m_c_attr = 0;
    
    m_has_o_attr = false;
    
    if (m_o_attr)
    {
        delete m_o_attr;
        m_o_attr = NULL;
    }
    
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_MdxSet::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_ns_attr)
    {
        _outStream << " " << "ns" << "=\"" << m_ns_attr << "\"";
    }
    
    
    if (m_has_c_attr)
    {
        _outStream << " " << "c" << "=\"" << m_c_attr << "\"";
    }
    
    
    if (m_has_o_attr)
    {
        m_o_attr->toXmlAttr("o", _outStream);
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_n())
            {
                (*iter)->get_n().toXmlElem("main:n", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_MdxSet& CT_MdxSet::default_instance()
    {    
    if (!CT_MdxSet::default_instance_)
    {
        CT_MdxSet::default_instance_ = new CT_MdxSet();
    }
    return *CT_MdxSet::default_instance_;
    }

    bool CT_MdxSet::has_ns_attr() const
    {    
    return m_has_ns_attr;
    }

    void CT_MdxSet::set_ns_attr(const XSD::unsignedInt_& _ns_attr)
    {    
    m_has_ns_attr = true;
    m_ns_attr = _ns_attr;
    }

    const XSD::unsignedInt_& CT_MdxSet::get_ns_attr() const
    {    
    return m_ns_attr;
    }

    bool CT_MdxSet::has_c_attr() const
    {    
    return m_has_c_attr;
    }

    void CT_MdxSet::set_c_attr(const XSD::unsignedInt_& _c_attr)
    {    
    m_has_c_attr = true;
    m_c_attr = _c_attr;
    }

    const XSD::unsignedInt_& CT_MdxSet::get_c_attr() const
    {    
    return m_c_attr;
    }

    bool CT_MdxSet::has_o_attr() const
    {    
    return m_has_o_attr;
    }

    void CT_MdxSet::set_o_attr(const ST_MdxSetOrder& _o_attr)
    {    
    m_has_o_attr = true;
    m_o_attr = new ST_MdxSetOrder(_o_attr);
    }

    const ST_MdxSetOrder& CT_MdxSet::get_o_attr() const
    {    
    if (m_o_attr)
    {
        return *m_o_attr;
    }
    return ST_MdxSetOrder::default_instance();
    }


    // CT_MdxSet::ChildGroup_1
    CT_MdxSet::ChildGroup_1::ChildGroup_1()
    :m_has_n(false),
    m_n(NULL)
    {
    }
    bool CT_MdxSet::ChildGroup_1::has_n() const
    {    
    return m_has_n;
    }

    CT_MetadataStringIndex* CT_MdxSet::ChildGroup_1::mutable_n()
    {    
    
    m_has_n = true;
    if (!m_n)
    {
        m_n = new CT_MetadataStringIndex();
    }
    return m_n;
    }

    const CT_MetadataStringIndex& CT_MdxSet::ChildGroup_1::get_n() const
    {    
    if (m_n)
    {
        return *m_n;
    }
    return CT_MetadataStringIndex::default_instance();
    }

CT_MdxSet* CT_MdxSet::default_instance_ = NULL;

    // CT_MdxMemeberProp
    CT_MdxMemeberProp::CT_MdxMemeberProp()
    :m_has_n_attr(false),
    m_n_attr(0),
    m_has_np_attr(false),
    m_np_attr(0)
    {
    }
    CT_MdxMemeberProp::~CT_MdxMemeberProp()
{
    clear();    }
    void CT_MdxMemeberProp::clear()
    {    
    m_has_n_attr = false;
    m_n_attr = 0;
    
    m_has_np_attr = false;
    m_np_attr = 0;
    }

    void CT_MdxMemeberProp::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_n_attr)
    {
        _outStream << " " << "n" << "=\"" << m_n_attr << "\"";
    }
    
    
    if (m_has_np_attr)
    {
        _outStream << " " << "np" << "=\"" << m_np_attr << "\"";
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_MdxMemeberProp& CT_MdxMemeberProp::default_instance()
    {    
    if (!CT_MdxMemeberProp::default_instance_)
    {
        CT_MdxMemeberProp::default_instance_ = new CT_MdxMemeberProp();
    }
    return *CT_MdxMemeberProp::default_instance_;
    }

    bool CT_MdxMemeberProp::has_n_attr() const
    {    
    return m_has_n_attr;
    }

    void CT_MdxMemeberProp::set_n_attr(const XSD::unsignedInt_& _n_attr)
    {    
    m_has_n_attr = true;
    m_n_attr = _n_attr;
    }

    const XSD::unsignedInt_& CT_MdxMemeberProp::get_n_attr() const
    {    
    return m_n_attr;
    }

    bool CT_MdxMemeberProp::has_np_attr() const
    {    
    return m_has_np_attr;
    }

    void CT_MdxMemeberProp::set_np_attr(const XSD::unsignedInt_& _np_attr)
    {    
    m_has_np_attr = true;
    m_np_attr = _np_attr;
    }

    const XSD::unsignedInt_& CT_MdxMemeberProp::get_np_attr() const
    {    
    return m_np_attr;
    }

CT_MdxMemeberProp* CT_MdxMemeberProp::default_instance_ = NULL;

    // CT_MdxKPI
    CT_MdxKPI::CT_MdxKPI()
    :m_has_n_attr(false),
    m_n_attr(0),
    m_has_np_attr(false),
    m_np_attr(0),
    m_has_p_attr(false),
    m_p_attr(NULL)
    {
    }
    CT_MdxKPI::~CT_MdxKPI()
{
    clear();    }
    void CT_MdxKPI::clear()
    {    
    m_has_n_attr = false;
    m_n_attr = 0;
    
    m_has_np_attr = false;
    m_np_attr = 0;
    
    m_has_p_attr = false;
    
    if (m_p_attr)
    {
        delete m_p_attr;
        m_p_attr = NULL;
    }
    
    }

    void CT_MdxKPI::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_n_attr)
    {
        _outStream << " " << "n" << "=\"" << m_n_attr << "\"";
    }
    
    
    if (m_has_np_attr)
    {
        _outStream << " " << "np" << "=\"" << m_np_attr << "\"";
    }
    
    
    if (m_has_p_attr)
    {
        m_p_attr->toXmlAttr("p", _outStream);
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_MdxKPI& CT_MdxKPI::default_instance()
    {    
    if (!CT_MdxKPI::default_instance_)
    {
        CT_MdxKPI::default_instance_ = new CT_MdxKPI();
    }
    return *CT_MdxKPI::default_instance_;
    }

    bool CT_MdxKPI::has_n_attr() const
    {    
    return m_has_n_attr;
    }

    void CT_MdxKPI::set_n_attr(const XSD::unsignedInt_& _n_attr)
    {    
    m_has_n_attr = true;
    m_n_attr = _n_attr;
    }

    const XSD::unsignedInt_& CT_MdxKPI::get_n_attr() const
    {    
    return m_n_attr;
    }

    bool CT_MdxKPI::has_np_attr() const
    {    
    return m_has_np_attr;
    }

    void CT_MdxKPI::set_np_attr(const XSD::unsignedInt_& _np_attr)
    {    
    m_has_np_attr = true;
    m_np_attr = _np_attr;
    }

    const XSD::unsignedInt_& CT_MdxKPI::get_np_attr() const
    {    
    return m_np_attr;
    }

    bool CT_MdxKPI::has_p_attr() const
    {    
    return m_has_p_attr;
    }

    void CT_MdxKPI::set_p_attr(const ST_MdxKPIProperty& _p_attr)
    {    
    m_has_p_attr = true;
    m_p_attr = new ST_MdxKPIProperty(_p_attr);
    }

    const ST_MdxKPIProperty& CT_MdxKPI::get_p_attr() const
    {    
    if (m_p_attr)
    {
        return *m_p_attr;
    }
    return ST_MdxKPIProperty::default_instance();
    }

CT_MdxKPI* CT_MdxKPI::default_instance_ = NULL;

    // CT_MetadataStringIndex
    CT_MetadataStringIndex::CT_MetadataStringIndex()
    :m_has_x_attr(false),
    m_x_attr(0),
    m_has_s_attr(false),
    m_s_attr(false)
    {
    }
    CT_MetadataStringIndex::~CT_MetadataStringIndex()
{
    clear();    }
    void CT_MetadataStringIndex::clear()
    {    
    m_has_x_attr = false;
    m_x_attr = 0;
    
    m_has_s_attr = false;
    m_s_attr = false;
    }

    void CT_MetadataStringIndex::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_x_attr)
    {
        _outStream << " " << "x" << "=\"" << m_x_attr << "\"";
    }
    
    
    if (m_has_s_attr)
    {
        _outStream << " " << "s" << "=\"" << XSD::XMLBooleanStr(m_s_attr) << "\"";
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_MetadataStringIndex& CT_MetadataStringIndex::default_instance()
    {    
    if (!CT_MetadataStringIndex::default_instance_)
    {
        CT_MetadataStringIndex::default_instance_ = new CT_MetadataStringIndex();
    }
    return *CT_MetadataStringIndex::default_instance_;
    }

    bool CT_MetadataStringIndex::has_x_attr() const
    {    
    return m_has_x_attr;
    }

    void CT_MetadataStringIndex::set_x_attr(const XSD::unsignedInt_& _x_attr)
    {    
    m_has_x_attr = true;
    m_x_attr = _x_attr;
    }

    const XSD::unsignedInt_& CT_MetadataStringIndex::get_x_attr() const
    {    
    return m_x_attr;
    }

    bool CT_MetadataStringIndex::has_s_attr() const
    {    
    return m_has_s_attr;
    }

    void CT_MetadataStringIndex::set_s_attr(const XSD::boolean_& _s_attr)
    {    
    m_has_s_attr = true;
    m_s_attr = _s_attr;
    }

    const XSD::boolean_& CT_MetadataStringIndex::get_s_attr() const
    {    
    return m_s_attr;
    }

CT_MetadataStringIndex* CT_MetadataStringIndex::default_instance_ = NULL;

    // CT_MetadataStrings
    CT_MetadataStrings::CT_MetadataStrings()
    :m_has_count_attr(false),
    m_count_attr(0)
    {
    }
    CT_MetadataStrings::~CT_MetadataStrings()
{
    clear();    }
    CT_XStringElement* CT_MetadataStrings::add_s()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_XStringElement* pNewChild = pChildGroup->mutable_s();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_MetadataStrings::clear()
    {    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_MetadataStrings::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_s())
            {
                (*iter)->get_s().toXmlElem("main:s", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_MetadataStrings& CT_MetadataStrings::default_instance()
    {    
    if (!CT_MetadataStrings::default_instance_)
    {
        CT_MetadataStrings::default_instance_ = new CT_MetadataStrings();
    }
    return *CT_MetadataStrings::default_instance_;
    }

    bool CT_MetadataStrings::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void CT_MetadataStrings::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& CT_MetadataStrings::get_count_attr() const
    {    
    return m_count_attr;
    }


    // CT_MetadataStrings::ChildGroup_1
    CT_MetadataStrings::ChildGroup_1::ChildGroup_1()
    :m_has_s(false),
    m_s(NULL)
    {
    }
    bool CT_MetadataStrings::ChildGroup_1::has_s() const
    {    
    return m_has_s;
    }

    CT_XStringElement* CT_MetadataStrings::ChildGroup_1::mutable_s()
    {    
    
    m_has_s = true;
    if (!m_s)
    {
        m_s = new CT_XStringElement();
    }
    return m_s;
    }

    const CT_XStringElement& CT_MetadataStrings::ChildGroup_1::get_s() const
    {    
    if (m_s)
    {
        return *m_s;
    }
    return CT_XStringElement::default_instance();
    }

CT_MetadataStrings* CT_MetadataStrings::default_instance_ = NULL;

    // CT_SingleXmlCells
    CT_SingleXmlCells::CT_SingleXmlCells()

    {
    }
    CT_SingleXmlCells::~CT_SingleXmlCells()
{
    clear();    }
    CT_SingleXmlCell* CT_SingleXmlCells::add_singleXmlCell()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_SingleXmlCell* pNewChild = pChildGroup->mutable_singleXmlCell();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_SingleXmlCells::clear()
    {    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_SingleXmlCells::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_singleXmlCell())
            {
                (*iter)->get_singleXmlCell().toXmlElem("main:singleXmlCell", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_SingleXmlCells& CT_SingleXmlCells::default_instance()
    {    
    if (!CT_SingleXmlCells::default_instance_)
    {
        CT_SingleXmlCells::default_instance_ = new CT_SingleXmlCells();
    }
    return *CT_SingleXmlCells::default_instance_;
    }


    // CT_SingleXmlCells::ChildGroup_1
    CT_SingleXmlCells::ChildGroup_1::ChildGroup_1()
    :m_has_singleXmlCell(false),
    m_singleXmlCell(NULL)
    {
    }
    bool CT_SingleXmlCells::ChildGroup_1::has_singleXmlCell() const
    {    
    return m_has_singleXmlCell;
    }

    CT_SingleXmlCell* CT_SingleXmlCells::ChildGroup_1::mutable_singleXmlCell()
    {    
    
    m_has_singleXmlCell = true;
    if (!m_singleXmlCell)
    {
        m_singleXmlCell = new CT_SingleXmlCell();
    }
    return m_singleXmlCell;
    }

    const CT_SingleXmlCell& CT_SingleXmlCells::ChildGroup_1::get_singleXmlCell() const
    {    
    if (m_singleXmlCell)
    {
        return *m_singleXmlCell;
    }
    return CT_SingleXmlCell::default_instance();
    }

CT_SingleXmlCells* CT_SingleXmlCells::default_instance_ = NULL;

    // CT_SingleXmlCell
    CT_SingleXmlCell::CT_SingleXmlCell()
    :m_has_xmlCellPr(false),
    m_xmlCellPr(NULL),
    m_has_extLst(false),
    m_extLst(NULL),
    m_has_id_attr(false),
    m_id_attr(0),
    m_has_r_attr(false),
    m_r_attr(NULL),
    m_has_connectionId_attr(false),
    m_connectionId_attr(0)
    {
    }
    CT_SingleXmlCell::~CT_SingleXmlCell()
{
    clear();    }
    bool CT_SingleXmlCell::has_xmlCellPr() const
    {    
    return m_has_xmlCellPr;
    }

    CT_XmlCellPr* CT_SingleXmlCell::mutable_xmlCellPr()
    {    
    m_has_xmlCellPr = true;
    if (!m_xmlCellPr)
    {
        m_xmlCellPr = new CT_XmlCellPr();
    }
    return m_xmlCellPr;
    }

    const CT_XmlCellPr& CT_SingleXmlCell::get_xmlCellPr() const
    {    
    if (m_xmlCellPr)
    {
        return *m_xmlCellPr;
    }
    return CT_XmlCellPr::default_instance();
    }

    bool CT_SingleXmlCell::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* CT_SingleXmlCell::mutable_extLst()
    {    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& CT_SingleXmlCell::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

    void CT_SingleXmlCell::clear()
    {    
    m_has_id_attr = false;
    m_id_attr = 0;
    
    m_has_r_attr = false;
    
    if (m_r_attr)
    {
        delete m_r_attr;
        m_r_attr = NULL;
    }
    
    
    m_has_connectionId_attr = false;
    m_connectionId_attr = 0;
    }

    void CT_SingleXmlCell::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_id_attr)
    {
        _outStream << " " << "id" << "=\"" << m_id_attr << "\"";
    }
    
    
    if (m_has_r_attr)
    {
        m_r_attr->toXmlAttr("r", _outStream);
    }
    
    
    if (m_has_connectionId_attr)
    {
        _outStream << " " << "connectionId" << "=\"" << m_connectionId_attr << "\"";
    }
    
            _outStream << ">";
            
    if (m_has_xmlCellPr)
    {
        m_xmlCellPr->toXmlElem("main:xmlCellPr", "", _outStream);;
    }
    
    if (m_has_extLst)
    {
        m_extLst->toXmlElem("main:extLst", "", _outStream);;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_SingleXmlCell& CT_SingleXmlCell::default_instance()
    {    
    if (!CT_SingleXmlCell::default_instance_)
    {
        CT_SingleXmlCell::default_instance_ = new CT_SingleXmlCell();
    }
    return *CT_SingleXmlCell::default_instance_;
    }

    bool CT_SingleXmlCell::has_id_attr() const
    {    
    return m_has_id_attr;
    }

    void CT_SingleXmlCell::set_id_attr(const XSD::unsignedInt_& _id_attr)
    {    
    m_has_id_attr = true;
    m_id_attr = _id_attr;
    }

    const XSD::unsignedInt_& CT_SingleXmlCell::get_id_attr() const
    {    
    return m_id_attr;
    }

    bool CT_SingleXmlCell::has_r_attr() const
    {    
    return m_has_r_attr;
    }

    void CT_SingleXmlCell::set_r_attr(const ST_CellRef& _r_attr)
    {    
    m_has_r_attr = true;
    m_r_attr = new ST_CellRef(_r_attr);
    }

    const ST_CellRef& CT_SingleXmlCell::get_r_attr() const
    {    
    if (m_r_attr)
    {
        return *m_r_attr;
    }
    return ST_CellRef::default_instance();
    }

    bool CT_SingleXmlCell::has_connectionId_attr() const
    {    
    return m_has_connectionId_attr;
    }

    void CT_SingleXmlCell::set_connectionId_attr(const XSD::unsignedInt_& _connectionId_attr)
    {    
    m_has_connectionId_attr = true;
    m_connectionId_attr = _connectionId_attr;
    }

    const XSD::unsignedInt_& CT_SingleXmlCell::get_connectionId_attr() const
    {    
    return m_connectionId_attr;
    }

CT_SingleXmlCell* CT_SingleXmlCell::default_instance_ = NULL;

    // CT_XmlCellPr
    CT_XmlCellPr::CT_XmlCellPr()
    :m_has_xmlPr(false),
    m_xmlPr(NULL),
    m_has_extLst(false),
    m_extLst(NULL),
    m_has_id_attr(false),
    m_id_attr(0),
    m_has_uniqueName_attr(false),
    m_uniqueName_attr(NULL)
    {
    }
    CT_XmlCellPr::~CT_XmlCellPr()
{
    clear();    }
    bool CT_XmlCellPr::has_xmlPr() const
    {    
    return m_has_xmlPr;
    }

    CT_XmlPr* CT_XmlCellPr::mutable_xmlPr()
    {    
    m_has_xmlPr = true;
    if (!m_xmlPr)
    {
        m_xmlPr = new CT_XmlPr();
    }
    return m_xmlPr;
    }

    const CT_XmlPr& CT_XmlCellPr::get_xmlPr() const
    {    
    if (m_xmlPr)
    {
        return *m_xmlPr;
    }
    return CT_XmlPr::default_instance();
    }

    bool CT_XmlCellPr::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* CT_XmlCellPr::mutable_extLst()
    {    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& CT_XmlCellPr::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

    void CT_XmlCellPr::clear()
    {    
    m_has_id_attr = false;
    m_id_attr = 0;
    
    m_has_uniqueName_attr = false;
    
    if (m_uniqueName_attr)
    {
        delete m_uniqueName_attr;
        m_uniqueName_attr = NULL;
    }
    
    }

    void CT_XmlCellPr::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_id_attr)
    {
        _outStream << " " << "id" << "=\"" << m_id_attr << "\"";
    }
    
    
    if (m_has_uniqueName_attr)
    {
        m_uniqueName_attr->toXmlAttr("uniqueName", _outStream);
    }
    
            _outStream << ">";
            
    if (m_has_xmlPr)
    {
        m_xmlPr->toXmlElem("main:xmlPr", "", _outStream);;
    }
    
    if (m_has_extLst)
    {
        m_extLst->toXmlElem("main:extLst", "", _outStream);;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_XmlCellPr& CT_XmlCellPr::default_instance()
    {    
    if (!CT_XmlCellPr::default_instance_)
    {
        CT_XmlCellPr::default_instance_ = new CT_XmlCellPr();
    }
    return *CT_XmlCellPr::default_instance_;
    }

    bool CT_XmlCellPr::has_id_attr() const
    {    
    return m_has_id_attr;
    }

    void CT_XmlCellPr::set_id_attr(const XSD::unsignedInt_& _id_attr)
    {    
    m_has_id_attr = true;
    m_id_attr = _id_attr;
    }

    const XSD::unsignedInt_& CT_XmlCellPr::get_id_attr() const
    {    
    return m_id_attr;
    }

    bool CT_XmlCellPr::has_uniqueName_attr() const
    {    
    return m_has_uniqueName_attr;
    }

    void CT_XmlCellPr::set_uniqueName_attr(const ns_s::ST_Xstring& _uniqueName_attr)
    {    
    m_has_uniqueName_attr = true;
    m_uniqueName_attr = new ns_s::ST_Xstring(_uniqueName_attr);
    }

    const ns_s::ST_Xstring& CT_XmlCellPr::get_uniqueName_attr() const
    {    
    if (m_uniqueName_attr)
    {
        return *m_uniqueName_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

CT_XmlCellPr* CT_XmlCellPr::default_instance_ = NULL;

    // CT_XmlPr
    CT_XmlPr::CT_XmlPr()
    :m_has_extLst(false),
    m_extLst(NULL),
    m_has_mapId_attr(false),
    m_mapId_attr(0),
    m_has_xpath_attr(false),
    m_xpath_attr(NULL),
    m_has_xmlDataType_attr(false),
    m_xmlDataType_attr(NULL)
    {
    }
    CT_XmlPr::~CT_XmlPr()
{
    clear();    }
    bool CT_XmlPr::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* CT_XmlPr::mutable_extLst()
    {    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& CT_XmlPr::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

    void CT_XmlPr::clear()
    {    
    m_has_mapId_attr = false;
    m_mapId_attr = 0;
    
    m_has_xpath_attr = false;
    
    if (m_xpath_attr)
    {
        delete m_xpath_attr;
        m_xpath_attr = NULL;
    }
    
    
    m_has_xmlDataType_attr = false;
    
    if (m_xmlDataType_attr)
    {
        delete m_xmlDataType_attr;
        m_xmlDataType_attr = NULL;
    }
    
    }

    void CT_XmlPr::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_mapId_attr)
    {
        _outStream << " " << "mapId" << "=\"" << m_mapId_attr << "\"";
    }
    
    
    if (m_has_xpath_attr)
    {
        m_xpath_attr->toXmlAttr("xpath", _outStream);
    }
    
    
    if (m_has_xmlDataType_attr)
    {
        m_xmlDataType_attr->toXmlAttr("xmlDataType", _outStream);
    }
    
            _outStream << ">";
            
    if (m_has_extLst)
    {
        m_extLst->toXmlElem("main:extLst", "", _outStream);;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_XmlPr& CT_XmlPr::default_instance()
    {    
    if (!CT_XmlPr::default_instance_)
    {
        CT_XmlPr::default_instance_ = new CT_XmlPr();
    }
    return *CT_XmlPr::default_instance_;
    }

    bool CT_XmlPr::has_mapId_attr() const
    {    
    return m_has_mapId_attr;
    }

    void CT_XmlPr::set_mapId_attr(const XSD::unsignedInt_& _mapId_attr)
    {    
    m_has_mapId_attr = true;
    m_mapId_attr = _mapId_attr;
    }

    const XSD::unsignedInt_& CT_XmlPr::get_mapId_attr() const
    {    
    return m_mapId_attr;
    }

    bool CT_XmlPr::has_xpath_attr() const
    {    
    return m_has_xpath_attr;
    }

    void CT_XmlPr::set_xpath_attr(const ns_s::ST_Xstring& _xpath_attr)
    {    
    m_has_xpath_attr = true;
    m_xpath_attr = new ns_s::ST_Xstring(_xpath_attr);
    }

    const ns_s::ST_Xstring& CT_XmlPr::get_xpath_attr() const
    {    
    if (m_xpath_attr)
    {
        return *m_xpath_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_XmlPr::has_xmlDataType_attr() const
    {    
    return m_has_xmlDataType_attr;
    }

    void CT_XmlPr::set_xmlDataType_attr(const ST_XmlDataType& _xmlDataType_attr)
    {    
    m_has_xmlDataType_attr = true;
    m_xmlDataType_attr = new ST_XmlDataType(_xmlDataType_attr);
    }

    const ST_XmlDataType& CT_XmlPr::get_xmlDataType_attr() const
    {    
    if (m_xmlDataType_attr)
    {
        return *m_xmlDataType_attr;
    }
    return ST_XmlDataType::default_instance();
    }

CT_XmlPr* CT_XmlPr::default_instance_ = NULL;

    // CT_Stylesheet
    CT_Stylesheet::CT_Stylesheet()
    :m_has_numFmts(false),
    m_numFmts(NULL),
    m_has_fonts(false),
    m_fonts(NULL),
    m_has_fills(false),
    m_fills(NULL),
    m_has_borders(false),
    m_borders(NULL),
    m_has_cellStyleXfs(false),
    m_cellStyleXfs(NULL),
    m_has_cellXfs(false),
    m_cellXfs(NULL),
    m_has_cellStyles(false),
    m_cellStyles(NULL),
    m_has_dxfs(false),
    m_dxfs(NULL),
    m_has_tableStyles(false),
    m_tableStyles(NULL),
    m_has_colors(false),
    m_colors(NULL),
    m_has_extLst(false),
    m_extLst(NULL)
    {
    }
    CT_Stylesheet::~CT_Stylesheet()
{
    clear();    }
    bool CT_Stylesheet::has_numFmts() const
    {    
    return m_has_numFmts;
    }

    CT_NumFmts* CT_Stylesheet::mutable_numFmts()
    {    
    m_has_numFmts = true;
    if (!m_numFmts)
    {
        m_numFmts = new CT_NumFmts();
    }
    return m_numFmts;
    }

    const CT_NumFmts& CT_Stylesheet::get_numFmts() const
    {    
    if (m_numFmts)
    {
        return *m_numFmts;
    }
    return CT_NumFmts::default_instance();
    }

    bool CT_Stylesheet::has_fonts() const
    {    
    return m_has_fonts;
    }

    CT_Fonts* CT_Stylesheet::mutable_fonts()
    {    
    m_has_fonts = true;
    if (!m_fonts)
    {
        m_fonts = new CT_Fonts();
    }
    return m_fonts;
    }

    const CT_Fonts& CT_Stylesheet::get_fonts() const
    {    
    if (m_fonts)
    {
        return *m_fonts;
    }
    return CT_Fonts::default_instance();
    }

    bool CT_Stylesheet::has_fills() const
    {    
    return m_has_fills;
    }

    CT_Fills* CT_Stylesheet::mutable_fills()
    {    
    m_has_fills = true;
    if (!m_fills)
    {
        m_fills = new CT_Fills();
    }
    return m_fills;
    }

    const CT_Fills& CT_Stylesheet::get_fills() const
    {    
    if (m_fills)
    {
        return *m_fills;
    }
    return CT_Fills::default_instance();
    }

    bool CT_Stylesheet::has_borders() const
    {    
    return m_has_borders;
    }

    CT_Borders* CT_Stylesheet::mutable_borders()
    {    
    m_has_borders = true;
    if (!m_borders)
    {
        m_borders = new CT_Borders();
    }
    return m_borders;
    }

    const CT_Borders& CT_Stylesheet::get_borders() const
    {    
    if (m_borders)
    {
        return *m_borders;
    }
    return CT_Borders::default_instance();
    }

    bool CT_Stylesheet::has_cellStyleXfs() const
    {    
    return m_has_cellStyleXfs;
    }

    CT_CellStyleXfs* CT_Stylesheet::mutable_cellStyleXfs()
    {    
    m_has_cellStyleXfs = true;
    if (!m_cellStyleXfs)
    {
        m_cellStyleXfs = new CT_CellStyleXfs();
    }
    return m_cellStyleXfs;
    }

    const CT_CellStyleXfs& CT_Stylesheet::get_cellStyleXfs() const
    {    
    if (m_cellStyleXfs)
    {
        return *m_cellStyleXfs;
    }
    return CT_CellStyleXfs::default_instance();
    }

    bool CT_Stylesheet::has_cellXfs() const
    {    
    return m_has_cellXfs;
    }

    CT_CellXfs* CT_Stylesheet::mutable_cellXfs()
    {    
    m_has_cellXfs = true;
    if (!m_cellXfs)
    {
        m_cellXfs = new CT_CellXfs();
    }
    return m_cellXfs;
    }

    const CT_CellXfs& CT_Stylesheet::get_cellXfs() const
    {    
    if (m_cellXfs)
    {
        return *m_cellXfs;
    }
    return CT_CellXfs::default_instance();
    }

    bool CT_Stylesheet::has_cellStyles() const
    {    
    return m_has_cellStyles;
    }

    CT_CellStyles* CT_Stylesheet::mutable_cellStyles()
    {    
    m_has_cellStyles = true;
    if (!m_cellStyles)
    {
        m_cellStyles = new CT_CellStyles();
    }
    return m_cellStyles;
    }

    const CT_CellStyles& CT_Stylesheet::get_cellStyles() const
    {    
    if (m_cellStyles)
    {
        return *m_cellStyles;
    }
    return CT_CellStyles::default_instance();
    }

    bool CT_Stylesheet::has_dxfs() const
    {    
    return m_has_dxfs;
    }

    CT_Dxfs* CT_Stylesheet::mutable_dxfs()
    {    
    m_has_dxfs = true;
    if (!m_dxfs)
    {
        m_dxfs = new CT_Dxfs();
    }
    return m_dxfs;
    }

    const CT_Dxfs& CT_Stylesheet::get_dxfs() const
    {    
    if (m_dxfs)
    {
        return *m_dxfs;
    }
    return CT_Dxfs::default_instance();
    }

    bool CT_Stylesheet::has_tableStyles() const
    {    
    return m_has_tableStyles;
    }

    CT_TableStyles* CT_Stylesheet::mutable_tableStyles()
    {    
    m_has_tableStyles = true;
    if (!m_tableStyles)
    {
        m_tableStyles = new CT_TableStyles();
    }
    return m_tableStyles;
    }

    const CT_TableStyles& CT_Stylesheet::get_tableStyles() const
    {    
    if (m_tableStyles)
    {
        return *m_tableStyles;
    }
    return CT_TableStyles::default_instance();
    }

    bool CT_Stylesheet::has_colors() const
    {    
    return m_has_colors;
    }

    CT_Colors* CT_Stylesheet::mutable_colors()
    {    
    m_has_colors = true;
    if (!m_colors)
    {
        m_colors = new CT_Colors();
    }
    return m_colors;
    }

    const CT_Colors& CT_Stylesheet::get_colors() const
    {    
    if (m_colors)
    {
        return *m_colors;
    }
    return CT_Colors::default_instance();
    }

    bool CT_Stylesheet::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* CT_Stylesheet::mutable_extLst()
    {    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& CT_Stylesheet::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

    void CT_Stylesheet::clear()
    {    }

    void CT_Stylesheet::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
            _outStream << ">";
            
    if (m_has_numFmts)
    {
        m_numFmts->toXmlElem("main:numFmts", "", _outStream);;
    }
    
    if (m_has_fonts)
    {
        m_fonts->toXmlElem("main:fonts", "", _outStream);;
    }
    
    if (m_has_fills)
    {
        m_fills->toXmlElem("main:fills", "", _outStream);;
    }
    
    if (m_has_borders)
    {
        m_borders->toXmlElem("main:borders", "", _outStream);;
    }
    
    if (m_has_cellStyleXfs)
    {
        m_cellStyleXfs->toXmlElem("main:cellStyleXfs", "", _outStream);;
    }
    
    if (m_has_cellXfs)
    {
        m_cellXfs->toXmlElem("main:cellXfs", "", _outStream);;
    }
    
    if (m_has_cellStyles)
    {
        m_cellStyles->toXmlElem("main:cellStyles", "", _outStream);;
    }
    
    if (m_has_dxfs)
    {
        m_dxfs->toXmlElem("main:dxfs", "", _outStream);;
    }
    
    if (m_has_tableStyles)
    {
        m_tableStyles->toXmlElem("main:tableStyles", "", _outStream);;
    }
    
    if (m_has_colors)
    {
        m_colors->toXmlElem("main:colors", "", _outStream);;
    }
    
    if (m_has_extLst)
    {
        m_extLst->toXmlElem("main:extLst", "", _outStream);;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_Stylesheet& CT_Stylesheet::default_instance()
    {    
    if (!CT_Stylesheet::default_instance_)
    {
        CT_Stylesheet::default_instance_ = new CT_Stylesheet();
    }
    return *CT_Stylesheet::default_instance_;
    }

CT_Stylesheet* CT_Stylesheet::default_instance_ = NULL;

    // CT_CellAlignment
    CT_CellAlignment::CT_CellAlignment()
    :m_has_horizontal_attr(false),
    m_horizontal_attr(NULL),
    m_has_vertical_attr(false),
    m_vertical_attr(NULL),
    m_has_textRotation_attr(false),
    m_textRotation_attr(0),
    m_has_wrapText_attr(false),
    m_wrapText_attr(false),
    m_has_indent_attr(false),
    m_indent_attr(0),
    m_has_relativeIndent_attr(false),
    m_relativeIndent_attr(0),
    m_has_justifyLastLine_attr(false),
    m_justifyLastLine_attr(false),
    m_has_shrinkToFit_attr(false),
    m_shrinkToFit_attr(false),
    m_has_readingOrder_attr(false),
    m_readingOrder_attr(0)
    {
    }
    CT_CellAlignment::~CT_CellAlignment()
{
    clear();    }
    void CT_CellAlignment::clear()
    {    
    m_has_horizontal_attr = false;
    
    if (m_horizontal_attr)
    {
        delete m_horizontal_attr;
        m_horizontal_attr = NULL;
    }
    
    
    m_has_vertical_attr = false;
    
    if (m_vertical_attr)
    {
        delete m_vertical_attr;
        m_vertical_attr = NULL;
    }
    
    
    m_has_textRotation_attr = false;
    m_textRotation_attr = 0;
    
    m_has_wrapText_attr = false;
    m_wrapText_attr = false;
    
    m_has_indent_attr = false;
    m_indent_attr = 0;
    
    m_has_relativeIndent_attr = false;
    m_relativeIndent_attr = 0;
    
    m_has_justifyLastLine_attr = false;
    m_justifyLastLine_attr = false;
    
    m_has_shrinkToFit_attr = false;
    m_shrinkToFit_attr = false;
    
    m_has_readingOrder_attr = false;
    m_readingOrder_attr = 0;
    }

    void CT_CellAlignment::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_horizontal_attr)
    {
        m_horizontal_attr->toXmlAttr("horizontal", _outStream);
    }
    
    
    if (m_has_vertical_attr)
    {
        m_vertical_attr->toXmlAttr("vertical", _outStream);
    }
    
    
    if (m_has_textRotation_attr)
    {
        _outStream << " " << "textRotation" << "=\"" << m_textRotation_attr << "\"";
    }
    
    
    if (m_has_wrapText_attr)
    {
        _outStream << " " << "wrapText" << "=\"" << XSD::XMLBooleanStr(m_wrapText_attr) << "\"";
    }
    
    
    if (m_has_indent_attr)
    {
        _outStream << " " << "indent" << "=\"" << m_indent_attr << "\"";
    }
    
    
    if (m_has_relativeIndent_attr)
    {
        _outStream << " " << "relativeIndent" << "=\"" << m_relativeIndent_attr << "\"";
    }
    
    
    if (m_has_justifyLastLine_attr)
    {
        _outStream << " " << "justifyLastLine" << "=\"" << XSD::XMLBooleanStr(m_justifyLastLine_attr) << "\"";
    }
    
    
    if (m_has_shrinkToFit_attr)
    {
        _outStream << " " << "shrinkToFit" << "=\"" << XSD::XMLBooleanStr(m_shrinkToFit_attr) << "\"";
    }
    
    
    if (m_has_readingOrder_attr)
    {
        _outStream << " " << "readingOrder" << "=\"" << m_readingOrder_attr << "\"";
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_CellAlignment& CT_CellAlignment::default_instance()
    {    
    if (!CT_CellAlignment::default_instance_)
    {
        CT_CellAlignment::default_instance_ = new CT_CellAlignment();
    }
    return *CT_CellAlignment::default_instance_;
    }

    bool CT_CellAlignment::has_horizontal_attr() const
    {    
    return m_has_horizontal_attr;
    }

    void CT_CellAlignment::set_horizontal_attr(const ST_HorizontalAlignment& _horizontal_attr)
    {    
    m_has_horizontal_attr = true;
    m_horizontal_attr = new ST_HorizontalAlignment(_horizontal_attr);
    }

    const ST_HorizontalAlignment& CT_CellAlignment::get_horizontal_attr() const
    {    
    if (m_horizontal_attr)
    {
        return *m_horizontal_attr;
    }
    return ST_HorizontalAlignment::default_instance();
    }

    bool CT_CellAlignment::has_vertical_attr() const
    {    
    return m_has_vertical_attr;
    }

    void CT_CellAlignment::set_vertical_attr(const ST_VerticalAlignment& _vertical_attr)
    {    
    m_has_vertical_attr = true;
    m_vertical_attr = new ST_VerticalAlignment(_vertical_attr);
    }

    const ST_VerticalAlignment& CT_CellAlignment::get_vertical_attr() const
    {    
    if (m_vertical_attr)
    {
        return *m_vertical_attr;
    }
    return ST_VerticalAlignment::default_instance();
    }

    bool CT_CellAlignment::has_textRotation_attr() const
    {    
    return m_has_textRotation_attr;
    }

    void CT_CellAlignment::set_textRotation_attr(const XSD::unsignedInt_& _textRotation_attr)
    {    
    m_has_textRotation_attr = true;
    m_textRotation_attr = _textRotation_attr;
    }

    const XSD::unsignedInt_& CT_CellAlignment::get_textRotation_attr() const
    {    
    return m_textRotation_attr;
    }

    bool CT_CellAlignment::has_wrapText_attr() const
    {    
    return m_has_wrapText_attr;
    }

    void CT_CellAlignment::set_wrapText_attr(const XSD::boolean_& _wrapText_attr)
    {    
    m_has_wrapText_attr = true;
    m_wrapText_attr = _wrapText_attr;
    }

    const XSD::boolean_& CT_CellAlignment::get_wrapText_attr() const
    {    
    return m_wrapText_attr;
    }

    bool CT_CellAlignment::has_indent_attr() const
    {    
    return m_has_indent_attr;
    }

    void CT_CellAlignment::set_indent_attr(const XSD::unsignedInt_& _indent_attr)
    {    
    m_has_indent_attr = true;
    m_indent_attr = _indent_attr;
    }

    const XSD::unsignedInt_& CT_CellAlignment::get_indent_attr() const
    {    
    return m_indent_attr;
    }

    bool CT_CellAlignment::has_relativeIndent_attr() const
    {    
    return m_has_relativeIndent_attr;
    }

    void CT_CellAlignment::set_relativeIndent_attr(const XSD::int_& _relativeIndent_attr)
    {    
    m_has_relativeIndent_attr = true;
    m_relativeIndent_attr = _relativeIndent_attr;
    }

    const XSD::int_& CT_CellAlignment::get_relativeIndent_attr() const
    {    
    return m_relativeIndent_attr;
    }

    bool CT_CellAlignment::has_justifyLastLine_attr() const
    {    
    return m_has_justifyLastLine_attr;
    }

    void CT_CellAlignment::set_justifyLastLine_attr(const XSD::boolean_& _justifyLastLine_attr)
    {    
    m_has_justifyLastLine_attr = true;
    m_justifyLastLine_attr = _justifyLastLine_attr;
    }

    const XSD::boolean_& CT_CellAlignment::get_justifyLastLine_attr() const
    {    
    return m_justifyLastLine_attr;
    }

    bool CT_CellAlignment::has_shrinkToFit_attr() const
    {    
    return m_has_shrinkToFit_attr;
    }

    void CT_CellAlignment::set_shrinkToFit_attr(const XSD::boolean_& _shrinkToFit_attr)
    {    
    m_has_shrinkToFit_attr = true;
    m_shrinkToFit_attr = _shrinkToFit_attr;
    }

    const XSD::boolean_& CT_CellAlignment::get_shrinkToFit_attr() const
    {    
    return m_shrinkToFit_attr;
    }

    bool CT_CellAlignment::has_readingOrder_attr() const
    {    
    return m_has_readingOrder_attr;
    }

    void CT_CellAlignment::set_readingOrder_attr(const XSD::unsignedInt_& _readingOrder_attr)
    {    
    m_has_readingOrder_attr = true;
    m_readingOrder_attr = _readingOrder_attr;
    }

    const XSD::unsignedInt_& CT_CellAlignment::get_readingOrder_attr() const
    {    
    return m_readingOrder_attr;
    }

CT_CellAlignment* CT_CellAlignment::default_instance_ = NULL;

    // CT_Borders
    CT_Borders::CT_Borders()
    :m_has_count_attr(false),
    m_count_attr(0)
    {
    }
    CT_Borders::~CT_Borders()
{
    clear();    }
    CT_Border* CT_Borders::add_border()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Border* pNewChild = pChildGroup->mutable_border();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_Borders::clear()
    {    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_Borders::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_border())
            {
                (*iter)->get_border().toXmlElem("main:border", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_Borders& CT_Borders::default_instance()
    {    
    if (!CT_Borders::default_instance_)
    {
        CT_Borders::default_instance_ = new CT_Borders();
    }
    return *CT_Borders::default_instance_;
    }

    bool CT_Borders::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void CT_Borders::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& CT_Borders::get_count_attr() const
    {    
    return m_count_attr;
    }


    // CT_Borders::ChildGroup_1
    CT_Borders::ChildGroup_1::ChildGroup_1()
    :m_has_border(false),
    m_border(NULL)
    {
    }
    bool CT_Borders::ChildGroup_1::has_border() const
    {    
    return m_has_border;
    }

    CT_Border* CT_Borders::ChildGroup_1::mutable_border()
    {    
    
    m_has_border = true;
    if (!m_border)
    {
        m_border = new CT_Border();
    }
    return m_border;
    }

    const CT_Border& CT_Borders::ChildGroup_1::get_border() const
    {    
    if (m_border)
    {
        return *m_border;
    }
    return CT_Border::default_instance();
    }

CT_Borders* CT_Borders::default_instance_ = NULL;

    // CT_Border
    CT_Border::CT_Border()
    :m_has_start(false),
    m_start(NULL),
    m_has_end(false),
    m_end(NULL),
    m_has_left(false),
    m_left(NULL),
    m_has_right(false),
    m_right(NULL),
    m_has_top(false),
    m_top(NULL),
    m_has_bottom(false),
    m_bottom(NULL),
    m_has_diagonal(false),
    m_diagonal(NULL),
    m_has_vertical(false),
    m_vertical(NULL),
    m_has_horizontal(false),
    m_horizontal(NULL),
    m_has_diagonalUp_attr(false),
    m_diagonalUp_attr(false),
    m_has_diagonalDown_attr(false),
    m_diagonalDown_attr(false),
    m_has_outline_attr(false),
    m_outline_attr(false)
    {
    }
    CT_Border::~CT_Border()
{
    clear();    }
    bool CT_Border::has_start() const
    {    
    return m_has_start;
    }

    CT_BorderPr* CT_Border::mutable_start()
    {    
    m_has_start = true;
    if (!m_start)
    {
        m_start = new CT_BorderPr();
    }
    return m_start;
    }

    const CT_BorderPr& CT_Border::get_start() const
    {    
    if (m_start)
    {
        return *m_start;
    }
    return CT_BorderPr::default_instance();
    }

    bool CT_Border::has_end() const
    {    
    return m_has_end;
    }

    CT_BorderPr* CT_Border::mutable_end()
    {    
    m_has_end = true;
    if (!m_end)
    {
        m_end = new CT_BorderPr();
    }
    return m_end;
    }

    const CT_BorderPr& CT_Border::get_end() const
    {    
    if (m_end)
    {
        return *m_end;
    }
    return CT_BorderPr::default_instance();
    }

    bool CT_Border::has_left() const
    {    
    return m_has_left;
    }

    CT_BorderPr* CT_Border::mutable_left()
    {    
    m_has_left = true;
    if (!m_left)
    {
        m_left = new CT_BorderPr();
    }
    return m_left;
    }

    const CT_BorderPr& CT_Border::get_left() const
    {    
    if (m_left)
    {
        return *m_left;
    }
    return CT_BorderPr::default_instance();
    }

    bool CT_Border::has_right() const
    {    
    return m_has_right;
    }

    CT_BorderPr* CT_Border::mutable_right()
    {    
    m_has_right = true;
    if (!m_right)
    {
        m_right = new CT_BorderPr();
    }
    return m_right;
    }

    const CT_BorderPr& CT_Border::get_right() const
    {    
    if (m_right)
    {
        return *m_right;
    }
    return CT_BorderPr::default_instance();
    }

    bool CT_Border::has_top() const
    {    
    return m_has_top;
    }

    CT_BorderPr* CT_Border::mutable_top()
    {    
    m_has_top = true;
    if (!m_top)
    {
        m_top = new CT_BorderPr();
    }
    return m_top;
    }

    const CT_BorderPr& CT_Border::get_top() const
    {    
    if (m_top)
    {
        return *m_top;
    }
    return CT_BorderPr::default_instance();
    }

    bool CT_Border::has_bottom() const
    {    
    return m_has_bottom;
    }

    CT_BorderPr* CT_Border::mutable_bottom()
    {    
    m_has_bottom = true;
    if (!m_bottom)
    {
        m_bottom = new CT_BorderPr();
    }
    return m_bottom;
    }

    const CT_BorderPr& CT_Border::get_bottom() const
    {    
    if (m_bottom)
    {
        return *m_bottom;
    }
    return CT_BorderPr::default_instance();
    }

    bool CT_Border::has_diagonal() const
    {    
    return m_has_diagonal;
    }

    CT_BorderPr* CT_Border::mutable_diagonal()
    {    
    m_has_diagonal = true;
    if (!m_diagonal)
    {
        m_diagonal = new CT_BorderPr();
    }
    return m_diagonal;
    }

    const CT_BorderPr& CT_Border::get_diagonal() const
    {    
    if (m_diagonal)
    {
        return *m_diagonal;
    }
    return CT_BorderPr::default_instance();
    }

    bool CT_Border::has_vertical() const
    {    
    return m_has_vertical;
    }

    CT_BorderPr* CT_Border::mutable_vertical()
    {    
    m_has_vertical = true;
    if (!m_vertical)
    {
        m_vertical = new CT_BorderPr();
    }
    return m_vertical;
    }

    const CT_BorderPr& CT_Border::get_vertical() const
    {    
    if (m_vertical)
    {
        return *m_vertical;
    }
    return CT_BorderPr::default_instance();
    }

    bool CT_Border::has_horizontal() const
    {    
    return m_has_horizontal;
    }

    CT_BorderPr* CT_Border::mutable_horizontal()
    {    
    m_has_horizontal = true;
    if (!m_horizontal)
    {
        m_horizontal = new CT_BorderPr();
    }
    return m_horizontal;
    }

    const CT_BorderPr& CT_Border::get_horizontal() const
    {    
    if (m_horizontal)
    {
        return *m_horizontal;
    }
    return CT_BorderPr::default_instance();
    }

    void CT_Border::clear()
    {    
    m_has_diagonalUp_attr = false;
    m_diagonalUp_attr = false;
    
    m_has_diagonalDown_attr = false;
    m_diagonalDown_attr = false;
    
    m_has_outline_attr = false;
    m_outline_attr = false;
    }

    void CT_Border::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_diagonalUp_attr)
    {
        _outStream << " " << "diagonalUp" << "=\"" << XSD::XMLBooleanStr(m_diagonalUp_attr) << "\"";
    }
    
    
    if (m_has_diagonalDown_attr)
    {
        _outStream << " " << "diagonalDown" << "=\"" << XSD::XMLBooleanStr(m_diagonalDown_attr) << "\"";
    }
    
    
    if (m_has_outline_attr)
    {
        _outStream << " " << "outline" << "=\"" << XSD::XMLBooleanStr(m_outline_attr) << "\"";
    }
    
            _outStream << ">";
            
    if (m_has_start)
    {
        m_start->toXmlElem("main:start", "", _outStream);;
    }
    
    if (m_has_end)
    {
        m_end->toXmlElem("main:end", "", _outStream);;
    }
    
    if (m_has_left)
    {
        m_left->toXmlElem("main:left", "", _outStream);;
    }
    
    if (m_has_right)
    {
        m_right->toXmlElem("main:right", "", _outStream);;
    }
    
    if (m_has_top)
    {
        m_top->toXmlElem("main:top", "", _outStream);;
    }
    
    if (m_has_bottom)
    {
        m_bottom->toXmlElem("main:bottom", "", _outStream);;
    }
    
    if (m_has_diagonal)
    {
        m_diagonal->toXmlElem("main:diagonal", "", _outStream);;
    }
    
    if (m_has_vertical)
    {
        m_vertical->toXmlElem("main:vertical", "", _outStream);;
    }
    
    if (m_has_horizontal)
    {
        m_horizontal->toXmlElem("main:horizontal", "", _outStream);;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_Border& CT_Border::default_instance()
    {    
    if (!CT_Border::default_instance_)
    {
        CT_Border::default_instance_ = new CT_Border();
    }
    return *CT_Border::default_instance_;
    }

    bool CT_Border::has_diagonalUp_attr() const
    {    
    return m_has_diagonalUp_attr;
    }

    void CT_Border::set_diagonalUp_attr(const XSD::boolean_& _diagonalUp_attr)
    {    
    m_has_diagonalUp_attr = true;
    m_diagonalUp_attr = _diagonalUp_attr;
    }

    const XSD::boolean_& CT_Border::get_diagonalUp_attr() const
    {    
    return m_diagonalUp_attr;
    }

    bool CT_Border::has_diagonalDown_attr() const
    {    
    return m_has_diagonalDown_attr;
    }

    void CT_Border::set_diagonalDown_attr(const XSD::boolean_& _diagonalDown_attr)
    {    
    m_has_diagonalDown_attr = true;
    m_diagonalDown_attr = _diagonalDown_attr;
    }

    const XSD::boolean_& CT_Border::get_diagonalDown_attr() const
    {    
    return m_diagonalDown_attr;
    }

    bool CT_Border::has_outline_attr() const
    {    
    return m_has_outline_attr;
    }

    void CT_Border::set_outline_attr(const XSD::boolean_& _outline_attr)
    {    
    m_has_outline_attr = true;
    m_outline_attr = _outline_attr;
    }

    const XSD::boolean_& CT_Border::get_outline_attr() const
    {    
    return m_outline_attr;
    }

CT_Border* CT_Border::default_instance_ = NULL;

    // CT_BorderPr
    CT_BorderPr::CT_BorderPr()
    :m_has_color(false),
    m_color(NULL),
    m_has_style_attr(false),
    m_style_attr(NULL)
    {
    }
    CT_BorderPr::~CT_BorderPr()
{
    clear();    }
    bool CT_BorderPr::has_color() const
    {    
    return m_has_color;
    }

    CT_Color* CT_BorderPr::mutable_color()
    {    
    m_has_color = true;
    if (!m_color)
    {
        m_color = new CT_Color();
    }
    return m_color;
    }

    const CT_Color& CT_BorderPr::get_color() const
    {    
    if (m_color)
    {
        return *m_color;
    }
    return CT_Color::default_instance();
    }

    void CT_BorderPr::clear()
    {    
    m_has_style_attr = false;
    
    if (m_style_attr)
    {
        delete m_style_attr;
        m_style_attr = NULL;
    }
    
    }

    void CT_BorderPr::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_style_attr)
    {
        m_style_attr->toXmlAttr("style", _outStream);
    }
    
            _outStream << ">";
            
    if (m_has_color)
    {
        m_color->toXmlElem("main:color", "", _outStream);;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_BorderPr& CT_BorderPr::default_instance()
    {    
    if (!CT_BorderPr::default_instance_)
    {
        CT_BorderPr::default_instance_ = new CT_BorderPr();
    }
    return *CT_BorderPr::default_instance_;
    }

    bool CT_BorderPr::has_style_attr() const
    {    
    return m_has_style_attr;
    }

    void CT_BorderPr::set_style_attr(const ST_BorderStyle& _style_attr)
    {    
    m_has_style_attr = true;
    m_style_attr = new ST_BorderStyle(_style_attr);
    }

    const ST_BorderStyle& CT_BorderPr::get_style_attr() const
    {    
    if (m_style_attr)
    {
        return *m_style_attr;
    }
    return ST_BorderStyle::default_instance();
    }

CT_BorderPr* CT_BorderPr::default_instance_ = NULL;

    // CT_CellProtection
    CT_CellProtection::CT_CellProtection()
    :m_has_locked_attr(false),
    m_locked_attr(false),
    m_has_hidden_attr(false),
    m_hidden_attr(false)
    {
    }
    CT_CellProtection::~CT_CellProtection()
{
    clear();    }
    void CT_CellProtection::clear()
    {    
    m_has_locked_attr = false;
    m_locked_attr = false;
    
    m_has_hidden_attr = false;
    m_hidden_attr = false;
    }

    void CT_CellProtection::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_locked_attr)
    {
        _outStream << " " << "locked" << "=\"" << XSD::XMLBooleanStr(m_locked_attr) << "\"";
    }
    
    
    if (m_has_hidden_attr)
    {
        _outStream << " " << "hidden" << "=\"" << XSD::XMLBooleanStr(m_hidden_attr) << "\"";
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_CellProtection& CT_CellProtection::default_instance()
    {    
    if (!CT_CellProtection::default_instance_)
    {
        CT_CellProtection::default_instance_ = new CT_CellProtection();
    }
    return *CT_CellProtection::default_instance_;
    }

    bool CT_CellProtection::has_locked_attr() const
    {    
    return m_has_locked_attr;
    }

    void CT_CellProtection::set_locked_attr(const XSD::boolean_& _locked_attr)
    {    
    m_has_locked_attr = true;
    m_locked_attr = _locked_attr;
    }

    const XSD::boolean_& CT_CellProtection::get_locked_attr() const
    {    
    return m_locked_attr;
    }

    bool CT_CellProtection::has_hidden_attr() const
    {    
    return m_has_hidden_attr;
    }

    void CT_CellProtection::set_hidden_attr(const XSD::boolean_& _hidden_attr)
    {    
    m_has_hidden_attr = true;
    m_hidden_attr = _hidden_attr;
    }

    const XSD::boolean_& CT_CellProtection::get_hidden_attr() const
    {    
    return m_hidden_attr;
    }

CT_CellProtection* CT_CellProtection::default_instance_ = NULL;

    // CT_Fonts
    CT_Fonts::CT_Fonts()
    :m_has_count_attr(false),
    m_count_attr(0)
    {
    }
    CT_Fonts::~CT_Fonts()
{
    clear();    }
    CT_Font* CT_Fonts::add_font()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Font* pNewChild = pChildGroup->mutable_font();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_Fonts::clear()
    {    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_Fonts::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_font())
            {
                (*iter)->get_font().toXmlElem("main:font", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_Fonts& CT_Fonts::default_instance()
    {    
    if (!CT_Fonts::default_instance_)
    {
        CT_Fonts::default_instance_ = new CT_Fonts();
    }
    return *CT_Fonts::default_instance_;
    }

    bool CT_Fonts::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void CT_Fonts::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& CT_Fonts::get_count_attr() const
    {    
    return m_count_attr;
    }


    // CT_Fonts::ChildGroup_1
    CT_Fonts::ChildGroup_1::ChildGroup_1()
    :m_has_font(false),
    m_font(NULL)
    {
    }
    bool CT_Fonts::ChildGroup_1::has_font() const
    {    
    return m_has_font;
    }

    CT_Font* CT_Fonts::ChildGroup_1::mutable_font()
    {    
    
    m_has_font = true;
    if (!m_font)
    {
        m_font = new CT_Font();
    }
    return m_font;
    }

    const CT_Font& CT_Fonts::ChildGroup_1::get_font() const
    {    
    if (m_font)
    {
        return *m_font;
    }
    return CT_Font::default_instance();
    }

CT_Fonts* CT_Fonts::default_instance_ = NULL;

    // CT_Fills
    CT_Fills::CT_Fills()
    :m_has_count_attr(false),
    m_count_attr(0)
    {
    }
    CT_Fills::~CT_Fills()
{
    clear();    }
    CT_Fill* CT_Fills::add_fill()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Fill* pNewChild = pChildGroup->mutable_fill();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_Fills::clear()
    {    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_Fills::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_fill())
            {
                (*iter)->get_fill().toXmlElem("main:fill", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_Fills& CT_Fills::default_instance()
    {    
    if (!CT_Fills::default_instance_)
    {
        CT_Fills::default_instance_ = new CT_Fills();
    }
    return *CT_Fills::default_instance_;
    }

    bool CT_Fills::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void CT_Fills::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& CT_Fills::get_count_attr() const
    {    
    return m_count_attr;
    }


    // CT_Fills::ChildGroup_1
    CT_Fills::ChildGroup_1::ChildGroup_1()
    :m_has_fill(false),
    m_fill(NULL)
    {
    }
    bool CT_Fills::ChildGroup_1::has_fill() const
    {    
    return m_has_fill;
    }

    CT_Fill* CT_Fills::ChildGroup_1::mutable_fill()
    {    
    
    m_has_fill = true;
    if (!m_fill)
    {
        m_fill = new CT_Fill();
    }
    return m_fill;
    }

    const CT_Fill& CT_Fills::ChildGroup_1::get_fill() const
    {    
    if (m_fill)
    {
        return *m_fill;
    }
    return CT_Fill::default_instance();
    }

CT_Fills* CT_Fills::default_instance_ = NULL;

    // CT_Fill
    CT_Fill::CT_Fill()
    :m_has_patternFill(false),
    m_patternFill(NULL),
    m_has_gradientFill(false),
    m_gradientFill(NULL)
    {
    }
    CT_Fill::~CT_Fill()
{
    clear();    }
    bool CT_Fill::has_patternFill() const
    {    
    return m_has_patternFill;
    }

    CT_PatternFill* CT_Fill::mutable_patternFill()
    {    
    
    m_has_gradientFill = false;
    
    if (m_gradientFill)
    {
        delete m_gradientFill;
        m_gradientFill = NULL;
    }
    ;
    
    m_has_patternFill = true;
    if (!m_patternFill)
    {
        m_patternFill = new CT_PatternFill();
    }
    return m_patternFill;
    }

    const CT_PatternFill& CT_Fill::get_patternFill() const
    {    
    if (m_patternFill)
    {
        return *m_patternFill;
    }
    return CT_PatternFill::default_instance();
    }

    bool CT_Fill::has_gradientFill() const
    {    
    return m_has_gradientFill;
    }

    CT_GradientFill* CT_Fill::mutable_gradientFill()
    {    
    
    m_has_patternFill = false;
    
    if (m_patternFill)
    {
        delete m_patternFill;
        m_patternFill = NULL;
    }
    ;
    
    m_has_gradientFill = true;
    if (!m_gradientFill)
    {
        m_gradientFill = new CT_GradientFill();
    }
    return m_gradientFill;
    }

    const CT_GradientFill& CT_Fill::get_gradientFill() const
    {    
    if (m_gradientFill)
    {
        return *m_gradientFill;
    }
    return CT_GradientFill::default_instance();
    }

    void CT_Fill::clear()
    {    }

    void CT_Fill::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
            _outStream << ">";
            
    if (m_has_patternFill)
    {
        m_patternFill->toXmlElem("main:patternFill", "", _outStream);;
    }
    
    if (m_has_gradientFill)
    {
        m_gradientFill->toXmlElem("main:gradientFill", "", _outStream);;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_Fill& CT_Fill::default_instance()
    {    
    if (!CT_Fill::default_instance_)
    {
        CT_Fill::default_instance_ = new CT_Fill();
    }
    return *CT_Fill::default_instance_;
    }

CT_Fill* CT_Fill::default_instance_ = NULL;

    // CT_PatternFill
    CT_PatternFill::CT_PatternFill()
    :m_has_fgColor(false),
    m_fgColor(NULL),
    m_has_bgColor(false),
    m_bgColor(NULL),
    m_has_patternType_attr(false),
    m_patternType_attr(NULL)
    {
    }
    CT_PatternFill::~CT_PatternFill()
{
    clear();    }
    bool CT_PatternFill::has_fgColor() const
    {    
    return m_has_fgColor;
    }

    CT_Color* CT_PatternFill::mutable_fgColor()
    {    
    m_has_fgColor = true;
    if (!m_fgColor)
    {
        m_fgColor = new CT_Color();
    }
    return m_fgColor;
    }

    const CT_Color& CT_PatternFill::get_fgColor() const
    {    
    if (m_fgColor)
    {
        return *m_fgColor;
    }
    return CT_Color::default_instance();
    }

    bool CT_PatternFill::has_bgColor() const
    {    
    return m_has_bgColor;
    }

    CT_Color* CT_PatternFill::mutable_bgColor()
    {    
    m_has_bgColor = true;
    if (!m_bgColor)
    {
        m_bgColor = new CT_Color();
    }
    return m_bgColor;
    }

    const CT_Color& CT_PatternFill::get_bgColor() const
    {    
    if (m_bgColor)
    {
        return *m_bgColor;
    }
    return CT_Color::default_instance();
    }

    void CT_PatternFill::clear()
    {    
    m_has_patternType_attr = false;
    
    if (m_patternType_attr)
    {
        delete m_patternType_attr;
        m_patternType_attr = NULL;
    }
    
    }

    void CT_PatternFill::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_patternType_attr)
    {
        m_patternType_attr->toXmlAttr("patternType", _outStream);
    }
    
            _outStream << ">";
            
    if (m_has_fgColor)
    {
        m_fgColor->toXmlElem("main:fgColor", "", _outStream);;
    }
    
    if (m_has_bgColor)
    {
        m_bgColor->toXmlElem("main:bgColor", "", _outStream);;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_PatternFill& CT_PatternFill::default_instance()
    {    
    if (!CT_PatternFill::default_instance_)
    {
        CT_PatternFill::default_instance_ = new CT_PatternFill();
    }
    return *CT_PatternFill::default_instance_;
    }

    bool CT_PatternFill::has_patternType_attr() const
    {    
    return m_has_patternType_attr;
    }

    void CT_PatternFill::set_patternType_attr(const ST_PatternType& _patternType_attr)
    {    
    m_has_patternType_attr = true;
    m_patternType_attr = new ST_PatternType(_patternType_attr);
    }

    const ST_PatternType& CT_PatternFill::get_patternType_attr() const
    {    
    if (m_patternType_attr)
    {
        return *m_patternType_attr;
    }
    return ST_PatternType::default_instance();
    }

CT_PatternFill* CT_PatternFill::default_instance_ = NULL;

    // CT_Color
    CT_Color::CT_Color()
    :m_has_auto_attr(false),
    m_auto_attr(false),
    m_has_indexed_attr(false),
    m_indexed_attr(0),
    m_has_rgb_attr(false),
    m_rgb_attr(NULL),
    m_has_theme_attr(false),
    m_theme_attr(0),
    m_has_tint_attr(false),
    m_tint_attr(0)
    {
    }
    CT_Color::~CT_Color()
{
    clear();    }
    void CT_Color::clear()
    {    
    m_has_auto_attr = false;
    m_auto_attr = false;
    
    m_has_indexed_attr = false;
    m_indexed_attr = 0;
    
    m_has_rgb_attr = false;
    
    if (m_rgb_attr)
    {
        delete m_rgb_attr;
        m_rgb_attr = NULL;
    }
    
    
    m_has_theme_attr = false;
    m_theme_attr = 0;
    
    m_has_tint_attr = false;
    m_tint_attr = 0;
    }

    void CT_Color::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_auto_attr)
    {
        _outStream << " " << "auto" << "=\"" << XSD::XMLBooleanStr(m_auto_attr) << "\"";
    }
    
    
    if (m_has_indexed_attr)
    {
        _outStream << " " << "indexed" << "=\"" << m_indexed_attr << "\"";
    }
    
    
    if (m_has_rgb_attr)
    {
        m_rgb_attr->toXmlAttr("rgb", _outStream);
    }
    
    
    if (m_has_theme_attr)
    {
        _outStream << " " << "theme" << "=\"" << m_theme_attr << "\"";
    }
    
    
    if (m_has_tint_attr)
    {
        _outStream << " " << "tint" << "=\"" << m_tint_attr << "\"";
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_Color& CT_Color::default_instance()
    {    
    if (!CT_Color::default_instance_)
    {
        CT_Color::default_instance_ = new CT_Color();
    }
    return *CT_Color::default_instance_;
    }

    bool CT_Color::has_auto_attr() const
    {    
    return m_has_auto_attr;
    }

    void CT_Color::set_auto_attr(const XSD::boolean_& _auto_attr)
    {    
    m_has_auto_attr = true;
    m_auto_attr = _auto_attr;
    }

    const XSD::boolean_& CT_Color::get_auto_attr() const
    {    
    return m_auto_attr;
    }

    bool CT_Color::has_indexed_attr() const
    {    
    return m_has_indexed_attr;
    }

    void CT_Color::set_indexed_attr(const XSD::unsignedInt_& _indexed_attr)
    {    
    m_has_indexed_attr = true;
    m_indexed_attr = _indexed_attr;
    }

    const XSD::unsignedInt_& CT_Color::get_indexed_attr() const
    {    
    return m_indexed_attr;
    }

    bool CT_Color::has_rgb_attr() const
    {    
    return m_has_rgb_attr;
    }

    void CT_Color::set_rgb_attr(const ST_UnsignedIntHex& _rgb_attr)
    {    
    m_has_rgb_attr = true;
    m_rgb_attr = new ST_UnsignedIntHex(_rgb_attr);
    }

    const ST_UnsignedIntHex& CT_Color::get_rgb_attr() const
    {    
    if (m_rgb_attr)
    {
        return *m_rgb_attr;
    }
    return ST_UnsignedIntHex::default_instance();
    }

    bool CT_Color::has_theme_attr() const
    {    
    return m_has_theme_attr;
    }

    void CT_Color::set_theme_attr(const XSD::unsignedInt_& _theme_attr)
    {    
    m_has_theme_attr = true;
    m_theme_attr = _theme_attr;
    }

    const XSD::unsignedInt_& CT_Color::get_theme_attr() const
    {    
    return m_theme_attr;
    }

    bool CT_Color::has_tint_attr() const
    {    
    return m_has_tint_attr;
    }

    void CT_Color::set_tint_attr(const XSD::double_& _tint_attr)
    {    
    m_has_tint_attr = true;
    m_tint_attr = _tint_attr;
    }

    const XSD::double_& CT_Color::get_tint_attr() const
    {    
    return m_tint_attr;
    }

CT_Color* CT_Color::default_instance_ = NULL;

    // CT_GradientFill
    CT_GradientFill::CT_GradientFill()
    :m_has_type_attr(false),
    m_type_attr(NULL),
    m_has_degree_attr(false),
    m_degree_attr(0),
    m_has_left_attr(false),
    m_left_attr(0),
    m_has_right_attr(false),
    m_right_attr(0),
    m_has_top_attr(false),
    m_top_attr(0),
    m_has_bottom_attr(false),
    m_bottom_attr(0)
    {
    }
    CT_GradientFill::~CT_GradientFill()
{
    clear();    }
    CT_GradientStop* CT_GradientFill::add_stop()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_GradientStop* pNewChild = pChildGroup->mutable_stop();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_GradientFill::clear()
    {    
    m_has_type_attr = false;
    
    if (m_type_attr)
    {
        delete m_type_attr;
        m_type_attr = NULL;
    }
    
    
    m_has_degree_attr = false;
    m_degree_attr = 0;
    
    m_has_left_attr = false;
    m_left_attr = 0;
    
    m_has_right_attr = false;
    m_right_attr = 0;
    
    m_has_top_attr = false;
    m_top_attr = 0;
    
    m_has_bottom_attr = false;
    m_bottom_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_GradientFill::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_type_attr)
    {
        m_type_attr->toXmlAttr("type", _outStream);
    }
    
    
    if (m_has_degree_attr)
    {
        _outStream << " " << "degree" << "=\"" << m_degree_attr << "\"";
    }
    
    
    if (m_has_left_attr)
    {
        _outStream << " " << "left" << "=\"" << m_left_attr << "\"";
    }
    
    
    if (m_has_right_attr)
    {
        _outStream << " " << "right" << "=\"" << m_right_attr << "\"";
    }
    
    
    if (m_has_top_attr)
    {
        _outStream << " " << "top" << "=\"" << m_top_attr << "\"";
    }
    
    
    if (m_has_bottom_attr)
    {
        _outStream << " " << "bottom" << "=\"" << m_bottom_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_stop())
            {
                (*iter)->get_stop().toXmlElem("main:stop", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_GradientFill& CT_GradientFill::default_instance()
    {    
    if (!CT_GradientFill::default_instance_)
    {
        CT_GradientFill::default_instance_ = new CT_GradientFill();
    }
    return *CT_GradientFill::default_instance_;
    }

    bool CT_GradientFill::has_type_attr() const
    {    
    return m_has_type_attr;
    }

    void CT_GradientFill::set_type_attr(const ST_GradientType& _type_attr)
    {    
    m_has_type_attr = true;
    m_type_attr = new ST_GradientType(_type_attr);
    }

    const ST_GradientType& CT_GradientFill::get_type_attr() const
    {    
    if (m_type_attr)
    {
        return *m_type_attr;
    }
    return ST_GradientType::default_instance();
    }

    bool CT_GradientFill::has_degree_attr() const
    {    
    return m_has_degree_attr;
    }

    void CT_GradientFill::set_degree_attr(const XSD::double_& _degree_attr)
    {    
    m_has_degree_attr = true;
    m_degree_attr = _degree_attr;
    }

    const XSD::double_& CT_GradientFill::get_degree_attr() const
    {    
    return m_degree_attr;
    }

    bool CT_GradientFill::has_left_attr() const
    {    
    return m_has_left_attr;
    }

    void CT_GradientFill::set_left_attr(const XSD::double_& _left_attr)
    {    
    m_has_left_attr = true;
    m_left_attr = _left_attr;
    }

    const XSD::double_& CT_GradientFill::get_left_attr() const
    {    
    return m_left_attr;
    }

    bool CT_GradientFill::has_right_attr() const
    {    
    return m_has_right_attr;
    }

    void CT_GradientFill::set_right_attr(const XSD::double_& _right_attr)
    {    
    m_has_right_attr = true;
    m_right_attr = _right_attr;
    }

    const XSD::double_& CT_GradientFill::get_right_attr() const
    {    
    return m_right_attr;
    }

    bool CT_GradientFill::has_top_attr() const
    {    
    return m_has_top_attr;
    }

    void CT_GradientFill::set_top_attr(const XSD::double_& _top_attr)
    {    
    m_has_top_attr = true;
    m_top_attr = _top_attr;
    }

    const XSD::double_& CT_GradientFill::get_top_attr() const
    {    
    return m_top_attr;
    }

    bool CT_GradientFill::has_bottom_attr() const
    {    
    return m_has_bottom_attr;
    }

    void CT_GradientFill::set_bottom_attr(const XSD::double_& _bottom_attr)
    {    
    m_has_bottom_attr = true;
    m_bottom_attr = _bottom_attr;
    }

    const XSD::double_& CT_GradientFill::get_bottom_attr() const
    {    
    return m_bottom_attr;
    }


    // CT_GradientFill::ChildGroup_1
    CT_GradientFill::ChildGroup_1::ChildGroup_1()
    :m_has_stop(false),
    m_stop(NULL)
    {
    }
    bool CT_GradientFill::ChildGroup_1::has_stop() const
    {    
    return m_has_stop;
    }

    CT_GradientStop* CT_GradientFill::ChildGroup_1::mutable_stop()
    {    
    
    m_has_stop = true;
    if (!m_stop)
    {
        m_stop = new CT_GradientStop();
    }
    return m_stop;
    }

    const CT_GradientStop& CT_GradientFill::ChildGroup_1::get_stop() const
    {    
    if (m_stop)
    {
        return *m_stop;
    }
    return CT_GradientStop::default_instance();
    }

CT_GradientFill* CT_GradientFill::default_instance_ = NULL;

    // CT_GradientStop
    CT_GradientStop::CT_GradientStop()
    :m_has_color(false),
    m_color(NULL),
    m_has_position_attr(false),
    m_position_attr(0)
    {
    }
    CT_GradientStop::~CT_GradientStop()
{
    clear();    }
    bool CT_GradientStop::has_color() const
    {    
    return m_has_color;
    }

    CT_Color* CT_GradientStop::mutable_color()
    {    
    m_has_color = true;
    if (!m_color)
    {
        m_color = new CT_Color();
    }
    return m_color;
    }

    const CT_Color& CT_GradientStop::get_color() const
    {    
    if (m_color)
    {
        return *m_color;
    }
    return CT_Color::default_instance();
    }

    void CT_GradientStop::clear()
    {    
    m_has_position_attr = false;
    m_position_attr = 0;
    }

    void CT_GradientStop::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_position_attr)
    {
        _outStream << " " << "position" << "=\"" << m_position_attr << "\"";
    }
    
            _outStream << ">";
            
    if (m_has_color)
    {
        m_color->toXmlElem("main:color", "", _outStream);;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_GradientStop& CT_GradientStop::default_instance()
    {    
    if (!CT_GradientStop::default_instance_)
    {
        CT_GradientStop::default_instance_ = new CT_GradientStop();
    }
    return *CT_GradientStop::default_instance_;
    }

    bool CT_GradientStop::has_position_attr() const
    {    
    return m_has_position_attr;
    }

    void CT_GradientStop::set_position_attr(const XSD::double_& _position_attr)
    {    
    m_has_position_attr = true;
    m_position_attr = _position_attr;
    }

    const XSD::double_& CT_GradientStop::get_position_attr() const
    {    
    return m_position_attr;
    }

CT_GradientStop* CT_GradientStop::default_instance_ = NULL;

    // CT_NumFmts
    CT_NumFmts::CT_NumFmts()
    :m_has_count_attr(false),
    m_count_attr(0)
    {
    }
    CT_NumFmts::~CT_NumFmts()
{
    clear();    }
    CT_NumFmt* CT_NumFmts::add_numFmt()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_NumFmt* pNewChild = pChildGroup->mutable_numFmt();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_NumFmts::clear()
    {    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_NumFmts::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_numFmt())
            {
                (*iter)->get_numFmt().toXmlElem("main:numFmt", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_NumFmts& CT_NumFmts::default_instance()
    {    
    if (!CT_NumFmts::default_instance_)
    {
        CT_NumFmts::default_instance_ = new CT_NumFmts();
    }
    return *CT_NumFmts::default_instance_;
    }

    bool CT_NumFmts::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void CT_NumFmts::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& CT_NumFmts::get_count_attr() const
    {    
    return m_count_attr;
    }


    // CT_NumFmts::ChildGroup_1
    CT_NumFmts::ChildGroup_1::ChildGroup_1()
    :m_has_numFmt(false),
    m_numFmt(NULL)
    {
    }
    bool CT_NumFmts::ChildGroup_1::has_numFmt() const
    {    
    return m_has_numFmt;
    }

    CT_NumFmt* CT_NumFmts::ChildGroup_1::mutable_numFmt()
    {    
    
    m_has_numFmt = true;
    if (!m_numFmt)
    {
        m_numFmt = new CT_NumFmt();
    }
    return m_numFmt;
    }

    const CT_NumFmt& CT_NumFmts::ChildGroup_1::get_numFmt() const
    {    
    if (m_numFmt)
    {
        return *m_numFmt;
    }
    return CT_NumFmt::default_instance();
    }

CT_NumFmts* CT_NumFmts::default_instance_ = NULL;

    // CT_NumFmt
    CT_NumFmt::CT_NumFmt()
    :m_has_numFmtId_attr(false),
    m_numFmtId_attr(NULL),
    m_has_formatCode_attr(false),
    m_formatCode_attr(NULL)
    {
    }
    CT_NumFmt::~CT_NumFmt()
{
    clear();    }
    void CT_NumFmt::clear()
    {    
    m_has_numFmtId_attr = false;
    
    if (m_numFmtId_attr)
    {
        delete m_numFmtId_attr;
        m_numFmtId_attr = NULL;
    }
    
    
    m_has_formatCode_attr = false;
    
    if (m_formatCode_attr)
    {
        delete m_formatCode_attr;
        m_formatCode_attr = NULL;
    }
    
    }

    void CT_NumFmt::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_numFmtId_attr)
    {
        m_numFmtId_attr->toXmlAttr("numFmtId", _outStream);
    }
    
    
    if (m_has_formatCode_attr)
    {
        m_formatCode_attr->toXmlAttr("formatCode", _outStream);
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_NumFmt& CT_NumFmt::default_instance()
    {    
    if (!CT_NumFmt::default_instance_)
    {
        CT_NumFmt::default_instance_ = new CT_NumFmt();
    }
    return *CT_NumFmt::default_instance_;
    }

    bool CT_NumFmt::has_numFmtId_attr() const
    {    
    return m_has_numFmtId_attr;
    }

    void CT_NumFmt::set_numFmtId_attr(const ST_NumFmtId& _numFmtId_attr)
    {    
    m_has_numFmtId_attr = true;
    m_numFmtId_attr = new ST_NumFmtId(_numFmtId_attr);
    }

    const ST_NumFmtId& CT_NumFmt::get_numFmtId_attr() const
    {    
    if (m_numFmtId_attr)
    {
        return *m_numFmtId_attr;
    }
    return ST_NumFmtId::default_instance();
    }

    bool CT_NumFmt::has_formatCode_attr() const
    {    
    return m_has_formatCode_attr;
    }

    void CT_NumFmt::set_formatCode_attr(const ns_s::ST_Xstring& _formatCode_attr)
    {    
    m_has_formatCode_attr = true;
    m_formatCode_attr = new ns_s::ST_Xstring(_formatCode_attr);
    }

    const ns_s::ST_Xstring& CT_NumFmt::get_formatCode_attr() const
    {    
    if (m_formatCode_attr)
    {
        return *m_formatCode_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

CT_NumFmt* CT_NumFmt::default_instance_ = NULL;

    // CT_CellStyleXfs
    CT_CellStyleXfs::CT_CellStyleXfs()
    :m_has_count_attr(false),
    m_count_attr(0)
    {
    }
    CT_CellStyleXfs::~CT_CellStyleXfs()
{
    clear();    }
    CT_Xf* CT_CellStyleXfs::add_xf()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Xf* pNewChild = pChildGroup->mutable_xf();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_CellStyleXfs::clear()
    {    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_CellStyleXfs::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_xf())
            {
                (*iter)->get_xf().toXmlElem("main:xf", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_CellStyleXfs& CT_CellStyleXfs::default_instance()
    {    
    if (!CT_CellStyleXfs::default_instance_)
    {
        CT_CellStyleXfs::default_instance_ = new CT_CellStyleXfs();
    }
    return *CT_CellStyleXfs::default_instance_;
    }

    bool CT_CellStyleXfs::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void CT_CellStyleXfs::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& CT_CellStyleXfs::get_count_attr() const
    {    
    return m_count_attr;
    }


    // CT_CellStyleXfs::ChildGroup_1
    CT_CellStyleXfs::ChildGroup_1::ChildGroup_1()
    :m_has_xf(false),
    m_xf(NULL)
    {
    }
    bool CT_CellStyleXfs::ChildGroup_1::has_xf() const
    {    
    return m_has_xf;
    }

    CT_Xf* CT_CellStyleXfs::ChildGroup_1::mutable_xf()
    {    
    
    m_has_xf = true;
    if (!m_xf)
    {
        m_xf = new CT_Xf();
    }
    return m_xf;
    }

    const CT_Xf& CT_CellStyleXfs::ChildGroup_1::get_xf() const
    {    
    if (m_xf)
    {
        return *m_xf;
    }
    return CT_Xf::default_instance();
    }

CT_CellStyleXfs* CT_CellStyleXfs::default_instance_ = NULL;

    // CT_CellXfs
    CT_CellXfs::CT_CellXfs()
    :m_has_count_attr(false),
    m_count_attr(0)
    {
    }
    CT_CellXfs::~CT_CellXfs()
{
    clear();    }
    CT_Xf* CT_CellXfs::add_xf()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Xf* pNewChild = pChildGroup->mutable_xf();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_CellXfs::clear()
    {    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_CellXfs::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_xf())
            {
                (*iter)->get_xf().toXmlElem("main:xf", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_CellXfs& CT_CellXfs::default_instance()
    {    
    if (!CT_CellXfs::default_instance_)
    {
        CT_CellXfs::default_instance_ = new CT_CellXfs();
    }
    return *CT_CellXfs::default_instance_;
    }

    bool CT_CellXfs::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void CT_CellXfs::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& CT_CellXfs::get_count_attr() const
    {    
    return m_count_attr;
    }


    // CT_CellXfs::ChildGroup_1
    CT_CellXfs::ChildGroup_1::ChildGroup_1()
    :m_has_xf(false),
    m_xf(NULL)
    {
    }
    bool CT_CellXfs::ChildGroup_1::has_xf() const
    {    
    return m_has_xf;
    }

    CT_Xf* CT_CellXfs::ChildGroup_1::mutable_xf()
    {    
    
    m_has_xf = true;
    if (!m_xf)
    {
        m_xf = new CT_Xf();
    }
    return m_xf;
    }

    const CT_Xf& CT_CellXfs::ChildGroup_1::get_xf() const
    {    
    if (m_xf)
    {
        return *m_xf;
    }
    return CT_Xf::default_instance();
    }

CT_CellXfs* CT_CellXfs::default_instance_ = NULL;

    // CT_Xf
    CT_Xf::CT_Xf()
    :m_has_alignment(false),
    m_alignment(NULL),
    m_has_protection(false),
    m_protection(NULL),
    m_has_extLst(false),
    m_extLst(NULL),
    m_has_numFmtId_attr(false),
    m_numFmtId_attr(NULL),
    m_has_fontId_attr(false),
    m_fontId_attr(NULL),
    m_has_fillId_attr(false),
    m_fillId_attr(NULL),
    m_has_borderId_attr(false),
    m_borderId_attr(NULL),
    m_has_xfId_attr(false),
    m_xfId_attr(NULL),
    m_has_quotePrefix_attr(false),
    m_quotePrefix_attr(false),
    m_has_pivotButton_attr(false),
    m_pivotButton_attr(false),
    m_has_applyNumberFormat_attr(false),
    m_applyNumberFormat_attr(false),
    m_has_applyFont_attr(false),
    m_applyFont_attr(false),
    m_has_applyFill_attr(false),
    m_applyFill_attr(false),
    m_has_applyBorder_attr(false),
    m_applyBorder_attr(false),
    m_has_applyAlignment_attr(false),
    m_applyAlignment_attr(false),
    m_has_applyProtection_attr(false),
    m_applyProtection_attr(false)
    {
    }
    CT_Xf::~CT_Xf()
{
    clear();    }
    bool CT_Xf::has_alignment() const
    {    
    return m_has_alignment;
    }

    CT_CellAlignment* CT_Xf::mutable_alignment()
    {    
    m_has_alignment = true;
    if (!m_alignment)
    {
        m_alignment = new CT_CellAlignment();
    }
    return m_alignment;
    }

    const CT_CellAlignment& CT_Xf::get_alignment() const
    {    
    if (m_alignment)
    {
        return *m_alignment;
    }
    return CT_CellAlignment::default_instance();
    }

    bool CT_Xf::has_protection() const
    {    
    return m_has_protection;
    }

    CT_CellProtection* CT_Xf::mutable_protection()
    {    
    m_has_protection = true;
    if (!m_protection)
    {
        m_protection = new CT_CellProtection();
    }
    return m_protection;
    }

    const CT_CellProtection& CT_Xf::get_protection() const
    {    
    if (m_protection)
    {
        return *m_protection;
    }
    return CT_CellProtection::default_instance();
    }

    bool CT_Xf::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* CT_Xf::mutable_extLst()
    {    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& CT_Xf::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

    void CT_Xf::clear()
    {    
    m_has_numFmtId_attr = false;
    
    if (m_numFmtId_attr)
    {
        delete m_numFmtId_attr;
        m_numFmtId_attr = NULL;
    }
    
    
    m_has_fontId_attr = false;
    
    if (m_fontId_attr)
    {
        delete m_fontId_attr;
        m_fontId_attr = NULL;
    }
    
    
    m_has_fillId_attr = false;
    
    if (m_fillId_attr)
    {
        delete m_fillId_attr;
        m_fillId_attr = NULL;
    }
    
    
    m_has_borderId_attr = false;
    
    if (m_borderId_attr)
    {
        delete m_borderId_attr;
        m_borderId_attr = NULL;
    }
    
    
    m_has_xfId_attr = false;
    
    if (m_xfId_attr)
    {
        delete m_xfId_attr;
        m_xfId_attr = NULL;
    }
    
    
    m_has_quotePrefix_attr = false;
    m_quotePrefix_attr = false;
    
    m_has_pivotButton_attr = false;
    m_pivotButton_attr = false;
    
    m_has_applyNumberFormat_attr = false;
    m_applyNumberFormat_attr = false;
    
    m_has_applyFont_attr = false;
    m_applyFont_attr = false;
    
    m_has_applyFill_attr = false;
    m_applyFill_attr = false;
    
    m_has_applyBorder_attr = false;
    m_applyBorder_attr = false;
    
    m_has_applyAlignment_attr = false;
    m_applyAlignment_attr = false;
    
    m_has_applyProtection_attr = false;
    m_applyProtection_attr = false;
    }

    void CT_Xf::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_numFmtId_attr)
    {
        m_numFmtId_attr->toXmlAttr("numFmtId", _outStream);
    }
    
    
    if (m_has_fontId_attr)
    {
        m_fontId_attr->toXmlAttr("fontId", _outStream);
    }
    
    
    if (m_has_fillId_attr)
    {
        m_fillId_attr->toXmlAttr("fillId", _outStream);
    }
    
    
    if (m_has_borderId_attr)
    {
        m_borderId_attr->toXmlAttr("borderId", _outStream);
    }
    
    
    if (m_has_xfId_attr)
    {
        m_xfId_attr->toXmlAttr("xfId", _outStream);
    }
    
    
    if (m_has_quotePrefix_attr)
    {
        _outStream << " " << "quotePrefix" << "=\"" << XSD::XMLBooleanStr(m_quotePrefix_attr) << "\"";
    }
    
    
    if (m_has_pivotButton_attr)
    {
        _outStream << " " << "pivotButton" << "=\"" << XSD::XMLBooleanStr(m_pivotButton_attr) << "\"";
    }
    
    
    if (m_has_applyNumberFormat_attr)
    {
        _outStream << " " << "applyNumberFormat" << "=\"" << XSD::XMLBooleanStr(m_applyNumberFormat_attr) << "\"";
    }
    
    
    if (m_has_applyFont_attr)
    {
        _outStream << " " << "applyFont" << "=\"" << XSD::XMLBooleanStr(m_applyFont_attr) << "\"";
    }
    
    
    if (m_has_applyFill_attr)
    {
        _outStream << " " << "applyFill" << "=\"" << XSD::XMLBooleanStr(m_applyFill_attr) << "\"";
    }
    
    
    if (m_has_applyBorder_attr)
    {
        _outStream << " " << "applyBorder" << "=\"" << XSD::XMLBooleanStr(m_applyBorder_attr) << "\"";
    }
    
    
    if (m_has_applyAlignment_attr)
    {
        _outStream << " " << "applyAlignment" << "=\"" << XSD::XMLBooleanStr(m_applyAlignment_attr) << "\"";
    }
    
    
    if (m_has_applyProtection_attr)
    {
        _outStream << " " << "applyProtection" << "=\"" << XSD::XMLBooleanStr(m_applyProtection_attr) << "\"";
    }
    
            _outStream << ">";
            
    if (m_has_alignment)
    {
        m_alignment->toXmlElem("main:alignment", "", _outStream);;
    }
    
    if (m_has_protection)
    {
        m_protection->toXmlElem("main:protection", "", _outStream);;
    }
    
    if (m_has_extLst)
    {
        m_extLst->toXmlElem("main:extLst", "", _outStream);;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_Xf& CT_Xf::default_instance()
    {    
    if (!CT_Xf::default_instance_)
    {
        CT_Xf::default_instance_ = new CT_Xf();
    }
    return *CT_Xf::default_instance_;
    }

    bool CT_Xf::has_numFmtId_attr() const
    {    
    return m_has_numFmtId_attr;
    }

    void CT_Xf::set_numFmtId_attr(const ST_NumFmtId& _numFmtId_attr)
    {    
    m_has_numFmtId_attr = true;
    m_numFmtId_attr = new ST_NumFmtId(_numFmtId_attr);
    }

    const ST_NumFmtId& CT_Xf::get_numFmtId_attr() const
    {    
    if (m_numFmtId_attr)
    {
        return *m_numFmtId_attr;
    }
    return ST_NumFmtId::default_instance();
    }

    bool CT_Xf::has_fontId_attr() const
    {    
    return m_has_fontId_attr;
    }

    void CT_Xf::set_fontId_attr(const ST_FontId& _fontId_attr)
    {    
    m_has_fontId_attr = true;
    m_fontId_attr = new ST_FontId(_fontId_attr);
    }

    const ST_FontId& CT_Xf::get_fontId_attr() const
    {    
    if (m_fontId_attr)
    {
        return *m_fontId_attr;
    }
    return ST_FontId::default_instance();
    }

    bool CT_Xf::has_fillId_attr() const
    {    
    return m_has_fillId_attr;
    }

    void CT_Xf::set_fillId_attr(const ST_FillId& _fillId_attr)
    {    
    m_has_fillId_attr = true;
    m_fillId_attr = new ST_FillId(_fillId_attr);
    }

    const ST_FillId& CT_Xf::get_fillId_attr() const
    {    
    if (m_fillId_attr)
    {
        return *m_fillId_attr;
    }
    return ST_FillId::default_instance();
    }

    bool CT_Xf::has_borderId_attr() const
    {    
    return m_has_borderId_attr;
    }

    void CT_Xf::set_borderId_attr(const ST_BorderId& _borderId_attr)
    {    
    m_has_borderId_attr = true;
    m_borderId_attr = new ST_BorderId(_borderId_attr);
    }

    const ST_BorderId& CT_Xf::get_borderId_attr() const
    {    
    if (m_borderId_attr)
    {
        return *m_borderId_attr;
    }
    return ST_BorderId::default_instance();
    }

    bool CT_Xf::has_xfId_attr() const
    {    
    return m_has_xfId_attr;
    }

    void CT_Xf::set_xfId_attr(const ST_CellStyleXfId& _xfId_attr)
    {    
    m_has_xfId_attr = true;
    m_xfId_attr = new ST_CellStyleXfId(_xfId_attr);
    }

    const ST_CellStyleXfId& CT_Xf::get_xfId_attr() const
    {    
    if (m_xfId_attr)
    {
        return *m_xfId_attr;
    }
    return ST_CellStyleXfId::default_instance();
    }

    bool CT_Xf::has_quotePrefix_attr() const
    {    
    return m_has_quotePrefix_attr;
    }

    void CT_Xf::set_quotePrefix_attr(const XSD::boolean_& _quotePrefix_attr)
    {    
    m_has_quotePrefix_attr = true;
    m_quotePrefix_attr = _quotePrefix_attr;
    }

    const XSD::boolean_& CT_Xf::get_quotePrefix_attr() const
    {    
    return m_quotePrefix_attr;
    }

    bool CT_Xf::has_pivotButton_attr() const
    {    
    return m_has_pivotButton_attr;
    }

    void CT_Xf::set_pivotButton_attr(const XSD::boolean_& _pivotButton_attr)
    {    
    m_has_pivotButton_attr = true;
    m_pivotButton_attr = _pivotButton_attr;
    }

    const XSD::boolean_& CT_Xf::get_pivotButton_attr() const
    {    
    return m_pivotButton_attr;
    }

    bool CT_Xf::has_applyNumberFormat_attr() const
    {    
    return m_has_applyNumberFormat_attr;
    }

    void CT_Xf::set_applyNumberFormat_attr(const XSD::boolean_& _applyNumberFormat_attr)
    {    
    m_has_applyNumberFormat_attr = true;
    m_applyNumberFormat_attr = _applyNumberFormat_attr;
    }

    const XSD::boolean_& CT_Xf::get_applyNumberFormat_attr() const
    {    
    return m_applyNumberFormat_attr;
    }

    bool CT_Xf::has_applyFont_attr() const
    {    
    return m_has_applyFont_attr;
    }

    void CT_Xf::set_applyFont_attr(const XSD::boolean_& _applyFont_attr)
    {    
    m_has_applyFont_attr = true;
    m_applyFont_attr = _applyFont_attr;
    }

    const XSD::boolean_& CT_Xf::get_applyFont_attr() const
    {    
    return m_applyFont_attr;
    }

    bool CT_Xf::has_applyFill_attr() const
    {    
    return m_has_applyFill_attr;
    }

    void CT_Xf::set_applyFill_attr(const XSD::boolean_& _applyFill_attr)
    {    
    m_has_applyFill_attr = true;
    m_applyFill_attr = _applyFill_attr;
    }

    const XSD::boolean_& CT_Xf::get_applyFill_attr() const
    {    
    return m_applyFill_attr;
    }

    bool CT_Xf::has_applyBorder_attr() const
    {    
    return m_has_applyBorder_attr;
    }

    void CT_Xf::set_applyBorder_attr(const XSD::boolean_& _applyBorder_attr)
    {    
    m_has_applyBorder_attr = true;
    m_applyBorder_attr = _applyBorder_attr;
    }

    const XSD::boolean_& CT_Xf::get_applyBorder_attr() const
    {    
    return m_applyBorder_attr;
    }

    bool CT_Xf::has_applyAlignment_attr() const
    {    
    return m_has_applyAlignment_attr;
    }

    void CT_Xf::set_applyAlignment_attr(const XSD::boolean_& _applyAlignment_attr)
    {    
    m_has_applyAlignment_attr = true;
    m_applyAlignment_attr = _applyAlignment_attr;
    }

    const XSD::boolean_& CT_Xf::get_applyAlignment_attr() const
    {    
    return m_applyAlignment_attr;
    }

    bool CT_Xf::has_applyProtection_attr() const
    {    
    return m_has_applyProtection_attr;
    }

    void CT_Xf::set_applyProtection_attr(const XSD::boolean_& _applyProtection_attr)
    {    
    m_has_applyProtection_attr = true;
    m_applyProtection_attr = _applyProtection_attr;
    }

    const XSD::boolean_& CT_Xf::get_applyProtection_attr() const
    {    
    return m_applyProtection_attr;
    }

CT_Xf* CT_Xf::default_instance_ = NULL;

    // CT_CellStyles
    CT_CellStyles::CT_CellStyles()
    :m_has_count_attr(false),
    m_count_attr(0)
    {
    }
    CT_CellStyles::~CT_CellStyles()
{
    clear();    }
    CT_CellStyle* CT_CellStyles::add_cellStyle()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_CellStyle* pNewChild = pChildGroup->mutable_cellStyle();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_CellStyles::clear()
    {    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_CellStyles::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_cellStyle())
            {
                (*iter)->get_cellStyle().toXmlElem("main:cellStyle", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_CellStyles& CT_CellStyles::default_instance()
    {    
    if (!CT_CellStyles::default_instance_)
    {
        CT_CellStyles::default_instance_ = new CT_CellStyles();
    }
    return *CT_CellStyles::default_instance_;
    }

    bool CT_CellStyles::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void CT_CellStyles::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& CT_CellStyles::get_count_attr() const
    {    
    return m_count_attr;
    }


    // CT_CellStyles::ChildGroup_1
    CT_CellStyles::ChildGroup_1::ChildGroup_1()
    :m_has_cellStyle(false),
    m_cellStyle(NULL)
    {
    }
    bool CT_CellStyles::ChildGroup_1::has_cellStyle() const
    {    
    return m_has_cellStyle;
    }

    CT_CellStyle* CT_CellStyles::ChildGroup_1::mutable_cellStyle()
    {    
    
    m_has_cellStyle = true;
    if (!m_cellStyle)
    {
        m_cellStyle = new CT_CellStyle();
    }
    return m_cellStyle;
    }

    const CT_CellStyle& CT_CellStyles::ChildGroup_1::get_cellStyle() const
    {    
    if (m_cellStyle)
    {
        return *m_cellStyle;
    }
    return CT_CellStyle::default_instance();
    }

CT_CellStyles* CT_CellStyles::default_instance_ = NULL;

    // CT_CellStyle
    CT_CellStyle::CT_CellStyle()
    :m_has_extLst(false),
    m_extLst(NULL),
    m_has_name_attr(false),
    m_name_attr(NULL),
    m_has_xfId_attr(false),
    m_xfId_attr(NULL),
    m_has_builtinId_attr(false),
    m_builtinId_attr(0),
    m_has_iLevel_attr(false),
    m_iLevel_attr(0),
    m_has_hidden_attr(false),
    m_hidden_attr(false),
    m_has_customBuiltin_attr(false),
    m_customBuiltin_attr(false)
    {
    }
    CT_CellStyle::~CT_CellStyle()
{
    clear();    }
    bool CT_CellStyle::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* CT_CellStyle::mutable_extLst()
    {    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& CT_CellStyle::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

    void CT_CellStyle::clear()
    {    
    m_has_name_attr = false;
    
    if (m_name_attr)
    {
        delete m_name_attr;
        m_name_attr = NULL;
    }
    
    
    m_has_xfId_attr = false;
    
    if (m_xfId_attr)
    {
        delete m_xfId_attr;
        m_xfId_attr = NULL;
    }
    
    
    m_has_builtinId_attr = false;
    m_builtinId_attr = 0;
    
    m_has_iLevel_attr = false;
    m_iLevel_attr = 0;
    
    m_has_hidden_attr = false;
    m_hidden_attr = false;
    
    m_has_customBuiltin_attr = false;
    m_customBuiltin_attr = false;
    }

    void CT_CellStyle::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_name_attr)
    {
        m_name_attr->toXmlAttr("name", _outStream);
    }
    
    
    if (m_has_xfId_attr)
    {
        m_xfId_attr->toXmlAttr("xfId", _outStream);
    }
    
    
    if (m_has_builtinId_attr)
    {
        _outStream << " " << "builtinId" << "=\"" << m_builtinId_attr << "\"";
    }
    
    
    if (m_has_iLevel_attr)
    {
        _outStream << " " << "iLevel" << "=\"" << m_iLevel_attr << "\"";
    }
    
    
    if (m_has_hidden_attr)
    {
        _outStream << " " << "hidden" << "=\"" << XSD::XMLBooleanStr(m_hidden_attr) << "\"";
    }
    
    
    if (m_has_customBuiltin_attr)
    {
        _outStream << " " << "customBuiltin" << "=\"" << XSD::XMLBooleanStr(m_customBuiltin_attr) << "\"";
    }
    
            _outStream << ">";
            
    if (m_has_extLst)
    {
        m_extLst->toXmlElem("main:extLst", "", _outStream);;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_CellStyle& CT_CellStyle::default_instance()
    {    
    if (!CT_CellStyle::default_instance_)
    {
        CT_CellStyle::default_instance_ = new CT_CellStyle();
    }
    return *CT_CellStyle::default_instance_;
    }

    bool CT_CellStyle::has_name_attr() const
    {    
    return m_has_name_attr;
    }

    void CT_CellStyle::set_name_attr(const ns_s::ST_Xstring& _name_attr)
    {    
    m_has_name_attr = true;
    m_name_attr = new ns_s::ST_Xstring(_name_attr);
    }

    const ns_s::ST_Xstring& CT_CellStyle::get_name_attr() const
    {    
    if (m_name_attr)
    {
        return *m_name_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_CellStyle::has_xfId_attr() const
    {    
    return m_has_xfId_attr;
    }

    void CT_CellStyle::set_xfId_attr(const ST_CellStyleXfId& _xfId_attr)
    {    
    m_has_xfId_attr = true;
    m_xfId_attr = new ST_CellStyleXfId(_xfId_attr);
    }

    const ST_CellStyleXfId& CT_CellStyle::get_xfId_attr() const
    {    
    if (m_xfId_attr)
    {
        return *m_xfId_attr;
    }
    return ST_CellStyleXfId::default_instance();
    }

    bool CT_CellStyle::has_builtinId_attr() const
    {    
    return m_has_builtinId_attr;
    }

    void CT_CellStyle::set_builtinId_attr(const XSD::unsignedInt_& _builtinId_attr)
    {    
    m_has_builtinId_attr = true;
    m_builtinId_attr = _builtinId_attr;
    }

    const XSD::unsignedInt_& CT_CellStyle::get_builtinId_attr() const
    {    
    return m_builtinId_attr;
    }

    bool CT_CellStyle::has_iLevel_attr() const
    {    
    return m_has_iLevel_attr;
    }

    void CT_CellStyle::set_iLevel_attr(const XSD::unsignedInt_& _iLevel_attr)
    {    
    m_has_iLevel_attr = true;
    m_iLevel_attr = _iLevel_attr;
    }

    const XSD::unsignedInt_& CT_CellStyle::get_iLevel_attr() const
    {    
    return m_iLevel_attr;
    }

    bool CT_CellStyle::has_hidden_attr() const
    {    
    return m_has_hidden_attr;
    }

    void CT_CellStyle::set_hidden_attr(const XSD::boolean_& _hidden_attr)
    {    
    m_has_hidden_attr = true;
    m_hidden_attr = _hidden_attr;
    }

    const XSD::boolean_& CT_CellStyle::get_hidden_attr() const
    {    
    return m_hidden_attr;
    }

    bool CT_CellStyle::has_customBuiltin_attr() const
    {    
    return m_has_customBuiltin_attr;
    }

    void CT_CellStyle::set_customBuiltin_attr(const XSD::boolean_& _customBuiltin_attr)
    {    
    m_has_customBuiltin_attr = true;
    m_customBuiltin_attr = _customBuiltin_attr;
    }

    const XSD::boolean_& CT_CellStyle::get_customBuiltin_attr() const
    {    
    return m_customBuiltin_attr;
    }

CT_CellStyle* CT_CellStyle::default_instance_ = NULL;

    // CT_Dxfs
    CT_Dxfs::CT_Dxfs()
    :m_has_count_attr(false),
    m_count_attr(0)
    {
    }
    CT_Dxfs::~CT_Dxfs()
{
    clear();    }
    CT_Dxf* CT_Dxfs::add_dxf()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Dxf* pNewChild = pChildGroup->mutable_dxf();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_Dxfs::clear()
    {    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_Dxfs::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_dxf())
            {
                (*iter)->get_dxf().toXmlElem("main:dxf", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_Dxfs& CT_Dxfs::default_instance()
    {    
    if (!CT_Dxfs::default_instance_)
    {
        CT_Dxfs::default_instance_ = new CT_Dxfs();
    }
    return *CT_Dxfs::default_instance_;
    }

    bool CT_Dxfs::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void CT_Dxfs::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& CT_Dxfs::get_count_attr() const
    {    
    return m_count_attr;
    }


    // CT_Dxfs::ChildGroup_1
    CT_Dxfs::ChildGroup_1::ChildGroup_1()
    :m_has_dxf(false),
    m_dxf(NULL)
    {
    }
    bool CT_Dxfs::ChildGroup_1::has_dxf() const
    {    
    return m_has_dxf;
    }

    CT_Dxf* CT_Dxfs::ChildGroup_1::mutable_dxf()
    {    
    
    m_has_dxf = true;
    if (!m_dxf)
    {
        m_dxf = new CT_Dxf();
    }
    return m_dxf;
    }

    const CT_Dxf& CT_Dxfs::ChildGroup_1::get_dxf() const
    {    
    if (m_dxf)
    {
        return *m_dxf;
    }
    return CT_Dxf::default_instance();
    }

CT_Dxfs* CT_Dxfs::default_instance_ = NULL;

    // CT_Dxf
    CT_Dxf::CT_Dxf()
    :m_has_font(false),
    m_font(NULL),
    m_has_numFmt(false),
    m_numFmt(NULL),
    m_has_fill(false),
    m_fill(NULL),
    m_has_alignment(false),
    m_alignment(NULL),
    m_has_border(false),
    m_border(NULL),
    m_has_protection(false),
    m_protection(NULL),
    m_has_extLst(false),
    m_extLst(NULL)
    {
    }
    CT_Dxf::~CT_Dxf()
{
    clear();    }
    bool CT_Dxf::has_font() const
    {    
    return m_has_font;
    }

    CT_Font* CT_Dxf::mutable_font()
    {    
    m_has_font = true;
    if (!m_font)
    {
        m_font = new CT_Font();
    }
    return m_font;
    }

    const CT_Font& CT_Dxf::get_font() const
    {    
    if (m_font)
    {
        return *m_font;
    }
    return CT_Font::default_instance();
    }

    bool CT_Dxf::has_numFmt() const
    {    
    return m_has_numFmt;
    }

    CT_NumFmt* CT_Dxf::mutable_numFmt()
    {    
    m_has_numFmt = true;
    if (!m_numFmt)
    {
        m_numFmt = new CT_NumFmt();
    }
    return m_numFmt;
    }

    const CT_NumFmt& CT_Dxf::get_numFmt() const
    {    
    if (m_numFmt)
    {
        return *m_numFmt;
    }
    return CT_NumFmt::default_instance();
    }

    bool CT_Dxf::has_fill() const
    {    
    return m_has_fill;
    }

    CT_Fill* CT_Dxf::mutable_fill()
    {    
    m_has_fill = true;
    if (!m_fill)
    {
        m_fill = new CT_Fill();
    }
    return m_fill;
    }

    const CT_Fill& CT_Dxf::get_fill() const
    {    
    if (m_fill)
    {
        return *m_fill;
    }
    return CT_Fill::default_instance();
    }

    bool CT_Dxf::has_alignment() const
    {    
    return m_has_alignment;
    }

    CT_CellAlignment* CT_Dxf::mutable_alignment()
    {    
    m_has_alignment = true;
    if (!m_alignment)
    {
        m_alignment = new CT_CellAlignment();
    }
    return m_alignment;
    }

    const CT_CellAlignment& CT_Dxf::get_alignment() const
    {    
    if (m_alignment)
    {
        return *m_alignment;
    }
    return CT_CellAlignment::default_instance();
    }

    bool CT_Dxf::has_border() const
    {    
    return m_has_border;
    }

    CT_Border* CT_Dxf::mutable_border()
    {    
    m_has_border = true;
    if (!m_border)
    {
        m_border = new CT_Border();
    }
    return m_border;
    }

    const CT_Border& CT_Dxf::get_border() const
    {    
    if (m_border)
    {
        return *m_border;
    }
    return CT_Border::default_instance();
    }

    bool CT_Dxf::has_protection() const
    {    
    return m_has_protection;
    }

    CT_CellProtection* CT_Dxf::mutable_protection()
    {    
    m_has_protection = true;
    if (!m_protection)
    {
        m_protection = new CT_CellProtection();
    }
    return m_protection;
    }

    const CT_CellProtection& CT_Dxf::get_protection() const
    {    
    if (m_protection)
    {
        return *m_protection;
    }
    return CT_CellProtection::default_instance();
    }

    bool CT_Dxf::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* CT_Dxf::mutable_extLst()
    {    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& CT_Dxf::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

    void CT_Dxf::clear()
    {    }

    void CT_Dxf::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
            _outStream << ">";
            
    if (m_has_font)
    {
        m_font->toXmlElem("main:font", "", _outStream);;
    }
    
    if (m_has_numFmt)
    {
        m_numFmt->toXmlElem("main:numFmt", "", _outStream);;
    }
    
    if (m_has_fill)
    {
        m_fill->toXmlElem("main:fill", "", _outStream);;
    }
    
    if (m_has_alignment)
    {
        m_alignment->toXmlElem("main:alignment", "", _outStream);;
    }
    
    if (m_has_border)
    {
        m_border->toXmlElem("main:border", "", _outStream);;
    }
    
    if (m_has_protection)
    {
        m_protection->toXmlElem("main:protection", "", _outStream);;
    }
    
    if (m_has_extLst)
    {
        m_extLst->toXmlElem("main:extLst", "", _outStream);;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_Dxf& CT_Dxf::default_instance()
    {    
    if (!CT_Dxf::default_instance_)
    {
        CT_Dxf::default_instance_ = new CT_Dxf();
    }
    return *CT_Dxf::default_instance_;
    }

CT_Dxf* CT_Dxf::default_instance_ = NULL;

    // CT_Colors
    CT_Colors::CT_Colors()
    :m_has_indexedColors(false),
    m_indexedColors(NULL),
    m_has_mruColors(false),
    m_mruColors(NULL)
    {
    }
    CT_Colors::~CT_Colors()
{
    clear();    }
    bool CT_Colors::has_indexedColors() const
    {    
    return m_has_indexedColors;
    }

    CT_IndexedColors* CT_Colors::mutable_indexedColors()
    {    
    m_has_indexedColors = true;
    if (!m_indexedColors)
    {
        m_indexedColors = new CT_IndexedColors();
    }
    return m_indexedColors;
    }

    const CT_IndexedColors& CT_Colors::get_indexedColors() const
    {    
    if (m_indexedColors)
    {
        return *m_indexedColors;
    }
    return CT_IndexedColors::default_instance();
    }

    bool CT_Colors::has_mruColors() const
    {    
    return m_has_mruColors;
    }

    CT_MRUColors* CT_Colors::mutable_mruColors()
    {    
    m_has_mruColors = true;
    if (!m_mruColors)
    {
        m_mruColors = new CT_MRUColors();
    }
    return m_mruColors;
    }

    const CT_MRUColors& CT_Colors::get_mruColors() const
    {    
    if (m_mruColors)
    {
        return *m_mruColors;
    }
    return CT_MRUColors::default_instance();
    }

    void CT_Colors::clear()
    {    }

    void CT_Colors::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
            _outStream << ">";
            
    if (m_has_indexedColors)
    {
        m_indexedColors->toXmlElem("main:indexedColors", "", _outStream);;
    }
    
    if (m_has_mruColors)
    {
        m_mruColors->toXmlElem("main:mruColors", "", _outStream);;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_Colors& CT_Colors::default_instance()
    {    
    if (!CT_Colors::default_instance_)
    {
        CT_Colors::default_instance_ = new CT_Colors();
    }
    return *CT_Colors::default_instance_;
    }

CT_Colors* CT_Colors::default_instance_ = NULL;

    // CT_IndexedColors
    CT_IndexedColors::CT_IndexedColors()

    {
    }
    CT_IndexedColors::~CT_IndexedColors()
{
    clear();    }
    CT_RgbColor* CT_IndexedColors::add_rgbColor()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_RgbColor* pNewChild = pChildGroup->mutable_rgbColor();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_IndexedColors::clear()
    {    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_IndexedColors::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_rgbColor())
            {
                (*iter)->get_rgbColor().toXmlElem("main:rgbColor", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_IndexedColors& CT_IndexedColors::default_instance()
    {    
    if (!CT_IndexedColors::default_instance_)
    {
        CT_IndexedColors::default_instance_ = new CT_IndexedColors();
    }
    return *CT_IndexedColors::default_instance_;
    }


    // CT_IndexedColors::ChildGroup_1
    CT_IndexedColors::ChildGroup_1::ChildGroup_1()
    :m_has_rgbColor(false),
    m_rgbColor(NULL)
    {
    }
    bool CT_IndexedColors::ChildGroup_1::has_rgbColor() const
    {    
    return m_has_rgbColor;
    }

    CT_RgbColor* CT_IndexedColors::ChildGroup_1::mutable_rgbColor()
    {    
    
    m_has_rgbColor = true;
    if (!m_rgbColor)
    {
        m_rgbColor = new CT_RgbColor();
    }
    return m_rgbColor;
    }

    const CT_RgbColor& CT_IndexedColors::ChildGroup_1::get_rgbColor() const
    {    
    if (m_rgbColor)
    {
        return *m_rgbColor;
    }
    return CT_RgbColor::default_instance();
    }

CT_IndexedColors* CT_IndexedColors::default_instance_ = NULL;

    // CT_MRUColors
    CT_MRUColors::CT_MRUColors()

    {
    }
    CT_MRUColors::~CT_MRUColors()
{
    clear();    }
    CT_Color* CT_MRUColors::add_color()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Color* pNewChild = pChildGroup->mutable_color();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_MRUColors::clear()
    {    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_MRUColors::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_color())
            {
                (*iter)->get_color().toXmlElem("main:color", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_MRUColors& CT_MRUColors::default_instance()
    {    
    if (!CT_MRUColors::default_instance_)
    {
        CT_MRUColors::default_instance_ = new CT_MRUColors();
    }
    return *CT_MRUColors::default_instance_;
    }


    // CT_MRUColors::ChildGroup_1
    CT_MRUColors::ChildGroup_1::ChildGroup_1()
    :m_has_color(false),
    m_color(NULL)
    {
    }
    bool CT_MRUColors::ChildGroup_1::has_color() const
    {    
    return m_has_color;
    }

    CT_Color* CT_MRUColors::ChildGroup_1::mutable_color()
    {    
    
    m_has_color = true;
    if (!m_color)
    {
        m_color = new CT_Color();
    }
    return m_color;
    }

    const CT_Color& CT_MRUColors::ChildGroup_1::get_color() const
    {    
    if (m_color)
    {
        return *m_color;
    }
    return CT_Color::default_instance();
    }

CT_MRUColors* CT_MRUColors::default_instance_ = NULL;

    // CT_RgbColor
    CT_RgbColor::CT_RgbColor()
    :m_has_rgb_attr(false),
    m_rgb_attr(NULL)
    {
    }
    CT_RgbColor::~CT_RgbColor()
{
    clear();    }
    void CT_RgbColor::clear()
    {    
    m_has_rgb_attr = false;
    
    if (m_rgb_attr)
    {
        delete m_rgb_attr;
        m_rgb_attr = NULL;
    }
    
    }

    void CT_RgbColor::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_rgb_attr)
    {
        m_rgb_attr->toXmlAttr("rgb", _outStream);
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_RgbColor& CT_RgbColor::default_instance()
    {    
    if (!CT_RgbColor::default_instance_)
    {
        CT_RgbColor::default_instance_ = new CT_RgbColor();
    }
    return *CT_RgbColor::default_instance_;
    }

    bool CT_RgbColor::has_rgb_attr() const
    {    
    return m_has_rgb_attr;
    }

    void CT_RgbColor::set_rgb_attr(const ST_UnsignedIntHex& _rgb_attr)
    {    
    m_has_rgb_attr = true;
    m_rgb_attr = new ST_UnsignedIntHex(_rgb_attr);
    }

    const ST_UnsignedIntHex& CT_RgbColor::get_rgb_attr() const
    {    
    if (m_rgb_attr)
    {
        return *m_rgb_attr;
    }
    return ST_UnsignedIntHex::default_instance();
    }

CT_RgbColor* CT_RgbColor::default_instance_ = NULL;

    // CT_TableStyles
    CT_TableStyles::CT_TableStyles()
    :m_has_count_attr(false),
    m_count_attr(0),
    m_has_defaultTableStyle_attr(false),
    m_defaultTableStyle_attr(""),
    m_has_defaultPivotStyle_attr(false),
    m_defaultPivotStyle_attr("")
    {
    }
    CT_TableStyles::~CT_TableStyles()
{
    clear();    }
    CT_TableStyle* CT_TableStyles::add_tableStyle()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_TableStyle* pNewChild = pChildGroup->mutable_tableStyle();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_TableStyles::clear()
    {    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    m_has_defaultTableStyle_attr = false;
    m_defaultTableStyle_attr.clear();
    
    m_has_defaultPivotStyle_attr = false;
    m_defaultPivotStyle_attr.clear();
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_TableStyles::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
    
    if (m_has_defaultTableStyle_attr)
    {
        _outStream << " " << "defaultTableStyle" << "=\"" << m_defaultTableStyle_attr << "\"";
    }
    
    
    if (m_has_defaultPivotStyle_attr)
    {
        _outStream << " " << "defaultPivotStyle" << "=\"" << m_defaultPivotStyle_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_tableStyle())
            {
                (*iter)->get_tableStyle().toXmlElem("main:tableStyle", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_TableStyles& CT_TableStyles::default_instance()
    {    
    if (!CT_TableStyles::default_instance_)
    {
        CT_TableStyles::default_instance_ = new CT_TableStyles();
    }
    return *CT_TableStyles::default_instance_;
    }

    bool CT_TableStyles::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void CT_TableStyles::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& CT_TableStyles::get_count_attr() const
    {    
    return m_count_attr;
    }

    bool CT_TableStyles::has_defaultTableStyle_attr() const
    {    
    return m_has_defaultTableStyle_attr;
    }

    void CT_TableStyles::set_defaultTableStyle_attr(const XSD::string_& _defaultTableStyle_attr)
    {    
    m_has_defaultTableStyle_attr = true;
    m_defaultTableStyle_attr = _defaultTableStyle_attr;
    }

    const XSD::string_& CT_TableStyles::get_defaultTableStyle_attr() const
    {    
    return m_defaultTableStyle_attr;
    }

    bool CT_TableStyles::has_defaultPivotStyle_attr() const
    {    
    return m_has_defaultPivotStyle_attr;
    }

    void CT_TableStyles::set_defaultPivotStyle_attr(const XSD::string_& _defaultPivotStyle_attr)
    {    
    m_has_defaultPivotStyle_attr = true;
    m_defaultPivotStyle_attr = _defaultPivotStyle_attr;
    }

    const XSD::string_& CT_TableStyles::get_defaultPivotStyle_attr() const
    {    
    return m_defaultPivotStyle_attr;
    }


    // CT_TableStyles::ChildGroup_1
    CT_TableStyles::ChildGroup_1::ChildGroup_1()
    :m_has_tableStyle(false),
    m_tableStyle(NULL)
    {
    }
    bool CT_TableStyles::ChildGroup_1::has_tableStyle() const
    {    
    return m_has_tableStyle;
    }

    CT_TableStyle* CT_TableStyles::ChildGroup_1::mutable_tableStyle()
    {    
    
    m_has_tableStyle = true;
    if (!m_tableStyle)
    {
        m_tableStyle = new CT_TableStyle();
    }
    return m_tableStyle;
    }

    const CT_TableStyle& CT_TableStyles::ChildGroup_1::get_tableStyle() const
    {    
    if (m_tableStyle)
    {
        return *m_tableStyle;
    }
    return CT_TableStyle::default_instance();
    }

CT_TableStyles* CT_TableStyles::default_instance_ = NULL;

    // CT_TableStyle
    CT_TableStyle::CT_TableStyle()
    :m_has_name_attr(false),
    m_name_attr(""),
    m_has_pivot_attr(false),
    m_pivot_attr(false),
    m_has_table_attr(false),
    m_table_attr(false),
    m_has_count_attr(false),
    m_count_attr(0)
    {
    }
    CT_TableStyle::~CT_TableStyle()
{
    clear();    }
    CT_TableStyleElement* CT_TableStyle::add_tableStyleElement()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_TableStyleElement* pNewChild = pChildGroup->mutable_tableStyleElement();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_TableStyle::clear()
    {    
    m_has_name_attr = false;
    m_name_attr.clear();
    
    m_has_pivot_attr = false;
    m_pivot_attr = false;
    
    m_has_table_attr = false;
    m_table_attr = false;
    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_TableStyle::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_name_attr)
    {
        _outStream << " " << "name" << "=\"" << m_name_attr << "\"";
    }
    
    
    if (m_has_pivot_attr)
    {
        _outStream << " " << "pivot" << "=\"" << XSD::XMLBooleanStr(m_pivot_attr) << "\"";
    }
    
    
    if (m_has_table_attr)
    {
        _outStream << " " << "table" << "=\"" << XSD::XMLBooleanStr(m_table_attr) << "\"";
    }
    
    
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_tableStyleElement())
            {
                (*iter)->get_tableStyleElement().toXmlElem("main:tableStyleElement", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_TableStyle& CT_TableStyle::default_instance()
    {    
    if (!CT_TableStyle::default_instance_)
    {
        CT_TableStyle::default_instance_ = new CT_TableStyle();
    }
    return *CT_TableStyle::default_instance_;
    }

    bool CT_TableStyle::has_name_attr() const
    {    
    return m_has_name_attr;
    }

    void CT_TableStyle::set_name_attr(const XSD::string_& _name_attr)
    {    
    m_has_name_attr = true;
    m_name_attr = _name_attr;
    }

    const XSD::string_& CT_TableStyle::get_name_attr() const
    {    
    return m_name_attr;
    }

    bool CT_TableStyle::has_pivot_attr() const
    {    
    return m_has_pivot_attr;
    }

    void CT_TableStyle::set_pivot_attr(const XSD::boolean_& _pivot_attr)
    {    
    m_has_pivot_attr = true;
    m_pivot_attr = _pivot_attr;
    }

    const XSD::boolean_& CT_TableStyle::get_pivot_attr() const
    {    
    return m_pivot_attr;
    }

    bool CT_TableStyle::has_table_attr() const
    {    
    return m_has_table_attr;
    }

    void CT_TableStyle::set_table_attr(const XSD::boolean_& _table_attr)
    {    
    m_has_table_attr = true;
    m_table_attr = _table_attr;
    }

    const XSD::boolean_& CT_TableStyle::get_table_attr() const
    {    
    return m_table_attr;
    }

    bool CT_TableStyle::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void CT_TableStyle::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& CT_TableStyle::get_count_attr() const
    {    
    return m_count_attr;
    }


    // CT_TableStyle::ChildGroup_1
    CT_TableStyle::ChildGroup_1::ChildGroup_1()
    :m_has_tableStyleElement(false),
    m_tableStyleElement(NULL)
    {
    }
    bool CT_TableStyle::ChildGroup_1::has_tableStyleElement() const
    {    
    return m_has_tableStyleElement;
    }

    CT_TableStyleElement* CT_TableStyle::ChildGroup_1::mutable_tableStyleElement()
    {    
    
    m_has_tableStyleElement = true;
    if (!m_tableStyleElement)
    {
        m_tableStyleElement = new CT_TableStyleElement();
    }
    return m_tableStyleElement;
    }

    const CT_TableStyleElement& CT_TableStyle::ChildGroup_1::get_tableStyleElement() const
    {    
    if (m_tableStyleElement)
    {
        return *m_tableStyleElement;
    }
    return CT_TableStyleElement::default_instance();
    }

CT_TableStyle* CT_TableStyle::default_instance_ = NULL;

    // CT_TableStyleElement
    CT_TableStyleElement::CT_TableStyleElement()
    :m_has_type_attr(false),
    m_type_attr(NULL),
    m_has_size_attr(false),
    m_size_attr(0),
    m_has_dxfId_attr(false),
    m_dxfId_attr(NULL)
    {
    }
    CT_TableStyleElement::~CT_TableStyleElement()
{
    clear();    }
    void CT_TableStyleElement::clear()
    {    
    m_has_type_attr = false;
    
    if (m_type_attr)
    {
        delete m_type_attr;
        m_type_attr = NULL;
    }
    
    
    m_has_size_attr = false;
    m_size_attr = 0;
    
    m_has_dxfId_attr = false;
    
    if (m_dxfId_attr)
    {
        delete m_dxfId_attr;
        m_dxfId_attr = NULL;
    }
    
    }

    void CT_TableStyleElement::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_type_attr)
    {
        m_type_attr->toXmlAttr("type", _outStream);
    }
    
    
    if (m_has_size_attr)
    {
        _outStream << " " << "size" << "=\"" << m_size_attr << "\"";
    }
    
    
    if (m_has_dxfId_attr)
    {
        m_dxfId_attr->toXmlAttr("dxfId", _outStream);
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_TableStyleElement& CT_TableStyleElement::default_instance()
    {    
    if (!CT_TableStyleElement::default_instance_)
    {
        CT_TableStyleElement::default_instance_ = new CT_TableStyleElement();
    }
    return *CT_TableStyleElement::default_instance_;
    }

    bool CT_TableStyleElement::has_type_attr() const
    {    
    return m_has_type_attr;
    }

    void CT_TableStyleElement::set_type_attr(const ST_TableStyleType& _type_attr)
    {    
    m_has_type_attr = true;
    m_type_attr = new ST_TableStyleType(_type_attr);
    }

    const ST_TableStyleType& CT_TableStyleElement::get_type_attr() const
    {    
    if (m_type_attr)
    {
        return *m_type_attr;
    }
    return ST_TableStyleType::default_instance();
    }

    bool CT_TableStyleElement::has_size_attr() const
    {    
    return m_has_size_attr;
    }

    void CT_TableStyleElement::set_size_attr(const XSD::unsignedInt_& _size_attr)
    {    
    m_has_size_attr = true;
    m_size_attr = _size_attr;
    }

    const XSD::unsignedInt_& CT_TableStyleElement::get_size_attr() const
    {    
    return m_size_attr;
    }

    bool CT_TableStyleElement::has_dxfId_attr() const
    {    
    return m_has_dxfId_attr;
    }

    void CT_TableStyleElement::set_dxfId_attr(const ST_DxfId& _dxfId_attr)
    {    
    m_has_dxfId_attr = true;
    m_dxfId_attr = new ST_DxfId(_dxfId_attr);
    }

    const ST_DxfId& CT_TableStyleElement::get_dxfId_attr() const
    {    
    if (m_dxfId_attr)
    {
        return *m_dxfId_attr;
    }
    return ST_DxfId::default_instance();
    }

CT_TableStyleElement* CT_TableStyleElement::default_instance_ = NULL;

    // CT_BooleanProperty
    CT_BooleanProperty::CT_BooleanProperty()
    :m_has_val_attr(false),
    m_val_attr(false)
    {
    }
    CT_BooleanProperty::~CT_BooleanProperty()
{
    clear();    }
    void CT_BooleanProperty::clear()
    {    
    m_has_val_attr = false;
    m_val_attr = false;
    }

    void CT_BooleanProperty::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_val_attr)
    {
        _outStream << " " << "val" << "=\"" << XSD::XMLBooleanStr(m_val_attr) << "\"";
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_BooleanProperty& CT_BooleanProperty::default_instance()
    {    
    if (!CT_BooleanProperty::default_instance_)
    {
        CT_BooleanProperty::default_instance_ = new CT_BooleanProperty();
    }
    return *CT_BooleanProperty::default_instance_;
    }

    bool CT_BooleanProperty::has_val_attr() const
    {    
    return m_has_val_attr;
    }

    void CT_BooleanProperty::set_val_attr(const XSD::boolean_& _val_attr)
    {    
    m_has_val_attr = true;
    m_val_attr = _val_attr;
    }

    const XSD::boolean_& CT_BooleanProperty::get_val_attr() const
    {    
    return m_val_attr;
    }

CT_BooleanProperty* CT_BooleanProperty::default_instance_ = NULL;

    // CT_FontSize
    CT_FontSize::CT_FontSize()
    :m_has_val_attr(false),
    m_val_attr(0)
    {
    }
    CT_FontSize::~CT_FontSize()
{
    clear();    }
    void CT_FontSize::clear()
    {    
    m_has_val_attr = false;
    m_val_attr = 0;
    }

    void CT_FontSize::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_val_attr)
    {
        _outStream << " " << "val" << "=\"" << m_val_attr << "\"";
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_FontSize& CT_FontSize::default_instance()
    {    
    if (!CT_FontSize::default_instance_)
    {
        CT_FontSize::default_instance_ = new CT_FontSize();
    }
    return *CT_FontSize::default_instance_;
    }

    bool CT_FontSize::has_val_attr() const
    {    
    return m_has_val_attr;
    }

    void CT_FontSize::set_val_attr(const XSD::double_& _val_attr)
    {    
    m_has_val_attr = true;
    m_val_attr = _val_attr;
    }

    const XSD::double_& CT_FontSize::get_val_attr() const
    {    
    return m_val_attr;
    }

CT_FontSize* CT_FontSize::default_instance_ = NULL;

    // CT_IntProperty
    CT_IntProperty::CT_IntProperty()
    :m_has_val_attr(false),
    m_val_attr(0)
    {
    }
    CT_IntProperty::~CT_IntProperty()
{
    clear();    }
    void CT_IntProperty::clear()
    {    
    m_has_val_attr = false;
    m_val_attr = 0;
    }

    void CT_IntProperty::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_val_attr)
    {
        _outStream << " " << "val" << "=\"" << m_val_attr << "\"";
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_IntProperty& CT_IntProperty::default_instance()
    {    
    if (!CT_IntProperty::default_instance_)
    {
        CT_IntProperty::default_instance_ = new CT_IntProperty();
    }
    return *CT_IntProperty::default_instance_;
    }

    bool CT_IntProperty::has_val_attr() const
    {    
    return m_has_val_attr;
    }

    void CT_IntProperty::set_val_attr(const XSD::int_& _val_attr)
    {    
    m_has_val_attr = true;
    m_val_attr = _val_attr;
    }

    const XSD::int_& CT_IntProperty::get_val_attr() const
    {    
    return m_val_attr;
    }

CT_IntProperty* CT_IntProperty::default_instance_ = NULL;

    // CT_FontName
    CT_FontName::CT_FontName()
    :m_has_val_attr(false),
    m_val_attr(NULL)
    {
    }
    CT_FontName::~CT_FontName()
{
    clear();    }
    void CT_FontName::clear()
    {    
    m_has_val_attr = false;
    
    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }
    
    }

    void CT_FontName::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("val", _outStream);
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_FontName& CT_FontName::default_instance()
    {    
    if (!CT_FontName::default_instance_)
    {
        CT_FontName::default_instance_ = new CT_FontName();
    }
    return *CT_FontName::default_instance_;
    }

    bool CT_FontName::has_val_attr() const
    {    
    return m_has_val_attr;
    }

    void CT_FontName::set_val_attr(const ns_s::ST_Xstring& _val_attr)
    {    
    m_has_val_attr = true;
    m_val_attr = new ns_s::ST_Xstring(_val_attr);
    }

    const ns_s::ST_Xstring& CT_FontName::get_val_attr() const
    {    
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

CT_FontName* CT_FontName::default_instance_ = NULL;

    // CT_VerticalAlignFontProperty
    CT_VerticalAlignFontProperty::CT_VerticalAlignFontProperty()
    :m_has_val_attr(false),
    m_val_attr(NULL)
    {
    }
    CT_VerticalAlignFontProperty::~CT_VerticalAlignFontProperty()
{
    clear();    }
    void CT_VerticalAlignFontProperty::clear()
    {    
    m_has_val_attr = false;
    
    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }
    
    }

    void CT_VerticalAlignFontProperty::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("val", _outStream);
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_VerticalAlignFontProperty& CT_VerticalAlignFontProperty::default_instance()
    {    
    if (!CT_VerticalAlignFontProperty::default_instance_)
    {
        CT_VerticalAlignFontProperty::default_instance_ = new CT_VerticalAlignFontProperty();
    }
    return *CT_VerticalAlignFontProperty::default_instance_;
    }

    bool CT_VerticalAlignFontProperty::has_val_attr() const
    {    
    return m_has_val_attr;
    }

    void CT_VerticalAlignFontProperty::set_val_attr(const ns_s::ST_VerticalAlignRun& _val_attr)
    {    
    m_has_val_attr = true;
    m_val_attr = new ns_s::ST_VerticalAlignRun(_val_attr);
    }

    const ns_s::ST_VerticalAlignRun& CT_VerticalAlignFontProperty::get_val_attr() const
    {    
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ns_s::ST_VerticalAlignRun::default_instance();
    }

CT_VerticalAlignFontProperty* CT_VerticalAlignFontProperty::default_instance_ = NULL;

    // CT_FontScheme
    CT_FontScheme::CT_FontScheme()
    :m_has_val_attr(false),
    m_val_attr(NULL)
    {
    }
    CT_FontScheme::~CT_FontScheme()
{
    clear();    }
    void CT_FontScheme::clear()
    {    
    m_has_val_attr = false;
    
    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }
    
    }

    void CT_FontScheme::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("val", _outStream);
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_FontScheme& CT_FontScheme::default_instance()
    {    
    if (!CT_FontScheme::default_instance_)
    {
        CT_FontScheme::default_instance_ = new CT_FontScheme();
    }
    return *CT_FontScheme::default_instance_;
    }

    bool CT_FontScheme::has_val_attr() const
    {    
    return m_has_val_attr;
    }

    void CT_FontScheme::set_val_attr(const ST_FontScheme& _val_attr)
    {    
    m_has_val_attr = true;
    m_val_attr = new ST_FontScheme(_val_attr);
    }

    const ST_FontScheme& CT_FontScheme::get_val_attr() const
    {    
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ST_FontScheme::default_instance();
    }

CT_FontScheme* CT_FontScheme::default_instance_ = NULL;

    // CT_UnderlineProperty
    CT_UnderlineProperty::CT_UnderlineProperty()
    :m_has_val_attr(false),
    m_val_attr(NULL)
    {
    }
    CT_UnderlineProperty::~CT_UnderlineProperty()
{
    clear();    }
    void CT_UnderlineProperty::clear()
    {    
    m_has_val_attr = false;
    
    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }
    
    }

    void CT_UnderlineProperty::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("val", _outStream);
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_UnderlineProperty& CT_UnderlineProperty::default_instance()
    {    
    if (!CT_UnderlineProperty::default_instance_)
    {
        CT_UnderlineProperty::default_instance_ = new CT_UnderlineProperty();
    }
    return *CT_UnderlineProperty::default_instance_;
    }

    bool CT_UnderlineProperty::has_val_attr() const
    {    
    return m_has_val_attr;
    }

    void CT_UnderlineProperty::set_val_attr(const ST_UnderlineValues& _val_attr)
    {    
    m_has_val_attr = true;
    m_val_attr = new ST_UnderlineValues(_val_attr);
    }

    const ST_UnderlineValues& CT_UnderlineProperty::get_val_attr() const
    {    
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ST_UnderlineValues::default_instance();
    }

CT_UnderlineProperty* CT_UnderlineProperty::default_instance_ = NULL;

    // CT_Font
    CT_Font::CT_Font()

    {
    }
    CT_Font::~CT_Font()
{
    clear();    }
    CT_FontName* CT_Font::add_name()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_FontName* pNewChild = pChildGroup->mutable_name();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_IntProperty* CT_Font::add_charset()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_IntProperty* pNewChild = pChildGroup->mutable_charset();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_FontFamily* CT_Font::add_family()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_FontFamily* pNewChild = pChildGroup->mutable_family();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_BooleanProperty* CT_Font::add_b()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_BooleanProperty* pNewChild = pChildGroup->mutable_b();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_BooleanProperty* CT_Font::add_i()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_BooleanProperty* pNewChild = pChildGroup->mutable_i();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_BooleanProperty* CT_Font::add_strike()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_BooleanProperty* pNewChild = pChildGroup->mutable_strike();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_BooleanProperty* CT_Font::add_outline()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_BooleanProperty* pNewChild = pChildGroup->mutable_outline();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_BooleanProperty* CT_Font::add_shadow()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_BooleanProperty* pNewChild = pChildGroup->mutable_shadow();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_BooleanProperty* CT_Font::add_condense()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_BooleanProperty* pNewChild = pChildGroup->mutable_condense();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_BooleanProperty* CT_Font::add_extend()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_BooleanProperty* pNewChild = pChildGroup->mutable_extend();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_Color* CT_Font::add_color()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Color* pNewChild = pChildGroup->mutable_color();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_FontSize* CT_Font::add_sz()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_FontSize* pNewChild = pChildGroup->mutable_sz();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_UnderlineProperty* CT_Font::add_u()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_UnderlineProperty* pNewChild = pChildGroup->mutable_u();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_VerticalAlignFontProperty* CT_Font::add_vertAlign()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_VerticalAlignFontProperty* pNewChild = pChildGroup->mutable_vertAlign();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_FontScheme* CT_Font::add_scheme()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_FontScheme* pNewChild = pChildGroup->mutable_scheme();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_Font::clear()
    {    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_Font::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_name())
            {
                (*iter)->get_name().toXmlElem("main:name", "", _outStream);
            }
            else if ((*iter)->has_charset())
            {
                (*iter)->get_charset().toXmlElem("main:charset", "", _outStream);
            }
            else if ((*iter)->has_family())
            {
                (*iter)->get_family().toXmlElem("main:family", "", _outStream);
            }
            else if ((*iter)->has_b())
            {
                (*iter)->get_b().toXmlElem("main:b", "", _outStream);
            }
            else if ((*iter)->has_i())
            {
                (*iter)->get_i().toXmlElem("main:i", "", _outStream);
            }
            else if ((*iter)->has_strike())
            {
                (*iter)->get_strike().toXmlElem("main:strike", "", _outStream);
            }
            else if ((*iter)->has_outline())
            {
                (*iter)->get_outline().toXmlElem("main:outline", "", _outStream);
            }
            else if ((*iter)->has_shadow())
            {
                (*iter)->get_shadow().toXmlElem("main:shadow", "", _outStream);
            }
            else if ((*iter)->has_condense())
            {
                (*iter)->get_condense().toXmlElem("main:condense", "", _outStream);
            }
            else if ((*iter)->has_extend())
            {
                (*iter)->get_extend().toXmlElem("main:extend", "", _outStream);
            }
            else if ((*iter)->has_color())
            {
                (*iter)->get_color().toXmlElem("main:color", "", _outStream);
            }
            else if ((*iter)->has_sz())
            {
                (*iter)->get_sz().toXmlElem("main:sz", "", _outStream);
            }
            else if ((*iter)->has_u())
            {
                (*iter)->get_u().toXmlElem("main:u", "", _outStream);
            }
            else if ((*iter)->has_vertAlign())
            {
                (*iter)->get_vertAlign().toXmlElem("main:vertAlign", "", _outStream);
            }
            else if ((*iter)->has_scheme())
            {
                (*iter)->get_scheme().toXmlElem("main:scheme", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_Font& CT_Font::default_instance()
    {    
    if (!CT_Font::default_instance_)
    {
        CT_Font::default_instance_ = new CT_Font();
    }
    return *CT_Font::default_instance_;
    }


    // CT_Font::ChildGroup_1
    CT_Font::ChildGroup_1::ChildGroup_1()
    :m_has_name(false),
    m_name(NULL),
    m_has_charset(false),
    m_charset(NULL),
    m_has_family(false),
    m_family(NULL),
    m_has_b(false),
    m_b(NULL),
    m_has_i(false),
    m_i(NULL),
    m_has_strike(false),
    m_strike(NULL),
    m_has_outline(false),
    m_outline(NULL),
    m_has_shadow(false),
    m_shadow(NULL),
    m_has_condense(false),
    m_condense(NULL),
    m_has_extend(false),
    m_extend(NULL),
    m_has_color(false),
    m_color(NULL),
    m_has_sz(false),
    m_sz(NULL),
    m_has_u(false),
    m_u(NULL),
    m_has_vertAlign(false),
    m_vertAlign(NULL),
    m_has_scheme(false),
    m_scheme(NULL)
    {
    }
    bool CT_Font::ChildGroup_1::has_name() const
    {    
    return m_has_name;
    }

    CT_FontName* CT_Font::ChildGroup_1::mutable_name()
    {    
    
    m_has_charset = false;
    
    if (m_charset)
    {
        delete m_charset;
        m_charset = NULL;
    }
    ;
    
    m_has_family = false;
    
    if (m_family)
    {
        delete m_family;
        m_family = NULL;
    }
    ;
    
    m_has_b = false;
    
    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;
    
    m_has_i = false;
    
    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;
    
    m_has_strike = false;
    
    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;
    
    m_has_outline = false;
    
    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;
    
    m_has_shadow = false;
    
    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;
    
    m_has_condense = false;
    
    if (m_condense)
    {
        delete m_condense;
        m_condense = NULL;
    }
    ;
    
    m_has_extend = false;
    
    if (m_extend)
    {
        delete m_extend;
        m_extend = NULL;
    }
    ;
    
    m_has_color = false;
    
    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;
    
    m_has_sz = false;
    
    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;
    
    m_has_u = false;
    
    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;
    
    m_has_vertAlign = false;
    
    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;
    
    m_has_scheme = false;
    
    if (m_scheme)
    {
        delete m_scheme;
        m_scheme = NULL;
    }
    ;
    
    m_has_name = true;
    if (!m_name)
    {
        m_name = new CT_FontName();
    }
    return m_name;
    }

    const CT_FontName& CT_Font::ChildGroup_1::get_name() const
    {    
    if (m_name)
    {
        return *m_name;
    }
    return CT_FontName::default_instance();
    }

    bool CT_Font::ChildGroup_1::has_charset() const
    {    
    return m_has_charset;
    }

    CT_IntProperty* CT_Font::ChildGroup_1::mutable_charset()
    {    
    
    m_has_name = false;
    
    if (m_name)
    {
        delete m_name;
        m_name = NULL;
    }
    ;
    
    m_has_family = false;
    
    if (m_family)
    {
        delete m_family;
        m_family = NULL;
    }
    ;
    
    m_has_b = false;
    
    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;
    
    m_has_i = false;
    
    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;
    
    m_has_strike = false;
    
    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;
    
    m_has_outline = false;
    
    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;
    
    m_has_shadow = false;
    
    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;
    
    m_has_condense = false;
    
    if (m_condense)
    {
        delete m_condense;
        m_condense = NULL;
    }
    ;
    
    m_has_extend = false;
    
    if (m_extend)
    {
        delete m_extend;
        m_extend = NULL;
    }
    ;
    
    m_has_color = false;
    
    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;
    
    m_has_sz = false;
    
    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;
    
    m_has_u = false;
    
    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;
    
    m_has_vertAlign = false;
    
    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;
    
    m_has_scheme = false;
    
    if (m_scheme)
    {
        delete m_scheme;
        m_scheme = NULL;
    }
    ;
    
    m_has_charset = true;
    if (!m_charset)
    {
        m_charset = new CT_IntProperty();
    }
    return m_charset;
    }

    const CT_IntProperty& CT_Font::ChildGroup_1::get_charset() const
    {    
    if (m_charset)
    {
        return *m_charset;
    }
    return CT_IntProperty::default_instance();
    }

    bool CT_Font::ChildGroup_1::has_family() const
    {    
    return m_has_family;
    }

    CT_FontFamily* CT_Font::ChildGroup_1::mutable_family()
    {    
    
    m_has_name = false;
    
    if (m_name)
    {
        delete m_name;
        m_name = NULL;
    }
    ;
    
    m_has_charset = false;
    
    if (m_charset)
    {
        delete m_charset;
        m_charset = NULL;
    }
    ;
    
    m_has_b = false;
    
    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;
    
    m_has_i = false;
    
    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;
    
    m_has_strike = false;
    
    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;
    
    m_has_outline = false;
    
    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;
    
    m_has_shadow = false;
    
    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;
    
    m_has_condense = false;
    
    if (m_condense)
    {
        delete m_condense;
        m_condense = NULL;
    }
    ;
    
    m_has_extend = false;
    
    if (m_extend)
    {
        delete m_extend;
        m_extend = NULL;
    }
    ;
    
    m_has_color = false;
    
    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;
    
    m_has_sz = false;
    
    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;
    
    m_has_u = false;
    
    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;
    
    m_has_vertAlign = false;
    
    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;
    
    m_has_scheme = false;
    
    if (m_scheme)
    {
        delete m_scheme;
        m_scheme = NULL;
    }
    ;
    
    m_has_family = true;
    if (!m_family)
    {
        m_family = new CT_FontFamily();
    }
    return m_family;
    }

    const CT_FontFamily& CT_Font::ChildGroup_1::get_family() const
    {    
    if (m_family)
    {
        return *m_family;
    }
    return CT_FontFamily::default_instance();
    }

    bool CT_Font::ChildGroup_1::has_b() const
    {    
    return m_has_b;
    }

    CT_BooleanProperty* CT_Font::ChildGroup_1::mutable_b()
    {    
    
    m_has_name = false;
    
    if (m_name)
    {
        delete m_name;
        m_name = NULL;
    }
    ;
    
    m_has_charset = false;
    
    if (m_charset)
    {
        delete m_charset;
        m_charset = NULL;
    }
    ;
    
    m_has_family = false;
    
    if (m_family)
    {
        delete m_family;
        m_family = NULL;
    }
    ;
    
    m_has_i = false;
    
    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;
    
    m_has_strike = false;
    
    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;
    
    m_has_outline = false;
    
    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;
    
    m_has_shadow = false;
    
    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;
    
    m_has_condense = false;
    
    if (m_condense)
    {
        delete m_condense;
        m_condense = NULL;
    }
    ;
    
    m_has_extend = false;
    
    if (m_extend)
    {
        delete m_extend;
        m_extend = NULL;
    }
    ;
    
    m_has_color = false;
    
    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;
    
    m_has_sz = false;
    
    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;
    
    m_has_u = false;
    
    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;
    
    m_has_vertAlign = false;
    
    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;
    
    m_has_scheme = false;
    
    if (m_scheme)
    {
        delete m_scheme;
        m_scheme = NULL;
    }
    ;
    
    m_has_b = true;
    if (!m_b)
    {
        m_b = new CT_BooleanProperty();
    }
    return m_b;
    }

    const CT_BooleanProperty& CT_Font::ChildGroup_1::get_b() const
    {    
    if (m_b)
    {
        return *m_b;
    }
    return CT_BooleanProperty::default_instance();
    }

    bool CT_Font::ChildGroup_1::has_i() const
    {    
    return m_has_i;
    }

    CT_BooleanProperty* CT_Font::ChildGroup_1::mutable_i()
    {    
    
    m_has_name = false;
    
    if (m_name)
    {
        delete m_name;
        m_name = NULL;
    }
    ;
    
    m_has_charset = false;
    
    if (m_charset)
    {
        delete m_charset;
        m_charset = NULL;
    }
    ;
    
    m_has_family = false;
    
    if (m_family)
    {
        delete m_family;
        m_family = NULL;
    }
    ;
    
    m_has_b = false;
    
    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;
    
    m_has_strike = false;
    
    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;
    
    m_has_outline = false;
    
    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;
    
    m_has_shadow = false;
    
    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;
    
    m_has_condense = false;
    
    if (m_condense)
    {
        delete m_condense;
        m_condense = NULL;
    }
    ;
    
    m_has_extend = false;
    
    if (m_extend)
    {
        delete m_extend;
        m_extend = NULL;
    }
    ;
    
    m_has_color = false;
    
    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;
    
    m_has_sz = false;
    
    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;
    
    m_has_u = false;
    
    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;
    
    m_has_vertAlign = false;
    
    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;
    
    m_has_scheme = false;
    
    if (m_scheme)
    {
        delete m_scheme;
        m_scheme = NULL;
    }
    ;
    
    m_has_i = true;
    if (!m_i)
    {
        m_i = new CT_BooleanProperty();
    }
    return m_i;
    }

    const CT_BooleanProperty& CT_Font::ChildGroup_1::get_i() const
    {    
    if (m_i)
    {
        return *m_i;
    }
    return CT_BooleanProperty::default_instance();
    }

    bool CT_Font::ChildGroup_1::has_strike() const
    {    
    return m_has_strike;
    }

    CT_BooleanProperty* CT_Font::ChildGroup_1::mutable_strike()
    {    
    
    m_has_name = false;
    
    if (m_name)
    {
        delete m_name;
        m_name = NULL;
    }
    ;
    
    m_has_charset = false;
    
    if (m_charset)
    {
        delete m_charset;
        m_charset = NULL;
    }
    ;
    
    m_has_family = false;
    
    if (m_family)
    {
        delete m_family;
        m_family = NULL;
    }
    ;
    
    m_has_b = false;
    
    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;
    
    m_has_i = false;
    
    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;
    
    m_has_outline = false;
    
    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;
    
    m_has_shadow = false;
    
    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;
    
    m_has_condense = false;
    
    if (m_condense)
    {
        delete m_condense;
        m_condense = NULL;
    }
    ;
    
    m_has_extend = false;
    
    if (m_extend)
    {
        delete m_extend;
        m_extend = NULL;
    }
    ;
    
    m_has_color = false;
    
    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;
    
    m_has_sz = false;
    
    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;
    
    m_has_u = false;
    
    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;
    
    m_has_vertAlign = false;
    
    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;
    
    m_has_scheme = false;
    
    if (m_scheme)
    {
        delete m_scheme;
        m_scheme = NULL;
    }
    ;
    
    m_has_strike = true;
    if (!m_strike)
    {
        m_strike = new CT_BooleanProperty();
    }
    return m_strike;
    }

    const CT_BooleanProperty& CT_Font::ChildGroup_1::get_strike() const
    {    
    if (m_strike)
    {
        return *m_strike;
    }
    return CT_BooleanProperty::default_instance();
    }

    bool CT_Font::ChildGroup_1::has_outline() const
    {    
    return m_has_outline;
    }

    CT_BooleanProperty* CT_Font::ChildGroup_1::mutable_outline()
    {    
    
    m_has_name = false;
    
    if (m_name)
    {
        delete m_name;
        m_name = NULL;
    }
    ;
    
    m_has_charset = false;
    
    if (m_charset)
    {
        delete m_charset;
        m_charset = NULL;
    }
    ;
    
    m_has_family = false;
    
    if (m_family)
    {
        delete m_family;
        m_family = NULL;
    }
    ;
    
    m_has_b = false;
    
    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;
    
    m_has_i = false;
    
    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;
    
    m_has_strike = false;
    
    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;
    
    m_has_shadow = false;
    
    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;
    
    m_has_condense = false;
    
    if (m_condense)
    {
        delete m_condense;
        m_condense = NULL;
    }
    ;
    
    m_has_extend = false;
    
    if (m_extend)
    {
        delete m_extend;
        m_extend = NULL;
    }
    ;
    
    m_has_color = false;
    
    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;
    
    m_has_sz = false;
    
    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;
    
    m_has_u = false;
    
    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;
    
    m_has_vertAlign = false;
    
    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;
    
    m_has_scheme = false;
    
    if (m_scheme)
    {
        delete m_scheme;
        m_scheme = NULL;
    }
    ;
    
    m_has_outline = true;
    if (!m_outline)
    {
        m_outline = new CT_BooleanProperty();
    }
    return m_outline;
    }

    const CT_BooleanProperty& CT_Font::ChildGroup_1::get_outline() const
    {    
    if (m_outline)
    {
        return *m_outline;
    }
    return CT_BooleanProperty::default_instance();
    }

    bool CT_Font::ChildGroup_1::has_shadow() const
    {    
    return m_has_shadow;
    }

    CT_BooleanProperty* CT_Font::ChildGroup_1::mutable_shadow()
    {    
    
    m_has_name = false;
    
    if (m_name)
    {
        delete m_name;
        m_name = NULL;
    }
    ;
    
    m_has_charset = false;
    
    if (m_charset)
    {
        delete m_charset;
        m_charset = NULL;
    }
    ;
    
    m_has_family = false;
    
    if (m_family)
    {
        delete m_family;
        m_family = NULL;
    }
    ;
    
    m_has_b = false;
    
    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;
    
    m_has_i = false;
    
    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;
    
    m_has_strike = false;
    
    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;
    
    m_has_outline = false;
    
    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;
    
    m_has_condense = false;
    
    if (m_condense)
    {
        delete m_condense;
        m_condense = NULL;
    }
    ;
    
    m_has_extend = false;
    
    if (m_extend)
    {
        delete m_extend;
        m_extend = NULL;
    }
    ;
    
    m_has_color = false;
    
    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;
    
    m_has_sz = false;
    
    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;
    
    m_has_u = false;
    
    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;
    
    m_has_vertAlign = false;
    
    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;
    
    m_has_scheme = false;
    
    if (m_scheme)
    {
        delete m_scheme;
        m_scheme = NULL;
    }
    ;
    
    m_has_shadow = true;
    if (!m_shadow)
    {
        m_shadow = new CT_BooleanProperty();
    }
    return m_shadow;
    }

    const CT_BooleanProperty& CT_Font::ChildGroup_1::get_shadow() const
    {    
    if (m_shadow)
    {
        return *m_shadow;
    }
    return CT_BooleanProperty::default_instance();
    }

    bool CT_Font::ChildGroup_1::has_condense() const
    {    
    return m_has_condense;
    }

    CT_BooleanProperty* CT_Font::ChildGroup_1::mutable_condense()
    {    
    
    m_has_name = false;
    
    if (m_name)
    {
        delete m_name;
        m_name = NULL;
    }
    ;
    
    m_has_charset = false;
    
    if (m_charset)
    {
        delete m_charset;
        m_charset = NULL;
    }
    ;
    
    m_has_family = false;
    
    if (m_family)
    {
        delete m_family;
        m_family = NULL;
    }
    ;
    
    m_has_b = false;
    
    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;
    
    m_has_i = false;
    
    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;
    
    m_has_strike = false;
    
    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;
    
    m_has_outline = false;
    
    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;
    
    m_has_shadow = false;
    
    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;
    
    m_has_extend = false;
    
    if (m_extend)
    {
        delete m_extend;
        m_extend = NULL;
    }
    ;
    
    m_has_color = false;
    
    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;
    
    m_has_sz = false;
    
    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;
    
    m_has_u = false;
    
    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;
    
    m_has_vertAlign = false;
    
    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;
    
    m_has_scheme = false;
    
    if (m_scheme)
    {
        delete m_scheme;
        m_scheme = NULL;
    }
    ;
    
    m_has_condense = true;
    if (!m_condense)
    {
        m_condense = new CT_BooleanProperty();
    }
    return m_condense;
    }

    const CT_BooleanProperty& CT_Font::ChildGroup_1::get_condense() const
    {    
    if (m_condense)
    {
        return *m_condense;
    }
    return CT_BooleanProperty::default_instance();
    }

    bool CT_Font::ChildGroup_1::has_extend() const
    {    
    return m_has_extend;
    }

    CT_BooleanProperty* CT_Font::ChildGroup_1::mutable_extend()
    {    
    
    m_has_name = false;
    
    if (m_name)
    {
        delete m_name;
        m_name = NULL;
    }
    ;
    
    m_has_charset = false;
    
    if (m_charset)
    {
        delete m_charset;
        m_charset = NULL;
    }
    ;
    
    m_has_family = false;
    
    if (m_family)
    {
        delete m_family;
        m_family = NULL;
    }
    ;
    
    m_has_b = false;
    
    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;
    
    m_has_i = false;
    
    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;
    
    m_has_strike = false;
    
    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;
    
    m_has_outline = false;
    
    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;
    
    m_has_shadow = false;
    
    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;
    
    m_has_condense = false;
    
    if (m_condense)
    {
        delete m_condense;
        m_condense = NULL;
    }
    ;
    
    m_has_color = false;
    
    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;
    
    m_has_sz = false;
    
    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;
    
    m_has_u = false;
    
    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;
    
    m_has_vertAlign = false;
    
    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;
    
    m_has_scheme = false;
    
    if (m_scheme)
    {
        delete m_scheme;
        m_scheme = NULL;
    }
    ;
    
    m_has_extend = true;
    if (!m_extend)
    {
        m_extend = new CT_BooleanProperty();
    }
    return m_extend;
    }

    const CT_BooleanProperty& CT_Font::ChildGroup_1::get_extend() const
    {    
    if (m_extend)
    {
        return *m_extend;
    }
    return CT_BooleanProperty::default_instance();
    }

    bool CT_Font::ChildGroup_1::has_color() const
    {    
    return m_has_color;
    }

    CT_Color* CT_Font::ChildGroup_1::mutable_color()
    {    
    
    m_has_name = false;
    
    if (m_name)
    {
        delete m_name;
        m_name = NULL;
    }
    ;
    
    m_has_charset = false;
    
    if (m_charset)
    {
        delete m_charset;
        m_charset = NULL;
    }
    ;
    
    m_has_family = false;
    
    if (m_family)
    {
        delete m_family;
        m_family = NULL;
    }
    ;
    
    m_has_b = false;
    
    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;
    
    m_has_i = false;
    
    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;
    
    m_has_strike = false;
    
    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;
    
    m_has_outline = false;
    
    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;
    
    m_has_shadow = false;
    
    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;
    
    m_has_condense = false;
    
    if (m_condense)
    {
        delete m_condense;
        m_condense = NULL;
    }
    ;
    
    m_has_extend = false;
    
    if (m_extend)
    {
        delete m_extend;
        m_extend = NULL;
    }
    ;
    
    m_has_sz = false;
    
    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;
    
    m_has_u = false;
    
    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;
    
    m_has_vertAlign = false;
    
    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;
    
    m_has_scheme = false;
    
    if (m_scheme)
    {
        delete m_scheme;
        m_scheme = NULL;
    }
    ;
    
    m_has_color = true;
    if (!m_color)
    {
        m_color = new CT_Color();
    }
    return m_color;
    }

    const CT_Color& CT_Font::ChildGroup_1::get_color() const
    {    
    if (m_color)
    {
        return *m_color;
    }
    return CT_Color::default_instance();
    }

    bool CT_Font::ChildGroup_1::has_sz() const
    {    
    return m_has_sz;
    }

    CT_FontSize* CT_Font::ChildGroup_1::mutable_sz()
    {    
    
    m_has_name = false;
    
    if (m_name)
    {
        delete m_name;
        m_name = NULL;
    }
    ;
    
    m_has_charset = false;
    
    if (m_charset)
    {
        delete m_charset;
        m_charset = NULL;
    }
    ;
    
    m_has_family = false;
    
    if (m_family)
    {
        delete m_family;
        m_family = NULL;
    }
    ;
    
    m_has_b = false;
    
    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;
    
    m_has_i = false;
    
    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;
    
    m_has_strike = false;
    
    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;
    
    m_has_outline = false;
    
    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;
    
    m_has_shadow = false;
    
    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;
    
    m_has_condense = false;
    
    if (m_condense)
    {
        delete m_condense;
        m_condense = NULL;
    }
    ;
    
    m_has_extend = false;
    
    if (m_extend)
    {
        delete m_extend;
        m_extend = NULL;
    }
    ;
    
    m_has_color = false;
    
    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;
    
    m_has_u = false;
    
    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;
    
    m_has_vertAlign = false;
    
    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;
    
    m_has_scheme = false;
    
    if (m_scheme)
    {
        delete m_scheme;
        m_scheme = NULL;
    }
    ;
    
    m_has_sz = true;
    if (!m_sz)
    {
        m_sz = new CT_FontSize();
    }
    return m_sz;
    }

    const CT_FontSize& CT_Font::ChildGroup_1::get_sz() const
    {    
    if (m_sz)
    {
        return *m_sz;
    }
    return CT_FontSize::default_instance();
    }

    bool CT_Font::ChildGroup_1::has_u() const
    {    
    return m_has_u;
    }

    CT_UnderlineProperty* CT_Font::ChildGroup_1::mutable_u()
    {    
    
    m_has_name = false;
    
    if (m_name)
    {
        delete m_name;
        m_name = NULL;
    }
    ;
    
    m_has_charset = false;
    
    if (m_charset)
    {
        delete m_charset;
        m_charset = NULL;
    }
    ;
    
    m_has_family = false;
    
    if (m_family)
    {
        delete m_family;
        m_family = NULL;
    }
    ;
    
    m_has_b = false;
    
    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;
    
    m_has_i = false;
    
    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;
    
    m_has_strike = false;
    
    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;
    
    m_has_outline = false;
    
    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;
    
    m_has_shadow = false;
    
    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;
    
    m_has_condense = false;
    
    if (m_condense)
    {
        delete m_condense;
        m_condense = NULL;
    }
    ;
    
    m_has_extend = false;
    
    if (m_extend)
    {
        delete m_extend;
        m_extend = NULL;
    }
    ;
    
    m_has_color = false;
    
    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;
    
    m_has_sz = false;
    
    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;
    
    m_has_vertAlign = false;
    
    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;
    
    m_has_scheme = false;
    
    if (m_scheme)
    {
        delete m_scheme;
        m_scheme = NULL;
    }
    ;
    
    m_has_u = true;
    if (!m_u)
    {
        m_u = new CT_UnderlineProperty();
    }
    return m_u;
    }

    const CT_UnderlineProperty& CT_Font::ChildGroup_1::get_u() const
    {    
    if (m_u)
    {
        return *m_u;
    }
    return CT_UnderlineProperty::default_instance();
    }

    bool CT_Font::ChildGroup_1::has_vertAlign() const
    {    
    return m_has_vertAlign;
    }

    CT_VerticalAlignFontProperty* CT_Font::ChildGroup_1::mutable_vertAlign()
    {    
    
    m_has_name = false;
    
    if (m_name)
    {
        delete m_name;
        m_name = NULL;
    }
    ;
    
    m_has_charset = false;
    
    if (m_charset)
    {
        delete m_charset;
        m_charset = NULL;
    }
    ;
    
    m_has_family = false;
    
    if (m_family)
    {
        delete m_family;
        m_family = NULL;
    }
    ;
    
    m_has_b = false;
    
    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;
    
    m_has_i = false;
    
    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;
    
    m_has_strike = false;
    
    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;
    
    m_has_outline = false;
    
    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;
    
    m_has_shadow = false;
    
    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;
    
    m_has_condense = false;
    
    if (m_condense)
    {
        delete m_condense;
        m_condense = NULL;
    }
    ;
    
    m_has_extend = false;
    
    if (m_extend)
    {
        delete m_extend;
        m_extend = NULL;
    }
    ;
    
    m_has_color = false;
    
    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;
    
    m_has_sz = false;
    
    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;
    
    m_has_u = false;
    
    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;
    
    m_has_scheme = false;
    
    if (m_scheme)
    {
        delete m_scheme;
        m_scheme = NULL;
    }
    ;
    
    m_has_vertAlign = true;
    if (!m_vertAlign)
    {
        m_vertAlign = new CT_VerticalAlignFontProperty();
    }
    return m_vertAlign;
    }

    const CT_VerticalAlignFontProperty& CT_Font::ChildGroup_1::get_vertAlign() const
    {    
    if (m_vertAlign)
    {
        return *m_vertAlign;
    }
    return CT_VerticalAlignFontProperty::default_instance();
    }

    bool CT_Font::ChildGroup_1::has_scheme() const
    {    
    return m_has_scheme;
    }

    CT_FontScheme* CT_Font::ChildGroup_1::mutable_scheme()
    {    
    
    m_has_name = false;
    
    if (m_name)
    {
        delete m_name;
        m_name = NULL;
    }
    ;
    
    m_has_charset = false;
    
    if (m_charset)
    {
        delete m_charset;
        m_charset = NULL;
    }
    ;
    
    m_has_family = false;
    
    if (m_family)
    {
        delete m_family;
        m_family = NULL;
    }
    ;
    
    m_has_b = false;
    
    if (m_b)
    {
        delete m_b;
        m_b = NULL;
    }
    ;
    
    m_has_i = false;
    
    if (m_i)
    {
        delete m_i;
        m_i = NULL;
    }
    ;
    
    m_has_strike = false;
    
    if (m_strike)
    {
        delete m_strike;
        m_strike = NULL;
    }
    ;
    
    m_has_outline = false;
    
    if (m_outline)
    {
        delete m_outline;
        m_outline = NULL;
    }
    ;
    
    m_has_shadow = false;
    
    if (m_shadow)
    {
        delete m_shadow;
        m_shadow = NULL;
    }
    ;
    
    m_has_condense = false;
    
    if (m_condense)
    {
        delete m_condense;
        m_condense = NULL;
    }
    ;
    
    m_has_extend = false;
    
    if (m_extend)
    {
        delete m_extend;
        m_extend = NULL;
    }
    ;
    
    m_has_color = false;
    
    if (m_color)
    {
        delete m_color;
        m_color = NULL;
    }
    ;
    
    m_has_sz = false;
    
    if (m_sz)
    {
        delete m_sz;
        m_sz = NULL;
    }
    ;
    
    m_has_u = false;
    
    if (m_u)
    {
        delete m_u;
        m_u = NULL;
    }
    ;
    
    m_has_vertAlign = false;
    
    if (m_vertAlign)
    {
        delete m_vertAlign;
        m_vertAlign = NULL;
    }
    ;
    
    m_has_scheme = true;
    if (!m_scheme)
    {
        m_scheme = new CT_FontScheme();
    }
    return m_scheme;
    }

    const CT_FontScheme& CT_Font::ChildGroup_1::get_scheme() const
    {    
    if (m_scheme)
    {
        return *m_scheme;
    }
    return CT_FontScheme::default_instance();
    }

CT_Font* CT_Font::default_instance_ = NULL;

    // CT_FontFamily
    CT_FontFamily::CT_FontFamily()
    :m_has_val_attr(false),
    m_val_attr(NULL)
    {
    }
    CT_FontFamily::~CT_FontFamily()
{
    clear();    }
    void CT_FontFamily::clear()
    {    
    m_has_val_attr = false;
    
    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }
    
    }

    void CT_FontFamily::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("val", _outStream);
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_FontFamily& CT_FontFamily::default_instance()
    {    
    if (!CT_FontFamily::default_instance_)
    {
        CT_FontFamily::default_instance_ = new CT_FontFamily();
    }
    return *CT_FontFamily::default_instance_;
    }

    bool CT_FontFamily::has_val_attr() const
    {    
    return m_has_val_attr;
    }

    void CT_FontFamily::set_val_attr(const ST_FontFamily& _val_attr)
    {    
    m_has_val_attr = true;
    m_val_attr = new ST_FontFamily(_val_attr);
    }

    const ST_FontFamily& CT_FontFamily::get_val_attr() const
    {    
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ST_FontFamily::default_instance();
    }

CT_FontFamily* CT_FontFamily::default_instance_ = NULL;

    // CT_ExternalLink
    CT_ExternalLink::CT_ExternalLink()
    :m_has_externalBook(false),
    m_externalBook(NULL),
    m_has_ddeLink(false),
    m_ddeLink(NULL),
    m_has_oleLink(false),
    m_oleLink(NULL),
    m_has_extLst(false),
    m_extLst(NULL)
    {
    }
    CT_ExternalLink::~CT_ExternalLink()
{
    clear();    }
    bool CT_ExternalLink::has_externalBook() const
    {    
    return m_has_externalBook;
    }

    CT_ExternalBook* CT_ExternalLink::mutable_externalBook()
    {    
    
    m_has_ddeLink = false;
    
    if (m_ddeLink)
    {
        delete m_ddeLink;
        m_ddeLink = NULL;
    }
    ;
    
    m_has_oleLink = false;
    
    if (m_oleLink)
    {
        delete m_oleLink;
        m_oleLink = NULL;
    }
    ;
    
    m_has_externalBook = true;
    if (!m_externalBook)
    {
        m_externalBook = new CT_ExternalBook();
    }
    return m_externalBook;
    }

    const CT_ExternalBook& CT_ExternalLink::get_externalBook() const
    {    
    if (m_externalBook)
    {
        return *m_externalBook;
    }
    return CT_ExternalBook::default_instance();
    }

    bool CT_ExternalLink::has_ddeLink() const
    {    
    return m_has_ddeLink;
    }

    CT_DdeLink* CT_ExternalLink::mutable_ddeLink()
    {    
    
    m_has_externalBook = false;
    
    if (m_externalBook)
    {
        delete m_externalBook;
        m_externalBook = NULL;
    }
    ;
    
    m_has_oleLink = false;
    
    if (m_oleLink)
    {
        delete m_oleLink;
        m_oleLink = NULL;
    }
    ;
    
    m_has_ddeLink = true;
    if (!m_ddeLink)
    {
        m_ddeLink = new CT_DdeLink();
    }
    return m_ddeLink;
    }

    const CT_DdeLink& CT_ExternalLink::get_ddeLink() const
    {    
    if (m_ddeLink)
    {
        return *m_ddeLink;
    }
    return CT_DdeLink::default_instance();
    }

    bool CT_ExternalLink::has_oleLink() const
    {    
    return m_has_oleLink;
    }

    CT_OleLink* CT_ExternalLink::mutable_oleLink()
    {    
    
    m_has_externalBook = false;
    
    if (m_externalBook)
    {
        delete m_externalBook;
        m_externalBook = NULL;
    }
    ;
    
    m_has_ddeLink = false;
    
    if (m_ddeLink)
    {
        delete m_ddeLink;
        m_ddeLink = NULL;
    }
    ;
    
    m_has_oleLink = true;
    if (!m_oleLink)
    {
        m_oleLink = new CT_OleLink();
    }
    return m_oleLink;
    }

    const CT_OleLink& CT_ExternalLink::get_oleLink() const
    {    
    if (m_oleLink)
    {
        return *m_oleLink;
    }
    return CT_OleLink::default_instance();
    }

    bool CT_ExternalLink::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* CT_ExternalLink::mutable_extLst()
    {    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& CT_ExternalLink::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

    void CT_ExternalLink::clear()
    {    }

    void CT_ExternalLink::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
            _outStream << ">";
            
    if (m_has_externalBook)
    {
        m_externalBook->toXmlElem("main:externalBook", "", _outStream);;
    }
    
    if (m_has_ddeLink)
    {
        m_ddeLink->toXmlElem("main:ddeLink", "", _outStream);;
    }
    
    if (m_has_oleLink)
    {
        m_oleLink->toXmlElem("main:oleLink", "", _outStream);;
    }
     
    if (m_has_extLst)
    {
        m_extLst->toXmlElem("main:extLst", "", _outStream);;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_ExternalLink& CT_ExternalLink::default_instance()
    {    
    if (!CT_ExternalLink::default_instance_)
    {
        CT_ExternalLink::default_instance_ = new CT_ExternalLink();
    }
    return *CT_ExternalLink::default_instance_;
    }

CT_ExternalLink* CT_ExternalLink::default_instance_ = NULL;

    // CT_ExternalBook
    CT_ExternalBook::CT_ExternalBook()
    :m_has_sheetNames(false),
    m_sheetNames(NULL),
    m_has_definedNames(false),
    m_definedNames(NULL),
    m_has_sheetDataSet(false),
    m_sheetDataSet(NULL),
    m_has_r_id_attr(false),
    m_r_id_attr(NULL)
    {
    }
    CT_ExternalBook::~CT_ExternalBook()
{
    clear();    }
    bool CT_ExternalBook::has_sheetNames() const
    {    
    return m_has_sheetNames;
    }

    CT_ExternalSheetNames* CT_ExternalBook::mutable_sheetNames()
    {    
    m_has_sheetNames = true;
    if (!m_sheetNames)
    {
        m_sheetNames = new CT_ExternalSheetNames();
    }
    return m_sheetNames;
    }

    const CT_ExternalSheetNames& CT_ExternalBook::get_sheetNames() const
    {    
    if (m_sheetNames)
    {
        return *m_sheetNames;
    }
    return CT_ExternalSheetNames::default_instance();
    }

    bool CT_ExternalBook::has_definedNames() const
    {    
    return m_has_definedNames;
    }

    CT_ExternalDefinedNames* CT_ExternalBook::mutable_definedNames()
    {    
    m_has_definedNames = true;
    if (!m_definedNames)
    {
        m_definedNames = new CT_ExternalDefinedNames();
    }
    return m_definedNames;
    }

    const CT_ExternalDefinedNames& CT_ExternalBook::get_definedNames() const
    {    
    if (m_definedNames)
    {
        return *m_definedNames;
    }
    return CT_ExternalDefinedNames::default_instance();
    }

    bool CT_ExternalBook::has_sheetDataSet() const
    {    
    return m_has_sheetDataSet;
    }

    CT_ExternalSheetDataSet* CT_ExternalBook::mutable_sheetDataSet()
    {    
    m_has_sheetDataSet = true;
    if (!m_sheetDataSet)
    {
        m_sheetDataSet = new CT_ExternalSheetDataSet();
    }
    return m_sheetDataSet;
    }

    const CT_ExternalSheetDataSet& CT_ExternalBook::get_sheetDataSet() const
    {    
    if (m_sheetDataSet)
    {
        return *m_sheetDataSet;
    }
    return CT_ExternalSheetDataSet::default_instance();
    }

    void CT_ExternalBook::clear()
    {    
    m_has_r_id_attr = false;
    
    if (m_r_id_attr)
    {
        delete m_r_id_attr;
        m_r_id_attr = NULL;
    }
    
    }

    void CT_ExternalBook::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_r_id_attr)
    {
        m_r_id_attr->toXmlAttr("r:id", _outStream);
    }
    
            _outStream << ">";
            
    if (m_has_sheetNames)
    {
        m_sheetNames->toXmlElem("main:sheetNames", "", _outStream);;
    }
    
    if (m_has_definedNames)
    {
        m_definedNames->toXmlElem("main:definedNames", "", _outStream);;
    }
    
    if (m_has_sheetDataSet)
    {
        m_sheetDataSet->toXmlElem("main:sheetDataSet", "", _outStream);;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_ExternalBook& CT_ExternalBook::default_instance()
    {    
    if (!CT_ExternalBook::default_instance_)
    {
        CT_ExternalBook::default_instance_ = new CT_ExternalBook();
    }
    return *CT_ExternalBook::default_instance_;
    }

    bool CT_ExternalBook::has_r_id_attr() const
    {    
    return m_has_r_id_attr;
    }

    void CT_ExternalBook::set_r_id_attr(const ns_r::ST_RelationshipId& _r_id_attr)
    {    
    m_has_r_id_attr = true;
    m_r_id_attr = new ns_r::ST_RelationshipId(_r_id_attr);
    }

    const ns_r::ST_RelationshipId& CT_ExternalBook::get_r_id_attr() const
    {    
    if (m_r_id_attr)
    {
        return *m_r_id_attr;
    }
    return ns_r::ST_RelationshipId::default_instance();
    }

CT_ExternalBook* CT_ExternalBook::default_instance_ = NULL;

    // CT_ExternalSheetNames
    CT_ExternalSheetNames::CT_ExternalSheetNames()

    {
    }
    CT_ExternalSheetNames::~CT_ExternalSheetNames()
{
    clear();    }
    CT_ExternalSheetName* CT_ExternalSheetNames::add_sheetName()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_ExternalSheetName* pNewChild = pChildGroup->mutable_sheetName();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_ExternalSheetNames::clear()
    {    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_ExternalSheetNames::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_sheetName())
            {
                (*iter)->get_sheetName().toXmlElem("main:sheetName", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_ExternalSheetNames& CT_ExternalSheetNames::default_instance()
    {    
    if (!CT_ExternalSheetNames::default_instance_)
    {
        CT_ExternalSheetNames::default_instance_ = new CT_ExternalSheetNames();
    }
    return *CT_ExternalSheetNames::default_instance_;
    }


    // CT_ExternalSheetNames::ChildGroup_1
    CT_ExternalSheetNames::ChildGroup_1::ChildGroup_1()
    :m_has_sheetName(false),
    m_sheetName(NULL)
    {
    }
    bool CT_ExternalSheetNames::ChildGroup_1::has_sheetName() const
    {    
    return m_has_sheetName;
    }

    CT_ExternalSheetName* CT_ExternalSheetNames::ChildGroup_1::mutable_sheetName()
    {    
    
    m_has_sheetName = true;
    if (!m_sheetName)
    {
        m_sheetName = new CT_ExternalSheetName();
    }
    return m_sheetName;
    }

    const CT_ExternalSheetName& CT_ExternalSheetNames::ChildGroup_1::get_sheetName() const
    {    
    if (m_sheetName)
    {
        return *m_sheetName;
    }
    return CT_ExternalSheetName::default_instance();
    }

CT_ExternalSheetNames* CT_ExternalSheetNames::default_instance_ = NULL;

    // CT_ExternalSheetName
    CT_ExternalSheetName::CT_ExternalSheetName()
    :m_has_val_attr(false),
    m_val_attr(NULL)
    {
    }
    CT_ExternalSheetName::~CT_ExternalSheetName()
{
    clear();    }
    void CT_ExternalSheetName::clear()
    {    
    m_has_val_attr = false;
    
    if (m_val_attr)
    {
        delete m_val_attr;
        m_val_attr = NULL;
    }
    
    }

    void CT_ExternalSheetName::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_val_attr)
    {
        m_val_attr->toXmlAttr("val", _outStream);
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_ExternalSheetName& CT_ExternalSheetName::default_instance()
    {    
    if (!CT_ExternalSheetName::default_instance_)
    {
        CT_ExternalSheetName::default_instance_ = new CT_ExternalSheetName();
    }
    return *CT_ExternalSheetName::default_instance_;
    }

    bool CT_ExternalSheetName::has_val_attr() const
    {    
    return m_has_val_attr;
    }

    void CT_ExternalSheetName::set_val_attr(const ns_s::ST_Xstring& _val_attr)
    {    
    m_has_val_attr = true;
    m_val_attr = new ns_s::ST_Xstring(_val_attr);
    }

    const ns_s::ST_Xstring& CT_ExternalSheetName::get_val_attr() const
    {    
    if (m_val_attr)
    {
        return *m_val_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

CT_ExternalSheetName* CT_ExternalSheetName::default_instance_ = NULL;

    // CT_ExternalDefinedNames
    CT_ExternalDefinedNames::CT_ExternalDefinedNames()

    {
    }
    CT_ExternalDefinedNames::~CT_ExternalDefinedNames()
{
    clear();    }
    CT_ExternalDefinedName* CT_ExternalDefinedNames::add_definedName()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_ExternalDefinedName* pNewChild = pChildGroup->mutable_definedName();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_ExternalDefinedNames::clear()
    {    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_ExternalDefinedNames::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_definedName())
            {
                (*iter)->get_definedName().toXmlElem("main:definedName", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_ExternalDefinedNames& CT_ExternalDefinedNames::default_instance()
    {    
    if (!CT_ExternalDefinedNames::default_instance_)
    {
        CT_ExternalDefinedNames::default_instance_ = new CT_ExternalDefinedNames();
    }
    return *CT_ExternalDefinedNames::default_instance_;
    }


    // CT_ExternalDefinedNames::ChildGroup_1
    CT_ExternalDefinedNames::ChildGroup_1::ChildGroup_1()
    :m_has_definedName(false),
    m_definedName(NULL)
    {
    }
    bool CT_ExternalDefinedNames::ChildGroup_1::has_definedName() const
    {    
    return m_has_definedName;
    }

    CT_ExternalDefinedName* CT_ExternalDefinedNames::ChildGroup_1::mutable_definedName()
    {    
    
    m_has_definedName = true;
    if (!m_definedName)
    {
        m_definedName = new CT_ExternalDefinedName();
    }
    return m_definedName;
    }

    const CT_ExternalDefinedName& CT_ExternalDefinedNames::ChildGroup_1::get_definedName() const
    {    
    if (m_definedName)
    {
        return *m_definedName;
    }
    return CT_ExternalDefinedName::default_instance();
    }

CT_ExternalDefinedNames* CT_ExternalDefinedNames::default_instance_ = NULL;

    // CT_ExternalDefinedName
    CT_ExternalDefinedName::CT_ExternalDefinedName()
    :m_has_name_attr(false),
    m_name_attr(NULL),
    m_has_refersTo_attr(false),
    m_refersTo_attr(NULL),
    m_has_sheetId_attr(false),
    m_sheetId_attr(0)
    {
    }
    CT_ExternalDefinedName::~CT_ExternalDefinedName()
{
    clear();    }
    void CT_ExternalDefinedName::clear()
    {    
    m_has_name_attr = false;
    
    if (m_name_attr)
    {
        delete m_name_attr;
        m_name_attr = NULL;
    }
    
    
    m_has_refersTo_attr = false;
    
    if (m_refersTo_attr)
    {
        delete m_refersTo_attr;
        m_refersTo_attr = NULL;
    }
    
    
    m_has_sheetId_attr = false;
    m_sheetId_attr = 0;
    }

    void CT_ExternalDefinedName::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_name_attr)
    {
        m_name_attr->toXmlAttr("name", _outStream);
    }
    
    
    if (m_has_refersTo_attr)
    {
        m_refersTo_attr->toXmlAttr("refersTo", _outStream);
    }
    
    
    if (m_has_sheetId_attr)
    {
        _outStream << " " << "sheetId" << "=\"" << m_sheetId_attr << "\"";
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_ExternalDefinedName& CT_ExternalDefinedName::default_instance()
    {    
    if (!CT_ExternalDefinedName::default_instance_)
    {
        CT_ExternalDefinedName::default_instance_ = new CT_ExternalDefinedName();
    }
    return *CT_ExternalDefinedName::default_instance_;
    }

    bool CT_ExternalDefinedName::has_name_attr() const
    {    
    return m_has_name_attr;
    }

    void CT_ExternalDefinedName::set_name_attr(const ns_s::ST_Xstring& _name_attr)
    {    
    m_has_name_attr = true;
    m_name_attr = new ns_s::ST_Xstring(_name_attr);
    }

    const ns_s::ST_Xstring& CT_ExternalDefinedName::get_name_attr() const
    {    
    if (m_name_attr)
    {
        return *m_name_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_ExternalDefinedName::has_refersTo_attr() const
    {    
    return m_has_refersTo_attr;
    }

    void CT_ExternalDefinedName::set_refersTo_attr(const ns_s::ST_Xstring& _refersTo_attr)
    {    
    m_has_refersTo_attr = true;
    m_refersTo_attr = new ns_s::ST_Xstring(_refersTo_attr);
    }

    const ns_s::ST_Xstring& CT_ExternalDefinedName::get_refersTo_attr() const
    {    
    if (m_refersTo_attr)
    {
        return *m_refersTo_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_ExternalDefinedName::has_sheetId_attr() const
    {    
    return m_has_sheetId_attr;
    }

    void CT_ExternalDefinedName::set_sheetId_attr(const XSD::unsignedInt_& _sheetId_attr)
    {    
    m_has_sheetId_attr = true;
    m_sheetId_attr = _sheetId_attr;
    }

    const XSD::unsignedInt_& CT_ExternalDefinedName::get_sheetId_attr() const
    {    
    return m_sheetId_attr;
    }

CT_ExternalDefinedName* CT_ExternalDefinedName::default_instance_ = NULL;

    // CT_ExternalSheetDataSet
    CT_ExternalSheetDataSet::CT_ExternalSheetDataSet()

    {
    }
    CT_ExternalSheetDataSet::~CT_ExternalSheetDataSet()
{
    clear();    }
    CT_ExternalSheetData* CT_ExternalSheetDataSet::add_sheetData()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_ExternalSheetData* pNewChild = pChildGroup->mutable_sheetData();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_ExternalSheetDataSet::clear()
    {    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_ExternalSheetDataSet::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_sheetData())
            {
                (*iter)->get_sheetData().toXmlElem("main:sheetData", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_ExternalSheetDataSet& CT_ExternalSheetDataSet::default_instance()
    {    
    if (!CT_ExternalSheetDataSet::default_instance_)
    {
        CT_ExternalSheetDataSet::default_instance_ = new CT_ExternalSheetDataSet();
    }
    return *CT_ExternalSheetDataSet::default_instance_;
    }


    // CT_ExternalSheetDataSet::ChildGroup_1
    CT_ExternalSheetDataSet::ChildGroup_1::ChildGroup_1()
    :m_has_sheetData(false),
    m_sheetData(NULL)
    {
    }
    bool CT_ExternalSheetDataSet::ChildGroup_1::has_sheetData() const
    {    
    return m_has_sheetData;
    }

    CT_ExternalSheetData* CT_ExternalSheetDataSet::ChildGroup_1::mutable_sheetData()
    {    
    
    m_has_sheetData = true;
    if (!m_sheetData)
    {
        m_sheetData = new CT_ExternalSheetData();
    }
    return m_sheetData;
    }

    const CT_ExternalSheetData& CT_ExternalSheetDataSet::ChildGroup_1::get_sheetData() const
    {    
    if (m_sheetData)
    {
        return *m_sheetData;
    }
    return CT_ExternalSheetData::default_instance();
    }

CT_ExternalSheetDataSet* CT_ExternalSheetDataSet::default_instance_ = NULL;

    // CT_ExternalSheetData
    CT_ExternalSheetData::CT_ExternalSheetData()
    :m_has_sheetId_attr(false),
    m_sheetId_attr(0),
    m_has_refreshError_attr(false),
    m_refreshError_attr(false)
    {
    }
    CT_ExternalSheetData::~CT_ExternalSheetData()
{
    clear();    }
    CT_ExternalRow* CT_ExternalSheetData::add_row()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_ExternalRow* pNewChild = pChildGroup->mutable_row();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_ExternalSheetData::clear()
    {    
    m_has_sheetId_attr = false;
    m_sheetId_attr = 0;
    
    m_has_refreshError_attr = false;
    m_refreshError_attr = false;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_ExternalSheetData::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_sheetId_attr)
    {
        _outStream << " " << "sheetId" << "=\"" << m_sheetId_attr << "\"";
    }
    
    
    if (m_has_refreshError_attr)
    {
        _outStream << " " << "refreshError" << "=\"" << XSD::XMLBooleanStr(m_refreshError_attr) << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_row())
            {
                (*iter)->get_row().toXmlElem("main:row", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_ExternalSheetData& CT_ExternalSheetData::default_instance()
    {    
    if (!CT_ExternalSheetData::default_instance_)
    {
        CT_ExternalSheetData::default_instance_ = new CT_ExternalSheetData();
    }
    return *CT_ExternalSheetData::default_instance_;
    }

    bool CT_ExternalSheetData::has_sheetId_attr() const
    {    
    return m_has_sheetId_attr;
    }

    void CT_ExternalSheetData::set_sheetId_attr(const XSD::unsignedInt_& _sheetId_attr)
    {    
    m_has_sheetId_attr = true;
    m_sheetId_attr = _sheetId_attr;
    }

    const XSD::unsignedInt_& CT_ExternalSheetData::get_sheetId_attr() const
    {    
    return m_sheetId_attr;
    }

    bool CT_ExternalSheetData::has_refreshError_attr() const
    {    
    return m_has_refreshError_attr;
    }

    void CT_ExternalSheetData::set_refreshError_attr(const XSD::boolean_& _refreshError_attr)
    {    
    m_has_refreshError_attr = true;
    m_refreshError_attr = _refreshError_attr;
    }

    const XSD::boolean_& CT_ExternalSheetData::get_refreshError_attr() const
    {    
    return m_refreshError_attr;
    }


    // CT_ExternalSheetData::ChildGroup_1
    CT_ExternalSheetData::ChildGroup_1::ChildGroup_1()
    :m_has_row(false),
    m_row(NULL)
    {
    }
    bool CT_ExternalSheetData::ChildGroup_1::has_row() const
    {    
    return m_has_row;
    }

    CT_ExternalRow* CT_ExternalSheetData::ChildGroup_1::mutable_row()
    {    
    
    m_has_row = true;
    if (!m_row)
    {
        m_row = new CT_ExternalRow();
    }
    return m_row;
    }

    const CT_ExternalRow& CT_ExternalSheetData::ChildGroup_1::get_row() const
    {    
    if (m_row)
    {
        return *m_row;
    }
    return CT_ExternalRow::default_instance();
    }

CT_ExternalSheetData* CT_ExternalSheetData::default_instance_ = NULL;

    // CT_ExternalRow
    CT_ExternalRow::CT_ExternalRow()
    :m_has_r_attr(false),
    m_r_attr(0)
    {
    }
    CT_ExternalRow::~CT_ExternalRow()
{
    clear();    }
    CT_ExternalCell* CT_ExternalRow::add_cell()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_ExternalCell* pNewChild = pChildGroup->mutable_cell();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_ExternalRow::clear()
    {    
    m_has_r_attr = false;
    m_r_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_ExternalRow::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_r_attr)
    {
        _outStream << " " << "r" << "=\"" << m_r_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_cell())
            {
                (*iter)->get_cell().toXmlElem("main:cell", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_ExternalRow& CT_ExternalRow::default_instance()
    {    
    if (!CT_ExternalRow::default_instance_)
    {
        CT_ExternalRow::default_instance_ = new CT_ExternalRow();
    }
    return *CT_ExternalRow::default_instance_;
    }

    bool CT_ExternalRow::has_r_attr() const
    {    
    return m_has_r_attr;
    }

    void CT_ExternalRow::set_r_attr(const XSD::unsignedInt_& _r_attr)
    {    
    m_has_r_attr = true;
    m_r_attr = _r_attr;
    }

    const XSD::unsignedInt_& CT_ExternalRow::get_r_attr() const
    {    
    return m_r_attr;
    }


    // CT_ExternalRow::ChildGroup_1
    CT_ExternalRow::ChildGroup_1::ChildGroup_1()
    :m_has_cell(false),
    m_cell(NULL)
    {
    }
    bool CT_ExternalRow::ChildGroup_1::has_cell() const
    {    
    return m_has_cell;
    }

    CT_ExternalCell* CT_ExternalRow::ChildGroup_1::mutable_cell()
    {    
    
    m_has_cell = true;
    if (!m_cell)
    {
        m_cell = new CT_ExternalCell();
    }
    return m_cell;
    }

    const CT_ExternalCell& CT_ExternalRow::ChildGroup_1::get_cell() const
    {    
    if (m_cell)
    {
        return *m_cell;
    }
    return CT_ExternalCell::default_instance();
    }

CT_ExternalRow* CT_ExternalRow::default_instance_ = NULL;

    // CT_ExternalCell
    CT_ExternalCell::CT_ExternalCell()
    :m_has_v(false),
    m_v(NULL),
    m_has_r_attr(false),
    m_r_attr(NULL),
    m_has_t_attr(false),
    m_t_attr(NULL),
    m_has_vm_attr(false),
    m_vm_attr(0)
    {
    }
    CT_ExternalCell::~CT_ExternalCell()
{
    clear();    }
    bool CT_ExternalCell::has_v() const
    {    
    return m_has_v;
    }

    ns_s::ST_Xstring* CT_ExternalCell::mutable_v()
    {    
    m_has_v = true;
    if (!m_v)
    {
        m_v = new ns_s::ST_Xstring();
    }
    return m_v;
    }

    const ns_s::ST_Xstring& CT_ExternalCell::get_v() const
    {    
    if (m_v)
    {
        return *m_v;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    void CT_ExternalCell::clear()
    {    
    m_has_r_attr = false;
    
    if (m_r_attr)
    {
        delete m_r_attr;
        m_r_attr = NULL;
    }
    
    
    m_has_t_attr = false;
    
    if (m_t_attr)
    {
        delete m_t_attr;
        m_t_attr = NULL;
    }
    
    
    m_has_vm_attr = false;
    m_vm_attr = 0;
    }

    void CT_ExternalCell::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_r_attr)
    {
        m_r_attr->toXmlAttr("r", _outStream);
    }
    
    
    if (m_has_t_attr)
    {
        m_t_attr->toXmlAttr("t", _outStream);
    }
    
    
    if (m_has_vm_attr)
    {
        _outStream << " " << "vm" << "=\"" << m_vm_attr << "\"";
    }
    
            _outStream << ">";
            
    if (m_has_v)
    {
        _outStream << "<main:v>" << m_v->toString() << "</main:v>";;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_ExternalCell& CT_ExternalCell::default_instance()
    {    
    if (!CT_ExternalCell::default_instance_)
    {
        CT_ExternalCell::default_instance_ = new CT_ExternalCell();
    }
    return *CT_ExternalCell::default_instance_;
    }

    bool CT_ExternalCell::has_r_attr() const
    {    
    return m_has_r_attr;
    }

    void CT_ExternalCell::set_r_attr(const ST_CellRef& _r_attr)
    {    
    m_has_r_attr = true;
    m_r_attr = new ST_CellRef(_r_attr);
    }

    const ST_CellRef& CT_ExternalCell::get_r_attr() const
    {    
    if (m_r_attr)
    {
        return *m_r_attr;
    }
    return ST_CellRef::default_instance();
    }

    bool CT_ExternalCell::has_t_attr() const
    {    
    return m_has_t_attr;
    }

    void CT_ExternalCell::set_t_attr(const ST_CellType& _t_attr)
    {    
    m_has_t_attr = true;
    m_t_attr = new ST_CellType(_t_attr);
    }

    const ST_CellType& CT_ExternalCell::get_t_attr() const
    {    
    if (m_t_attr)
    {
        return *m_t_attr;
    }
    return ST_CellType::default_instance();
    }

    bool CT_ExternalCell::has_vm_attr() const
    {    
    return m_has_vm_attr;
    }

    void CT_ExternalCell::set_vm_attr(const XSD::unsignedInt_& _vm_attr)
    {    
    m_has_vm_attr = true;
    m_vm_attr = _vm_attr;
    }

    const XSD::unsignedInt_& CT_ExternalCell::get_vm_attr() const
    {    
    return m_vm_attr;
    }

CT_ExternalCell* CT_ExternalCell::default_instance_ = NULL;

    // CT_DdeLink
    CT_DdeLink::CT_DdeLink()
    :m_has_ddeItems(false),
    m_ddeItems(NULL),
    m_has_ddeService_attr(false),
    m_ddeService_attr(NULL),
    m_has_ddeTopic_attr(false),
    m_ddeTopic_attr(NULL)
    {
    }
    CT_DdeLink::~CT_DdeLink()
{
    clear();    }
    bool CT_DdeLink::has_ddeItems() const
    {    
    return m_has_ddeItems;
    }

    CT_DdeItems* CT_DdeLink::mutable_ddeItems()
    {    
    m_has_ddeItems = true;
    if (!m_ddeItems)
    {
        m_ddeItems = new CT_DdeItems();
    }
    return m_ddeItems;
    }

    const CT_DdeItems& CT_DdeLink::get_ddeItems() const
    {    
    if (m_ddeItems)
    {
        return *m_ddeItems;
    }
    return CT_DdeItems::default_instance();
    }

    void CT_DdeLink::clear()
    {    
    m_has_ddeService_attr = false;
    
    if (m_ddeService_attr)
    {
        delete m_ddeService_attr;
        m_ddeService_attr = NULL;
    }
    
    
    m_has_ddeTopic_attr = false;
    
    if (m_ddeTopic_attr)
    {
        delete m_ddeTopic_attr;
        m_ddeTopic_attr = NULL;
    }
    
    }

    void CT_DdeLink::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_ddeService_attr)
    {
        m_ddeService_attr->toXmlAttr("ddeService", _outStream);
    }
    
    
    if (m_has_ddeTopic_attr)
    {
        m_ddeTopic_attr->toXmlAttr("ddeTopic", _outStream);
    }
    
            _outStream << ">";
            
    if (m_has_ddeItems)
    {
        m_ddeItems->toXmlElem("main:ddeItems", "", _outStream);;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_DdeLink& CT_DdeLink::default_instance()
    {    
    if (!CT_DdeLink::default_instance_)
    {
        CT_DdeLink::default_instance_ = new CT_DdeLink();
    }
    return *CT_DdeLink::default_instance_;
    }

    bool CT_DdeLink::has_ddeService_attr() const
    {    
    return m_has_ddeService_attr;
    }

    void CT_DdeLink::set_ddeService_attr(const ns_s::ST_Xstring& _ddeService_attr)
    {    
    m_has_ddeService_attr = true;
    m_ddeService_attr = new ns_s::ST_Xstring(_ddeService_attr);
    }

    const ns_s::ST_Xstring& CT_DdeLink::get_ddeService_attr() const
    {    
    if (m_ddeService_attr)
    {
        return *m_ddeService_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_DdeLink::has_ddeTopic_attr() const
    {    
    return m_has_ddeTopic_attr;
    }

    void CT_DdeLink::set_ddeTopic_attr(const ns_s::ST_Xstring& _ddeTopic_attr)
    {    
    m_has_ddeTopic_attr = true;
    m_ddeTopic_attr = new ns_s::ST_Xstring(_ddeTopic_attr);
    }

    const ns_s::ST_Xstring& CT_DdeLink::get_ddeTopic_attr() const
    {    
    if (m_ddeTopic_attr)
    {
        return *m_ddeTopic_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

CT_DdeLink* CT_DdeLink::default_instance_ = NULL;

    // CT_DdeItems
    CT_DdeItems::CT_DdeItems()

    {
    }
    CT_DdeItems::~CT_DdeItems()
{
    clear();    }
    CT_DdeItem* CT_DdeItems::add_ddeItem()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_DdeItem* pNewChild = pChildGroup->mutable_ddeItem();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_DdeItems::clear()
    {    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_DdeItems::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_ddeItem())
            {
                (*iter)->get_ddeItem().toXmlElem("main:ddeItem", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_DdeItems& CT_DdeItems::default_instance()
    {    
    if (!CT_DdeItems::default_instance_)
    {
        CT_DdeItems::default_instance_ = new CT_DdeItems();
    }
    return *CT_DdeItems::default_instance_;
    }


    // CT_DdeItems::ChildGroup_1
    CT_DdeItems::ChildGroup_1::ChildGroup_1()
    :m_has_ddeItem(false),
    m_ddeItem(NULL)
    {
    }
    bool CT_DdeItems::ChildGroup_1::has_ddeItem() const
    {    
    return m_has_ddeItem;
    }

    CT_DdeItem* CT_DdeItems::ChildGroup_1::mutable_ddeItem()
    {    
    
    m_has_ddeItem = true;
    if (!m_ddeItem)
    {
        m_ddeItem = new CT_DdeItem();
    }
    return m_ddeItem;
    }

    const CT_DdeItem& CT_DdeItems::ChildGroup_1::get_ddeItem() const
    {    
    if (m_ddeItem)
    {
        return *m_ddeItem;
    }
    return CT_DdeItem::default_instance();
    }

CT_DdeItems* CT_DdeItems::default_instance_ = NULL;

    // CT_DdeItem
    CT_DdeItem::CT_DdeItem()
    :m_has_values(false),
    m_values(NULL),
    m_has_name_attr(false),
    m_name_attr(NULL),
    m_has_ole_attr(false),
    m_ole_attr(false),
    m_has_advise_attr(false),
    m_advise_attr(false),
    m_has_preferPic_attr(false),
    m_preferPic_attr(false)
    {
    }
    CT_DdeItem::~CT_DdeItem()
{
    clear();    }
    bool CT_DdeItem::has_values() const
    {    
    return m_has_values;
    }

    CT_DdeValues* CT_DdeItem::mutable_values()
    {    
    m_has_values = true;
    if (!m_values)
    {
        m_values = new CT_DdeValues();
    }
    return m_values;
    }

    const CT_DdeValues& CT_DdeItem::get_values() const
    {    
    if (m_values)
    {
        return *m_values;
    }
    return CT_DdeValues::default_instance();
    }

    void CT_DdeItem::clear()
    {    
    m_has_name_attr = false;
    
    if (m_name_attr)
    {
        delete m_name_attr;
        m_name_attr = NULL;
    }
    
    
    m_has_ole_attr = false;
    m_ole_attr = false;
    
    m_has_advise_attr = false;
    m_advise_attr = false;
    
    m_has_preferPic_attr = false;
    m_preferPic_attr = false;
    }

    void CT_DdeItem::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_name_attr)
    {
        m_name_attr->toXmlAttr("name", _outStream);
    }
    
    
    if (m_has_ole_attr)
    {
        _outStream << " " << "ole" << "=\"" << XSD::XMLBooleanStr(m_ole_attr) << "\"";
    }
    
    
    if (m_has_advise_attr)
    {
        _outStream << " " << "advise" << "=\"" << XSD::XMLBooleanStr(m_advise_attr) << "\"";
    }
    
    
    if (m_has_preferPic_attr)
    {
        _outStream << " " << "preferPic" << "=\"" << XSD::XMLBooleanStr(m_preferPic_attr) << "\"";
    }
    
            _outStream << ">";
            
    if (m_has_values)
    {
        m_values->toXmlElem("main:values", "", _outStream);;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_DdeItem& CT_DdeItem::default_instance()
    {    
    if (!CT_DdeItem::default_instance_)
    {
        CT_DdeItem::default_instance_ = new CT_DdeItem();
    }
    return *CT_DdeItem::default_instance_;
    }

    bool CT_DdeItem::has_name_attr() const
    {    
    return m_has_name_attr;
    }

    void CT_DdeItem::set_name_attr(const ns_s::ST_Xstring& _name_attr)
    {    
    m_has_name_attr = true;
    m_name_attr = new ns_s::ST_Xstring(_name_attr);
    }

    const ns_s::ST_Xstring& CT_DdeItem::get_name_attr() const
    {    
    if (m_name_attr)
    {
        return *m_name_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_DdeItem::has_ole_attr() const
    {    
    return m_has_ole_attr;
    }

    void CT_DdeItem::set_ole_attr(const XSD::boolean_& _ole_attr)
    {    
    m_has_ole_attr = true;
    m_ole_attr = _ole_attr;
    }

    const XSD::boolean_& CT_DdeItem::get_ole_attr() const
    {    
    return m_ole_attr;
    }

    bool CT_DdeItem::has_advise_attr() const
    {    
    return m_has_advise_attr;
    }

    void CT_DdeItem::set_advise_attr(const XSD::boolean_& _advise_attr)
    {    
    m_has_advise_attr = true;
    m_advise_attr = _advise_attr;
    }

    const XSD::boolean_& CT_DdeItem::get_advise_attr() const
    {    
    return m_advise_attr;
    }

    bool CT_DdeItem::has_preferPic_attr() const
    {    
    return m_has_preferPic_attr;
    }

    void CT_DdeItem::set_preferPic_attr(const XSD::boolean_& _preferPic_attr)
    {    
    m_has_preferPic_attr = true;
    m_preferPic_attr = _preferPic_attr;
    }

    const XSD::boolean_& CT_DdeItem::get_preferPic_attr() const
    {    
    return m_preferPic_attr;
    }

CT_DdeItem* CT_DdeItem::default_instance_ = NULL;

    // CT_DdeValues
    CT_DdeValues::CT_DdeValues()
    :m_has_rows_attr(false),
    m_rows_attr(0),
    m_has_cols_attr(false),
    m_cols_attr(0)
    {
    }
    CT_DdeValues::~CT_DdeValues()
{
    clear();    }
    CT_DdeValue* CT_DdeValues::add_value()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_DdeValue* pNewChild = pChildGroup->mutable_value();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_DdeValues::clear()
    {    
    m_has_rows_attr = false;
    m_rows_attr = 0;
    
    m_has_cols_attr = false;
    m_cols_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_DdeValues::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_rows_attr)
    {
        _outStream << " " << "rows" << "=\"" << m_rows_attr << "\"";
    }
    
    
    if (m_has_cols_attr)
    {
        _outStream << " " << "cols" << "=\"" << m_cols_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_value())
            {
                (*iter)->get_value().toXmlElem("main:value", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_DdeValues& CT_DdeValues::default_instance()
    {    
    if (!CT_DdeValues::default_instance_)
    {
        CT_DdeValues::default_instance_ = new CT_DdeValues();
    }
    return *CT_DdeValues::default_instance_;
    }

    bool CT_DdeValues::has_rows_attr() const
    {    
    return m_has_rows_attr;
    }

    void CT_DdeValues::set_rows_attr(const XSD::unsignedInt_& _rows_attr)
    {    
    m_has_rows_attr = true;
    m_rows_attr = _rows_attr;
    }

    const XSD::unsignedInt_& CT_DdeValues::get_rows_attr() const
    {    
    return m_rows_attr;
    }

    bool CT_DdeValues::has_cols_attr() const
    {    
    return m_has_cols_attr;
    }

    void CT_DdeValues::set_cols_attr(const XSD::unsignedInt_& _cols_attr)
    {    
    m_has_cols_attr = true;
    m_cols_attr = _cols_attr;
    }

    const XSD::unsignedInt_& CT_DdeValues::get_cols_attr() const
    {    
    return m_cols_attr;
    }


    // CT_DdeValues::ChildGroup_1
    CT_DdeValues::ChildGroup_1::ChildGroup_1()
    :m_has_value(false),
    m_value(NULL)
    {
    }
    bool CT_DdeValues::ChildGroup_1::has_value() const
    {    
    return m_has_value;
    }

    CT_DdeValue* CT_DdeValues::ChildGroup_1::mutable_value()
    {    
    
    m_has_value = true;
    if (!m_value)
    {
        m_value = new CT_DdeValue();
    }
    return m_value;
    }

    const CT_DdeValue& CT_DdeValues::ChildGroup_1::get_value() const
    {    
    if (m_value)
    {
        return *m_value;
    }
    return CT_DdeValue::default_instance();
    }

CT_DdeValues* CT_DdeValues::default_instance_ = NULL;

    // CT_DdeValue
    CT_DdeValue::CT_DdeValue()
    :m_has_val(false),
    m_val(NULL),
    m_has_t_attr(false),
    m_t_attr(NULL)
    {
    }
    CT_DdeValue::~CT_DdeValue()
{
    clear();    }
    bool CT_DdeValue::has_val() const
    {    
    return m_has_val;
    }

    ns_s::ST_Xstring* CT_DdeValue::mutable_val()
    {    
    m_has_val = true;
    if (!m_val)
    {
        m_val = new ns_s::ST_Xstring();
    }
    return m_val;
    }

    const ns_s::ST_Xstring& CT_DdeValue::get_val() const
    {    
    if (m_val)
    {
        return *m_val;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    void CT_DdeValue::clear()
    {    
    m_has_t_attr = false;
    
    if (m_t_attr)
    {
        delete m_t_attr;
        m_t_attr = NULL;
    }
    
    }

    void CT_DdeValue::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_t_attr)
    {
        m_t_attr->toXmlAttr("t", _outStream);
    }
    
            _outStream << ">";
            
    if (m_has_val)
    {
        _outStream << "<main:val>" << m_val->toString() << "</main:val>";;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_DdeValue& CT_DdeValue::default_instance()
    {    
    if (!CT_DdeValue::default_instance_)
    {
        CT_DdeValue::default_instance_ = new CT_DdeValue();
    }
    return *CT_DdeValue::default_instance_;
    }

    bool CT_DdeValue::has_t_attr() const
    {    
    return m_has_t_attr;
    }

    void CT_DdeValue::set_t_attr(const ST_DdeValueType& _t_attr)
    {    
    m_has_t_attr = true;
    m_t_attr = new ST_DdeValueType(_t_attr);
    }

    const ST_DdeValueType& CT_DdeValue::get_t_attr() const
    {    
    if (m_t_attr)
    {
        return *m_t_attr;
    }
    return ST_DdeValueType::default_instance();
    }

CT_DdeValue* CT_DdeValue::default_instance_ = NULL;

    // CT_OleLink
    CT_OleLink::CT_OleLink()
    :m_has_oleItems(false),
    m_oleItems(NULL),
    m_has_r_id_attr(false),
    m_r_id_attr(NULL),
    m_has_progId_attr(false),
    m_progId_attr(NULL)
    {
    }
    CT_OleLink::~CT_OleLink()
{
    clear();    }
    bool CT_OleLink::has_oleItems() const
    {    
    return m_has_oleItems;
    }

    CT_OleItems* CT_OleLink::mutable_oleItems()
    {    
    m_has_oleItems = true;
    if (!m_oleItems)
    {
        m_oleItems = new CT_OleItems();
    }
    return m_oleItems;
    }

    const CT_OleItems& CT_OleLink::get_oleItems() const
    {    
    if (m_oleItems)
    {
        return *m_oleItems;
    }
    return CT_OleItems::default_instance();
    }

    void CT_OleLink::clear()
    {    
    m_has_r_id_attr = false;
    
    if (m_r_id_attr)
    {
        delete m_r_id_attr;
        m_r_id_attr = NULL;
    }
    
    
    m_has_progId_attr = false;
    
    if (m_progId_attr)
    {
        delete m_progId_attr;
        m_progId_attr = NULL;
    }
    
    }

    void CT_OleLink::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_r_id_attr)
    {
        m_r_id_attr->toXmlAttr("r:id", _outStream);
    }
    
    
    if (m_has_progId_attr)
    {
        m_progId_attr->toXmlAttr("progId", _outStream);
    }
    
            _outStream << ">";
            
    if (m_has_oleItems)
    {
        m_oleItems->toXmlElem("main:oleItems", "", _outStream);;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_OleLink& CT_OleLink::default_instance()
    {    
    if (!CT_OleLink::default_instance_)
    {
        CT_OleLink::default_instance_ = new CT_OleLink();
    }
    return *CT_OleLink::default_instance_;
    }

    bool CT_OleLink::has_r_id_attr() const
    {    
    return m_has_r_id_attr;
    }

    void CT_OleLink::set_r_id_attr(const ns_r::ST_RelationshipId& _r_id_attr)
    {    
    m_has_r_id_attr = true;
    m_r_id_attr = new ns_r::ST_RelationshipId(_r_id_attr);
    }

    const ns_r::ST_RelationshipId& CT_OleLink::get_r_id_attr() const
    {    
    if (m_r_id_attr)
    {
        return *m_r_id_attr;
    }
    return ns_r::ST_RelationshipId::default_instance();
    }

    bool CT_OleLink::has_progId_attr() const
    {    
    return m_has_progId_attr;
    }

    void CT_OleLink::set_progId_attr(const ns_s::ST_Xstring& _progId_attr)
    {    
    m_has_progId_attr = true;
    m_progId_attr = new ns_s::ST_Xstring(_progId_attr);
    }

    const ns_s::ST_Xstring& CT_OleLink::get_progId_attr() const
    {    
    if (m_progId_attr)
    {
        return *m_progId_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

CT_OleLink* CT_OleLink::default_instance_ = NULL;

    // CT_OleItems
    CT_OleItems::CT_OleItems()

    {
    }
    CT_OleItems::~CT_OleItems()
{
    clear();    }
    CT_OleItem* CT_OleItems::add_oleItem()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OleItem* pNewChild = pChildGroup->mutable_oleItem();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_OleItems::clear()
    {    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_OleItems::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_oleItem())
            {
                (*iter)->get_oleItem().toXmlElem("main:oleItem", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_OleItems& CT_OleItems::default_instance()
    {    
    if (!CT_OleItems::default_instance_)
    {
        CT_OleItems::default_instance_ = new CT_OleItems();
    }
    return *CT_OleItems::default_instance_;
    }


    // CT_OleItems::ChildGroup_1
    CT_OleItems::ChildGroup_1::ChildGroup_1()
    :m_has_oleItem(false),
    m_oleItem(NULL)
    {
    }
    bool CT_OleItems::ChildGroup_1::has_oleItem() const
    {    
    return m_has_oleItem;
    }

    CT_OleItem* CT_OleItems::ChildGroup_1::mutable_oleItem()
    {    
    
    m_has_oleItem = true;
    if (!m_oleItem)
    {
        m_oleItem = new CT_OleItem();
    }
    return m_oleItem;
    }

    const CT_OleItem& CT_OleItems::ChildGroup_1::get_oleItem() const
    {    
    if (m_oleItem)
    {
        return *m_oleItem;
    }
    return CT_OleItem::default_instance();
    }

CT_OleItems* CT_OleItems::default_instance_ = NULL;

    // CT_OleItem
    CT_OleItem::CT_OleItem()
    :m_has_name_attr(false),
    m_name_attr(NULL),
    m_has_icon_attr(false),
    m_icon_attr(false),
    m_has_advise_attr(false),
    m_advise_attr(false),
    m_has_preferPic_attr(false),
    m_preferPic_attr(false)
    {
    }
    CT_OleItem::~CT_OleItem()
{
    clear();    }
    void CT_OleItem::clear()
    {    
    m_has_name_attr = false;
    
    if (m_name_attr)
    {
        delete m_name_attr;
        m_name_attr = NULL;
    }
    
    
    m_has_icon_attr = false;
    m_icon_attr = false;
    
    m_has_advise_attr = false;
    m_advise_attr = false;
    
    m_has_preferPic_attr = false;
    m_preferPic_attr = false;
    }

    void CT_OleItem::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_name_attr)
    {
        m_name_attr->toXmlAttr("name", _outStream);
    }
    
    
    if (m_has_icon_attr)
    {
        _outStream << " " << "icon" << "=\"" << XSD::XMLBooleanStr(m_icon_attr) << "\"";
    }
    
    
    if (m_has_advise_attr)
    {
        _outStream << " " << "advise" << "=\"" << XSD::XMLBooleanStr(m_advise_attr) << "\"";
    }
    
    
    if (m_has_preferPic_attr)
    {
        _outStream << " " << "preferPic" << "=\"" << XSD::XMLBooleanStr(m_preferPic_attr) << "\"";
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_OleItem& CT_OleItem::default_instance()
    {    
    if (!CT_OleItem::default_instance_)
    {
        CT_OleItem::default_instance_ = new CT_OleItem();
    }
    return *CT_OleItem::default_instance_;
    }

    bool CT_OleItem::has_name_attr() const
    {    
    return m_has_name_attr;
    }

    void CT_OleItem::set_name_attr(const ns_s::ST_Xstring& _name_attr)
    {    
    m_has_name_attr = true;
    m_name_attr = new ns_s::ST_Xstring(_name_attr);
    }

    const ns_s::ST_Xstring& CT_OleItem::get_name_attr() const
    {    
    if (m_name_attr)
    {
        return *m_name_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_OleItem::has_icon_attr() const
    {    
    return m_has_icon_attr;
    }

    void CT_OleItem::set_icon_attr(const XSD::boolean_& _icon_attr)
    {    
    m_has_icon_attr = true;
    m_icon_attr = _icon_attr;
    }

    const XSD::boolean_& CT_OleItem::get_icon_attr() const
    {    
    return m_icon_attr;
    }

    bool CT_OleItem::has_advise_attr() const
    {    
    return m_has_advise_attr;
    }

    void CT_OleItem::set_advise_attr(const XSD::boolean_& _advise_attr)
    {    
    m_has_advise_attr = true;
    m_advise_attr = _advise_attr;
    }

    const XSD::boolean_& CT_OleItem::get_advise_attr() const
    {    
    return m_advise_attr;
    }

    bool CT_OleItem::has_preferPic_attr() const
    {    
    return m_has_preferPic_attr;
    }

    void CT_OleItem::set_preferPic_attr(const XSD::boolean_& _preferPic_attr)
    {    
    m_has_preferPic_attr = true;
    m_preferPic_attr = _preferPic_attr;
    }

    const XSD::boolean_& CT_OleItem::get_preferPic_attr() const
    {    
    return m_preferPic_attr;
    }

CT_OleItem* CT_OleItem::default_instance_ = NULL;

    // CT_Table
    CT_Table::CT_Table()
    :m_has_autoFilter(false),
    m_autoFilter(NULL),
    m_has_sortState(false),
    m_sortState(NULL),
    m_has_tableColumns(false),
    m_tableColumns(NULL),
    m_has_tableStyleInfo(false),
    m_tableStyleInfo(NULL),
    m_has_extLst(false),
    m_extLst(NULL),
    m_has_id_attr(false),
    m_id_attr(0),
    m_has_name_attr(false),
    m_name_attr(NULL),
    m_has_displayName_attr(false),
    m_displayName_attr(NULL),
    m_has_comment_attr(false),
    m_comment_attr(NULL),
    m_has_ref_attr(false),
    m_ref_attr(NULL),
    m_has_tableType_attr(false),
    m_tableType_attr(NULL),
    m_has_headerRowCount_attr(false),
    m_headerRowCount_attr(0),
    m_has_insertRow_attr(false),
    m_insertRow_attr(false),
    m_has_insertRowShift_attr(false),
    m_insertRowShift_attr(false),
    m_has_totalsRowCount_attr(false),
    m_totalsRowCount_attr(0),
    m_has_totalsRowShown_attr(false),
    m_totalsRowShown_attr(false),
    m_has_published_attr(false),
    m_published_attr(false),
    m_has_headerRowDxfId_attr(false),
    m_headerRowDxfId_attr(NULL),
    m_has_dataDxfId_attr(false),
    m_dataDxfId_attr(NULL),
    m_has_totalsRowDxfId_attr(false),
    m_totalsRowDxfId_attr(NULL),
    m_has_headerRowBorderDxfId_attr(false),
    m_headerRowBorderDxfId_attr(NULL),
    m_has_tableBorderDxfId_attr(false),
    m_tableBorderDxfId_attr(NULL),
    m_has_totalsRowBorderDxfId_attr(false),
    m_totalsRowBorderDxfId_attr(NULL),
    m_has_headerRowCellStyle_attr(false),
    m_headerRowCellStyle_attr(NULL),
    m_has_dataCellStyle_attr(false),
    m_dataCellStyle_attr(NULL),
    m_has_totalsRowCellStyle_attr(false),
    m_totalsRowCellStyle_attr(NULL),
    m_has_connectionId_attr(false),
    m_connectionId_attr(0)
    {
    }
    CT_Table::~CT_Table()
{
    clear();    }
    bool CT_Table::has_autoFilter() const
    {    
    return m_has_autoFilter;
    }

    CT_AutoFilter* CT_Table::mutable_autoFilter()
    {    
    m_has_autoFilter = true;
    if (!m_autoFilter)
    {
        m_autoFilter = new CT_AutoFilter();
    }
    return m_autoFilter;
    }

    const CT_AutoFilter& CT_Table::get_autoFilter() const
    {    
    if (m_autoFilter)
    {
        return *m_autoFilter;
    }
    return CT_AutoFilter::default_instance();
    }

    bool CT_Table::has_sortState() const
    {    
    return m_has_sortState;
    }

    CT_SortState* CT_Table::mutable_sortState()
    {    
    m_has_sortState = true;
    if (!m_sortState)
    {
        m_sortState = new CT_SortState();
    }
    return m_sortState;
    }

    const CT_SortState& CT_Table::get_sortState() const
    {    
    if (m_sortState)
    {
        return *m_sortState;
    }
    return CT_SortState::default_instance();
    }

    bool CT_Table::has_tableColumns() const
    {    
    return m_has_tableColumns;
    }

    CT_TableColumns* CT_Table::mutable_tableColumns()
    {    
    m_has_tableColumns = true;
    if (!m_tableColumns)
    {
        m_tableColumns = new CT_TableColumns();
    }
    return m_tableColumns;
    }

    const CT_TableColumns& CT_Table::get_tableColumns() const
    {    
    if (m_tableColumns)
    {
        return *m_tableColumns;
    }
    return CT_TableColumns::default_instance();
    }

    bool CT_Table::has_tableStyleInfo() const
    {    
    return m_has_tableStyleInfo;
    }

    CT_TableStyleInfo* CT_Table::mutable_tableStyleInfo()
    {    
    m_has_tableStyleInfo = true;
    if (!m_tableStyleInfo)
    {
        m_tableStyleInfo = new CT_TableStyleInfo();
    }
    return m_tableStyleInfo;
    }

    const CT_TableStyleInfo& CT_Table::get_tableStyleInfo() const
    {    
    if (m_tableStyleInfo)
    {
        return *m_tableStyleInfo;
    }
    return CT_TableStyleInfo::default_instance();
    }

    bool CT_Table::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* CT_Table::mutable_extLst()
    {    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& CT_Table::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

    void CT_Table::clear()
    {    
    m_has_id_attr = false;
    m_id_attr = 0;
    
    m_has_name_attr = false;
    
    if (m_name_attr)
    {
        delete m_name_attr;
        m_name_attr = NULL;
    }
    
    
    m_has_displayName_attr = false;
    
    if (m_displayName_attr)
    {
        delete m_displayName_attr;
        m_displayName_attr = NULL;
    }
    
    
    m_has_comment_attr = false;
    
    if (m_comment_attr)
    {
        delete m_comment_attr;
        m_comment_attr = NULL;
    }
    
    
    m_has_ref_attr = false;
    
    if (m_ref_attr)
    {
        delete m_ref_attr;
        m_ref_attr = NULL;
    }
    
    
    m_has_tableType_attr = false;
    
    if (m_tableType_attr)
    {
        delete m_tableType_attr;
        m_tableType_attr = NULL;
    }
    
    
    m_has_headerRowCount_attr = false;
    m_headerRowCount_attr = 0;
    
    m_has_insertRow_attr = false;
    m_insertRow_attr = false;
    
    m_has_insertRowShift_attr = false;
    m_insertRowShift_attr = false;
    
    m_has_totalsRowCount_attr = false;
    m_totalsRowCount_attr = 0;
    
    m_has_totalsRowShown_attr = false;
    m_totalsRowShown_attr = false;
    
    m_has_published_attr = false;
    m_published_attr = false;
    
    m_has_headerRowDxfId_attr = false;
    
    if (m_headerRowDxfId_attr)
    {
        delete m_headerRowDxfId_attr;
        m_headerRowDxfId_attr = NULL;
    }
    
    
    m_has_dataDxfId_attr = false;
    
    if (m_dataDxfId_attr)
    {
        delete m_dataDxfId_attr;
        m_dataDxfId_attr = NULL;
    }
    
    
    m_has_totalsRowDxfId_attr = false;
    
    if (m_totalsRowDxfId_attr)
    {
        delete m_totalsRowDxfId_attr;
        m_totalsRowDxfId_attr = NULL;
    }
    
    
    m_has_headerRowBorderDxfId_attr = false;
    
    if (m_headerRowBorderDxfId_attr)
    {
        delete m_headerRowBorderDxfId_attr;
        m_headerRowBorderDxfId_attr = NULL;
    }
    
    
    m_has_tableBorderDxfId_attr = false;
    
    if (m_tableBorderDxfId_attr)
    {
        delete m_tableBorderDxfId_attr;
        m_tableBorderDxfId_attr = NULL;
    }
    
    
    m_has_totalsRowBorderDxfId_attr = false;
    
    if (m_totalsRowBorderDxfId_attr)
    {
        delete m_totalsRowBorderDxfId_attr;
        m_totalsRowBorderDxfId_attr = NULL;
    }
    
    
    m_has_headerRowCellStyle_attr = false;
    
    if (m_headerRowCellStyle_attr)
    {
        delete m_headerRowCellStyle_attr;
        m_headerRowCellStyle_attr = NULL;
    }
    
    
    m_has_dataCellStyle_attr = false;
    
    if (m_dataCellStyle_attr)
    {
        delete m_dataCellStyle_attr;
        m_dataCellStyle_attr = NULL;
    }
    
    
    m_has_totalsRowCellStyle_attr = false;
    
    if (m_totalsRowCellStyle_attr)
    {
        delete m_totalsRowCellStyle_attr;
        m_totalsRowCellStyle_attr = NULL;
    }
    
    
    m_has_connectionId_attr = false;
    m_connectionId_attr = 0;
    }

    void CT_Table::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_id_attr)
    {
        _outStream << " " << "id" << "=\"" << m_id_attr << "\"";
    }
    
    
    if (m_has_name_attr)
    {
        m_name_attr->toXmlAttr("name", _outStream);
    }
    
    
    if (m_has_displayName_attr)
    {
        m_displayName_attr->toXmlAttr("displayName", _outStream);
    }
    
    
    if (m_has_comment_attr)
    {
        m_comment_attr->toXmlAttr("comment", _outStream);
    }
    
    
    if (m_has_ref_attr)
    {
        m_ref_attr->toXmlAttr("ref", _outStream);
    }
    
    
    if (m_has_tableType_attr)
    {
        m_tableType_attr->toXmlAttr("tableType", _outStream);
    }
    
    
    if (m_has_headerRowCount_attr)
    {
        _outStream << " " << "headerRowCount" << "=\"" << m_headerRowCount_attr << "\"";
    }
    
    
    if (m_has_insertRow_attr)
    {
        _outStream << " " << "insertRow" << "=\"" << XSD::XMLBooleanStr(m_insertRow_attr) << "\"";
    }
    
    
    if (m_has_insertRowShift_attr)
    {
        _outStream << " " << "insertRowShift" << "=\"" << XSD::XMLBooleanStr(m_insertRowShift_attr) << "\"";
    }
    
    
    if (m_has_totalsRowCount_attr)
    {
        _outStream << " " << "totalsRowCount" << "=\"" << m_totalsRowCount_attr << "\"";
    }
    
    
    if (m_has_totalsRowShown_attr)
    {
        _outStream << " " << "totalsRowShown" << "=\"" << XSD::XMLBooleanStr(m_totalsRowShown_attr) << "\"";
    }
    
    
    if (m_has_published_attr)
    {
        _outStream << " " << "published" << "=\"" << XSD::XMLBooleanStr(m_published_attr) << "\"";
    }
    
    
    if (m_has_headerRowDxfId_attr)
    {
        m_headerRowDxfId_attr->toXmlAttr("headerRowDxfId", _outStream);
    }
    
    
    if (m_has_dataDxfId_attr)
    {
        m_dataDxfId_attr->toXmlAttr("dataDxfId", _outStream);
    }
    
    
    if (m_has_totalsRowDxfId_attr)
    {
        m_totalsRowDxfId_attr->toXmlAttr("totalsRowDxfId", _outStream);
    }
    
    
    if (m_has_headerRowBorderDxfId_attr)
    {
        m_headerRowBorderDxfId_attr->toXmlAttr("headerRowBorderDxfId", _outStream);
    }
    
    
    if (m_has_tableBorderDxfId_attr)
    {
        m_tableBorderDxfId_attr->toXmlAttr("tableBorderDxfId", _outStream);
    }
    
    
    if (m_has_totalsRowBorderDxfId_attr)
    {
        m_totalsRowBorderDxfId_attr->toXmlAttr("totalsRowBorderDxfId", _outStream);
    }
    
    
    if (m_has_headerRowCellStyle_attr)
    {
        m_headerRowCellStyle_attr->toXmlAttr("headerRowCellStyle", _outStream);
    }
    
    
    if (m_has_dataCellStyle_attr)
    {
        m_dataCellStyle_attr->toXmlAttr("dataCellStyle", _outStream);
    }
    
    
    if (m_has_totalsRowCellStyle_attr)
    {
        m_totalsRowCellStyle_attr->toXmlAttr("totalsRowCellStyle", _outStream);
    }
    
    
    if (m_has_connectionId_attr)
    {
        _outStream << " " << "connectionId" << "=\"" << m_connectionId_attr << "\"";
    }
    
            _outStream << ">";
            
    if (m_has_autoFilter)
    {
        m_autoFilter->toXmlElem("main:autoFilter", "", _outStream);;
    }
    
    if (m_has_sortState)
    {
        m_sortState->toXmlElem("main:sortState", "", _outStream);;
    }
    
    if (m_has_tableColumns)
    {
        m_tableColumns->toXmlElem("main:tableColumns", "", _outStream);;
    }
    
    if (m_has_tableStyleInfo)
    {
        m_tableStyleInfo->toXmlElem("main:tableStyleInfo", "", _outStream);;
    }
    
    if (m_has_extLst)
    {
        m_extLst->toXmlElem("main:extLst", "", _outStream);;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_Table& CT_Table::default_instance()
    {    
    if (!CT_Table::default_instance_)
    {
        CT_Table::default_instance_ = new CT_Table();
    }
    return *CT_Table::default_instance_;
    }

    bool CT_Table::has_id_attr() const
    {    
    return m_has_id_attr;
    }

    void CT_Table::set_id_attr(const XSD::unsignedInt_& _id_attr)
    {    
    m_has_id_attr = true;
    m_id_attr = _id_attr;
    }

    const XSD::unsignedInt_& CT_Table::get_id_attr() const
    {    
    return m_id_attr;
    }

    bool CT_Table::has_name_attr() const
    {    
    return m_has_name_attr;
    }

    void CT_Table::set_name_attr(const ns_s::ST_Xstring& _name_attr)
    {    
    m_has_name_attr = true;
    m_name_attr = new ns_s::ST_Xstring(_name_attr);
    }

    const ns_s::ST_Xstring& CT_Table::get_name_attr() const
    {    
    if (m_name_attr)
    {
        return *m_name_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_Table::has_displayName_attr() const
    {    
    return m_has_displayName_attr;
    }

    void CT_Table::set_displayName_attr(const ns_s::ST_Xstring& _displayName_attr)
    {    
    m_has_displayName_attr = true;
    m_displayName_attr = new ns_s::ST_Xstring(_displayName_attr);
    }

    const ns_s::ST_Xstring& CT_Table::get_displayName_attr() const
    {    
    if (m_displayName_attr)
    {
        return *m_displayName_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_Table::has_comment_attr() const
    {    
    return m_has_comment_attr;
    }

    void CT_Table::set_comment_attr(const ns_s::ST_Xstring& _comment_attr)
    {    
    m_has_comment_attr = true;
    m_comment_attr = new ns_s::ST_Xstring(_comment_attr);
    }

    const ns_s::ST_Xstring& CT_Table::get_comment_attr() const
    {    
    if (m_comment_attr)
    {
        return *m_comment_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_Table::has_ref_attr() const
    {    
    return m_has_ref_attr;
    }

    void CT_Table::set_ref_attr(const ST_Ref& _ref_attr)
    {    
    m_has_ref_attr = true;
    m_ref_attr = new ST_Ref(_ref_attr);
    }

    const ST_Ref& CT_Table::get_ref_attr() const
    {    
    if (m_ref_attr)
    {
        return *m_ref_attr;
    }
    return ST_Ref::default_instance();
    }

    bool CT_Table::has_tableType_attr() const
    {    
    return m_has_tableType_attr;
    }

    void CT_Table::set_tableType_attr(const ST_TableType& _tableType_attr)
    {    
    m_has_tableType_attr = true;
    m_tableType_attr = new ST_TableType(_tableType_attr);
    }

    const ST_TableType& CT_Table::get_tableType_attr() const
    {    
    if (m_tableType_attr)
    {
        return *m_tableType_attr;
    }
    return ST_TableType::default_instance();
    }

    bool CT_Table::has_headerRowCount_attr() const
    {    
    return m_has_headerRowCount_attr;
    }

    void CT_Table::set_headerRowCount_attr(const XSD::unsignedInt_& _headerRowCount_attr)
    {    
    m_has_headerRowCount_attr = true;
    m_headerRowCount_attr = _headerRowCount_attr;
    }

    const XSD::unsignedInt_& CT_Table::get_headerRowCount_attr() const
    {    
    return m_headerRowCount_attr;
    }

    bool CT_Table::has_insertRow_attr() const
    {    
    return m_has_insertRow_attr;
    }

    void CT_Table::set_insertRow_attr(const XSD::boolean_& _insertRow_attr)
    {    
    m_has_insertRow_attr = true;
    m_insertRow_attr = _insertRow_attr;
    }

    const XSD::boolean_& CT_Table::get_insertRow_attr() const
    {    
    return m_insertRow_attr;
    }

    bool CT_Table::has_insertRowShift_attr() const
    {    
    return m_has_insertRowShift_attr;
    }

    void CT_Table::set_insertRowShift_attr(const XSD::boolean_& _insertRowShift_attr)
    {    
    m_has_insertRowShift_attr = true;
    m_insertRowShift_attr = _insertRowShift_attr;
    }

    const XSD::boolean_& CT_Table::get_insertRowShift_attr() const
    {    
    return m_insertRowShift_attr;
    }

    bool CT_Table::has_totalsRowCount_attr() const
    {    
    return m_has_totalsRowCount_attr;
    }

    void CT_Table::set_totalsRowCount_attr(const XSD::unsignedInt_& _totalsRowCount_attr)
    {    
    m_has_totalsRowCount_attr = true;
    m_totalsRowCount_attr = _totalsRowCount_attr;
    }

    const XSD::unsignedInt_& CT_Table::get_totalsRowCount_attr() const
    {    
    return m_totalsRowCount_attr;
    }

    bool CT_Table::has_totalsRowShown_attr() const
    {    
    return m_has_totalsRowShown_attr;
    }

    void CT_Table::set_totalsRowShown_attr(const XSD::boolean_& _totalsRowShown_attr)
    {    
    m_has_totalsRowShown_attr = true;
    m_totalsRowShown_attr = _totalsRowShown_attr;
    }

    const XSD::boolean_& CT_Table::get_totalsRowShown_attr() const
    {    
    return m_totalsRowShown_attr;
    }

    bool CT_Table::has_published_attr() const
    {    
    return m_has_published_attr;
    }

    void CT_Table::set_published_attr(const XSD::boolean_& _published_attr)
    {    
    m_has_published_attr = true;
    m_published_attr = _published_attr;
    }

    const XSD::boolean_& CT_Table::get_published_attr() const
    {    
    return m_published_attr;
    }

    bool CT_Table::has_headerRowDxfId_attr() const
    {    
    return m_has_headerRowDxfId_attr;
    }

    void CT_Table::set_headerRowDxfId_attr(const ST_DxfId& _headerRowDxfId_attr)
    {    
    m_has_headerRowDxfId_attr = true;
    m_headerRowDxfId_attr = new ST_DxfId(_headerRowDxfId_attr);
    }

    const ST_DxfId& CT_Table::get_headerRowDxfId_attr() const
    {    
    if (m_headerRowDxfId_attr)
    {
        return *m_headerRowDxfId_attr;
    }
    return ST_DxfId::default_instance();
    }

    bool CT_Table::has_dataDxfId_attr() const
    {    
    return m_has_dataDxfId_attr;
    }

    void CT_Table::set_dataDxfId_attr(const ST_DxfId& _dataDxfId_attr)
    {    
    m_has_dataDxfId_attr = true;
    m_dataDxfId_attr = new ST_DxfId(_dataDxfId_attr);
    }

    const ST_DxfId& CT_Table::get_dataDxfId_attr() const
    {    
    if (m_dataDxfId_attr)
    {
        return *m_dataDxfId_attr;
    }
    return ST_DxfId::default_instance();
    }

    bool CT_Table::has_totalsRowDxfId_attr() const
    {    
    return m_has_totalsRowDxfId_attr;
    }

    void CT_Table::set_totalsRowDxfId_attr(const ST_DxfId& _totalsRowDxfId_attr)
    {    
    m_has_totalsRowDxfId_attr = true;
    m_totalsRowDxfId_attr = new ST_DxfId(_totalsRowDxfId_attr);
    }

    const ST_DxfId& CT_Table::get_totalsRowDxfId_attr() const
    {    
    if (m_totalsRowDxfId_attr)
    {
        return *m_totalsRowDxfId_attr;
    }
    return ST_DxfId::default_instance();
    }

    bool CT_Table::has_headerRowBorderDxfId_attr() const
    {    
    return m_has_headerRowBorderDxfId_attr;
    }

    void CT_Table::set_headerRowBorderDxfId_attr(const ST_DxfId& _headerRowBorderDxfId_attr)
    {    
    m_has_headerRowBorderDxfId_attr = true;
    m_headerRowBorderDxfId_attr = new ST_DxfId(_headerRowBorderDxfId_attr);
    }

    const ST_DxfId& CT_Table::get_headerRowBorderDxfId_attr() const
    {    
    if (m_headerRowBorderDxfId_attr)
    {
        return *m_headerRowBorderDxfId_attr;
    }
    return ST_DxfId::default_instance();
    }

    bool CT_Table::has_tableBorderDxfId_attr() const
    {    
    return m_has_tableBorderDxfId_attr;
    }

    void CT_Table::set_tableBorderDxfId_attr(const ST_DxfId& _tableBorderDxfId_attr)
    {    
    m_has_tableBorderDxfId_attr = true;
    m_tableBorderDxfId_attr = new ST_DxfId(_tableBorderDxfId_attr);
    }

    const ST_DxfId& CT_Table::get_tableBorderDxfId_attr() const
    {    
    if (m_tableBorderDxfId_attr)
    {
        return *m_tableBorderDxfId_attr;
    }
    return ST_DxfId::default_instance();
    }

    bool CT_Table::has_totalsRowBorderDxfId_attr() const
    {    
    return m_has_totalsRowBorderDxfId_attr;
    }

    void CT_Table::set_totalsRowBorderDxfId_attr(const ST_DxfId& _totalsRowBorderDxfId_attr)
    {    
    m_has_totalsRowBorderDxfId_attr = true;
    m_totalsRowBorderDxfId_attr = new ST_DxfId(_totalsRowBorderDxfId_attr);
    }

    const ST_DxfId& CT_Table::get_totalsRowBorderDxfId_attr() const
    {    
    if (m_totalsRowBorderDxfId_attr)
    {
        return *m_totalsRowBorderDxfId_attr;
    }
    return ST_DxfId::default_instance();
    }

    bool CT_Table::has_headerRowCellStyle_attr() const
    {    
    return m_has_headerRowCellStyle_attr;
    }

    void CT_Table::set_headerRowCellStyle_attr(const ns_s::ST_Xstring& _headerRowCellStyle_attr)
    {    
    m_has_headerRowCellStyle_attr = true;
    m_headerRowCellStyle_attr = new ns_s::ST_Xstring(_headerRowCellStyle_attr);
    }

    const ns_s::ST_Xstring& CT_Table::get_headerRowCellStyle_attr() const
    {    
    if (m_headerRowCellStyle_attr)
    {
        return *m_headerRowCellStyle_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_Table::has_dataCellStyle_attr() const
    {    
    return m_has_dataCellStyle_attr;
    }

    void CT_Table::set_dataCellStyle_attr(const ns_s::ST_Xstring& _dataCellStyle_attr)
    {    
    m_has_dataCellStyle_attr = true;
    m_dataCellStyle_attr = new ns_s::ST_Xstring(_dataCellStyle_attr);
    }

    const ns_s::ST_Xstring& CT_Table::get_dataCellStyle_attr() const
    {    
    if (m_dataCellStyle_attr)
    {
        return *m_dataCellStyle_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_Table::has_totalsRowCellStyle_attr() const
    {    
    return m_has_totalsRowCellStyle_attr;
    }

    void CT_Table::set_totalsRowCellStyle_attr(const ns_s::ST_Xstring& _totalsRowCellStyle_attr)
    {    
    m_has_totalsRowCellStyle_attr = true;
    m_totalsRowCellStyle_attr = new ns_s::ST_Xstring(_totalsRowCellStyle_attr);
    }

    const ns_s::ST_Xstring& CT_Table::get_totalsRowCellStyle_attr() const
    {    
    if (m_totalsRowCellStyle_attr)
    {
        return *m_totalsRowCellStyle_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_Table::has_connectionId_attr() const
    {    
    return m_has_connectionId_attr;
    }

    void CT_Table::set_connectionId_attr(const XSD::unsignedInt_& _connectionId_attr)
    {    
    m_has_connectionId_attr = true;
    m_connectionId_attr = _connectionId_attr;
    }

    const XSD::unsignedInt_& CT_Table::get_connectionId_attr() const
    {    
    return m_connectionId_attr;
    }

CT_Table* CT_Table::default_instance_ = NULL;

    // CT_TableStyleInfo
    CT_TableStyleInfo::CT_TableStyleInfo()
    :m_has_name_attr(false),
    m_name_attr(NULL),
    m_has_showFirstColumn_attr(false),
    m_showFirstColumn_attr(false),
    m_has_showLastColumn_attr(false),
    m_showLastColumn_attr(false),
    m_has_showRowStripes_attr(false),
    m_showRowStripes_attr(false),
    m_has_showColumnStripes_attr(false),
    m_showColumnStripes_attr(false)
    {
    }
    CT_TableStyleInfo::~CT_TableStyleInfo()
{
    clear();    }
    void CT_TableStyleInfo::clear()
    {    
    m_has_name_attr = false;
    
    if (m_name_attr)
    {
        delete m_name_attr;
        m_name_attr = NULL;
    }
    
    
    m_has_showFirstColumn_attr = false;
    m_showFirstColumn_attr = false;
    
    m_has_showLastColumn_attr = false;
    m_showLastColumn_attr = false;
    
    m_has_showRowStripes_attr = false;
    m_showRowStripes_attr = false;
    
    m_has_showColumnStripes_attr = false;
    m_showColumnStripes_attr = false;
    }

    void CT_TableStyleInfo::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_name_attr)
    {
        m_name_attr->toXmlAttr("name", _outStream);
    }
    
    
    if (m_has_showFirstColumn_attr)
    {
        _outStream << " " << "showFirstColumn" << "=\"" << XSD::XMLBooleanStr(m_showFirstColumn_attr) << "\"";
    }
    
    
    if (m_has_showLastColumn_attr)
    {
        _outStream << " " << "showLastColumn" << "=\"" << XSD::XMLBooleanStr(m_showLastColumn_attr) << "\"";
    }
    
    
    if (m_has_showRowStripes_attr)
    {
        _outStream << " " << "showRowStripes" << "=\"" << XSD::XMLBooleanStr(m_showRowStripes_attr) << "\"";
    }
    
    
    if (m_has_showColumnStripes_attr)
    {
        _outStream << " " << "showColumnStripes" << "=\"" << XSD::XMLBooleanStr(m_showColumnStripes_attr) << "\"";
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_TableStyleInfo& CT_TableStyleInfo::default_instance()
    {    
    if (!CT_TableStyleInfo::default_instance_)
    {
        CT_TableStyleInfo::default_instance_ = new CT_TableStyleInfo();
    }
    return *CT_TableStyleInfo::default_instance_;
    }

    bool CT_TableStyleInfo::has_name_attr() const
    {    
    return m_has_name_attr;
    }

    void CT_TableStyleInfo::set_name_attr(const ns_s::ST_Xstring& _name_attr)
    {    
    m_has_name_attr = true;
    m_name_attr = new ns_s::ST_Xstring(_name_attr);
    }

    const ns_s::ST_Xstring& CT_TableStyleInfo::get_name_attr() const
    {    
    if (m_name_attr)
    {
        return *m_name_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_TableStyleInfo::has_showFirstColumn_attr() const
    {    
    return m_has_showFirstColumn_attr;
    }

    void CT_TableStyleInfo::set_showFirstColumn_attr(const XSD::boolean_& _showFirstColumn_attr)
    {    
    m_has_showFirstColumn_attr = true;
    m_showFirstColumn_attr = _showFirstColumn_attr;
    }

    const XSD::boolean_& CT_TableStyleInfo::get_showFirstColumn_attr() const
    {    
    return m_showFirstColumn_attr;
    }

    bool CT_TableStyleInfo::has_showLastColumn_attr() const
    {    
    return m_has_showLastColumn_attr;
    }

    void CT_TableStyleInfo::set_showLastColumn_attr(const XSD::boolean_& _showLastColumn_attr)
    {    
    m_has_showLastColumn_attr = true;
    m_showLastColumn_attr = _showLastColumn_attr;
    }

    const XSD::boolean_& CT_TableStyleInfo::get_showLastColumn_attr() const
    {    
    return m_showLastColumn_attr;
    }

    bool CT_TableStyleInfo::has_showRowStripes_attr() const
    {    
    return m_has_showRowStripes_attr;
    }

    void CT_TableStyleInfo::set_showRowStripes_attr(const XSD::boolean_& _showRowStripes_attr)
    {    
    m_has_showRowStripes_attr = true;
    m_showRowStripes_attr = _showRowStripes_attr;
    }

    const XSD::boolean_& CT_TableStyleInfo::get_showRowStripes_attr() const
    {    
    return m_showRowStripes_attr;
    }

    bool CT_TableStyleInfo::has_showColumnStripes_attr() const
    {    
    return m_has_showColumnStripes_attr;
    }

    void CT_TableStyleInfo::set_showColumnStripes_attr(const XSD::boolean_& _showColumnStripes_attr)
    {    
    m_has_showColumnStripes_attr = true;
    m_showColumnStripes_attr = _showColumnStripes_attr;
    }

    const XSD::boolean_& CT_TableStyleInfo::get_showColumnStripes_attr() const
    {    
    return m_showColumnStripes_attr;
    }

CT_TableStyleInfo* CT_TableStyleInfo::default_instance_ = NULL;

    // CT_TableColumns
    CT_TableColumns::CT_TableColumns()
    :m_has_count_attr(false),
    m_count_attr(0)
    {
    }
    CT_TableColumns::~CT_TableColumns()
{
    clear();    }
    CT_TableColumn* CT_TableColumns::add_tableColumn()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_TableColumn* pNewChild = pChildGroup->mutable_tableColumn();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_TableColumns::clear()
    {    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_TableColumns::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_tableColumn())
            {
                (*iter)->get_tableColumn().toXmlElem("main:tableColumn", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_TableColumns& CT_TableColumns::default_instance()
    {    
    if (!CT_TableColumns::default_instance_)
    {
        CT_TableColumns::default_instance_ = new CT_TableColumns();
    }
    return *CT_TableColumns::default_instance_;
    }

    bool CT_TableColumns::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void CT_TableColumns::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& CT_TableColumns::get_count_attr() const
    {    
    return m_count_attr;
    }


    // CT_TableColumns::ChildGroup_1
    CT_TableColumns::ChildGroup_1::ChildGroup_1()
    :m_has_tableColumn(false),
    m_tableColumn(NULL)
    {
    }
    bool CT_TableColumns::ChildGroup_1::has_tableColumn() const
    {    
    return m_has_tableColumn;
    }

    CT_TableColumn* CT_TableColumns::ChildGroup_1::mutable_tableColumn()
    {    
    
    m_has_tableColumn = true;
    if (!m_tableColumn)
    {
        m_tableColumn = new CT_TableColumn();
    }
    return m_tableColumn;
    }

    const CT_TableColumn& CT_TableColumns::ChildGroup_1::get_tableColumn() const
    {    
    if (m_tableColumn)
    {
        return *m_tableColumn;
    }
    return CT_TableColumn::default_instance();
    }

CT_TableColumns* CT_TableColumns::default_instance_ = NULL;

    // CT_TableColumn
    CT_TableColumn::CT_TableColumn()
    :m_has_calculatedColumnFormula(false),
    m_calculatedColumnFormula(NULL),
    m_has_totalsRowFormula(false),
    m_totalsRowFormula(NULL),
    m_has_xmlColumnPr(false),
    m_xmlColumnPr(NULL),
    m_has_extLst(false),
    m_extLst(NULL),
    m_has_id_attr(false),
    m_id_attr(0),
    m_has_uniqueName_attr(false),
    m_uniqueName_attr(NULL),
    m_has_name_attr(false),
    m_name_attr(NULL),
    m_has_totalsRowFunction_attr(false),
    m_totalsRowFunction_attr(NULL),
    m_has_totalsRowLabel_attr(false),
    m_totalsRowLabel_attr(NULL),
    m_has_queryTableFieldId_attr(false),
    m_queryTableFieldId_attr(0),
    m_has_headerRowDxfId_attr(false),
    m_headerRowDxfId_attr(NULL),
    m_has_dataDxfId_attr(false),
    m_dataDxfId_attr(NULL),
    m_has_totalsRowDxfId_attr(false),
    m_totalsRowDxfId_attr(NULL),
    m_has_headerRowCellStyle_attr(false),
    m_headerRowCellStyle_attr(NULL),
    m_has_dataCellStyle_attr(false),
    m_dataCellStyle_attr(NULL),
    m_has_totalsRowCellStyle_attr(false),
    m_totalsRowCellStyle_attr(NULL)
    {
    }
    CT_TableColumn::~CT_TableColumn()
{
    clear();    }
    bool CT_TableColumn::has_calculatedColumnFormula() const
    {    
    return m_has_calculatedColumnFormula;
    }

    CT_TableFormula* CT_TableColumn::mutable_calculatedColumnFormula()
    {    
    m_has_calculatedColumnFormula = true;
    if (!m_calculatedColumnFormula)
    {
        m_calculatedColumnFormula = new CT_TableFormula();
    }
    return m_calculatedColumnFormula;
    }

    const CT_TableFormula& CT_TableColumn::get_calculatedColumnFormula() const
    {    
    if (m_calculatedColumnFormula)
    {
        return *m_calculatedColumnFormula;
    }
    return CT_TableFormula::default_instance();
    }

    bool CT_TableColumn::has_totalsRowFormula() const
    {    
    return m_has_totalsRowFormula;
    }

    CT_TableFormula* CT_TableColumn::mutable_totalsRowFormula()
    {    
    m_has_totalsRowFormula = true;
    if (!m_totalsRowFormula)
    {
        m_totalsRowFormula = new CT_TableFormula();
    }
    return m_totalsRowFormula;
    }

    const CT_TableFormula& CT_TableColumn::get_totalsRowFormula() const
    {    
    if (m_totalsRowFormula)
    {
        return *m_totalsRowFormula;
    }
    return CT_TableFormula::default_instance();
    }

    bool CT_TableColumn::has_xmlColumnPr() const
    {    
    return m_has_xmlColumnPr;
    }

    CT_XmlColumnPr* CT_TableColumn::mutable_xmlColumnPr()
    {    
    m_has_xmlColumnPr = true;
    if (!m_xmlColumnPr)
    {
        m_xmlColumnPr = new CT_XmlColumnPr();
    }
    return m_xmlColumnPr;
    }

    const CT_XmlColumnPr& CT_TableColumn::get_xmlColumnPr() const
    {    
    if (m_xmlColumnPr)
    {
        return *m_xmlColumnPr;
    }
    return CT_XmlColumnPr::default_instance();
    }

    bool CT_TableColumn::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* CT_TableColumn::mutable_extLst()
    {    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& CT_TableColumn::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

    void CT_TableColumn::clear()
    {    
    m_has_id_attr = false;
    m_id_attr = 0;
    
    m_has_uniqueName_attr = false;
    
    if (m_uniqueName_attr)
    {
        delete m_uniqueName_attr;
        m_uniqueName_attr = NULL;
    }
    
    
    m_has_name_attr = false;
    
    if (m_name_attr)
    {
        delete m_name_attr;
        m_name_attr = NULL;
    }
    
    
    m_has_totalsRowFunction_attr = false;
    
    if (m_totalsRowFunction_attr)
    {
        delete m_totalsRowFunction_attr;
        m_totalsRowFunction_attr = NULL;
    }
    
    
    m_has_totalsRowLabel_attr = false;
    
    if (m_totalsRowLabel_attr)
    {
        delete m_totalsRowLabel_attr;
        m_totalsRowLabel_attr = NULL;
    }
    
    
    m_has_queryTableFieldId_attr = false;
    m_queryTableFieldId_attr = 0;
    
    m_has_headerRowDxfId_attr = false;
    
    if (m_headerRowDxfId_attr)
    {
        delete m_headerRowDxfId_attr;
        m_headerRowDxfId_attr = NULL;
    }
    
    
    m_has_dataDxfId_attr = false;
    
    if (m_dataDxfId_attr)
    {
        delete m_dataDxfId_attr;
        m_dataDxfId_attr = NULL;
    }
    
    
    m_has_totalsRowDxfId_attr = false;
    
    if (m_totalsRowDxfId_attr)
    {
        delete m_totalsRowDxfId_attr;
        m_totalsRowDxfId_attr = NULL;
    }
    
    
    m_has_headerRowCellStyle_attr = false;
    
    if (m_headerRowCellStyle_attr)
    {
        delete m_headerRowCellStyle_attr;
        m_headerRowCellStyle_attr = NULL;
    }
    
    
    m_has_dataCellStyle_attr = false;
    
    if (m_dataCellStyle_attr)
    {
        delete m_dataCellStyle_attr;
        m_dataCellStyle_attr = NULL;
    }
    
    
    m_has_totalsRowCellStyle_attr = false;
    
    if (m_totalsRowCellStyle_attr)
    {
        delete m_totalsRowCellStyle_attr;
        m_totalsRowCellStyle_attr = NULL;
    }
    
    }

    void CT_TableColumn::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_id_attr)
    {
        _outStream << " " << "id" << "=\"" << m_id_attr << "\"";
    }
    
    
    if (m_has_uniqueName_attr)
    {
        m_uniqueName_attr->toXmlAttr("uniqueName", _outStream);
    }
    
    
    if (m_has_name_attr)
    {
        m_name_attr->toXmlAttr("name", _outStream);
    }
    
    
    if (m_has_totalsRowFunction_attr)
    {
        m_totalsRowFunction_attr->toXmlAttr("totalsRowFunction", _outStream);
    }
    
    
    if (m_has_totalsRowLabel_attr)
    {
        m_totalsRowLabel_attr->toXmlAttr("totalsRowLabel", _outStream);
    }
    
    
    if (m_has_queryTableFieldId_attr)
    {
        _outStream << " " << "queryTableFieldId" << "=\"" << m_queryTableFieldId_attr << "\"";
    }
    
    
    if (m_has_headerRowDxfId_attr)
    {
        m_headerRowDxfId_attr->toXmlAttr("headerRowDxfId", _outStream);
    }
    
    
    if (m_has_dataDxfId_attr)
    {
        m_dataDxfId_attr->toXmlAttr("dataDxfId", _outStream);
    }
    
    
    if (m_has_totalsRowDxfId_attr)
    {
        m_totalsRowDxfId_attr->toXmlAttr("totalsRowDxfId", _outStream);
    }
    
    
    if (m_has_headerRowCellStyle_attr)
    {
        m_headerRowCellStyle_attr->toXmlAttr("headerRowCellStyle", _outStream);
    }
    
    
    if (m_has_dataCellStyle_attr)
    {
        m_dataCellStyle_attr->toXmlAttr("dataCellStyle", _outStream);
    }
    
    
    if (m_has_totalsRowCellStyle_attr)
    {
        m_totalsRowCellStyle_attr->toXmlAttr("totalsRowCellStyle", _outStream);
    }
    
            _outStream << ">";
            
    if (m_has_calculatedColumnFormula)
    {
        m_calculatedColumnFormula->toXmlElem("main:calculatedColumnFormula", "", _outStream);;
    }
    
    if (m_has_totalsRowFormula)
    {
        m_totalsRowFormula->toXmlElem("main:totalsRowFormula", "", _outStream);;
    }
    
    if (m_has_xmlColumnPr)
    {
        m_xmlColumnPr->toXmlElem("main:xmlColumnPr", "", _outStream);;
    }
    
    if (m_has_extLst)
    {
        m_extLst->toXmlElem("main:extLst", "", _outStream);;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_TableColumn& CT_TableColumn::default_instance()
    {    
    if (!CT_TableColumn::default_instance_)
    {
        CT_TableColumn::default_instance_ = new CT_TableColumn();
    }
    return *CT_TableColumn::default_instance_;
    }

    bool CT_TableColumn::has_id_attr() const
    {    
    return m_has_id_attr;
    }

    void CT_TableColumn::set_id_attr(const XSD::unsignedInt_& _id_attr)
    {    
    m_has_id_attr = true;
    m_id_attr = _id_attr;
    }

    const XSD::unsignedInt_& CT_TableColumn::get_id_attr() const
    {    
    return m_id_attr;
    }

    bool CT_TableColumn::has_uniqueName_attr() const
    {    
    return m_has_uniqueName_attr;
    }

    void CT_TableColumn::set_uniqueName_attr(const ns_s::ST_Xstring& _uniqueName_attr)
    {    
    m_has_uniqueName_attr = true;
    m_uniqueName_attr = new ns_s::ST_Xstring(_uniqueName_attr);
    }

    const ns_s::ST_Xstring& CT_TableColumn::get_uniqueName_attr() const
    {    
    if (m_uniqueName_attr)
    {
        return *m_uniqueName_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_TableColumn::has_name_attr() const
    {    
    return m_has_name_attr;
    }

    void CT_TableColumn::set_name_attr(const ns_s::ST_Xstring& _name_attr)
    {    
    m_has_name_attr = true;
    m_name_attr = new ns_s::ST_Xstring(_name_attr);
    }

    const ns_s::ST_Xstring& CT_TableColumn::get_name_attr() const
    {    
    if (m_name_attr)
    {
        return *m_name_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_TableColumn::has_totalsRowFunction_attr() const
    {    
    return m_has_totalsRowFunction_attr;
    }

    void CT_TableColumn::set_totalsRowFunction_attr(const ST_TotalsRowFunction& _totalsRowFunction_attr)
    {    
    m_has_totalsRowFunction_attr = true;
    m_totalsRowFunction_attr = new ST_TotalsRowFunction(_totalsRowFunction_attr);
    }

    const ST_TotalsRowFunction& CT_TableColumn::get_totalsRowFunction_attr() const
    {    
    if (m_totalsRowFunction_attr)
    {
        return *m_totalsRowFunction_attr;
    }
    return ST_TotalsRowFunction::default_instance();
    }

    bool CT_TableColumn::has_totalsRowLabel_attr() const
    {    
    return m_has_totalsRowLabel_attr;
    }

    void CT_TableColumn::set_totalsRowLabel_attr(const ns_s::ST_Xstring& _totalsRowLabel_attr)
    {    
    m_has_totalsRowLabel_attr = true;
    m_totalsRowLabel_attr = new ns_s::ST_Xstring(_totalsRowLabel_attr);
    }

    const ns_s::ST_Xstring& CT_TableColumn::get_totalsRowLabel_attr() const
    {    
    if (m_totalsRowLabel_attr)
    {
        return *m_totalsRowLabel_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_TableColumn::has_queryTableFieldId_attr() const
    {    
    return m_has_queryTableFieldId_attr;
    }

    void CT_TableColumn::set_queryTableFieldId_attr(const XSD::unsignedInt_& _queryTableFieldId_attr)
    {    
    m_has_queryTableFieldId_attr = true;
    m_queryTableFieldId_attr = _queryTableFieldId_attr;
    }

    const XSD::unsignedInt_& CT_TableColumn::get_queryTableFieldId_attr() const
    {    
    return m_queryTableFieldId_attr;
    }

    bool CT_TableColumn::has_headerRowDxfId_attr() const
    {    
    return m_has_headerRowDxfId_attr;
    }

    void CT_TableColumn::set_headerRowDxfId_attr(const ST_DxfId& _headerRowDxfId_attr)
    {    
    m_has_headerRowDxfId_attr = true;
    m_headerRowDxfId_attr = new ST_DxfId(_headerRowDxfId_attr);
    }

    const ST_DxfId& CT_TableColumn::get_headerRowDxfId_attr() const
    {    
    if (m_headerRowDxfId_attr)
    {
        return *m_headerRowDxfId_attr;
    }
    return ST_DxfId::default_instance();
    }

    bool CT_TableColumn::has_dataDxfId_attr() const
    {    
    return m_has_dataDxfId_attr;
    }

    void CT_TableColumn::set_dataDxfId_attr(const ST_DxfId& _dataDxfId_attr)
    {    
    m_has_dataDxfId_attr = true;
    m_dataDxfId_attr = new ST_DxfId(_dataDxfId_attr);
    }

    const ST_DxfId& CT_TableColumn::get_dataDxfId_attr() const
    {    
    if (m_dataDxfId_attr)
    {
        return *m_dataDxfId_attr;
    }
    return ST_DxfId::default_instance();
    }

    bool CT_TableColumn::has_totalsRowDxfId_attr() const
    {    
    return m_has_totalsRowDxfId_attr;
    }

    void CT_TableColumn::set_totalsRowDxfId_attr(const ST_DxfId& _totalsRowDxfId_attr)
    {    
    m_has_totalsRowDxfId_attr = true;
    m_totalsRowDxfId_attr = new ST_DxfId(_totalsRowDxfId_attr);
    }

    const ST_DxfId& CT_TableColumn::get_totalsRowDxfId_attr() const
    {    
    if (m_totalsRowDxfId_attr)
    {
        return *m_totalsRowDxfId_attr;
    }
    return ST_DxfId::default_instance();
    }

    bool CT_TableColumn::has_headerRowCellStyle_attr() const
    {    
    return m_has_headerRowCellStyle_attr;
    }

    void CT_TableColumn::set_headerRowCellStyle_attr(const ns_s::ST_Xstring& _headerRowCellStyle_attr)
    {    
    m_has_headerRowCellStyle_attr = true;
    m_headerRowCellStyle_attr = new ns_s::ST_Xstring(_headerRowCellStyle_attr);
    }

    const ns_s::ST_Xstring& CT_TableColumn::get_headerRowCellStyle_attr() const
    {    
    if (m_headerRowCellStyle_attr)
    {
        return *m_headerRowCellStyle_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_TableColumn::has_dataCellStyle_attr() const
    {    
    return m_has_dataCellStyle_attr;
    }

    void CT_TableColumn::set_dataCellStyle_attr(const ns_s::ST_Xstring& _dataCellStyle_attr)
    {    
    m_has_dataCellStyle_attr = true;
    m_dataCellStyle_attr = new ns_s::ST_Xstring(_dataCellStyle_attr);
    }

    const ns_s::ST_Xstring& CT_TableColumn::get_dataCellStyle_attr() const
    {    
    if (m_dataCellStyle_attr)
    {
        return *m_dataCellStyle_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_TableColumn::has_totalsRowCellStyle_attr() const
    {    
    return m_has_totalsRowCellStyle_attr;
    }

    void CT_TableColumn::set_totalsRowCellStyle_attr(const ns_s::ST_Xstring& _totalsRowCellStyle_attr)
    {    
    m_has_totalsRowCellStyle_attr = true;
    m_totalsRowCellStyle_attr = new ns_s::ST_Xstring(_totalsRowCellStyle_attr);
    }

    const ns_s::ST_Xstring& CT_TableColumn::get_totalsRowCellStyle_attr() const
    {    
    if (m_totalsRowCellStyle_attr)
    {
        return *m_totalsRowCellStyle_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

CT_TableColumn* CT_TableColumn::default_instance_ = NULL;

    // CT_TableFormula
    CT_TableFormula::CT_TableFormula()
    :m_has_array_attr(false),
    m_array_attr(false)
    {
    }
    CT_TableFormula::~CT_TableFormula()
{
    clear();    }
    void CT_TableFormula::clear()
    {    
    m_has_array_attr = false;
    m_array_attr = false;
    }

    void CT_TableFormula::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_array_attr)
    {
        _outStream << " " << "array" << "=\"" << XSD::XMLBooleanStr(m_array_attr) << "\"";
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_TableFormula& CT_TableFormula::default_instance()
    {    
    if (!CT_TableFormula::default_instance_)
    {
        CT_TableFormula::default_instance_ = new CT_TableFormula();
    }
    return *CT_TableFormula::default_instance_;
    }

    bool CT_TableFormula::has_array_attr() const
    {    
    return m_has_array_attr;
    }

    void CT_TableFormula::set_array_attr(const XSD::boolean_& _array_attr)
    {    
    m_has_array_attr = true;
    m_array_attr = _array_attr;
    }

    const XSD::boolean_& CT_TableFormula::get_array_attr() const
    {    
    return m_array_attr;
    }

CT_TableFormula* CT_TableFormula::default_instance_ = NULL;

    // CT_XmlColumnPr
    CT_XmlColumnPr::CT_XmlColumnPr()
    :m_has_extLst(false),
    m_extLst(NULL),
    m_has_mapId_attr(false),
    m_mapId_attr(0),
    m_has_xpath_attr(false),
    m_xpath_attr(NULL),
    m_has_denormalized_attr(false),
    m_denormalized_attr(false),
    m_has_xmlDataType_attr(false),
    m_xmlDataType_attr(NULL)
    {
    }
    CT_XmlColumnPr::~CT_XmlColumnPr()
{
    clear();    }
    bool CT_XmlColumnPr::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* CT_XmlColumnPr::mutable_extLst()
    {    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& CT_XmlColumnPr::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

    void CT_XmlColumnPr::clear()
    {    
    m_has_mapId_attr = false;
    m_mapId_attr = 0;
    
    m_has_xpath_attr = false;
    
    if (m_xpath_attr)
    {
        delete m_xpath_attr;
        m_xpath_attr = NULL;
    }
    
    
    m_has_denormalized_attr = false;
    m_denormalized_attr = false;
    
    m_has_xmlDataType_attr = false;
    
    if (m_xmlDataType_attr)
    {
        delete m_xmlDataType_attr;
        m_xmlDataType_attr = NULL;
    }
    
    }

    void CT_XmlColumnPr::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_mapId_attr)
    {
        _outStream << " " << "mapId" << "=\"" << m_mapId_attr << "\"";
    }
    
    
    if (m_has_xpath_attr)
    {
        m_xpath_attr->toXmlAttr("xpath", _outStream);
    }
    
    
    if (m_has_denormalized_attr)
    {
        _outStream << " " << "denormalized" << "=\"" << XSD::XMLBooleanStr(m_denormalized_attr) << "\"";
    }
    
    
    if (m_has_xmlDataType_attr)
    {
        m_xmlDataType_attr->toXmlAttr("xmlDataType", _outStream);
    }
    
            _outStream << ">";
            
    if (m_has_extLst)
    {
        m_extLst->toXmlElem("main:extLst", "", _outStream);;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_XmlColumnPr& CT_XmlColumnPr::default_instance()
    {    
    if (!CT_XmlColumnPr::default_instance_)
    {
        CT_XmlColumnPr::default_instance_ = new CT_XmlColumnPr();
    }
    return *CT_XmlColumnPr::default_instance_;
    }

    bool CT_XmlColumnPr::has_mapId_attr() const
    {    
    return m_has_mapId_attr;
    }

    void CT_XmlColumnPr::set_mapId_attr(const XSD::unsignedInt_& _mapId_attr)
    {    
    m_has_mapId_attr = true;
    m_mapId_attr = _mapId_attr;
    }

    const XSD::unsignedInt_& CT_XmlColumnPr::get_mapId_attr() const
    {    
    return m_mapId_attr;
    }

    bool CT_XmlColumnPr::has_xpath_attr() const
    {    
    return m_has_xpath_attr;
    }

    void CT_XmlColumnPr::set_xpath_attr(const ns_s::ST_Xstring& _xpath_attr)
    {    
    m_has_xpath_attr = true;
    m_xpath_attr = new ns_s::ST_Xstring(_xpath_attr);
    }

    const ns_s::ST_Xstring& CT_XmlColumnPr::get_xpath_attr() const
    {    
    if (m_xpath_attr)
    {
        return *m_xpath_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_XmlColumnPr::has_denormalized_attr() const
    {    
    return m_has_denormalized_attr;
    }

    void CT_XmlColumnPr::set_denormalized_attr(const XSD::boolean_& _denormalized_attr)
    {    
    m_has_denormalized_attr = true;
    m_denormalized_attr = _denormalized_attr;
    }

    const XSD::boolean_& CT_XmlColumnPr::get_denormalized_attr() const
    {    
    return m_denormalized_attr;
    }

    bool CT_XmlColumnPr::has_xmlDataType_attr() const
    {    
    return m_has_xmlDataType_attr;
    }

    void CT_XmlColumnPr::set_xmlDataType_attr(const ST_XmlDataType& _xmlDataType_attr)
    {    
    m_has_xmlDataType_attr = true;
    m_xmlDataType_attr = new ST_XmlDataType(_xmlDataType_attr);
    }

    const ST_XmlDataType& CT_XmlColumnPr::get_xmlDataType_attr() const
    {    
    if (m_xmlDataType_attr)
    {
        return *m_xmlDataType_attr;
    }
    return ST_XmlDataType::default_instance();
    }

CT_XmlColumnPr* CT_XmlColumnPr::default_instance_ = NULL;

    // CT_VolTypes
    CT_VolTypes::CT_VolTypes()

    {
    }
    CT_VolTypes::~CT_VolTypes()
{
    clear();    }
    CT_VolType* CT_VolTypes::add_volType()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_VolType* pNewChild = pChildGroup->mutable_volType();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_ExtensionList* CT_VolTypes::add_extLst()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_ExtensionList* pNewChild = pChildGroup->mutable_extLst();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_VolTypes::clear()
    {    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_VolTypes::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_volType())
            {
                (*iter)->get_volType().toXmlElem("main:volType", "", _outStream);
            }
            else if ((*iter)->has_extLst())
            {
                (*iter)->get_extLst().toXmlElem("main:extLst", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_VolTypes& CT_VolTypes::default_instance()
    {    
    if (!CT_VolTypes::default_instance_)
    {
        CT_VolTypes::default_instance_ = new CT_VolTypes();
    }
    return *CT_VolTypes::default_instance_;
    }


    // CT_VolTypes::ChildGroup_1
    CT_VolTypes::ChildGroup_1::ChildGroup_1()
    :m_has_volType(false),
    m_volType(NULL),
    m_has_extLst(false),
    m_extLst(NULL)
    {
    }
    bool CT_VolTypes::ChildGroup_1::has_volType() const
    {    
    return m_has_volType;
    }

    CT_VolType* CT_VolTypes::ChildGroup_1::mutable_volType()
    {    
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_volType = true;
    if (!m_volType)
    {
        m_volType = new CT_VolType();
    }
    return m_volType;
    }

    const CT_VolType& CT_VolTypes::ChildGroup_1::get_volType() const
    {    
    if (m_volType)
    {
        return *m_volType;
    }
    return CT_VolType::default_instance();
    }

    bool CT_VolTypes::ChildGroup_1::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* CT_VolTypes::ChildGroup_1::mutable_extLst()
    {    
    
    m_has_volType = false;
    
    if (m_volType)
    {
        delete m_volType;
        m_volType = NULL;
    }
    ;
    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& CT_VolTypes::ChildGroup_1::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

CT_VolTypes* CT_VolTypes::default_instance_ = NULL;

    // CT_VolType
    CT_VolType::CT_VolType()
    :m_has_type_attr(false),
    m_type_attr(NULL)
    {
    }
    CT_VolType::~CT_VolType()
{
    clear();    }
    CT_VolMain* CT_VolType::add_main()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_VolMain* pNewChild = pChildGroup->mutable_main();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_VolType::clear()
    {    
    m_has_type_attr = false;
    
    if (m_type_attr)
    {
        delete m_type_attr;
        m_type_attr = NULL;
    }
    
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_VolType::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_type_attr)
    {
        m_type_attr->toXmlAttr("type", _outStream);
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_main())
            {
                (*iter)->get_main().toXmlElem("main:main", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_VolType& CT_VolType::default_instance()
    {    
    if (!CT_VolType::default_instance_)
    {
        CT_VolType::default_instance_ = new CT_VolType();
    }
    return *CT_VolType::default_instance_;
    }

    bool CT_VolType::has_type_attr() const
    {    
    return m_has_type_attr;
    }

    void CT_VolType::set_type_attr(const ST_VolDepType& _type_attr)
    {    
    m_has_type_attr = true;
    m_type_attr = new ST_VolDepType(_type_attr);
    }

    const ST_VolDepType& CT_VolType::get_type_attr() const
    {    
    if (m_type_attr)
    {
        return *m_type_attr;
    }
    return ST_VolDepType::default_instance();
    }


    // CT_VolType::ChildGroup_1
    CT_VolType::ChildGroup_1::ChildGroup_1()
    :m_has_main(false),
    m_main(NULL)
    {
    }
    bool CT_VolType::ChildGroup_1::has_main() const
    {    
    return m_has_main;
    }

    CT_VolMain* CT_VolType::ChildGroup_1::mutable_main()
    {    
    
    m_has_main = true;
    if (!m_main)
    {
        m_main = new CT_VolMain();
    }
    return m_main;
    }

    const CT_VolMain& CT_VolType::ChildGroup_1::get_main() const
    {    
    if (m_main)
    {
        return *m_main;
    }
    return CT_VolMain::default_instance();
    }

CT_VolType* CT_VolType::default_instance_ = NULL;

    // CT_VolMain
    CT_VolMain::CT_VolMain()
    :m_has_first_attr(false),
    m_first_attr(NULL)
    {
    }
    CT_VolMain::~CT_VolMain()
{
    clear();    }
    CT_VolTopic* CT_VolMain::add_tp()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_VolTopic* pNewChild = pChildGroup->mutable_tp();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_VolMain::clear()
    {    
    m_has_first_attr = false;
    
    if (m_first_attr)
    {
        delete m_first_attr;
        m_first_attr = NULL;
    }
    
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_VolMain::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_first_attr)
    {
        m_first_attr->toXmlAttr("first", _outStream);
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_tp())
            {
                (*iter)->get_tp().toXmlElem("main:tp", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_VolMain& CT_VolMain::default_instance()
    {    
    if (!CT_VolMain::default_instance_)
    {
        CT_VolMain::default_instance_ = new CT_VolMain();
    }
    return *CT_VolMain::default_instance_;
    }

    bool CT_VolMain::has_first_attr() const
    {    
    return m_has_first_attr;
    }

    void CT_VolMain::set_first_attr(const ns_s::ST_Xstring& _first_attr)
    {    
    m_has_first_attr = true;
    m_first_attr = new ns_s::ST_Xstring(_first_attr);
    }

    const ns_s::ST_Xstring& CT_VolMain::get_first_attr() const
    {    
    if (m_first_attr)
    {
        return *m_first_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }


    // CT_VolMain::ChildGroup_1
    CT_VolMain::ChildGroup_1::ChildGroup_1()
    :m_has_tp(false),
    m_tp(NULL)
    {
    }
    bool CT_VolMain::ChildGroup_1::has_tp() const
    {    
    return m_has_tp;
    }

    CT_VolTopic* CT_VolMain::ChildGroup_1::mutable_tp()
    {    
    
    m_has_tp = true;
    if (!m_tp)
    {
        m_tp = new CT_VolTopic();
    }
    return m_tp;
    }

    const CT_VolTopic& CT_VolMain::ChildGroup_1::get_tp() const
    {    
    if (m_tp)
    {
        return *m_tp;
    }
    return CT_VolTopic::default_instance();
    }

CT_VolMain* CT_VolMain::default_instance_ = NULL;

    // CT_VolTopic
    CT_VolTopic::CT_VolTopic()
    :m_has_v(false),
    m_v(NULL),
    m_has_t_attr(false),
    m_t_attr(NULL)
    {
    }
    CT_VolTopic::~CT_VolTopic()
{
    clear();    }
    bool CT_VolTopic::has_v() const
    {    
    return m_has_v;
    }

    ns_s::ST_Xstring* CT_VolTopic::mutable_v()
    {    
    m_has_v = true;
    if (!m_v)
    {
        m_v = new ns_s::ST_Xstring();
    }
    return m_v;
    }

    const ns_s::ST_Xstring& CT_VolTopic::get_v() const
    {    
    if (m_v)
    {
        return *m_v;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    ns_s::ST_Xstring* CT_VolTopic::add_stp()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    ns_s::ST_Xstring* pNewChild = pChildGroup->mutable_stp();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_VolTopicRef* CT_VolTopic::add_tr()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_VolTopicRef* pNewChild = pChildGroup->mutable_tr();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_VolTopic::clear()
    {    
    m_has_t_attr = false;
    
    if (m_t_attr)
    {
        delete m_t_attr;
        m_t_attr = NULL;
    }
    
    
    m_has_v = false;
    
    if (m_v)
    {
        delete m_v;
        m_v = NULL;
    }
    
     
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_VolTopic::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_t_attr)
    {
        m_t_attr->toXmlAttr("t", _outStream);
    }
    
            _outStream << ">";
            
    if (m_has_v)
    {
        _outStream << "<main:v>" << m_v->toString() << "</main:v>";;
    }
     
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_stp())
            {
                _outStream << "<main:stp>" << (*iter)->get_stp().toString() << "</main:stp>";
            }
            else if ((*iter)->has_tr())
            {
                (*iter)->get_tr().toXmlElem("main:tr", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_VolTopic& CT_VolTopic::default_instance()
    {    
    if (!CT_VolTopic::default_instance_)
    {
        CT_VolTopic::default_instance_ = new CT_VolTopic();
    }
    return *CT_VolTopic::default_instance_;
    }

    bool CT_VolTopic::has_t_attr() const
    {    
    return m_has_t_attr;
    }

    void CT_VolTopic::set_t_attr(const ST_VolValueType& _t_attr)
    {    
    m_has_t_attr = true;
    m_t_attr = new ST_VolValueType(_t_attr);
    }

    const ST_VolValueType& CT_VolTopic::get_t_attr() const
    {    
    if (m_t_attr)
    {
        return *m_t_attr;
    }
    return ST_VolValueType::default_instance();
    }


    // CT_VolTopic::ChildGroup_1
    CT_VolTopic::ChildGroup_1::ChildGroup_1()
    :m_has_stp(false),
    m_stp(NULL),
    m_has_tr(false),
    m_tr(NULL)
    {
    }
    bool CT_VolTopic::ChildGroup_1::has_stp() const
    {    
    return m_has_stp;
    }

    ns_s::ST_Xstring* CT_VolTopic::ChildGroup_1::mutable_stp()
    {    
    
    m_has_tr = false;
    
    if (m_tr)
    {
        delete m_tr;
        m_tr = NULL;
    }
    ;
    
    m_has_stp = true;
    if (!m_stp)
    {
        m_stp = new ns_s::ST_Xstring();
    }
    return m_stp;
    }

    const ns_s::ST_Xstring& CT_VolTopic::ChildGroup_1::get_stp() const
    {    
    if (m_stp)
    {
        return *m_stp;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_VolTopic::ChildGroup_1::has_tr() const
    {    
    return m_has_tr;
    }

    CT_VolTopicRef* CT_VolTopic::ChildGroup_1::mutable_tr()
    {    
    
    m_has_stp = false;
    
    if (m_stp)
    {
        delete m_stp;
        m_stp = NULL;
    }
    ;
    
    m_has_tr = true;
    if (!m_tr)
    {
        m_tr = new CT_VolTopicRef();
    }
    return m_tr;
    }

    const CT_VolTopicRef& CT_VolTopic::ChildGroup_1::get_tr() const
    {    
    if (m_tr)
    {
        return *m_tr;
    }
    return CT_VolTopicRef::default_instance();
    }

CT_VolTopic* CT_VolTopic::default_instance_ = NULL;

    // CT_VolTopicRef
    CT_VolTopicRef::CT_VolTopicRef()
    :m_has_r_attr(false),
    m_r_attr(NULL),
    m_has_s_attr(false),
    m_s_attr(0)
    {
    }
    CT_VolTopicRef::~CT_VolTopicRef()
{
    clear();    }
    void CT_VolTopicRef::clear()
    {    
    m_has_r_attr = false;
    
    if (m_r_attr)
    {
        delete m_r_attr;
        m_r_attr = NULL;
    }
    
    
    m_has_s_attr = false;
    m_s_attr = 0;
    }

    void CT_VolTopicRef::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_r_attr)
    {
        m_r_attr->toXmlAttr("r", _outStream);
    }
    
    
    if (m_has_s_attr)
    {
        _outStream << " " << "s" << "=\"" << m_s_attr << "\"";
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_VolTopicRef& CT_VolTopicRef::default_instance()
    {    
    if (!CT_VolTopicRef::default_instance_)
    {
        CT_VolTopicRef::default_instance_ = new CT_VolTopicRef();
    }
    return *CT_VolTopicRef::default_instance_;
    }

    bool CT_VolTopicRef::has_r_attr() const
    {    
    return m_has_r_attr;
    }

    void CT_VolTopicRef::set_r_attr(const ST_CellRef& _r_attr)
    {    
    m_has_r_attr = true;
    m_r_attr = new ST_CellRef(_r_attr);
    }

    const ST_CellRef& CT_VolTopicRef::get_r_attr() const
    {    
    if (m_r_attr)
    {
        return *m_r_attr;
    }
    return ST_CellRef::default_instance();
    }

    bool CT_VolTopicRef::has_s_attr() const
    {    
    return m_has_s_attr;
    }

    void CT_VolTopicRef::set_s_attr(const XSD::unsignedInt_& _s_attr)
    {    
    m_has_s_attr = true;
    m_s_attr = _s_attr;
    }

    const XSD::unsignedInt_& CT_VolTopicRef::get_s_attr() const
    {    
    return m_s_attr;
    }

CT_VolTopicRef* CT_VolTopicRef::default_instance_ = NULL;

    // CT_Workbook
    CT_Workbook::CT_Workbook()
    :m_has_fileVersion(false),
    m_fileVersion(NULL),
    m_has_fileSharing(false),
    m_fileSharing(NULL),
    m_has_workbookPr(false),
    m_workbookPr(NULL),
    m_has_workbookProtection(false),
    m_workbookProtection(NULL),
    m_has_bookViews(false),
    m_bookViews(NULL),
    m_has_sheets(false),
    m_sheets(NULL),
    m_has_functionGroups(false),
    m_functionGroups(NULL),
    m_has_externalReferences(false),
    m_externalReferences(NULL),
    m_has_definedNames(false),
    m_definedNames(NULL),
    m_has_calcPr(false),
    m_calcPr(NULL),
    m_has_oleSize(false),
    m_oleSize(NULL),
    m_has_customWorkbookViews(false),
    m_customWorkbookViews(NULL),
    m_has_pivotCaches(false),
    m_pivotCaches(NULL),
    m_has_smartTagPr(false),
    m_smartTagPr(NULL),
    m_has_smartTagTypes(false),
    m_smartTagTypes(NULL),
    m_has_webPublishing(false),
    m_webPublishing(NULL),
    m_has_conformance_attr(false),
    m_conformance_attr(NULL)
    {
    }
    CT_Workbook::~CT_Workbook()
{
    clear();    }
    bool CT_Workbook::has_fileVersion() const
    {    
    return m_has_fileVersion;
    }

    CT_FileVersion* CT_Workbook::mutable_fileVersion()
    {    
    m_has_fileVersion = true;
    if (!m_fileVersion)
    {
        m_fileVersion = new CT_FileVersion();
    }
    return m_fileVersion;
    }

    const CT_FileVersion& CT_Workbook::get_fileVersion() const
    {    
    if (m_fileVersion)
    {
        return *m_fileVersion;
    }
    return CT_FileVersion::default_instance();
    }

    bool CT_Workbook::has_fileSharing() const
    {    
    return m_has_fileSharing;
    }

    CT_FileSharing* CT_Workbook::mutable_fileSharing()
    {    
    m_has_fileSharing = true;
    if (!m_fileSharing)
    {
        m_fileSharing = new CT_FileSharing();
    }
    return m_fileSharing;
    }

    const CT_FileSharing& CT_Workbook::get_fileSharing() const
    {    
    if (m_fileSharing)
    {
        return *m_fileSharing;
    }
    return CT_FileSharing::default_instance();
    }

    bool CT_Workbook::has_workbookPr() const
    {    
    return m_has_workbookPr;
    }

    CT_WorkbookPr* CT_Workbook::mutable_workbookPr()
    {    
    m_has_workbookPr = true;
    if (!m_workbookPr)
    {
        m_workbookPr = new CT_WorkbookPr();
    }
    return m_workbookPr;
    }

    const CT_WorkbookPr& CT_Workbook::get_workbookPr() const
    {    
    if (m_workbookPr)
    {
        return *m_workbookPr;
    }
    return CT_WorkbookPr::default_instance();
    }

    bool CT_Workbook::has_workbookProtection() const
    {    
    return m_has_workbookProtection;
    }

    CT_WorkbookProtection* CT_Workbook::mutable_workbookProtection()
    {    
    m_has_workbookProtection = true;
    if (!m_workbookProtection)
    {
        m_workbookProtection = new CT_WorkbookProtection();
    }
    return m_workbookProtection;
    }

    const CT_WorkbookProtection& CT_Workbook::get_workbookProtection() const
    {    
    if (m_workbookProtection)
    {
        return *m_workbookProtection;
    }
    return CT_WorkbookProtection::default_instance();
    }

    bool CT_Workbook::has_bookViews() const
    {    
    return m_has_bookViews;
    }

    CT_BookViews* CT_Workbook::mutable_bookViews()
    {    
    m_has_bookViews = true;
    if (!m_bookViews)
    {
        m_bookViews = new CT_BookViews();
    }
    return m_bookViews;
    }

    const CT_BookViews& CT_Workbook::get_bookViews() const
    {    
    if (m_bookViews)
    {
        return *m_bookViews;
    }
    return CT_BookViews::default_instance();
    }

    bool CT_Workbook::has_sheets() const
    {    
    return m_has_sheets;
    }

    CT_Sheets* CT_Workbook::mutable_sheets()
    {    
    m_has_sheets = true;
    if (!m_sheets)
    {
        m_sheets = new CT_Sheets();
    }
    return m_sheets;
    }

    const CT_Sheets& CT_Workbook::get_sheets() const
    {    
    if (m_sheets)
    {
        return *m_sheets;
    }
    return CT_Sheets::default_instance();
    }

    bool CT_Workbook::has_functionGroups() const
    {    
    return m_has_functionGroups;
    }

    CT_FunctionGroups* CT_Workbook::mutable_functionGroups()
    {    
    m_has_functionGroups = true;
    if (!m_functionGroups)
    {
        m_functionGroups = new CT_FunctionGroups();
    }
    return m_functionGroups;
    }

    const CT_FunctionGroups& CT_Workbook::get_functionGroups() const
    {    
    if (m_functionGroups)
    {
        return *m_functionGroups;
    }
    return CT_FunctionGroups::default_instance();
    }

    bool CT_Workbook::has_externalReferences() const
    {    
    return m_has_externalReferences;
    }

    CT_ExternalReferences* CT_Workbook::mutable_externalReferences()
    {    
    m_has_externalReferences = true;
    if (!m_externalReferences)
    {
        m_externalReferences = new CT_ExternalReferences();
    }
    return m_externalReferences;
    }

    const CT_ExternalReferences& CT_Workbook::get_externalReferences() const
    {    
    if (m_externalReferences)
    {
        return *m_externalReferences;
    }
    return CT_ExternalReferences::default_instance();
    }

    bool CT_Workbook::has_definedNames() const
    {    
    return m_has_definedNames;
    }

    CT_DefinedNames* CT_Workbook::mutable_definedNames()
    {    
    m_has_definedNames = true;
    if (!m_definedNames)
    {
        m_definedNames = new CT_DefinedNames();
    }
    return m_definedNames;
    }

    const CT_DefinedNames& CT_Workbook::get_definedNames() const
    {    
    if (m_definedNames)
    {
        return *m_definedNames;
    }
    return CT_DefinedNames::default_instance();
    }

    bool CT_Workbook::has_calcPr() const
    {    
    return m_has_calcPr;
    }

    CT_CalcPr* CT_Workbook::mutable_calcPr()
    {    
    m_has_calcPr = true;
    if (!m_calcPr)
    {
        m_calcPr = new CT_CalcPr();
    }
    return m_calcPr;
    }

    const CT_CalcPr& CT_Workbook::get_calcPr() const
    {    
    if (m_calcPr)
    {
        return *m_calcPr;
    }
    return CT_CalcPr::default_instance();
    }

    bool CT_Workbook::has_oleSize() const
    {    
    return m_has_oleSize;
    }

    CT_OleSize* CT_Workbook::mutable_oleSize()
    {    
    m_has_oleSize = true;
    if (!m_oleSize)
    {
        m_oleSize = new CT_OleSize();
    }
    return m_oleSize;
    }

    const CT_OleSize& CT_Workbook::get_oleSize() const
    {    
    if (m_oleSize)
    {
        return *m_oleSize;
    }
    return CT_OleSize::default_instance();
    }

    bool CT_Workbook::has_customWorkbookViews() const
    {    
    return m_has_customWorkbookViews;
    }

    CT_CustomWorkbookViews* CT_Workbook::mutable_customWorkbookViews()
    {    
    m_has_customWorkbookViews = true;
    if (!m_customWorkbookViews)
    {
        m_customWorkbookViews = new CT_CustomWorkbookViews();
    }
    return m_customWorkbookViews;
    }

    const CT_CustomWorkbookViews& CT_Workbook::get_customWorkbookViews() const
    {    
    if (m_customWorkbookViews)
    {
        return *m_customWorkbookViews;
    }
    return CT_CustomWorkbookViews::default_instance();
    }

    bool CT_Workbook::has_pivotCaches() const
    {    
    return m_has_pivotCaches;
    }

    CT_PivotCaches* CT_Workbook::mutable_pivotCaches()
    {    
    m_has_pivotCaches = true;
    if (!m_pivotCaches)
    {
        m_pivotCaches = new CT_PivotCaches();
    }
    return m_pivotCaches;
    }

    const CT_PivotCaches& CT_Workbook::get_pivotCaches() const
    {    
    if (m_pivotCaches)
    {
        return *m_pivotCaches;
    }
    return CT_PivotCaches::default_instance();
    }

    bool CT_Workbook::has_smartTagPr() const
    {    
    return m_has_smartTagPr;
    }

    CT_SmartTagPr* CT_Workbook::mutable_smartTagPr()
    {    
    m_has_smartTagPr = true;
    if (!m_smartTagPr)
    {
        m_smartTagPr = new CT_SmartTagPr();
    }
    return m_smartTagPr;
    }

    const CT_SmartTagPr& CT_Workbook::get_smartTagPr() const
    {    
    if (m_smartTagPr)
    {
        return *m_smartTagPr;
    }
    return CT_SmartTagPr::default_instance();
    }

    bool CT_Workbook::has_smartTagTypes() const
    {    
    return m_has_smartTagTypes;
    }

    CT_SmartTagTypes* CT_Workbook::mutable_smartTagTypes()
    {    
    m_has_smartTagTypes = true;
    if (!m_smartTagTypes)
    {
        m_smartTagTypes = new CT_SmartTagTypes();
    }
    return m_smartTagTypes;
    }

    const CT_SmartTagTypes& CT_Workbook::get_smartTagTypes() const
    {    
    if (m_smartTagTypes)
    {
        return *m_smartTagTypes;
    }
    return CT_SmartTagTypes::default_instance();
    }

    bool CT_Workbook::has_webPublishing() const
    {    
    return m_has_webPublishing;
    }

    CT_WebPublishing* CT_Workbook::mutable_webPublishing()
    {    
    m_has_webPublishing = true;
    if (!m_webPublishing)
    {
        m_webPublishing = new CT_WebPublishing();
    }
    return m_webPublishing;
    }

    const CT_WebPublishing& CT_Workbook::get_webPublishing() const
    {    
    if (m_webPublishing)
    {
        return *m_webPublishing;
    }
    return CT_WebPublishing::default_instance();
    }

    CT_FileRecoveryPr* CT_Workbook::add_fileRecoveryPr()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_FileRecoveryPr* pNewChild = pChildGroup->mutable_fileRecoveryPr();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_WebPublishObjects* CT_Workbook::add_webPublishObjects()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_WebPublishObjects* pNewChild = pChildGroup->mutable_webPublishObjects();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_ExtensionList* CT_Workbook::add_extLst()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_ExtensionList* pNewChild = pChildGroup->mutable_extLst();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_Workbook::clear()
    {    
    m_has_conformance_attr = false;
    
    if (m_conformance_attr)
    {
        delete m_conformance_attr;
        m_conformance_attr = NULL;
    }
    
    
    m_has_fileVersion = false;
    
    if (m_fileVersion)
    {
        delete m_fileVersion;
        m_fileVersion = NULL;
    }
    
    
    m_has_fileSharing = false;
    
    if (m_fileSharing)
    {
        delete m_fileSharing;
        m_fileSharing = NULL;
    }
    
    
    m_has_workbookPr = false;
    
    if (m_workbookPr)
    {
        delete m_workbookPr;
        m_workbookPr = NULL;
    }
    
    
    m_has_workbookProtection = false;
    
    if (m_workbookProtection)
    {
        delete m_workbookProtection;
        m_workbookProtection = NULL;
    }
    
    
    m_has_bookViews = false;
    
    if (m_bookViews)
    {
        delete m_bookViews;
        m_bookViews = NULL;
    }
    
    
    m_has_sheets = false;
    
    if (m_sheets)
    {
        delete m_sheets;
        m_sheets = NULL;
    }
    
    
    m_has_functionGroups = false;
    
    if (m_functionGroups)
    {
        delete m_functionGroups;
        m_functionGroups = NULL;
    }
    
    
    m_has_externalReferences = false;
    
    if (m_externalReferences)
    {
        delete m_externalReferences;
        m_externalReferences = NULL;
    }
    
    
    m_has_definedNames = false;
    
    if (m_definedNames)
    {
        delete m_definedNames;
        m_definedNames = NULL;
    }
    
    
    m_has_calcPr = false;
    
    if (m_calcPr)
    {
        delete m_calcPr;
        m_calcPr = NULL;
    }
    
    
    m_has_oleSize = false;
    
    if (m_oleSize)
    {
        delete m_oleSize;
        m_oleSize = NULL;
    }
    
    
    m_has_customWorkbookViews = false;
    
    if (m_customWorkbookViews)
    {
        delete m_customWorkbookViews;
        m_customWorkbookViews = NULL;
    }
    
    
    m_has_pivotCaches = false;
    
    if (m_pivotCaches)
    {
        delete m_pivotCaches;
        m_pivotCaches = NULL;
    }
    
    
    m_has_smartTagPr = false;
    
    if (m_smartTagPr)
    {
        delete m_smartTagPr;
        m_smartTagPr = NULL;
    }
    
    
    m_has_smartTagTypes = false;
    
    if (m_smartTagTypes)
    {
        delete m_smartTagTypes;
        m_smartTagTypes = NULL;
    }
    
    
    m_has_webPublishing = false;
    
    if (m_webPublishing)
    {
        delete m_webPublishing;
        m_webPublishing = NULL;
    }
    
     
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_Workbook::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_conformance_attr)
    {
        m_conformance_attr->toXmlAttr("conformance", _outStream);
    }
    
            _outStream << ">";
            
    if (m_has_fileVersion)
    {
        m_fileVersion->toXmlElem("main:fileVersion", "", _outStream);;
    }
    
    if (m_has_fileSharing)
    {
        m_fileSharing->toXmlElem("main:fileSharing", "", _outStream);;
    }
    
    if (m_has_workbookPr)
    {
        m_workbookPr->toXmlElem("main:workbookPr", "", _outStream);;
    }
    
    if (m_has_workbookProtection)
    {
        m_workbookProtection->toXmlElem("main:workbookProtection", "", _outStream);;
    }
    
    if (m_has_bookViews)
    {
        m_bookViews->toXmlElem("main:bookViews", "", _outStream);;
    }
    
    if (m_has_sheets)
    {
        m_sheets->toXmlElem("main:sheets", "", _outStream);;
    }
    
    if (m_has_functionGroups)
    {
        m_functionGroups->toXmlElem("main:functionGroups", "", _outStream);;
    }
    
    if (m_has_externalReferences)
    {
        m_externalReferences->toXmlElem("main:externalReferences", "", _outStream);;
    }
    
    if (m_has_definedNames)
    {
        m_definedNames->toXmlElem("main:definedNames", "", _outStream);;
    }
    
    if (m_has_calcPr)
    {
        m_calcPr->toXmlElem("main:calcPr", "", _outStream);;
    }
    
    if (m_has_oleSize)
    {
        m_oleSize->toXmlElem("main:oleSize", "", _outStream);;
    }
    
    if (m_has_customWorkbookViews)
    {
        m_customWorkbookViews->toXmlElem("main:customWorkbookViews", "", _outStream);;
    }
    
    if (m_has_pivotCaches)
    {
        m_pivotCaches->toXmlElem("main:pivotCaches", "", _outStream);;
    }
    
    if (m_has_smartTagPr)
    {
        m_smartTagPr->toXmlElem("main:smartTagPr", "", _outStream);;
    }
    
    if (m_has_smartTagTypes)
    {
        m_smartTagTypes->toXmlElem("main:smartTagTypes", "", _outStream);;
    }
    
    if (m_has_webPublishing)
    {
        m_webPublishing->toXmlElem("main:webPublishing", "", _outStream);;
    }
     
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_fileRecoveryPr())
            {
                (*iter)->get_fileRecoveryPr().toXmlElem("main:fileRecoveryPr", "", _outStream);
            }
            else if ((*iter)->has_webPublishObjects())
            {
                (*iter)->get_webPublishObjects().toXmlElem("main:webPublishObjects", "", _outStream);
            }
            else if ((*iter)->has_extLst())
            {
                (*iter)->get_extLst().toXmlElem("main:extLst", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_Workbook& CT_Workbook::default_instance()
    {    
    if (!CT_Workbook::default_instance_)
    {
        CT_Workbook::default_instance_ = new CT_Workbook();
    }
    return *CT_Workbook::default_instance_;
    }

    bool CT_Workbook::has_conformance_attr() const
    {    
    return m_has_conformance_attr;
    }

    void CT_Workbook::set_conformance_attr(const ns_s::ST_ConformanceClass& _conformance_attr)
    {    
    m_has_conformance_attr = true;
    m_conformance_attr = new ns_s::ST_ConformanceClass(_conformance_attr);
    }

    const ns_s::ST_ConformanceClass& CT_Workbook::get_conformance_attr() const
    {    
    if (m_conformance_attr)
    {
        return *m_conformance_attr;
    }
    return ns_s::ST_ConformanceClass::default_instance();
    }


    // CT_Workbook::ChildGroup_1
    CT_Workbook::ChildGroup_1::ChildGroup_1()
    :m_has_fileRecoveryPr(false),
    m_fileRecoveryPr(NULL),
    m_has_webPublishObjects(false),
    m_webPublishObjects(NULL),
    m_has_extLst(false),
    m_extLst(NULL)
    {
    }
    bool CT_Workbook::ChildGroup_1::has_fileRecoveryPr() const
    {    
    return m_has_fileRecoveryPr;
    }

    CT_FileRecoveryPr* CT_Workbook::ChildGroup_1::mutable_fileRecoveryPr()
    {    
    
    m_has_webPublishObjects = false;
    
    if (m_webPublishObjects)
    {
        delete m_webPublishObjects;
        m_webPublishObjects = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_fileRecoveryPr = true;
    if (!m_fileRecoveryPr)
    {
        m_fileRecoveryPr = new CT_FileRecoveryPr();
    }
    return m_fileRecoveryPr;
    }

    const CT_FileRecoveryPr& CT_Workbook::ChildGroup_1::get_fileRecoveryPr() const
    {    
    if (m_fileRecoveryPr)
    {
        return *m_fileRecoveryPr;
    }
    return CT_FileRecoveryPr::default_instance();
    }

    bool CT_Workbook::ChildGroup_1::has_webPublishObjects() const
    {    
    return m_has_webPublishObjects;
    }

    CT_WebPublishObjects* CT_Workbook::ChildGroup_1::mutable_webPublishObjects()
    {    
    
    m_has_fileRecoveryPr = false;
    
    if (m_fileRecoveryPr)
    {
        delete m_fileRecoveryPr;
        m_fileRecoveryPr = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_webPublishObjects = true;
    if (!m_webPublishObjects)
    {
        m_webPublishObjects = new CT_WebPublishObjects();
    }
    return m_webPublishObjects;
    }

    const CT_WebPublishObjects& CT_Workbook::ChildGroup_1::get_webPublishObjects() const
    {    
    if (m_webPublishObjects)
    {
        return *m_webPublishObjects;
    }
    return CT_WebPublishObjects::default_instance();
    }

    bool CT_Workbook::ChildGroup_1::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* CT_Workbook::ChildGroup_1::mutable_extLst()
    {    
    
    m_has_fileRecoveryPr = false;
    
    if (m_fileRecoveryPr)
    {
        delete m_fileRecoveryPr;
        m_fileRecoveryPr = NULL;
    }
    ;
    
    m_has_webPublishObjects = false;
    
    if (m_webPublishObjects)
    {
        delete m_webPublishObjects;
        m_webPublishObjects = NULL;
    }
    ;
    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& CT_Workbook::ChildGroup_1::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

CT_Workbook* CT_Workbook::default_instance_ = NULL;

    // CT_FileVersion
    CT_FileVersion::CT_FileVersion()
    :m_has_appName_attr(false),
    m_appName_attr(""),
    m_has_lastEdited_attr(false),
    m_lastEdited_attr(""),
    m_has_lowestEdited_attr(false),
    m_lowestEdited_attr(""),
    m_has_rupBuild_attr(false),
    m_rupBuild_attr(""),
    m_has_codeName_attr(false),
    m_codeName_attr(NULL)
    {
    }
    CT_FileVersion::~CT_FileVersion()
{
    clear();    }
    void CT_FileVersion::clear()
    {    
    m_has_appName_attr = false;
    m_appName_attr.clear();
    
    m_has_lastEdited_attr = false;
    m_lastEdited_attr.clear();
    
    m_has_lowestEdited_attr = false;
    m_lowestEdited_attr.clear();
    
    m_has_rupBuild_attr = false;
    m_rupBuild_attr.clear();
    
    m_has_codeName_attr = false;
    
    if (m_codeName_attr)
    {
        delete m_codeName_attr;
        m_codeName_attr = NULL;
    }
    
    }

    void CT_FileVersion::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_appName_attr)
    {
        _outStream << " " << "appName" << "=\"" << m_appName_attr << "\"";
    }
    
    
    if (m_has_lastEdited_attr)
    {
        _outStream << " " << "lastEdited" << "=\"" << m_lastEdited_attr << "\"";
    }
    
    
    if (m_has_lowestEdited_attr)
    {
        _outStream << " " << "lowestEdited" << "=\"" << m_lowestEdited_attr << "\"";
    }
    
    
    if (m_has_rupBuild_attr)
    {
        _outStream << " " << "rupBuild" << "=\"" << m_rupBuild_attr << "\"";
    }
    
    
    if (m_has_codeName_attr)
    {
        m_codeName_attr->toXmlAttr("codeName", _outStream);
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_FileVersion& CT_FileVersion::default_instance()
    {    
    if (!CT_FileVersion::default_instance_)
    {
        CT_FileVersion::default_instance_ = new CT_FileVersion();
    }
    return *CT_FileVersion::default_instance_;
    }

    bool CT_FileVersion::has_appName_attr() const
    {    
    return m_has_appName_attr;
    }

    void CT_FileVersion::set_appName_attr(const XSD::string_& _appName_attr)
    {    
    m_has_appName_attr = true;
    m_appName_attr = _appName_attr;
    }

    const XSD::string_& CT_FileVersion::get_appName_attr() const
    {    
    return m_appName_attr;
    }

    bool CT_FileVersion::has_lastEdited_attr() const
    {    
    return m_has_lastEdited_attr;
    }

    void CT_FileVersion::set_lastEdited_attr(const XSD::string_& _lastEdited_attr)
    {    
    m_has_lastEdited_attr = true;
    m_lastEdited_attr = _lastEdited_attr;
    }

    const XSD::string_& CT_FileVersion::get_lastEdited_attr() const
    {    
    return m_lastEdited_attr;
    }

    bool CT_FileVersion::has_lowestEdited_attr() const
    {    
    return m_has_lowestEdited_attr;
    }

    void CT_FileVersion::set_lowestEdited_attr(const XSD::string_& _lowestEdited_attr)
    {    
    m_has_lowestEdited_attr = true;
    m_lowestEdited_attr = _lowestEdited_attr;
    }

    const XSD::string_& CT_FileVersion::get_lowestEdited_attr() const
    {    
    return m_lowestEdited_attr;
    }

    bool CT_FileVersion::has_rupBuild_attr() const
    {    
    return m_has_rupBuild_attr;
    }

    void CT_FileVersion::set_rupBuild_attr(const XSD::string_& _rupBuild_attr)
    {    
    m_has_rupBuild_attr = true;
    m_rupBuild_attr = _rupBuild_attr;
    }

    const XSD::string_& CT_FileVersion::get_rupBuild_attr() const
    {    
    return m_rupBuild_attr;
    }

    bool CT_FileVersion::has_codeName_attr() const
    {    
    return m_has_codeName_attr;
    }

    void CT_FileVersion::set_codeName_attr(const ns_s::ST_Guid& _codeName_attr)
    {    
    m_has_codeName_attr = true;
    m_codeName_attr = new ns_s::ST_Guid(_codeName_attr);
    }

    const ns_s::ST_Guid& CT_FileVersion::get_codeName_attr() const
    {    
    if (m_codeName_attr)
    {
        return *m_codeName_attr;
    }
    return ns_s::ST_Guid::default_instance();
    }

CT_FileVersion* CT_FileVersion::default_instance_ = NULL;

    // CT_BookViews
    CT_BookViews::CT_BookViews()

    {
    }
    CT_BookViews::~CT_BookViews()
{
    clear();    }
    CT_BookView* CT_BookViews::add_workbookView()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_BookView* pNewChild = pChildGroup->mutable_workbookView();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_BookViews::clear()
    {    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_BookViews::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_workbookView())
            {
                (*iter)->get_workbookView().toXmlElem("main:workbookView", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_BookViews& CT_BookViews::default_instance()
    {    
    if (!CT_BookViews::default_instance_)
    {
        CT_BookViews::default_instance_ = new CT_BookViews();
    }
    return *CT_BookViews::default_instance_;
    }


    // CT_BookViews::ChildGroup_1
    CT_BookViews::ChildGroup_1::ChildGroup_1()
    :m_has_workbookView(false),
    m_workbookView(NULL)
    {
    }
    bool CT_BookViews::ChildGroup_1::has_workbookView() const
    {    
    return m_has_workbookView;
    }

    CT_BookView* CT_BookViews::ChildGroup_1::mutable_workbookView()
    {    
    
    m_has_workbookView = true;
    if (!m_workbookView)
    {
        m_workbookView = new CT_BookView();
    }
    return m_workbookView;
    }

    const CT_BookView& CT_BookViews::ChildGroup_1::get_workbookView() const
    {    
    if (m_workbookView)
    {
        return *m_workbookView;
    }
    return CT_BookView::default_instance();
    }

CT_BookViews* CT_BookViews::default_instance_ = NULL;

    // CT_BookView
    CT_BookView::CT_BookView()
    :m_has_extLst(false),
    m_extLst(NULL),
    m_has_visibility_attr(false),
    m_visibility_attr(NULL),
    m_has_minimized_attr(false),
    m_minimized_attr(false),
    m_has_showHorizontalScroll_attr(false),
    m_showHorizontalScroll_attr(false),
    m_has_showVerticalScroll_attr(false),
    m_showVerticalScroll_attr(false),
    m_has_showSheetTabs_attr(false),
    m_showSheetTabs_attr(false),
    m_has_xWindow_attr(false),
    m_xWindow_attr(0),
    m_has_yWindow_attr(false),
    m_yWindow_attr(0),
    m_has_windowWidth_attr(false),
    m_windowWidth_attr(0),
    m_has_windowHeight_attr(false),
    m_windowHeight_attr(0),
    m_has_tabRatio_attr(false),
    m_tabRatio_attr(0),
    m_has_firstSheet_attr(false),
    m_firstSheet_attr(0),
    m_has_activeTab_attr(false),
    m_activeTab_attr(0),
    m_has_autoFilterDateGrouping_attr(false),
    m_autoFilterDateGrouping_attr(false)
    {
    }
    CT_BookView::~CT_BookView()
{
    clear();    }
    bool CT_BookView::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* CT_BookView::mutable_extLst()
    {    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& CT_BookView::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

    void CT_BookView::clear()
    {    
    m_has_visibility_attr = false;
    
    if (m_visibility_attr)
    {
        delete m_visibility_attr;
        m_visibility_attr = NULL;
    }
    
    
    m_has_minimized_attr = false;
    m_minimized_attr = false;
    
    m_has_showHorizontalScroll_attr = false;
    m_showHorizontalScroll_attr = false;
    
    m_has_showVerticalScroll_attr = false;
    m_showVerticalScroll_attr = false;
    
    m_has_showSheetTabs_attr = false;
    m_showSheetTabs_attr = false;
    
    m_has_xWindow_attr = false;
    m_xWindow_attr = 0;
    
    m_has_yWindow_attr = false;
    m_yWindow_attr = 0;
    
    m_has_windowWidth_attr = false;
    m_windowWidth_attr = 0;
    
    m_has_windowHeight_attr = false;
    m_windowHeight_attr = 0;
    
    m_has_tabRatio_attr = false;
    m_tabRatio_attr = 0;
    
    m_has_firstSheet_attr = false;
    m_firstSheet_attr = 0;
    
    m_has_activeTab_attr = false;
    m_activeTab_attr = 0;
    
    m_has_autoFilterDateGrouping_attr = false;
    m_autoFilterDateGrouping_attr = false;
    }

    void CT_BookView::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_visibility_attr)
    {
        m_visibility_attr->toXmlAttr("visibility", _outStream);
    }
    
    
    if (m_has_minimized_attr)
    {
        _outStream << " " << "minimized" << "=\"" << XSD::XMLBooleanStr(m_minimized_attr) << "\"";
    }
    
    
    if (m_has_showHorizontalScroll_attr)
    {
        _outStream << " " << "showHorizontalScroll" << "=\"" << XSD::XMLBooleanStr(m_showHorizontalScroll_attr) << "\"";
    }
    
    
    if (m_has_showVerticalScroll_attr)
    {
        _outStream << " " << "showVerticalScroll" << "=\"" << XSD::XMLBooleanStr(m_showVerticalScroll_attr) << "\"";
    }
    
    
    if (m_has_showSheetTabs_attr)
    {
        _outStream << " " << "showSheetTabs" << "=\"" << XSD::XMLBooleanStr(m_showSheetTabs_attr) << "\"";
    }
    
    
    if (m_has_xWindow_attr)
    {
        _outStream << " " << "xWindow" << "=\"" << m_xWindow_attr << "\"";
    }
    
    
    if (m_has_yWindow_attr)
    {
        _outStream << " " << "yWindow" << "=\"" << m_yWindow_attr << "\"";
    }
    
    
    if (m_has_windowWidth_attr)
    {
        _outStream << " " << "windowWidth" << "=\"" << m_windowWidth_attr << "\"";
    }
    
    
    if (m_has_windowHeight_attr)
    {
        _outStream << " " << "windowHeight" << "=\"" << m_windowHeight_attr << "\"";
    }
    
    
    if (m_has_tabRatio_attr)
    {
        _outStream << " " << "tabRatio" << "=\"" << m_tabRatio_attr << "\"";
    }
    
    
    if (m_has_firstSheet_attr)
    {
        _outStream << " " << "firstSheet" << "=\"" << m_firstSheet_attr << "\"";
    }
    
    
    if (m_has_activeTab_attr)
    {
        _outStream << " " << "activeTab" << "=\"" << m_activeTab_attr << "\"";
    }
    
    
    if (m_has_autoFilterDateGrouping_attr)
    {
        _outStream << " " << "autoFilterDateGrouping" << "=\"" << XSD::XMLBooleanStr(m_autoFilterDateGrouping_attr) << "\"";
    }
    
            _outStream << ">";
            
    if (m_has_extLst)
    {
        m_extLst->toXmlElem("main:extLst", "", _outStream);;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_BookView& CT_BookView::default_instance()
    {    
    if (!CT_BookView::default_instance_)
    {
        CT_BookView::default_instance_ = new CT_BookView();
    }
    return *CT_BookView::default_instance_;
    }

    bool CT_BookView::has_visibility_attr() const
    {    
    return m_has_visibility_attr;
    }

    void CT_BookView::set_visibility_attr(const ST_Visibility& _visibility_attr)
    {    
    m_has_visibility_attr = true;
    m_visibility_attr = new ST_Visibility(_visibility_attr);
    }

    const ST_Visibility& CT_BookView::get_visibility_attr() const
    {    
    if (m_visibility_attr)
    {
        return *m_visibility_attr;
    }
    return ST_Visibility::default_instance();
    }

    bool CT_BookView::has_minimized_attr() const
    {    
    return m_has_minimized_attr;
    }

    void CT_BookView::set_minimized_attr(const XSD::boolean_& _minimized_attr)
    {    
    m_has_minimized_attr = true;
    m_minimized_attr = _minimized_attr;
    }

    const XSD::boolean_& CT_BookView::get_minimized_attr() const
    {    
    return m_minimized_attr;
    }

    bool CT_BookView::has_showHorizontalScroll_attr() const
    {    
    return m_has_showHorizontalScroll_attr;
    }

    void CT_BookView::set_showHorizontalScroll_attr(const XSD::boolean_& _showHorizontalScroll_attr)
    {    
    m_has_showHorizontalScroll_attr = true;
    m_showHorizontalScroll_attr = _showHorizontalScroll_attr;
    }

    const XSD::boolean_& CT_BookView::get_showHorizontalScroll_attr() const
    {    
    return m_showHorizontalScroll_attr;
    }

    bool CT_BookView::has_showVerticalScroll_attr() const
    {    
    return m_has_showVerticalScroll_attr;
    }

    void CT_BookView::set_showVerticalScroll_attr(const XSD::boolean_& _showVerticalScroll_attr)
    {    
    m_has_showVerticalScroll_attr = true;
    m_showVerticalScroll_attr = _showVerticalScroll_attr;
    }

    const XSD::boolean_& CT_BookView::get_showVerticalScroll_attr() const
    {    
    return m_showVerticalScroll_attr;
    }

    bool CT_BookView::has_showSheetTabs_attr() const
    {    
    return m_has_showSheetTabs_attr;
    }

    void CT_BookView::set_showSheetTabs_attr(const XSD::boolean_& _showSheetTabs_attr)
    {    
    m_has_showSheetTabs_attr = true;
    m_showSheetTabs_attr = _showSheetTabs_attr;
    }

    const XSD::boolean_& CT_BookView::get_showSheetTabs_attr() const
    {    
    return m_showSheetTabs_attr;
    }

    bool CT_BookView::has_xWindow_attr() const
    {    
    return m_has_xWindow_attr;
    }

    void CT_BookView::set_xWindow_attr(const XSD::int_& _xWindow_attr)
    {    
    m_has_xWindow_attr = true;
    m_xWindow_attr = _xWindow_attr;
    }

    const XSD::int_& CT_BookView::get_xWindow_attr() const
    {    
    return m_xWindow_attr;
    }

    bool CT_BookView::has_yWindow_attr() const
    {    
    return m_has_yWindow_attr;
    }

    void CT_BookView::set_yWindow_attr(const XSD::int_& _yWindow_attr)
    {    
    m_has_yWindow_attr = true;
    m_yWindow_attr = _yWindow_attr;
    }

    const XSD::int_& CT_BookView::get_yWindow_attr() const
    {    
    return m_yWindow_attr;
    }

    bool CT_BookView::has_windowWidth_attr() const
    {    
    return m_has_windowWidth_attr;
    }

    void CT_BookView::set_windowWidth_attr(const XSD::unsignedInt_& _windowWidth_attr)
    {    
    m_has_windowWidth_attr = true;
    m_windowWidth_attr = _windowWidth_attr;
    }

    const XSD::unsignedInt_& CT_BookView::get_windowWidth_attr() const
    {    
    return m_windowWidth_attr;
    }

    bool CT_BookView::has_windowHeight_attr() const
    {    
    return m_has_windowHeight_attr;
    }

    void CT_BookView::set_windowHeight_attr(const XSD::unsignedInt_& _windowHeight_attr)
    {    
    m_has_windowHeight_attr = true;
    m_windowHeight_attr = _windowHeight_attr;
    }

    const XSD::unsignedInt_& CT_BookView::get_windowHeight_attr() const
    {    
    return m_windowHeight_attr;
    }

    bool CT_BookView::has_tabRatio_attr() const
    {    
    return m_has_tabRatio_attr;
    }

    void CT_BookView::set_tabRatio_attr(const XSD::unsignedInt_& _tabRatio_attr)
    {    
    m_has_tabRatio_attr = true;
    m_tabRatio_attr = _tabRatio_attr;
    }

    const XSD::unsignedInt_& CT_BookView::get_tabRatio_attr() const
    {    
    return m_tabRatio_attr;
    }

    bool CT_BookView::has_firstSheet_attr() const
    {    
    return m_has_firstSheet_attr;
    }

    void CT_BookView::set_firstSheet_attr(const XSD::unsignedInt_& _firstSheet_attr)
    {    
    m_has_firstSheet_attr = true;
    m_firstSheet_attr = _firstSheet_attr;
    }

    const XSD::unsignedInt_& CT_BookView::get_firstSheet_attr() const
    {    
    return m_firstSheet_attr;
    }

    bool CT_BookView::has_activeTab_attr() const
    {    
    return m_has_activeTab_attr;
    }

    void CT_BookView::set_activeTab_attr(const XSD::unsignedInt_& _activeTab_attr)
    {    
    m_has_activeTab_attr = true;
    m_activeTab_attr = _activeTab_attr;
    }

    const XSD::unsignedInt_& CT_BookView::get_activeTab_attr() const
    {    
    return m_activeTab_attr;
    }

    bool CT_BookView::has_autoFilterDateGrouping_attr() const
    {    
    return m_has_autoFilterDateGrouping_attr;
    }

    void CT_BookView::set_autoFilterDateGrouping_attr(const XSD::boolean_& _autoFilterDateGrouping_attr)
    {    
    m_has_autoFilterDateGrouping_attr = true;
    m_autoFilterDateGrouping_attr = _autoFilterDateGrouping_attr;
    }

    const XSD::boolean_& CT_BookView::get_autoFilterDateGrouping_attr() const
    {    
    return m_autoFilterDateGrouping_attr;
    }

CT_BookView* CT_BookView::default_instance_ = NULL;

    // CT_CustomWorkbookViews
    CT_CustomWorkbookViews::CT_CustomWorkbookViews()

    {
    }
    CT_CustomWorkbookViews::~CT_CustomWorkbookViews()
{
    clear();    }
    CT_CustomWorkbookView* CT_CustomWorkbookViews::add_customWorkbookView()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_CustomWorkbookView* pNewChild = pChildGroup->mutable_customWorkbookView();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_CustomWorkbookViews::clear()
    {    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_CustomWorkbookViews::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_customWorkbookView())
            {
                (*iter)->get_customWorkbookView().toXmlElem("main:customWorkbookView", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_CustomWorkbookViews& CT_CustomWorkbookViews::default_instance()
    {    
    if (!CT_CustomWorkbookViews::default_instance_)
    {
        CT_CustomWorkbookViews::default_instance_ = new CT_CustomWorkbookViews();
    }
    return *CT_CustomWorkbookViews::default_instance_;
    }


    // CT_CustomWorkbookViews::ChildGroup_1
    CT_CustomWorkbookViews::ChildGroup_1::ChildGroup_1()
    :m_has_customWorkbookView(false),
    m_customWorkbookView(NULL)
    {
    }
    bool CT_CustomWorkbookViews::ChildGroup_1::has_customWorkbookView() const
    {    
    return m_has_customWorkbookView;
    }

    CT_CustomWorkbookView* CT_CustomWorkbookViews::ChildGroup_1::mutable_customWorkbookView()
    {    
    
    m_has_customWorkbookView = true;
    if (!m_customWorkbookView)
    {
        m_customWorkbookView = new CT_CustomWorkbookView();
    }
    return m_customWorkbookView;
    }

    const CT_CustomWorkbookView& CT_CustomWorkbookViews::ChildGroup_1::get_customWorkbookView() const
    {    
    if (m_customWorkbookView)
    {
        return *m_customWorkbookView;
    }
    return CT_CustomWorkbookView::default_instance();
    }

CT_CustomWorkbookViews* CT_CustomWorkbookViews::default_instance_ = NULL;

    // CT_CustomWorkbookView
    CT_CustomWorkbookView::CT_CustomWorkbookView()
    :m_has_extLst(false),
    m_extLst(NULL),
    m_has_name_attr(false),
    m_name_attr(NULL),
    m_has_guid_attr(false),
    m_guid_attr(NULL),
    m_has_autoUpdate_attr(false),
    m_autoUpdate_attr(false),
    m_has_mergeInterval_attr(false),
    m_mergeInterval_attr(0),
    m_has_changesSavedWin_attr(false),
    m_changesSavedWin_attr(false),
    m_has_onlySync_attr(false),
    m_onlySync_attr(false),
    m_has_personalView_attr(false),
    m_personalView_attr(false),
    m_has_includePrintSettings_attr(false),
    m_includePrintSettings_attr(false),
    m_has_includeHiddenRowCol_attr(false),
    m_includeHiddenRowCol_attr(false),
    m_has_maximized_attr(false),
    m_maximized_attr(false),
    m_has_minimized_attr(false),
    m_minimized_attr(false),
    m_has_showHorizontalScroll_attr(false),
    m_showHorizontalScroll_attr(false),
    m_has_showVerticalScroll_attr(false),
    m_showVerticalScroll_attr(false),
    m_has_showSheetTabs_attr(false),
    m_showSheetTabs_attr(false),
    m_has_xWindow_attr(false),
    m_xWindow_attr(0),
    m_has_yWindow_attr(false),
    m_yWindow_attr(0),
    m_has_windowWidth_attr(false),
    m_windowWidth_attr(0),
    m_has_windowHeight_attr(false),
    m_windowHeight_attr(0),
    m_has_tabRatio_attr(false),
    m_tabRatio_attr(0),
    m_has_activeSheetId_attr(false),
    m_activeSheetId_attr(0),
    m_has_showFormulaBar_attr(false),
    m_showFormulaBar_attr(false),
    m_has_showStatusbar_attr(false),
    m_showStatusbar_attr(false),
    m_has_showComments_attr(false),
    m_showComments_attr(NULL),
    m_has_showObjects_attr(false),
    m_showObjects_attr(NULL)
    {
    }
    CT_CustomWorkbookView::~CT_CustomWorkbookView()
{
    clear();    }
    bool CT_CustomWorkbookView::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* CT_CustomWorkbookView::mutable_extLst()
    {    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& CT_CustomWorkbookView::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

    void CT_CustomWorkbookView::clear()
    {    
    m_has_name_attr = false;
    
    if (m_name_attr)
    {
        delete m_name_attr;
        m_name_attr = NULL;
    }
    
    
    m_has_guid_attr = false;
    
    if (m_guid_attr)
    {
        delete m_guid_attr;
        m_guid_attr = NULL;
    }
    
    
    m_has_autoUpdate_attr = false;
    m_autoUpdate_attr = false;
    
    m_has_mergeInterval_attr = false;
    m_mergeInterval_attr = 0;
    
    m_has_changesSavedWin_attr = false;
    m_changesSavedWin_attr = false;
    
    m_has_onlySync_attr = false;
    m_onlySync_attr = false;
    
    m_has_personalView_attr = false;
    m_personalView_attr = false;
    
    m_has_includePrintSettings_attr = false;
    m_includePrintSettings_attr = false;
    
    m_has_includeHiddenRowCol_attr = false;
    m_includeHiddenRowCol_attr = false;
    
    m_has_maximized_attr = false;
    m_maximized_attr = false;
    
    m_has_minimized_attr = false;
    m_minimized_attr = false;
    
    m_has_showHorizontalScroll_attr = false;
    m_showHorizontalScroll_attr = false;
    
    m_has_showVerticalScroll_attr = false;
    m_showVerticalScroll_attr = false;
    
    m_has_showSheetTabs_attr = false;
    m_showSheetTabs_attr = false;
    
    m_has_xWindow_attr = false;
    m_xWindow_attr = 0;
    
    m_has_yWindow_attr = false;
    m_yWindow_attr = 0;
    
    m_has_windowWidth_attr = false;
    m_windowWidth_attr = 0;
    
    m_has_windowHeight_attr = false;
    m_windowHeight_attr = 0;
    
    m_has_tabRatio_attr = false;
    m_tabRatio_attr = 0;
    
    m_has_activeSheetId_attr = false;
    m_activeSheetId_attr = 0;
    
    m_has_showFormulaBar_attr = false;
    m_showFormulaBar_attr = false;
    
    m_has_showStatusbar_attr = false;
    m_showStatusbar_attr = false;
    
    m_has_showComments_attr = false;
    
    if (m_showComments_attr)
    {
        delete m_showComments_attr;
        m_showComments_attr = NULL;
    }
    
    
    m_has_showObjects_attr = false;
    
    if (m_showObjects_attr)
    {
        delete m_showObjects_attr;
        m_showObjects_attr = NULL;
    }
    
    }

    void CT_CustomWorkbookView::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_name_attr)
    {
        m_name_attr->toXmlAttr("name", _outStream);
    }
    
    
    if (m_has_guid_attr)
    {
        m_guid_attr->toXmlAttr("guid", _outStream);
    }
    
    
    if (m_has_autoUpdate_attr)
    {
        _outStream << " " << "autoUpdate" << "=\"" << XSD::XMLBooleanStr(m_autoUpdate_attr) << "\"";
    }
    
    
    if (m_has_mergeInterval_attr)
    {
        _outStream << " " << "mergeInterval" << "=\"" << m_mergeInterval_attr << "\"";
    }
    
    
    if (m_has_changesSavedWin_attr)
    {
        _outStream << " " << "changesSavedWin" << "=\"" << XSD::XMLBooleanStr(m_changesSavedWin_attr) << "\"";
    }
    
    
    if (m_has_onlySync_attr)
    {
        _outStream << " " << "onlySync" << "=\"" << XSD::XMLBooleanStr(m_onlySync_attr) << "\"";
    }
    
    
    if (m_has_personalView_attr)
    {
        _outStream << " " << "personalView" << "=\"" << XSD::XMLBooleanStr(m_personalView_attr) << "\"";
    }
    
    
    if (m_has_includePrintSettings_attr)
    {
        _outStream << " " << "includePrintSettings" << "=\"" << XSD::XMLBooleanStr(m_includePrintSettings_attr) << "\"";
    }
    
    
    if (m_has_includeHiddenRowCol_attr)
    {
        _outStream << " " << "includeHiddenRowCol" << "=\"" << XSD::XMLBooleanStr(m_includeHiddenRowCol_attr) << "\"";
    }
    
    
    if (m_has_maximized_attr)
    {
        _outStream << " " << "maximized" << "=\"" << XSD::XMLBooleanStr(m_maximized_attr) << "\"";
    }
    
    
    if (m_has_minimized_attr)
    {
        _outStream << " " << "minimized" << "=\"" << XSD::XMLBooleanStr(m_minimized_attr) << "\"";
    }
    
    
    if (m_has_showHorizontalScroll_attr)
    {
        _outStream << " " << "showHorizontalScroll" << "=\"" << XSD::XMLBooleanStr(m_showHorizontalScroll_attr) << "\"";
    }
    
    
    if (m_has_showVerticalScroll_attr)
    {
        _outStream << " " << "showVerticalScroll" << "=\"" << XSD::XMLBooleanStr(m_showVerticalScroll_attr) << "\"";
    }
    
    
    if (m_has_showSheetTabs_attr)
    {
        _outStream << " " << "showSheetTabs" << "=\"" << XSD::XMLBooleanStr(m_showSheetTabs_attr) << "\"";
    }
    
    
    if (m_has_xWindow_attr)
    {
        _outStream << " " << "xWindow" << "=\"" << m_xWindow_attr << "\"";
    }
    
    
    if (m_has_yWindow_attr)
    {
        _outStream << " " << "yWindow" << "=\"" << m_yWindow_attr << "\"";
    }
    
    
    if (m_has_windowWidth_attr)
    {
        _outStream << " " << "windowWidth" << "=\"" << m_windowWidth_attr << "\"";
    }
    
    
    if (m_has_windowHeight_attr)
    {
        _outStream << " " << "windowHeight" << "=\"" << m_windowHeight_attr << "\"";
    }
    
    
    if (m_has_tabRatio_attr)
    {
        _outStream << " " << "tabRatio" << "=\"" << m_tabRatio_attr << "\"";
    }
    
    
    if (m_has_activeSheetId_attr)
    {
        _outStream << " " << "activeSheetId" << "=\"" << m_activeSheetId_attr << "\"";
    }
    
    
    if (m_has_showFormulaBar_attr)
    {
        _outStream << " " << "showFormulaBar" << "=\"" << XSD::XMLBooleanStr(m_showFormulaBar_attr) << "\"";
    }
    
    
    if (m_has_showStatusbar_attr)
    {
        _outStream << " " << "showStatusbar" << "=\"" << XSD::XMLBooleanStr(m_showStatusbar_attr) << "\"";
    }
    
    
    if (m_has_showComments_attr)
    {
        m_showComments_attr->toXmlAttr("showComments", _outStream);
    }
    
    
    if (m_has_showObjects_attr)
    {
        m_showObjects_attr->toXmlAttr("showObjects", _outStream);
    }
    
            _outStream << ">";
            
    if (m_has_extLst)
    {
        m_extLst->toXmlElem("main:extLst", "", _outStream);;
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_CustomWorkbookView& CT_CustomWorkbookView::default_instance()
    {    
    if (!CT_CustomWorkbookView::default_instance_)
    {
        CT_CustomWorkbookView::default_instance_ = new CT_CustomWorkbookView();
    }
    return *CT_CustomWorkbookView::default_instance_;
    }

    bool CT_CustomWorkbookView::has_name_attr() const
    {    
    return m_has_name_attr;
    }

    void CT_CustomWorkbookView::set_name_attr(const ns_s::ST_Xstring& _name_attr)
    {    
    m_has_name_attr = true;
    m_name_attr = new ns_s::ST_Xstring(_name_attr);
    }

    const ns_s::ST_Xstring& CT_CustomWorkbookView::get_name_attr() const
    {    
    if (m_name_attr)
    {
        return *m_name_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_CustomWorkbookView::has_guid_attr() const
    {    
    return m_has_guid_attr;
    }

    void CT_CustomWorkbookView::set_guid_attr(const ns_s::ST_Guid& _guid_attr)
    {    
    m_has_guid_attr = true;
    m_guid_attr = new ns_s::ST_Guid(_guid_attr);
    }

    const ns_s::ST_Guid& CT_CustomWorkbookView::get_guid_attr() const
    {    
    if (m_guid_attr)
    {
        return *m_guid_attr;
    }
    return ns_s::ST_Guid::default_instance();
    }

    bool CT_CustomWorkbookView::has_autoUpdate_attr() const
    {    
    return m_has_autoUpdate_attr;
    }

    void CT_CustomWorkbookView::set_autoUpdate_attr(const XSD::boolean_& _autoUpdate_attr)
    {    
    m_has_autoUpdate_attr = true;
    m_autoUpdate_attr = _autoUpdate_attr;
    }

    const XSD::boolean_& CT_CustomWorkbookView::get_autoUpdate_attr() const
    {    
    return m_autoUpdate_attr;
    }

    bool CT_CustomWorkbookView::has_mergeInterval_attr() const
    {    
    return m_has_mergeInterval_attr;
    }

    void CT_CustomWorkbookView::set_mergeInterval_attr(const XSD::unsignedInt_& _mergeInterval_attr)
    {    
    m_has_mergeInterval_attr = true;
    m_mergeInterval_attr = _mergeInterval_attr;
    }

    const XSD::unsignedInt_& CT_CustomWorkbookView::get_mergeInterval_attr() const
    {    
    return m_mergeInterval_attr;
    }

    bool CT_CustomWorkbookView::has_changesSavedWin_attr() const
    {    
    return m_has_changesSavedWin_attr;
    }

    void CT_CustomWorkbookView::set_changesSavedWin_attr(const XSD::boolean_& _changesSavedWin_attr)
    {    
    m_has_changesSavedWin_attr = true;
    m_changesSavedWin_attr = _changesSavedWin_attr;
    }

    const XSD::boolean_& CT_CustomWorkbookView::get_changesSavedWin_attr() const
    {    
    return m_changesSavedWin_attr;
    }

    bool CT_CustomWorkbookView::has_onlySync_attr() const
    {    
    return m_has_onlySync_attr;
    }

    void CT_CustomWorkbookView::set_onlySync_attr(const XSD::boolean_& _onlySync_attr)
    {    
    m_has_onlySync_attr = true;
    m_onlySync_attr = _onlySync_attr;
    }

    const XSD::boolean_& CT_CustomWorkbookView::get_onlySync_attr() const
    {    
    return m_onlySync_attr;
    }

    bool CT_CustomWorkbookView::has_personalView_attr() const
    {    
    return m_has_personalView_attr;
    }

    void CT_CustomWorkbookView::set_personalView_attr(const XSD::boolean_& _personalView_attr)
    {    
    m_has_personalView_attr = true;
    m_personalView_attr = _personalView_attr;
    }

    const XSD::boolean_& CT_CustomWorkbookView::get_personalView_attr() const
    {    
    return m_personalView_attr;
    }

    bool CT_CustomWorkbookView::has_includePrintSettings_attr() const
    {    
    return m_has_includePrintSettings_attr;
    }

    void CT_CustomWorkbookView::set_includePrintSettings_attr(const XSD::boolean_& _includePrintSettings_attr)
    {    
    m_has_includePrintSettings_attr = true;
    m_includePrintSettings_attr = _includePrintSettings_attr;
    }

    const XSD::boolean_& CT_CustomWorkbookView::get_includePrintSettings_attr() const
    {    
    return m_includePrintSettings_attr;
    }

    bool CT_CustomWorkbookView::has_includeHiddenRowCol_attr() const
    {    
    return m_has_includeHiddenRowCol_attr;
    }

    void CT_CustomWorkbookView::set_includeHiddenRowCol_attr(const XSD::boolean_& _includeHiddenRowCol_attr)
    {    
    m_has_includeHiddenRowCol_attr = true;
    m_includeHiddenRowCol_attr = _includeHiddenRowCol_attr;
    }

    const XSD::boolean_& CT_CustomWorkbookView::get_includeHiddenRowCol_attr() const
    {    
    return m_includeHiddenRowCol_attr;
    }

    bool CT_CustomWorkbookView::has_maximized_attr() const
    {    
    return m_has_maximized_attr;
    }

    void CT_CustomWorkbookView::set_maximized_attr(const XSD::boolean_& _maximized_attr)
    {    
    m_has_maximized_attr = true;
    m_maximized_attr = _maximized_attr;
    }

    const XSD::boolean_& CT_CustomWorkbookView::get_maximized_attr() const
    {    
    return m_maximized_attr;
    }

    bool CT_CustomWorkbookView::has_minimized_attr() const
    {    
    return m_has_minimized_attr;
    }

    void CT_CustomWorkbookView::set_minimized_attr(const XSD::boolean_& _minimized_attr)
    {    
    m_has_minimized_attr = true;
    m_minimized_attr = _minimized_attr;
    }

    const XSD::boolean_& CT_CustomWorkbookView::get_minimized_attr() const
    {    
    return m_minimized_attr;
    }

    bool CT_CustomWorkbookView::has_showHorizontalScroll_attr() const
    {    
    return m_has_showHorizontalScroll_attr;
    }

    void CT_CustomWorkbookView::set_showHorizontalScroll_attr(const XSD::boolean_& _showHorizontalScroll_attr)
    {    
    m_has_showHorizontalScroll_attr = true;
    m_showHorizontalScroll_attr = _showHorizontalScroll_attr;
    }

    const XSD::boolean_& CT_CustomWorkbookView::get_showHorizontalScroll_attr() const
    {    
    return m_showHorizontalScroll_attr;
    }

    bool CT_CustomWorkbookView::has_showVerticalScroll_attr() const
    {    
    return m_has_showVerticalScroll_attr;
    }

    void CT_CustomWorkbookView::set_showVerticalScroll_attr(const XSD::boolean_& _showVerticalScroll_attr)
    {    
    m_has_showVerticalScroll_attr = true;
    m_showVerticalScroll_attr = _showVerticalScroll_attr;
    }

    const XSD::boolean_& CT_CustomWorkbookView::get_showVerticalScroll_attr() const
    {    
    return m_showVerticalScroll_attr;
    }

    bool CT_CustomWorkbookView::has_showSheetTabs_attr() const
    {    
    return m_has_showSheetTabs_attr;
    }

    void CT_CustomWorkbookView::set_showSheetTabs_attr(const XSD::boolean_& _showSheetTabs_attr)
    {    
    m_has_showSheetTabs_attr = true;
    m_showSheetTabs_attr = _showSheetTabs_attr;
    }

    const XSD::boolean_& CT_CustomWorkbookView::get_showSheetTabs_attr() const
    {    
    return m_showSheetTabs_attr;
    }

    bool CT_CustomWorkbookView::has_xWindow_attr() const
    {    
    return m_has_xWindow_attr;
    }

    void CT_CustomWorkbookView::set_xWindow_attr(const XSD::int_& _xWindow_attr)
    {    
    m_has_xWindow_attr = true;
    m_xWindow_attr = _xWindow_attr;
    }

    const XSD::int_& CT_CustomWorkbookView::get_xWindow_attr() const
    {    
    return m_xWindow_attr;
    }

    bool CT_CustomWorkbookView::has_yWindow_attr() const
    {    
    return m_has_yWindow_attr;
    }

    void CT_CustomWorkbookView::set_yWindow_attr(const XSD::int_& _yWindow_attr)
    {    
    m_has_yWindow_attr = true;
    m_yWindow_attr = _yWindow_attr;
    }

    const XSD::int_& CT_CustomWorkbookView::get_yWindow_attr() const
    {    
    return m_yWindow_attr;
    }

    bool CT_CustomWorkbookView::has_windowWidth_attr() const
    {    
    return m_has_windowWidth_attr;
    }

    void CT_CustomWorkbookView::set_windowWidth_attr(const XSD::unsignedInt_& _windowWidth_attr)
    {    
    m_has_windowWidth_attr = true;
    m_windowWidth_attr = _windowWidth_attr;
    }

    const XSD::unsignedInt_& CT_CustomWorkbookView::get_windowWidth_attr() const
    {    
    return m_windowWidth_attr;
    }

    bool CT_CustomWorkbookView::has_windowHeight_attr() const
    {    
    return m_has_windowHeight_attr;
    }

    void CT_CustomWorkbookView::set_windowHeight_attr(const XSD::unsignedInt_& _windowHeight_attr)
    {    
    m_has_windowHeight_attr = true;
    m_windowHeight_attr = _windowHeight_attr;
    }

    const XSD::unsignedInt_& CT_CustomWorkbookView::get_windowHeight_attr() const
    {    
    return m_windowHeight_attr;
    }

    bool CT_CustomWorkbookView::has_tabRatio_attr() const
    {    
    return m_has_tabRatio_attr;
    }

    void CT_CustomWorkbookView::set_tabRatio_attr(const XSD::unsignedInt_& _tabRatio_attr)
    {    
    m_has_tabRatio_attr = true;
    m_tabRatio_attr = _tabRatio_attr;
    }

    const XSD::unsignedInt_& CT_CustomWorkbookView::get_tabRatio_attr() const
    {    
    return m_tabRatio_attr;
    }

    bool CT_CustomWorkbookView::has_activeSheetId_attr() const
    {    
    return m_has_activeSheetId_attr;
    }

    void CT_CustomWorkbookView::set_activeSheetId_attr(const XSD::unsignedInt_& _activeSheetId_attr)
    {    
    m_has_activeSheetId_attr = true;
    m_activeSheetId_attr = _activeSheetId_attr;
    }

    const XSD::unsignedInt_& CT_CustomWorkbookView::get_activeSheetId_attr() const
    {    
    return m_activeSheetId_attr;
    }

    bool CT_CustomWorkbookView::has_showFormulaBar_attr() const
    {    
    return m_has_showFormulaBar_attr;
    }

    void CT_CustomWorkbookView::set_showFormulaBar_attr(const XSD::boolean_& _showFormulaBar_attr)
    {    
    m_has_showFormulaBar_attr = true;
    m_showFormulaBar_attr = _showFormulaBar_attr;
    }

    const XSD::boolean_& CT_CustomWorkbookView::get_showFormulaBar_attr() const
    {    
    return m_showFormulaBar_attr;
    }

    bool CT_CustomWorkbookView::has_showStatusbar_attr() const
    {    
    return m_has_showStatusbar_attr;
    }

    void CT_CustomWorkbookView::set_showStatusbar_attr(const XSD::boolean_& _showStatusbar_attr)
    {    
    m_has_showStatusbar_attr = true;
    m_showStatusbar_attr = _showStatusbar_attr;
    }

    const XSD::boolean_& CT_CustomWorkbookView::get_showStatusbar_attr() const
    {    
    return m_showStatusbar_attr;
    }

    bool CT_CustomWorkbookView::has_showComments_attr() const
    {    
    return m_has_showComments_attr;
    }

    void CT_CustomWorkbookView::set_showComments_attr(const ST_Comments& _showComments_attr)
    {    
    m_has_showComments_attr = true;
    m_showComments_attr = new ST_Comments(_showComments_attr);
    }

    const ST_Comments& CT_CustomWorkbookView::get_showComments_attr() const
    {    
    if (m_showComments_attr)
    {
        return *m_showComments_attr;
    }
    return ST_Comments::default_instance();
    }

    bool CT_CustomWorkbookView::has_showObjects_attr() const
    {    
    return m_has_showObjects_attr;
    }

    void CT_CustomWorkbookView::set_showObjects_attr(const ST_Objects& _showObjects_attr)
    {    
    m_has_showObjects_attr = true;
    m_showObjects_attr = new ST_Objects(_showObjects_attr);
    }

    const ST_Objects& CT_CustomWorkbookView::get_showObjects_attr() const
    {    
    if (m_showObjects_attr)
    {
        return *m_showObjects_attr;
    }
    return ST_Objects::default_instance();
    }

CT_CustomWorkbookView* CT_CustomWorkbookView::default_instance_ = NULL;

    // CT_Sheets
    CT_Sheets::CT_Sheets()

    {
    }
    CT_Sheets::~CT_Sheets()
{
    clear();    }
    CT_Sheet* CT_Sheets::add_sheet()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Sheet* pNewChild = pChildGroup->mutable_sheet();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_Sheets::clear()
    {    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_Sheets::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_sheet())
            {
                (*iter)->get_sheet().toXmlElem("main:sheet", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_Sheets& CT_Sheets::default_instance()
    {    
    if (!CT_Sheets::default_instance_)
    {
        CT_Sheets::default_instance_ = new CT_Sheets();
    }
    return *CT_Sheets::default_instance_;
    }


    // CT_Sheets::ChildGroup_1
    CT_Sheets::ChildGroup_1::ChildGroup_1()
    :m_has_sheet(false),
    m_sheet(NULL)
    {
    }
    bool CT_Sheets::ChildGroup_1::has_sheet() const
    {    
    return m_has_sheet;
    }

    CT_Sheet* CT_Sheets::ChildGroup_1::mutable_sheet()
    {    
    
    m_has_sheet = true;
    if (!m_sheet)
    {
        m_sheet = new CT_Sheet();
    }
    return m_sheet;
    }

    const CT_Sheet& CT_Sheets::ChildGroup_1::get_sheet() const
    {    
    if (m_sheet)
    {
        return *m_sheet;
    }
    return CT_Sheet::default_instance();
    }

CT_Sheets* CT_Sheets::default_instance_ = NULL;

    // CT_Sheet
    CT_Sheet::CT_Sheet()
    :m_has_name_attr(false),
    m_name_attr(NULL),
    m_has_sheetId_attr(false),
    m_sheetId_attr(0),
    m_has_state_attr(false),
    m_state_attr(NULL),
    m_has_r_id_attr(false),
    m_r_id_attr(NULL)
    {
    }
    CT_Sheet::~CT_Sheet()
{
    clear();    }
    void CT_Sheet::clear()
    {    
    m_has_name_attr = false;
    
    if (m_name_attr)
    {
        delete m_name_attr;
        m_name_attr = NULL;
    }
    
    
    m_has_sheetId_attr = false;
    m_sheetId_attr = 0;
    
    m_has_state_attr = false;
    
    if (m_state_attr)
    {
        delete m_state_attr;
        m_state_attr = NULL;
    }
    
    
    m_has_r_id_attr = false;
    
    if (m_r_id_attr)
    {
        delete m_r_id_attr;
        m_r_id_attr = NULL;
    }
    
    }

    void CT_Sheet::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_name_attr)
    {
        m_name_attr->toXmlAttr("name", _outStream);
    }
    
    
    if (m_has_sheetId_attr)
    {
        _outStream << " " << "sheetId" << "=\"" << m_sheetId_attr << "\"";
    }
    
    
    if (m_has_state_attr)
    {
        m_state_attr->toXmlAttr("state", _outStream);
    }
    
    
    if (m_has_r_id_attr)
    {
        m_r_id_attr->toXmlAttr("r:id", _outStream);
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_Sheet& CT_Sheet::default_instance()
    {    
    if (!CT_Sheet::default_instance_)
    {
        CT_Sheet::default_instance_ = new CT_Sheet();
    }
    return *CT_Sheet::default_instance_;
    }

    bool CT_Sheet::has_name_attr() const
    {    
    return m_has_name_attr;
    }

    void CT_Sheet::set_name_attr(const ns_s::ST_Xstring& _name_attr)
    {    
    m_has_name_attr = true;
    m_name_attr = new ns_s::ST_Xstring(_name_attr);
    }

    const ns_s::ST_Xstring& CT_Sheet::get_name_attr() const
    {    
    if (m_name_attr)
    {
        return *m_name_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_Sheet::has_sheetId_attr() const
    {    
    return m_has_sheetId_attr;
    }

    void CT_Sheet::set_sheetId_attr(const XSD::unsignedInt_& _sheetId_attr)
    {    
    m_has_sheetId_attr = true;
    m_sheetId_attr = _sheetId_attr;
    }

    const XSD::unsignedInt_& CT_Sheet::get_sheetId_attr() const
    {    
    return m_sheetId_attr;
    }

    bool CT_Sheet::has_state_attr() const
    {    
    return m_has_state_attr;
    }

    void CT_Sheet::set_state_attr(const ST_SheetState& _state_attr)
    {    
    m_has_state_attr = true;
    m_state_attr = new ST_SheetState(_state_attr);
    }

    const ST_SheetState& CT_Sheet::get_state_attr() const
    {    
    if (m_state_attr)
    {
        return *m_state_attr;
    }
    return ST_SheetState::default_instance();
    }

    bool CT_Sheet::has_r_id_attr() const
    {    
    return m_has_r_id_attr;
    }

    void CT_Sheet::set_r_id_attr(const ns_r::ST_RelationshipId& _r_id_attr)
    {    
    m_has_r_id_attr = true;
    m_r_id_attr = new ns_r::ST_RelationshipId(_r_id_attr);
    }

    const ns_r::ST_RelationshipId& CT_Sheet::get_r_id_attr() const
    {    
    if (m_r_id_attr)
    {
        return *m_r_id_attr;
    }
    return ns_r::ST_RelationshipId::default_instance();
    }

CT_Sheet* CT_Sheet::default_instance_ = NULL;

    // CT_WorkbookPr
    CT_WorkbookPr::CT_WorkbookPr()
    :m_has_date1904_attr(false),
    m_date1904_attr(false),
    m_has_showObjects_attr(false),
    m_showObjects_attr(NULL),
    m_has_showBorderUnselectedTables_attr(false),
    m_showBorderUnselectedTables_attr(false),
    m_has_filterPrivacy_attr(false),
    m_filterPrivacy_attr(false),
    m_has_promptedSolutions_attr(false),
    m_promptedSolutions_attr(false),
    m_has_showInkAnnotation_attr(false),
    m_showInkAnnotation_attr(false),
    m_has_backupFile_attr(false),
    m_backupFile_attr(false),
    m_has_saveExternalLinkValues_attr(false),
    m_saveExternalLinkValues_attr(false),
    m_has_updateLinks_attr(false),
    m_updateLinks_attr(NULL),
    m_has_codeName_attr(false),
    m_codeName_attr(""),
    m_has_hidePivotFieldList_attr(false),
    m_hidePivotFieldList_attr(false),
    m_has_showPivotChartFilter_attr(false),
    m_showPivotChartFilter_attr(false),
    m_has_allowRefreshQuery_attr(false),
    m_allowRefreshQuery_attr(false),
    m_has_publishItems_attr(false),
    m_publishItems_attr(false),
    m_has_checkCompatibility_attr(false),
    m_checkCompatibility_attr(false),
    m_has_autoCompressPictures_attr(false),
    m_autoCompressPictures_attr(false),
    m_has_refreshAllConnections_attr(false),
    m_refreshAllConnections_attr(false),
    m_has_defaultThemeVersion_attr(false),
    m_defaultThemeVersion_attr(0)
    {
    }
    CT_WorkbookPr::~CT_WorkbookPr()
{
    clear();    }
    void CT_WorkbookPr::clear()
    {    
    m_has_date1904_attr = false;
    m_date1904_attr = false;
    
    m_has_showObjects_attr = false;
    
    if (m_showObjects_attr)
    {
        delete m_showObjects_attr;
        m_showObjects_attr = NULL;
    }
    
    
    m_has_showBorderUnselectedTables_attr = false;
    m_showBorderUnselectedTables_attr = false;
    
    m_has_filterPrivacy_attr = false;
    m_filterPrivacy_attr = false;
    
    m_has_promptedSolutions_attr = false;
    m_promptedSolutions_attr = false;
    
    m_has_showInkAnnotation_attr = false;
    m_showInkAnnotation_attr = false;
    
    m_has_backupFile_attr = false;
    m_backupFile_attr = false;
    
    m_has_saveExternalLinkValues_attr = false;
    m_saveExternalLinkValues_attr = false;
    
    m_has_updateLinks_attr = false;
    
    if (m_updateLinks_attr)
    {
        delete m_updateLinks_attr;
        m_updateLinks_attr = NULL;
    }
    
    
    m_has_codeName_attr = false;
    m_codeName_attr.clear();
    
    m_has_hidePivotFieldList_attr = false;
    m_hidePivotFieldList_attr = false;
    
    m_has_showPivotChartFilter_attr = false;
    m_showPivotChartFilter_attr = false;
    
    m_has_allowRefreshQuery_attr = false;
    m_allowRefreshQuery_attr = false;
    
    m_has_publishItems_attr = false;
    m_publishItems_attr = false;
    
    m_has_checkCompatibility_attr = false;
    m_checkCompatibility_attr = false;
    
    m_has_autoCompressPictures_attr = false;
    m_autoCompressPictures_attr = false;
    
    m_has_refreshAllConnections_attr = false;
    m_refreshAllConnections_attr = false;
    
    m_has_defaultThemeVersion_attr = false;
    m_defaultThemeVersion_attr = 0;
    }

    void CT_WorkbookPr::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_date1904_attr)
    {
        _outStream << " " << "date1904" << "=\"" << XSD::XMLBooleanStr(m_date1904_attr) << "\"";
    }
    
    
    if (m_has_showObjects_attr)
    {
        m_showObjects_attr->toXmlAttr("showObjects", _outStream);
    }
    
    
    if (m_has_showBorderUnselectedTables_attr)
    {
        _outStream << " " << "showBorderUnselectedTables" << "=\"" << XSD::XMLBooleanStr(m_showBorderUnselectedTables_attr) << "\"";
    }
    
    
    if (m_has_filterPrivacy_attr)
    {
        _outStream << " " << "filterPrivacy" << "=\"" << XSD::XMLBooleanStr(m_filterPrivacy_attr) << "\"";
    }
    
    
    if (m_has_promptedSolutions_attr)
    {
        _outStream << " " << "promptedSolutions" << "=\"" << XSD::XMLBooleanStr(m_promptedSolutions_attr) << "\"";
    }
    
    
    if (m_has_showInkAnnotation_attr)
    {
        _outStream << " " << "showInkAnnotation" << "=\"" << XSD::XMLBooleanStr(m_showInkAnnotation_attr) << "\"";
    }
    
    
    if (m_has_backupFile_attr)
    {
        _outStream << " " << "backupFile" << "=\"" << XSD::XMLBooleanStr(m_backupFile_attr) << "\"";
    }
    
    
    if (m_has_saveExternalLinkValues_attr)
    {
        _outStream << " " << "saveExternalLinkValues" << "=\"" << XSD::XMLBooleanStr(m_saveExternalLinkValues_attr) << "\"";
    }
    
    
    if (m_has_updateLinks_attr)
    {
        m_updateLinks_attr->toXmlAttr("updateLinks", _outStream);
    }
    
    
    if (m_has_codeName_attr)
    {
        _outStream << " " << "codeName" << "=\"" << m_codeName_attr << "\"";
    }
    
    
    if (m_has_hidePivotFieldList_attr)
    {
        _outStream << " " << "hidePivotFieldList" << "=\"" << XSD::XMLBooleanStr(m_hidePivotFieldList_attr) << "\"";
    }
    
    
    if (m_has_showPivotChartFilter_attr)
    {
        _outStream << " " << "showPivotChartFilter" << "=\"" << XSD::XMLBooleanStr(m_showPivotChartFilter_attr) << "\"";
    }
    
    
    if (m_has_allowRefreshQuery_attr)
    {
        _outStream << " " << "allowRefreshQuery" << "=\"" << XSD::XMLBooleanStr(m_allowRefreshQuery_attr) << "\"";
    }
    
    
    if (m_has_publishItems_attr)
    {
        _outStream << " " << "publishItems" << "=\"" << XSD::XMLBooleanStr(m_publishItems_attr) << "\"";
    }
    
    
    if (m_has_checkCompatibility_attr)
    {
        _outStream << " " << "checkCompatibility" << "=\"" << XSD::XMLBooleanStr(m_checkCompatibility_attr) << "\"";
    }
    
    
    if (m_has_autoCompressPictures_attr)
    {
        _outStream << " " << "autoCompressPictures" << "=\"" << XSD::XMLBooleanStr(m_autoCompressPictures_attr) << "\"";
    }
    
    
    if (m_has_refreshAllConnections_attr)
    {
        _outStream << " " << "refreshAllConnections" << "=\"" << XSD::XMLBooleanStr(m_refreshAllConnections_attr) << "\"";
    }
    
    
    if (m_has_defaultThemeVersion_attr)
    {
        _outStream << " " << "defaultThemeVersion" << "=\"" << m_defaultThemeVersion_attr << "\"";
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_WorkbookPr& CT_WorkbookPr::default_instance()
    {    
    if (!CT_WorkbookPr::default_instance_)
    {
        CT_WorkbookPr::default_instance_ = new CT_WorkbookPr();
    }
    return *CT_WorkbookPr::default_instance_;
    }

    bool CT_WorkbookPr::has_date1904_attr() const
    {    
    return m_has_date1904_attr;
    }

    void CT_WorkbookPr::set_date1904_attr(const XSD::boolean_& _date1904_attr)
    {    
    m_has_date1904_attr = true;
    m_date1904_attr = _date1904_attr;
    }

    const XSD::boolean_& CT_WorkbookPr::get_date1904_attr() const
    {    
    return m_date1904_attr;
    }

    bool CT_WorkbookPr::has_showObjects_attr() const
    {    
    return m_has_showObjects_attr;
    }

    void CT_WorkbookPr::set_showObjects_attr(const ST_Objects& _showObjects_attr)
    {    
    m_has_showObjects_attr = true;
    m_showObjects_attr = new ST_Objects(_showObjects_attr);
    }

    const ST_Objects& CT_WorkbookPr::get_showObjects_attr() const
    {    
    if (m_showObjects_attr)
    {
        return *m_showObjects_attr;
    }
    return ST_Objects::default_instance();
    }

    bool CT_WorkbookPr::has_showBorderUnselectedTables_attr() const
    {    
    return m_has_showBorderUnselectedTables_attr;
    }

    void CT_WorkbookPr::set_showBorderUnselectedTables_attr(const XSD::boolean_& _showBorderUnselectedTables_attr)
    {    
    m_has_showBorderUnselectedTables_attr = true;
    m_showBorderUnselectedTables_attr = _showBorderUnselectedTables_attr;
    }

    const XSD::boolean_& CT_WorkbookPr::get_showBorderUnselectedTables_attr() const
    {    
    return m_showBorderUnselectedTables_attr;
    }

    bool CT_WorkbookPr::has_filterPrivacy_attr() const
    {    
    return m_has_filterPrivacy_attr;
    }

    void CT_WorkbookPr::set_filterPrivacy_attr(const XSD::boolean_& _filterPrivacy_attr)
    {    
    m_has_filterPrivacy_attr = true;
    m_filterPrivacy_attr = _filterPrivacy_attr;
    }

    const XSD::boolean_& CT_WorkbookPr::get_filterPrivacy_attr() const
    {    
    return m_filterPrivacy_attr;
    }

    bool CT_WorkbookPr::has_promptedSolutions_attr() const
    {    
    return m_has_promptedSolutions_attr;
    }

    void CT_WorkbookPr::set_promptedSolutions_attr(const XSD::boolean_& _promptedSolutions_attr)
    {    
    m_has_promptedSolutions_attr = true;
    m_promptedSolutions_attr = _promptedSolutions_attr;
    }

    const XSD::boolean_& CT_WorkbookPr::get_promptedSolutions_attr() const
    {    
    return m_promptedSolutions_attr;
    }

    bool CT_WorkbookPr::has_showInkAnnotation_attr() const
    {    
    return m_has_showInkAnnotation_attr;
    }

    void CT_WorkbookPr::set_showInkAnnotation_attr(const XSD::boolean_& _showInkAnnotation_attr)
    {    
    m_has_showInkAnnotation_attr = true;
    m_showInkAnnotation_attr = _showInkAnnotation_attr;
    }

    const XSD::boolean_& CT_WorkbookPr::get_showInkAnnotation_attr() const
    {    
    return m_showInkAnnotation_attr;
    }

    bool CT_WorkbookPr::has_backupFile_attr() const
    {    
    return m_has_backupFile_attr;
    }

    void CT_WorkbookPr::set_backupFile_attr(const XSD::boolean_& _backupFile_attr)
    {    
    m_has_backupFile_attr = true;
    m_backupFile_attr = _backupFile_attr;
    }

    const XSD::boolean_& CT_WorkbookPr::get_backupFile_attr() const
    {    
    return m_backupFile_attr;
    }

    bool CT_WorkbookPr::has_saveExternalLinkValues_attr() const
    {    
    return m_has_saveExternalLinkValues_attr;
    }

    void CT_WorkbookPr::set_saveExternalLinkValues_attr(const XSD::boolean_& _saveExternalLinkValues_attr)
    {    
    m_has_saveExternalLinkValues_attr = true;
    m_saveExternalLinkValues_attr = _saveExternalLinkValues_attr;
    }

    const XSD::boolean_& CT_WorkbookPr::get_saveExternalLinkValues_attr() const
    {    
    return m_saveExternalLinkValues_attr;
    }

    bool CT_WorkbookPr::has_updateLinks_attr() const
    {    
    return m_has_updateLinks_attr;
    }

    void CT_WorkbookPr::set_updateLinks_attr(const ST_UpdateLinks& _updateLinks_attr)
    {    
    m_has_updateLinks_attr = true;
    m_updateLinks_attr = new ST_UpdateLinks(_updateLinks_attr);
    }

    const ST_UpdateLinks& CT_WorkbookPr::get_updateLinks_attr() const
    {    
    if (m_updateLinks_attr)
    {
        return *m_updateLinks_attr;
    }
    return ST_UpdateLinks::default_instance();
    }

    bool CT_WorkbookPr::has_codeName_attr() const
    {    
    return m_has_codeName_attr;
    }

    void CT_WorkbookPr::set_codeName_attr(const XSD::string_& _codeName_attr)
    {    
    m_has_codeName_attr = true;
    m_codeName_attr = _codeName_attr;
    }

    const XSD::string_& CT_WorkbookPr::get_codeName_attr() const
    {    
    return m_codeName_attr;
    }

    bool CT_WorkbookPr::has_hidePivotFieldList_attr() const
    {    
    return m_has_hidePivotFieldList_attr;
    }

    void CT_WorkbookPr::set_hidePivotFieldList_attr(const XSD::boolean_& _hidePivotFieldList_attr)
    {    
    m_has_hidePivotFieldList_attr = true;
    m_hidePivotFieldList_attr = _hidePivotFieldList_attr;
    }

    const XSD::boolean_& CT_WorkbookPr::get_hidePivotFieldList_attr() const
    {    
    return m_hidePivotFieldList_attr;
    }

    bool CT_WorkbookPr::has_showPivotChartFilter_attr() const
    {    
    return m_has_showPivotChartFilter_attr;
    }

    void CT_WorkbookPr::set_showPivotChartFilter_attr(const XSD::boolean_& _showPivotChartFilter_attr)
    {    
    m_has_showPivotChartFilter_attr = true;
    m_showPivotChartFilter_attr = _showPivotChartFilter_attr;
    }

    const XSD::boolean_& CT_WorkbookPr::get_showPivotChartFilter_attr() const
    {    
    return m_showPivotChartFilter_attr;
    }

    bool CT_WorkbookPr::has_allowRefreshQuery_attr() const
    {    
    return m_has_allowRefreshQuery_attr;
    }

    void CT_WorkbookPr::set_allowRefreshQuery_attr(const XSD::boolean_& _allowRefreshQuery_attr)
    {    
    m_has_allowRefreshQuery_attr = true;
    m_allowRefreshQuery_attr = _allowRefreshQuery_attr;
    }

    const XSD::boolean_& CT_WorkbookPr::get_allowRefreshQuery_attr() const
    {    
    return m_allowRefreshQuery_attr;
    }

    bool CT_WorkbookPr::has_publishItems_attr() const
    {    
    return m_has_publishItems_attr;
    }

    void CT_WorkbookPr::set_publishItems_attr(const XSD::boolean_& _publishItems_attr)
    {    
    m_has_publishItems_attr = true;
    m_publishItems_attr = _publishItems_attr;
    }

    const XSD::boolean_& CT_WorkbookPr::get_publishItems_attr() const
    {    
    return m_publishItems_attr;
    }

    bool CT_WorkbookPr::has_checkCompatibility_attr() const
    {    
    return m_has_checkCompatibility_attr;
    }

    void CT_WorkbookPr::set_checkCompatibility_attr(const XSD::boolean_& _checkCompatibility_attr)
    {    
    m_has_checkCompatibility_attr = true;
    m_checkCompatibility_attr = _checkCompatibility_attr;
    }

    const XSD::boolean_& CT_WorkbookPr::get_checkCompatibility_attr() const
    {    
    return m_checkCompatibility_attr;
    }

    bool CT_WorkbookPr::has_autoCompressPictures_attr() const
    {    
    return m_has_autoCompressPictures_attr;
    }

    void CT_WorkbookPr::set_autoCompressPictures_attr(const XSD::boolean_& _autoCompressPictures_attr)
    {    
    m_has_autoCompressPictures_attr = true;
    m_autoCompressPictures_attr = _autoCompressPictures_attr;
    }

    const XSD::boolean_& CT_WorkbookPr::get_autoCompressPictures_attr() const
    {    
    return m_autoCompressPictures_attr;
    }

    bool CT_WorkbookPr::has_refreshAllConnections_attr() const
    {    
    return m_has_refreshAllConnections_attr;
    }

    void CT_WorkbookPr::set_refreshAllConnections_attr(const XSD::boolean_& _refreshAllConnections_attr)
    {    
    m_has_refreshAllConnections_attr = true;
    m_refreshAllConnections_attr = _refreshAllConnections_attr;
    }

    const XSD::boolean_& CT_WorkbookPr::get_refreshAllConnections_attr() const
    {    
    return m_refreshAllConnections_attr;
    }

    bool CT_WorkbookPr::has_defaultThemeVersion_attr() const
    {    
    return m_has_defaultThemeVersion_attr;
    }

    void CT_WorkbookPr::set_defaultThemeVersion_attr(const XSD::unsignedInt_& _defaultThemeVersion_attr)
    {    
    m_has_defaultThemeVersion_attr = true;
    m_defaultThemeVersion_attr = _defaultThemeVersion_attr;
    }

    const XSD::unsignedInt_& CT_WorkbookPr::get_defaultThemeVersion_attr() const
    {    
    return m_defaultThemeVersion_attr;
    }

CT_WorkbookPr* CT_WorkbookPr::default_instance_ = NULL;

    // CT_SmartTagPr
    CT_SmartTagPr::CT_SmartTagPr()
    :m_has_embed_attr(false),
    m_embed_attr(false),
    m_has_show_attr(false),
    m_show_attr(NULL)
    {
    }
    CT_SmartTagPr::~CT_SmartTagPr()
{
    clear();    }
    void CT_SmartTagPr::clear()
    {    
    m_has_embed_attr = false;
    m_embed_attr = false;
    
    m_has_show_attr = false;
    
    if (m_show_attr)
    {
        delete m_show_attr;
        m_show_attr = NULL;
    }
    
    }

    void CT_SmartTagPr::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_embed_attr)
    {
        _outStream << " " << "embed" << "=\"" << XSD::XMLBooleanStr(m_embed_attr) << "\"";
    }
    
    
    if (m_has_show_attr)
    {
        m_show_attr->toXmlAttr("show", _outStream);
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_SmartTagPr& CT_SmartTagPr::default_instance()
    {    
    if (!CT_SmartTagPr::default_instance_)
    {
        CT_SmartTagPr::default_instance_ = new CT_SmartTagPr();
    }
    return *CT_SmartTagPr::default_instance_;
    }

    bool CT_SmartTagPr::has_embed_attr() const
    {    
    return m_has_embed_attr;
    }

    void CT_SmartTagPr::set_embed_attr(const XSD::boolean_& _embed_attr)
    {    
    m_has_embed_attr = true;
    m_embed_attr = _embed_attr;
    }

    const XSD::boolean_& CT_SmartTagPr::get_embed_attr() const
    {    
    return m_embed_attr;
    }

    bool CT_SmartTagPr::has_show_attr() const
    {    
    return m_has_show_attr;
    }

    void CT_SmartTagPr::set_show_attr(const ST_SmartTagShow& _show_attr)
    {    
    m_has_show_attr = true;
    m_show_attr = new ST_SmartTagShow(_show_attr);
    }

    const ST_SmartTagShow& CT_SmartTagPr::get_show_attr() const
    {    
    if (m_show_attr)
    {
        return *m_show_attr;
    }
    return ST_SmartTagShow::default_instance();
    }

CT_SmartTagPr* CT_SmartTagPr::default_instance_ = NULL;

    // CT_SmartTagTypes
    CT_SmartTagTypes::CT_SmartTagTypes()

    {
    }
    CT_SmartTagTypes::~CT_SmartTagTypes()
{
    clear();    }
    CT_SmartTagType* CT_SmartTagTypes::add_smartTagType()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_SmartTagType* pNewChild = pChildGroup->mutable_smartTagType();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_SmartTagTypes::clear()
    {    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_SmartTagTypes::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_smartTagType())
            {
                (*iter)->get_smartTagType().toXmlElem("main:smartTagType", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_SmartTagTypes& CT_SmartTagTypes::default_instance()
    {    
    if (!CT_SmartTagTypes::default_instance_)
    {
        CT_SmartTagTypes::default_instance_ = new CT_SmartTagTypes();
    }
    return *CT_SmartTagTypes::default_instance_;
    }


    // CT_SmartTagTypes::ChildGroup_1
    CT_SmartTagTypes::ChildGroup_1::ChildGroup_1()
    :m_has_smartTagType(false),
    m_smartTagType(NULL)
    {
    }
    bool CT_SmartTagTypes::ChildGroup_1::has_smartTagType() const
    {    
    return m_has_smartTagType;
    }

    CT_SmartTagType* CT_SmartTagTypes::ChildGroup_1::mutable_smartTagType()
    {    
    
    m_has_smartTagType = true;
    if (!m_smartTagType)
    {
        m_smartTagType = new CT_SmartTagType();
    }
    return m_smartTagType;
    }

    const CT_SmartTagType& CT_SmartTagTypes::ChildGroup_1::get_smartTagType() const
    {    
    if (m_smartTagType)
    {
        return *m_smartTagType;
    }
    return CT_SmartTagType::default_instance();
    }

CT_SmartTagTypes* CT_SmartTagTypes::default_instance_ = NULL;

    // CT_SmartTagType
    CT_SmartTagType::CT_SmartTagType()
    :m_has_namespaceUri_attr(false),
    m_namespaceUri_attr(NULL),
    m_has_name_attr(false),
    m_name_attr(NULL),
    m_has_url_attr(false),
    m_url_attr(NULL)
    {
    }
    CT_SmartTagType::~CT_SmartTagType()
{
    clear();    }
    void CT_SmartTagType::clear()
    {    
    m_has_namespaceUri_attr = false;
    
    if (m_namespaceUri_attr)
    {
        delete m_namespaceUri_attr;
        m_namespaceUri_attr = NULL;
    }
    
    
    m_has_name_attr = false;
    
    if (m_name_attr)
    {
        delete m_name_attr;
        m_name_attr = NULL;
    }
    
    
    m_has_url_attr = false;
    
    if (m_url_attr)
    {
        delete m_url_attr;
        m_url_attr = NULL;
    }
    
    }

    void CT_SmartTagType::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_namespaceUri_attr)
    {
        m_namespaceUri_attr->toXmlAttr("namespaceUri", _outStream);
    }
    
    
    if (m_has_name_attr)
    {
        m_name_attr->toXmlAttr("name", _outStream);
    }
    
    
    if (m_has_url_attr)
    {
        m_url_attr->toXmlAttr("url", _outStream);
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_SmartTagType& CT_SmartTagType::default_instance()
    {    
    if (!CT_SmartTagType::default_instance_)
    {
        CT_SmartTagType::default_instance_ = new CT_SmartTagType();
    }
    return *CT_SmartTagType::default_instance_;
    }

    bool CT_SmartTagType::has_namespaceUri_attr() const
    {    
    return m_has_namespaceUri_attr;
    }

    void CT_SmartTagType::set_namespaceUri_attr(const ns_s::ST_Xstring& _namespaceUri_attr)
    {    
    m_has_namespaceUri_attr = true;
    m_namespaceUri_attr = new ns_s::ST_Xstring(_namespaceUri_attr);
    }

    const ns_s::ST_Xstring& CT_SmartTagType::get_namespaceUri_attr() const
    {    
    if (m_namespaceUri_attr)
    {
        return *m_namespaceUri_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_SmartTagType::has_name_attr() const
    {    
    return m_has_name_attr;
    }

    void CT_SmartTagType::set_name_attr(const ns_s::ST_Xstring& _name_attr)
    {    
    m_has_name_attr = true;
    m_name_attr = new ns_s::ST_Xstring(_name_attr);
    }

    const ns_s::ST_Xstring& CT_SmartTagType::get_name_attr() const
    {    
    if (m_name_attr)
    {
        return *m_name_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_SmartTagType::has_url_attr() const
    {    
    return m_has_url_attr;
    }

    void CT_SmartTagType::set_url_attr(const ns_s::ST_Xstring& _url_attr)
    {    
    m_has_url_attr = true;
    m_url_attr = new ns_s::ST_Xstring(_url_attr);
    }

    const ns_s::ST_Xstring& CT_SmartTagType::get_url_attr() const
    {    
    if (m_url_attr)
    {
        return *m_url_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

CT_SmartTagType* CT_SmartTagType::default_instance_ = NULL;

    // CT_FileRecoveryPr
    CT_FileRecoveryPr::CT_FileRecoveryPr()
    :m_has_autoRecover_attr(false),
    m_autoRecover_attr(false),
    m_has_crashSave_attr(false),
    m_crashSave_attr(false),
    m_has_dataExtractLoad_attr(false),
    m_dataExtractLoad_attr(false),
    m_has_repairLoad_attr(false),
    m_repairLoad_attr(false)
    {
    }
    CT_FileRecoveryPr::~CT_FileRecoveryPr()
{
    clear();    }
    void CT_FileRecoveryPr::clear()
    {    
    m_has_autoRecover_attr = false;
    m_autoRecover_attr = false;
    
    m_has_crashSave_attr = false;
    m_crashSave_attr = false;
    
    m_has_dataExtractLoad_attr = false;
    m_dataExtractLoad_attr = false;
    
    m_has_repairLoad_attr = false;
    m_repairLoad_attr = false;
    }

    void CT_FileRecoveryPr::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_autoRecover_attr)
    {
        _outStream << " " << "autoRecover" << "=\"" << XSD::XMLBooleanStr(m_autoRecover_attr) << "\"";
    }
    
    
    if (m_has_crashSave_attr)
    {
        _outStream << " " << "crashSave" << "=\"" << XSD::XMLBooleanStr(m_crashSave_attr) << "\"";
    }
    
    
    if (m_has_dataExtractLoad_attr)
    {
        _outStream << " " << "dataExtractLoad" << "=\"" << XSD::XMLBooleanStr(m_dataExtractLoad_attr) << "\"";
    }
    
    
    if (m_has_repairLoad_attr)
    {
        _outStream << " " << "repairLoad" << "=\"" << XSD::XMLBooleanStr(m_repairLoad_attr) << "\"";
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_FileRecoveryPr& CT_FileRecoveryPr::default_instance()
    {    
    if (!CT_FileRecoveryPr::default_instance_)
    {
        CT_FileRecoveryPr::default_instance_ = new CT_FileRecoveryPr();
    }
    return *CT_FileRecoveryPr::default_instance_;
    }

    bool CT_FileRecoveryPr::has_autoRecover_attr() const
    {    
    return m_has_autoRecover_attr;
    }

    void CT_FileRecoveryPr::set_autoRecover_attr(const XSD::boolean_& _autoRecover_attr)
    {    
    m_has_autoRecover_attr = true;
    m_autoRecover_attr = _autoRecover_attr;
    }

    const XSD::boolean_& CT_FileRecoveryPr::get_autoRecover_attr() const
    {    
    return m_autoRecover_attr;
    }

    bool CT_FileRecoveryPr::has_crashSave_attr() const
    {    
    return m_has_crashSave_attr;
    }

    void CT_FileRecoveryPr::set_crashSave_attr(const XSD::boolean_& _crashSave_attr)
    {    
    m_has_crashSave_attr = true;
    m_crashSave_attr = _crashSave_attr;
    }

    const XSD::boolean_& CT_FileRecoveryPr::get_crashSave_attr() const
    {    
    return m_crashSave_attr;
    }

    bool CT_FileRecoveryPr::has_dataExtractLoad_attr() const
    {    
    return m_has_dataExtractLoad_attr;
    }

    void CT_FileRecoveryPr::set_dataExtractLoad_attr(const XSD::boolean_& _dataExtractLoad_attr)
    {    
    m_has_dataExtractLoad_attr = true;
    m_dataExtractLoad_attr = _dataExtractLoad_attr;
    }

    const XSD::boolean_& CT_FileRecoveryPr::get_dataExtractLoad_attr() const
    {    
    return m_dataExtractLoad_attr;
    }

    bool CT_FileRecoveryPr::has_repairLoad_attr() const
    {    
    return m_has_repairLoad_attr;
    }

    void CT_FileRecoveryPr::set_repairLoad_attr(const XSD::boolean_& _repairLoad_attr)
    {    
    m_has_repairLoad_attr = true;
    m_repairLoad_attr = _repairLoad_attr;
    }

    const XSD::boolean_& CT_FileRecoveryPr::get_repairLoad_attr() const
    {    
    return m_repairLoad_attr;
    }

CT_FileRecoveryPr* CT_FileRecoveryPr::default_instance_ = NULL;

    // CT_CalcPr
    CT_CalcPr::CT_CalcPr()
    :m_has_calcId_attr(false),
    m_calcId_attr(0),
    m_has_calcMode_attr(false),
    m_calcMode_attr(NULL),
    m_has_fullCalcOnLoad_attr(false),
    m_fullCalcOnLoad_attr(false),
    m_has_refMode_attr(false),
    m_refMode_attr(NULL),
    m_has_iterate_attr(false),
    m_iterate_attr(false),
    m_has_iterateCount_attr(false),
    m_iterateCount_attr(0),
    m_has_iterateDelta_attr(false),
    m_iterateDelta_attr(0),
    m_has_fullPrecision_attr(false),
    m_fullPrecision_attr(false),
    m_has_calcCompleted_attr(false),
    m_calcCompleted_attr(false),
    m_has_calcOnSave_attr(false),
    m_calcOnSave_attr(false),
    m_has_concurrentCalc_attr(false),
    m_concurrentCalc_attr(false),
    m_has_concurrentManualCount_attr(false),
    m_concurrentManualCount_attr(0),
    m_has_forceFullCalc_attr(false),
    m_forceFullCalc_attr(false)
    {
    }
    CT_CalcPr::~CT_CalcPr()
{
    clear();    }
    void CT_CalcPr::clear()
    {    
    m_has_calcId_attr = false;
    m_calcId_attr = 0;
    
    m_has_calcMode_attr = false;
    
    if (m_calcMode_attr)
    {
        delete m_calcMode_attr;
        m_calcMode_attr = NULL;
    }
    
    
    m_has_fullCalcOnLoad_attr = false;
    m_fullCalcOnLoad_attr = false;
    
    m_has_refMode_attr = false;
    
    if (m_refMode_attr)
    {
        delete m_refMode_attr;
        m_refMode_attr = NULL;
    }
    
    
    m_has_iterate_attr = false;
    m_iterate_attr = false;
    
    m_has_iterateCount_attr = false;
    m_iterateCount_attr = 0;
    
    m_has_iterateDelta_attr = false;
    m_iterateDelta_attr = 0;
    
    m_has_fullPrecision_attr = false;
    m_fullPrecision_attr = false;
    
    m_has_calcCompleted_attr = false;
    m_calcCompleted_attr = false;
    
    m_has_calcOnSave_attr = false;
    m_calcOnSave_attr = false;
    
    m_has_concurrentCalc_attr = false;
    m_concurrentCalc_attr = false;
    
    m_has_concurrentManualCount_attr = false;
    m_concurrentManualCount_attr = 0;
    
    m_has_forceFullCalc_attr = false;
    m_forceFullCalc_attr = false;
    }

    void CT_CalcPr::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_calcId_attr)
    {
        _outStream << " " << "calcId" << "=\"" << m_calcId_attr << "\"";
    }
    
    
    if (m_has_calcMode_attr)
    {
        m_calcMode_attr->toXmlAttr("calcMode", _outStream);
    }
    
    
    if (m_has_fullCalcOnLoad_attr)
    {
        _outStream << " " << "fullCalcOnLoad" << "=\"" << XSD::XMLBooleanStr(m_fullCalcOnLoad_attr) << "\"";
    }
    
    
    if (m_has_refMode_attr)
    {
        m_refMode_attr->toXmlAttr("refMode", _outStream);
    }
    
    
    if (m_has_iterate_attr)
    {
        _outStream << " " << "iterate" << "=\"" << XSD::XMLBooleanStr(m_iterate_attr) << "\"";
    }
    
    
    if (m_has_iterateCount_attr)
    {
        _outStream << " " << "iterateCount" << "=\"" << m_iterateCount_attr << "\"";
    }
    
    
    if (m_has_iterateDelta_attr)
    {
        _outStream << " " << "iterateDelta" << "=\"" << m_iterateDelta_attr << "\"";
    }
    
    
    if (m_has_fullPrecision_attr)
    {
        _outStream << " " << "fullPrecision" << "=\"" << XSD::XMLBooleanStr(m_fullPrecision_attr) << "\"";
    }
    
    
    if (m_has_calcCompleted_attr)
    {
        _outStream << " " << "calcCompleted" << "=\"" << XSD::XMLBooleanStr(m_calcCompleted_attr) << "\"";
    }
    
    
    if (m_has_calcOnSave_attr)
    {
        _outStream << " " << "calcOnSave" << "=\"" << XSD::XMLBooleanStr(m_calcOnSave_attr) << "\"";
    }
    
    
    if (m_has_concurrentCalc_attr)
    {
        _outStream << " " << "concurrentCalc" << "=\"" << XSD::XMLBooleanStr(m_concurrentCalc_attr) << "\"";
    }
    
    
    if (m_has_concurrentManualCount_attr)
    {
        _outStream << " " << "concurrentManualCount" << "=\"" << m_concurrentManualCount_attr << "\"";
    }
    
    
    if (m_has_forceFullCalc_attr)
    {
        _outStream << " " << "forceFullCalc" << "=\"" << XSD::XMLBooleanStr(m_forceFullCalc_attr) << "\"";
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_CalcPr& CT_CalcPr::default_instance()
    {    
    if (!CT_CalcPr::default_instance_)
    {
        CT_CalcPr::default_instance_ = new CT_CalcPr();
    }
    return *CT_CalcPr::default_instance_;
    }

    bool CT_CalcPr::has_calcId_attr() const
    {    
    return m_has_calcId_attr;
    }

    void CT_CalcPr::set_calcId_attr(const XSD::unsignedInt_& _calcId_attr)
    {    
    m_has_calcId_attr = true;
    m_calcId_attr = _calcId_attr;
    }

    const XSD::unsignedInt_& CT_CalcPr::get_calcId_attr() const
    {    
    return m_calcId_attr;
    }

    bool CT_CalcPr::has_calcMode_attr() const
    {    
    return m_has_calcMode_attr;
    }

    void CT_CalcPr::set_calcMode_attr(const ST_CalcMode& _calcMode_attr)
    {    
    m_has_calcMode_attr = true;
    m_calcMode_attr = new ST_CalcMode(_calcMode_attr);
    }

    const ST_CalcMode& CT_CalcPr::get_calcMode_attr() const
    {    
    if (m_calcMode_attr)
    {
        return *m_calcMode_attr;
    }
    return ST_CalcMode::default_instance();
    }

    bool CT_CalcPr::has_fullCalcOnLoad_attr() const
    {    
    return m_has_fullCalcOnLoad_attr;
    }

    void CT_CalcPr::set_fullCalcOnLoad_attr(const XSD::boolean_& _fullCalcOnLoad_attr)
    {    
    m_has_fullCalcOnLoad_attr = true;
    m_fullCalcOnLoad_attr = _fullCalcOnLoad_attr;
    }

    const XSD::boolean_& CT_CalcPr::get_fullCalcOnLoad_attr() const
    {    
    return m_fullCalcOnLoad_attr;
    }

    bool CT_CalcPr::has_refMode_attr() const
    {    
    return m_has_refMode_attr;
    }

    void CT_CalcPr::set_refMode_attr(const ST_RefMode& _refMode_attr)
    {    
    m_has_refMode_attr = true;
    m_refMode_attr = new ST_RefMode(_refMode_attr);
    }

    const ST_RefMode& CT_CalcPr::get_refMode_attr() const
    {    
    if (m_refMode_attr)
    {
        return *m_refMode_attr;
    }
    return ST_RefMode::default_instance();
    }

    bool CT_CalcPr::has_iterate_attr() const
    {    
    return m_has_iterate_attr;
    }

    void CT_CalcPr::set_iterate_attr(const XSD::boolean_& _iterate_attr)
    {    
    m_has_iterate_attr = true;
    m_iterate_attr = _iterate_attr;
    }

    const XSD::boolean_& CT_CalcPr::get_iterate_attr() const
    {    
    return m_iterate_attr;
    }

    bool CT_CalcPr::has_iterateCount_attr() const
    {    
    return m_has_iterateCount_attr;
    }

    void CT_CalcPr::set_iterateCount_attr(const XSD::unsignedInt_& _iterateCount_attr)
    {    
    m_has_iterateCount_attr = true;
    m_iterateCount_attr = _iterateCount_attr;
    }

    const XSD::unsignedInt_& CT_CalcPr::get_iterateCount_attr() const
    {    
    return m_iterateCount_attr;
    }

    bool CT_CalcPr::has_iterateDelta_attr() const
    {    
    return m_has_iterateDelta_attr;
    }

    void CT_CalcPr::set_iterateDelta_attr(const XSD::double_& _iterateDelta_attr)
    {    
    m_has_iterateDelta_attr = true;
    m_iterateDelta_attr = _iterateDelta_attr;
    }

    const XSD::double_& CT_CalcPr::get_iterateDelta_attr() const
    {    
    return m_iterateDelta_attr;
    }

    bool CT_CalcPr::has_fullPrecision_attr() const
    {    
    return m_has_fullPrecision_attr;
    }

    void CT_CalcPr::set_fullPrecision_attr(const XSD::boolean_& _fullPrecision_attr)
    {    
    m_has_fullPrecision_attr = true;
    m_fullPrecision_attr = _fullPrecision_attr;
    }

    const XSD::boolean_& CT_CalcPr::get_fullPrecision_attr() const
    {    
    return m_fullPrecision_attr;
    }

    bool CT_CalcPr::has_calcCompleted_attr() const
    {    
    return m_has_calcCompleted_attr;
    }

    void CT_CalcPr::set_calcCompleted_attr(const XSD::boolean_& _calcCompleted_attr)
    {    
    m_has_calcCompleted_attr = true;
    m_calcCompleted_attr = _calcCompleted_attr;
    }

    const XSD::boolean_& CT_CalcPr::get_calcCompleted_attr() const
    {    
    return m_calcCompleted_attr;
    }

    bool CT_CalcPr::has_calcOnSave_attr() const
    {    
    return m_has_calcOnSave_attr;
    }

    void CT_CalcPr::set_calcOnSave_attr(const XSD::boolean_& _calcOnSave_attr)
    {    
    m_has_calcOnSave_attr = true;
    m_calcOnSave_attr = _calcOnSave_attr;
    }

    const XSD::boolean_& CT_CalcPr::get_calcOnSave_attr() const
    {    
    return m_calcOnSave_attr;
    }

    bool CT_CalcPr::has_concurrentCalc_attr() const
    {    
    return m_has_concurrentCalc_attr;
    }

    void CT_CalcPr::set_concurrentCalc_attr(const XSD::boolean_& _concurrentCalc_attr)
    {    
    m_has_concurrentCalc_attr = true;
    m_concurrentCalc_attr = _concurrentCalc_attr;
    }

    const XSD::boolean_& CT_CalcPr::get_concurrentCalc_attr() const
    {    
    return m_concurrentCalc_attr;
    }

    bool CT_CalcPr::has_concurrentManualCount_attr() const
    {    
    return m_has_concurrentManualCount_attr;
    }

    void CT_CalcPr::set_concurrentManualCount_attr(const XSD::unsignedInt_& _concurrentManualCount_attr)
    {    
    m_has_concurrentManualCount_attr = true;
    m_concurrentManualCount_attr = _concurrentManualCount_attr;
    }

    const XSD::unsignedInt_& CT_CalcPr::get_concurrentManualCount_attr() const
    {    
    return m_concurrentManualCount_attr;
    }

    bool CT_CalcPr::has_forceFullCalc_attr() const
    {    
    return m_has_forceFullCalc_attr;
    }

    void CT_CalcPr::set_forceFullCalc_attr(const XSD::boolean_& _forceFullCalc_attr)
    {    
    m_has_forceFullCalc_attr = true;
    m_forceFullCalc_attr = _forceFullCalc_attr;
    }

    const XSD::boolean_& CT_CalcPr::get_forceFullCalc_attr() const
    {    
    return m_forceFullCalc_attr;
    }

CT_CalcPr* CT_CalcPr::default_instance_ = NULL;

    // CT_DefinedNames
    CT_DefinedNames::CT_DefinedNames()

    {
    }
    CT_DefinedNames::~CT_DefinedNames()
{
    clear();    }
    CT_DefinedName* CT_DefinedNames::add_definedName()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_DefinedName* pNewChild = pChildGroup->mutable_definedName();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_DefinedNames::clear()
    {    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_DefinedNames::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_definedName())
            {
                (*iter)->get_definedName().toXmlElem("main:definedName", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_DefinedNames& CT_DefinedNames::default_instance()
    {    
    if (!CT_DefinedNames::default_instance_)
    {
        CT_DefinedNames::default_instance_ = new CT_DefinedNames();
    }
    return *CT_DefinedNames::default_instance_;
    }


    // CT_DefinedNames::ChildGroup_1
    CT_DefinedNames::ChildGroup_1::ChildGroup_1()
    :m_has_definedName(false),
    m_definedName(NULL)
    {
    }
    bool CT_DefinedNames::ChildGroup_1::has_definedName() const
    {    
    return m_has_definedName;
    }

    CT_DefinedName* CT_DefinedNames::ChildGroup_1::mutable_definedName()
    {    
    
    m_has_definedName = true;
    if (!m_definedName)
    {
        m_definedName = new CT_DefinedName();
    }
    return m_definedName;
    }

    const CT_DefinedName& CT_DefinedNames::ChildGroup_1::get_definedName() const
    {    
    if (m_definedName)
    {
        return *m_definedName;
    }
    return CT_DefinedName::default_instance();
    }

CT_DefinedNames* CT_DefinedNames::default_instance_ = NULL;

    // CT_DefinedName
    CT_DefinedName::CT_DefinedName()
    :m_has_name_attr(false),
    m_name_attr(NULL),
    m_has_comment_attr(false),
    m_comment_attr(NULL),
    m_has_customMenu_attr(false),
    m_customMenu_attr(NULL),
    m_has_description_attr(false),
    m_description_attr(NULL),
    m_has_help_attr(false),
    m_help_attr(NULL),
    m_has_statusBar_attr(false),
    m_statusBar_attr(NULL),
    m_has_localSheetId_attr(false),
    m_localSheetId_attr(0),
    m_has_hidden_attr(false),
    m_hidden_attr(false),
    m_has_function_attr(false),
    m_function_attr(false),
    m_has_vbProcedure_attr(false),
    m_vbProcedure_attr(false),
    m_has_xlm_attr(false),
    m_xlm_attr(false),
    m_has_functionGroupId_attr(false),
    m_functionGroupId_attr(0),
    m_has_shortcutKey_attr(false),
    m_shortcutKey_attr(NULL),
    m_has_publishToServer_attr(false),
    m_publishToServer_attr(false),
    m_has_workbookParameter_attr(false),
    m_workbookParameter_attr(false)
    {
    }
    CT_DefinedName::~CT_DefinedName()
{
    clear();    }
    void CT_DefinedName::clear()
    {    
    m_has_name_attr = false;
    
    if (m_name_attr)
    {
        delete m_name_attr;
        m_name_attr = NULL;
    }
    
    
    m_has_comment_attr = false;
    
    if (m_comment_attr)
    {
        delete m_comment_attr;
        m_comment_attr = NULL;
    }
    
    
    m_has_customMenu_attr = false;
    
    if (m_customMenu_attr)
    {
        delete m_customMenu_attr;
        m_customMenu_attr = NULL;
    }
    
    
    m_has_description_attr = false;
    
    if (m_description_attr)
    {
        delete m_description_attr;
        m_description_attr = NULL;
    }
    
    
    m_has_help_attr = false;
    
    if (m_help_attr)
    {
        delete m_help_attr;
        m_help_attr = NULL;
    }
    
    
    m_has_statusBar_attr = false;
    
    if (m_statusBar_attr)
    {
        delete m_statusBar_attr;
        m_statusBar_attr = NULL;
    }
    
    
    m_has_localSheetId_attr = false;
    m_localSheetId_attr = 0;
    
    m_has_hidden_attr = false;
    m_hidden_attr = false;
    
    m_has_function_attr = false;
    m_function_attr = false;
    
    m_has_vbProcedure_attr = false;
    m_vbProcedure_attr = false;
    
    m_has_xlm_attr = false;
    m_xlm_attr = false;
    
    m_has_functionGroupId_attr = false;
    m_functionGroupId_attr = 0;
    
    m_has_shortcutKey_attr = false;
    
    if (m_shortcutKey_attr)
    {
        delete m_shortcutKey_attr;
        m_shortcutKey_attr = NULL;
    }
    
    
    m_has_publishToServer_attr = false;
    m_publishToServer_attr = false;
    
    m_has_workbookParameter_attr = false;
    m_workbookParameter_attr = false;
    }

    void CT_DefinedName::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_name_attr)
    {
        m_name_attr->toXmlAttr("name", _outStream);
    }
    
    
    if (m_has_comment_attr)
    {
        m_comment_attr->toXmlAttr("comment", _outStream);
    }
    
    
    if (m_has_customMenu_attr)
    {
        m_customMenu_attr->toXmlAttr("customMenu", _outStream);
    }
    
    
    if (m_has_description_attr)
    {
        m_description_attr->toXmlAttr("description", _outStream);
    }
    
    
    if (m_has_help_attr)
    {
        m_help_attr->toXmlAttr("help", _outStream);
    }
    
    
    if (m_has_statusBar_attr)
    {
        m_statusBar_attr->toXmlAttr("statusBar", _outStream);
    }
    
    
    if (m_has_localSheetId_attr)
    {
        _outStream << " " << "localSheetId" << "=\"" << m_localSheetId_attr << "\"";
    }
    
    
    if (m_has_hidden_attr)
    {
        _outStream << " " << "hidden" << "=\"" << XSD::XMLBooleanStr(m_hidden_attr) << "\"";
    }
    
    
    if (m_has_function_attr)
    {
        _outStream << " " << "function" << "=\"" << XSD::XMLBooleanStr(m_function_attr) << "\"";
    }
    
    
    if (m_has_vbProcedure_attr)
    {
        _outStream << " " << "vbProcedure" << "=\"" << XSD::XMLBooleanStr(m_vbProcedure_attr) << "\"";
    }
    
    
    if (m_has_xlm_attr)
    {
        _outStream << " " << "xlm" << "=\"" << XSD::XMLBooleanStr(m_xlm_attr) << "\"";
    }
    
    
    if (m_has_functionGroupId_attr)
    {
        _outStream << " " << "functionGroupId" << "=\"" << m_functionGroupId_attr << "\"";
    }
    
    
    if (m_has_shortcutKey_attr)
    {
        m_shortcutKey_attr->toXmlAttr("shortcutKey", _outStream);
    }
    
    
    if (m_has_publishToServer_attr)
    {
        _outStream << " " << "publishToServer" << "=\"" << XSD::XMLBooleanStr(m_publishToServer_attr) << "\"";
    }
    
    
    if (m_has_workbookParameter_attr)
    {
        _outStream << " " << "workbookParameter" << "=\"" << XSD::XMLBooleanStr(m_workbookParameter_attr) << "\"";
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_DefinedName& CT_DefinedName::default_instance()
    {    
    if (!CT_DefinedName::default_instance_)
    {
        CT_DefinedName::default_instance_ = new CT_DefinedName();
    }
    return *CT_DefinedName::default_instance_;
    }

    bool CT_DefinedName::has_name_attr() const
    {    
    return m_has_name_attr;
    }

    void CT_DefinedName::set_name_attr(const ns_s::ST_Xstring& _name_attr)
    {    
    m_has_name_attr = true;
    m_name_attr = new ns_s::ST_Xstring(_name_attr);
    }

    const ns_s::ST_Xstring& CT_DefinedName::get_name_attr() const
    {    
    if (m_name_attr)
    {
        return *m_name_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_DefinedName::has_comment_attr() const
    {    
    return m_has_comment_attr;
    }

    void CT_DefinedName::set_comment_attr(const ns_s::ST_Xstring& _comment_attr)
    {    
    m_has_comment_attr = true;
    m_comment_attr = new ns_s::ST_Xstring(_comment_attr);
    }

    const ns_s::ST_Xstring& CT_DefinedName::get_comment_attr() const
    {    
    if (m_comment_attr)
    {
        return *m_comment_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_DefinedName::has_customMenu_attr() const
    {    
    return m_has_customMenu_attr;
    }

    void CT_DefinedName::set_customMenu_attr(const ns_s::ST_Xstring& _customMenu_attr)
    {    
    m_has_customMenu_attr = true;
    m_customMenu_attr = new ns_s::ST_Xstring(_customMenu_attr);
    }

    const ns_s::ST_Xstring& CT_DefinedName::get_customMenu_attr() const
    {    
    if (m_customMenu_attr)
    {
        return *m_customMenu_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_DefinedName::has_description_attr() const
    {    
    return m_has_description_attr;
    }

    void CT_DefinedName::set_description_attr(const ns_s::ST_Xstring& _description_attr)
    {    
    m_has_description_attr = true;
    m_description_attr = new ns_s::ST_Xstring(_description_attr);
    }

    const ns_s::ST_Xstring& CT_DefinedName::get_description_attr() const
    {    
    if (m_description_attr)
    {
        return *m_description_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_DefinedName::has_help_attr() const
    {    
    return m_has_help_attr;
    }

    void CT_DefinedName::set_help_attr(const ns_s::ST_Xstring& _help_attr)
    {    
    m_has_help_attr = true;
    m_help_attr = new ns_s::ST_Xstring(_help_attr);
    }

    const ns_s::ST_Xstring& CT_DefinedName::get_help_attr() const
    {    
    if (m_help_attr)
    {
        return *m_help_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_DefinedName::has_statusBar_attr() const
    {    
    return m_has_statusBar_attr;
    }

    void CT_DefinedName::set_statusBar_attr(const ns_s::ST_Xstring& _statusBar_attr)
    {    
    m_has_statusBar_attr = true;
    m_statusBar_attr = new ns_s::ST_Xstring(_statusBar_attr);
    }

    const ns_s::ST_Xstring& CT_DefinedName::get_statusBar_attr() const
    {    
    if (m_statusBar_attr)
    {
        return *m_statusBar_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_DefinedName::has_localSheetId_attr() const
    {    
    return m_has_localSheetId_attr;
    }

    void CT_DefinedName::set_localSheetId_attr(const XSD::unsignedInt_& _localSheetId_attr)
    {    
    m_has_localSheetId_attr = true;
    m_localSheetId_attr = _localSheetId_attr;
    }

    const XSD::unsignedInt_& CT_DefinedName::get_localSheetId_attr() const
    {    
    return m_localSheetId_attr;
    }

    bool CT_DefinedName::has_hidden_attr() const
    {    
    return m_has_hidden_attr;
    }

    void CT_DefinedName::set_hidden_attr(const XSD::boolean_& _hidden_attr)
    {    
    m_has_hidden_attr = true;
    m_hidden_attr = _hidden_attr;
    }

    const XSD::boolean_& CT_DefinedName::get_hidden_attr() const
    {    
    return m_hidden_attr;
    }

    bool CT_DefinedName::has_function_attr() const
    {    
    return m_has_function_attr;
    }

    void CT_DefinedName::set_function_attr(const XSD::boolean_& _function_attr)
    {    
    m_has_function_attr = true;
    m_function_attr = _function_attr;
    }

    const XSD::boolean_& CT_DefinedName::get_function_attr() const
    {    
    return m_function_attr;
    }

    bool CT_DefinedName::has_vbProcedure_attr() const
    {    
    return m_has_vbProcedure_attr;
    }

    void CT_DefinedName::set_vbProcedure_attr(const XSD::boolean_& _vbProcedure_attr)
    {    
    m_has_vbProcedure_attr = true;
    m_vbProcedure_attr = _vbProcedure_attr;
    }

    const XSD::boolean_& CT_DefinedName::get_vbProcedure_attr() const
    {    
    return m_vbProcedure_attr;
    }

    bool CT_DefinedName::has_xlm_attr() const
    {    
    return m_has_xlm_attr;
    }

    void CT_DefinedName::set_xlm_attr(const XSD::boolean_& _xlm_attr)
    {    
    m_has_xlm_attr = true;
    m_xlm_attr = _xlm_attr;
    }

    const XSD::boolean_& CT_DefinedName::get_xlm_attr() const
    {    
    return m_xlm_attr;
    }

    bool CT_DefinedName::has_functionGroupId_attr() const
    {    
    return m_has_functionGroupId_attr;
    }

    void CT_DefinedName::set_functionGroupId_attr(const XSD::unsignedInt_& _functionGroupId_attr)
    {    
    m_has_functionGroupId_attr = true;
    m_functionGroupId_attr = _functionGroupId_attr;
    }

    const XSD::unsignedInt_& CT_DefinedName::get_functionGroupId_attr() const
    {    
    return m_functionGroupId_attr;
    }

    bool CT_DefinedName::has_shortcutKey_attr() const
    {    
    return m_has_shortcutKey_attr;
    }

    void CT_DefinedName::set_shortcutKey_attr(const ns_s::ST_Xstring& _shortcutKey_attr)
    {    
    m_has_shortcutKey_attr = true;
    m_shortcutKey_attr = new ns_s::ST_Xstring(_shortcutKey_attr);
    }

    const ns_s::ST_Xstring& CT_DefinedName::get_shortcutKey_attr() const
    {    
    if (m_shortcutKey_attr)
    {
        return *m_shortcutKey_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_DefinedName::has_publishToServer_attr() const
    {    
    return m_has_publishToServer_attr;
    }

    void CT_DefinedName::set_publishToServer_attr(const XSD::boolean_& _publishToServer_attr)
    {    
    m_has_publishToServer_attr = true;
    m_publishToServer_attr = _publishToServer_attr;
    }

    const XSD::boolean_& CT_DefinedName::get_publishToServer_attr() const
    {    
    return m_publishToServer_attr;
    }

    bool CT_DefinedName::has_workbookParameter_attr() const
    {    
    return m_has_workbookParameter_attr;
    }

    void CT_DefinedName::set_workbookParameter_attr(const XSD::boolean_& _workbookParameter_attr)
    {    
    m_has_workbookParameter_attr = true;
    m_workbookParameter_attr = _workbookParameter_attr;
    }

    const XSD::boolean_& CT_DefinedName::get_workbookParameter_attr() const
    {    
    return m_workbookParameter_attr;
    }

CT_DefinedName* CT_DefinedName::default_instance_ = NULL;

    // CT_ExternalReferences
    CT_ExternalReferences::CT_ExternalReferences()

    {
    }
    CT_ExternalReferences::~CT_ExternalReferences()
{
    clear();    }
    CT_ExternalReference* CT_ExternalReferences::add_externalReference()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_ExternalReference* pNewChild = pChildGroup->mutable_externalReference();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_ExternalReferences::clear()
    {    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_ExternalReferences::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_externalReference())
            {
                (*iter)->get_externalReference().toXmlElem("main:externalReference", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_ExternalReferences& CT_ExternalReferences::default_instance()
    {    
    if (!CT_ExternalReferences::default_instance_)
    {
        CT_ExternalReferences::default_instance_ = new CT_ExternalReferences();
    }
    return *CT_ExternalReferences::default_instance_;
    }


    // CT_ExternalReferences::ChildGroup_1
    CT_ExternalReferences::ChildGroup_1::ChildGroup_1()
    :m_has_externalReference(false),
    m_externalReference(NULL)
    {
    }
    bool CT_ExternalReferences::ChildGroup_1::has_externalReference() const
    {    
    return m_has_externalReference;
    }

    CT_ExternalReference* CT_ExternalReferences::ChildGroup_1::mutable_externalReference()
    {    
    
    m_has_externalReference = true;
    if (!m_externalReference)
    {
        m_externalReference = new CT_ExternalReference();
    }
    return m_externalReference;
    }

    const CT_ExternalReference& CT_ExternalReferences::ChildGroup_1::get_externalReference() const
    {    
    if (m_externalReference)
    {
        return *m_externalReference;
    }
    return CT_ExternalReference::default_instance();
    }

CT_ExternalReferences* CT_ExternalReferences::default_instance_ = NULL;

    // CT_ExternalReference
    CT_ExternalReference::CT_ExternalReference()
    :m_has_r_id_attr(false),
    m_r_id_attr(NULL)
    {
    }
    CT_ExternalReference::~CT_ExternalReference()
{
    clear();    }
    void CT_ExternalReference::clear()
    {    
    m_has_r_id_attr = false;
    
    if (m_r_id_attr)
    {
        delete m_r_id_attr;
        m_r_id_attr = NULL;
    }
    
    }

    void CT_ExternalReference::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_r_id_attr)
    {
        m_r_id_attr->toXmlAttr("r:id", _outStream);
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_ExternalReference& CT_ExternalReference::default_instance()
    {    
    if (!CT_ExternalReference::default_instance_)
    {
        CT_ExternalReference::default_instance_ = new CT_ExternalReference();
    }
    return *CT_ExternalReference::default_instance_;
    }

    bool CT_ExternalReference::has_r_id_attr() const
    {    
    return m_has_r_id_attr;
    }

    void CT_ExternalReference::set_r_id_attr(const ns_r::ST_RelationshipId& _r_id_attr)
    {    
    m_has_r_id_attr = true;
    m_r_id_attr = new ns_r::ST_RelationshipId(_r_id_attr);
    }

    const ns_r::ST_RelationshipId& CT_ExternalReference::get_r_id_attr() const
    {    
    if (m_r_id_attr)
    {
        return *m_r_id_attr;
    }
    return ns_r::ST_RelationshipId::default_instance();
    }

CT_ExternalReference* CT_ExternalReference::default_instance_ = NULL;

    // CT_SheetBackgroundPicture
    CT_SheetBackgroundPicture::CT_SheetBackgroundPicture()
    :m_has_r_id_attr(false),
    m_r_id_attr(NULL)
    {
    }
    CT_SheetBackgroundPicture::~CT_SheetBackgroundPicture()
{
    clear();    }
    void CT_SheetBackgroundPicture::clear()
    {    
    m_has_r_id_attr = false;
    
    if (m_r_id_attr)
    {
        delete m_r_id_attr;
        m_r_id_attr = NULL;
    }
    
    }

    void CT_SheetBackgroundPicture::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_r_id_attr)
    {
        m_r_id_attr->toXmlAttr("r:id", _outStream);
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_SheetBackgroundPicture& CT_SheetBackgroundPicture::default_instance()
    {    
    if (!CT_SheetBackgroundPicture::default_instance_)
    {
        CT_SheetBackgroundPicture::default_instance_ = new CT_SheetBackgroundPicture();
    }
    return *CT_SheetBackgroundPicture::default_instance_;
    }

    bool CT_SheetBackgroundPicture::has_r_id_attr() const
    {    
    return m_has_r_id_attr;
    }

    void CT_SheetBackgroundPicture::set_r_id_attr(const ns_r::ST_RelationshipId& _r_id_attr)
    {    
    m_has_r_id_attr = true;
    m_r_id_attr = new ns_r::ST_RelationshipId(_r_id_attr);
    }

    const ns_r::ST_RelationshipId& CT_SheetBackgroundPicture::get_r_id_attr() const
    {    
    if (m_r_id_attr)
    {
        return *m_r_id_attr;
    }
    return ns_r::ST_RelationshipId::default_instance();
    }

CT_SheetBackgroundPicture* CT_SheetBackgroundPicture::default_instance_ = NULL;

    // CT_PivotCaches
    CT_PivotCaches::CT_PivotCaches()

    {
    }
    CT_PivotCaches::~CT_PivotCaches()
{
    clear();    }
    CT_PivotCache* CT_PivotCaches::add_pivotCache()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_PivotCache* pNewChild = pChildGroup->mutable_pivotCache();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_PivotCaches::clear()
    {    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_PivotCaches::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_pivotCache())
            {
                (*iter)->get_pivotCache().toXmlElem("main:pivotCache", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_PivotCaches& CT_PivotCaches::default_instance()
    {    
    if (!CT_PivotCaches::default_instance_)
    {
        CT_PivotCaches::default_instance_ = new CT_PivotCaches();
    }
    return *CT_PivotCaches::default_instance_;
    }


    // CT_PivotCaches::ChildGroup_1
    CT_PivotCaches::ChildGroup_1::ChildGroup_1()
    :m_has_pivotCache(false),
    m_pivotCache(NULL)
    {
    }
    bool CT_PivotCaches::ChildGroup_1::has_pivotCache() const
    {    
    return m_has_pivotCache;
    }

    CT_PivotCache* CT_PivotCaches::ChildGroup_1::mutable_pivotCache()
    {    
    
    m_has_pivotCache = true;
    if (!m_pivotCache)
    {
        m_pivotCache = new CT_PivotCache();
    }
    return m_pivotCache;
    }

    const CT_PivotCache& CT_PivotCaches::ChildGroup_1::get_pivotCache() const
    {    
    if (m_pivotCache)
    {
        return *m_pivotCache;
    }
    return CT_PivotCache::default_instance();
    }

CT_PivotCaches* CT_PivotCaches::default_instance_ = NULL;

    // CT_PivotCache
    CT_PivotCache::CT_PivotCache()
    :m_has_cacheId_attr(false),
    m_cacheId_attr(0),
    m_has_r_id_attr(false),
    m_r_id_attr(NULL)
    {
    }
    CT_PivotCache::~CT_PivotCache()
{
    clear();    }
    void CT_PivotCache::clear()
    {    
    m_has_cacheId_attr = false;
    m_cacheId_attr = 0;
    
    m_has_r_id_attr = false;
    
    if (m_r_id_attr)
    {
        delete m_r_id_attr;
        m_r_id_attr = NULL;
    }
    
    }

    void CT_PivotCache::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_cacheId_attr)
    {
        _outStream << " " << "cacheId" << "=\"" << m_cacheId_attr << "\"";
    }
    
    
    if (m_has_r_id_attr)
    {
        m_r_id_attr->toXmlAttr("r:id", _outStream);
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_PivotCache& CT_PivotCache::default_instance()
    {    
    if (!CT_PivotCache::default_instance_)
    {
        CT_PivotCache::default_instance_ = new CT_PivotCache();
    }
    return *CT_PivotCache::default_instance_;
    }

    bool CT_PivotCache::has_cacheId_attr() const
    {    
    return m_has_cacheId_attr;
    }

    void CT_PivotCache::set_cacheId_attr(const XSD::unsignedInt_& _cacheId_attr)
    {    
    m_has_cacheId_attr = true;
    m_cacheId_attr = _cacheId_attr;
    }

    const XSD::unsignedInt_& CT_PivotCache::get_cacheId_attr() const
    {    
    return m_cacheId_attr;
    }

    bool CT_PivotCache::has_r_id_attr() const
    {    
    return m_has_r_id_attr;
    }

    void CT_PivotCache::set_r_id_attr(const ns_r::ST_RelationshipId& _r_id_attr)
    {    
    m_has_r_id_attr = true;
    m_r_id_attr = new ns_r::ST_RelationshipId(_r_id_attr);
    }

    const ns_r::ST_RelationshipId& CT_PivotCache::get_r_id_attr() const
    {    
    if (m_r_id_attr)
    {
        return *m_r_id_attr;
    }
    return ns_r::ST_RelationshipId::default_instance();
    }

CT_PivotCache* CT_PivotCache::default_instance_ = NULL;

    // CT_FileSharing
    CT_FileSharing::CT_FileSharing()
    :m_has_readOnlyRecommended_attr(false),
    m_readOnlyRecommended_attr(false),
    m_has_userName_attr(false),
    m_userName_attr(NULL),
    m_has_reservationPassword_attr(false),
    m_reservationPassword_attr(NULL),
    m_has_algorithmName_attr(false),
    m_algorithmName_attr(NULL),
    m_has_hashValue_attr(false),
    m_hashValue_attr(""),
    m_has_saltValue_attr(false),
    m_saltValue_attr(""),
    m_has_spinCount_attr(false),
    m_spinCount_attr(0)
    {
    }
    CT_FileSharing::~CT_FileSharing()
{
    clear();    }
    void CT_FileSharing::clear()
    {    
    m_has_readOnlyRecommended_attr = false;
    m_readOnlyRecommended_attr = false;
    
    m_has_userName_attr = false;
    
    if (m_userName_attr)
    {
        delete m_userName_attr;
        m_userName_attr = NULL;
    }
    
    
    m_has_reservationPassword_attr = false;
    
    if (m_reservationPassword_attr)
    {
        delete m_reservationPassword_attr;
        m_reservationPassword_attr = NULL;
    }
    
    
    m_has_algorithmName_attr = false;
    
    if (m_algorithmName_attr)
    {
        delete m_algorithmName_attr;
        m_algorithmName_attr = NULL;
    }
    
    
    m_has_hashValue_attr = false;
    m_hashValue_attr.clear();
    
    m_has_saltValue_attr = false;
    m_saltValue_attr.clear();
    
    m_has_spinCount_attr = false;
    m_spinCount_attr = 0;
    }

    void CT_FileSharing::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_readOnlyRecommended_attr)
    {
        _outStream << " " << "readOnlyRecommended" << "=\"" << XSD::XMLBooleanStr(m_readOnlyRecommended_attr) << "\"";
    }
    
    
    if (m_has_userName_attr)
    {
        m_userName_attr->toXmlAttr("userName", _outStream);
    }
    
    
    if (m_has_reservationPassword_attr)
    {
        m_reservationPassword_attr->toXmlAttr("reservationPassword", _outStream);
    }
    
    
    if (m_has_algorithmName_attr)
    {
        m_algorithmName_attr->toXmlAttr("algorithmName", _outStream);
    }
    
    
    if (m_has_hashValue_attr)
    {
        _outStream << " " << "hashValue" << "=\"" << m_hashValue_attr << "\"";
    }
    
    
    if (m_has_saltValue_attr)
    {
        _outStream << " " << "saltValue" << "=\"" << m_saltValue_attr << "\"";
    }
    
    
    if (m_has_spinCount_attr)
    {
        _outStream << " " << "spinCount" << "=\"" << m_spinCount_attr << "\"";
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_FileSharing& CT_FileSharing::default_instance()
    {    
    if (!CT_FileSharing::default_instance_)
    {
        CT_FileSharing::default_instance_ = new CT_FileSharing();
    }
    return *CT_FileSharing::default_instance_;
    }

    bool CT_FileSharing::has_readOnlyRecommended_attr() const
    {    
    return m_has_readOnlyRecommended_attr;
    }

    void CT_FileSharing::set_readOnlyRecommended_attr(const XSD::boolean_& _readOnlyRecommended_attr)
    {    
    m_has_readOnlyRecommended_attr = true;
    m_readOnlyRecommended_attr = _readOnlyRecommended_attr;
    }

    const XSD::boolean_& CT_FileSharing::get_readOnlyRecommended_attr() const
    {    
    return m_readOnlyRecommended_attr;
    }

    bool CT_FileSharing::has_userName_attr() const
    {    
    return m_has_userName_attr;
    }

    void CT_FileSharing::set_userName_attr(const ns_s::ST_Xstring& _userName_attr)
    {    
    m_has_userName_attr = true;
    m_userName_attr = new ns_s::ST_Xstring(_userName_attr);
    }

    const ns_s::ST_Xstring& CT_FileSharing::get_userName_attr() const
    {    
    if (m_userName_attr)
    {
        return *m_userName_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_FileSharing::has_reservationPassword_attr() const
    {    
    return m_has_reservationPassword_attr;
    }

    void CT_FileSharing::set_reservationPassword_attr(const ST_UnsignedShortHex& _reservationPassword_attr)
    {    
    m_has_reservationPassword_attr = true;
    m_reservationPassword_attr = new ST_UnsignedShortHex(_reservationPassword_attr);
    }

    const ST_UnsignedShortHex& CT_FileSharing::get_reservationPassword_attr() const
    {    
    if (m_reservationPassword_attr)
    {
        return *m_reservationPassword_attr;
    }
    return ST_UnsignedShortHex::default_instance();
    }

    bool CT_FileSharing::has_algorithmName_attr() const
    {    
    return m_has_algorithmName_attr;
    }

    void CT_FileSharing::set_algorithmName_attr(const ns_s::ST_Xstring& _algorithmName_attr)
    {    
    m_has_algorithmName_attr = true;
    m_algorithmName_attr = new ns_s::ST_Xstring(_algorithmName_attr);
    }

    const ns_s::ST_Xstring& CT_FileSharing::get_algorithmName_attr() const
    {    
    if (m_algorithmName_attr)
    {
        return *m_algorithmName_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_FileSharing::has_hashValue_attr() const
    {    
    return m_has_hashValue_attr;
    }

    void CT_FileSharing::set_hashValue_attr(const XSD::base64Binary_& _hashValue_attr)
    {    
    m_has_hashValue_attr = true;
    m_hashValue_attr = _hashValue_attr;
    }

    const XSD::base64Binary_& CT_FileSharing::get_hashValue_attr() const
    {    
    return m_hashValue_attr;
    }

    bool CT_FileSharing::has_saltValue_attr() const
    {    
    return m_has_saltValue_attr;
    }

    void CT_FileSharing::set_saltValue_attr(const XSD::base64Binary_& _saltValue_attr)
    {    
    m_has_saltValue_attr = true;
    m_saltValue_attr = _saltValue_attr;
    }

    const XSD::base64Binary_& CT_FileSharing::get_saltValue_attr() const
    {    
    return m_saltValue_attr;
    }

    bool CT_FileSharing::has_spinCount_attr() const
    {    
    return m_has_spinCount_attr;
    }

    void CT_FileSharing::set_spinCount_attr(const XSD::unsignedInt_& _spinCount_attr)
    {    
    m_has_spinCount_attr = true;
    m_spinCount_attr = _spinCount_attr;
    }

    const XSD::unsignedInt_& CT_FileSharing::get_spinCount_attr() const
    {    
    return m_spinCount_attr;
    }

CT_FileSharing* CT_FileSharing::default_instance_ = NULL;

    // CT_OleSize
    CT_OleSize::CT_OleSize()
    :m_has_ref_attr(false),
    m_ref_attr(NULL)
    {
    }
    CT_OleSize::~CT_OleSize()
{
    clear();    }
    void CT_OleSize::clear()
    {    
    m_has_ref_attr = false;
    
    if (m_ref_attr)
    {
        delete m_ref_attr;
        m_ref_attr = NULL;
    }
    
    }

    void CT_OleSize::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_ref_attr)
    {
        m_ref_attr->toXmlAttr("ref", _outStream);
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_OleSize& CT_OleSize::default_instance()
    {    
    if (!CT_OleSize::default_instance_)
    {
        CT_OleSize::default_instance_ = new CT_OleSize();
    }
    return *CT_OleSize::default_instance_;
    }

    bool CT_OleSize::has_ref_attr() const
    {    
    return m_has_ref_attr;
    }

    void CT_OleSize::set_ref_attr(const ST_Ref& _ref_attr)
    {    
    m_has_ref_attr = true;
    m_ref_attr = new ST_Ref(_ref_attr);
    }

    const ST_Ref& CT_OleSize::get_ref_attr() const
    {    
    if (m_ref_attr)
    {
        return *m_ref_attr;
    }
    return ST_Ref::default_instance();
    }

CT_OleSize* CT_OleSize::default_instance_ = NULL;

    // CT_WorkbookProtection
    CT_WorkbookProtection::CT_WorkbookProtection()
    :m_has_workbookPassword_attr(false),
    m_workbookPassword_attr(NULL),
    m_has_workbookPasswordCharacterSet_attr(false),
    m_workbookPasswordCharacterSet_attr(""),
    m_has_revisionsPassword_attr(false),
    m_revisionsPassword_attr(NULL),
    m_has_revisionsPasswordCharacterSet_attr(false),
    m_revisionsPasswordCharacterSet_attr(""),
    m_has_lockStructure_attr(false),
    m_lockStructure_attr(false),
    m_has_lockWindows_attr(false),
    m_lockWindows_attr(false),
    m_has_lockRevision_attr(false),
    m_lockRevision_attr(false),
    m_has_revisionsAlgorithmName_attr(false),
    m_revisionsAlgorithmName_attr(NULL),
    m_has_revisionsHashValue_attr(false),
    m_revisionsHashValue_attr(""),
    m_has_revisionsSaltValue_attr(false),
    m_revisionsSaltValue_attr(""),
    m_has_revisionsSpinCount_attr(false),
    m_revisionsSpinCount_attr(0),
    m_has_workbookAlgorithmName_attr(false),
    m_workbookAlgorithmName_attr(NULL),
    m_has_workbookHashValue_attr(false),
    m_workbookHashValue_attr(""),
    m_has_workbookSaltValue_attr(false),
    m_workbookSaltValue_attr(""),
    m_has_workbookSpinCount_attr(false),
    m_workbookSpinCount_attr(0)
    {
    }
    CT_WorkbookProtection::~CT_WorkbookProtection()
{
    clear();    }
    void CT_WorkbookProtection::clear()
    {    
    m_has_workbookPassword_attr = false;
    
    if (m_workbookPassword_attr)
    {
        delete m_workbookPassword_attr;
        m_workbookPassword_attr = NULL;
    }
    
    
    m_has_workbookPasswordCharacterSet_attr = false;
    m_workbookPasswordCharacterSet_attr.clear();
    
    m_has_revisionsPassword_attr = false;
    
    if (m_revisionsPassword_attr)
    {
        delete m_revisionsPassword_attr;
        m_revisionsPassword_attr = NULL;
    }
    
    
    m_has_revisionsPasswordCharacterSet_attr = false;
    m_revisionsPasswordCharacterSet_attr.clear();
    
    m_has_lockStructure_attr = false;
    m_lockStructure_attr = false;
    
    m_has_lockWindows_attr = false;
    m_lockWindows_attr = false;
    
    m_has_lockRevision_attr = false;
    m_lockRevision_attr = false;
    
    m_has_revisionsAlgorithmName_attr = false;
    
    if (m_revisionsAlgorithmName_attr)
    {
        delete m_revisionsAlgorithmName_attr;
        m_revisionsAlgorithmName_attr = NULL;
    }
    
    
    m_has_revisionsHashValue_attr = false;
    m_revisionsHashValue_attr.clear();
    
    m_has_revisionsSaltValue_attr = false;
    m_revisionsSaltValue_attr.clear();
    
    m_has_revisionsSpinCount_attr = false;
    m_revisionsSpinCount_attr = 0;
    
    m_has_workbookAlgorithmName_attr = false;
    
    if (m_workbookAlgorithmName_attr)
    {
        delete m_workbookAlgorithmName_attr;
        m_workbookAlgorithmName_attr = NULL;
    }
    
    
    m_has_workbookHashValue_attr = false;
    m_workbookHashValue_attr.clear();
    
    m_has_workbookSaltValue_attr = false;
    m_workbookSaltValue_attr.clear();
    
    m_has_workbookSpinCount_attr = false;
    m_workbookSpinCount_attr = 0;
    }

    void CT_WorkbookProtection::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_workbookPassword_attr)
    {
        m_workbookPassword_attr->toXmlAttr("workbookPassword", _outStream);
    }
    
    
    if (m_has_workbookPasswordCharacterSet_attr)
    {
        _outStream << " " << "workbookPasswordCharacterSet" << "=\"" << m_workbookPasswordCharacterSet_attr << "\"";
    }
    
    
    if (m_has_revisionsPassword_attr)
    {
        m_revisionsPassword_attr->toXmlAttr("revisionsPassword", _outStream);
    }
    
    
    if (m_has_revisionsPasswordCharacterSet_attr)
    {
        _outStream << " " << "revisionsPasswordCharacterSet" << "=\"" << m_revisionsPasswordCharacterSet_attr << "\"";
    }
    
    
    if (m_has_lockStructure_attr)
    {
        _outStream << " " << "lockStructure" << "=\"" << XSD::XMLBooleanStr(m_lockStructure_attr) << "\"";
    }
    
    
    if (m_has_lockWindows_attr)
    {
        _outStream << " " << "lockWindows" << "=\"" << XSD::XMLBooleanStr(m_lockWindows_attr) << "\"";
    }
    
    
    if (m_has_lockRevision_attr)
    {
        _outStream << " " << "lockRevision" << "=\"" << XSD::XMLBooleanStr(m_lockRevision_attr) << "\"";
    }
    
    
    if (m_has_revisionsAlgorithmName_attr)
    {
        m_revisionsAlgorithmName_attr->toXmlAttr("revisionsAlgorithmName", _outStream);
    }
    
    
    if (m_has_revisionsHashValue_attr)
    {
        _outStream << " " << "revisionsHashValue" << "=\"" << m_revisionsHashValue_attr << "\"";
    }
    
    
    if (m_has_revisionsSaltValue_attr)
    {
        _outStream << " " << "revisionsSaltValue" << "=\"" << m_revisionsSaltValue_attr << "\"";
    }
    
    
    if (m_has_revisionsSpinCount_attr)
    {
        _outStream << " " << "revisionsSpinCount" << "=\"" << m_revisionsSpinCount_attr << "\"";
    }
    
    
    if (m_has_workbookAlgorithmName_attr)
    {
        m_workbookAlgorithmName_attr->toXmlAttr("workbookAlgorithmName", _outStream);
    }
    
    
    if (m_has_workbookHashValue_attr)
    {
        _outStream << " " << "workbookHashValue" << "=\"" << m_workbookHashValue_attr << "\"";
    }
    
    
    if (m_has_workbookSaltValue_attr)
    {
        _outStream << " " << "workbookSaltValue" << "=\"" << m_workbookSaltValue_attr << "\"";
    }
    
    
    if (m_has_workbookSpinCount_attr)
    {
        _outStream << " " << "workbookSpinCount" << "=\"" << m_workbookSpinCount_attr << "\"";
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_WorkbookProtection& CT_WorkbookProtection::default_instance()
    {    
    if (!CT_WorkbookProtection::default_instance_)
    {
        CT_WorkbookProtection::default_instance_ = new CT_WorkbookProtection();
    }
    return *CT_WorkbookProtection::default_instance_;
    }

    bool CT_WorkbookProtection::has_workbookPassword_attr() const
    {    
    return m_has_workbookPassword_attr;
    }

    void CT_WorkbookProtection::set_workbookPassword_attr(const ST_UnsignedShortHex& _workbookPassword_attr)
    {    
    m_has_workbookPassword_attr = true;
    m_workbookPassword_attr = new ST_UnsignedShortHex(_workbookPassword_attr);
    }

    const ST_UnsignedShortHex& CT_WorkbookProtection::get_workbookPassword_attr() const
    {    
    if (m_workbookPassword_attr)
    {
        return *m_workbookPassword_attr;
    }
    return ST_UnsignedShortHex::default_instance();
    }

    bool CT_WorkbookProtection::has_workbookPasswordCharacterSet_attr() const
    {    
    return m_has_workbookPasswordCharacterSet_attr;
    }

    void CT_WorkbookProtection::set_workbookPasswordCharacterSet_attr(const XSD::string_& _workbookPasswordCharacterSet_attr)
    {    
    m_has_workbookPasswordCharacterSet_attr = true;
    m_workbookPasswordCharacterSet_attr = _workbookPasswordCharacterSet_attr;
    }

    const XSD::string_& CT_WorkbookProtection::get_workbookPasswordCharacterSet_attr() const
    {    
    return m_workbookPasswordCharacterSet_attr;
    }

    bool CT_WorkbookProtection::has_revisionsPassword_attr() const
    {    
    return m_has_revisionsPassword_attr;
    }

    void CT_WorkbookProtection::set_revisionsPassword_attr(const ST_UnsignedShortHex& _revisionsPassword_attr)
    {    
    m_has_revisionsPassword_attr = true;
    m_revisionsPassword_attr = new ST_UnsignedShortHex(_revisionsPassword_attr);
    }

    const ST_UnsignedShortHex& CT_WorkbookProtection::get_revisionsPassword_attr() const
    {    
    if (m_revisionsPassword_attr)
    {
        return *m_revisionsPassword_attr;
    }
    return ST_UnsignedShortHex::default_instance();
    }

    bool CT_WorkbookProtection::has_revisionsPasswordCharacterSet_attr() const
    {    
    return m_has_revisionsPasswordCharacterSet_attr;
    }

    void CT_WorkbookProtection::set_revisionsPasswordCharacterSet_attr(const XSD::string_& _revisionsPasswordCharacterSet_attr)
    {    
    m_has_revisionsPasswordCharacterSet_attr = true;
    m_revisionsPasswordCharacterSet_attr = _revisionsPasswordCharacterSet_attr;
    }

    const XSD::string_& CT_WorkbookProtection::get_revisionsPasswordCharacterSet_attr() const
    {    
    return m_revisionsPasswordCharacterSet_attr;
    }

    bool CT_WorkbookProtection::has_lockStructure_attr() const
    {    
    return m_has_lockStructure_attr;
    }

    void CT_WorkbookProtection::set_lockStructure_attr(const XSD::boolean_& _lockStructure_attr)
    {    
    m_has_lockStructure_attr = true;
    m_lockStructure_attr = _lockStructure_attr;
    }

    const XSD::boolean_& CT_WorkbookProtection::get_lockStructure_attr() const
    {    
    return m_lockStructure_attr;
    }

    bool CT_WorkbookProtection::has_lockWindows_attr() const
    {    
    return m_has_lockWindows_attr;
    }

    void CT_WorkbookProtection::set_lockWindows_attr(const XSD::boolean_& _lockWindows_attr)
    {    
    m_has_lockWindows_attr = true;
    m_lockWindows_attr = _lockWindows_attr;
    }

    const XSD::boolean_& CT_WorkbookProtection::get_lockWindows_attr() const
    {    
    return m_lockWindows_attr;
    }

    bool CT_WorkbookProtection::has_lockRevision_attr() const
    {    
    return m_has_lockRevision_attr;
    }

    void CT_WorkbookProtection::set_lockRevision_attr(const XSD::boolean_& _lockRevision_attr)
    {    
    m_has_lockRevision_attr = true;
    m_lockRevision_attr = _lockRevision_attr;
    }

    const XSD::boolean_& CT_WorkbookProtection::get_lockRevision_attr() const
    {    
    return m_lockRevision_attr;
    }

    bool CT_WorkbookProtection::has_revisionsAlgorithmName_attr() const
    {    
    return m_has_revisionsAlgorithmName_attr;
    }

    void CT_WorkbookProtection::set_revisionsAlgorithmName_attr(const ns_s::ST_Xstring& _revisionsAlgorithmName_attr)
    {    
    m_has_revisionsAlgorithmName_attr = true;
    m_revisionsAlgorithmName_attr = new ns_s::ST_Xstring(_revisionsAlgorithmName_attr);
    }

    const ns_s::ST_Xstring& CT_WorkbookProtection::get_revisionsAlgorithmName_attr() const
    {    
    if (m_revisionsAlgorithmName_attr)
    {
        return *m_revisionsAlgorithmName_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_WorkbookProtection::has_revisionsHashValue_attr() const
    {    
    return m_has_revisionsHashValue_attr;
    }

    void CT_WorkbookProtection::set_revisionsHashValue_attr(const XSD::base64Binary_& _revisionsHashValue_attr)
    {    
    m_has_revisionsHashValue_attr = true;
    m_revisionsHashValue_attr = _revisionsHashValue_attr;
    }

    const XSD::base64Binary_& CT_WorkbookProtection::get_revisionsHashValue_attr() const
    {    
    return m_revisionsHashValue_attr;
    }

    bool CT_WorkbookProtection::has_revisionsSaltValue_attr() const
    {    
    return m_has_revisionsSaltValue_attr;
    }

    void CT_WorkbookProtection::set_revisionsSaltValue_attr(const XSD::base64Binary_& _revisionsSaltValue_attr)
    {    
    m_has_revisionsSaltValue_attr = true;
    m_revisionsSaltValue_attr = _revisionsSaltValue_attr;
    }

    const XSD::base64Binary_& CT_WorkbookProtection::get_revisionsSaltValue_attr() const
    {    
    return m_revisionsSaltValue_attr;
    }

    bool CT_WorkbookProtection::has_revisionsSpinCount_attr() const
    {    
    return m_has_revisionsSpinCount_attr;
    }

    void CT_WorkbookProtection::set_revisionsSpinCount_attr(const XSD::unsignedInt_& _revisionsSpinCount_attr)
    {    
    m_has_revisionsSpinCount_attr = true;
    m_revisionsSpinCount_attr = _revisionsSpinCount_attr;
    }

    const XSD::unsignedInt_& CT_WorkbookProtection::get_revisionsSpinCount_attr() const
    {    
    return m_revisionsSpinCount_attr;
    }

    bool CT_WorkbookProtection::has_workbookAlgorithmName_attr() const
    {    
    return m_has_workbookAlgorithmName_attr;
    }

    void CT_WorkbookProtection::set_workbookAlgorithmName_attr(const ns_s::ST_Xstring& _workbookAlgorithmName_attr)
    {    
    m_has_workbookAlgorithmName_attr = true;
    m_workbookAlgorithmName_attr = new ns_s::ST_Xstring(_workbookAlgorithmName_attr);
    }

    const ns_s::ST_Xstring& CT_WorkbookProtection::get_workbookAlgorithmName_attr() const
    {    
    if (m_workbookAlgorithmName_attr)
    {
        return *m_workbookAlgorithmName_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_WorkbookProtection::has_workbookHashValue_attr() const
    {    
    return m_has_workbookHashValue_attr;
    }

    void CT_WorkbookProtection::set_workbookHashValue_attr(const XSD::base64Binary_& _workbookHashValue_attr)
    {    
    m_has_workbookHashValue_attr = true;
    m_workbookHashValue_attr = _workbookHashValue_attr;
    }

    const XSD::base64Binary_& CT_WorkbookProtection::get_workbookHashValue_attr() const
    {    
    return m_workbookHashValue_attr;
    }

    bool CT_WorkbookProtection::has_workbookSaltValue_attr() const
    {    
    return m_has_workbookSaltValue_attr;
    }

    void CT_WorkbookProtection::set_workbookSaltValue_attr(const XSD::base64Binary_& _workbookSaltValue_attr)
    {    
    m_has_workbookSaltValue_attr = true;
    m_workbookSaltValue_attr = _workbookSaltValue_attr;
    }

    const XSD::base64Binary_& CT_WorkbookProtection::get_workbookSaltValue_attr() const
    {    
    return m_workbookSaltValue_attr;
    }

    bool CT_WorkbookProtection::has_workbookSpinCount_attr() const
    {    
    return m_has_workbookSpinCount_attr;
    }

    void CT_WorkbookProtection::set_workbookSpinCount_attr(const XSD::unsignedInt_& _workbookSpinCount_attr)
    {    
    m_has_workbookSpinCount_attr = true;
    m_workbookSpinCount_attr = _workbookSpinCount_attr;
    }

    const XSD::unsignedInt_& CT_WorkbookProtection::get_workbookSpinCount_attr() const
    {    
    return m_workbookSpinCount_attr;
    }

CT_WorkbookProtection* CT_WorkbookProtection::default_instance_ = NULL;

    // CT_WebPublishing
    CT_WebPublishing::CT_WebPublishing()
    :m_has_css_attr(false),
    m_css_attr(false),
    m_has_thicket_attr(false),
    m_thicket_attr(false),
    m_has_longFileNames_attr(false),
    m_longFileNames_attr(false),
    m_has_vml_attr(false),
    m_vml_attr(false),
    m_has_allowPng_attr(false),
    m_allowPng_attr(false),
    m_has_targetScreenSize_attr(false),
    m_targetScreenSize_attr(NULL),
    m_has_dpi_attr(false),
    m_dpi_attr(0),
    m_has_codePage_attr(false),
    m_codePage_attr(0),
    m_has_characterSet_attr(false),
    m_characterSet_attr("")
    {
    }
    CT_WebPublishing::~CT_WebPublishing()
{
    clear();    }
    void CT_WebPublishing::clear()
    {    
    m_has_css_attr = false;
    m_css_attr = false;
    
    m_has_thicket_attr = false;
    m_thicket_attr = false;
    
    m_has_longFileNames_attr = false;
    m_longFileNames_attr = false;
    
    m_has_vml_attr = false;
    m_vml_attr = false;
    
    m_has_allowPng_attr = false;
    m_allowPng_attr = false;
    
    m_has_targetScreenSize_attr = false;
    
    if (m_targetScreenSize_attr)
    {
        delete m_targetScreenSize_attr;
        m_targetScreenSize_attr = NULL;
    }
    
    
    m_has_dpi_attr = false;
    m_dpi_attr = 0;
    
    m_has_codePage_attr = false;
    m_codePage_attr = 0;
    
    m_has_characterSet_attr = false;
    m_characterSet_attr.clear();
    }

    void CT_WebPublishing::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_css_attr)
    {
        _outStream << " " << "css" << "=\"" << XSD::XMLBooleanStr(m_css_attr) << "\"";
    }
    
    
    if (m_has_thicket_attr)
    {
        _outStream << " " << "thicket" << "=\"" << XSD::XMLBooleanStr(m_thicket_attr) << "\"";
    }
    
    
    if (m_has_longFileNames_attr)
    {
        _outStream << " " << "longFileNames" << "=\"" << XSD::XMLBooleanStr(m_longFileNames_attr) << "\"";
    }
    
    
    if (m_has_vml_attr)
    {
        _outStream << " " << "vml" << "=\"" << XSD::XMLBooleanStr(m_vml_attr) << "\"";
    }
    
    
    if (m_has_allowPng_attr)
    {
        _outStream << " " << "allowPng" << "=\"" << XSD::XMLBooleanStr(m_allowPng_attr) << "\"";
    }
    
    
    if (m_has_targetScreenSize_attr)
    {
        m_targetScreenSize_attr->toXmlAttr("targetScreenSize", _outStream);
    }
    
    
    if (m_has_dpi_attr)
    {
        _outStream << " " << "dpi" << "=\"" << m_dpi_attr << "\"";
    }
    
    
    if (m_has_codePage_attr)
    {
        _outStream << " " << "codePage" << "=\"" << m_codePage_attr << "\"";
    }
    
    
    if (m_has_characterSet_attr)
    {
        _outStream << " " << "characterSet" << "=\"" << m_characterSet_attr << "\"";
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_WebPublishing& CT_WebPublishing::default_instance()
    {    
    if (!CT_WebPublishing::default_instance_)
    {
        CT_WebPublishing::default_instance_ = new CT_WebPublishing();
    }
    return *CT_WebPublishing::default_instance_;
    }

    bool CT_WebPublishing::has_css_attr() const
    {    
    return m_has_css_attr;
    }

    void CT_WebPublishing::set_css_attr(const XSD::boolean_& _css_attr)
    {    
    m_has_css_attr = true;
    m_css_attr = _css_attr;
    }

    const XSD::boolean_& CT_WebPublishing::get_css_attr() const
    {    
    return m_css_attr;
    }

    bool CT_WebPublishing::has_thicket_attr() const
    {    
    return m_has_thicket_attr;
    }

    void CT_WebPublishing::set_thicket_attr(const XSD::boolean_& _thicket_attr)
    {    
    m_has_thicket_attr = true;
    m_thicket_attr = _thicket_attr;
    }

    const XSD::boolean_& CT_WebPublishing::get_thicket_attr() const
    {    
    return m_thicket_attr;
    }

    bool CT_WebPublishing::has_longFileNames_attr() const
    {    
    return m_has_longFileNames_attr;
    }

    void CT_WebPublishing::set_longFileNames_attr(const XSD::boolean_& _longFileNames_attr)
    {    
    m_has_longFileNames_attr = true;
    m_longFileNames_attr = _longFileNames_attr;
    }

    const XSD::boolean_& CT_WebPublishing::get_longFileNames_attr() const
    {    
    return m_longFileNames_attr;
    }

    bool CT_WebPublishing::has_vml_attr() const
    {    
    return m_has_vml_attr;
    }

    void CT_WebPublishing::set_vml_attr(const XSD::boolean_& _vml_attr)
    {    
    m_has_vml_attr = true;
    m_vml_attr = _vml_attr;
    }

    const XSD::boolean_& CT_WebPublishing::get_vml_attr() const
    {    
    return m_vml_attr;
    }

    bool CT_WebPublishing::has_allowPng_attr() const
    {    
    return m_has_allowPng_attr;
    }

    void CT_WebPublishing::set_allowPng_attr(const XSD::boolean_& _allowPng_attr)
    {    
    m_has_allowPng_attr = true;
    m_allowPng_attr = _allowPng_attr;
    }

    const XSD::boolean_& CT_WebPublishing::get_allowPng_attr() const
    {    
    return m_allowPng_attr;
    }

    bool CT_WebPublishing::has_targetScreenSize_attr() const
    {    
    return m_has_targetScreenSize_attr;
    }

    void CT_WebPublishing::set_targetScreenSize_attr(const ST_TargetScreenSize& _targetScreenSize_attr)
    {    
    m_has_targetScreenSize_attr = true;
    m_targetScreenSize_attr = new ST_TargetScreenSize(_targetScreenSize_attr);
    }

    const ST_TargetScreenSize& CT_WebPublishing::get_targetScreenSize_attr() const
    {    
    if (m_targetScreenSize_attr)
    {
        return *m_targetScreenSize_attr;
    }
    return ST_TargetScreenSize::default_instance();
    }

    bool CT_WebPublishing::has_dpi_attr() const
    {    
    return m_has_dpi_attr;
    }

    void CT_WebPublishing::set_dpi_attr(const XSD::unsignedInt_& _dpi_attr)
    {    
    m_has_dpi_attr = true;
    m_dpi_attr = _dpi_attr;
    }

    const XSD::unsignedInt_& CT_WebPublishing::get_dpi_attr() const
    {    
    return m_dpi_attr;
    }

    bool CT_WebPublishing::has_codePage_attr() const
    {    
    return m_has_codePage_attr;
    }

    void CT_WebPublishing::set_codePage_attr(const XSD::unsignedInt_& _codePage_attr)
    {    
    m_has_codePage_attr = true;
    m_codePage_attr = _codePage_attr;
    }

    const XSD::unsignedInt_& CT_WebPublishing::get_codePage_attr() const
    {    
    return m_codePage_attr;
    }

    bool CT_WebPublishing::has_characterSet_attr() const
    {    
    return m_has_characterSet_attr;
    }

    void CT_WebPublishing::set_characterSet_attr(const XSD::string_& _characterSet_attr)
    {    
    m_has_characterSet_attr = true;
    m_characterSet_attr = _characterSet_attr;
    }

    const XSD::string_& CT_WebPublishing::get_characterSet_attr() const
    {    
    return m_characterSet_attr;
    }

CT_WebPublishing* CT_WebPublishing::default_instance_ = NULL;

    // CT_FunctionGroups
    CT_FunctionGroups::CT_FunctionGroups()
    :m_has_builtInGroupCount_attr(false),
    m_builtInGroupCount_attr(0)
    {
    }
    CT_FunctionGroups::~CT_FunctionGroups()
{
    clear();    }
    CT_FunctionGroup* CT_FunctionGroups::add_functionGroup()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_FunctionGroup* pNewChild = pChildGroup->mutable_functionGroup();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_FunctionGroups::clear()
    {    
    m_has_builtInGroupCount_attr = false;
    m_builtInGroupCount_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_FunctionGroups::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_builtInGroupCount_attr)
    {
        _outStream << " " << "builtInGroupCount" << "=\"" << m_builtInGroupCount_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_functionGroup())
            {
                (*iter)->get_functionGroup().toXmlElem("main:functionGroup", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_FunctionGroups& CT_FunctionGroups::default_instance()
    {    
    if (!CT_FunctionGroups::default_instance_)
    {
        CT_FunctionGroups::default_instance_ = new CT_FunctionGroups();
    }
    return *CT_FunctionGroups::default_instance_;
    }

    bool CT_FunctionGroups::has_builtInGroupCount_attr() const
    {    
    return m_has_builtInGroupCount_attr;
    }

    void CT_FunctionGroups::set_builtInGroupCount_attr(const XSD::unsignedInt_& _builtInGroupCount_attr)
    {    
    m_has_builtInGroupCount_attr = true;
    m_builtInGroupCount_attr = _builtInGroupCount_attr;
    }

    const XSD::unsignedInt_& CT_FunctionGroups::get_builtInGroupCount_attr() const
    {    
    return m_builtInGroupCount_attr;
    }


    // CT_FunctionGroups::ChildGroup_1
    CT_FunctionGroups::ChildGroup_1::ChildGroup_1()
    :m_has_functionGroup(false),
    m_functionGroup(NULL)
    {
    }
    bool CT_FunctionGroups::ChildGroup_1::has_functionGroup() const
    {    
    return m_has_functionGroup;
    }

    CT_FunctionGroup* CT_FunctionGroups::ChildGroup_1::mutable_functionGroup()
    {    
    
    m_has_functionGroup = true;
    if (!m_functionGroup)
    {
        m_functionGroup = new CT_FunctionGroup();
    }
    return m_functionGroup;
    }

    const CT_FunctionGroup& CT_FunctionGroups::ChildGroup_1::get_functionGroup() const
    {    
    if (m_functionGroup)
    {
        return *m_functionGroup;
    }
    return CT_FunctionGroup::default_instance();
    }

CT_FunctionGroups* CT_FunctionGroups::default_instance_ = NULL;

    // CT_FunctionGroup
    CT_FunctionGroup::CT_FunctionGroup()
    :m_has_name_attr(false),
    m_name_attr(NULL)
    {
    }
    CT_FunctionGroup::~CT_FunctionGroup()
{
    clear();    }
    void CT_FunctionGroup::clear()
    {    
    m_has_name_attr = false;
    
    if (m_name_attr)
    {
        delete m_name_attr;
        m_name_attr = NULL;
    }
    
    }

    void CT_FunctionGroup::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_name_attr)
    {
        m_name_attr->toXmlAttr("name", _outStream);
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_FunctionGroup& CT_FunctionGroup::default_instance()
    {    
    if (!CT_FunctionGroup::default_instance_)
    {
        CT_FunctionGroup::default_instance_ = new CT_FunctionGroup();
    }
    return *CT_FunctionGroup::default_instance_;
    }

    bool CT_FunctionGroup::has_name_attr() const
    {    
    return m_has_name_attr;
    }

    void CT_FunctionGroup::set_name_attr(const ns_s::ST_Xstring& _name_attr)
    {    
    m_has_name_attr = true;
    m_name_attr = new ns_s::ST_Xstring(_name_attr);
    }

    const ns_s::ST_Xstring& CT_FunctionGroup::get_name_attr() const
    {    
    if (m_name_attr)
    {
        return *m_name_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

CT_FunctionGroup* CT_FunctionGroup::default_instance_ = NULL;

    // CT_WebPublishObjects
    CT_WebPublishObjects::CT_WebPublishObjects()
    :m_has_count_attr(false),
    m_count_attr(0)
    {
    }
    CT_WebPublishObjects::~CT_WebPublishObjects()
{
    clear();    }
    CT_WebPublishObject* CT_WebPublishObjects::add_webPublishObject()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_WebPublishObject* pNewChild = pChildGroup->mutable_webPublishObject();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void CT_WebPublishObjects::clear()
    {    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void CT_WebPublishObjects::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
            _outStream << ">";
            
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_webPublishObject())
            {
                (*iter)->get_webPublishObject().toXmlElem("main:webPublishObject", "", _outStream);
            }
        }
    }
    
            _outStream << "</" << _elemName << ">";
                }

    const CT_WebPublishObjects& CT_WebPublishObjects::default_instance()
    {    
    if (!CT_WebPublishObjects::default_instance_)
    {
        CT_WebPublishObjects::default_instance_ = new CT_WebPublishObjects();
    }
    return *CT_WebPublishObjects::default_instance_;
    }

    bool CT_WebPublishObjects::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void CT_WebPublishObjects::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& CT_WebPublishObjects::get_count_attr() const
    {    
    return m_count_attr;
    }


    // CT_WebPublishObjects::ChildGroup_1
    CT_WebPublishObjects::ChildGroup_1::ChildGroup_1()
    :m_has_webPublishObject(false),
    m_webPublishObject(NULL)
    {
    }
    bool CT_WebPublishObjects::ChildGroup_1::has_webPublishObject() const
    {    
    return m_has_webPublishObject;
    }

    CT_WebPublishObject* CT_WebPublishObjects::ChildGroup_1::mutable_webPublishObject()
    {    
    
    m_has_webPublishObject = true;
    if (!m_webPublishObject)
    {
        m_webPublishObject = new CT_WebPublishObject();
    }
    return m_webPublishObject;
    }

    const CT_WebPublishObject& CT_WebPublishObjects::ChildGroup_1::get_webPublishObject() const
    {    
    if (m_webPublishObject)
    {
        return *m_webPublishObject;
    }
    return CT_WebPublishObject::default_instance();
    }

CT_WebPublishObjects* CT_WebPublishObjects::default_instance_ = NULL;

    // CT_WebPublishObject
    CT_WebPublishObject::CT_WebPublishObject()
    :m_has_id_attr(false),
    m_id_attr(0),
    m_has_divId_attr(false),
    m_divId_attr(NULL),
    m_has_sourceObject_attr(false),
    m_sourceObject_attr(NULL),
    m_has_destinationFile_attr(false),
    m_destinationFile_attr(NULL),
    m_has_title_attr(false),
    m_title_attr(NULL),
    m_has_autoRepublish_attr(false),
    m_autoRepublish_attr(false)
    {
    }
    CT_WebPublishObject::~CT_WebPublishObject()
{
    clear();    }
    void CT_WebPublishObject::clear()
    {    
    m_has_id_attr = false;
    m_id_attr = 0;
    
    m_has_divId_attr = false;
    
    if (m_divId_attr)
    {
        delete m_divId_attr;
        m_divId_attr = NULL;
    }
    
    
    m_has_sourceObject_attr = false;
    
    if (m_sourceObject_attr)
    {
        delete m_sourceObject_attr;
        m_sourceObject_attr = NULL;
    }
    
    
    m_has_destinationFile_attr = false;
    
    if (m_destinationFile_attr)
    {
        delete m_destinationFile_attr;
        m_destinationFile_attr = NULL;
    }
    
    
    m_has_title_attr = false;
    
    if (m_title_attr)
    {
        delete m_title_attr;
        m_title_attr = NULL;
    }
    
    
    m_has_autoRepublish_attr = false;
    m_autoRepublish_attr = false;
    }

    void CT_WebPublishObject::toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const
    {    
            _outStream << "<" << _elemName;
            
            if (!_xmlNsStr.empty())
            {
                _outStream << _xmlNsStr;
            }
            
    if (m_has_id_attr)
    {
        _outStream << " " << "id" << "=\"" << m_id_attr << "\"";
    }
    
    
    if (m_has_divId_attr)
    {
        m_divId_attr->toXmlAttr("divId", _outStream);
    }
    
    
    if (m_has_sourceObject_attr)
    {
        m_sourceObject_attr->toXmlAttr("sourceObject", _outStream);
    }
    
    
    if (m_has_destinationFile_attr)
    {
        m_destinationFile_attr->toXmlAttr("destinationFile", _outStream);
    }
    
    
    if (m_has_title_attr)
    {
        m_title_attr->toXmlAttr("title", _outStream);
    }
    
    
    if (m_has_autoRepublish_attr)
    {
        _outStream << " " << "autoRepublish" << "=\"" << XSD::XMLBooleanStr(m_autoRepublish_attr) << "\"";
    }
    
            _outStream << ">";
            
            _outStream << "</" << _elemName << ">";
                }

    const CT_WebPublishObject& CT_WebPublishObject::default_instance()
    {    
    if (!CT_WebPublishObject::default_instance_)
    {
        CT_WebPublishObject::default_instance_ = new CT_WebPublishObject();
    }
    return *CT_WebPublishObject::default_instance_;
    }

    bool CT_WebPublishObject::has_id_attr() const
    {    
    return m_has_id_attr;
    }

    void CT_WebPublishObject::set_id_attr(const XSD::unsignedInt_& _id_attr)
    {    
    m_has_id_attr = true;
    m_id_attr = _id_attr;
    }

    const XSD::unsignedInt_& CT_WebPublishObject::get_id_attr() const
    {    
    return m_id_attr;
    }

    bool CT_WebPublishObject::has_divId_attr() const
    {    
    return m_has_divId_attr;
    }

    void CT_WebPublishObject::set_divId_attr(const ns_s::ST_Xstring& _divId_attr)
    {    
    m_has_divId_attr = true;
    m_divId_attr = new ns_s::ST_Xstring(_divId_attr);
    }

    const ns_s::ST_Xstring& CT_WebPublishObject::get_divId_attr() const
    {    
    if (m_divId_attr)
    {
        return *m_divId_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_WebPublishObject::has_sourceObject_attr() const
    {    
    return m_has_sourceObject_attr;
    }

    void CT_WebPublishObject::set_sourceObject_attr(const ns_s::ST_Xstring& _sourceObject_attr)
    {    
    m_has_sourceObject_attr = true;
    m_sourceObject_attr = new ns_s::ST_Xstring(_sourceObject_attr);
    }

    const ns_s::ST_Xstring& CT_WebPublishObject::get_sourceObject_attr() const
    {    
    if (m_sourceObject_attr)
    {
        return *m_sourceObject_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_WebPublishObject::has_destinationFile_attr() const
    {    
    return m_has_destinationFile_attr;
    }

    void CT_WebPublishObject::set_destinationFile_attr(const ns_s::ST_Xstring& _destinationFile_attr)
    {    
    m_has_destinationFile_attr = true;
    m_destinationFile_attr = new ns_s::ST_Xstring(_destinationFile_attr);
    }

    const ns_s::ST_Xstring& CT_WebPublishObject::get_destinationFile_attr() const
    {    
    if (m_destinationFile_attr)
    {
        return *m_destinationFile_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_WebPublishObject::has_title_attr() const
    {    
    return m_has_title_attr;
    }

    void CT_WebPublishObject::set_title_attr(const ns_s::ST_Xstring& _title_attr)
    {    
    m_has_title_attr = true;
    m_title_attr = new ns_s::ST_Xstring(_title_attr);
    }

    const ns_s::ST_Xstring& CT_WebPublishObject::get_title_attr() const
    {    
    if (m_title_attr)
    {
        return *m_title_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool CT_WebPublishObject::has_autoRepublish_attr() const
    {    
    return m_has_autoRepublish_attr;
    }

    void CT_WebPublishObject::set_autoRepublish_attr(const XSD::boolean_& _autoRepublish_attr)
    {    
    m_has_autoRepublish_attr = true;
    m_autoRepublish_attr = _autoRepublish_attr;
    }

    const XSD::boolean_& CT_WebPublishObject::get_autoRepublish_attr() const
    {    
    return m_autoRepublish_attr;
    }

CT_WebPublishObject* CT_WebPublishObject::default_instance_ = NULL;

    // calcChain_element
    calcChain_element::calcChain_element()

    {
    }
    calcChain_element::~calcChain_element()
{
    clear();    }
    CT_CalcCell* calcChain_element::add_c()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_CalcCell* pNewChild = pChildGroup->mutable_c();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_ExtensionList* calcChain_element::add_extLst()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_ExtensionList* pNewChild = pChildGroup->mutable_extLst();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void calcChain_element::clear()
    {    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void calcChain_element::toXml(std::ostream& _outStream) const
    {    
    _outStream << "<main:calcChain";
    
    _outStream << " " << "xmlns:main=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\"";
    _outStream << " " << "xmlns:s=\"http://schemas.openxmlformats.org/officeDocument/2006/sharedTypes\"";
    _outStream << " " << "xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\"";
    _outStream << " " << "xmlns:xdr=\"http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing\"";
    
    _outStream << ">";
    
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_c())
            {
                (*iter)->get_c().toXmlElem("main:c", "", _outStream);
            }
            else if ((*iter)->has_extLst())
            {
                (*iter)->get_extLst().toXmlElem("main:extLst", "", _outStream);
            }
        }
    }
    
    _outStream << "</main:calcChain>";
    }

    const calcChain_element& calcChain_element::default_instance()
    {    
    if (!calcChain_element::default_instance_)
    {
        calcChain_element::default_instance_ = new calcChain_element();
    }
    return *calcChain_element::default_instance_;
    }


    // calcChain_element::ChildGroup_1
    calcChain_element::ChildGroup_1::ChildGroup_1()
    :m_has_c(false),
    m_c(NULL),
    m_has_extLst(false),
    m_extLst(NULL)
    {
    }
    bool calcChain_element::ChildGroup_1::has_c() const
    {    
    return m_has_c;
    }

    CT_CalcCell* calcChain_element::ChildGroup_1::mutable_c()
    {    
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_c = true;
    if (!m_c)
    {
        m_c = new CT_CalcCell();
    }
    return m_c;
    }

    const CT_CalcCell& calcChain_element::ChildGroup_1::get_c() const
    {    
    if (m_c)
    {
        return *m_c;
    }
    return CT_CalcCell::default_instance();
    }

    bool calcChain_element::ChildGroup_1::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* calcChain_element::ChildGroup_1::mutable_extLst()
    {    
    
    m_has_c = false;
    
    if (m_c)
    {
        delete m_c;
        m_c = NULL;
    }
    ;
    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& calcChain_element::ChildGroup_1::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

calcChain_element* calcChain_element::default_instance_ = NULL;

    // comments_element
    comments_element::comments_element()
    :m_has_authors(false),
    m_authors(NULL),
    m_has_commentList(false),
    m_commentList(NULL),
    m_has_extLst(false),
    m_extLst(NULL)
    {
    }
    comments_element::~comments_element()
{
    clear();    }
    bool comments_element::has_authors() const
    {    
    return m_has_authors;
    }

    CT_Authors* comments_element::mutable_authors()
    {    
    m_has_authors = true;
    if (!m_authors)
    {
        m_authors = new CT_Authors();
    }
    return m_authors;
    }

    const CT_Authors& comments_element::get_authors() const
    {    
    if (m_authors)
    {
        return *m_authors;
    }
    return CT_Authors::default_instance();
    }

    bool comments_element::has_commentList() const
    {    
    return m_has_commentList;
    }

    CT_CommentList* comments_element::mutable_commentList()
    {    
    m_has_commentList = true;
    if (!m_commentList)
    {
        m_commentList = new CT_CommentList();
    }
    return m_commentList;
    }

    const CT_CommentList& comments_element::get_commentList() const
    {    
    if (m_commentList)
    {
        return *m_commentList;
    }
    return CT_CommentList::default_instance();
    }

    bool comments_element::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* comments_element::mutable_extLst()
    {    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& comments_element::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

    void comments_element::clear()
    {    }

    void comments_element::toXml(std::ostream& _outStream) const
    {    
    _outStream << "<main:comments";
    
    _outStream << " " << "xmlns:main=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\"";
    _outStream << " " << "xmlns:s=\"http://schemas.openxmlformats.org/officeDocument/2006/sharedTypes\"";
    _outStream << " " << "xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\"";
    _outStream << " " << "xmlns:xdr=\"http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing\"";
    
    _outStream << ">";
    
    if (m_has_authors)
    {
        m_authors->toXmlElem("main:authors", "", _outStream);;
    }
    
    if (m_has_commentList)
    {
        m_commentList->toXmlElem("main:commentList", "", _outStream);;
    }
    
    if (m_has_extLst)
    {
        m_extLst->toXmlElem("main:extLst", "", _outStream);;
    }
    
    _outStream << "</main:comments>";
    }

    const comments_element& comments_element::default_instance()
    {    
    if (!comments_element::default_instance_)
    {
        comments_element::default_instance_ = new comments_element();
    }
    return *comments_element::default_instance_;
    }

comments_element* comments_element::default_instance_ = NULL;

    // MapInfo_element
    MapInfo_element::MapInfo_element()
    :m_has_SelectionNamespaces_attr(false),
    m_SelectionNamespaces_attr("")
    {
    }
    MapInfo_element::~MapInfo_element()
{
    clear();    }
    CT_Schema* MapInfo_element::add_Schema()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Schema* pNewChild = pChildGroup->mutable_Schema();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_Map* MapInfo_element::add_Map()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Map* pNewChild = pChildGroup->mutable_Map();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void MapInfo_element::clear()
    {    
    m_has_SelectionNamespaces_attr = false;
    m_SelectionNamespaces_attr.clear();
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void MapInfo_element::toXml(std::ostream& _outStream) const
    {    
    _outStream << "<main:MapInfo";
    
    _outStream << " " << "xmlns:main=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\"";
    _outStream << " " << "xmlns:s=\"http://schemas.openxmlformats.org/officeDocument/2006/sharedTypes\"";
    _outStream << " " << "xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\"";
    _outStream << " " << "xmlns:xdr=\"http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing\"";
    
    if (m_has_SelectionNamespaces_attr)
    {
        _outStream << " " << "SelectionNamespaces" << "=\"" << m_SelectionNamespaces_attr << "\"";
    }
    
    _outStream << ">";
    
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_Schema())
            {
                (*iter)->get_Schema().toXmlElem("main:Schema", "", _outStream);
            }
            else if ((*iter)->has_Map())
            {
                (*iter)->get_Map().toXmlElem("main:Map", "", _outStream);
            }
        }
    }
    
    _outStream << "</main:MapInfo>";
    }

    const MapInfo_element& MapInfo_element::default_instance()
    {    
    if (!MapInfo_element::default_instance_)
    {
        MapInfo_element::default_instance_ = new MapInfo_element();
    }
    return *MapInfo_element::default_instance_;
    }

    bool MapInfo_element::has_SelectionNamespaces_attr() const
    {    
    return m_has_SelectionNamespaces_attr;
    }

    void MapInfo_element::set_SelectionNamespaces_attr(const XSD::string_& _SelectionNamespaces_attr)
    {    
    m_has_SelectionNamespaces_attr = true;
    m_SelectionNamespaces_attr = _SelectionNamespaces_attr;
    }

    const XSD::string_& MapInfo_element::get_SelectionNamespaces_attr() const
    {    
    return m_SelectionNamespaces_attr;
    }


    // MapInfo_element::ChildGroup_1
    MapInfo_element::ChildGroup_1::ChildGroup_1()
    :m_has_Schema(false),
    m_Schema(NULL),
    m_has_Map(false),
    m_Map(NULL)
    {
    }
    bool MapInfo_element::ChildGroup_1::has_Schema() const
    {    
    return m_has_Schema;
    }

    CT_Schema* MapInfo_element::ChildGroup_1::mutable_Schema()
    {    
    
    m_has_Map = false;
    
    if (m_Map)
    {
        delete m_Map;
        m_Map = NULL;
    }
    ;
    
    m_has_Schema = true;
    if (!m_Schema)
    {
        m_Schema = new CT_Schema();
    }
    return m_Schema;
    }

    const CT_Schema& MapInfo_element::ChildGroup_1::get_Schema() const
    {    
    if (m_Schema)
    {
        return *m_Schema;
    }
    return CT_Schema::default_instance();
    }

    bool MapInfo_element::ChildGroup_1::has_Map() const
    {    
    return m_has_Map;
    }

    CT_Map* MapInfo_element::ChildGroup_1::mutable_Map()
    {    
    
    m_has_Schema = false;
    
    if (m_Schema)
    {
        delete m_Schema;
        m_Schema = NULL;
    }
    ;
    
    m_has_Map = true;
    if (!m_Map)
    {
        m_Map = new CT_Map();
    }
    return m_Map;
    }

    const CT_Map& MapInfo_element::ChildGroup_1::get_Map() const
    {    
    if (m_Map)
    {
        return *m_Map;
    }
    return CT_Map::default_instance();
    }

MapInfo_element* MapInfo_element::default_instance_ = NULL;

    // connections_element
    connections_element::connections_element()

    {
    }
    connections_element::~connections_element()
{
    clear();    }
    CT_Connection* connections_element::add_connection()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Connection* pNewChild = pChildGroup->mutable_connection();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void connections_element::clear()
    {    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void connections_element::toXml(std::ostream& _outStream) const
    {    
    _outStream << "<main:connections";
    
    _outStream << " " << "xmlns:main=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\"";
    _outStream << " " << "xmlns:s=\"http://schemas.openxmlformats.org/officeDocument/2006/sharedTypes\"";
    _outStream << " " << "xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\"";
    _outStream << " " << "xmlns:xdr=\"http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing\"";
    
    _outStream << ">";
    
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_connection())
            {
                (*iter)->get_connection().toXmlElem("main:connection", "", _outStream);
            }
        }
    }
    
    _outStream << "</main:connections>";
    }

    const connections_element& connections_element::default_instance()
    {    
    if (!connections_element::default_instance_)
    {
        connections_element::default_instance_ = new connections_element();
    }
    return *connections_element::default_instance_;
    }


    // connections_element::ChildGroup_1
    connections_element::ChildGroup_1::ChildGroup_1()
    :m_has_connection(false),
    m_connection(NULL)
    {
    }
    bool connections_element::ChildGroup_1::has_connection() const
    {    
    return m_has_connection;
    }

    CT_Connection* connections_element::ChildGroup_1::mutable_connection()
    {    
    
    m_has_connection = true;
    if (!m_connection)
    {
        m_connection = new CT_Connection();
    }
    return m_connection;
    }

    const CT_Connection& connections_element::ChildGroup_1::get_connection() const
    {    
    if (m_connection)
    {
        return *m_connection;
    }
    return CT_Connection::default_instance();
    }

connections_element* connections_element::default_instance_ = NULL;

    // pivotCacheDefinition_element
    pivotCacheDefinition_element::pivotCacheDefinition_element()
    :m_has_cacheSource(false),
    m_cacheSource(NULL),
    m_has_cacheFields(false),
    m_cacheFields(NULL),
    m_has_cacheHierarchies(false),
    m_cacheHierarchies(NULL),
    m_has_kpis(false),
    m_kpis(NULL),
    m_has_tupleCache(false),
    m_tupleCache(NULL),
    m_has_calculatedItems(false),
    m_calculatedItems(NULL),
    m_has_calculatedMembers(false),
    m_calculatedMembers(NULL),
    m_has_dimensions(false),
    m_dimensions(NULL),
    m_has_measureGroups(false),
    m_measureGroups(NULL),
    m_has_maps(false),
    m_maps(NULL),
    m_has_extLst(false),
    m_extLst(NULL),
    m_has_r_id_attr(false),
    m_r_id_attr(NULL),
    m_has_invalid_attr(false),
    m_invalid_attr(false),
    m_has_saveData_attr(false),
    m_saveData_attr(false),
    m_has_refreshOnLoad_attr(false),
    m_refreshOnLoad_attr(false),
    m_has_optimizeMemory_attr(false),
    m_optimizeMemory_attr(false),
    m_has_enableRefresh_attr(false),
    m_enableRefresh_attr(false),
    m_has_refreshedBy_attr(false),
    m_refreshedBy_attr(NULL),
    m_has_refreshedDate_attr(false),
    m_refreshedDate_attr(0),
    m_has_refreshedDateIso_attr(false),
    m_refreshedDateIso_attr(""),
    m_has_backgroundQuery_attr(false),
    m_backgroundQuery_attr(false),
    m_has_missingItemsLimit_attr(false),
    m_missingItemsLimit_attr(0),
    m_has_createdVersion_attr(false),
    m_createdVersion_attr(0),
    m_has_refreshedVersion_attr(false),
    m_refreshedVersion_attr(0),
    m_has_minRefreshableVersion_attr(false),
    m_minRefreshableVersion_attr(0),
    m_has_recordCount_attr(false),
    m_recordCount_attr(0),
    m_has_upgradeOnRefresh_attr(false),
    m_upgradeOnRefresh_attr(false),
    m_has_tupleCache_attr(false),
    m_tupleCache_attr(false),
    m_has_supportSubquery_attr(false),
    m_supportSubquery_attr(false),
    m_has_supportAdvancedDrill_attr(false),
    m_supportAdvancedDrill_attr(false)
    {
    }
    pivotCacheDefinition_element::~pivotCacheDefinition_element()
{
    clear();    }
    bool pivotCacheDefinition_element::has_cacheSource() const
    {    
    return m_has_cacheSource;
    }

    CT_CacheSource* pivotCacheDefinition_element::mutable_cacheSource()
    {    
    m_has_cacheSource = true;
    if (!m_cacheSource)
    {
        m_cacheSource = new CT_CacheSource();
    }
    return m_cacheSource;
    }

    const CT_CacheSource& pivotCacheDefinition_element::get_cacheSource() const
    {    
    if (m_cacheSource)
    {
        return *m_cacheSource;
    }
    return CT_CacheSource::default_instance();
    }

    bool pivotCacheDefinition_element::has_cacheFields() const
    {    
    return m_has_cacheFields;
    }

    CT_CacheFields* pivotCacheDefinition_element::mutable_cacheFields()
    {    
    m_has_cacheFields = true;
    if (!m_cacheFields)
    {
        m_cacheFields = new CT_CacheFields();
    }
    return m_cacheFields;
    }

    const CT_CacheFields& pivotCacheDefinition_element::get_cacheFields() const
    {    
    if (m_cacheFields)
    {
        return *m_cacheFields;
    }
    return CT_CacheFields::default_instance();
    }

    bool pivotCacheDefinition_element::has_cacheHierarchies() const
    {    
    return m_has_cacheHierarchies;
    }

    CT_CacheHierarchies* pivotCacheDefinition_element::mutable_cacheHierarchies()
    {    
    m_has_cacheHierarchies = true;
    if (!m_cacheHierarchies)
    {
        m_cacheHierarchies = new CT_CacheHierarchies();
    }
    return m_cacheHierarchies;
    }

    const CT_CacheHierarchies& pivotCacheDefinition_element::get_cacheHierarchies() const
    {    
    if (m_cacheHierarchies)
    {
        return *m_cacheHierarchies;
    }
    return CT_CacheHierarchies::default_instance();
    }

    bool pivotCacheDefinition_element::has_kpis() const
    {    
    return m_has_kpis;
    }

    CT_PCDKPIs* pivotCacheDefinition_element::mutable_kpis()
    {    
    m_has_kpis = true;
    if (!m_kpis)
    {
        m_kpis = new CT_PCDKPIs();
    }
    return m_kpis;
    }

    const CT_PCDKPIs& pivotCacheDefinition_element::get_kpis() const
    {    
    if (m_kpis)
    {
        return *m_kpis;
    }
    return CT_PCDKPIs::default_instance();
    }

    bool pivotCacheDefinition_element::has_tupleCache() const
    {    
    return m_has_tupleCache;
    }

    CT_TupleCache* pivotCacheDefinition_element::mutable_tupleCache()
    {    
    m_has_tupleCache = true;
    if (!m_tupleCache)
    {
        m_tupleCache = new CT_TupleCache();
    }
    return m_tupleCache;
    }

    const CT_TupleCache& pivotCacheDefinition_element::get_tupleCache() const
    {    
    if (m_tupleCache)
    {
        return *m_tupleCache;
    }
    return CT_TupleCache::default_instance();
    }

    bool pivotCacheDefinition_element::has_calculatedItems() const
    {    
    return m_has_calculatedItems;
    }

    CT_CalculatedItems* pivotCacheDefinition_element::mutable_calculatedItems()
    {    
    m_has_calculatedItems = true;
    if (!m_calculatedItems)
    {
        m_calculatedItems = new CT_CalculatedItems();
    }
    return m_calculatedItems;
    }

    const CT_CalculatedItems& pivotCacheDefinition_element::get_calculatedItems() const
    {    
    if (m_calculatedItems)
    {
        return *m_calculatedItems;
    }
    return CT_CalculatedItems::default_instance();
    }

    bool pivotCacheDefinition_element::has_calculatedMembers() const
    {    
    return m_has_calculatedMembers;
    }

    CT_CalculatedMembers* pivotCacheDefinition_element::mutable_calculatedMembers()
    {    
    m_has_calculatedMembers = true;
    if (!m_calculatedMembers)
    {
        m_calculatedMembers = new CT_CalculatedMembers();
    }
    return m_calculatedMembers;
    }

    const CT_CalculatedMembers& pivotCacheDefinition_element::get_calculatedMembers() const
    {    
    if (m_calculatedMembers)
    {
        return *m_calculatedMembers;
    }
    return CT_CalculatedMembers::default_instance();
    }

    bool pivotCacheDefinition_element::has_dimensions() const
    {    
    return m_has_dimensions;
    }

    CT_Dimensions* pivotCacheDefinition_element::mutable_dimensions()
    {    
    m_has_dimensions = true;
    if (!m_dimensions)
    {
        m_dimensions = new CT_Dimensions();
    }
    return m_dimensions;
    }

    const CT_Dimensions& pivotCacheDefinition_element::get_dimensions() const
    {    
    if (m_dimensions)
    {
        return *m_dimensions;
    }
    return CT_Dimensions::default_instance();
    }

    bool pivotCacheDefinition_element::has_measureGroups() const
    {    
    return m_has_measureGroups;
    }

    CT_MeasureGroups* pivotCacheDefinition_element::mutable_measureGroups()
    {    
    m_has_measureGroups = true;
    if (!m_measureGroups)
    {
        m_measureGroups = new CT_MeasureGroups();
    }
    return m_measureGroups;
    }

    const CT_MeasureGroups& pivotCacheDefinition_element::get_measureGroups() const
    {    
    if (m_measureGroups)
    {
        return *m_measureGroups;
    }
    return CT_MeasureGroups::default_instance();
    }

    bool pivotCacheDefinition_element::has_maps() const
    {    
    return m_has_maps;
    }

    CT_MeasureDimensionMaps* pivotCacheDefinition_element::mutable_maps()
    {    
    m_has_maps = true;
    if (!m_maps)
    {
        m_maps = new CT_MeasureDimensionMaps();
    }
    return m_maps;
    }

    const CT_MeasureDimensionMaps& pivotCacheDefinition_element::get_maps() const
    {    
    if (m_maps)
    {
        return *m_maps;
    }
    return CT_MeasureDimensionMaps::default_instance();
    }

    bool pivotCacheDefinition_element::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* pivotCacheDefinition_element::mutable_extLst()
    {    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& pivotCacheDefinition_element::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

    void pivotCacheDefinition_element::clear()
    {    
    m_has_r_id_attr = false;
    
    if (m_r_id_attr)
    {
        delete m_r_id_attr;
        m_r_id_attr = NULL;
    }
    
    
    m_has_invalid_attr = false;
    m_invalid_attr = false;
    
    m_has_saveData_attr = false;
    m_saveData_attr = false;
    
    m_has_refreshOnLoad_attr = false;
    m_refreshOnLoad_attr = false;
    
    m_has_optimizeMemory_attr = false;
    m_optimizeMemory_attr = false;
    
    m_has_enableRefresh_attr = false;
    m_enableRefresh_attr = false;
    
    m_has_refreshedBy_attr = false;
    
    if (m_refreshedBy_attr)
    {
        delete m_refreshedBy_attr;
        m_refreshedBy_attr = NULL;
    }
    
    
    m_has_refreshedDate_attr = false;
    m_refreshedDate_attr = 0;
    
    m_has_refreshedDateIso_attr = false;
    m_refreshedDateIso_attr.clear();
    
    m_has_backgroundQuery_attr = false;
    m_backgroundQuery_attr = false;
    
    m_has_missingItemsLimit_attr = false;
    m_missingItemsLimit_attr = 0;
    
    m_has_createdVersion_attr = false;
    m_createdVersion_attr = 0;
    
    m_has_refreshedVersion_attr = false;
    m_refreshedVersion_attr = 0;
    
    m_has_minRefreshableVersion_attr = false;
    m_minRefreshableVersion_attr = 0;
    
    m_has_recordCount_attr = false;
    m_recordCount_attr = 0;
    
    m_has_upgradeOnRefresh_attr = false;
    m_upgradeOnRefresh_attr = false;
    
    m_has_tupleCache_attr = false;
    m_tupleCache_attr = false;
    
    m_has_supportSubquery_attr = false;
    m_supportSubquery_attr = false;
    
    m_has_supportAdvancedDrill_attr = false;
    m_supportAdvancedDrill_attr = false;
    }

    void pivotCacheDefinition_element::toXml(std::ostream& _outStream) const
    {    
    _outStream << "<main:pivotCacheDefinition";
    
    _outStream << " " << "xmlns:main=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\"";
    _outStream << " " << "xmlns:s=\"http://schemas.openxmlformats.org/officeDocument/2006/sharedTypes\"";
    _outStream << " " << "xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\"";
    _outStream << " " << "xmlns:xdr=\"http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing\"";
    
    if (m_has_r_id_attr)
    {
        m_r_id_attr->toXmlAttr("r:id", _outStream);
    }
    
    
    if (m_has_invalid_attr)
    {
        _outStream << " " << "invalid" << "=\"" << XSD::XMLBooleanStr(m_invalid_attr) << "\"";
    }
    
    
    if (m_has_saveData_attr)
    {
        _outStream << " " << "saveData" << "=\"" << XSD::XMLBooleanStr(m_saveData_attr) << "\"";
    }
    
    
    if (m_has_refreshOnLoad_attr)
    {
        _outStream << " " << "refreshOnLoad" << "=\"" << XSD::XMLBooleanStr(m_refreshOnLoad_attr) << "\"";
    }
    
    
    if (m_has_optimizeMemory_attr)
    {
        _outStream << " " << "optimizeMemory" << "=\"" << XSD::XMLBooleanStr(m_optimizeMemory_attr) << "\"";
    }
    
    
    if (m_has_enableRefresh_attr)
    {
        _outStream << " " << "enableRefresh" << "=\"" << XSD::XMLBooleanStr(m_enableRefresh_attr) << "\"";
    }
    
    
    if (m_has_refreshedBy_attr)
    {
        m_refreshedBy_attr->toXmlAttr("refreshedBy", _outStream);
    }
    
    
    if (m_has_refreshedDate_attr)
    {
        _outStream << " " << "refreshedDate" << "=\"" << m_refreshedDate_attr << "\"";
    }
    
    
    if (m_has_refreshedDateIso_attr)
    {
        _outStream << " " << "refreshedDateIso" << "=\"" << m_refreshedDateIso_attr << "\"";
    }
    
    
    if (m_has_backgroundQuery_attr)
    {
        _outStream << " " << "backgroundQuery" << "=\"" << XSD::XMLBooleanStr(m_backgroundQuery_attr) << "\"";
    }
    
    
    if (m_has_missingItemsLimit_attr)
    {
        _outStream << " " << "missingItemsLimit" << "=\"" << m_missingItemsLimit_attr << "\"";
    }
    
    
    if (m_has_createdVersion_attr)
    {
        _outStream << " " << "createdVersion" << "=\"" << m_createdVersion_attr << "\"";
    }
    
    
    if (m_has_refreshedVersion_attr)
    {
        _outStream << " " << "refreshedVersion" << "=\"" << m_refreshedVersion_attr << "\"";
    }
    
    
    if (m_has_minRefreshableVersion_attr)
    {
        _outStream << " " << "minRefreshableVersion" << "=\"" << m_minRefreshableVersion_attr << "\"";
    }
    
    
    if (m_has_recordCount_attr)
    {
        _outStream << " " << "recordCount" << "=\"" << m_recordCount_attr << "\"";
    }
    
    
    if (m_has_upgradeOnRefresh_attr)
    {
        _outStream << " " << "upgradeOnRefresh" << "=\"" << XSD::XMLBooleanStr(m_upgradeOnRefresh_attr) << "\"";
    }
    
    
    if (m_has_tupleCache_attr)
    {
        _outStream << " " << "tupleCache" << "=\"" << XSD::XMLBooleanStr(m_tupleCache_attr) << "\"";
    }
    
    
    if (m_has_supportSubquery_attr)
    {
        _outStream << " " << "supportSubquery" << "=\"" << XSD::XMLBooleanStr(m_supportSubquery_attr) << "\"";
    }
    
    
    if (m_has_supportAdvancedDrill_attr)
    {
        _outStream << " " << "supportAdvancedDrill" << "=\"" << XSD::XMLBooleanStr(m_supportAdvancedDrill_attr) << "\"";
    }
    
    _outStream << ">";
    
    if (m_has_cacheSource)
    {
        m_cacheSource->toXmlElem("main:cacheSource", "", _outStream);;
    }
    
    if (m_has_cacheFields)
    {
        m_cacheFields->toXmlElem("main:cacheFields", "", _outStream);;
    }
    
    if (m_has_cacheHierarchies)
    {
        m_cacheHierarchies->toXmlElem("main:cacheHierarchies", "", _outStream);;
    }
    
    if (m_has_kpis)
    {
        m_kpis->toXmlElem("main:kpis", "", _outStream);;
    }
    
    if (m_has_tupleCache)
    {
        m_tupleCache->toXmlElem("main:tupleCache", "", _outStream);;
    }
    
    if (m_has_calculatedItems)
    {
        m_calculatedItems->toXmlElem("main:calculatedItems", "", _outStream);;
    }
    
    if (m_has_calculatedMembers)
    {
        m_calculatedMembers->toXmlElem("main:calculatedMembers", "", _outStream);;
    }
    
    if (m_has_dimensions)
    {
        m_dimensions->toXmlElem("main:dimensions", "", _outStream);;
    }
    
    if (m_has_measureGroups)
    {
        m_measureGroups->toXmlElem("main:measureGroups", "", _outStream);;
    }
    
    if (m_has_maps)
    {
        m_maps->toXmlElem("main:maps", "", _outStream);;
    }
    
    if (m_has_extLst)
    {
        m_extLst->toXmlElem("main:extLst", "", _outStream);;
    }
    
    _outStream << "</main:pivotCacheDefinition>";
    }

    const pivotCacheDefinition_element& pivotCacheDefinition_element::default_instance()
    {    
    if (!pivotCacheDefinition_element::default_instance_)
    {
        pivotCacheDefinition_element::default_instance_ = new pivotCacheDefinition_element();
    }
    return *pivotCacheDefinition_element::default_instance_;
    }

    bool pivotCacheDefinition_element::has_r_id_attr() const
    {    
    return m_has_r_id_attr;
    }

    void pivotCacheDefinition_element::set_r_id_attr(const ns_r::ST_RelationshipId& _r_id_attr)
    {    
    m_has_r_id_attr = true;
    m_r_id_attr = new ns_r::ST_RelationshipId(_r_id_attr);
    }

    const ns_r::ST_RelationshipId& pivotCacheDefinition_element::get_r_id_attr() const
    {    
    if (m_r_id_attr)
    {
        return *m_r_id_attr;
    }
    return ns_r::ST_RelationshipId::default_instance();
    }

    bool pivotCacheDefinition_element::has_invalid_attr() const
    {    
    return m_has_invalid_attr;
    }

    void pivotCacheDefinition_element::set_invalid_attr(const XSD::boolean_& _invalid_attr)
    {    
    m_has_invalid_attr = true;
    m_invalid_attr = _invalid_attr;
    }

    const XSD::boolean_& pivotCacheDefinition_element::get_invalid_attr() const
    {    
    return m_invalid_attr;
    }

    bool pivotCacheDefinition_element::has_saveData_attr() const
    {    
    return m_has_saveData_attr;
    }

    void pivotCacheDefinition_element::set_saveData_attr(const XSD::boolean_& _saveData_attr)
    {    
    m_has_saveData_attr = true;
    m_saveData_attr = _saveData_attr;
    }

    const XSD::boolean_& pivotCacheDefinition_element::get_saveData_attr() const
    {    
    return m_saveData_attr;
    }

    bool pivotCacheDefinition_element::has_refreshOnLoad_attr() const
    {    
    return m_has_refreshOnLoad_attr;
    }

    void pivotCacheDefinition_element::set_refreshOnLoad_attr(const XSD::boolean_& _refreshOnLoad_attr)
    {    
    m_has_refreshOnLoad_attr = true;
    m_refreshOnLoad_attr = _refreshOnLoad_attr;
    }

    const XSD::boolean_& pivotCacheDefinition_element::get_refreshOnLoad_attr() const
    {    
    return m_refreshOnLoad_attr;
    }

    bool pivotCacheDefinition_element::has_optimizeMemory_attr() const
    {    
    return m_has_optimizeMemory_attr;
    }

    void pivotCacheDefinition_element::set_optimizeMemory_attr(const XSD::boolean_& _optimizeMemory_attr)
    {    
    m_has_optimizeMemory_attr = true;
    m_optimizeMemory_attr = _optimizeMemory_attr;
    }

    const XSD::boolean_& pivotCacheDefinition_element::get_optimizeMemory_attr() const
    {    
    return m_optimizeMemory_attr;
    }

    bool pivotCacheDefinition_element::has_enableRefresh_attr() const
    {    
    return m_has_enableRefresh_attr;
    }

    void pivotCacheDefinition_element::set_enableRefresh_attr(const XSD::boolean_& _enableRefresh_attr)
    {    
    m_has_enableRefresh_attr = true;
    m_enableRefresh_attr = _enableRefresh_attr;
    }

    const XSD::boolean_& pivotCacheDefinition_element::get_enableRefresh_attr() const
    {    
    return m_enableRefresh_attr;
    }

    bool pivotCacheDefinition_element::has_refreshedBy_attr() const
    {    
    return m_has_refreshedBy_attr;
    }

    void pivotCacheDefinition_element::set_refreshedBy_attr(const ns_s::ST_Xstring& _refreshedBy_attr)
    {    
    m_has_refreshedBy_attr = true;
    m_refreshedBy_attr = new ns_s::ST_Xstring(_refreshedBy_attr);
    }

    const ns_s::ST_Xstring& pivotCacheDefinition_element::get_refreshedBy_attr() const
    {    
    if (m_refreshedBy_attr)
    {
        return *m_refreshedBy_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool pivotCacheDefinition_element::has_refreshedDate_attr() const
    {    
    return m_has_refreshedDate_attr;
    }

    void pivotCacheDefinition_element::set_refreshedDate_attr(const XSD::double_& _refreshedDate_attr)
    {    
    m_has_refreshedDate_attr = true;
    m_refreshedDate_attr = _refreshedDate_attr;
    }

    const XSD::double_& pivotCacheDefinition_element::get_refreshedDate_attr() const
    {    
    return m_refreshedDate_attr;
    }

    bool pivotCacheDefinition_element::has_refreshedDateIso_attr() const
    {    
    return m_has_refreshedDateIso_attr;
    }

    void pivotCacheDefinition_element::set_refreshedDateIso_attr(const XSD::dateTime_& _refreshedDateIso_attr)
    {    
    m_has_refreshedDateIso_attr = true;
    m_refreshedDateIso_attr = _refreshedDateIso_attr;
    }

    const XSD::dateTime_& pivotCacheDefinition_element::get_refreshedDateIso_attr() const
    {    
    return m_refreshedDateIso_attr;
    }

    bool pivotCacheDefinition_element::has_backgroundQuery_attr() const
    {    
    return m_has_backgroundQuery_attr;
    }

    void pivotCacheDefinition_element::set_backgroundQuery_attr(const XSD::boolean_& _backgroundQuery_attr)
    {    
    m_has_backgroundQuery_attr = true;
    m_backgroundQuery_attr = _backgroundQuery_attr;
    }

    const XSD::boolean_& pivotCacheDefinition_element::get_backgroundQuery_attr() const
    {    
    return m_backgroundQuery_attr;
    }

    bool pivotCacheDefinition_element::has_missingItemsLimit_attr() const
    {    
    return m_has_missingItemsLimit_attr;
    }

    void pivotCacheDefinition_element::set_missingItemsLimit_attr(const XSD::unsignedInt_& _missingItemsLimit_attr)
    {    
    m_has_missingItemsLimit_attr = true;
    m_missingItemsLimit_attr = _missingItemsLimit_attr;
    }

    const XSD::unsignedInt_& pivotCacheDefinition_element::get_missingItemsLimit_attr() const
    {    
    return m_missingItemsLimit_attr;
    }

    bool pivotCacheDefinition_element::has_createdVersion_attr() const
    {    
    return m_has_createdVersion_attr;
    }

    void pivotCacheDefinition_element::set_createdVersion_attr(const XSD::unsignedByte_& _createdVersion_attr)
    {    
    m_has_createdVersion_attr = true;
    m_createdVersion_attr = _createdVersion_attr;
    }

    const XSD::unsignedByte_& pivotCacheDefinition_element::get_createdVersion_attr() const
    {    
    return m_createdVersion_attr;
    }

    bool pivotCacheDefinition_element::has_refreshedVersion_attr() const
    {    
    return m_has_refreshedVersion_attr;
    }

    void pivotCacheDefinition_element::set_refreshedVersion_attr(const XSD::unsignedByte_& _refreshedVersion_attr)
    {    
    m_has_refreshedVersion_attr = true;
    m_refreshedVersion_attr = _refreshedVersion_attr;
    }

    const XSD::unsignedByte_& pivotCacheDefinition_element::get_refreshedVersion_attr() const
    {    
    return m_refreshedVersion_attr;
    }

    bool pivotCacheDefinition_element::has_minRefreshableVersion_attr() const
    {    
    return m_has_minRefreshableVersion_attr;
    }

    void pivotCacheDefinition_element::set_minRefreshableVersion_attr(const XSD::unsignedByte_& _minRefreshableVersion_attr)
    {    
    m_has_minRefreshableVersion_attr = true;
    m_minRefreshableVersion_attr = _minRefreshableVersion_attr;
    }

    const XSD::unsignedByte_& pivotCacheDefinition_element::get_minRefreshableVersion_attr() const
    {    
    return m_minRefreshableVersion_attr;
    }

    bool pivotCacheDefinition_element::has_recordCount_attr() const
    {    
    return m_has_recordCount_attr;
    }

    void pivotCacheDefinition_element::set_recordCount_attr(const XSD::unsignedInt_& _recordCount_attr)
    {    
    m_has_recordCount_attr = true;
    m_recordCount_attr = _recordCount_attr;
    }

    const XSD::unsignedInt_& pivotCacheDefinition_element::get_recordCount_attr() const
    {    
    return m_recordCount_attr;
    }

    bool pivotCacheDefinition_element::has_upgradeOnRefresh_attr() const
    {    
    return m_has_upgradeOnRefresh_attr;
    }

    void pivotCacheDefinition_element::set_upgradeOnRefresh_attr(const XSD::boolean_& _upgradeOnRefresh_attr)
    {    
    m_has_upgradeOnRefresh_attr = true;
    m_upgradeOnRefresh_attr = _upgradeOnRefresh_attr;
    }

    const XSD::boolean_& pivotCacheDefinition_element::get_upgradeOnRefresh_attr() const
    {    
    return m_upgradeOnRefresh_attr;
    }

    bool pivotCacheDefinition_element::has_tupleCache_attr() const
    {    
    return m_has_tupleCache_attr;
    }

    void pivotCacheDefinition_element::set_tupleCache_attr(const XSD::boolean_& _tupleCache_attr)
    {    
    m_has_tupleCache_attr = true;
    m_tupleCache_attr = _tupleCache_attr;
    }

    const XSD::boolean_& pivotCacheDefinition_element::get_tupleCache_attr() const
    {    
    return m_tupleCache_attr;
    }

    bool pivotCacheDefinition_element::has_supportSubquery_attr() const
    {    
    return m_has_supportSubquery_attr;
    }

    void pivotCacheDefinition_element::set_supportSubquery_attr(const XSD::boolean_& _supportSubquery_attr)
    {    
    m_has_supportSubquery_attr = true;
    m_supportSubquery_attr = _supportSubquery_attr;
    }

    const XSD::boolean_& pivotCacheDefinition_element::get_supportSubquery_attr() const
    {    
    return m_supportSubquery_attr;
    }

    bool pivotCacheDefinition_element::has_supportAdvancedDrill_attr() const
    {    
    return m_has_supportAdvancedDrill_attr;
    }

    void pivotCacheDefinition_element::set_supportAdvancedDrill_attr(const XSD::boolean_& _supportAdvancedDrill_attr)
    {    
    m_has_supportAdvancedDrill_attr = true;
    m_supportAdvancedDrill_attr = _supportAdvancedDrill_attr;
    }

    const XSD::boolean_& pivotCacheDefinition_element::get_supportAdvancedDrill_attr() const
    {    
    return m_supportAdvancedDrill_attr;
    }

pivotCacheDefinition_element* pivotCacheDefinition_element::default_instance_ = NULL;

    // pivotCacheRecords_element
    pivotCacheRecords_element::pivotCacheRecords_element()
    :m_has_count_attr(false),
    m_count_attr(0)
    {
    }
    pivotCacheRecords_element::~pivotCacheRecords_element()
{
    clear();    }
    CT_Record* pivotCacheRecords_element::add_r()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Record* pNewChild = pChildGroup->mutable_r();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_ExtensionList* pivotCacheRecords_element::add_extLst()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_ExtensionList* pNewChild = pChildGroup->mutable_extLst();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void pivotCacheRecords_element::clear()
    {    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void pivotCacheRecords_element::toXml(std::ostream& _outStream) const
    {    
    _outStream << "<main:pivotCacheRecords";
    
    _outStream << " " << "xmlns:main=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\"";
    _outStream << " " << "xmlns:s=\"http://schemas.openxmlformats.org/officeDocument/2006/sharedTypes\"";
    _outStream << " " << "xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\"";
    _outStream << " " << "xmlns:xdr=\"http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing\"";
    
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
    _outStream << ">";
    
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_r())
            {
                (*iter)->get_r().toXmlElem("main:r", "", _outStream);
            }
            else if ((*iter)->has_extLst())
            {
                (*iter)->get_extLst().toXmlElem("main:extLst", "", _outStream);
            }
        }
    }
    
    _outStream << "</main:pivotCacheRecords>";
    }

    const pivotCacheRecords_element& pivotCacheRecords_element::default_instance()
    {    
    if (!pivotCacheRecords_element::default_instance_)
    {
        pivotCacheRecords_element::default_instance_ = new pivotCacheRecords_element();
    }
    return *pivotCacheRecords_element::default_instance_;
    }

    bool pivotCacheRecords_element::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void pivotCacheRecords_element::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& pivotCacheRecords_element::get_count_attr() const
    {    
    return m_count_attr;
    }


    // pivotCacheRecords_element::ChildGroup_1
    pivotCacheRecords_element::ChildGroup_1::ChildGroup_1()
    :m_has_r(false),
    m_r(NULL),
    m_has_extLst(false),
    m_extLst(NULL)
    {
    }
    bool pivotCacheRecords_element::ChildGroup_1::has_r() const
    {    
    return m_has_r;
    }

    CT_Record* pivotCacheRecords_element::ChildGroup_1::mutable_r()
    {    
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_r = true;
    if (!m_r)
    {
        m_r = new CT_Record();
    }
    return m_r;
    }

    const CT_Record& pivotCacheRecords_element::ChildGroup_1::get_r() const
    {    
    if (m_r)
    {
        return *m_r;
    }
    return CT_Record::default_instance();
    }

    bool pivotCacheRecords_element::ChildGroup_1::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* pivotCacheRecords_element::ChildGroup_1::mutable_extLst()
    {    
    
    m_has_r = false;
    
    if (m_r)
    {
        delete m_r;
        m_r = NULL;
    }
    ;
    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& pivotCacheRecords_element::ChildGroup_1::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

pivotCacheRecords_element* pivotCacheRecords_element::default_instance_ = NULL;

    // pivotTableDefinition_element
    pivotTableDefinition_element::pivotTableDefinition_element()
    :m_has_location(false),
    m_location(NULL),
    m_has_pivotFields(false),
    m_pivotFields(NULL),
    m_has_rowFields(false),
    m_rowFields(NULL),
    m_has_rowItems(false),
    m_rowItems(NULL),
    m_has_colFields(false),
    m_colFields(NULL),
    m_has_colItems(false),
    m_colItems(NULL),
    m_has_pageFields(false),
    m_pageFields(NULL),
    m_has_dataFields(false),
    m_dataFields(NULL),
    m_has_formats(false),
    m_formats(NULL),
    m_has_conditionalFormats(false),
    m_conditionalFormats(NULL),
    m_has_chartFormats(false),
    m_chartFormats(NULL),
    m_has_pivotHierarchies(false),
    m_pivotHierarchies(NULL),
    m_has_pivotTableStyleInfo(false),
    m_pivotTableStyleInfo(NULL),
    m_has_filters(false),
    m_filters(NULL),
    m_has_rowHierarchiesUsage(false),
    m_rowHierarchiesUsage(NULL),
    m_has_colHierarchiesUsage(false),
    m_colHierarchiesUsage(NULL),
    m_has_extLst(false),
    m_extLst(NULL),
    m_has_name_attr(false),
    m_name_attr(NULL),
    m_has_cacheId_attr(false),
    m_cacheId_attr(0),
    m_has_dataOnRows_attr(false),
    m_dataOnRows_attr(false),
    m_has_dataPosition_attr(false),
    m_dataPosition_attr(0),
    m_has_autoFormatId_attr(false),
    m_autoFormatId_attr(0),
    m_has_applyNumberFormats_attr(false),
    m_applyNumberFormats_attr(false),
    m_has_applyBorderFormats_attr(false),
    m_applyBorderFormats_attr(false),
    m_has_applyFontFormats_attr(false),
    m_applyFontFormats_attr(false),
    m_has_applyPatternFormats_attr(false),
    m_applyPatternFormats_attr(false),
    m_has_applyAlignmentFormats_attr(false),
    m_applyAlignmentFormats_attr(false),
    m_has_applyWidthHeightFormats_attr(false),
    m_applyWidthHeightFormats_attr(false),
    m_has_dataCaption_attr(false),
    m_dataCaption_attr(NULL),
    m_has_grandTotalCaption_attr(false),
    m_grandTotalCaption_attr(NULL),
    m_has_errorCaption_attr(false),
    m_errorCaption_attr(NULL),
    m_has_showError_attr(false),
    m_showError_attr(false),
    m_has_missingCaption_attr(false),
    m_missingCaption_attr(NULL),
    m_has_showMissing_attr(false),
    m_showMissing_attr(false),
    m_has_pageStyle_attr(false),
    m_pageStyle_attr(NULL),
    m_has_pivotTableStyle_attr(false),
    m_pivotTableStyle_attr(NULL),
    m_has_vacatedStyle_attr(false),
    m_vacatedStyle_attr(NULL),
    m_has_tag_attr(false),
    m_tag_attr(NULL),
    m_has_updatedVersion_attr(false),
    m_updatedVersion_attr(0),
    m_has_minRefreshableVersion_attr(false),
    m_minRefreshableVersion_attr(0),
    m_has_asteriskTotals_attr(false),
    m_asteriskTotals_attr(false),
    m_has_showItems_attr(false),
    m_showItems_attr(false),
    m_has_editData_attr(false),
    m_editData_attr(false),
    m_has_disableFieldList_attr(false),
    m_disableFieldList_attr(false),
    m_has_showCalcMbrs_attr(false),
    m_showCalcMbrs_attr(false),
    m_has_visualTotals_attr(false),
    m_visualTotals_attr(false),
    m_has_showMultipleLabel_attr(false),
    m_showMultipleLabel_attr(false),
    m_has_showDataDropDown_attr(false),
    m_showDataDropDown_attr(false),
    m_has_showDrill_attr(false),
    m_showDrill_attr(false),
    m_has_printDrill_attr(false),
    m_printDrill_attr(false),
    m_has_showMemberPropertyTips_attr(false),
    m_showMemberPropertyTips_attr(false),
    m_has_showDataTips_attr(false),
    m_showDataTips_attr(false),
    m_has_enableWizard_attr(false),
    m_enableWizard_attr(false),
    m_has_enableDrill_attr(false),
    m_enableDrill_attr(false),
    m_has_enableFieldProperties_attr(false),
    m_enableFieldProperties_attr(false),
    m_has_preserveFormatting_attr(false),
    m_preserveFormatting_attr(false),
    m_has_useAutoFormatting_attr(false),
    m_useAutoFormatting_attr(false),
    m_has_pageWrap_attr(false),
    m_pageWrap_attr(0),
    m_has_pageOverThenDown_attr(false),
    m_pageOverThenDown_attr(false),
    m_has_subtotalHiddenItems_attr(false),
    m_subtotalHiddenItems_attr(false),
    m_has_rowGrandTotals_attr(false),
    m_rowGrandTotals_attr(false),
    m_has_colGrandTotals_attr(false),
    m_colGrandTotals_attr(false),
    m_has_fieldPrintTitles_attr(false),
    m_fieldPrintTitles_attr(false),
    m_has_itemPrintTitles_attr(false),
    m_itemPrintTitles_attr(false),
    m_has_mergeItem_attr(false),
    m_mergeItem_attr(false),
    m_has_showDropZones_attr(false),
    m_showDropZones_attr(false),
    m_has_createdVersion_attr(false),
    m_createdVersion_attr(0),
    m_has_indent_attr(false),
    m_indent_attr(0),
    m_has_showEmptyRow_attr(false),
    m_showEmptyRow_attr(false),
    m_has_showEmptyCol_attr(false),
    m_showEmptyCol_attr(false),
    m_has_showHeaders_attr(false),
    m_showHeaders_attr(false),
    m_has_compact_attr(false),
    m_compact_attr(false),
    m_has_outline_attr(false),
    m_outline_attr(false),
    m_has_outlineData_attr(false),
    m_outlineData_attr(false),
    m_has_compactData_attr(false),
    m_compactData_attr(false),
    m_has_published_attr(false),
    m_published_attr(false),
    m_has_gridDropZones_attr(false),
    m_gridDropZones_attr(false),
    m_has_immersive_attr(false),
    m_immersive_attr(false),
    m_has_multipleFieldFilters_attr(false),
    m_multipleFieldFilters_attr(false),
    m_has_chartFormat_attr(false),
    m_chartFormat_attr(0),
    m_has_rowHeaderCaption_attr(false),
    m_rowHeaderCaption_attr(NULL),
    m_has_colHeaderCaption_attr(false),
    m_colHeaderCaption_attr(NULL),
    m_has_fieldListSortAscending_attr(false),
    m_fieldListSortAscending_attr(false),
    m_has_mdxSubqueries_attr(false),
    m_mdxSubqueries_attr(false),
    m_has_customListSort_attr(false),
    m_customListSort_attr(false)
    {
    }
    pivotTableDefinition_element::~pivotTableDefinition_element()
{
    clear();    }
    bool pivotTableDefinition_element::has_location() const
    {    
    return m_has_location;
    }

    CT_Location* pivotTableDefinition_element::mutable_location()
    {    
    m_has_location = true;
    if (!m_location)
    {
        m_location = new CT_Location();
    }
    return m_location;
    }

    const CT_Location& pivotTableDefinition_element::get_location() const
    {    
    if (m_location)
    {
        return *m_location;
    }
    return CT_Location::default_instance();
    }

    bool pivotTableDefinition_element::has_pivotFields() const
    {    
    return m_has_pivotFields;
    }

    CT_PivotFields* pivotTableDefinition_element::mutable_pivotFields()
    {    
    m_has_pivotFields = true;
    if (!m_pivotFields)
    {
        m_pivotFields = new CT_PivotFields();
    }
    return m_pivotFields;
    }

    const CT_PivotFields& pivotTableDefinition_element::get_pivotFields() const
    {    
    if (m_pivotFields)
    {
        return *m_pivotFields;
    }
    return CT_PivotFields::default_instance();
    }

    bool pivotTableDefinition_element::has_rowFields() const
    {    
    return m_has_rowFields;
    }

    CT_RowFields* pivotTableDefinition_element::mutable_rowFields()
    {    
    m_has_rowFields = true;
    if (!m_rowFields)
    {
        m_rowFields = new CT_RowFields();
    }
    return m_rowFields;
    }

    const CT_RowFields& pivotTableDefinition_element::get_rowFields() const
    {    
    if (m_rowFields)
    {
        return *m_rowFields;
    }
    return CT_RowFields::default_instance();
    }

    bool pivotTableDefinition_element::has_rowItems() const
    {    
    return m_has_rowItems;
    }

    CT_rowItems* pivotTableDefinition_element::mutable_rowItems()
    {    
    m_has_rowItems = true;
    if (!m_rowItems)
    {
        m_rowItems = new CT_rowItems();
    }
    return m_rowItems;
    }

    const CT_rowItems& pivotTableDefinition_element::get_rowItems() const
    {    
    if (m_rowItems)
    {
        return *m_rowItems;
    }
    return CT_rowItems::default_instance();
    }

    bool pivotTableDefinition_element::has_colFields() const
    {    
    return m_has_colFields;
    }

    CT_ColFields* pivotTableDefinition_element::mutable_colFields()
    {    
    m_has_colFields = true;
    if (!m_colFields)
    {
        m_colFields = new CT_ColFields();
    }
    return m_colFields;
    }

    const CT_ColFields& pivotTableDefinition_element::get_colFields() const
    {    
    if (m_colFields)
    {
        return *m_colFields;
    }
    return CT_ColFields::default_instance();
    }

    bool pivotTableDefinition_element::has_colItems() const
    {    
    return m_has_colItems;
    }

    CT_colItems* pivotTableDefinition_element::mutable_colItems()
    {    
    m_has_colItems = true;
    if (!m_colItems)
    {
        m_colItems = new CT_colItems();
    }
    return m_colItems;
    }

    const CT_colItems& pivotTableDefinition_element::get_colItems() const
    {    
    if (m_colItems)
    {
        return *m_colItems;
    }
    return CT_colItems::default_instance();
    }

    bool pivotTableDefinition_element::has_pageFields() const
    {    
    return m_has_pageFields;
    }

    CT_PageFields* pivotTableDefinition_element::mutable_pageFields()
    {    
    m_has_pageFields = true;
    if (!m_pageFields)
    {
        m_pageFields = new CT_PageFields();
    }
    return m_pageFields;
    }

    const CT_PageFields& pivotTableDefinition_element::get_pageFields() const
    {    
    if (m_pageFields)
    {
        return *m_pageFields;
    }
    return CT_PageFields::default_instance();
    }

    bool pivotTableDefinition_element::has_dataFields() const
    {    
    return m_has_dataFields;
    }

    CT_DataFields* pivotTableDefinition_element::mutable_dataFields()
    {    
    m_has_dataFields = true;
    if (!m_dataFields)
    {
        m_dataFields = new CT_DataFields();
    }
    return m_dataFields;
    }

    const CT_DataFields& pivotTableDefinition_element::get_dataFields() const
    {    
    if (m_dataFields)
    {
        return *m_dataFields;
    }
    return CT_DataFields::default_instance();
    }

    bool pivotTableDefinition_element::has_formats() const
    {    
    return m_has_formats;
    }

    CT_Formats* pivotTableDefinition_element::mutable_formats()
    {    
    m_has_formats = true;
    if (!m_formats)
    {
        m_formats = new CT_Formats();
    }
    return m_formats;
    }

    const CT_Formats& pivotTableDefinition_element::get_formats() const
    {    
    if (m_formats)
    {
        return *m_formats;
    }
    return CT_Formats::default_instance();
    }

    bool pivotTableDefinition_element::has_conditionalFormats() const
    {    
    return m_has_conditionalFormats;
    }

    CT_ConditionalFormats* pivotTableDefinition_element::mutable_conditionalFormats()
    {    
    m_has_conditionalFormats = true;
    if (!m_conditionalFormats)
    {
        m_conditionalFormats = new CT_ConditionalFormats();
    }
    return m_conditionalFormats;
    }

    const CT_ConditionalFormats& pivotTableDefinition_element::get_conditionalFormats() const
    {    
    if (m_conditionalFormats)
    {
        return *m_conditionalFormats;
    }
    return CT_ConditionalFormats::default_instance();
    }

    bool pivotTableDefinition_element::has_chartFormats() const
    {    
    return m_has_chartFormats;
    }

    CT_ChartFormats* pivotTableDefinition_element::mutable_chartFormats()
    {    
    m_has_chartFormats = true;
    if (!m_chartFormats)
    {
        m_chartFormats = new CT_ChartFormats();
    }
    return m_chartFormats;
    }

    const CT_ChartFormats& pivotTableDefinition_element::get_chartFormats() const
    {    
    if (m_chartFormats)
    {
        return *m_chartFormats;
    }
    return CT_ChartFormats::default_instance();
    }

    bool pivotTableDefinition_element::has_pivotHierarchies() const
    {    
    return m_has_pivotHierarchies;
    }

    CT_PivotHierarchies* pivotTableDefinition_element::mutable_pivotHierarchies()
    {    
    m_has_pivotHierarchies = true;
    if (!m_pivotHierarchies)
    {
        m_pivotHierarchies = new CT_PivotHierarchies();
    }
    return m_pivotHierarchies;
    }

    const CT_PivotHierarchies& pivotTableDefinition_element::get_pivotHierarchies() const
    {    
    if (m_pivotHierarchies)
    {
        return *m_pivotHierarchies;
    }
    return CT_PivotHierarchies::default_instance();
    }

    bool pivotTableDefinition_element::has_pivotTableStyleInfo() const
    {    
    return m_has_pivotTableStyleInfo;
    }

    CT_PivotTableStyle* pivotTableDefinition_element::mutable_pivotTableStyleInfo()
    {    
    m_has_pivotTableStyleInfo = true;
    if (!m_pivotTableStyleInfo)
    {
        m_pivotTableStyleInfo = new CT_PivotTableStyle();
    }
    return m_pivotTableStyleInfo;
    }

    const CT_PivotTableStyle& pivotTableDefinition_element::get_pivotTableStyleInfo() const
    {    
    if (m_pivotTableStyleInfo)
    {
        return *m_pivotTableStyleInfo;
    }
    return CT_PivotTableStyle::default_instance();
    }

    bool pivotTableDefinition_element::has_filters() const
    {    
    return m_has_filters;
    }

    CT_PivotFilters* pivotTableDefinition_element::mutable_filters()
    {    
    m_has_filters = true;
    if (!m_filters)
    {
        m_filters = new CT_PivotFilters();
    }
    return m_filters;
    }

    const CT_PivotFilters& pivotTableDefinition_element::get_filters() const
    {    
    if (m_filters)
    {
        return *m_filters;
    }
    return CT_PivotFilters::default_instance();
    }

    bool pivotTableDefinition_element::has_rowHierarchiesUsage() const
    {    
    return m_has_rowHierarchiesUsage;
    }

    CT_RowHierarchiesUsage* pivotTableDefinition_element::mutable_rowHierarchiesUsage()
    {    
    m_has_rowHierarchiesUsage = true;
    if (!m_rowHierarchiesUsage)
    {
        m_rowHierarchiesUsage = new CT_RowHierarchiesUsage();
    }
    return m_rowHierarchiesUsage;
    }

    const CT_RowHierarchiesUsage& pivotTableDefinition_element::get_rowHierarchiesUsage() const
    {    
    if (m_rowHierarchiesUsage)
    {
        return *m_rowHierarchiesUsage;
    }
    return CT_RowHierarchiesUsage::default_instance();
    }

    bool pivotTableDefinition_element::has_colHierarchiesUsage() const
    {    
    return m_has_colHierarchiesUsage;
    }

    CT_ColHierarchiesUsage* pivotTableDefinition_element::mutable_colHierarchiesUsage()
    {    
    m_has_colHierarchiesUsage = true;
    if (!m_colHierarchiesUsage)
    {
        m_colHierarchiesUsage = new CT_ColHierarchiesUsage();
    }
    return m_colHierarchiesUsage;
    }

    const CT_ColHierarchiesUsage& pivotTableDefinition_element::get_colHierarchiesUsage() const
    {    
    if (m_colHierarchiesUsage)
    {
        return *m_colHierarchiesUsage;
    }
    return CT_ColHierarchiesUsage::default_instance();
    }

    bool pivotTableDefinition_element::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* pivotTableDefinition_element::mutable_extLst()
    {    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& pivotTableDefinition_element::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

    void pivotTableDefinition_element::clear()
    {    
    m_has_name_attr = false;
    
    if (m_name_attr)
    {
        delete m_name_attr;
        m_name_attr = NULL;
    }
    
    
    m_has_cacheId_attr = false;
    m_cacheId_attr = 0;
    
    m_has_dataOnRows_attr = false;
    m_dataOnRows_attr = false;
    
    m_has_dataPosition_attr = false;
    m_dataPosition_attr = 0;
    
    m_has_autoFormatId_attr = false;
    m_autoFormatId_attr = 0;
    
    m_has_applyNumberFormats_attr = false;
    m_applyNumberFormats_attr = false;
    
    m_has_applyBorderFormats_attr = false;
    m_applyBorderFormats_attr = false;
    
    m_has_applyFontFormats_attr = false;
    m_applyFontFormats_attr = false;
    
    m_has_applyPatternFormats_attr = false;
    m_applyPatternFormats_attr = false;
    
    m_has_applyAlignmentFormats_attr = false;
    m_applyAlignmentFormats_attr = false;
    
    m_has_applyWidthHeightFormats_attr = false;
    m_applyWidthHeightFormats_attr = false;
    
    m_has_dataCaption_attr = false;
    
    if (m_dataCaption_attr)
    {
        delete m_dataCaption_attr;
        m_dataCaption_attr = NULL;
    }
    
    
    m_has_grandTotalCaption_attr = false;
    
    if (m_grandTotalCaption_attr)
    {
        delete m_grandTotalCaption_attr;
        m_grandTotalCaption_attr = NULL;
    }
    
    
    m_has_errorCaption_attr = false;
    
    if (m_errorCaption_attr)
    {
        delete m_errorCaption_attr;
        m_errorCaption_attr = NULL;
    }
    
    
    m_has_showError_attr = false;
    m_showError_attr = false;
    
    m_has_missingCaption_attr = false;
    
    if (m_missingCaption_attr)
    {
        delete m_missingCaption_attr;
        m_missingCaption_attr = NULL;
    }
    
    
    m_has_showMissing_attr = false;
    m_showMissing_attr = false;
    
    m_has_pageStyle_attr = false;
    
    if (m_pageStyle_attr)
    {
        delete m_pageStyle_attr;
        m_pageStyle_attr = NULL;
    }
    
    
    m_has_pivotTableStyle_attr = false;
    
    if (m_pivotTableStyle_attr)
    {
        delete m_pivotTableStyle_attr;
        m_pivotTableStyle_attr = NULL;
    }
    
    
    m_has_vacatedStyle_attr = false;
    
    if (m_vacatedStyle_attr)
    {
        delete m_vacatedStyle_attr;
        m_vacatedStyle_attr = NULL;
    }
    
    
    m_has_tag_attr = false;
    
    if (m_tag_attr)
    {
        delete m_tag_attr;
        m_tag_attr = NULL;
    }
    
    
    m_has_updatedVersion_attr = false;
    m_updatedVersion_attr = 0;
    
    m_has_minRefreshableVersion_attr = false;
    m_minRefreshableVersion_attr = 0;
    
    m_has_asteriskTotals_attr = false;
    m_asteriskTotals_attr = false;
    
    m_has_showItems_attr = false;
    m_showItems_attr = false;
    
    m_has_editData_attr = false;
    m_editData_attr = false;
    
    m_has_disableFieldList_attr = false;
    m_disableFieldList_attr = false;
    
    m_has_showCalcMbrs_attr = false;
    m_showCalcMbrs_attr = false;
    
    m_has_visualTotals_attr = false;
    m_visualTotals_attr = false;
    
    m_has_showMultipleLabel_attr = false;
    m_showMultipleLabel_attr = false;
    
    m_has_showDataDropDown_attr = false;
    m_showDataDropDown_attr = false;
    
    m_has_showDrill_attr = false;
    m_showDrill_attr = false;
    
    m_has_printDrill_attr = false;
    m_printDrill_attr = false;
    
    m_has_showMemberPropertyTips_attr = false;
    m_showMemberPropertyTips_attr = false;
    
    m_has_showDataTips_attr = false;
    m_showDataTips_attr = false;
    
    m_has_enableWizard_attr = false;
    m_enableWizard_attr = false;
    
    m_has_enableDrill_attr = false;
    m_enableDrill_attr = false;
    
    m_has_enableFieldProperties_attr = false;
    m_enableFieldProperties_attr = false;
    
    m_has_preserveFormatting_attr = false;
    m_preserveFormatting_attr = false;
    
    m_has_useAutoFormatting_attr = false;
    m_useAutoFormatting_attr = false;
    
    m_has_pageWrap_attr = false;
    m_pageWrap_attr = 0;
    
    m_has_pageOverThenDown_attr = false;
    m_pageOverThenDown_attr = false;
    
    m_has_subtotalHiddenItems_attr = false;
    m_subtotalHiddenItems_attr = false;
    
    m_has_rowGrandTotals_attr = false;
    m_rowGrandTotals_attr = false;
    
    m_has_colGrandTotals_attr = false;
    m_colGrandTotals_attr = false;
    
    m_has_fieldPrintTitles_attr = false;
    m_fieldPrintTitles_attr = false;
    
    m_has_itemPrintTitles_attr = false;
    m_itemPrintTitles_attr = false;
    
    m_has_mergeItem_attr = false;
    m_mergeItem_attr = false;
    
    m_has_showDropZones_attr = false;
    m_showDropZones_attr = false;
    
    m_has_createdVersion_attr = false;
    m_createdVersion_attr = 0;
    
    m_has_indent_attr = false;
    m_indent_attr = 0;
    
    m_has_showEmptyRow_attr = false;
    m_showEmptyRow_attr = false;
    
    m_has_showEmptyCol_attr = false;
    m_showEmptyCol_attr = false;
    
    m_has_showHeaders_attr = false;
    m_showHeaders_attr = false;
    
    m_has_compact_attr = false;
    m_compact_attr = false;
    
    m_has_outline_attr = false;
    m_outline_attr = false;
    
    m_has_outlineData_attr = false;
    m_outlineData_attr = false;
    
    m_has_compactData_attr = false;
    m_compactData_attr = false;
    
    m_has_published_attr = false;
    m_published_attr = false;
    
    m_has_gridDropZones_attr = false;
    m_gridDropZones_attr = false;
    
    m_has_immersive_attr = false;
    m_immersive_attr = false;
    
    m_has_multipleFieldFilters_attr = false;
    m_multipleFieldFilters_attr = false;
    
    m_has_chartFormat_attr = false;
    m_chartFormat_attr = 0;
    
    m_has_rowHeaderCaption_attr = false;
    
    if (m_rowHeaderCaption_attr)
    {
        delete m_rowHeaderCaption_attr;
        m_rowHeaderCaption_attr = NULL;
    }
    
    
    m_has_colHeaderCaption_attr = false;
    
    if (m_colHeaderCaption_attr)
    {
        delete m_colHeaderCaption_attr;
        m_colHeaderCaption_attr = NULL;
    }
    
    
    m_has_fieldListSortAscending_attr = false;
    m_fieldListSortAscending_attr = false;
    
    m_has_mdxSubqueries_attr = false;
    m_mdxSubqueries_attr = false;
    
    m_has_customListSort_attr = false;
    m_customListSort_attr = false;
    }

    void pivotTableDefinition_element::toXml(std::ostream& _outStream) const
    {    
    _outStream << "<main:pivotTableDefinition";
    
    _outStream << " " << "xmlns:main=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\"";
    _outStream << " " << "xmlns:s=\"http://schemas.openxmlformats.org/officeDocument/2006/sharedTypes\"";
    _outStream << " " << "xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\"";
    _outStream << " " << "xmlns:xdr=\"http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing\"";
    
    if (m_has_name_attr)
    {
        m_name_attr->toXmlAttr("name", _outStream);
    }
    
    
    if (m_has_cacheId_attr)
    {
        _outStream << " " << "cacheId" << "=\"" << m_cacheId_attr << "\"";
    }
    
    
    if (m_has_dataOnRows_attr)
    {
        _outStream << " " << "dataOnRows" << "=\"" << XSD::XMLBooleanStr(m_dataOnRows_attr) << "\"";
    }
    
    
    if (m_has_dataPosition_attr)
    {
        _outStream << " " << "dataPosition" << "=\"" << m_dataPosition_attr << "\"";
    }
    
    
    if (m_has_autoFormatId_attr)
    {
        _outStream << " " << "autoFormatId" << "=\"" << m_autoFormatId_attr << "\"";
    }
    
    
    if (m_has_applyNumberFormats_attr)
    {
        _outStream << " " << "applyNumberFormats" << "=\"" << XSD::XMLBooleanStr(m_applyNumberFormats_attr) << "\"";
    }
    
    
    if (m_has_applyBorderFormats_attr)
    {
        _outStream << " " << "applyBorderFormats" << "=\"" << XSD::XMLBooleanStr(m_applyBorderFormats_attr) << "\"";
    }
    
    
    if (m_has_applyFontFormats_attr)
    {
        _outStream << " " << "applyFontFormats" << "=\"" << XSD::XMLBooleanStr(m_applyFontFormats_attr) << "\"";
    }
    
    
    if (m_has_applyPatternFormats_attr)
    {
        _outStream << " " << "applyPatternFormats" << "=\"" << XSD::XMLBooleanStr(m_applyPatternFormats_attr) << "\"";
    }
    
    
    if (m_has_applyAlignmentFormats_attr)
    {
        _outStream << " " << "applyAlignmentFormats" << "=\"" << XSD::XMLBooleanStr(m_applyAlignmentFormats_attr) << "\"";
    }
    
    
    if (m_has_applyWidthHeightFormats_attr)
    {
        _outStream << " " << "applyWidthHeightFormats" << "=\"" << XSD::XMLBooleanStr(m_applyWidthHeightFormats_attr) << "\"";
    }
    
    
    if (m_has_dataCaption_attr)
    {
        m_dataCaption_attr->toXmlAttr("dataCaption", _outStream);
    }
    
    
    if (m_has_grandTotalCaption_attr)
    {
        m_grandTotalCaption_attr->toXmlAttr("grandTotalCaption", _outStream);
    }
    
    
    if (m_has_errorCaption_attr)
    {
        m_errorCaption_attr->toXmlAttr("errorCaption", _outStream);
    }
    
    
    if (m_has_showError_attr)
    {
        _outStream << " " << "showError" << "=\"" << XSD::XMLBooleanStr(m_showError_attr) << "\"";
    }
    
    
    if (m_has_missingCaption_attr)
    {
        m_missingCaption_attr->toXmlAttr("missingCaption", _outStream);
    }
    
    
    if (m_has_showMissing_attr)
    {
        _outStream << " " << "showMissing" << "=\"" << XSD::XMLBooleanStr(m_showMissing_attr) << "\"";
    }
    
    
    if (m_has_pageStyle_attr)
    {
        m_pageStyle_attr->toXmlAttr("pageStyle", _outStream);
    }
    
    
    if (m_has_pivotTableStyle_attr)
    {
        m_pivotTableStyle_attr->toXmlAttr("pivotTableStyle", _outStream);
    }
    
    
    if (m_has_vacatedStyle_attr)
    {
        m_vacatedStyle_attr->toXmlAttr("vacatedStyle", _outStream);
    }
    
    
    if (m_has_tag_attr)
    {
        m_tag_attr->toXmlAttr("tag", _outStream);
    }
    
    
    if (m_has_updatedVersion_attr)
    {
        _outStream << " " << "updatedVersion" << "=\"" << m_updatedVersion_attr << "\"";
    }
    
    
    if (m_has_minRefreshableVersion_attr)
    {
        _outStream << " " << "minRefreshableVersion" << "=\"" << m_minRefreshableVersion_attr << "\"";
    }
    
    
    if (m_has_asteriskTotals_attr)
    {
        _outStream << " " << "asteriskTotals" << "=\"" << XSD::XMLBooleanStr(m_asteriskTotals_attr) << "\"";
    }
    
    
    if (m_has_showItems_attr)
    {
        _outStream << " " << "showItems" << "=\"" << XSD::XMLBooleanStr(m_showItems_attr) << "\"";
    }
    
    
    if (m_has_editData_attr)
    {
        _outStream << " " << "editData" << "=\"" << XSD::XMLBooleanStr(m_editData_attr) << "\"";
    }
    
    
    if (m_has_disableFieldList_attr)
    {
        _outStream << " " << "disableFieldList" << "=\"" << XSD::XMLBooleanStr(m_disableFieldList_attr) << "\"";
    }
    
    
    if (m_has_showCalcMbrs_attr)
    {
        _outStream << " " << "showCalcMbrs" << "=\"" << XSD::XMLBooleanStr(m_showCalcMbrs_attr) << "\"";
    }
    
    
    if (m_has_visualTotals_attr)
    {
        _outStream << " " << "visualTotals" << "=\"" << XSD::XMLBooleanStr(m_visualTotals_attr) << "\"";
    }
    
    
    if (m_has_showMultipleLabel_attr)
    {
        _outStream << " " << "showMultipleLabel" << "=\"" << XSD::XMLBooleanStr(m_showMultipleLabel_attr) << "\"";
    }
    
    
    if (m_has_showDataDropDown_attr)
    {
        _outStream << " " << "showDataDropDown" << "=\"" << XSD::XMLBooleanStr(m_showDataDropDown_attr) << "\"";
    }
    
    
    if (m_has_showDrill_attr)
    {
        _outStream << " " << "showDrill" << "=\"" << XSD::XMLBooleanStr(m_showDrill_attr) << "\"";
    }
    
    
    if (m_has_printDrill_attr)
    {
        _outStream << " " << "printDrill" << "=\"" << XSD::XMLBooleanStr(m_printDrill_attr) << "\"";
    }
    
    
    if (m_has_showMemberPropertyTips_attr)
    {
        _outStream << " " << "showMemberPropertyTips" << "=\"" << XSD::XMLBooleanStr(m_showMemberPropertyTips_attr) << "\"";
    }
    
    
    if (m_has_showDataTips_attr)
    {
        _outStream << " " << "showDataTips" << "=\"" << XSD::XMLBooleanStr(m_showDataTips_attr) << "\"";
    }
    
    
    if (m_has_enableWizard_attr)
    {
        _outStream << " " << "enableWizard" << "=\"" << XSD::XMLBooleanStr(m_enableWizard_attr) << "\"";
    }
    
    
    if (m_has_enableDrill_attr)
    {
        _outStream << " " << "enableDrill" << "=\"" << XSD::XMLBooleanStr(m_enableDrill_attr) << "\"";
    }
    
    
    if (m_has_enableFieldProperties_attr)
    {
        _outStream << " " << "enableFieldProperties" << "=\"" << XSD::XMLBooleanStr(m_enableFieldProperties_attr) << "\"";
    }
    
    
    if (m_has_preserveFormatting_attr)
    {
        _outStream << " " << "preserveFormatting" << "=\"" << XSD::XMLBooleanStr(m_preserveFormatting_attr) << "\"";
    }
    
    
    if (m_has_useAutoFormatting_attr)
    {
        _outStream << " " << "useAutoFormatting" << "=\"" << XSD::XMLBooleanStr(m_useAutoFormatting_attr) << "\"";
    }
    
    
    if (m_has_pageWrap_attr)
    {
        _outStream << " " << "pageWrap" << "=\"" << m_pageWrap_attr << "\"";
    }
    
    
    if (m_has_pageOverThenDown_attr)
    {
        _outStream << " " << "pageOverThenDown" << "=\"" << XSD::XMLBooleanStr(m_pageOverThenDown_attr) << "\"";
    }
    
    
    if (m_has_subtotalHiddenItems_attr)
    {
        _outStream << " " << "subtotalHiddenItems" << "=\"" << XSD::XMLBooleanStr(m_subtotalHiddenItems_attr) << "\"";
    }
    
    
    if (m_has_rowGrandTotals_attr)
    {
        _outStream << " " << "rowGrandTotals" << "=\"" << XSD::XMLBooleanStr(m_rowGrandTotals_attr) << "\"";
    }
    
    
    if (m_has_colGrandTotals_attr)
    {
        _outStream << " " << "colGrandTotals" << "=\"" << XSD::XMLBooleanStr(m_colGrandTotals_attr) << "\"";
    }
    
    
    if (m_has_fieldPrintTitles_attr)
    {
        _outStream << " " << "fieldPrintTitles" << "=\"" << XSD::XMLBooleanStr(m_fieldPrintTitles_attr) << "\"";
    }
    
    
    if (m_has_itemPrintTitles_attr)
    {
        _outStream << " " << "itemPrintTitles" << "=\"" << XSD::XMLBooleanStr(m_itemPrintTitles_attr) << "\"";
    }
    
    
    if (m_has_mergeItem_attr)
    {
        _outStream << " " << "mergeItem" << "=\"" << XSD::XMLBooleanStr(m_mergeItem_attr) << "\"";
    }
    
    
    if (m_has_showDropZones_attr)
    {
        _outStream << " " << "showDropZones" << "=\"" << XSD::XMLBooleanStr(m_showDropZones_attr) << "\"";
    }
    
    
    if (m_has_createdVersion_attr)
    {
        _outStream << " " << "createdVersion" << "=\"" << m_createdVersion_attr << "\"";
    }
    
    
    if (m_has_indent_attr)
    {
        _outStream << " " << "indent" << "=\"" << m_indent_attr << "\"";
    }
    
    
    if (m_has_showEmptyRow_attr)
    {
        _outStream << " " << "showEmptyRow" << "=\"" << XSD::XMLBooleanStr(m_showEmptyRow_attr) << "\"";
    }
    
    
    if (m_has_showEmptyCol_attr)
    {
        _outStream << " " << "showEmptyCol" << "=\"" << XSD::XMLBooleanStr(m_showEmptyCol_attr) << "\"";
    }
    
    
    if (m_has_showHeaders_attr)
    {
        _outStream << " " << "showHeaders" << "=\"" << XSD::XMLBooleanStr(m_showHeaders_attr) << "\"";
    }
    
    
    if (m_has_compact_attr)
    {
        _outStream << " " << "compact" << "=\"" << XSD::XMLBooleanStr(m_compact_attr) << "\"";
    }
    
    
    if (m_has_outline_attr)
    {
        _outStream << " " << "outline" << "=\"" << XSD::XMLBooleanStr(m_outline_attr) << "\"";
    }
    
    
    if (m_has_outlineData_attr)
    {
        _outStream << " " << "outlineData" << "=\"" << XSD::XMLBooleanStr(m_outlineData_attr) << "\"";
    }
    
    
    if (m_has_compactData_attr)
    {
        _outStream << " " << "compactData" << "=\"" << XSD::XMLBooleanStr(m_compactData_attr) << "\"";
    }
    
    
    if (m_has_published_attr)
    {
        _outStream << " " << "published" << "=\"" << XSD::XMLBooleanStr(m_published_attr) << "\"";
    }
    
    
    if (m_has_gridDropZones_attr)
    {
        _outStream << " " << "gridDropZones" << "=\"" << XSD::XMLBooleanStr(m_gridDropZones_attr) << "\"";
    }
    
    
    if (m_has_immersive_attr)
    {
        _outStream << " " << "immersive" << "=\"" << XSD::XMLBooleanStr(m_immersive_attr) << "\"";
    }
    
    
    if (m_has_multipleFieldFilters_attr)
    {
        _outStream << " " << "multipleFieldFilters" << "=\"" << XSD::XMLBooleanStr(m_multipleFieldFilters_attr) << "\"";
    }
    
    
    if (m_has_chartFormat_attr)
    {
        _outStream << " " << "chartFormat" << "=\"" << m_chartFormat_attr << "\"";
    }
    
    
    if (m_has_rowHeaderCaption_attr)
    {
        m_rowHeaderCaption_attr->toXmlAttr("rowHeaderCaption", _outStream);
    }
    
    
    if (m_has_colHeaderCaption_attr)
    {
        m_colHeaderCaption_attr->toXmlAttr("colHeaderCaption", _outStream);
    }
    
    
    if (m_has_fieldListSortAscending_attr)
    {
        _outStream << " " << "fieldListSortAscending" << "=\"" << XSD::XMLBooleanStr(m_fieldListSortAscending_attr) << "\"";
    }
    
    
    if (m_has_mdxSubqueries_attr)
    {
        _outStream << " " << "mdxSubqueries" << "=\"" << XSD::XMLBooleanStr(m_mdxSubqueries_attr) << "\"";
    }
    
    
    if (m_has_customListSort_attr)
    {
        _outStream << " " << "customListSort" << "=\"" << XSD::XMLBooleanStr(m_customListSort_attr) << "\"";
    }
    
    _outStream << ">";
    
    if (m_has_location)
    {
        m_location->toXmlElem("main:location", "", _outStream);;
    }
    
    if (m_has_pivotFields)
    {
        m_pivotFields->toXmlElem("main:pivotFields", "", _outStream);;
    }
    
    if (m_has_rowFields)
    {
        m_rowFields->toXmlElem("main:rowFields", "", _outStream);;
    }
    
    if (m_has_rowItems)
    {
        m_rowItems->toXmlElem("main:rowItems", "", _outStream);;
    }
    
    if (m_has_colFields)
    {
        m_colFields->toXmlElem("main:colFields", "", _outStream);;
    }
    
    if (m_has_colItems)
    {
        m_colItems->toXmlElem("main:colItems", "", _outStream);;
    }
    
    if (m_has_pageFields)
    {
        m_pageFields->toXmlElem("main:pageFields", "", _outStream);;
    }
    
    if (m_has_dataFields)
    {
        m_dataFields->toXmlElem("main:dataFields", "", _outStream);;
    }
    
    if (m_has_formats)
    {
        m_formats->toXmlElem("main:formats", "", _outStream);;
    }
    
    if (m_has_conditionalFormats)
    {
        m_conditionalFormats->toXmlElem("main:conditionalFormats", "", _outStream);;
    }
    
    if (m_has_chartFormats)
    {
        m_chartFormats->toXmlElem("main:chartFormats", "", _outStream);;
    }
    
    if (m_has_pivotHierarchies)
    {
        m_pivotHierarchies->toXmlElem("main:pivotHierarchies", "", _outStream);;
    }
    
    if (m_has_pivotTableStyleInfo)
    {
        m_pivotTableStyleInfo->toXmlElem("main:pivotTableStyleInfo", "", _outStream);;
    }
    
    if (m_has_filters)
    {
        m_filters->toXmlElem("main:filters", "", _outStream);;
    }
    
    if (m_has_rowHierarchiesUsage)
    {
        m_rowHierarchiesUsage->toXmlElem("main:rowHierarchiesUsage", "", _outStream);;
    }
    
    if (m_has_colHierarchiesUsage)
    {
        m_colHierarchiesUsage->toXmlElem("main:colHierarchiesUsage", "", _outStream);;
    }
    
    if (m_has_extLst)
    {
        m_extLst->toXmlElem("main:extLst", "", _outStream);;
    }
    
    _outStream << "</main:pivotTableDefinition>";
    }

    const pivotTableDefinition_element& pivotTableDefinition_element::default_instance()
    {    
    if (!pivotTableDefinition_element::default_instance_)
    {
        pivotTableDefinition_element::default_instance_ = new pivotTableDefinition_element();
    }
    return *pivotTableDefinition_element::default_instance_;
    }

    bool pivotTableDefinition_element::has_name_attr() const
    {    
    return m_has_name_attr;
    }

    void pivotTableDefinition_element::set_name_attr(const ns_s::ST_Xstring& _name_attr)
    {    
    m_has_name_attr = true;
    m_name_attr = new ns_s::ST_Xstring(_name_attr);
    }

    const ns_s::ST_Xstring& pivotTableDefinition_element::get_name_attr() const
    {    
    if (m_name_attr)
    {
        return *m_name_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool pivotTableDefinition_element::has_cacheId_attr() const
    {    
    return m_has_cacheId_attr;
    }

    void pivotTableDefinition_element::set_cacheId_attr(const XSD::unsignedInt_& _cacheId_attr)
    {    
    m_has_cacheId_attr = true;
    m_cacheId_attr = _cacheId_attr;
    }

    const XSD::unsignedInt_& pivotTableDefinition_element::get_cacheId_attr() const
    {    
    return m_cacheId_attr;
    }

    bool pivotTableDefinition_element::has_dataOnRows_attr() const
    {    
    return m_has_dataOnRows_attr;
    }

    void pivotTableDefinition_element::set_dataOnRows_attr(const XSD::boolean_& _dataOnRows_attr)
    {    
    m_has_dataOnRows_attr = true;
    m_dataOnRows_attr = _dataOnRows_attr;
    }

    const XSD::boolean_& pivotTableDefinition_element::get_dataOnRows_attr() const
    {    
    return m_dataOnRows_attr;
    }

    bool pivotTableDefinition_element::has_dataPosition_attr() const
    {    
    return m_has_dataPosition_attr;
    }

    void pivotTableDefinition_element::set_dataPosition_attr(const XSD::unsignedInt_& _dataPosition_attr)
    {    
    m_has_dataPosition_attr = true;
    m_dataPosition_attr = _dataPosition_attr;
    }

    const XSD::unsignedInt_& pivotTableDefinition_element::get_dataPosition_attr() const
    {    
    return m_dataPosition_attr;
    }

    bool pivotTableDefinition_element::has_autoFormatId_attr() const
    {    
    return m_has_autoFormatId_attr;
    }

    void pivotTableDefinition_element::set_autoFormatId_attr(const XSD::unsignedInt_& _autoFormatId_attr)
    {    
    m_has_autoFormatId_attr = true;
    m_autoFormatId_attr = _autoFormatId_attr;
    }

    const XSD::unsignedInt_& pivotTableDefinition_element::get_autoFormatId_attr() const
    {    
    return m_autoFormatId_attr;
    }

    bool pivotTableDefinition_element::has_applyNumberFormats_attr() const
    {    
    return m_has_applyNumberFormats_attr;
    }

    void pivotTableDefinition_element::set_applyNumberFormats_attr(const XSD::boolean_& _applyNumberFormats_attr)
    {    
    m_has_applyNumberFormats_attr = true;
    m_applyNumberFormats_attr = _applyNumberFormats_attr;
    }

    const XSD::boolean_& pivotTableDefinition_element::get_applyNumberFormats_attr() const
    {    
    return m_applyNumberFormats_attr;
    }

    bool pivotTableDefinition_element::has_applyBorderFormats_attr() const
    {    
    return m_has_applyBorderFormats_attr;
    }

    void pivotTableDefinition_element::set_applyBorderFormats_attr(const XSD::boolean_& _applyBorderFormats_attr)
    {    
    m_has_applyBorderFormats_attr = true;
    m_applyBorderFormats_attr = _applyBorderFormats_attr;
    }

    const XSD::boolean_& pivotTableDefinition_element::get_applyBorderFormats_attr() const
    {    
    return m_applyBorderFormats_attr;
    }

    bool pivotTableDefinition_element::has_applyFontFormats_attr() const
    {    
    return m_has_applyFontFormats_attr;
    }

    void pivotTableDefinition_element::set_applyFontFormats_attr(const XSD::boolean_& _applyFontFormats_attr)
    {    
    m_has_applyFontFormats_attr = true;
    m_applyFontFormats_attr = _applyFontFormats_attr;
    }

    const XSD::boolean_& pivotTableDefinition_element::get_applyFontFormats_attr() const
    {    
    return m_applyFontFormats_attr;
    }

    bool pivotTableDefinition_element::has_applyPatternFormats_attr() const
    {    
    return m_has_applyPatternFormats_attr;
    }

    void pivotTableDefinition_element::set_applyPatternFormats_attr(const XSD::boolean_& _applyPatternFormats_attr)
    {    
    m_has_applyPatternFormats_attr = true;
    m_applyPatternFormats_attr = _applyPatternFormats_attr;
    }

    const XSD::boolean_& pivotTableDefinition_element::get_applyPatternFormats_attr() const
    {    
    return m_applyPatternFormats_attr;
    }

    bool pivotTableDefinition_element::has_applyAlignmentFormats_attr() const
    {    
    return m_has_applyAlignmentFormats_attr;
    }

    void pivotTableDefinition_element::set_applyAlignmentFormats_attr(const XSD::boolean_& _applyAlignmentFormats_attr)
    {    
    m_has_applyAlignmentFormats_attr = true;
    m_applyAlignmentFormats_attr = _applyAlignmentFormats_attr;
    }

    const XSD::boolean_& pivotTableDefinition_element::get_applyAlignmentFormats_attr() const
    {    
    return m_applyAlignmentFormats_attr;
    }

    bool pivotTableDefinition_element::has_applyWidthHeightFormats_attr() const
    {    
    return m_has_applyWidthHeightFormats_attr;
    }

    void pivotTableDefinition_element::set_applyWidthHeightFormats_attr(const XSD::boolean_& _applyWidthHeightFormats_attr)
    {    
    m_has_applyWidthHeightFormats_attr = true;
    m_applyWidthHeightFormats_attr = _applyWidthHeightFormats_attr;
    }

    const XSD::boolean_& pivotTableDefinition_element::get_applyWidthHeightFormats_attr() const
    {    
    return m_applyWidthHeightFormats_attr;
    }

    bool pivotTableDefinition_element::has_dataCaption_attr() const
    {    
    return m_has_dataCaption_attr;
    }

    void pivotTableDefinition_element::set_dataCaption_attr(const ns_s::ST_Xstring& _dataCaption_attr)
    {    
    m_has_dataCaption_attr = true;
    m_dataCaption_attr = new ns_s::ST_Xstring(_dataCaption_attr);
    }

    const ns_s::ST_Xstring& pivotTableDefinition_element::get_dataCaption_attr() const
    {    
    if (m_dataCaption_attr)
    {
        return *m_dataCaption_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool pivotTableDefinition_element::has_grandTotalCaption_attr() const
    {    
    return m_has_grandTotalCaption_attr;
    }

    void pivotTableDefinition_element::set_grandTotalCaption_attr(const ns_s::ST_Xstring& _grandTotalCaption_attr)
    {    
    m_has_grandTotalCaption_attr = true;
    m_grandTotalCaption_attr = new ns_s::ST_Xstring(_grandTotalCaption_attr);
    }

    const ns_s::ST_Xstring& pivotTableDefinition_element::get_grandTotalCaption_attr() const
    {    
    if (m_grandTotalCaption_attr)
    {
        return *m_grandTotalCaption_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool pivotTableDefinition_element::has_errorCaption_attr() const
    {    
    return m_has_errorCaption_attr;
    }

    void pivotTableDefinition_element::set_errorCaption_attr(const ns_s::ST_Xstring& _errorCaption_attr)
    {    
    m_has_errorCaption_attr = true;
    m_errorCaption_attr = new ns_s::ST_Xstring(_errorCaption_attr);
    }

    const ns_s::ST_Xstring& pivotTableDefinition_element::get_errorCaption_attr() const
    {    
    if (m_errorCaption_attr)
    {
        return *m_errorCaption_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool pivotTableDefinition_element::has_showError_attr() const
    {    
    return m_has_showError_attr;
    }

    void pivotTableDefinition_element::set_showError_attr(const XSD::boolean_& _showError_attr)
    {    
    m_has_showError_attr = true;
    m_showError_attr = _showError_attr;
    }

    const XSD::boolean_& pivotTableDefinition_element::get_showError_attr() const
    {    
    return m_showError_attr;
    }

    bool pivotTableDefinition_element::has_missingCaption_attr() const
    {    
    return m_has_missingCaption_attr;
    }

    void pivotTableDefinition_element::set_missingCaption_attr(const ns_s::ST_Xstring& _missingCaption_attr)
    {    
    m_has_missingCaption_attr = true;
    m_missingCaption_attr = new ns_s::ST_Xstring(_missingCaption_attr);
    }

    const ns_s::ST_Xstring& pivotTableDefinition_element::get_missingCaption_attr() const
    {    
    if (m_missingCaption_attr)
    {
        return *m_missingCaption_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool pivotTableDefinition_element::has_showMissing_attr() const
    {    
    return m_has_showMissing_attr;
    }

    void pivotTableDefinition_element::set_showMissing_attr(const XSD::boolean_& _showMissing_attr)
    {    
    m_has_showMissing_attr = true;
    m_showMissing_attr = _showMissing_attr;
    }

    const XSD::boolean_& pivotTableDefinition_element::get_showMissing_attr() const
    {    
    return m_showMissing_attr;
    }

    bool pivotTableDefinition_element::has_pageStyle_attr() const
    {    
    return m_has_pageStyle_attr;
    }

    void pivotTableDefinition_element::set_pageStyle_attr(const ns_s::ST_Xstring& _pageStyle_attr)
    {    
    m_has_pageStyle_attr = true;
    m_pageStyle_attr = new ns_s::ST_Xstring(_pageStyle_attr);
    }

    const ns_s::ST_Xstring& pivotTableDefinition_element::get_pageStyle_attr() const
    {    
    if (m_pageStyle_attr)
    {
        return *m_pageStyle_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool pivotTableDefinition_element::has_pivotTableStyle_attr() const
    {    
    return m_has_pivotTableStyle_attr;
    }

    void pivotTableDefinition_element::set_pivotTableStyle_attr(const ns_s::ST_Xstring& _pivotTableStyle_attr)
    {    
    m_has_pivotTableStyle_attr = true;
    m_pivotTableStyle_attr = new ns_s::ST_Xstring(_pivotTableStyle_attr);
    }

    const ns_s::ST_Xstring& pivotTableDefinition_element::get_pivotTableStyle_attr() const
    {    
    if (m_pivotTableStyle_attr)
    {
        return *m_pivotTableStyle_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool pivotTableDefinition_element::has_vacatedStyle_attr() const
    {    
    return m_has_vacatedStyle_attr;
    }

    void pivotTableDefinition_element::set_vacatedStyle_attr(const ns_s::ST_Xstring& _vacatedStyle_attr)
    {    
    m_has_vacatedStyle_attr = true;
    m_vacatedStyle_attr = new ns_s::ST_Xstring(_vacatedStyle_attr);
    }

    const ns_s::ST_Xstring& pivotTableDefinition_element::get_vacatedStyle_attr() const
    {    
    if (m_vacatedStyle_attr)
    {
        return *m_vacatedStyle_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool pivotTableDefinition_element::has_tag_attr() const
    {    
    return m_has_tag_attr;
    }

    void pivotTableDefinition_element::set_tag_attr(const ns_s::ST_Xstring& _tag_attr)
    {    
    m_has_tag_attr = true;
    m_tag_attr = new ns_s::ST_Xstring(_tag_attr);
    }

    const ns_s::ST_Xstring& pivotTableDefinition_element::get_tag_attr() const
    {    
    if (m_tag_attr)
    {
        return *m_tag_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool pivotTableDefinition_element::has_updatedVersion_attr() const
    {    
    return m_has_updatedVersion_attr;
    }

    void pivotTableDefinition_element::set_updatedVersion_attr(const XSD::unsignedByte_& _updatedVersion_attr)
    {    
    m_has_updatedVersion_attr = true;
    m_updatedVersion_attr = _updatedVersion_attr;
    }

    const XSD::unsignedByte_& pivotTableDefinition_element::get_updatedVersion_attr() const
    {    
    return m_updatedVersion_attr;
    }

    bool pivotTableDefinition_element::has_minRefreshableVersion_attr() const
    {    
    return m_has_minRefreshableVersion_attr;
    }

    void pivotTableDefinition_element::set_minRefreshableVersion_attr(const XSD::unsignedByte_& _minRefreshableVersion_attr)
    {    
    m_has_minRefreshableVersion_attr = true;
    m_minRefreshableVersion_attr = _minRefreshableVersion_attr;
    }

    const XSD::unsignedByte_& pivotTableDefinition_element::get_minRefreshableVersion_attr() const
    {    
    return m_minRefreshableVersion_attr;
    }

    bool pivotTableDefinition_element::has_asteriskTotals_attr() const
    {    
    return m_has_asteriskTotals_attr;
    }

    void pivotTableDefinition_element::set_asteriskTotals_attr(const XSD::boolean_& _asteriskTotals_attr)
    {    
    m_has_asteriskTotals_attr = true;
    m_asteriskTotals_attr = _asteriskTotals_attr;
    }

    const XSD::boolean_& pivotTableDefinition_element::get_asteriskTotals_attr() const
    {    
    return m_asteriskTotals_attr;
    }

    bool pivotTableDefinition_element::has_showItems_attr() const
    {    
    return m_has_showItems_attr;
    }

    void pivotTableDefinition_element::set_showItems_attr(const XSD::boolean_& _showItems_attr)
    {    
    m_has_showItems_attr = true;
    m_showItems_attr = _showItems_attr;
    }

    const XSD::boolean_& pivotTableDefinition_element::get_showItems_attr() const
    {    
    return m_showItems_attr;
    }

    bool pivotTableDefinition_element::has_editData_attr() const
    {    
    return m_has_editData_attr;
    }

    void pivotTableDefinition_element::set_editData_attr(const XSD::boolean_& _editData_attr)
    {    
    m_has_editData_attr = true;
    m_editData_attr = _editData_attr;
    }

    const XSD::boolean_& pivotTableDefinition_element::get_editData_attr() const
    {    
    return m_editData_attr;
    }

    bool pivotTableDefinition_element::has_disableFieldList_attr() const
    {    
    return m_has_disableFieldList_attr;
    }

    void pivotTableDefinition_element::set_disableFieldList_attr(const XSD::boolean_& _disableFieldList_attr)
    {    
    m_has_disableFieldList_attr = true;
    m_disableFieldList_attr = _disableFieldList_attr;
    }

    const XSD::boolean_& pivotTableDefinition_element::get_disableFieldList_attr() const
    {    
    return m_disableFieldList_attr;
    }

    bool pivotTableDefinition_element::has_showCalcMbrs_attr() const
    {    
    return m_has_showCalcMbrs_attr;
    }

    void pivotTableDefinition_element::set_showCalcMbrs_attr(const XSD::boolean_& _showCalcMbrs_attr)
    {    
    m_has_showCalcMbrs_attr = true;
    m_showCalcMbrs_attr = _showCalcMbrs_attr;
    }

    const XSD::boolean_& pivotTableDefinition_element::get_showCalcMbrs_attr() const
    {    
    return m_showCalcMbrs_attr;
    }

    bool pivotTableDefinition_element::has_visualTotals_attr() const
    {    
    return m_has_visualTotals_attr;
    }

    void pivotTableDefinition_element::set_visualTotals_attr(const XSD::boolean_& _visualTotals_attr)
    {    
    m_has_visualTotals_attr = true;
    m_visualTotals_attr = _visualTotals_attr;
    }

    const XSD::boolean_& pivotTableDefinition_element::get_visualTotals_attr() const
    {    
    return m_visualTotals_attr;
    }

    bool pivotTableDefinition_element::has_showMultipleLabel_attr() const
    {    
    return m_has_showMultipleLabel_attr;
    }

    void pivotTableDefinition_element::set_showMultipleLabel_attr(const XSD::boolean_& _showMultipleLabel_attr)
    {    
    m_has_showMultipleLabel_attr = true;
    m_showMultipleLabel_attr = _showMultipleLabel_attr;
    }

    const XSD::boolean_& pivotTableDefinition_element::get_showMultipleLabel_attr() const
    {    
    return m_showMultipleLabel_attr;
    }

    bool pivotTableDefinition_element::has_showDataDropDown_attr() const
    {    
    return m_has_showDataDropDown_attr;
    }

    void pivotTableDefinition_element::set_showDataDropDown_attr(const XSD::boolean_& _showDataDropDown_attr)
    {    
    m_has_showDataDropDown_attr = true;
    m_showDataDropDown_attr = _showDataDropDown_attr;
    }

    const XSD::boolean_& pivotTableDefinition_element::get_showDataDropDown_attr() const
    {    
    return m_showDataDropDown_attr;
    }

    bool pivotTableDefinition_element::has_showDrill_attr() const
    {    
    return m_has_showDrill_attr;
    }

    void pivotTableDefinition_element::set_showDrill_attr(const XSD::boolean_& _showDrill_attr)
    {    
    m_has_showDrill_attr = true;
    m_showDrill_attr = _showDrill_attr;
    }

    const XSD::boolean_& pivotTableDefinition_element::get_showDrill_attr() const
    {    
    return m_showDrill_attr;
    }

    bool pivotTableDefinition_element::has_printDrill_attr() const
    {    
    return m_has_printDrill_attr;
    }

    void pivotTableDefinition_element::set_printDrill_attr(const XSD::boolean_& _printDrill_attr)
    {    
    m_has_printDrill_attr = true;
    m_printDrill_attr = _printDrill_attr;
    }

    const XSD::boolean_& pivotTableDefinition_element::get_printDrill_attr() const
    {    
    return m_printDrill_attr;
    }

    bool pivotTableDefinition_element::has_showMemberPropertyTips_attr() const
    {    
    return m_has_showMemberPropertyTips_attr;
    }

    void pivotTableDefinition_element::set_showMemberPropertyTips_attr(const XSD::boolean_& _showMemberPropertyTips_attr)
    {    
    m_has_showMemberPropertyTips_attr = true;
    m_showMemberPropertyTips_attr = _showMemberPropertyTips_attr;
    }

    const XSD::boolean_& pivotTableDefinition_element::get_showMemberPropertyTips_attr() const
    {    
    return m_showMemberPropertyTips_attr;
    }

    bool pivotTableDefinition_element::has_showDataTips_attr() const
    {    
    return m_has_showDataTips_attr;
    }

    void pivotTableDefinition_element::set_showDataTips_attr(const XSD::boolean_& _showDataTips_attr)
    {    
    m_has_showDataTips_attr = true;
    m_showDataTips_attr = _showDataTips_attr;
    }

    const XSD::boolean_& pivotTableDefinition_element::get_showDataTips_attr() const
    {    
    return m_showDataTips_attr;
    }

    bool pivotTableDefinition_element::has_enableWizard_attr() const
    {    
    return m_has_enableWizard_attr;
    }

    void pivotTableDefinition_element::set_enableWizard_attr(const XSD::boolean_& _enableWizard_attr)
    {    
    m_has_enableWizard_attr = true;
    m_enableWizard_attr = _enableWizard_attr;
    }

    const XSD::boolean_& pivotTableDefinition_element::get_enableWizard_attr() const
    {    
    return m_enableWizard_attr;
    }

    bool pivotTableDefinition_element::has_enableDrill_attr() const
    {    
    return m_has_enableDrill_attr;
    }

    void pivotTableDefinition_element::set_enableDrill_attr(const XSD::boolean_& _enableDrill_attr)
    {    
    m_has_enableDrill_attr = true;
    m_enableDrill_attr = _enableDrill_attr;
    }

    const XSD::boolean_& pivotTableDefinition_element::get_enableDrill_attr() const
    {    
    return m_enableDrill_attr;
    }

    bool pivotTableDefinition_element::has_enableFieldProperties_attr() const
    {    
    return m_has_enableFieldProperties_attr;
    }

    void pivotTableDefinition_element::set_enableFieldProperties_attr(const XSD::boolean_& _enableFieldProperties_attr)
    {    
    m_has_enableFieldProperties_attr = true;
    m_enableFieldProperties_attr = _enableFieldProperties_attr;
    }

    const XSD::boolean_& pivotTableDefinition_element::get_enableFieldProperties_attr() const
    {    
    return m_enableFieldProperties_attr;
    }

    bool pivotTableDefinition_element::has_preserveFormatting_attr() const
    {    
    return m_has_preserveFormatting_attr;
    }

    void pivotTableDefinition_element::set_preserveFormatting_attr(const XSD::boolean_& _preserveFormatting_attr)
    {    
    m_has_preserveFormatting_attr = true;
    m_preserveFormatting_attr = _preserveFormatting_attr;
    }

    const XSD::boolean_& pivotTableDefinition_element::get_preserveFormatting_attr() const
    {    
    return m_preserveFormatting_attr;
    }

    bool pivotTableDefinition_element::has_useAutoFormatting_attr() const
    {    
    return m_has_useAutoFormatting_attr;
    }

    void pivotTableDefinition_element::set_useAutoFormatting_attr(const XSD::boolean_& _useAutoFormatting_attr)
    {    
    m_has_useAutoFormatting_attr = true;
    m_useAutoFormatting_attr = _useAutoFormatting_attr;
    }

    const XSD::boolean_& pivotTableDefinition_element::get_useAutoFormatting_attr() const
    {    
    return m_useAutoFormatting_attr;
    }

    bool pivotTableDefinition_element::has_pageWrap_attr() const
    {    
    return m_has_pageWrap_attr;
    }

    void pivotTableDefinition_element::set_pageWrap_attr(const XSD::unsignedInt_& _pageWrap_attr)
    {    
    m_has_pageWrap_attr = true;
    m_pageWrap_attr = _pageWrap_attr;
    }

    const XSD::unsignedInt_& pivotTableDefinition_element::get_pageWrap_attr() const
    {    
    return m_pageWrap_attr;
    }

    bool pivotTableDefinition_element::has_pageOverThenDown_attr() const
    {    
    return m_has_pageOverThenDown_attr;
    }

    void pivotTableDefinition_element::set_pageOverThenDown_attr(const XSD::boolean_& _pageOverThenDown_attr)
    {    
    m_has_pageOverThenDown_attr = true;
    m_pageOverThenDown_attr = _pageOverThenDown_attr;
    }

    const XSD::boolean_& pivotTableDefinition_element::get_pageOverThenDown_attr() const
    {    
    return m_pageOverThenDown_attr;
    }

    bool pivotTableDefinition_element::has_subtotalHiddenItems_attr() const
    {    
    return m_has_subtotalHiddenItems_attr;
    }

    void pivotTableDefinition_element::set_subtotalHiddenItems_attr(const XSD::boolean_& _subtotalHiddenItems_attr)
    {    
    m_has_subtotalHiddenItems_attr = true;
    m_subtotalHiddenItems_attr = _subtotalHiddenItems_attr;
    }

    const XSD::boolean_& pivotTableDefinition_element::get_subtotalHiddenItems_attr() const
    {    
    return m_subtotalHiddenItems_attr;
    }

    bool pivotTableDefinition_element::has_rowGrandTotals_attr() const
    {    
    return m_has_rowGrandTotals_attr;
    }

    void pivotTableDefinition_element::set_rowGrandTotals_attr(const XSD::boolean_& _rowGrandTotals_attr)
    {    
    m_has_rowGrandTotals_attr = true;
    m_rowGrandTotals_attr = _rowGrandTotals_attr;
    }

    const XSD::boolean_& pivotTableDefinition_element::get_rowGrandTotals_attr() const
    {    
    return m_rowGrandTotals_attr;
    }

    bool pivotTableDefinition_element::has_colGrandTotals_attr() const
    {    
    return m_has_colGrandTotals_attr;
    }

    void pivotTableDefinition_element::set_colGrandTotals_attr(const XSD::boolean_& _colGrandTotals_attr)
    {    
    m_has_colGrandTotals_attr = true;
    m_colGrandTotals_attr = _colGrandTotals_attr;
    }

    const XSD::boolean_& pivotTableDefinition_element::get_colGrandTotals_attr() const
    {    
    return m_colGrandTotals_attr;
    }

    bool pivotTableDefinition_element::has_fieldPrintTitles_attr() const
    {    
    return m_has_fieldPrintTitles_attr;
    }

    void pivotTableDefinition_element::set_fieldPrintTitles_attr(const XSD::boolean_& _fieldPrintTitles_attr)
    {    
    m_has_fieldPrintTitles_attr = true;
    m_fieldPrintTitles_attr = _fieldPrintTitles_attr;
    }

    const XSD::boolean_& pivotTableDefinition_element::get_fieldPrintTitles_attr() const
    {    
    return m_fieldPrintTitles_attr;
    }

    bool pivotTableDefinition_element::has_itemPrintTitles_attr() const
    {    
    return m_has_itemPrintTitles_attr;
    }

    void pivotTableDefinition_element::set_itemPrintTitles_attr(const XSD::boolean_& _itemPrintTitles_attr)
    {    
    m_has_itemPrintTitles_attr = true;
    m_itemPrintTitles_attr = _itemPrintTitles_attr;
    }

    const XSD::boolean_& pivotTableDefinition_element::get_itemPrintTitles_attr() const
    {    
    return m_itemPrintTitles_attr;
    }

    bool pivotTableDefinition_element::has_mergeItem_attr() const
    {    
    return m_has_mergeItem_attr;
    }

    void pivotTableDefinition_element::set_mergeItem_attr(const XSD::boolean_& _mergeItem_attr)
    {    
    m_has_mergeItem_attr = true;
    m_mergeItem_attr = _mergeItem_attr;
    }

    const XSD::boolean_& pivotTableDefinition_element::get_mergeItem_attr() const
    {    
    return m_mergeItem_attr;
    }

    bool pivotTableDefinition_element::has_showDropZones_attr() const
    {    
    return m_has_showDropZones_attr;
    }

    void pivotTableDefinition_element::set_showDropZones_attr(const XSD::boolean_& _showDropZones_attr)
    {    
    m_has_showDropZones_attr = true;
    m_showDropZones_attr = _showDropZones_attr;
    }

    const XSD::boolean_& pivotTableDefinition_element::get_showDropZones_attr() const
    {    
    return m_showDropZones_attr;
    }

    bool pivotTableDefinition_element::has_createdVersion_attr() const
    {    
    return m_has_createdVersion_attr;
    }

    void pivotTableDefinition_element::set_createdVersion_attr(const XSD::unsignedByte_& _createdVersion_attr)
    {    
    m_has_createdVersion_attr = true;
    m_createdVersion_attr = _createdVersion_attr;
    }

    const XSD::unsignedByte_& pivotTableDefinition_element::get_createdVersion_attr() const
    {    
    return m_createdVersion_attr;
    }

    bool pivotTableDefinition_element::has_indent_attr() const
    {    
    return m_has_indent_attr;
    }

    void pivotTableDefinition_element::set_indent_attr(const XSD::unsignedInt_& _indent_attr)
    {    
    m_has_indent_attr = true;
    m_indent_attr = _indent_attr;
    }

    const XSD::unsignedInt_& pivotTableDefinition_element::get_indent_attr() const
    {    
    return m_indent_attr;
    }

    bool pivotTableDefinition_element::has_showEmptyRow_attr() const
    {    
    return m_has_showEmptyRow_attr;
    }

    void pivotTableDefinition_element::set_showEmptyRow_attr(const XSD::boolean_& _showEmptyRow_attr)
    {    
    m_has_showEmptyRow_attr = true;
    m_showEmptyRow_attr = _showEmptyRow_attr;
    }

    const XSD::boolean_& pivotTableDefinition_element::get_showEmptyRow_attr() const
    {    
    return m_showEmptyRow_attr;
    }

    bool pivotTableDefinition_element::has_showEmptyCol_attr() const
    {    
    return m_has_showEmptyCol_attr;
    }

    void pivotTableDefinition_element::set_showEmptyCol_attr(const XSD::boolean_& _showEmptyCol_attr)
    {    
    m_has_showEmptyCol_attr = true;
    m_showEmptyCol_attr = _showEmptyCol_attr;
    }

    const XSD::boolean_& pivotTableDefinition_element::get_showEmptyCol_attr() const
    {    
    return m_showEmptyCol_attr;
    }

    bool pivotTableDefinition_element::has_showHeaders_attr() const
    {    
    return m_has_showHeaders_attr;
    }

    void pivotTableDefinition_element::set_showHeaders_attr(const XSD::boolean_& _showHeaders_attr)
    {    
    m_has_showHeaders_attr = true;
    m_showHeaders_attr = _showHeaders_attr;
    }

    const XSD::boolean_& pivotTableDefinition_element::get_showHeaders_attr() const
    {    
    return m_showHeaders_attr;
    }

    bool pivotTableDefinition_element::has_compact_attr() const
    {    
    return m_has_compact_attr;
    }

    void pivotTableDefinition_element::set_compact_attr(const XSD::boolean_& _compact_attr)
    {    
    m_has_compact_attr = true;
    m_compact_attr = _compact_attr;
    }

    const XSD::boolean_& pivotTableDefinition_element::get_compact_attr() const
    {    
    return m_compact_attr;
    }

    bool pivotTableDefinition_element::has_outline_attr() const
    {    
    return m_has_outline_attr;
    }

    void pivotTableDefinition_element::set_outline_attr(const XSD::boolean_& _outline_attr)
    {    
    m_has_outline_attr = true;
    m_outline_attr = _outline_attr;
    }

    const XSD::boolean_& pivotTableDefinition_element::get_outline_attr() const
    {    
    return m_outline_attr;
    }

    bool pivotTableDefinition_element::has_outlineData_attr() const
    {    
    return m_has_outlineData_attr;
    }

    void pivotTableDefinition_element::set_outlineData_attr(const XSD::boolean_& _outlineData_attr)
    {    
    m_has_outlineData_attr = true;
    m_outlineData_attr = _outlineData_attr;
    }

    const XSD::boolean_& pivotTableDefinition_element::get_outlineData_attr() const
    {    
    return m_outlineData_attr;
    }

    bool pivotTableDefinition_element::has_compactData_attr() const
    {    
    return m_has_compactData_attr;
    }

    void pivotTableDefinition_element::set_compactData_attr(const XSD::boolean_& _compactData_attr)
    {    
    m_has_compactData_attr = true;
    m_compactData_attr = _compactData_attr;
    }

    const XSD::boolean_& pivotTableDefinition_element::get_compactData_attr() const
    {    
    return m_compactData_attr;
    }

    bool pivotTableDefinition_element::has_published_attr() const
    {    
    return m_has_published_attr;
    }

    void pivotTableDefinition_element::set_published_attr(const XSD::boolean_& _published_attr)
    {    
    m_has_published_attr = true;
    m_published_attr = _published_attr;
    }

    const XSD::boolean_& pivotTableDefinition_element::get_published_attr() const
    {    
    return m_published_attr;
    }

    bool pivotTableDefinition_element::has_gridDropZones_attr() const
    {    
    return m_has_gridDropZones_attr;
    }

    void pivotTableDefinition_element::set_gridDropZones_attr(const XSD::boolean_& _gridDropZones_attr)
    {    
    m_has_gridDropZones_attr = true;
    m_gridDropZones_attr = _gridDropZones_attr;
    }

    const XSD::boolean_& pivotTableDefinition_element::get_gridDropZones_attr() const
    {    
    return m_gridDropZones_attr;
    }

    bool pivotTableDefinition_element::has_immersive_attr() const
    {    
    return m_has_immersive_attr;
    }

    void pivotTableDefinition_element::set_immersive_attr(const XSD::boolean_& _immersive_attr)
    {    
    m_has_immersive_attr = true;
    m_immersive_attr = _immersive_attr;
    }

    const XSD::boolean_& pivotTableDefinition_element::get_immersive_attr() const
    {    
    return m_immersive_attr;
    }

    bool pivotTableDefinition_element::has_multipleFieldFilters_attr() const
    {    
    return m_has_multipleFieldFilters_attr;
    }

    void pivotTableDefinition_element::set_multipleFieldFilters_attr(const XSD::boolean_& _multipleFieldFilters_attr)
    {    
    m_has_multipleFieldFilters_attr = true;
    m_multipleFieldFilters_attr = _multipleFieldFilters_attr;
    }

    const XSD::boolean_& pivotTableDefinition_element::get_multipleFieldFilters_attr() const
    {    
    return m_multipleFieldFilters_attr;
    }

    bool pivotTableDefinition_element::has_chartFormat_attr() const
    {    
    return m_has_chartFormat_attr;
    }

    void pivotTableDefinition_element::set_chartFormat_attr(const XSD::unsignedInt_& _chartFormat_attr)
    {    
    m_has_chartFormat_attr = true;
    m_chartFormat_attr = _chartFormat_attr;
    }

    const XSD::unsignedInt_& pivotTableDefinition_element::get_chartFormat_attr() const
    {    
    return m_chartFormat_attr;
    }

    bool pivotTableDefinition_element::has_rowHeaderCaption_attr() const
    {    
    return m_has_rowHeaderCaption_attr;
    }

    void pivotTableDefinition_element::set_rowHeaderCaption_attr(const ns_s::ST_Xstring& _rowHeaderCaption_attr)
    {    
    m_has_rowHeaderCaption_attr = true;
    m_rowHeaderCaption_attr = new ns_s::ST_Xstring(_rowHeaderCaption_attr);
    }

    const ns_s::ST_Xstring& pivotTableDefinition_element::get_rowHeaderCaption_attr() const
    {    
    if (m_rowHeaderCaption_attr)
    {
        return *m_rowHeaderCaption_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool pivotTableDefinition_element::has_colHeaderCaption_attr() const
    {    
    return m_has_colHeaderCaption_attr;
    }

    void pivotTableDefinition_element::set_colHeaderCaption_attr(const ns_s::ST_Xstring& _colHeaderCaption_attr)
    {    
    m_has_colHeaderCaption_attr = true;
    m_colHeaderCaption_attr = new ns_s::ST_Xstring(_colHeaderCaption_attr);
    }

    const ns_s::ST_Xstring& pivotTableDefinition_element::get_colHeaderCaption_attr() const
    {    
    if (m_colHeaderCaption_attr)
    {
        return *m_colHeaderCaption_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool pivotTableDefinition_element::has_fieldListSortAscending_attr() const
    {    
    return m_has_fieldListSortAscending_attr;
    }

    void pivotTableDefinition_element::set_fieldListSortAscending_attr(const XSD::boolean_& _fieldListSortAscending_attr)
    {    
    m_has_fieldListSortAscending_attr = true;
    m_fieldListSortAscending_attr = _fieldListSortAscending_attr;
    }

    const XSD::boolean_& pivotTableDefinition_element::get_fieldListSortAscending_attr() const
    {    
    return m_fieldListSortAscending_attr;
    }

    bool pivotTableDefinition_element::has_mdxSubqueries_attr() const
    {    
    return m_has_mdxSubqueries_attr;
    }

    void pivotTableDefinition_element::set_mdxSubqueries_attr(const XSD::boolean_& _mdxSubqueries_attr)
    {    
    m_has_mdxSubqueries_attr = true;
    m_mdxSubqueries_attr = _mdxSubqueries_attr;
    }

    const XSD::boolean_& pivotTableDefinition_element::get_mdxSubqueries_attr() const
    {    
    return m_mdxSubqueries_attr;
    }

    bool pivotTableDefinition_element::has_customListSort_attr() const
    {    
    return m_has_customListSort_attr;
    }

    void pivotTableDefinition_element::set_customListSort_attr(const XSD::boolean_& _customListSort_attr)
    {    
    m_has_customListSort_attr = true;
    m_customListSort_attr = _customListSort_attr;
    }

    const XSD::boolean_& pivotTableDefinition_element::get_customListSort_attr() const
    {    
    return m_customListSort_attr;
    }

pivotTableDefinition_element* pivotTableDefinition_element::default_instance_ = NULL;

    // queryTable_element
    queryTable_element::queryTable_element()
    :m_has_queryTableRefresh(false),
    m_queryTableRefresh(NULL),
    m_has_extLst(false),
    m_extLst(NULL),
    m_has_name_attr(false),
    m_name_attr(NULL),
    m_has_headers_attr(false),
    m_headers_attr(false),
    m_has_rowNumbers_attr(false),
    m_rowNumbers_attr(false),
    m_has_disableRefresh_attr(false),
    m_disableRefresh_attr(false),
    m_has_backgroundRefresh_attr(false),
    m_backgroundRefresh_attr(false),
    m_has_firstBackgroundRefresh_attr(false),
    m_firstBackgroundRefresh_attr(false),
    m_has_refreshOnLoad_attr(false),
    m_refreshOnLoad_attr(false),
    m_has_growShrinkType_attr(false),
    m_growShrinkType_attr(NULL),
    m_has_fillFormulas_attr(false),
    m_fillFormulas_attr(false),
    m_has_removeDataOnSave_attr(false),
    m_removeDataOnSave_attr(false),
    m_has_disableEdit_attr(false),
    m_disableEdit_attr(false),
    m_has_preserveFormatting_attr(false),
    m_preserveFormatting_attr(false),
    m_has_adjustColumnWidth_attr(false),
    m_adjustColumnWidth_attr(false),
    m_has_intermediate_attr(false),
    m_intermediate_attr(false),
    m_has_connectionId_attr(false),
    m_connectionId_attr(0),
    m_has_autoFormatId_attr(false),
    m_autoFormatId_attr(0),
    m_has_applyNumberFormats_attr(false),
    m_applyNumberFormats_attr(false),
    m_has_applyBorderFormats_attr(false),
    m_applyBorderFormats_attr(false),
    m_has_applyFontFormats_attr(false),
    m_applyFontFormats_attr(false),
    m_has_applyPatternFormats_attr(false),
    m_applyPatternFormats_attr(false),
    m_has_applyAlignmentFormats_attr(false),
    m_applyAlignmentFormats_attr(false),
    m_has_applyWidthHeightFormats_attr(false),
    m_applyWidthHeightFormats_attr(false)
    {
    }
    queryTable_element::~queryTable_element()
{
    clear();    }
    bool queryTable_element::has_queryTableRefresh() const
    {    
    return m_has_queryTableRefresh;
    }

    CT_QueryTableRefresh* queryTable_element::mutable_queryTableRefresh()
    {    
    m_has_queryTableRefresh = true;
    if (!m_queryTableRefresh)
    {
        m_queryTableRefresh = new CT_QueryTableRefresh();
    }
    return m_queryTableRefresh;
    }

    const CT_QueryTableRefresh& queryTable_element::get_queryTableRefresh() const
    {    
    if (m_queryTableRefresh)
    {
        return *m_queryTableRefresh;
    }
    return CT_QueryTableRefresh::default_instance();
    }

    bool queryTable_element::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* queryTable_element::mutable_extLst()
    {    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& queryTable_element::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

    void queryTable_element::clear()
    {    
    m_has_name_attr = false;
    
    if (m_name_attr)
    {
        delete m_name_attr;
        m_name_attr = NULL;
    }
    
    
    m_has_headers_attr = false;
    m_headers_attr = false;
    
    m_has_rowNumbers_attr = false;
    m_rowNumbers_attr = false;
    
    m_has_disableRefresh_attr = false;
    m_disableRefresh_attr = false;
    
    m_has_backgroundRefresh_attr = false;
    m_backgroundRefresh_attr = false;
    
    m_has_firstBackgroundRefresh_attr = false;
    m_firstBackgroundRefresh_attr = false;
    
    m_has_refreshOnLoad_attr = false;
    m_refreshOnLoad_attr = false;
    
    m_has_growShrinkType_attr = false;
    
    if (m_growShrinkType_attr)
    {
        delete m_growShrinkType_attr;
        m_growShrinkType_attr = NULL;
    }
    
    
    m_has_fillFormulas_attr = false;
    m_fillFormulas_attr = false;
    
    m_has_removeDataOnSave_attr = false;
    m_removeDataOnSave_attr = false;
    
    m_has_disableEdit_attr = false;
    m_disableEdit_attr = false;
    
    m_has_preserveFormatting_attr = false;
    m_preserveFormatting_attr = false;
    
    m_has_adjustColumnWidth_attr = false;
    m_adjustColumnWidth_attr = false;
    
    m_has_intermediate_attr = false;
    m_intermediate_attr = false;
    
    m_has_connectionId_attr = false;
    m_connectionId_attr = 0;
    
    m_has_autoFormatId_attr = false;
    m_autoFormatId_attr = 0;
    
    m_has_applyNumberFormats_attr = false;
    m_applyNumberFormats_attr = false;
    
    m_has_applyBorderFormats_attr = false;
    m_applyBorderFormats_attr = false;
    
    m_has_applyFontFormats_attr = false;
    m_applyFontFormats_attr = false;
    
    m_has_applyPatternFormats_attr = false;
    m_applyPatternFormats_attr = false;
    
    m_has_applyAlignmentFormats_attr = false;
    m_applyAlignmentFormats_attr = false;
    
    m_has_applyWidthHeightFormats_attr = false;
    m_applyWidthHeightFormats_attr = false;
    }

    void queryTable_element::toXml(std::ostream& _outStream) const
    {    
    _outStream << "<main:queryTable";
    
    _outStream << " " << "xmlns:main=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\"";
    _outStream << " " << "xmlns:s=\"http://schemas.openxmlformats.org/officeDocument/2006/sharedTypes\"";
    _outStream << " " << "xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\"";
    _outStream << " " << "xmlns:xdr=\"http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing\"";
    
    if (m_has_name_attr)
    {
        m_name_attr->toXmlAttr("name", _outStream);
    }
    
    
    if (m_has_headers_attr)
    {
        _outStream << " " << "headers" << "=\"" << XSD::XMLBooleanStr(m_headers_attr) << "\"";
    }
    
    
    if (m_has_rowNumbers_attr)
    {
        _outStream << " " << "rowNumbers" << "=\"" << XSD::XMLBooleanStr(m_rowNumbers_attr) << "\"";
    }
    
    
    if (m_has_disableRefresh_attr)
    {
        _outStream << " " << "disableRefresh" << "=\"" << XSD::XMLBooleanStr(m_disableRefresh_attr) << "\"";
    }
    
    
    if (m_has_backgroundRefresh_attr)
    {
        _outStream << " " << "backgroundRefresh" << "=\"" << XSD::XMLBooleanStr(m_backgroundRefresh_attr) << "\"";
    }
    
    
    if (m_has_firstBackgroundRefresh_attr)
    {
        _outStream << " " << "firstBackgroundRefresh" << "=\"" << XSD::XMLBooleanStr(m_firstBackgroundRefresh_attr) << "\"";
    }
    
    
    if (m_has_refreshOnLoad_attr)
    {
        _outStream << " " << "refreshOnLoad" << "=\"" << XSD::XMLBooleanStr(m_refreshOnLoad_attr) << "\"";
    }
    
    
    if (m_has_growShrinkType_attr)
    {
        m_growShrinkType_attr->toXmlAttr("growShrinkType", _outStream);
    }
    
    
    if (m_has_fillFormulas_attr)
    {
        _outStream << " " << "fillFormulas" << "=\"" << XSD::XMLBooleanStr(m_fillFormulas_attr) << "\"";
    }
    
    
    if (m_has_removeDataOnSave_attr)
    {
        _outStream << " " << "removeDataOnSave" << "=\"" << XSD::XMLBooleanStr(m_removeDataOnSave_attr) << "\"";
    }
    
    
    if (m_has_disableEdit_attr)
    {
        _outStream << " " << "disableEdit" << "=\"" << XSD::XMLBooleanStr(m_disableEdit_attr) << "\"";
    }
    
    
    if (m_has_preserveFormatting_attr)
    {
        _outStream << " " << "preserveFormatting" << "=\"" << XSD::XMLBooleanStr(m_preserveFormatting_attr) << "\"";
    }
    
    
    if (m_has_adjustColumnWidth_attr)
    {
        _outStream << " " << "adjustColumnWidth" << "=\"" << XSD::XMLBooleanStr(m_adjustColumnWidth_attr) << "\"";
    }
    
    
    if (m_has_intermediate_attr)
    {
        _outStream << " " << "intermediate" << "=\"" << XSD::XMLBooleanStr(m_intermediate_attr) << "\"";
    }
    
    
    if (m_has_connectionId_attr)
    {
        _outStream << " " << "connectionId" << "=\"" << m_connectionId_attr << "\"";
    }
    
    
    if (m_has_autoFormatId_attr)
    {
        _outStream << " " << "autoFormatId" << "=\"" << m_autoFormatId_attr << "\"";
    }
    
    
    if (m_has_applyNumberFormats_attr)
    {
        _outStream << " " << "applyNumberFormats" << "=\"" << XSD::XMLBooleanStr(m_applyNumberFormats_attr) << "\"";
    }
    
    
    if (m_has_applyBorderFormats_attr)
    {
        _outStream << " " << "applyBorderFormats" << "=\"" << XSD::XMLBooleanStr(m_applyBorderFormats_attr) << "\"";
    }
    
    
    if (m_has_applyFontFormats_attr)
    {
        _outStream << " " << "applyFontFormats" << "=\"" << XSD::XMLBooleanStr(m_applyFontFormats_attr) << "\"";
    }
    
    
    if (m_has_applyPatternFormats_attr)
    {
        _outStream << " " << "applyPatternFormats" << "=\"" << XSD::XMLBooleanStr(m_applyPatternFormats_attr) << "\"";
    }
    
    
    if (m_has_applyAlignmentFormats_attr)
    {
        _outStream << " " << "applyAlignmentFormats" << "=\"" << XSD::XMLBooleanStr(m_applyAlignmentFormats_attr) << "\"";
    }
    
    
    if (m_has_applyWidthHeightFormats_attr)
    {
        _outStream << " " << "applyWidthHeightFormats" << "=\"" << XSD::XMLBooleanStr(m_applyWidthHeightFormats_attr) << "\"";
    }
    
    _outStream << ">";
    
    if (m_has_queryTableRefresh)
    {
        m_queryTableRefresh->toXmlElem("main:queryTableRefresh", "", _outStream);;
    }
    
    if (m_has_extLst)
    {
        m_extLst->toXmlElem("main:extLst", "", _outStream);;
    }
    
    _outStream << "</main:queryTable>";
    }

    const queryTable_element& queryTable_element::default_instance()
    {    
    if (!queryTable_element::default_instance_)
    {
        queryTable_element::default_instance_ = new queryTable_element();
    }
    return *queryTable_element::default_instance_;
    }

    bool queryTable_element::has_name_attr() const
    {    
    return m_has_name_attr;
    }

    void queryTable_element::set_name_attr(const ns_s::ST_Xstring& _name_attr)
    {    
    m_has_name_attr = true;
    m_name_attr = new ns_s::ST_Xstring(_name_attr);
    }

    const ns_s::ST_Xstring& queryTable_element::get_name_attr() const
    {    
    if (m_name_attr)
    {
        return *m_name_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool queryTable_element::has_headers_attr() const
    {    
    return m_has_headers_attr;
    }

    void queryTable_element::set_headers_attr(const XSD::boolean_& _headers_attr)
    {    
    m_has_headers_attr = true;
    m_headers_attr = _headers_attr;
    }

    const XSD::boolean_& queryTable_element::get_headers_attr() const
    {    
    return m_headers_attr;
    }

    bool queryTable_element::has_rowNumbers_attr() const
    {    
    return m_has_rowNumbers_attr;
    }

    void queryTable_element::set_rowNumbers_attr(const XSD::boolean_& _rowNumbers_attr)
    {    
    m_has_rowNumbers_attr = true;
    m_rowNumbers_attr = _rowNumbers_attr;
    }

    const XSD::boolean_& queryTable_element::get_rowNumbers_attr() const
    {    
    return m_rowNumbers_attr;
    }

    bool queryTable_element::has_disableRefresh_attr() const
    {    
    return m_has_disableRefresh_attr;
    }

    void queryTable_element::set_disableRefresh_attr(const XSD::boolean_& _disableRefresh_attr)
    {    
    m_has_disableRefresh_attr = true;
    m_disableRefresh_attr = _disableRefresh_attr;
    }

    const XSD::boolean_& queryTable_element::get_disableRefresh_attr() const
    {    
    return m_disableRefresh_attr;
    }

    bool queryTable_element::has_backgroundRefresh_attr() const
    {    
    return m_has_backgroundRefresh_attr;
    }

    void queryTable_element::set_backgroundRefresh_attr(const XSD::boolean_& _backgroundRefresh_attr)
    {    
    m_has_backgroundRefresh_attr = true;
    m_backgroundRefresh_attr = _backgroundRefresh_attr;
    }

    const XSD::boolean_& queryTable_element::get_backgroundRefresh_attr() const
    {    
    return m_backgroundRefresh_attr;
    }

    bool queryTable_element::has_firstBackgroundRefresh_attr() const
    {    
    return m_has_firstBackgroundRefresh_attr;
    }

    void queryTable_element::set_firstBackgroundRefresh_attr(const XSD::boolean_& _firstBackgroundRefresh_attr)
    {    
    m_has_firstBackgroundRefresh_attr = true;
    m_firstBackgroundRefresh_attr = _firstBackgroundRefresh_attr;
    }

    const XSD::boolean_& queryTable_element::get_firstBackgroundRefresh_attr() const
    {    
    return m_firstBackgroundRefresh_attr;
    }

    bool queryTable_element::has_refreshOnLoad_attr() const
    {    
    return m_has_refreshOnLoad_attr;
    }

    void queryTable_element::set_refreshOnLoad_attr(const XSD::boolean_& _refreshOnLoad_attr)
    {    
    m_has_refreshOnLoad_attr = true;
    m_refreshOnLoad_attr = _refreshOnLoad_attr;
    }

    const XSD::boolean_& queryTable_element::get_refreshOnLoad_attr() const
    {    
    return m_refreshOnLoad_attr;
    }

    bool queryTable_element::has_growShrinkType_attr() const
    {    
    return m_has_growShrinkType_attr;
    }

    void queryTable_element::set_growShrinkType_attr(const ST_GrowShrinkType& _growShrinkType_attr)
    {    
    m_has_growShrinkType_attr = true;
    m_growShrinkType_attr = new ST_GrowShrinkType(_growShrinkType_attr);
    }

    const ST_GrowShrinkType& queryTable_element::get_growShrinkType_attr() const
    {    
    if (m_growShrinkType_attr)
    {
        return *m_growShrinkType_attr;
    }
    return ST_GrowShrinkType::default_instance();
    }

    bool queryTable_element::has_fillFormulas_attr() const
    {    
    return m_has_fillFormulas_attr;
    }

    void queryTable_element::set_fillFormulas_attr(const XSD::boolean_& _fillFormulas_attr)
    {    
    m_has_fillFormulas_attr = true;
    m_fillFormulas_attr = _fillFormulas_attr;
    }

    const XSD::boolean_& queryTable_element::get_fillFormulas_attr() const
    {    
    return m_fillFormulas_attr;
    }

    bool queryTable_element::has_removeDataOnSave_attr() const
    {    
    return m_has_removeDataOnSave_attr;
    }

    void queryTable_element::set_removeDataOnSave_attr(const XSD::boolean_& _removeDataOnSave_attr)
    {    
    m_has_removeDataOnSave_attr = true;
    m_removeDataOnSave_attr = _removeDataOnSave_attr;
    }

    const XSD::boolean_& queryTable_element::get_removeDataOnSave_attr() const
    {    
    return m_removeDataOnSave_attr;
    }

    bool queryTable_element::has_disableEdit_attr() const
    {    
    return m_has_disableEdit_attr;
    }

    void queryTable_element::set_disableEdit_attr(const XSD::boolean_& _disableEdit_attr)
    {    
    m_has_disableEdit_attr = true;
    m_disableEdit_attr = _disableEdit_attr;
    }

    const XSD::boolean_& queryTable_element::get_disableEdit_attr() const
    {    
    return m_disableEdit_attr;
    }

    bool queryTable_element::has_preserveFormatting_attr() const
    {    
    return m_has_preserveFormatting_attr;
    }

    void queryTable_element::set_preserveFormatting_attr(const XSD::boolean_& _preserveFormatting_attr)
    {    
    m_has_preserveFormatting_attr = true;
    m_preserveFormatting_attr = _preserveFormatting_attr;
    }

    const XSD::boolean_& queryTable_element::get_preserveFormatting_attr() const
    {    
    return m_preserveFormatting_attr;
    }

    bool queryTable_element::has_adjustColumnWidth_attr() const
    {    
    return m_has_adjustColumnWidth_attr;
    }

    void queryTable_element::set_adjustColumnWidth_attr(const XSD::boolean_& _adjustColumnWidth_attr)
    {    
    m_has_adjustColumnWidth_attr = true;
    m_adjustColumnWidth_attr = _adjustColumnWidth_attr;
    }

    const XSD::boolean_& queryTable_element::get_adjustColumnWidth_attr() const
    {    
    return m_adjustColumnWidth_attr;
    }

    bool queryTable_element::has_intermediate_attr() const
    {    
    return m_has_intermediate_attr;
    }

    void queryTable_element::set_intermediate_attr(const XSD::boolean_& _intermediate_attr)
    {    
    m_has_intermediate_attr = true;
    m_intermediate_attr = _intermediate_attr;
    }

    const XSD::boolean_& queryTable_element::get_intermediate_attr() const
    {    
    return m_intermediate_attr;
    }

    bool queryTable_element::has_connectionId_attr() const
    {    
    return m_has_connectionId_attr;
    }

    void queryTable_element::set_connectionId_attr(const XSD::unsignedInt_& _connectionId_attr)
    {    
    m_has_connectionId_attr = true;
    m_connectionId_attr = _connectionId_attr;
    }

    const XSD::unsignedInt_& queryTable_element::get_connectionId_attr() const
    {    
    return m_connectionId_attr;
    }

    bool queryTable_element::has_autoFormatId_attr() const
    {    
    return m_has_autoFormatId_attr;
    }

    void queryTable_element::set_autoFormatId_attr(const XSD::unsignedInt_& _autoFormatId_attr)
    {    
    m_has_autoFormatId_attr = true;
    m_autoFormatId_attr = _autoFormatId_attr;
    }

    const XSD::unsignedInt_& queryTable_element::get_autoFormatId_attr() const
    {    
    return m_autoFormatId_attr;
    }

    bool queryTable_element::has_applyNumberFormats_attr() const
    {    
    return m_has_applyNumberFormats_attr;
    }

    void queryTable_element::set_applyNumberFormats_attr(const XSD::boolean_& _applyNumberFormats_attr)
    {    
    m_has_applyNumberFormats_attr = true;
    m_applyNumberFormats_attr = _applyNumberFormats_attr;
    }

    const XSD::boolean_& queryTable_element::get_applyNumberFormats_attr() const
    {    
    return m_applyNumberFormats_attr;
    }

    bool queryTable_element::has_applyBorderFormats_attr() const
    {    
    return m_has_applyBorderFormats_attr;
    }

    void queryTable_element::set_applyBorderFormats_attr(const XSD::boolean_& _applyBorderFormats_attr)
    {    
    m_has_applyBorderFormats_attr = true;
    m_applyBorderFormats_attr = _applyBorderFormats_attr;
    }

    const XSD::boolean_& queryTable_element::get_applyBorderFormats_attr() const
    {    
    return m_applyBorderFormats_attr;
    }

    bool queryTable_element::has_applyFontFormats_attr() const
    {    
    return m_has_applyFontFormats_attr;
    }

    void queryTable_element::set_applyFontFormats_attr(const XSD::boolean_& _applyFontFormats_attr)
    {    
    m_has_applyFontFormats_attr = true;
    m_applyFontFormats_attr = _applyFontFormats_attr;
    }

    const XSD::boolean_& queryTable_element::get_applyFontFormats_attr() const
    {    
    return m_applyFontFormats_attr;
    }

    bool queryTable_element::has_applyPatternFormats_attr() const
    {    
    return m_has_applyPatternFormats_attr;
    }

    void queryTable_element::set_applyPatternFormats_attr(const XSD::boolean_& _applyPatternFormats_attr)
    {    
    m_has_applyPatternFormats_attr = true;
    m_applyPatternFormats_attr = _applyPatternFormats_attr;
    }

    const XSD::boolean_& queryTable_element::get_applyPatternFormats_attr() const
    {    
    return m_applyPatternFormats_attr;
    }

    bool queryTable_element::has_applyAlignmentFormats_attr() const
    {    
    return m_has_applyAlignmentFormats_attr;
    }

    void queryTable_element::set_applyAlignmentFormats_attr(const XSD::boolean_& _applyAlignmentFormats_attr)
    {    
    m_has_applyAlignmentFormats_attr = true;
    m_applyAlignmentFormats_attr = _applyAlignmentFormats_attr;
    }

    const XSD::boolean_& queryTable_element::get_applyAlignmentFormats_attr() const
    {    
    return m_applyAlignmentFormats_attr;
    }

    bool queryTable_element::has_applyWidthHeightFormats_attr() const
    {    
    return m_has_applyWidthHeightFormats_attr;
    }

    void queryTable_element::set_applyWidthHeightFormats_attr(const XSD::boolean_& _applyWidthHeightFormats_attr)
    {    
    m_has_applyWidthHeightFormats_attr = true;
    m_applyWidthHeightFormats_attr = _applyWidthHeightFormats_attr;
    }

    const XSD::boolean_& queryTable_element::get_applyWidthHeightFormats_attr() const
    {    
    return m_applyWidthHeightFormats_attr;
    }

queryTable_element* queryTable_element::default_instance_ = NULL;

    // sst_element
    sst_element::sst_element()
    :m_has_count_attr(false),
    m_count_attr(0),
    m_has_uniqueCount_attr(false),
    m_uniqueCount_attr(0)
    {
    }
    sst_element::~sst_element()
{
    clear();    }
    CT_Rst* sst_element::add_si()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Rst* pNewChild = pChildGroup->mutable_si();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_ExtensionList* sst_element::add_extLst()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_ExtensionList* pNewChild = pChildGroup->mutable_extLst();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void sst_element::clear()
    {    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    m_has_uniqueCount_attr = false;
    m_uniqueCount_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void sst_element::toXml(std::ostream& _outStream) const
    {    
    _outStream << "<main:sst";
    
    _outStream << " " << "xmlns:main=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\"";
    _outStream << " " << "xmlns:s=\"http://schemas.openxmlformats.org/officeDocument/2006/sharedTypes\"";
    _outStream << " " << "xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\"";
    _outStream << " " << "xmlns:xdr=\"http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing\"";
    
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
    
    if (m_has_uniqueCount_attr)
    {
        _outStream << " " << "uniqueCount" << "=\"" << m_uniqueCount_attr << "\"";
    }
    
    _outStream << ">";
    
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_si())
            {
                (*iter)->get_si().toXmlElem("main:si", "", _outStream);
            }
            else if ((*iter)->has_extLst())
            {
                (*iter)->get_extLst().toXmlElem("main:extLst", "", _outStream);
            }
        }
    }
    
    _outStream << "</main:sst>";
    }

    const sst_element& sst_element::default_instance()
    {    
    if (!sst_element::default_instance_)
    {
        sst_element::default_instance_ = new sst_element();
    }
    return *sst_element::default_instance_;
    }

    bool sst_element::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void sst_element::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& sst_element::get_count_attr() const
    {    
    return m_count_attr;
    }

    bool sst_element::has_uniqueCount_attr() const
    {    
    return m_has_uniqueCount_attr;
    }

    void sst_element::set_uniqueCount_attr(const XSD::unsignedInt_& _uniqueCount_attr)
    {    
    m_has_uniqueCount_attr = true;
    m_uniqueCount_attr = _uniqueCount_attr;
    }

    const XSD::unsignedInt_& sst_element::get_uniqueCount_attr() const
    {    
    return m_uniqueCount_attr;
    }


    // sst_element::ChildGroup_1
    sst_element::ChildGroup_1::ChildGroup_1()
    :m_has_si(false),
    m_si(NULL),
    m_has_extLst(false),
    m_extLst(NULL)
    {
    }
    bool sst_element::ChildGroup_1::has_si() const
    {    
    return m_has_si;
    }

    CT_Rst* sst_element::ChildGroup_1::mutable_si()
    {    
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_si = true;
    if (!m_si)
    {
        m_si = new CT_Rst();
    }
    return m_si;
    }

    const CT_Rst& sst_element::ChildGroup_1::get_si() const
    {    
    if (m_si)
    {
        return *m_si;
    }
    return CT_Rst::default_instance();
    }

    bool sst_element::ChildGroup_1::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* sst_element::ChildGroup_1::mutable_extLst()
    {    
    
    m_has_si = false;
    
    if (m_si)
    {
        delete m_si;
        m_si = NULL;
    }
    ;
    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& sst_element::ChildGroup_1::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

sst_element* sst_element::default_instance_ = NULL;

    // headers_element
    headers_element::headers_element()
    :m_has_guid_attr(false),
    m_guid_attr(NULL),
    m_has_lastGuid_attr(false),
    m_lastGuid_attr(NULL),
    m_has_shared_attr(false),
    m_shared_attr(false),
    m_has_diskRevisions_attr(false),
    m_diskRevisions_attr(false),
    m_has_history_attr(false),
    m_history_attr(false),
    m_has_trackRevisions_attr(false),
    m_trackRevisions_attr(false),
    m_has_exclusive_attr(false),
    m_exclusive_attr(false),
    m_has_revisionId_attr(false),
    m_revisionId_attr(0),
    m_has_version_attr(false),
    m_version_attr(0),
    m_has_keepChangeHistory_attr(false),
    m_keepChangeHistory_attr(false),
    m_has_protected_attr(false),
    m_protected_attr(false),
    m_has_preserveHistory_attr(false),
    m_preserveHistory_attr(0)
    {
    }
    headers_element::~headers_element()
{
    clear();    }
    CT_RevisionHeader* headers_element::add_header()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_RevisionHeader* pNewChild = pChildGroup->mutable_header();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void headers_element::clear()
    {    
    m_has_guid_attr = false;
    
    if (m_guid_attr)
    {
        delete m_guid_attr;
        m_guid_attr = NULL;
    }
    
    
    m_has_lastGuid_attr = false;
    
    if (m_lastGuid_attr)
    {
        delete m_lastGuid_attr;
        m_lastGuid_attr = NULL;
    }
    
    
    m_has_shared_attr = false;
    m_shared_attr = false;
    
    m_has_diskRevisions_attr = false;
    m_diskRevisions_attr = false;
    
    m_has_history_attr = false;
    m_history_attr = false;
    
    m_has_trackRevisions_attr = false;
    m_trackRevisions_attr = false;
    
    m_has_exclusive_attr = false;
    m_exclusive_attr = false;
    
    m_has_revisionId_attr = false;
    m_revisionId_attr = 0;
    
    m_has_version_attr = false;
    m_version_attr = 0;
    
    m_has_keepChangeHistory_attr = false;
    m_keepChangeHistory_attr = false;
    
    m_has_protected_attr = false;
    m_protected_attr = false;
    
    m_has_preserveHistory_attr = false;
    m_preserveHistory_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void headers_element::toXml(std::ostream& _outStream) const
    {    
    _outStream << "<main:headers";
    
    _outStream << " " << "xmlns:main=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\"";
    _outStream << " " << "xmlns:s=\"http://schemas.openxmlformats.org/officeDocument/2006/sharedTypes\"";
    _outStream << " " << "xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\"";
    _outStream << " " << "xmlns:xdr=\"http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing\"";
    
    if (m_has_guid_attr)
    {
        m_guid_attr->toXmlAttr("guid", _outStream);
    }
    
    
    if (m_has_lastGuid_attr)
    {
        m_lastGuid_attr->toXmlAttr("lastGuid", _outStream);
    }
    
    
    if (m_has_shared_attr)
    {
        _outStream << " " << "shared" << "=\"" << XSD::XMLBooleanStr(m_shared_attr) << "\"";
    }
    
    
    if (m_has_diskRevisions_attr)
    {
        _outStream << " " << "diskRevisions" << "=\"" << XSD::XMLBooleanStr(m_diskRevisions_attr) << "\"";
    }
    
    
    if (m_has_history_attr)
    {
        _outStream << " " << "history" << "=\"" << XSD::XMLBooleanStr(m_history_attr) << "\"";
    }
    
    
    if (m_has_trackRevisions_attr)
    {
        _outStream << " " << "trackRevisions" << "=\"" << XSD::XMLBooleanStr(m_trackRevisions_attr) << "\"";
    }
    
    
    if (m_has_exclusive_attr)
    {
        _outStream << " " << "exclusive" << "=\"" << XSD::XMLBooleanStr(m_exclusive_attr) << "\"";
    }
    
    
    if (m_has_revisionId_attr)
    {
        _outStream << " " << "revisionId" << "=\"" << m_revisionId_attr << "\"";
    }
    
    
    if (m_has_version_attr)
    {
        _outStream << " " << "version" << "=\"" << m_version_attr << "\"";
    }
    
    
    if (m_has_keepChangeHistory_attr)
    {
        _outStream << " " << "keepChangeHistory" << "=\"" << XSD::XMLBooleanStr(m_keepChangeHistory_attr) << "\"";
    }
    
    
    if (m_has_protected_attr)
    {
        _outStream << " " << "protected" << "=\"" << XSD::XMLBooleanStr(m_protected_attr) << "\"";
    }
    
    
    if (m_has_preserveHistory_attr)
    {
        _outStream << " " << "preserveHistory" << "=\"" << m_preserveHistory_attr << "\"";
    }
    
    _outStream << ">";
    
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_header())
            {
                (*iter)->get_header().toXmlElem("main:header", "", _outStream);
            }
        }
    }
    
    _outStream << "</main:headers>";
    }

    const headers_element& headers_element::default_instance()
    {    
    if (!headers_element::default_instance_)
    {
        headers_element::default_instance_ = new headers_element();
    }
    return *headers_element::default_instance_;
    }

    bool headers_element::has_guid_attr() const
    {    
    return m_has_guid_attr;
    }

    void headers_element::set_guid_attr(const ns_s::ST_Guid& _guid_attr)
    {    
    m_has_guid_attr = true;
    m_guid_attr = new ns_s::ST_Guid(_guid_attr);
    }

    const ns_s::ST_Guid& headers_element::get_guid_attr() const
    {    
    if (m_guid_attr)
    {
        return *m_guid_attr;
    }
    return ns_s::ST_Guid::default_instance();
    }

    bool headers_element::has_lastGuid_attr() const
    {    
    return m_has_lastGuid_attr;
    }

    void headers_element::set_lastGuid_attr(const ns_s::ST_Guid& _lastGuid_attr)
    {    
    m_has_lastGuid_attr = true;
    m_lastGuid_attr = new ns_s::ST_Guid(_lastGuid_attr);
    }

    const ns_s::ST_Guid& headers_element::get_lastGuid_attr() const
    {    
    if (m_lastGuid_attr)
    {
        return *m_lastGuid_attr;
    }
    return ns_s::ST_Guid::default_instance();
    }

    bool headers_element::has_shared_attr() const
    {    
    return m_has_shared_attr;
    }

    void headers_element::set_shared_attr(const XSD::boolean_& _shared_attr)
    {    
    m_has_shared_attr = true;
    m_shared_attr = _shared_attr;
    }

    const XSD::boolean_& headers_element::get_shared_attr() const
    {    
    return m_shared_attr;
    }

    bool headers_element::has_diskRevisions_attr() const
    {    
    return m_has_diskRevisions_attr;
    }

    void headers_element::set_diskRevisions_attr(const XSD::boolean_& _diskRevisions_attr)
    {    
    m_has_diskRevisions_attr = true;
    m_diskRevisions_attr = _diskRevisions_attr;
    }

    const XSD::boolean_& headers_element::get_diskRevisions_attr() const
    {    
    return m_diskRevisions_attr;
    }

    bool headers_element::has_history_attr() const
    {    
    return m_has_history_attr;
    }

    void headers_element::set_history_attr(const XSD::boolean_& _history_attr)
    {    
    m_has_history_attr = true;
    m_history_attr = _history_attr;
    }

    const XSD::boolean_& headers_element::get_history_attr() const
    {    
    return m_history_attr;
    }

    bool headers_element::has_trackRevisions_attr() const
    {    
    return m_has_trackRevisions_attr;
    }

    void headers_element::set_trackRevisions_attr(const XSD::boolean_& _trackRevisions_attr)
    {    
    m_has_trackRevisions_attr = true;
    m_trackRevisions_attr = _trackRevisions_attr;
    }

    const XSD::boolean_& headers_element::get_trackRevisions_attr() const
    {    
    return m_trackRevisions_attr;
    }

    bool headers_element::has_exclusive_attr() const
    {    
    return m_has_exclusive_attr;
    }

    void headers_element::set_exclusive_attr(const XSD::boolean_& _exclusive_attr)
    {    
    m_has_exclusive_attr = true;
    m_exclusive_attr = _exclusive_attr;
    }

    const XSD::boolean_& headers_element::get_exclusive_attr() const
    {    
    return m_exclusive_attr;
    }

    bool headers_element::has_revisionId_attr() const
    {    
    return m_has_revisionId_attr;
    }

    void headers_element::set_revisionId_attr(const XSD::unsignedInt_& _revisionId_attr)
    {    
    m_has_revisionId_attr = true;
    m_revisionId_attr = _revisionId_attr;
    }

    const XSD::unsignedInt_& headers_element::get_revisionId_attr() const
    {    
    return m_revisionId_attr;
    }

    bool headers_element::has_version_attr() const
    {    
    return m_has_version_attr;
    }

    void headers_element::set_version_attr(const XSD::int_& _version_attr)
    {    
    m_has_version_attr = true;
    m_version_attr = _version_attr;
    }

    const XSD::int_& headers_element::get_version_attr() const
    {    
    return m_version_attr;
    }

    bool headers_element::has_keepChangeHistory_attr() const
    {    
    return m_has_keepChangeHistory_attr;
    }

    void headers_element::set_keepChangeHistory_attr(const XSD::boolean_& _keepChangeHistory_attr)
    {    
    m_has_keepChangeHistory_attr = true;
    m_keepChangeHistory_attr = _keepChangeHistory_attr;
    }

    const XSD::boolean_& headers_element::get_keepChangeHistory_attr() const
    {    
    return m_keepChangeHistory_attr;
    }

    bool headers_element::has_protected_attr() const
    {    
    return m_has_protected_attr;
    }

    void headers_element::set_protected_attr(const XSD::boolean_& _protected_attr)
    {    
    m_has_protected_attr = true;
    m_protected_attr = _protected_attr;
    }

    const XSD::boolean_& headers_element::get_protected_attr() const
    {    
    return m_protected_attr;
    }

    bool headers_element::has_preserveHistory_attr() const
    {    
    return m_has_preserveHistory_attr;
    }

    void headers_element::set_preserveHistory_attr(const XSD::unsignedInt_& _preserveHistory_attr)
    {    
    m_has_preserveHistory_attr = true;
    m_preserveHistory_attr = _preserveHistory_attr;
    }

    const XSD::unsignedInt_& headers_element::get_preserveHistory_attr() const
    {    
    return m_preserveHistory_attr;
    }


    // headers_element::ChildGroup_1
    headers_element::ChildGroup_1::ChildGroup_1()
    :m_has_header(false),
    m_header(NULL)
    {
    }
    bool headers_element::ChildGroup_1::has_header() const
    {    
    return m_has_header;
    }

    CT_RevisionHeader* headers_element::ChildGroup_1::mutable_header()
    {    
    
    m_has_header = true;
    if (!m_header)
    {
        m_header = new CT_RevisionHeader();
    }
    return m_header;
    }

    const CT_RevisionHeader& headers_element::ChildGroup_1::get_header() const
    {    
    if (m_header)
    {
        return *m_header;
    }
    return CT_RevisionHeader::default_instance();
    }

headers_element* headers_element::default_instance_ = NULL;

    // revisions_element
    revisions_element::revisions_element()

    {
    }
    revisions_element::~revisions_element()
{
    clear();    }
    CT_RevisionRowColumn* revisions_element::add_rrc()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_RevisionRowColumn* pNewChild = pChildGroup->mutable_rrc();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_RevisionMove* revisions_element::add_rm()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_RevisionMove* pNewChild = pChildGroup->mutable_rm();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_RevisionCustomView* revisions_element::add_rcv()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_RevisionCustomView* pNewChild = pChildGroup->mutable_rcv();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_RevisionSheetRename* revisions_element::add_rsnm()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_RevisionSheetRename* pNewChild = pChildGroup->mutable_rsnm();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_RevisionInsertSheet* revisions_element::add_ris()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_RevisionInsertSheet* pNewChild = pChildGroup->mutable_ris();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_RevisionCellChange* revisions_element::add_rcc()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_RevisionCellChange* pNewChild = pChildGroup->mutable_rcc();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_RevisionFormatting* revisions_element::add_rfmt()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_RevisionFormatting* pNewChild = pChildGroup->mutable_rfmt();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_RevisionAutoFormatting* revisions_element::add_raf()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_RevisionAutoFormatting* pNewChild = pChildGroup->mutable_raf();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_RevisionDefinedName* revisions_element::add_rdn()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_RevisionDefinedName* pNewChild = pChildGroup->mutable_rdn();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_RevisionComment* revisions_element::add_rcmt()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_RevisionComment* pNewChild = pChildGroup->mutable_rcmt();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_RevisionQueryTableField* revisions_element::add_rqt()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_RevisionQueryTableField* pNewChild = pChildGroup->mutable_rqt();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_RevisionConflict* revisions_element::add_rcft()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_RevisionConflict* pNewChild = pChildGroup->mutable_rcft();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void revisions_element::clear()
    {    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void revisions_element::toXml(std::ostream& _outStream) const
    {    
    _outStream << "<main:revisions";
    
    _outStream << " " << "xmlns:main=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\"";
    _outStream << " " << "xmlns:s=\"http://schemas.openxmlformats.org/officeDocument/2006/sharedTypes\"";
    _outStream << " " << "xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\"";
    _outStream << " " << "xmlns:xdr=\"http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing\"";
    
    _outStream << ">";
    
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_rrc())
            {
                (*iter)->get_rrc().toXmlElem("main:rrc", "", _outStream);
            }
            else if ((*iter)->has_rm())
            {
                (*iter)->get_rm().toXmlElem("main:rm", "", _outStream);
            }
            else if ((*iter)->has_rcv())
            {
                (*iter)->get_rcv().toXmlElem("main:rcv", "", _outStream);
            }
            else if ((*iter)->has_rsnm())
            {
                (*iter)->get_rsnm().toXmlElem("main:rsnm", "", _outStream);
            }
            else if ((*iter)->has_ris())
            {
                (*iter)->get_ris().toXmlElem("main:ris", "", _outStream);
            }
            else if ((*iter)->has_rcc())
            {
                (*iter)->get_rcc().toXmlElem("main:rcc", "", _outStream);
            }
            else if ((*iter)->has_rfmt())
            {
                (*iter)->get_rfmt().toXmlElem("main:rfmt", "", _outStream);
            }
            else if ((*iter)->has_raf())
            {
                (*iter)->get_raf().toXmlElem("main:raf", "", _outStream);
            }
            else if ((*iter)->has_rdn())
            {
                (*iter)->get_rdn().toXmlElem("main:rdn", "", _outStream);
            }
            else if ((*iter)->has_rcmt())
            {
                (*iter)->get_rcmt().toXmlElem("main:rcmt", "", _outStream);
            }
            else if ((*iter)->has_rqt())
            {
                (*iter)->get_rqt().toXmlElem("main:rqt", "", _outStream);
            }
            else if ((*iter)->has_rcft())
            {
                (*iter)->get_rcft().toXmlElem("main:rcft", "", _outStream);
            }
        }
    }
    
    _outStream << "</main:revisions>";
    }

    const revisions_element& revisions_element::default_instance()
    {    
    if (!revisions_element::default_instance_)
    {
        revisions_element::default_instance_ = new revisions_element();
    }
    return *revisions_element::default_instance_;
    }


    // revisions_element::ChildGroup_1
    revisions_element::ChildGroup_1::ChildGroup_1()
    :m_has_rrc(false),
    m_rrc(NULL),
    m_has_rm(false),
    m_rm(NULL),
    m_has_rcv(false),
    m_rcv(NULL),
    m_has_rsnm(false),
    m_rsnm(NULL),
    m_has_ris(false),
    m_ris(NULL),
    m_has_rcc(false),
    m_rcc(NULL),
    m_has_rfmt(false),
    m_rfmt(NULL),
    m_has_raf(false),
    m_raf(NULL),
    m_has_rdn(false),
    m_rdn(NULL),
    m_has_rcmt(false),
    m_rcmt(NULL),
    m_has_rqt(false),
    m_rqt(NULL),
    m_has_rcft(false),
    m_rcft(NULL)
    {
    }
    bool revisions_element::ChildGroup_1::has_rrc() const
    {    
    return m_has_rrc;
    }

    CT_RevisionRowColumn* revisions_element::ChildGroup_1::mutable_rrc()
    {    
    
    m_has_rm = false;
    
    if (m_rm)
    {
        delete m_rm;
        m_rm = NULL;
    }
    ;
    
    m_has_rcv = false;
    
    if (m_rcv)
    {
        delete m_rcv;
        m_rcv = NULL;
    }
    ;
    
    m_has_rsnm = false;
    
    if (m_rsnm)
    {
        delete m_rsnm;
        m_rsnm = NULL;
    }
    ;
    
    m_has_ris = false;
    
    if (m_ris)
    {
        delete m_ris;
        m_ris = NULL;
    }
    ;
    
    m_has_rcc = false;
    
    if (m_rcc)
    {
        delete m_rcc;
        m_rcc = NULL;
    }
    ;
    
    m_has_rfmt = false;
    
    if (m_rfmt)
    {
        delete m_rfmt;
        m_rfmt = NULL;
    }
    ;
    
    m_has_raf = false;
    
    if (m_raf)
    {
        delete m_raf;
        m_raf = NULL;
    }
    ;
    
    m_has_rdn = false;
    
    if (m_rdn)
    {
        delete m_rdn;
        m_rdn = NULL;
    }
    ;
    
    m_has_rcmt = false;
    
    if (m_rcmt)
    {
        delete m_rcmt;
        m_rcmt = NULL;
    }
    ;
    
    m_has_rqt = false;
    
    if (m_rqt)
    {
        delete m_rqt;
        m_rqt = NULL;
    }
    ;
    
    m_has_rcft = false;
    
    if (m_rcft)
    {
        delete m_rcft;
        m_rcft = NULL;
    }
    ;
    
    m_has_rrc = true;
    if (!m_rrc)
    {
        m_rrc = new CT_RevisionRowColumn();
    }
    return m_rrc;
    }

    const CT_RevisionRowColumn& revisions_element::ChildGroup_1::get_rrc() const
    {    
    if (m_rrc)
    {
        return *m_rrc;
    }
    return CT_RevisionRowColumn::default_instance();
    }

    bool revisions_element::ChildGroup_1::has_rm() const
    {    
    return m_has_rm;
    }

    CT_RevisionMove* revisions_element::ChildGroup_1::mutable_rm()
    {    
    
    m_has_rrc = false;
    
    if (m_rrc)
    {
        delete m_rrc;
        m_rrc = NULL;
    }
    ;
    
    m_has_rcv = false;
    
    if (m_rcv)
    {
        delete m_rcv;
        m_rcv = NULL;
    }
    ;
    
    m_has_rsnm = false;
    
    if (m_rsnm)
    {
        delete m_rsnm;
        m_rsnm = NULL;
    }
    ;
    
    m_has_ris = false;
    
    if (m_ris)
    {
        delete m_ris;
        m_ris = NULL;
    }
    ;
    
    m_has_rcc = false;
    
    if (m_rcc)
    {
        delete m_rcc;
        m_rcc = NULL;
    }
    ;
    
    m_has_rfmt = false;
    
    if (m_rfmt)
    {
        delete m_rfmt;
        m_rfmt = NULL;
    }
    ;
    
    m_has_raf = false;
    
    if (m_raf)
    {
        delete m_raf;
        m_raf = NULL;
    }
    ;
    
    m_has_rdn = false;
    
    if (m_rdn)
    {
        delete m_rdn;
        m_rdn = NULL;
    }
    ;
    
    m_has_rcmt = false;
    
    if (m_rcmt)
    {
        delete m_rcmt;
        m_rcmt = NULL;
    }
    ;
    
    m_has_rqt = false;
    
    if (m_rqt)
    {
        delete m_rqt;
        m_rqt = NULL;
    }
    ;
    
    m_has_rcft = false;
    
    if (m_rcft)
    {
        delete m_rcft;
        m_rcft = NULL;
    }
    ;
    
    m_has_rm = true;
    if (!m_rm)
    {
        m_rm = new CT_RevisionMove();
    }
    return m_rm;
    }

    const CT_RevisionMove& revisions_element::ChildGroup_1::get_rm() const
    {    
    if (m_rm)
    {
        return *m_rm;
    }
    return CT_RevisionMove::default_instance();
    }

    bool revisions_element::ChildGroup_1::has_rcv() const
    {    
    return m_has_rcv;
    }

    CT_RevisionCustomView* revisions_element::ChildGroup_1::mutable_rcv()
    {    
    
    m_has_rrc = false;
    
    if (m_rrc)
    {
        delete m_rrc;
        m_rrc = NULL;
    }
    ;
    
    m_has_rm = false;
    
    if (m_rm)
    {
        delete m_rm;
        m_rm = NULL;
    }
    ;
    
    m_has_rsnm = false;
    
    if (m_rsnm)
    {
        delete m_rsnm;
        m_rsnm = NULL;
    }
    ;
    
    m_has_ris = false;
    
    if (m_ris)
    {
        delete m_ris;
        m_ris = NULL;
    }
    ;
    
    m_has_rcc = false;
    
    if (m_rcc)
    {
        delete m_rcc;
        m_rcc = NULL;
    }
    ;
    
    m_has_rfmt = false;
    
    if (m_rfmt)
    {
        delete m_rfmt;
        m_rfmt = NULL;
    }
    ;
    
    m_has_raf = false;
    
    if (m_raf)
    {
        delete m_raf;
        m_raf = NULL;
    }
    ;
    
    m_has_rdn = false;
    
    if (m_rdn)
    {
        delete m_rdn;
        m_rdn = NULL;
    }
    ;
    
    m_has_rcmt = false;
    
    if (m_rcmt)
    {
        delete m_rcmt;
        m_rcmt = NULL;
    }
    ;
    
    m_has_rqt = false;
    
    if (m_rqt)
    {
        delete m_rqt;
        m_rqt = NULL;
    }
    ;
    
    m_has_rcft = false;
    
    if (m_rcft)
    {
        delete m_rcft;
        m_rcft = NULL;
    }
    ;
    
    m_has_rcv = true;
    if (!m_rcv)
    {
        m_rcv = new CT_RevisionCustomView();
    }
    return m_rcv;
    }

    const CT_RevisionCustomView& revisions_element::ChildGroup_1::get_rcv() const
    {    
    if (m_rcv)
    {
        return *m_rcv;
    }
    return CT_RevisionCustomView::default_instance();
    }

    bool revisions_element::ChildGroup_1::has_rsnm() const
    {    
    return m_has_rsnm;
    }

    CT_RevisionSheetRename* revisions_element::ChildGroup_1::mutable_rsnm()
    {    
    
    m_has_rrc = false;
    
    if (m_rrc)
    {
        delete m_rrc;
        m_rrc = NULL;
    }
    ;
    
    m_has_rm = false;
    
    if (m_rm)
    {
        delete m_rm;
        m_rm = NULL;
    }
    ;
    
    m_has_rcv = false;
    
    if (m_rcv)
    {
        delete m_rcv;
        m_rcv = NULL;
    }
    ;
    
    m_has_ris = false;
    
    if (m_ris)
    {
        delete m_ris;
        m_ris = NULL;
    }
    ;
    
    m_has_rcc = false;
    
    if (m_rcc)
    {
        delete m_rcc;
        m_rcc = NULL;
    }
    ;
    
    m_has_rfmt = false;
    
    if (m_rfmt)
    {
        delete m_rfmt;
        m_rfmt = NULL;
    }
    ;
    
    m_has_raf = false;
    
    if (m_raf)
    {
        delete m_raf;
        m_raf = NULL;
    }
    ;
    
    m_has_rdn = false;
    
    if (m_rdn)
    {
        delete m_rdn;
        m_rdn = NULL;
    }
    ;
    
    m_has_rcmt = false;
    
    if (m_rcmt)
    {
        delete m_rcmt;
        m_rcmt = NULL;
    }
    ;
    
    m_has_rqt = false;
    
    if (m_rqt)
    {
        delete m_rqt;
        m_rqt = NULL;
    }
    ;
    
    m_has_rcft = false;
    
    if (m_rcft)
    {
        delete m_rcft;
        m_rcft = NULL;
    }
    ;
    
    m_has_rsnm = true;
    if (!m_rsnm)
    {
        m_rsnm = new CT_RevisionSheetRename();
    }
    return m_rsnm;
    }

    const CT_RevisionSheetRename& revisions_element::ChildGroup_1::get_rsnm() const
    {    
    if (m_rsnm)
    {
        return *m_rsnm;
    }
    return CT_RevisionSheetRename::default_instance();
    }

    bool revisions_element::ChildGroup_1::has_ris() const
    {    
    return m_has_ris;
    }

    CT_RevisionInsertSheet* revisions_element::ChildGroup_1::mutable_ris()
    {    
    
    m_has_rrc = false;
    
    if (m_rrc)
    {
        delete m_rrc;
        m_rrc = NULL;
    }
    ;
    
    m_has_rm = false;
    
    if (m_rm)
    {
        delete m_rm;
        m_rm = NULL;
    }
    ;
    
    m_has_rcv = false;
    
    if (m_rcv)
    {
        delete m_rcv;
        m_rcv = NULL;
    }
    ;
    
    m_has_rsnm = false;
    
    if (m_rsnm)
    {
        delete m_rsnm;
        m_rsnm = NULL;
    }
    ;
    
    m_has_rcc = false;
    
    if (m_rcc)
    {
        delete m_rcc;
        m_rcc = NULL;
    }
    ;
    
    m_has_rfmt = false;
    
    if (m_rfmt)
    {
        delete m_rfmt;
        m_rfmt = NULL;
    }
    ;
    
    m_has_raf = false;
    
    if (m_raf)
    {
        delete m_raf;
        m_raf = NULL;
    }
    ;
    
    m_has_rdn = false;
    
    if (m_rdn)
    {
        delete m_rdn;
        m_rdn = NULL;
    }
    ;
    
    m_has_rcmt = false;
    
    if (m_rcmt)
    {
        delete m_rcmt;
        m_rcmt = NULL;
    }
    ;
    
    m_has_rqt = false;
    
    if (m_rqt)
    {
        delete m_rqt;
        m_rqt = NULL;
    }
    ;
    
    m_has_rcft = false;
    
    if (m_rcft)
    {
        delete m_rcft;
        m_rcft = NULL;
    }
    ;
    
    m_has_ris = true;
    if (!m_ris)
    {
        m_ris = new CT_RevisionInsertSheet();
    }
    return m_ris;
    }

    const CT_RevisionInsertSheet& revisions_element::ChildGroup_1::get_ris() const
    {    
    if (m_ris)
    {
        return *m_ris;
    }
    return CT_RevisionInsertSheet::default_instance();
    }

    bool revisions_element::ChildGroup_1::has_rcc() const
    {    
    return m_has_rcc;
    }

    CT_RevisionCellChange* revisions_element::ChildGroup_1::mutable_rcc()
    {    
    
    m_has_rrc = false;
    
    if (m_rrc)
    {
        delete m_rrc;
        m_rrc = NULL;
    }
    ;
    
    m_has_rm = false;
    
    if (m_rm)
    {
        delete m_rm;
        m_rm = NULL;
    }
    ;
    
    m_has_rcv = false;
    
    if (m_rcv)
    {
        delete m_rcv;
        m_rcv = NULL;
    }
    ;
    
    m_has_rsnm = false;
    
    if (m_rsnm)
    {
        delete m_rsnm;
        m_rsnm = NULL;
    }
    ;
    
    m_has_ris = false;
    
    if (m_ris)
    {
        delete m_ris;
        m_ris = NULL;
    }
    ;
    
    m_has_rfmt = false;
    
    if (m_rfmt)
    {
        delete m_rfmt;
        m_rfmt = NULL;
    }
    ;
    
    m_has_raf = false;
    
    if (m_raf)
    {
        delete m_raf;
        m_raf = NULL;
    }
    ;
    
    m_has_rdn = false;
    
    if (m_rdn)
    {
        delete m_rdn;
        m_rdn = NULL;
    }
    ;
    
    m_has_rcmt = false;
    
    if (m_rcmt)
    {
        delete m_rcmt;
        m_rcmt = NULL;
    }
    ;
    
    m_has_rqt = false;
    
    if (m_rqt)
    {
        delete m_rqt;
        m_rqt = NULL;
    }
    ;
    
    m_has_rcft = false;
    
    if (m_rcft)
    {
        delete m_rcft;
        m_rcft = NULL;
    }
    ;
    
    m_has_rcc = true;
    if (!m_rcc)
    {
        m_rcc = new CT_RevisionCellChange();
    }
    return m_rcc;
    }

    const CT_RevisionCellChange& revisions_element::ChildGroup_1::get_rcc() const
    {    
    if (m_rcc)
    {
        return *m_rcc;
    }
    return CT_RevisionCellChange::default_instance();
    }

    bool revisions_element::ChildGroup_1::has_rfmt() const
    {    
    return m_has_rfmt;
    }

    CT_RevisionFormatting* revisions_element::ChildGroup_1::mutable_rfmt()
    {    
    
    m_has_rrc = false;
    
    if (m_rrc)
    {
        delete m_rrc;
        m_rrc = NULL;
    }
    ;
    
    m_has_rm = false;
    
    if (m_rm)
    {
        delete m_rm;
        m_rm = NULL;
    }
    ;
    
    m_has_rcv = false;
    
    if (m_rcv)
    {
        delete m_rcv;
        m_rcv = NULL;
    }
    ;
    
    m_has_rsnm = false;
    
    if (m_rsnm)
    {
        delete m_rsnm;
        m_rsnm = NULL;
    }
    ;
    
    m_has_ris = false;
    
    if (m_ris)
    {
        delete m_ris;
        m_ris = NULL;
    }
    ;
    
    m_has_rcc = false;
    
    if (m_rcc)
    {
        delete m_rcc;
        m_rcc = NULL;
    }
    ;
    
    m_has_raf = false;
    
    if (m_raf)
    {
        delete m_raf;
        m_raf = NULL;
    }
    ;
    
    m_has_rdn = false;
    
    if (m_rdn)
    {
        delete m_rdn;
        m_rdn = NULL;
    }
    ;
    
    m_has_rcmt = false;
    
    if (m_rcmt)
    {
        delete m_rcmt;
        m_rcmt = NULL;
    }
    ;
    
    m_has_rqt = false;
    
    if (m_rqt)
    {
        delete m_rqt;
        m_rqt = NULL;
    }
    ;
    
    m_has_rcft = false;
    
    if (m_rcft)
    {
        delete m_rcft;
        m_rcft = NULL;
    }
    ;
    
    m_has_rfmt = true;
    if (!m_rfmt)
    {
        m_rfmt = new CT_RevisionFormatting();
    }
    return m_rfmt;
    }

    const CT_RevisionFormatting& revisions_element::ChildGroup_1::get_rfmt() const
    {    
    if (m_rfmt)
    {
        return *m_rfmt;
    }
    return CT_RevisionFormatting::default_instance();
    }

    bool revisions_element::ChildGroup_1::has_raf() const
    {    
    return m_has_raf;
    }

    CT_RevisionAutoFormatting* revisions_element::ChildGroup_1::mutable_raf()
    {    
    
    m_has_rrc = false;
    
    if (m_rrc)
    {
        delete m_rrc;
        m_rrc = NULL;
    }
    ;
    
    m_has_rm = false;
    
    if (m_rm)
    {
        delete m_rm;
        m_rm = NULL;
    }
    ;
    
    m_has_rcv = false;
    
    if (m_rcv)
    {
        delete m_rcv;
        m_rcv = NULL;
    }
    ;
    
    m_has_rsnm = false;
    
    if (m_rsnm)
    {
        delete m_rsnm;
        m_rsnm = NULL;
    }
    ;
    
    m_has_ris = false;
    
    if (m_ris)
    {
        delete m_ris;
        m_ris = NULL;
    }
    ;
    
    m_has_rcc = false;
    
    if (m_rcc)
    {
        delete m_rcc;
        m_rcc = NULL;
    }
    ;
    
    m_has_rfmt = false;
    
    if (m_rfmt)
    {
        delete m_rfmt;
        m_rfmt = NULL;
    }
    ;
    
    m_has_rdn = false;
    
    if (m_rdn)
    {
        delete m_rdn;
        m_rdn = NULL;
    }
    ;
    
    m_has_rcmt = false;
    
    if (m_rcmt)
    {
        delete m_rcmt;
        m_rcmt = NULL;
    }
    ;
    
    m_has_rqt = false;
    
    if (m_rqt)
    {
        delete m_rqt;
        m_rqt = NULL;
    }
    ;
    
    m_has_rcft = false;
    
    if (m_rcft)
    {
        delete m_rcft;
        m_rcft = NULL;
    }
    ;
    
    m_has_raf = true;
    if (!m_raf)
    {
        m_raf = new CT_RevisionAutoFormatting();
    }
    return m_raf;
    }

    const CT_RevisionAutoFormatting& revisions_element::ChildGroup_1::get_raf() const
    {    
    if (m_raf)
    {
        return *m_raf;
    }
    return CT_RevisionAutoFormatting::default_instance();
    }

    bool revisions_element::ChildGroup_1::has_rdn() const
    {    
    return m_has_rdn;
    }

    CT_RevisionDefinedName* revisions_element::ChildGroup_1::mutable_rdn()
    {    
    
    m_has_rrc = false;
    
    if (m_rrc)
    {
        delete m_rrc;
        m_rrc = NULL;
    }
    ;
    
    m_has_rm = false;
    
    if (m_rm)
    {
        delete m_rm;
        m_rm = NULL;
    }
    ;
    
    m_has_rcv = false;
    
    if (m_rcv)
    {
        delete m_rcv;
        m_rcv = NULL;
    }
    ;
    
    m_has_rsnm = false;
    
    if (m_rsnm)
    {
        delete m_rsnm;
        m_rsnm = NULL;
    }
    ;
    
    m_has_ris = false;
    
    if (m_ris)
    {
        delete m_ris;
        m_ris = NULL;
    }
    ;
    
    m_has_rcc = false;
    
    if (m_rcc)
    {
        delete m_rcc;
        m_rcc = NULL;
    }
    ;
    
    m_has_rfmt = false;
    
    if (m_rfmt)
    {
        delete m_rfmt;
        m_rfmt = NULL;
    }
    ;
    
    m_has_raf = false;
    
    if (m_raf)
    {
        delete m_raf;
        m_raf = NULL;
    }
    ;
    
    m_has_rcmt = false;
    
    if (m_rcmt)
    {
        delete m_rcmt;
        m_rcmt = NULL;
    }
    ;
    
    m_has_rqt = false;
    
    if (m_rqt)
    {
        delete m_rqt;
        m_rqt = NULL;
    }
    ;
    
    m_has_rcft = false;
    
    if (m_rcft)
    {
        delete m_rcft;
        m_rcft = NULL;
    }
    ;
    
    m_has_rdn = true;
    if (!m_rdn)
    {
        m_rdn = new CT_RevisionDefinedName();
    }
    return m_rdn;
    }

    const CT_RevisionDefinedName& revisions_element::ChildGroup_1::get_rdn() const
    {    
    if (m_rdn)
    {
        return *m_rdn;
    }
    return CT_RevisionDefinedName::default_instance();
    }

    bool revisions_element::ChildGroup_1::has_rcmt() const
    {    
    return m_has_rcmt;
    }

    CT_RevisionComment* revisions_element::ChildGroup_1::mutable_rcmt()
    {    
    
    m_has_rrc = false;
    
    if (m_rrc)
    {
        delete m_rrc;
        m_rrc = NULL;
    }
    ;
    
    m_has_rm = false;
    
    if (m_rm)
    {
        delete m_rm;
        m_rm = NULL;
    }
    ;
    
    m_has_rcv = false;
    
    if (m_rcv)
    {
        delete m_rcv;
        m_rcv = NULL;
    }
    ;
    
    m_has_rsnm = false;
    
    if (m_rsnm)
    {
        delete m_rsnm;
        m_rsnm = NULL;
    }
    ;
    
    m_has_ris = false;
    
    if (m_ris)
    {
        delete m_ris;
        m_ris = NULL;
    }
    ;
    
    m_has_rcc = false;
    
    if (m_rcc)
    {
        delete m_rcc;
        m_rcc = NULL;
    }
    ;
    
    m_has_rfmt = false;
    
    if (m_rfmt)
    {
        delete m_rfmt;
        m_rfmt = NULL;
    }
    ;
    
    m_has_raf = false;
    
    if (m_raf)
    {
        delete m_raf;
        m_raf = NULL;
    }
    ;
    
    m_has_rdn = false;
    
    if (m_rdn)
    {
        delete m_rdn;
        m_rdn = NULL;
    }
    ;
    
    m_has_rqt = false;
    
    if (m_rqt)
    {
        delete m_rqt;
        m_rqt = NULL;
    }
    ;
    
    m_has_rcft = false;
    
    if (m_rcft)
    {
        delete m_rcft;
        m_rcft = NULL;
    }
    ;
    
    m_has_rcmt = true;
    if (!m_rcmt)
    {
        m_rcmt = new CT_RevisionComment();
    }
    return m_rcmt;
    }

    const CT_RevisionComment& revisions_element::ChildGroup_1::get_rcmt() const
    {    
    if (m_rcmt)
    {
        return *m_rcmt;
    }
    return CT_RevisionComment::default_instance();
    }

    bool revisions_element::ChildGroup_1::has_rqt() const
    {    
    return m_has_rqt;
    }

    CT_RevisionQueryTableField* revisions_element::ChildGroup_1::mutable_rqt()
    {    
    
    m_has_rrc = false;
    
    if (m_rrc)
    {
        delete m_rrc;
        m_rrc = NULL;
    }
    ;
    
    m_has_rm = false;
    
    if (m_rm)
    {
        delete m_rm;
        m_rm = NULL;
    }
    ;
    
    m_has_rcv = false;
    
    if (m_rcv)
    {
        delete m_rcv;
        m_rcv = NULL;
    }
    ;
    
    m_has_rsnm = false;
    
    if (m_rsnm)
    {
        delete m_rsnm;
        m_rsnm = NULL;
    }
    ;
    
    m_has_ris = false;
    
    if (m_ris)
    {
        delete m_ris;
        m_ris = NULL;
    }
    ;
    
    m_has_rcc = false;
    
    if (m_rcc)
    {
        delete m_rcc;
        m_rcc = NULL;
    }
    ;
    
    m_has_rfmt = false;
    
    if (m_rfmt)
    {
        delete m_rfmt;
        m_rfmt = NULL;
    }
    ;
    
    m_has_raf = false;
    
    if (m_raf)
    {
        delete m_raf;
        m_raf = NULL;
    }
    ;
    
    m_has_rdn = false;
    
    if (m_rdn)
    {
        delete m_rdn;
        m_rdn = NULL;
    }
    ;
    
    m_has_rcmt = false;
    
    if (m_rcmt)
    {
        delete m_rcmt;
        m_rcmt = NULL;
    }
    ;
    
    m_has_rcft = false;
    
    if (m_rcft)
    {
        delete m_rcft;
        m_rcft = NULL;
    }
    ;
    
    m_has_rqt = true;
    if (!m_rqt)
    {
        m_rqt = new CT_RevisionQueryTableField();
    }
    return m_rqt;
    }

    const CT_RevisionQueryTableField& revisions_element::ChildGroup_1::get_rqt() const
    {    
    if (m_rqt)
    {
        return *m_rqt;
    }
    return CT_RevisionQueryTableField::default_instance();
    }

    bool revisions_element::ChildGroup_1::has_rcft() const
    {    
    return m_has_rcft;
    }

    CT_RevisionConflict* revisions_element::ChildGroup_1::mutable_rcft()
    {    
    
    m_has_rrc = false;
    
    if (m_rrc)
    {
        delete m_rrc;
        m_rrc = NULL;
    }
    ;
    
    m_has_rm = false;
    
    if (m_rm)
    {
        delete m_rm;
        m_rm = NULL;
    }
    ;
    
    m_has_rcv = false;
    
    if (m_rcv)
    {
        delete m_rcv;
        m_rcv = NULL;
    }
    ;
    
    m_has_rsnm = false;
    
    if (m_rsnm)
    {
        delete m_rsnm;
        m_rsnm = NULL;
    }
    ;
    
    m_has_ris = false;
    
    if (m_ris)
    {
        delete m_ris;
        m_ris = NULL;
    }
    ;
    
    m_has_rcc = false;
    
    if (m_rcc)
    {
        delete m_rcc;
        m_rcc = NULL;
    }
    ;
    
    m_has_rfmt = false;
    
    if (m_rfmt)
    {
        delete m_rfmt;
        m_rfmt = NULL;
    }
    ;
    
    m_has_raf = false;
    
    if (m_raf)
    {
        delete m_raf;
        m_raf = NULL;
    }
    ;
    
    m_has_rdn = false;
    
    if (m_rdn)
    {
        delete m_rdn;
        m_rdn = NULL;
    }
    ;
    
    m_has_rcmt = false;
    
    if (m_rcmt)
    {
        delete m_rcmt;
        m_rcmt = NULL;
    }
    ;
    
    m_has_rqt = false;
    
    if (m_rqt)
    {
        delete m_rqt;
        m_rqt = NULL;
    }
    ;
    
    m_has_rcft = true;
    if (!m_rcft)
    {
        m_rcft = new CT_RevisionConflict();
    }
    return m_rcft;
    }

    const CT_RevisionConflict& revisions_element::ChildGroup_1::get_rcft() const
    {    
    if (m_rcft)
    {
        return *m_rcft;
    }
    return CT_RevisionConflict::default_instance();
    }

revisions_element* revisions_element::default_instance_ = NULL;

    // users_element
    users_element::users_element()
    :m_has_count_attr(false),
    m_count_attr(0)
    {
    }
    users_element::~users_element()
{
    clear();    }
    CT_SharedUser* users_element::add_userInfo()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_SharedUser* pNewChild = pChildGroup->mutable_userInfo();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void users_element::clear()
    {    
    m_has_count_attr = false;
    m_count_attr = 0;
    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void users_element::toXml(std::ostream& _outStream) const
    {    
    _outStream << "<main:users";
    
    _outStream << " " << "xmlns:main=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\"";
    _outStream << " " << "xmlns:s=\"http://schemas.openxmlformats.org/officeDocument/2006/sharedTypes\"";
    _outStream << " " << "xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\"";
    _outStream << " " << "xmlns:xdr=\"http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing\"";
    
    if (m_has_count_attr)
    {
        _outStream << " " << "count" << "=\"" << m_count_attr << "\"";
    }
    
    _outStream << ">";
    
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_userInfo())
            {
                (*iter)->get_userInfo().toXmlElem("main:userInfo", "", _outStream);
            }
        }
    }
    
    _outStream << "</main:users>";
    }

    const users_element& users_element::default_instance()
    {    
    if (!users_element::default_instance_)
    {
        users_element::default_instance_ = new users_element();
    }
    return *users_element::default_instance_;
    }

    bool users_element::has_count_attr() const
    {    
    return m_has_count_attr;
    }

    void users_element::set_count_attr(const XSD::unsignedInt_& _count_attr)
    {    
    m_has_count_attr = true;
    m_count_attr = _count_attr;
    }

    const XSD::unsignedInt_& users_element::get_count_attr() const
    {    
    return m_count_attr;
    }


    // users_element::ChildGroup_1
    users_element::ChildGroup_1::ChildGroup_1()
    :m_has_userInfo(false),
    m_userInfo(NULL)
    {
    }
    bool users_element::ChildGroup_1::has_userInfo() const
    {    
    return m_has_userInfo;
    }

    CT_SharedUser* users_element::ChildGroup_1::mutable_userInfo()
    {    
    
    m_has_userInfo = true;
    if (!m_userInfo)
    {
        m_userInfo = new CT_SharedUser();
    }
    return m_userInfo;
    }

    const CT_SharedUser& users_element::ChildGroup_1::get_userInfo() const
    {    
    if (m_userInfo)
    {
        return *m_userInfo;
    }
    return CT_SharedUser::default_instance();
    }

users_element* users_element::default_instance_ = NULL;

    // worksheet_element
    worksheet_element::worksheet_element()
    :m_has_sheetPr(false),
    m_sheetPr(NULL),
    m_has_dimension(false),
    m_dimension(NULL),
    m_has_sheetViews(false),
    m_sheetViews(NULL),
    m_has_sheetFormatPr(false),
    m_sheetFormatPr(NULL)
    {
    }
    worksheet_element::~worksheet_element()
{
    clear();    }
    bool worksheet_element::has_sheetPr() const
    {    
    return m_has_sheetPr;
    }

    CT_SheetPr* worksheet_element::mutable_sheetPr()
    {    
    m_has_sheetPr = true;
    if (!m_sheetPr)
    {
        m_sheetPr = new CT_SheetPr();
    }
    return m_sheetPr;
    }

    const CT_SheetPr& worksheet_element::get_sheetPr() const
    {    
    if (m_sheetPr)
    {
        return *m_sheetPr;
    }
    return CT_SheetPr::default_instance();
    }

    bool worksheet_element::has_dimension() const
    {    
    return m_has_dimension;
    }

    CT_SheetDimension* worksheet_element::mutable_dimension()
    {    
    m_has_dimension = true;
    if (!m_dimension)
    {
        m_dimension = new CT_SheetDimension();
    }
    return m_dimension;
    }

    const CT_SheetDimension& worksheet_element::get_dimension() const
    {    
    if (m_dimension)
    {
        return *m_dimension;
    }
    return CT_SheetDimension::default_instance();
    }

    bool worksheet_element::has_sheetViews() const
    {    
    return m_has_sheetViews;
    }

    CT_SheetViews* worksheet_element::mutable_sheetViews()
    {    
    m_has_sheetViews = true;
    if (!m_sheetViews)
    {
        m_sheetViews = new CT_SheetViews();
    }
    return m_sheetViews;
    }

    const CT_SheetViews& worksheet_element::get_sheetViews() const
    {    
    if (m_sheetViews)
    {
        return *m_sheetViews;
    }
    return CT_SheetViews::default_instance();
    }

    bool worksheet_element::has_sheetFormatPr() const
    {    
    return m_has_sheetFormatPr;
    }

    CT_SheetFormatPr* worksheet_element::mutable_sheetFormatPr()
    {    
    m_has_sheetFormatPr = true;
    if (!m_sheetFormatPr)
    {
        m_sheetFormatPr = new CT_SheetFormatPr();
    }
    return m_sheetFormatPr;
    }

    const CT_SheetFormatPr& worksheet_element::get_sheetFormatPr() const
    {    
    if (m_sheetFormatPr)
    {
        return *m_sheetFormatPr;
    }
    return CT_SheetFormatPr::default_instance();
    }

    CT_Cols* worksheet_element::add_cols()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Cols* pNewChild = pChildGroup->mutable_cols();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_SheetData* worksheet_element::add_sheetData()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_SheetData* pNewChild = pChildGroup->mutable_sheetData();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_SheetCalcPr* worksheet_element::add_sheetCalcPr()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_SheetCalcPr* pNewChild = pChildGroup->mutable_sheetCalcPr();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_SheetProtection* worksheet_element::add_sheetProtection()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_SheetProtection* pNewChild = pChildGroup->mutable_sheetProtection();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_ProtectedRanges* worksheet_element::add_protectedRanges()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_ProtectedRanges* pNewChild = pChildGroup->mutable_protectedRanges();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_Scenarios* worksheet_element::add_scenarios()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Scenarios* pNewChild = pChildGroup->mutable_scenarios();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_AutoFilter* worksheet_element::add_autoFilter()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_AutoFilter* pNewChild = pChildGroup->mutable_autoFilter();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_SortState* worksheet_element::add_sortState()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_SortState* pNewChild = pChildGroup->mutable_sortState();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_DataConsolidate* worksheet_element::add_dataConsolidate()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_DataConsolidate* pNewChild = pChildGroup->mutable_dataConsolidate();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_CustomSheetViews* worksheet_element::add_customSheetViews()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_CustomSheetViews* pNewChild = pChildGroup->mutable_customSheetViews();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_MergeCells* worksheet_element::add_mergeCells()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_MergeCells* pNewChild = pChildGroup->mutable_mergeCells();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_PhoneticPr* worksheet_element::add_phoneticPr()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_PhoneticPr* pNewChild = pChildGroup->mutable_phoneticPr();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_ConditionalFormatting* worksheet_element::add_conditionalFormatting()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_ConditionalFormatting* pNewChild = pChildGroup->mutable_conditionalFormatting();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_DataValidations* worksheet_element::add_dataValidations()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_DataValidations* pNewChild = pChildGroup->mutable_dataValidations();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_Hyperlinks* worksheet_element::add_hyperlinks()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Hyperlinks* pNewChild = pChildGroup->mutable_hyperlinks();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_PrintOptions* worksheet_element::add_printOptions()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_PrintOptions* pNewChild = pChildGroup->mutable_printOptions();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_PageMargins* worksheet_element::add_pageMargins()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_PageMargins* pNewChild = pChildGroup->mutable_pageMargins();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_PageSetup* worksheet_element::add_pageSetup()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_PageSetup* pNewChild = pChildGroup->mutable_pageSetup();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_HeaderFooter* worksheet_element::add_headerFooter()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_HeaderFooter* pNewChild = pChildGroup->mutable_headerFooter();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_PageBreak* worksheet_element::add_rowBreaks()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_PageBreak* pNewChild = pChildGroup->mutable_rowBreaks();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_PageBreak* worksheet_element::add_colBreaks()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_PageBreak* pNewChild = pChildGroup->mutable_colBreaks();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_CustomProperties* worksheet_element::add_customProperties()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_CustomProperties* pNewChild = pChildGroup->mutable_customProperties();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_CellWatches* worksheet_element::add_cellWatches()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_CellWatches* pNewChild = pChildGroup->mutable_cellWatches();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_IgnoredErrors* worksheet_element::add_ignoredErrors()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_IgnoredErrors* pNewChild = pChildGroup->mutable_ignoredErrors();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_SmartTags* worksheet_element::add_smartTags()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_SmartTags* pNewChild = pChildGroup->mutable_smartTags();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_Drawing* worksheet_element::add_drawing()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Drawing* pNewChild = pChildGroup->mutable_drawing();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_LegacyDrawing* worksheet_element::add_legacyDrawing()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_LegacyDrawing* pNewChild = pChildGroup->mutable_legacyDrawing();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_LegacyDrawing* worksheet_element::add_legacyDrawingHF()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_LegacyDrawing* pNewChild = pChildGroup->mutable_legacyDrawingHF();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_DrawingHF* worksheet_element::add_drawingHF()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_DrawingHF* pNewChild = pChildGroup->mutable_drawingHF();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_SheetBackgroundPicture* worksheet_element::add_picture()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_SheetBackgroundPicture* pNewChild = pChildGroup->mutable_picture();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_OleObjects* worksheet_element::add_oleObjects()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_OleObjects* pNewChild = pChildGroup->mutable_oleObjects();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_Controls* worksheet_element::add_controls()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_Controls* pNewChild = pChildGroup->mutable_controls();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_WebPublishItems* worksheet_element::add_webPublishItems()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_WebPublishItems* pNewChild = pChildGroup->mutable_webPublishItems();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_TableParts* worksheet_element::add_tableParts()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_TableParts* pNewChild = pChildGroup->mutable_tableParts();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_ExtensionList* worksheet_element::add_extLst()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_ExtensionList* pNewChild = pChildGroup->mutable_extLst();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void worksheet_element::clear()
    {    
    m_has_sheetPr = false;
    
    if (m_sheetPr)
    {
        delete m_sheetPr;
        m_sheetPr = NULL;
    }
    
    
    m_has_dimension = false;
    
    if (m_dimension)
    {
        delete m_dimension;
        m_dimension = NULL;
    }
    
    
    m_has_sheetViews = false;
    
    if (m_sheetViews)
    {
        delete m_sheetViews;
        m_sheetViews = NULL;
    }
    
    
    m_has_sheetFormatPr = false;
    
    if (m_sheetFormatPr)
    {
        delete m_sheetFormatPr;
        m_sheetFormatPr = NULL;
    }
    
     
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void worksheet_element::toXml(std::ostream& _outStream) const
    {    
    _outStream << "<main:worksheet";
    
    _outStream << " " << "xmlns:main=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\"";
    _outStream << " " << "xmlns:s=\"http://schemas.openxmlformats.org/officeDocument/2006/sharedTypes\"";
    _outStream << " " << "xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\"";
    _outStream << " " << "xmlns:xdr=\"http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing\"";
    
    _outStream << ">";
    
    if (m_has_sheetPr)
    {
        m_sheetPr->toXmlElem("main:sheetPr", "", _outStream);;
    }
    
    if (m_has_dimension)
    {
        m_dimension->toXmlElem("main:dimension", "", _outStream);;
    }
    
    if (m_has_sheetViews)
    {
        m_sheetViews->toXmlElem("main:sheetViews", "", _outStream);;
    }
    
    if (m_has_sheetFormatPr)
    {
        m_sheetFormatPr->toXmlElem("main:sheetFormatPr", "", _outStream);;
    }
     
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_cols())
            {
                (*iter)->get_cols().toXmlElem("main:cols", "", _outStream);
            }
            else if ((*iter)->has_sheetData())
            {
                (*iter)->get_sheetData().toXmlElem("main:sheetData", "", _outStream);
            }
            else if ((*iter)->has_sheetCalcPr())
            {
                (*iter)->get_sheetCalcPr().toXmlElem("main:sheetCalcPr", "", _outStream);
            }
            else if ((*iter)->has_sheetProtection())
            {
                (*iter)->get_sheetProtection().toXmlElem("main:sheetProtection", "", _outStream);
            }
            else if ((*iter)->has_protectedRanges())
            {
                (*iter)->get_protectedRanges().toXmlElem("main:protectedRanges", "", _outStream);
            }
            else if ((*iter)->has_scenarios())
            {
                (*iter)->get_scenarios().toXmlElem("main:scenarios", "", _outStream);
            }
            else if ((*iter)->has_autoFilter())
            {
                (*iter)->get_autoFilter().toXmlElem("main:autoFilter", "", _outStream);
            }
            else if ((*iter)->has_sortState())
            {
                (*iter)->get_sortState().toXmlElem("main:sortState", "", _outStream);
            }
            else if ((*iter)->has_dataConsolidate())
            {
                (*iter)->get_dataConsolidate().toXmlElem("main:dataConsolidate", "", _outStream);
            }
            else if ((*iter)->has_customSheetViews())
            {
                (*iter)->get_customSheetViews().toXmlElem("main:customSheetViews", "", _outStream);
            }
            else if ((*iter)->has_mergeCells())
            {
                (*iter)->get_mergeCells().toXmlElem("main:mergeCells", "", _outStream);
            }
            else if ((*iter)->has_phoneticPr())
            {
                (*iter)->get_phoneticPr().toXmlElem("main:phoneticPr", "", _outStream);
            }
            else if ((*iter)->has_conditionalFormatting())
            {
                (*iter)->get_conditionalFormatting().toXmlElem("main:conditionalFormatting", "", _outStream);
            }
            else if ((*iter)->has_dataValidations())
            {
                (*iter)->get_dataValidations().toXmlElem("main:dataValidations", "", _outStream);
            }
            else if ((*iter)->has_hyperlinks())
            {
                (*iter)->get_hyperlinks().toXmlElem("main:hyperlinks", "", _outStream);
            }
            else if ((*iter)->has_printOptions())
            {
                (*iter)->get_printOptions().toXmlElem("main:printOptions", "", _outStream);
            }
            else if ((*iter)->has_pageMargins())
            {
                (*iter)->get_pageMargins().toXmlElem("main:pageMargins", "", _outStream);
            }
            else if ((*iter)->has_pageSetup())
            {
                (*iter)->get_pageSetup().toXmlElem("main:pageSetup", "", _outStream);
            }
            else if ((*iter)->has_headerFooter())
            {
                (*iter)->get_headerFooter().toXmlElem("main:headerFooter", "", _outStream);
            }
            else if ((*iter)->has_rowBreaks())
            {
                (*iter)->get_rowBreaks().toXmlElem("main:rowBreaks", "", _outStream);
            }
            else if ((*iter)->has_colBreaks())
            {
                (*iter)->get_colBreaks().toXmlElem("main:colBreaks", "", _outStream);
            }
            else if ((*iter)->has_customProperties())
            {
                (*iter)->get_customProperties().toXmlElem("main:customProperties", "", _outStream);
            }
            else if ((*iter)->has_cellWatches())
            {
                (*iter)->get_cellWatches().toXmlElem("main:cellWatches", "", _outStream);
            }
            else if ((*iter)->has_ignoredErrors())
            {
                (*iter)->get_ignoredErrors().toXmlElem("main:ignoredErrors", "", _outStream);
            }
            else if ((*iter)->has_smartTags())
            {
                (*iter)->get_smartTags().toXmlElem("main:smartTags", "", _outStream);
            }
            else if ((*iter)->has_drawing())
            {
                (*iter)->get_drawing().toXmlElem("main:drawing", "", _outStream);
            }
            else if ((*iter)->has_legacyDrawing())
            {
                (*iter)->get_legacyDrawing().toXmlElem("main:legacyDrawing", "", _outStream);
            }
            else if ((*iter)->has_legacyDrawingHF())
            {
                (*iter)->get_legacyDrawingHF().toXmlElem("main:legacyDrawingHF", "", _outStream);
            }
            else if ((*iter)->has_drawingHF())
            {
                (*iter)->get_drawingHF().toXmlElem("main:drawingHF", "", _outStream);
            }
            else if ((*iter)->has_picture())
            {
                (*iter)->get_picture().toXmlElem("main:picture", "", _outStream);
            }
            else if ((*iter)->has_oleObjects())
            {
                (*iter)->get_oleObjects().toXmlElem("main:oleObjects", "", _outStream);
            }
            else if ((*iter)->has_controls())
            {
                (*iter)->get_controls().toXmlElem("main:controls", "", _outStream);
            }
            else if ((*iter)->has_webPublishItems())
            {
                (*iter)->get_webPublishItems().toXmlElem("main:webPublishItems", "", _outStream);
            }
            else if ((*iter)->has_tableParts())
            {
                (*iter)->get_tableParts().toXmlElem("main:tableParts", "", _outStream);
            }
            else if ((*iter)->has_extLst())
            {
                (*iter)->get_extLst().toXmlElem("main:extLst", "", _outStream);
            }
        }
    }
    
    _outStream << "</main:worksheet>";
    }

    const worksheet_element& worksheet_element::default_instance()
    {    
    if (!worksheet_element::default_instance_)
    {
        worksheet_element::default_instance_ = new worksheet_element();
    }
    return *worksheet_element::default_instance_;
    }


    // worksheet_element::ChildGroup_1
    worksheet_element::ChildGroup_1::ChildGroup_1()
    :m_has_cols(false),
    m_cols(NULL),
    m_has_sheetData(false),
    m_sheetData(NULL),
    m_has_sheetCalcPr(false),
    m_sheetCalcPr(NULL),
    m_has_sheetProtection(false),
    m_sheetProtection(NULL),
    m_has_protectedRanges(false),
    m_protectedRanges(NULL),
    m_has_scenarios(false),
    m_scenarios(NULL),
    m_has_autoFilter(false),
    m_autoFilter(NULL),
    m_has_sortState(false),
    m_sortState(NULL),
    m_has_dataConsolidate(false),
    m_dataConsolidate(NULL),
    m_has_customSheetViews(false),
    m_customSheetViews(NULL),
    m_has_mergeCells(false),
    m_mergeCells(NULL),
    m_has_phoneticPr(false),
    m_phoneticPr(NULL),
    m_has_conditionalFormatting(false),
    m_conditionalFormatting(NULL),
    m_has_dataValidations(false),
    m_dataValidations(NULL),
    m_has_hyperlinks(false),
    m_hyperlinks(NULL),
    m_has_printOptions(false),
    m_printOptions(NULL),
    m_has_pageMargins(false),
    m_pageMargins(NULL),
    m_has_pageSetup(false),
    m_pageSetup(NULL),
    m_has_headerFooter(false),
    m_headerFooter(NULL),
    m_has_rowBreaks(false),
    m_rowBreaks(NULL),
    m_has_colBreaks(false),
    m_colBreaks(NULL),
    m_has_customProperties(false),
    m_customProperties(NULL),
    m_has_cellWatches(false),
    m_cellWatches(NULL),
    m_has_ignoredErrors(false),
    m_ignoredErrors(NULL),
    m_has_smartTags(false),
    m_smartTags(NULL),
    m_has_drawing(false),
    m_drawing(NULL),
    m_has_legacyDrawing(false),
    m_legacyDrawing(NULL),
    m_has_legacyDrawingHF(false),
    m_legacyDrawingHF(NULL),
    m_has_drawingHF(false),
    m_drawingHF(NULL),
    m_has_picture(false),
    m_picture(NULL),
    m_has_oleObjects(false),
    m_oleObjects(NULL),
    m_has_controls(false),
    m_controls(NULL),
    m_has_webPublishItems(false),
    m_webPublishItems(NULL),
    m_has_tableParts(false),
    m_tableParts(NULL),
    m_has_extLst(false),
    m_extLst(NULL)
    {
    }
    bool worksheet_element::ChildGroup_1::has_cols() const
    {    
    return m_has_cols;
    }

    CT_Cols* worksheet_element::ChildGroup_1::mutable_cols()
    {    
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetCalcPr = false;
    
    if (m_sheetCalcPr)
    {
        delete m_sheetCalcPr;
        m_sheetCalcPr = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_protectedRanges = false;
    
    if (m_protectedRanges)
    {
        delete m_protectedRanges;
        m_protectedRanges = NULL;
    }
    ;
    
    m_has_scenarios = false;
    
    if (m_scenarios)
    {
        delete m_scenarios;
        m_scenarios = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_mergeCells = false;
    
    if (m_mergeCells)
    {
        delete m_mergeCells;
        m_mergeCells = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_dataValidations = false;
    
    if (m_dataValidations)
    {
        delete m_dataValidations;
        m_dataValidations = NULL;
    }
    ;
    
    m_has_hyperlinks = false;
    
    if (m_hyperlinks)
    {
        delete m_hyperlinks;
        m_hyperlinks = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_cellWatches = false;
    
    if (m_cellWatches)
    {
        delete m_cellWatches;
        m_cellWatches = NULL;
    }
    ;
    
    m_has_ignoredErrors = false;
    
    if (m_ignoredErrors)
    {
        delete m_ignoredErrors;
        m_ignoredErrors = NULL;
    }
    ;
    
    m_has_smartTags = false;
    
    if (m_smartTags)
    {
        delete m_smartTags;
        m_smartTags = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_controls = false;
    
    if (m_controls)
    {
        delete m_controls;
        m_controls = NULL;
    }
    ;
    
    m_has_webPublishItems = false;
    
    if (m_webPublishItems)
    {
        delete m_webPublishItems;
        m_webPublishItems = NULL;
    }
    ;
    
    m_has_tableParts = false;
    
    if (m_tableParts)
    {
        delete m_tableParts;
        m_tableParts = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_cols = true;
    if (!m_cols)
    {
        m_cols = new CT_Cols();
    }
    return m_cols;
    }

    const CT_Cols& worksheet_element::ChildGroup_1::get_cols() const
    {    
    if (m_cols)
    {
        return *m_cols;
    }
    return CT_Cols::default_instance();
    }

    bool worksheet_element::ChildGroup_1::has_sheetData() const
    {    
    return m_has_sheetData;
    }

    CT_SheetData* worksheet_element::ChildGroup_1::mutable_sheetData()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetCalcPr = false;
    
    if (m_sheetCalcPr)
    {
        delete m_sheetCalcPr;
        m_sheetCalcPr = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_protectedRanges = false;
    
    if (m_protectedRanges)
    {
        delete m_protectedRanges;
        m_protectedRanges = NULL;
    }
    ;
    
    m_has_scenarios = false;
    
    if (m_scenarios)
    {
        delete m_scenarios;
        m_scenarios = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_mergeCells = false;
    
    if (m_mergeCells)
    {
        delete m_mergeCells;
        m_mergeCells = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_dataValidations = false;
    
    if (m_dataValidations)
    {
        delete m_dataValidations;
        m_dataValidations = NULL;
    }
    ;
    
    m_has_hyperlinks = false;
    
    if (m_hyperlinks)
    {
        delete m_hyperlinks;
        m_hyperlinks = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_cellWatches = false;
    
    if (m_cellWatches)
    {
        delete m_cellWatches;
        m_cellWatches = NULL;
    }
    ;
    
    m_has_ignoredErrors = false;
    
    if (m_ignoredErrors)
    {
        delete m_ignoredErrors;
        m_ignoredErrors = NULL;
    }
    ;
    
    m_has_smartTags = false;
    
    if (m_smartTags)
    {
        delete m_smartTags;
        m_smartTags = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_controls = false;
    
    if (m_controls)
    {
        delete m_controls;
        m_controls = NULL;
    }
    ;
    
    m_has_webPublishItems = false;
    
    if (m_webPublishItems)
    {
        delete m_webPublishItems;
        m_webPublishItems = NULL;
    }
    ;
    
    m_has_tableParts = false;
    
    if (m_tableParts)
    {
        delete m_tableParts;
        m_tableParts = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_sheetData = true;
    if (!m_sheetData)
    {
        m_sheetData = new CT_SheetData();
    }
    return m_sheetData;
    }

    const CT_SheetData& worksheet_element::ChildGroup_1::get_sheetData() const
    {    
    if (m_sheetData)
    {
        return *m_sheetData;
    }
    return CT_SheetData::default_instance();
    }

    bool worksheet_element::ChildGroup_1::has_sheetCalcPr() const
    {    
    return m_has_sheetCalcPr;
    }

    CT_SheetCalcPr* worksheet_element::ChildGroup_1::mutable_sheetCalcPr()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_protectedRanges = false;
    
    if (m_protectedRanges)
    {
        delete m_protectedRanges;
        m_protectedRanges = NULL;
    }
    ;
    
    m_has_scenarios = false;
    
    if (m_scenarios)
    {
        delete m_scenarios;
        m_scenarios = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_mergeCells = false;
    
    if (m_mergeCells)
    {
        delete m_mergeCells;
        m_mergeCells = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_dataValidations = false;
    
    if (m_dataValidations)
    {
        delete m_dataValidations;
        m_dataValidations = NULL;
    }
    ;
    
    m_has_hyperlinks = false;
    
    if (m_hyperlinks)
    {
        delete m_hyperlinks;
        m_hyperlinks = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_cellWatches = false;
    
    if (m_cellWatches)
    {
        delete m_cellWatches;
        m_cellWatches = NULL;
    }
    ;
    
    m_has_ignoredErrors = false;
    
    if (m_ignoredErrors)
    {
        delete m_ignoredErrors;
        m_ignoredErrors = NULL;
    }
    ;
    
    m_has_smartTags = false;
    
    if (m_smartTags)
    {
        delete m_smartTags;
        m_smartTags = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_controls = false;
    
    if (m_controls)
    {
        delete m_controls;
        m_controls = NULL;
    }
    ;
    
    m_has_webPublishItems = false;
    
    if (m_webPublishItems)
    {
        delete m_webPublishItems;
        m_webPublishItems = NULL;
    }
    ;
    
    m_has_tableParts = false;
    
    if (m_tableParts)
    {
        delete m_tableParts;
        m_tableParts = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_sheetCalcPr = true;
    if (!m_sheetCalcPr)
    {
        m_sheetCalcPr = new CT_SheetCalcPr();
    }
    return m_sheetCalcPr;
    }

    const CT_SheetCalcPr& worksheet_element::ChildGroup_1::get_sheetCalcPr() const
    {    
    if (m_sheetCalcPr)
    {
        return *m_sheetCalcPr;
    }
    return CT_SheetCalcPr::default_instance();
    }

    bool worksheet_element::ChildGroup_1::has_sheetProtection() const
    {    
    return m_has_sheetProtection;
    }

    CT_SheetProtection* worksheet_element::ChildGroup_1::mutable_sheetProtection()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetCalcPr = false;
    
    if (m_sheetCalcPr)
    {
        delete m_sheetCalcPr;
        m_sheetCalcPr = NULL;
    }
    ;
    
    m_has_protectedRanges = false;
    
    if (m_protectedRanges)
    {
        delete m_protectedRanges;
        m_protectedRanges = NULL;
    }
    ;
    
    m_has_scenarios = false;
    
    if (m_scenarios)
    {
        delete m_scenarios;
        m_scenarios = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_mergeCells = false;
    
    if (m_mergeCells)
    {
        delete m_mergeCells;
        m_mergeCells = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_dataValidations = false;
    
    if (m_dataValidations)
    {
        delete m_dataValidations;
        m_dataValidations = NULL;
    }
    ;
    
    m_has_hyperlinks = false;
    
    if (m_hyperlinks)
    {
        delete m_hyperlinks;
        m_hyperlinks = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_cellWatches = false;
    
    if (m_cellWatches)
    {
        delete m_cellWatches;
        m_cellWatches = NULL;
    }
    ;
    
    m_has_ignoredErrors = false;
    
    if (m_ignoredErrors)
    {
        delete m_ignoredErrors;
        m_ignoredErrors = NULL;
    }
    ;
    
    m_has_smartTags = false;
    
    if (m_smartTags)
    {
        delete m_smartTags;
        m_smartTags = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_controls = false;
    
    if (m_controls)
    {
        delete m_controls;
        m_controls = NULL;
    }
    ;
    
    m_has_webPublishItems = false;
    
    if (m_webPublishItems)
    {
        delete m_webPublishItems;
        m_webPublishItems = NULL;
    }
    ;
    
    m_has_tableParts = false;
    
    if (m_tableParts)
    {
        delete m_tableParts;
        m_tableParts = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_sheetProtection = true;
    if (!m_sheetProtection)
    {
        m_sheetProtection = new CT_SheetProtection();
    }
    return m_sheetProtection;
    }

    const CT_SheetProtection& worksheet_element::ChildGroup_1::get_sheetProtection() const
    {    
    if (m_sheetProtection)
    {
        return *m_sheetProtection;
    }
    return CT_SheetProtection::default_instance();
    }

    bool worksheet_element::ChildGroup_1::has_protectedRanges() const
    {    
    return m_has_protectedRanges;
    }

    CT_ProtectedRanges* worksheet_element::ChildGroup_1::mutable_protectedRanges()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetCalcPr = false;
    
    if (m_sheetCalcPr)
    {
        delete m_sheetCalcPr;
        m_sheetCalcPr = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_scenarios = false;
    
    if (m_scenarios)
    {
        delete m_scenarios;
        m_scenarios = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_mergeCells = false;
    
    if (m_mergeCells)
    {
        delete m_mergeCells;
        m_mergeCells = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_dataValidations = false;
    
    if (m_dataValidations)
    {
        delete m_dataValidations;
        m_dataValidations = NULL;
    }
    ;
    
    m_has_hyperlinks = false;
    
    if (m_hyperlinks)
    {
        delete m_hyperlinks;
        m_hyperlinks = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_cellWatches = false;
    
    if (m_cellWatches)
    {
        delete m_cellWatches;
        m_cellWatches = NULL;
    }
    ;
    
    m_has_ignoredErrors = false;
    
    if (m_ignoredErrors)
    {
        delete m_ignoredErrors;
        m_ignoredErrors = NULL;
    }
    ;
    
    m_has_smartTags = false;
    
    if (m_smartTags)
    {
        delete m_smartTags;
        m_smartTags = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_controls = false;
    
    if (m_controls)
    {
        delete m_controls;
        m_controls = NULL;
    }
    ;
    
    m_has_webPublishItems = false;
    
    if (m_webPublishItems)
    {
        delete m_webPublishItems;
        m_webPublishItems = NULL;
    }
    ;
    
    m_has_tableParts = false;
    
    if (m_tableParts)
    {
        delete m_tableParts;
        m_tableParts = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_protectedRanges = true;
    if (!m_protectedRanges)
    {
        m_protectedRanges = new CT_ProtectedRanges();
    }
    return m_protectedRanges;
    }

    const CT_ProtectedRanges& worksheet_element::ChildGroup_1::get_protectedRanges() const
    {    
    if (m_protectedRanges)
    {
        return *m_protectedRanges;
    }
    return CT_ProtectedRanges::default_instance();
    }

    bool worksheet_element::ChildGroup_1::has_scenarios() const
    {    
    return m_has_scenarios;
    }

    CT_Scenarios* worksheet_element::ChildGroup_1::mutable_scenarios()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetCalcPr = false;
    
    if (m_sheetCalcPr)
    {
        delete m_sheetCalcPr;
        m_sheetCalcPr = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_protectedRanges = false;
    
    if (m_protectedRanges)
    {
        delete m_protectedRanges;
        m_protectedRanges = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_mergeCells = false;
    
    if (m_mergeCells)
    {
        delete m_mergeCells;
        m_mergeCells = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_dataValidations = false;
    
    if (m_dataValidations)
    {
        delete m_dataValidations;
        m_dataValidations = NULL;
    }
    ;
    
    m_has_hyperlinks = false;
    
    if (m_hyperlinks)
    {
        delete m_hyperlinks;
        m_hyperlinks = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_cellWatches = false;
    
    if (m_cellWatches)
    {
        delete m_cellWatches;
        m_cellWatches = NULL;
    }
    ;
    
    m_has_ignoredErrors = false;
    
    if (m_ignoredErrors)
    {
        delete m_ignoredErrors;
        m_ignoredErrors = NULL;
    }
    ;
    
    m_has_smartTags = false;
    
    if (m_smartTags)
    {
        delete m_smartTags;
        m_smartTags = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_controls = false;
    
    if (m_controls)
    {
        delete m_controls;
        m_controls = NULL;
    }
    ;
    
    m_has_webPublishItems = false;
    
    if (m_webPublishItems)
    {
        delete m_webPublishItems;
        m_webPublishItems = NULL;
    }
    ;
    
    m_has_tableParts = false;
    
    if (m_tableParts)
    {
        delete m_tableParts;
        m_tableParts = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_scenarios = true;
    if (!m_scenarios)
    {
        m_scenarios = new CT_Scenarios();
    }
    return m_scenarios;
    }

    const CT_Scenarios& worksheet_element::ChildGroup_1::get_scenarios() const
    {    
    if (m_scenarios)
    {
        return *m_scenarios;
    }
    return CT_Scenarios::default_instance();
    }

    bool worksheet_element::ChildGroup_1::has_autoFilter() const
    {    
    return m_has_autoFilter;
    }

    CT_AutoFilter* worksheet_element::ChildGroup_1::mutable_autoFilter()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetCalcPr = false;
    
    if (m_sheetCalcPr)
    {
        delete m_sheetCalcPr;
        m_sheetCalcPr = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_protectedRanges = false;
    
    if (m_protectedRanges)
    {
        delete m_protectedRanges;
        m_protectedRanges = NULL;
    }
    ;
    
    m_has_scenarios = false;
    
    if (m_scenarios)
    {
        delete m_scenarios;
        m_scenarios = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_mergeCells = false;
    
    if (m_mergeCells)
    {
        delete m_mergeCells;
        m_mergeCells = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_dataValidations = false;
    
    if (m_dataValidations)
    {
        delete m_dataValidations;
        m_dataValidations = NULL;
    }
    ;
    
    m_has_hyperlinks = false;
    
    if (m_hyperlinks)
    {
        delete m_hyperlinks;
        m_hyperlinks = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_cellWatches = false;
    
    if (m_cellWatches)
    {
        delete m_cellWatches;
        m_cellWatches = NULL;
    }
    ;
    
    m_has_ignoredErrors = false;
    
    if (m_ignoredErrors)
    {
        delete m_ignoredErrors;
        m_ignoredErrors = NULL;
    }
    ;
    
    m_has_smartTags = false;
    
    if (m_smartTags)
    {
        delete m_smartTags;
        m_smartTags = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_controls = false;
    
    if (m_controls)
    {
        delete m_controls;
        m_controls = NULL;
    }
    ;
    
    m_has_webPublishItems = false;
    
    if (m_webPublishItems)
    {
        delete m_webPublishItems;
        m_webPublishItems = NULL;
    }
    ;
    
    m_has_tableParts = false;
    
    if (m_tableParts)
    {
        delete m_tableParts;
        m_tableParts = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_autoFilter = true;
    if (!m_autoFilter)
    {
        m_autoFilter = new CT_AutoFilter();
    }
    return m_autoFilter;
    }

    const CT_AutoFilter& worksheet_element::ChildGroup_1::get_autoFilter() const
    {    
    if (m_autoFilter)
    {
        return *m_autoFilter;
    }
    return CT_AutoFilter::default_instance();
    }

    bool worksheet_element::ChildGroup_1::has_sortState() const
    {    
    return m_has_sortState;
    }

    CT_SortState* worksheet_element::ChildGroup_1::mutable_sortState()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetCalcPr = false;
    
    if (m_sheetCalcPr)
    {
        delete m_sheetCalcPr;
        m_sheetCalcPr = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_protectedRanges = false;
    
    if (m_protectedRanges)
    {
        delete m_protectedRanges;
        m_protectedRanges = NULL;
    }
    ;
    
    m_has_scenarios = false;
    
    if (m_scenarios)
    {
        delete m_scenarios;
        m_scenarios = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_mergeCells = false;
    
    if (m_mergeCells)
    {
        delete m_mergeCells;
        m_mergeCells = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_dataValidations = false;
    
    if (m_dataValidations)
    {
        delete m_dataValidations;
        m_dataValidations = NULL;
    }
    ;
    
    m_has_hyperlinks = false;
    
    if (m_hyperlinks)
    {
        delete m_hyperlinks;
        m_hyperlinks = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_cellWatches = false;
    
    if (m_cellWatches)
    {
        delete m_cellWatches;
        m_cellWatches = NULL;
    }
    ;
    
    m_has_ignoredErrors = false;
    
    if (m_ignoredErrors)
    {
        delete m_ignoredErrors;
        m_ignoredErrors = NULL;
    }
    ;
    
    m_has_smartTags = false;
    
    if (m_smartTags)
    {
        delete m_smartTags;
        m_smartTags = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_controls = false;
    
    if (m_controls)
    {
        delete m_controls;
        m_controls = NULL;
    }
    ;
    
    m_has_webPublishItems = false;
    
    if (m_webPublishItems)
    {
        delete m_webPublishItems;
        m_webPublishItems = NULL;
    }
    ;
    
    m_has_tableParts = false;
    
    if (m_tableParts)
    {
        delete m_tableParts;
        m_tableParts = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_sortState = true;
    if (!m_sortState)
    {
        m_sortState = new CT_SortState();
    }
    return m_sortState;
    }

    const CT_SortState& worksheet_element::ChildGroup_1::get_sortState() const
    {    
    if (m_sortState)
    {
        return *m_sortState;
    }
    return CT_SortState::default_instance();
    }

    bool worksheet_element::ChildGroup_1::has_dataConsolidate() const
    {    
    return m_has_dataConsolidate;
    }

    CT_DataConsolidate* worksheet_element::ChildGroup_1::mutable_dataConsolidate()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetCalcPr = false;
    
    if (m_sheetCalcPr)
    {
        delete m_sheetCalcPr;
        m_sheetCalcPr = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_protectedRanges = false;
    
    if (m_protectedRanges)
    {
        delete m_protectedRanges;
        m_protectedRanges = NULL;
    }
    ;
    
    m_has_scenarios = false;
    
    if (m_scenarios)
    {
        delete m_scenarios;
        m_scenarios = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_mergeCells = false;
    
    if (m_mergeCells)
    {
        delete m_mergeCells;
        m_mergeCells = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_dataValidations = false;
    
    if (m_dataValidations)
    {
        delete m_dataValidations;
        m_dataValidations = NULL;
    }
    ;
    
    m_has_hyperlinks = false;
    
    if (m_hyperlinks)
    {
        delete m_hyperlinks;
        m_hyperlinks = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_cellWatches = false;
    
    if (m_cellWatches)
    {
        delete m_cellWatches;
        m_cellWatches = NULL;
    }
    ;
    
    m_has_ignoredErrors = false;
    
    if (m_ignoredErrors)
    {
        delete m_ignoredErrors;
        m_ignoredErrors = NULL;
    }
    ;
    
    m_has_smartTags = false;
    
    if (m_smartTags)
    {
        delete m_smartTags;
        m_smartTags = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_controls = false;
    
    if (m_controls)
    {
        delete m_controls;
        m_controls = NULL;
    }
    ;
    
    m_has_webPublishItems = false;
    
    if (m_webPublishItems)
    {
        delete m_webPublishItems;
        m_webPublishItems = NULL;
    }
    ;
    
    m_has_tableParts = false;
    
    if (m_tableParts)
    {
        delete m_tableParts;
        m_tableParts = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_dataConsolidate = true;
    if (!m_dataConsolidate)
    {
        m_dataConsolidate = new CT_DataConsolidate();
    }
    return m_dataConsolidate;
    }

    const CT_DataConsolidate& worksheet_element::ChildGroup_1::get_dataConsolidate() const
    {    
    if (m_dataConsolidate)
    {
        return *m_dataConsolidate;
    }
    return CT_DataConsolidate::default_instance();
    }

    bool worksheet_element::ChildGroup_1::has_customSheetViews() const
    {    
    return m_has_customSheetViews;
    }

    CT_CustomSheetViews* worksheet_element::ChildGroup_1::mutable_customSheetViews()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetCalcPr = false;
    
    if (m_sheetCalcPr)
    {
        delete m_sheetCalcPr;
        m_sheetCalcPr = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_protectedRanges = false;
    
    if (m_protectedRanges)
    {
        delete m_protectedRanges;
        m_protectedRanges = NULL;
    }
    ;
    
    m_has_scenarios = false;
    
    if (m_scenarios)
    {
        delete m_scenarios;
        m_scenarios = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_mergeCells = false;
    
    if (m_mergeCells)
    {
        delete m_mergeCells;
        m_mergeCells = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_dataValidations = false;
    
    if (m_dataValidations)
    {
        delete m_dataValidations;
        m_dataValidations = NULL;
    }
    ;
    
    m_has_hyperlinks = false;
    
    if (m_hyperlinks)
    {
        delete m_hyperlinks;
        m_hyperlinks = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_cellWatches = false;
    
    if (m_cellWatches)
    {
        delete m_cellWatches;
        m_cellWatches = NULL;
    }
    ;
    
    m_has_ignoredErrors = false;
    
    if (m_ignoredErrors)
    {
        delete m_ignoredErrors;
        m_ignoredErrors = NULL;
    }
    ;
    
    m_has_smartTags = false;
    
    if (m_smartTags)
    {
        delete m_smartTags;
        m_smartTags = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_controls = false;
    
    if (m_controls)
    {
        delete m_controls;
        m_controls = NULL;
    }
    ;
    
    m_has_webPublishItems = false;
    
    if (m_webPublishItems)
    {
        delete m_webPublishItems;
        m_webPublishItems = NULL;
    }
    ;
    
    m_has_tableParts = false;
    
    if (m_tableParts)
    {
        delete m_tableParts;
        m_tableParts = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_customSheetViews = true;
    if (!m_customSheetViews)
    {
        m_customSheetViews = new CT_CustomSheetViews();
    }
    return m_customSheetViews;
    }

    const CT_CustomSheetViews& worksheet_element::ChildGroup_1::get_customSheetViews() const
    {    
    if (m_customSheetViews)
    {
        return *m_customSheetViews;
    }
    return CT_CustomSheetViews::default_instance();
    }

    bool worksheet_element::ChildGroup_1::has_mergeCells() const
    {    
    return m_has_mergeCells;
    }

    CT_MergeCells* worksheet_element::ChildGroup_1::mutable_mergeCells()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetCalcPr = false;
    
    if (m_sheetCalcPr)
    {
        delete m_sheetCalcPr;
        m_sheetCalcPr = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_protectedRanges = false;
    
    if (m_protectedRanges)
    {
        delete m_protectedRanges;
        m_protectedRanges = NULL;
    }
    ;
    
    m_has_scenarios = false;
    
    if (m_scenarios)
    {
        delete m_scenarios;
        m_scenarios = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_dataValidations = false;
    
    if (m_dataValidations)
    {
        delete m_dataValidations;
        m_dataValidations = NULL;
    }
    ;
    
    m_has_hyperlinks = false;
    
    if (m_hyperlinks)
    {
        delete m_hyperlinks;
        m_hyperlinks = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_cellWatches = false;
    
    if (m_cellWatches)
    {
        delete m_cellWatches;
        m_cellWatches = NULL;
    }
    ;
    
    m_has_ignoredErrors = false;
    
    if (m_ignoredErrors)
    {
        delete m_ignoredErrors;
        m_ignoredErrors = NULL;
    }
    ;
    
    m_has_smartTags = false;
    
    if (m_smartTags)
    {
        delete m_smartTags;
        m_smartTags = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_controls = false;
    
    if (m_controls)
    {
        delete m_controls;
        m_controls = NULL;
    }
    ;
    
    m_has_webPublishItems = false;
    
    if (m_webPublishItems)
    {
        delete m_webPublishItems;
        m_webPublishItems = NULL;
    }
    ;
    
    m_has_tableParts = false;
    
    if (m_tableParts)
    {
        delete m_tableParts;
        m_tableParts = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_mergeCells = true;
    if (!m_mergeCells)
    {
        m_mergeCells = new CT_MergeCells();
    }
    return m_mergeCells;
    }

    const CT_MergeCells& worksheet_element::ChildGroup_1::get_mergeCells() const
    {    
    if (m_mergeCells)
    {
        return *m_mergeCells;
    }
    return CT_MergeCells::default_instance();
    }

    bool worksheet_element::ChildGroup_1::has_phoneticPr() const
    {    
    return m_has_phoneticPr;
    }

    CT_PhoneticPr* worksheet_element::ChildGroup_1::mutable_phoneticPr()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetCalcPr = false;
    
    if (m_sheetCalcPr)
    {
        delete m_sheetCalcPr;
        m_sheetCalcPr = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_protectedRanges = false;
    
    if (m_protectedRanges)
    {
        delete m_protectedRanges;
        m_protectedRanges = NULL;
    }
    ;
    
    m_has_scenarios = false;
    
    if (m_scenarios)
    {
        delete m_scenarios;
        m_scenarios = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_mergeCells = false;
    
    if (m_mergeCells)
    {
        delete m_mergeCells;
        m_mergeCells = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_dataValidations = false;
    
    if (m_dataValidations)
    {
        delete m_dataValidations;
        m_dataValidations = NULL;
    }
    ;
    
    m_has_hyperlinks = false;
    
    if (m_hyperlinks)
    {
        delete m_hyperlinks;
        m_hyperlinks = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_cellWatches = false;
    
    if (m_cellWatches)
    {
        delete m_cellWatches;
        m_cellWatches = NULL;
    }
    ;
    
    m_has_ignoredErrors = false;
    
    if (m_ignoredErrors)
    {
        delete m_ignoredErrors;
        m_ignoredErrors = NULL;
    }
    ;
    
    m_has_smartTags = false;
    
    if (m_smartTags)
    {
        delete m_smartTags;
        m_smartTags = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_controls = false;
    
    if (m_controls)
    {
        delete m_controls;
        m_controls = NULL;
    }
    ;
    
    m_has_webPublishItems = false;
    
    if (m_webPublishItems)
    {
        delete m_webPublishItems;
        m_webPublishItems = NULL;
    }
    ;
    
    m_has_tableParts = false;
    
    if (m_tableParts)
    {
        delete m_tableParts;
        m_tableParts = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_phoneticPr = true;
    if (!m_phoneticPr)
    {
        m_phoneticPr = new CT_PhoneticPr();
    }
    return m_phoneticPr;
    }

    const CT_PhoneticPr& worksheet_element::ChildGroup_1::get_phoneticPr() const
    {    
    if (m_phoneticPr)
    {
        return *m_phoneticPr;
    }
    return CT_PhoneticPr::default_instance();
    }

    bool worksheet_element::ChildGroup_1::has_conditionalFormatting() const
    {    
    return m_has_conditionalFormatting;
    }

    CT_ConditionalFormatting* worksheet_element::ChildGroup_1::mutable_conditionalFormatting()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetCalcPr = false;
    
    if (m_sheetCalcPr)
    {
        delete m_sheetCalcPr;
        m_sheetCalcPr = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_protectedRanges = false;
    
    if (m_protectedRanges)
    {
        delete m_protectedRanges;
        m_protectedRanges = NULL;
    }
    ;
    
    m_has_scenarios = false;
    
    if (m_scenarios)
    {
        delete m_scenarios;
        m_scenarios = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_mergeCells = false;
    
    if (m_mergeCells)
    {
        delete m_mergeCells;
        m_mergeCells = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_dataValidations = false;
    
    if (m_dataValidations)
    {
        delete m_dataValidations;
        m_dataValidations = NULL;
    }
    ;
    
    m_has_hyperlinks = false;
    
    if (m_hyperlinks)
    {
        delete m_hyperlinks;
        m_hyperlinks = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_cellWatches = false;
    
    if (m_cellWatches)
    {
        delete m_cellWatches;
        m_cellWatches = NULL;
    }
    ;
    
    m_has_ignoredErrors = false;
    
    if (m_ignoredErrors)
    {
        delete m_ignoredErrors;
        m_ignoredErrors = NULL;
    }
    ;
    
    m_has_smartTags = false;
    
    if (m_smartTags)
    {
        delete m_smartTags;
        m_smartTags = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_controls = false;
    
    if (m_controls)
    {
        delete m_controls;
        m_controls = NULL;
    }
    ;
    
    m_has_webPublishItems = false;
    
    if (m_webPublishItems)
    {
        delete m_webPublishItems;
        m_webPublishItems = NULL;
    }
    ;
    
    m_has_tableParts = false;
    
    if (m_tableParts)
    {
        delete m_tableParts;
        m_tableParts = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_conditionalFormatting = true;
    if (!m_conditionalFormatting)
    {
        m_conditionalFormatting = new CT_ConditionalFormatting();
    }
    return m_conditionalFormatting;
    }

    const CT_ConditionalFormatting& worksheet_element::ChildGroup_1::get_conditionalFormatting() const
    {    
    if (m_conditionalFormatting)
    {
        return *m_conditionalFormatting;
    }
    return CT_ConditionalFormatting::default_instance();
    }

    bool worksheet_element::ChildGroup_1::has_dataValidations() const
    {    
    return m_has_dataValidations;
    }

    CT_DataValidations* worksheet_element::ChildGroup_1::mutable_dataValidations()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetCalcPr = false;
    
    if (m_sheetCalcPr)
    {
        delete m_sheetCalcPr;
        m_sheetCalcPr = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_protectedRanges = false;
    
    if (m_protectedRanges)
    {
        delete m_protectedRanges;
        m_protectedRanges = NULL;
    }
    ;
    
    m_has_scenarios = false;
    
    if (m_scenarios)
    {
        delete m_scenarios;
        m_scenarios = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_mergeCells = false;
    
    if (m_mergeCells)
    {
        delete m_mergeCells;
        m_mergeCells = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_hyperlinks = false;
    
    if (m_hyperlinks)
    {
        delete m_hyperlinks;
        m_hyperlinks = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_cellWatches = false;
    
    if (m_cellWatches)
    {
        delete m_cellWatches;
        m_cellWatches = NULL;
    }
    ;
    
    m_has_ignoredErrors = false;
    
    if (m_ignoredErrors)
    {
        delete m_ignoredErrors;
        m_ignoredErrors = NULL;
    }
    ;
    
    m_has_smartTags = false;
    
    if (m_smartTags)
    {
        delete m_smartTags;
        m_smartTags = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_controls = false;
    
    if (m_controls)
    {
        delete m_controls;
        m_controls = NULL;
    }
    ;
    
    m_has_webPublishItems = false;
    
    if (m_webPublishItems)
    {
        delete m_webPublishItems;
        m_webPublishItems = NULL;
    }
    ;
    
    m_has_tableParts = false;
    
    if (m_tableParts)
    {
        delete m_tableParts;
        m_tableParts = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_dataValidations = true;
    if (!m_dataValidations)
    {
        m_dataValidations = new CT_DataValidations();
    }
    return m_dataValidations;
    }

    const CT_DataValidations& worksheet_element::ChildGroup_1::get_dataValidations() const
    {    
    if (m_dataValidations)
    {
        return *m_dataValidations;
    }
    return CT_DataValidations::default_instance();
    }

    bool worksheet_element::ChildGroup_1::has_hyperlinks() const
    {    
    return m_has_hyperlinks;
    }

    CT_Hyperlinks* worksheet_element::ChildGroup_1::mutable_hyperlinks()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetCalcPr = false;
    
    if (m_sheetCalcPr)
    {
        delete m_sheetCalcPr;
        m_sheetCalcPr = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_protectedRanges = false;
    
    if (m_protectedRanges)
    {
        delete m_protectedRanges;
        m_protectedRanges = NULL;
    }
    ;
    
    m_has_scenarios = false;
    
    if (m_scenarios)
    {
        delete m_scenarios;
        m_scenarios = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_mergeCells = false;
    
    if (m_mergeCells)
    {
        delete m_mergeCells;
        m_mergeCells = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_dataValidations = false;
    
    if (m_dataValidations)
    {
        delete m_dataValidations;
        m_dataValidations = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_cellWatches = false;
    
    if (m_cellWatches)
    {
        delete m_cellWatches;
        m_cellWatches = NULL;
    }
    ;
    
    m_has_ignoredErrors = false;
    
    if (m_ignoredErrors)
    {
        delete m_ignoredErrors;
        m_ignoredErrors = NULL;
    }
    ;
    
    m_has_smartTags = false;
    
    if (m_smartTags)
    {
        delete m_smartTags;
        m_smartTags = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_controls = false;
    
    if (m_controls)
    {
        delete m_controls;
        m_controls = NULL;
    }
    ;
    
    m_has_webPublishItems = false;
    
    if (m_webPublishItems)
    {
        delete m_webPublishItems;
        m_webPublishItems = NULL;
    }
    ;
    
    m_has_tableParts = false;
    
    if (m_tableParts)
    {
        delete m_tableParts;
        m_tableParts = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_hyperlinks = true;
    if (!m_hyperlinks)
    {
        m_hyperlinks = new CT_Hyperlinks();
    }
    return m_hyperlinks;
    }

    const CT_Hyperlinks& worksheet_element::ChildGroup_1::get_hyperlinks() const
    {    
    if (m_hyperlinks)
    {
        return *m_hyperlinks;
    }
    return CT_Hyperlinks::default_instance();
    }

    bool worksheet_element::ChildGroup_1::has_printOptions() const
    {    
    return m_has_printOptions;
    }

    CT_PrintOptions* worksheet_element::ChildGroup_1::mutable_printOptions()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetCalcPr = false;
    
    if (m_sheetCalcPr)
    {
        delete m_sheetCalcPr;
        m_sheetCalcPr = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_protectedRanges = false;
    
    if (m_protectedRanges)
    {
        delete m_protectedRanges;
        m_protectedRanges = NULL;
    }
    ;
    
    m_has_scenarios = false;
    
    if (m_scenarios)
    {
        delete m_scenarios;
        m_scenarios = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_mergeCells = false;
    
    if (m_mergeCells)
    {
        delete m_mergeCells;
        m_mergeCells = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_dataValidations = false;
    
    if (m_dataValidations)
    {
        delete m_dataValidations;
        m_dataValidations = NULL;
    }
    ;
    
    m_has_hyperlinks = false;
    
    if (m_hyperlinks)
    {
        delete m_hyperlinks;
        m_hyperlinks = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_cellWatches = false;
    
    if (m_cellWatches)
    {
        delete m_cellWatches;
        m_cellWatches = NULL;
    }
    ;
    
    m_has_ignoredErrors = false;
    
    if (m_ignoredErrors)
    {
        delete m_ignoredErrors;
        m_ignoredErrors = NULL;
    }
    ;
    
    m_has_smartTags = false;
    
    if (m_smartTags)
    {
        delete m_smartTags;
        m_smartTags = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_controls = false;
    
    if (m_controls)
    {
        delete m_controls;
        m_controls = NULL;
    }
    ;
    
    m_has_webPublishItems = false;
    
    if (m_webPublishItems)
    {
        delete m_webPublishItems;
        m_webPublishItems = NULL;
    }
    ;
    
    m_has_tableParts = false;
    
    if (m_tableParts)
    {
        delete m_tableParts;
        m_tableParts = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_printOptions = true;
    if (!m_printOptions)
    {
        m_printOptions = new CT_PrintOptions();
    }
    return m_printOptions;
    }

    const CT_PrintOptions& worksheet_element::ChildGroup_1::get_printOptions() const
    {    
    if (m_printOptions)
    {
        return *m_printOptions;
    }
    return CT_PrintOptions::default_instance();
    }

    bool worksheet_element::ChildGroup_1::has_pageMargins() const
    {    
    return m_has_pageMargins;
    }

    CT_PageMargins* worksheet_element::ChildGroup_1::mutable_pageMargins()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetCalcPr = false;
    
    if (m_sheetCalcPr)
    {
        delete m_sheetCalcPr;
        m_sheetCalcPr = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_protectedRanges = false;
    
    if (m_protectedRanges)
    {
        delete m_protectedRanges;
        m_protectedRanges = NULL;
    }
    ;
    
    m_has_scenarios = false;
    
    if (m_scenarios)
    {
        delete m_scenarios;
        m_scenarios = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_mergeCells = false;
    
    if (m_mergeCells)
    {
        delete m_mergeCells;
        m_mergeCells = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_dataValidations = false;
    
    if (m_dataValidations)
    {
        delete m_dataValidations;
        m_dataValidations = NULL;
    }
    ;
    
    m_has_hyperlinks = false;
    
    if (m_hyperlinks)
    {
        delete m_hyperlinks;
        m_hyperlinks = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_cellWatches = false;
    
    if (m_cellWatches)
    {
        delete m_cellWatches;
        m_cellWatches = NULL;
    }
    ;
    
    m_has_ignoredErrors = false;
    
    if (m_ignoredErrors)
    {
        delete m_ignoredErrors;
        m_ignoredErrors = NULL;
    }
    ;
    
    m_has_smartTags = false;
    
    if (m_smartTags)
    {
        delete m_smartTags;
        m_smartTags = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_controls = false;
    
    if (m_controls)
    {
        delete m_controls;
        m_controls = NULL;
    }
    ;
    
    m_has_webPublishItems = false;
    
    if (m_webPublishItems)
    {
        delete m_webPublishItems;
        m_webPublishItems = NULL;
    }
    ;
    
    m_has_tableParts = false;
    
    if (m_tableParts)
    {
        delete m_tableParts;
        m_tableParts = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_pageMargins = true;
    if (!m_pageMargins)
    {
        m_pageMargins = new CT_PageMargins();
    }
    return m_pageMargins;
    }

    const CT_PageMargins& worksheet_element::ChildGroup_1::get_pageMargins() const
    {    
    if (m_pageMargins)
    {
        return *m_pageMargins;
    }
    return CT_PageMargins::default_instance();
    }

    bool worksheet_element::ChildGroup_1::has_pageSetup() const
    {    
    return m_has_pageSetup;
    }

    CT_PageSetup* worksheet_element::ChildGroup_1::mutable_pageSetup()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetCalcPr = false;
    
    if (m_sheetCalcPr)
    {
        delete m_sheetCalcPr;
        m_sheetCalcPr = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_protectedRanges = false;
    
    if (m_protectedRanges)
    {
        delete m_protectedRanges;
        m_protectedRanges = NULL;
    }
    ;
    
    m_has_scenarios = false;
    
    if (m_scenarios)
    {
        delete m_scenarios;
        m_scenarios = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_mergeCells = false;
    
    if (m_mergeCells)
    {
        delete m_mergeCells;
        m_mergeCells = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_dataValidations = false;
    
    if (m_dataValidations)
    {
        delete m_dataValidations;
        m_dataValidations = NULL;
    }
    ;
    
    m_has_hyperlinks = false;
    
    if (m_hyperlinks)
    {
        delete m_hyperlinks;
        m_hyperlinks = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_cellWatches = false;
    
    if (m_cellWatches)
    {
        delete m_cellWatches;
        m_cellWatches = NULL;
    }
    ;
    
    m_has_ignoredErrors = false;
    
    if (m_ignoredErrors)
    {
        delete m_ignoredErrors;
        m_ignoredErrors = NULL;
    }
    ;
    
    m_has_smartTags = false;
    
    if (m_smartTags)
    {
        delete m_smartTags;
        m_smartTags = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_controls = false;
    
    if (m_controls)
    {
        delete m_controls;
        m_controls = NULL;
    }
    ;
    
    m_has_webPublishItems = false;
    
    if (m_webPublishItems)
    {
        delete m_webPublishItems;
        m_webPublishItems = NULL;
    }
    ;
    
    m_has_tableParts = false;
    
    if (m_tableParts)
    {
        delete m_tableParts;
        m_tableParts = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_pageSetup = true;
    if (!m_pageSetup)
    {
        m_pageSetup = new CT_PageSetup();
    }
    return m_pageSetup;
    }

    const CT_PageSetup& worksheet_element::ChildGroup_1::get_pageSetup() const
    {    
    if (m_pageSetup)
    {
        return *m_pageSetup;
    }
    return CT_PageSetup::default_instance();
    }

    bool worksheet_element::ChildGroup_1::has_headerFooter() const
    {    
    return m_has_headerFooter;
    }

    CT_HeaderFooter* worksheet_element::ChildGroup_1::mutable_headerFooter()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetCalcPr = false;
    
    if (m_sheetCalcPr)
    {
        delete m_sheetCalcPr;
        m_sheetCalcPr = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_protectedRanges = false;
    
    if (m_protectedRanges)
    {
        delete m_protectedRanges;
        m_protectedRanges = NULL;
    }
    ;
    
    m_has_scenarios = false;
    
    if (m_scenarios)
    {
        delete m_scenarios;
        m_scenarios = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_mergeCells = false;
    
    if (m_mergeCells)
    {
        delete m_mergeCells;
        m_mergeCells = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_dataValidations = false;
    
    if (m_dataValidations)
    {
        delete m_dataValidations;
        m_dataValidations = NULL;
    }
    ;
    
    m_has_hyperlinks = false;
    
    if (m_hyperlinks)
    {
        delete m_hyperlinks;
        m_hyperlinks = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_cellWatches = false;
    
    if (m_cellWatches)
    {
        delete m_cellWatches;
        m_cellWatches = NULL;
    }
    ;
    
    m_has_ignoredErrors = false;
    
    if (m_ignoredErrors)
    {
        delete m_ignoredErrors;
        m_ignoredErrors = NULL;
    }
    ;
    
    m_has_smartTags = false;
    
    if (m_smartTags)
    {
        delete m_smartTags;
        m_smartTags = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_controls = false;
    
    if (m_controls)
    {
        delete m_controls;
        m_controls = NULL;
    }
    ;
    
    m_has_webPublishItems = false;
    
    if (m_webPublishItems)
    {
        delete m_webPublishItems;
        m_webPublishItems = NULL;
    }
    ;
    
    m_has_tableParts = false;
    
    if (m_tableParts)
    {
        delete m_tableParts;
        m_tableParts = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_headerFooter = true;
    if (!m_headerFooter)
    {
        m_headerFooter = new CT_HeaderFooter();
    }
    return m_headerFooter;
    }

    const CT_HeaderFooter& worksheet_element::ChildGroup_1::get_headerFooter() const
    {    
    if (m_headerFooter)
    {
        return *m_headerFooter;
    }
    return CT_HeaderFooter::default_instance();
    }

    bool worksheet_element::ChildGroup_1::has_rowBreaks() const
    {    
    return m_has_rowBreaks;
    }

    CT_PageBreak* worksheet_element::ChildGroup_1::mutable_rowBreaks()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetCalcPr = false;
    
    if (m_sheetCalcPr)
    {
        delete m_sheetCalcPr;
        m_sheetCalcPr = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_protectedRanges = false;
    
    if (m_protectedRanges)
    {
        delete m_protectedRanges;
        m_protectedRanges = NULL;
    }
    ;
    
    m_has_scenarios = false;
    
    if (m_scenarios)
    {
        delete m_scenarios;
        m_scenarios = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_mergeCells = false;
    
    if (m_mergeCells)
    {
        delete m_mergeCells;
        m_mergeCells = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_dataValidations = false;
    
    if (m_dataValidations)
    {
        delete m_dataValidations;
        m_dataValidations = NULL;
    }
    ;
    
    m_has_hyperlinks = false;
    
    if (m_hyperlinks)
    {
        delete m_hyperlinks;
        m_hyperlinks = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_cellWatches = false;
    
    if (m_cellWatches)
    {
        delete m_cellWatches;
        m_cellWatches = NULL;
    }
    ;
    
    m_has_ignoredErrors = false;
    
    if (m_ignoredErrors)
    {
        delete m_ignoredErrors;
        m_ignoredErrors = NULL;
    }
    ;
    
    m_has_smartTags = false;
    
    if (m_smartTags)
    {
        delete m_smartTags;
        m_smartTags = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_controls = false;
    
    if (m_controls)
    {
        delete m_controls;
        m_controls = NULL;
    }
    ;
    
    m_has_webPublishItems = false;
    
    if (m_webPublishItems)
    {
        delete m_webPublishItems;
        m_webPublishItems = NULL;
    }
    ;
    
    m_has_tableParts = false;
    
    if (m_tableParts)
    {
        delete m_tableParts;
        m_tableParts = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_rowBreaks = true;
    if (!m_rowBreaks)
    {
        m_rowBreaks = new CT_PageBreak();
    }
    return m_rowBreaks;
    }

    const CT_PageBreak& worksheet_element::ChildGroup_1::get_rowBreaks() const
    {    
    if (m_rowBreaks)
    {
        return *m_rowBreaks;
    }
    return CT_PageBreak::default_instance();
    }

    bool worksheet_element::ChildGroup_1::has_colBreaks() const
    {    
    return m_has_colBreaks;
    }

    CT_PageBreak* worksheet_element::ChildGroup_1::mutable_colBreaks()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetCalcPr = false;
    
    if (m_sheetCalcPr)
    {
        delete m_sheetCalcPr;
        m_sheetCalcPr = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_protectedRanges = false;
    
    if (m_protectedRanges)
    {
        delete m_protectedRanges;
        m_protectedRanges = NULL;
    }
    ;
    
    m_has_scenarios = false;
    
    if (m_scenarios)
    {
        delete m_scenarios;
        m_scenarios = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_mergeCells = false;
    
    if (m_mergeCells)
    {
        delete m_mergeCells;
        m_mergeCells = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_dataValidations = false;
    
    if (m_dataValidations)
    {
        delete m_dataValidations;
        m_dataValidations = NULL;
    }
    ;
    
    m_has_hyperlinks = false;
    
    if (m_hyperlinks)
    {
        delete m_hyperlinks;
        m_hyperlinks = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_cellWatches = false;
    
    if (m_cellWatches)
    {
        delete m_cellWatches;
        m_cellWatches = NULL;
    }
    ;
    
    m_has_ignoredErrors = false;
    
    if (m_ignoredErrors)
    {
        delete m_ignoredErrors;
        m_ignoredErrors = NULL;
    }
    ;
    
    m_has_smartTags = false;
    
    if (m_smartTags)
    {
        delete m_smartTags;
        m_smartTags = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_controls = false;
    
    if (m_controls)
    {
        delete m_controls;
        m_controls = NULL;
    }
    ;
    
    m_has_webPublishItems = false;
    
    if (m_webPublishItems)
    {
        delete m_webPublishItems;
        m_webPublishItems = NULL;
    }
    ;
    
    m_has_tableParts = false;
    
    if (m_tableParts)
    {
        delete m_tableParts;
        m_tableParts = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_colBreaks = true;
    if (!m_colBreaks)
    {
        m_colBreaks = new CT_PageBreak();
    }
    return m_colBreaks;
    }

    const CT_PageBreak& worksheet_element::ChildGroup_1::get_colBreaks() const
    {    
    if (m_colBreaks)
    {
        return *m_colBreaks;
    }
    return CT_PageBreak::default_instance();
    }

    bool worksheet_element::ChildGroup_1::has_customProperties() const
    {    
    return m_has_customProperties;
    }

    CT_CustomProperties* worksheet_element::ChildGroup_1::mutable_customProperties()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetCalcPr = false;
    
    if (m_sheetCalcPr)
    {
        delete m_sheetCalcPr;
        m_sheetCalcPr = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_protectedRanges = false;
    
    if (m_protectedRanges)
    {
        delete m_protectedRanges;
        m_protectedRanges = NULL;
    }
    ;
    
    m_has_scenarios = false;
    
    if (m_scenarios)
    {
        delete m_scenarios;
        m_scenarios = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_mergeCells = false;
    
    if (m_mergeCells)
    {
        delete m_mergeCells;
        m_mergeCells = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_dataValidations = false;
    
    if (m_dataValidations)
    {
        delete m_dataValidations;
        m_dataValidations = NULL;
    }
    ;
    
    m_has_hyperlinks = false;
    
    if (m_hyperlinks)
    {
        delete m_hyperlinks;
        m_hyperlinks = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_cellWatches = false;
    
    if (m_cellWatches)
    {
        delete m_cellWatches;
        m_cellWatches = NULL;
    }
    ;
    
    m_has_ignoredErrors = false;
    
    if (m_ignoredErrors)
    {
        delete m_ignoredErrors;
        m_ignoredErrors = NULL;
    }
    ;
    
    m_has_smartTags = false;
    
    if (m_smartTags)
    {
        delete m_smartTags;
        m_smartTags = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_controls = false;
    
    if (m_controls)
    {
        delete m_controls;
        m_controls = NULL;
    }
    ;
    
    m_has_webPublishItems = false;
    
    if (m_webPublishItems)
    {
        delete m_webPublishItems;
        m_webPublishItems = NULL;
    }
    ;
    
    m_has_tableParts = false;
    
    if (m_tableParts)
    {
        delete m_tableParts;
        m_tableParts = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_customProperties = true;
    if (!m_customProperties)
    {
        m_customProperties = new CT_CustomProperties();
    }
    return m_customProperties;
    }

    const CT_CustomProperties& worksheet_element::ChildGroup_1::get_customProperties() const
    {    
    if (m_customProperties)
    {
        return *m_customProperties;
    }
    return CT_CustomProperties::default_instance();
    }

    bool worksheet_element::ChildGroup_1::has_cellWatches() const
    {    
    return m_has_cellWatches;
    }

    CT_CellWatches* worksheet_element::ChildGroup_1::mutable_cellWatches()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetCalcPr = false;
    
    if (m_sheetCalcPr)
    {
        delete m_sheetCalcPr;
        m_sheetCalcPr = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_protectedRanges = false;
    
    if (m_protectedRanges)
    {
        delete m_protectedRanges;
        m_protectedRanges = NULL;
    }
    ;
    
    m_has_scenarios = false;
    
    if (m_scenarios)
    {
        delete m_scenarios;
        m_scenarios = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_mergeCells = false;
    
    if (m_mergeCells)
    {
        delete m_mergeCells;
        m_mergeCells = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_dataValidations = false;
    
    if (m_dataValidations)
    {
        delete m_dataValidations;
        m_dataValidations = NULL;
    }
    ;
    
    m_has_hyperlinks = false;
    
    if (m_hyperlinks)
    {
        delete m_hyperlinks;
        m_hyperlinks = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_ignoredErrors = false;
    
    if (m_ignoredErrors)
    {
        delete m_ignoredErrors;
        m_ignoredErrors = NULL;
    }
    ;
    
    m_has_smartTags = false;
    
    if (m_smartTags)
    {
        delete m_smartTags;
        m_smartTags = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_controls = false;
    
    if (m_controls)
    {
        delete m_controls;
        m_controls = NULL;
    }
    ;
    
    m_has_webPublishItems = false;
    
    if (m_webPublishItems)
    {
        delete m_webPublishItems;
        m_webPublishItems = NULL;
    }
    ;
    
    m_has_tableParts = false;
    
    if (m_tableParts)
    {
        delete m_tableParts;
        m_tableParts = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_cellWatches = true;
    if (!m_cellWatches)
    {
        m_cellWatches = new CT_CellWatches();
    }
    return m_cellWatches;
    }

    const CT_CellWatches& worksheet_element::ChildGroup_1::get_cellWatches() const
    {    
    if (m_cellWatches)
    {
        return *m_cellWatches;
    }
    return CT_CellWatches::default_instance();
    }

    bool worksheet_element::ChildGroup_1::has_ignoredErrors() const
    {    
    return m_has_ignoredErrors;
    }

    CT_IgnoredErrors* worksheet_element::ChildGroup_1::mutable_ignoredErrors()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetCalcPr = false;
    
    if (m_sheetCalcPr)
    {
        delete m_sheetCalcPr;
        m_sheetCalcPr = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_protectedRanges = false;
    
    if (m_protectedRanges)
    {
        delete m_protectedRanges;
        m_protectedRanges = NULL;
    }
    ;
    
    m_has_scenarios = false;
    
    if (m_scenarios)
    {
        delete m_scenarios;
        m_scenarios = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_mergeCells = false;
    
    if (m_mergeCells)
    {
        delete m_mergeCells;
        m_mergeCells = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_dataValidations = false;
    
    if (m_dataValidations)
    {
        delete m_dataValidations;
        m_dataValidations = NULL;
    }
    ;
    
    m_has_hyperlinks = false;
    
    if (m_hyperlinks)
    {
        delete m_hyperlinks;
        m_hyperlinks = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_cellWatches = false;
    
    if (m_cellWatches)
    {
        delete m_cellWatches;
        m_cellWatches = NULL;
    }
    ;
    
    m_has_smartTags = false;
    
    if (m_smartTags)
    {
        delete m_smartTags;
        m_smartTags = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_controls = false;
    
    if (m_controls)
    {
        delete m_controls;
        m_controls = NULL;
    }
    ;
    
    m_has_webPublishItems = false;
    
    if (m_webPublishItems)
    {
        delete m_webPublishItems;
        m_webPublishItems = NULL;
    }
    ;
    
    m_has_tableParts = false;
    
    if (m_tableParts)
    {
        delete m_tableParts;
        m_tableParts = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_ignoredErrors = true;
    if (!m_ignoredErrors)
    {
        m_ignoredErrors = new CT_IgnoredErrors();
    }
    return m_ignoredErrors;
    }

    const CT_IgnoredErrors& worksheet_element::ChildGroup_1::get_ignoredErrors() const
    {    
    if (m_ignoredErrors)
    {
        return *m_ignoredErrors;
    }
    return CT_IgnoredErrors::default_instance();
    }

    bool worksheet_element::ChildGroup_1::has_smartTags() const
    {    
    return m_has_smartTags;
    }

    CT_SmartTags* worksheet_element::ChildGroup_1::mutable_smartTags()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetCalcPr = false;
    
    if (m_sheetCalcPr)
    {
        delete m_sheetCalcPr;
        m_sheetCalcPr = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_protectedRanges = false;
    
    if (m_protectedRanges)
    {
        delete m_protectedRanges;
        m_protectedRanges = NULL;
    }
    ;
    
    m_has_scenarios = false;
    
    if (m_scenarios)
    {
        delete m_scenarios;
        m_scenarios = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_mergeCells = false;
    
    if (m_mergeCells)
    {
        delete m_mergeCells;
        m_mergeCells = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_dataValidations = false;
    
    if (m_dataValidations)
    {
        delete m_dataValidations;
        m_dataValidations = NULL;
    }
    ;
    
    m_has_hyperlinks = false;
    
    if (m_hyperlinks)
    {
        delete m_hyperlinks;
        m_hyperlinks = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_cellWatches = false;
    
    if (m_cellWatches)
    {
        delete m_cellWatches;
        m_cellWatches = NULL;
    }
    ;
    
    m_has_ignoredErrors = false;
    
    if (m_ignoredErrors)
    {
        delete m_ignoredErrors;
        m_ignoredErrors = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_controls = false;
    
    if (m_controls)
    {
        delete m_controls;
        m_controls = NULL;
    }
    ;
    
    m_has_webPublishItems = false;
    
    if (m_webPublishItems)
    {
        delete m_webPublishItems;
        m_webPublishItems = NULL;
    }
    ;
    
    m_has_tableParts = false;
    
    if (m_tableParts)
    {
        delete m_tableParts;
        m_tableParts = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_smartTags = true;
    if (!m_smartTags)
    {
        m_smartTags = new CT_SmartTags();
    }
    return m_smartTags;
    }

    const CT_SmartTags& worksheet_element::ChildGroup_1::get_smartTags() const
    {    
    if (m_smartTags)
    {
        return *m_smartTags;
    }
    return CT_SmartTags::default_instance();
    }

    bool worksheet_element::ChildGroup_1::has_drawing() const
    {    
    return m_has_drawing;
    }

    CT_Drawing* worksheet_element::ChildGroup_1::mutable_drawing()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetCalcPr = false;
    
    if (m_sheetCalcPr)
    {
        delete m_sheetCalcPr;
        m_sheetCalcPr = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_protectedRanges = false;
    
    if (m_protectedRanges)
    {
        delete m_protectedRanges;
        m_protectedRanges = NULL;
    }
    ;
    
    m_has_scenarios = false;
    
    if (m_scenarios)
    {
        delete m_scenarios;
        m_scenarios = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_mergeCells = false;
    
    if (m_mergeCells)
    {
        delete m_mergeCells;
        m_mergeCells = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_dataValidations = false;
    
    if (m_dataValidations)
    {
        delete m_dataValidations;
        m_dataValidations = NULL;
    }
    ;
    
    m_has_hyperlinks = false;
    
    if (m_hyperlinks)
    {
        delete m_hyperlinks;
        m_hyperlinks = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_cellWatches = false;
    
    if (m_cellWatches)
    {
        delete m_cellWatches;
        m_cellWatches = NULL;
    }
    ;
    
    m_has_ignoredErrors = false;
    
    if (m_ignoredErrors)
    {
        delete m_ignoredErrors;
        m_ignoredErrors = NULL;
    }
    ;
    
    m_has_smartTags = false;
    
    if (m_smartTags)
    {
        delete m_smartTags;
        m_smartTags = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_controls = false;
    
    if (m_controls)
    {
        delete m_controls;
        m_controls = NULL;
    }
    ;
    
    m_has_webPublishItems = false;
    
    if (m_webPublishItems)
    {
        delete m_webPublishItems;
        m_webPublishItems = NULL;
    }
    ;
    
    m_has_tableParts = false;
    
    if (m_tableParts)
    {
        delete m_tableParts;
        m_tableParts = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_drawing = true;
    if (!m_drawing)
    {
        m_drawing = new CT_Drawing();
    }
    return m_drawing;
    }

    const CT_Drawing& worksheet_element::ChildGroup_1::get_drawing() const
    {    
    if (m_drawing)
    {
        return *m_drawing;
    }
    return CT_Drawing::default_instance();
    }

    bool worksheet_element::ChildGroup_1::has_legacyDrawing() const
    {    
    return m_has_legacyDrawing;
    }

    CT_LegacyDrawing* worksheet_element::ChildGroup_1::mutable_legacyDrawing()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetCalcPr = false;
    
    if (m_sheetCalcPr)
    {
        delete m_sheetCalcPr;
        m_sheetCalcPr = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_protectedRanges = false;
    
    if (m_protectedRanges)
    {
        delete m_protectedRanges;
        m_protectedRanges = NULL;
    }
    ;
    
    m_has_scenarios = false;
    
    if (m_scenarios)
    {
        delete m_scenarios;
        m_scenarios = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_mergeCells = false;
    
    if (m_mergeCells)
    {
        delete m_mergeCells;
        m_mergeCells = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_dataValidations = false;
    
    if (m_dataValidations)
    {
        delete m_dataValidations;
        m_dataValidations = NULL;
    }
    ;
    
    m_has_hyperlinks = false;
    
    if (m_hyperlinks)
    {
        delete m_hyperlinks;
        m_hyperlinks = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_cellWatches = false;
    
    if (m_cellWatches)
    {
        delete m_cellWatches;
        m_cellWatches = NULL;
    }
    ;
    
    m_has_ignoredErrors = false;
    
    if (m_ignoredErrors)
    {
        delete m_ignoredErrors;
        m_ignoredErrors = NULL;
    }
    ;
    
    m_has_smartTags = false;
    
    if (m_smartTags)
    {
        delete m_smartTags;
        m_smartTags = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_controls = false;
    
    if (m_controls)
    {
        delete m_controls;
        m_controls = NULL;
    }
    ;
    
    m_has_webPublishItems = false;
    
    if (m_webPublishItems)
    {
        delete m_webPublishItems;
        m_webPublishItems = NULL;
    }
    ;
    
    m_has_tableParts = false;
    
    if (m_tableParts)
    {
        delete m_tableParts;
        m_tableParts = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_legacyDrawing = true;
    if (!m_legacyDrawing)
    {
        m_legacyDrawing = new CT_LegacyDrawing();
    }
    return m_legacyDrawing;
    }

    const CT_LegacyDrawing& worksheet_element::ChildGroup_1::get_legacyDrawing() const
    {    
    if (m_legacyDrawing)
    {
        return *m_legacyDrawing;
    }
    return CT_LegacyDrawing::default_instance();
    }

    bool worksheet_element::ChildGroup_1::has_legacyDrawingHF() const
    {    
    return m_has_legacyDrawingHF;
    }

    CT_LegacyDrawing* worksheet_element::ChildGroup_1::mutable_legacyDrawingHF()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetCalcPr = false;
    
    if (m_sheetCalcPr)
    {
        delete m_sheetCalcPr;
        m_sheetCalcPr = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_protectedRanges = false;
    
    if (m_protectedRanges)
    {
        delete m_protectedRanges;
        m_protectedRanges = NULL;
    }
    ;
    
    m_has_scenarios = false;
    
    if (m_scenarios)
    {
        delete m_scenarios;
        m_scenarios = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_mergeCells = false;
    
    if (m_mergeCells)
    {
        delete m_mergeCells;
        m_mergeCells = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_dataValidations = false;
    
    if (m_dataValidations)
    {
        delete m_dataValidations;
        m_dataValidations = NULL;
    }
    ;
    
    m_has_hyperlinks = false;
    
    if (m_hyperlinks)
    {
        delete m_hyperlinks;
        m_hyperlinks = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_cellWatches = false;
    
    if (m_cellWatches)
    {
        delete m_cellWatches;
        m_cellWatches = NULL;
    }
    ;
    
    m_has_ignoredErrors = false;
    
    if (m_ignoredErrors)
    {
        delete m_ignoredErrors;
        m_ignoredErrors = NULL;
    }
    ;
    
    m_has_smartTags = false;
    
    if (m_smartTags)
    {
        delete m_smartTags;
        m_smartTags = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_controls = false;
    
    if (m_controls)
    {
        delete m_controls;
        m_controls = NULL;
    }
    ;
    
    m_has_webPublishItems = false;
    
    if (m_webPublishItems)
    {
        delete m_webPublishItems;
        m_webPublishItems = NULL;
    }
    ;
    
    m_has_tableParts = false;
    
    if (m_tableParts)
    {
        delete m_tableParts;
        m_tableParts = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = true;
    if (!m_legacyDrawingHF)
    {
        m_legacyDrawingHF = new CT_LegacyDrawing();
    }
    return m_legacyDrawingHF;
    }

    const CT_LegacyDrawing& worksheet_element::ChildGroup_1::get_legacyDrawingHF() const
    {    
    if (m_legacyDrawingHF)
    {
        return *m_legacyDrawingHF;
    }
    return CT_LegacyDrawing::default_instance();
    }

    bool worksheet_element::ChildGroup_1::has_drawingHF() const
    {    
    return m_has_drawingHF;
    }

    CT_DrawingHF* worksheet_element::ChildGroup_1::mutable_drawingHF()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetCalcPr = false;
    
    if (m_sheetCalcPr)
    {
        delete m_sheetCalcPr;
        m_sheetCalcPr = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_protectedRanges = false;
    
    if (m_protectedRanges)
    {
        delete m_protectedRanges;
        m_protectedRanges = NULL;
    }
    ;
    
    m_has_scenarios = false;
    
    if (m_scenarios)
    {
        delete m_scenarios;
        m_scenarios = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_mergeCells = false;
    
    if (m_mergeCells)
    {
        delete m_mergeCells;
        m_mergeCells = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_dataValidations = false;
    
    if (m_dataValidations)
    {
        delete m_dataValidations;
        m_dataValidations = NULL;
    }
    ;
    
    m_has_hyperlinks = false;
    
    if (m_hyperlinks)
    {
        delete m_hyperlinks;
        m_hyperlinks = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_cellWatches = false;
    
    if (m_cellWatches)
    {
        delete m_cellWatches;
        m_cellWatches = NULL;
    }
    ;
    
    m_has_ignoredErrors = false;
    
    if (m_ignoredErrors)
    {
        delete m_ignoredErrors;
        m_ignoredErrors = NULL;
    }
    ;
    
    m_has_smartTags = false;
    
    if (m_smartTags)
    {
        delete m_smartTags;
        m_smartTags = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_controls = false;
    
    if (m_controls)
    {
        delete m_controls;
        m_controls = NULL;
    }
    ;
    
    m_has_webPublishItems = false;
    
    if (m_webPublishItems)
    {
        delete m_webPublishItems;
        m_webPublishItems = NULL;
    }
    ;
    
    m_has_tableParts = false;
    
    if (m_tableParts)
    {
        delete m_tableParts;
        m_tableParts = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_drawingHF = true;
    if (!m_drawingHF)
    {
        m_drawingHF = new CT_DrawingHF();
    }
    return m_drawingHF;
    }

    const CT_DrawingHF& worksheet_element::ChildGroup_1::get_drawingHF() const
    {    
    if (m_drawingHF)
    {
        return *m_drawingHF;
    }
    return CT_DrawingHF::default_instance();
    }

    bool worksheet_element::ChildGroup_1::has_picture() const
    {    
    return m_has_picture;
    }

    CT_SheetBackgroundPicture* worksheet_element::ChildGroup_1::mutable_picture()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetCalcPr = false;
    
    if (m_sheetCalcPr)
    {
        delete m_sheetCalcPr;
        m_sheetCalcPr = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_protectedRanges = false;
    
    if (m_protectedRanges)
    {
        delete m_protectedRanges;
        m_protectedRanges = NULL;
    }
    ;
    
    m_has_scenarios = false;
    
    if (m_scenarios)
    {
        delete m_scenarios;
        m_scenarios = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_mergeCells = false;
    
    if (m_mergeCells)
    {
        delete m_mergeCells;
        m_mergeCells = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_dataValidations = false;
    
    if (m_dataValidations)
    {
        delete m_dataValidations;
        m_dataValidations = NULL;
    }
    ;
    
    m_has_hyperlinks = false;
    
    if (m_hyperlinks)
    {
        delete m_hyperlinks;
        m_hyperlinks = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_cellWatches = false;
    
    if (m_cellWatches)
    {
        delete m_cellWatches;
        m_cellWatches = NULL;
    }
    ;
    
    m_has_ignoredErrors = false;
    
    if (m_ignoredErrors)
    {
        delete m_ignoredErrors;
        m_ignoredErrors = NULL;
    }
    ;
    
    m_has_smartTags = false;
    
    if (m_smartTags)
    {
        delete m_smartTags;
        m_smartTags = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_controls = false;
    
    if (m_controls)
    {
        delete m_controls;
        m_controls = NULL;
    }
    ;
    
    m_has_webPublishItems = false;
    
    if (m_webPublishItems)
    {
        delete m_webPublishItems;
        m_webPublishItems = NULL;
    }
    ;
    
    m_has_tableParts = false;
    
    if (m_tableParts)
    {
        delete m_tableParts;
        m_tableParts = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_picture = true;
    if (!m_picture)
    {
        m_picture = new CT_SheetBackgroundPicture();
    }
    return m_picture;
    }

    const CT_SheetBackgroundPicture& worksheet_element::ChildGroup_1::get_picture() const
    {    
    if (m_picture)
    {
        return *m_picture;
    }
    return CT_SheetBackgroundPicture::default_instance();
    }

    bool worksheet_element::ChildGroup_1::has_oleObjects() const
    {    
    return m_has_oleObjects;
    }

    CT_OleObjects* worksheet_element::ChildGroup_1::mutable_oleObjects()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetCalcPr = false;
    
    if (m_sheetCalcPr)
    {
        delete m_sheetCalcPr;
        m_sheetCalcPr = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_protectedRanges = false;
    
    if (m_protectedRanges)
    {
        delete m_protectedRanges;
        m_protectedRanges = NULL;
    }
    ;
    
    m_has_scenarios = false;
    
    if (m_scenarios)
    {
        delete m_scenarios;
        m_scenarios = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_mergeCells = false;
    
    if (m_mergeCells)
    {
        delete m_mergeCells;
        m_mergeCells = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_dataValidations = false;
    
    if (m_dataValidations)
    {
        delete m_dataValidations;
        m_dataValidations = NULL;
    }
    ;
    
    m_has_hyperlinks = false;
    
    if (m_hyperlinks)
    {
        delete m_hyperlinks;
        m_hyperlinks = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_cellWatches = false;
    
    if (m_cellWatches)
    {
        delete m_cellWatches;
        m_cellWatches = NULL;
    }
    ;
    
    m_has_ignoredErrors = false;
    
    if (m_ignoredErrors)
    {
        delete m_ignoredErrors;
        m_ignoredErrors = NULL;
    }
    ;
    
    m_has_smartTags = false;
    
    if (m_smartTags)
    {
        delete m_smartTags;
        m_smartTags = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_controls = false;
    
    if (m_controls)
    {
        delete m_controls;
        m_controls = NULL;
    }
    ;
    
    m_has_webPublishItems = false;
    
    if (m_webPublishItems)
    {
        delete m_webPublishItems;
        m_webPublishItems = NULL;
    }
    ;
    
    m_has_tableParts = false;
    
    if (m_tableParts)
    {
        delete m_tableParts;
        m_tableParts = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_oleObjects = true;
    if (!m_oleObjects)
    {
        m_oleObjects = new CT_OleObjects();
    }
    return m_oleObjects;
    }

    const CT_OleObjects& worksheet_element::ChildGroup_1::get_oleObjects() const
    {    
    if (m_oleObjects)
    {
        return *m_oleObjects;
    }
    return CT_OleObjects::default_instance();
    }

    bool worksheet_element::ChildGroup_1::has_controls() const
    {    
    return m_has_controls;
    }

    CT_Controls* worksheet_element::ChildGroup_1::mutable_controls()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetCalcPr = false;
    
    if (m_sheetCalcPr)
    {
        delete m_sheetCalcPr;
        m_sheetCalcPr = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_protectedRanges = false;
    
    if (m_protectedRanges)
    {
        delete m_protectedRanges;
        m_protectedRanges = NULL;
    }
    ;
    
    m_has_scenarios = false;
    
    if (m_scenarios)
    {
        delete m_scenarios;
        m_scenarios = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_mergeCells = false;
    
    if (m_mergeCells)
    {
        delete m_mergeCells;
        m_mergeCells = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_dataValidations = false;
    
    if (m_dataValidations)
    {
        delete m_dataValidations;
        m_dataValidations = NULL;
    }
    ;
    
    m_has_hyperlinks = false;
    
    if (m_hyperlinks)
    {
        delete m_hyperlinks;
        m_hyperlinks = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_cellWatches = false;
    
    if (m_cellWatches)
    {
        delete m_cellWatches;
        m_cellWatches = NULL;
    }
    ;
    
    m_has_ignoredErrors = false;
    
    if (m_ignoredErrors)
    {
        delete m_ignoredErrors;
        m_ignoredErrors = NULL;
    }
    ;
    
    m_has_smartTags = false;
    
    if (m_smartTags)
    {
        delete m_smartTags;
        m_smartTags = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_webPublishItems = false;
    
    if (m_webPublishItems)
    {
        delete m_webPublishItems;
        m_webPublishItems = NULL;
    }
    ;
    
    m_has_tableParts = false;
    
    if (m_tableParts)
    {
        delete m_tableParts;
        m_tableParts = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_controls = true;
    if (!m_controls)
    {
        m_controls = new CT_Controls();
    }
    return m_controls;
    }

    const CT_Controls& worksheet_element::ChildGroup_1::get_controls() const
    {    
    if (m_controls)
    {
        return *m_controls;
    }
    return CT_Controls::default_instance();
    }

    bool worksheet_element::ChildGroup_1::has_webPublishItems() const
    {    
    return m_has_webPublishItems;
    }

    CT_WebPublishItems* worksheet_element::ChildGroup_1::mutable_webPublishItems()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetCalcPr = false;
    
    if (m_sheetCalcPr)
    {
        delete m_sheetCalcPr;
        m_sheetCalcPr = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_protectedRanges = false;
    
    if (m_protectedRanges)
    {
        delete m_protectedRanges;
        m_protectedRanges = NULL;
    }
    ;
    
    m_has_scenarios = false;
    
    if (m_scenarios)
    {
        delete m_scenarios;
        m_scenarios = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_mergeCells = false;
    
    if (m_mergeCells)
    {
        delete m_mergeCells;
        m_mergeCells = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_dataValidations = false;
    
    if (m_dataValidations)
    {
        delete m_dataValidations;
        m_dataValidations = NULL;
    }
    ;
    
    m_has_hyperlinks = false;
    
    if (m_hyperlinks)
    {
        delete m_hyperlinks;
        m_hyperlinks = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_cellWatches = false;
    
    if (m_cellWatches)
    {
        delete m_cellWatches;
        m_cellWatches = NULL;
    }
    ;
    
    m_has_ignoredErrors = false;
    
    if (m_ignoredErrors)
    {
        delete m_ignoredErrors;
        m_ignoredErrors = NULL;
    }
    ;
    
    m_has_smartTags = false;
    
    if (m_smartTags)
    {
        delete m_smartTags;
        m_smartTags = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_controls = false;
    
    if (m_controls)
    {
        delete m_controls;
        m_controls = NULL;
    }
    ;
    
    m_has_tableParts = false;
    
    if (m_tableParts)
    {
        delete m_tableParts;
        m_tableParts = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_webPublishItems = true;
    if (!m_webPublishItems)
    {
        m_webPublishItems = new CT_WebPublishItems();
    }
    return m_webPublishItems;
    }

    const CT_WebPublishItems& worksheet_element::ChildGroup_1::get_webPublishItems() const
    {    
    if (m_webPublishItems)
    {
        return *m_webPublishItems;
    }
    return CT_WebPublishItems::default_instance();
    }

    bool worksheet_element::ChildGroup_1::has_tableParts() const
    {    
    return m_has_tableParts;
    }

    CT_TableParts* worksheet_element::ChildGroup_1::mutable_tableParts()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetCalcPr = false;
    
    if (m_sheetCalcPr)
    {
        delete m_sheetCalcPr;
        m_sheetCalcPr = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_protectedRanges = false;
    
    if (m_protectedRanges)
    {
        delete m_protectedRanges;
        m_protectedRanges = NULL;
    }
    ;
    
    m_has_scenarios = false;
    
    if (m_scenarios)
    {
        delete m_scenarios;
        m_scenarios = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_mergeCells = false;
    
    if (m_mergeCells)
    {
        delete m_mergeCells;
        m_mergeCells = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_dataValidations = false;
    
    if (m_dataValidations)
    {
        delete m_dataValidations;
        m_dataValidations = NULL;
    }
    ;
    
    m_has_hyperlinks = false;
    
    if (m_hyperlinks)
    {
        delete m_hyperlinks;
        m_hyperlinks = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_cellWatches = false;
    
    if (m_cellWatches)
    {
        delete m_cellWatches;
        m_cellWatches = NULL;
    }
    ;
    
    m_has_ignoredErrors = false;
    
    if (m_ignoredErrors)
    {
        delete m_ignoredErrors;
        m_ignoredErrors = NULL;
    }
    ;
    
    m_has_smartTags = false;
    
    if (m_smartTags)
    {
        delete m_smartTags;
        m_smartTags = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_controls = false;
    
    if (m_controls)
    {
        delete m_controls;
        m_controls = NULL;
    }
    ;
    
    m_has_webPublishItems = false;
    
    if (m_webPublishItems)
    {
        delete m_webPublishItems;
        m_webPublishItems = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_tableParts = true;
    if (!m_tableParts)
    {
        m_tableParts = new CT_TableParts();
    }
    return m_tableParts;
    }

    const CT_TableParts& worksheet_element::ChildGroup_1::get_tableParts() const
    {    
    if (m_tableParts)
    {
        return *m_tableParts;
    }
    return CT_TableParts::default_instance();
    }

    bool worksheet_element::ChildGroup_1::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* worksheet_element::ChildGroup_1::mutable_extLst()
    {    
    
    m_has_cols = false;
    
    if (m_cols)
    {
        delete m_cols;
        m_cols = NULL;
    }
    ;
    
    m_has_sheetData = false;
    
    if (m_sheetData)
    {
        delete m_sheetData;
        m_sheetData = NULL;
    }
    ;
    
    m_has_sheetCalcPr = false;
    
    if (m_sheetCalcPr)
    {
        delete m_sheetCalcPr;
        m_sheetCalcPr = NULL;
    }
    ;
    
    m_has_sheetProtection = false;
    
    if (m_sheetProtection)
    {
        delete m_sheetProtection;
        m_sheetProtection = NULL;
    }
    ;
    
    m_has_protectedRanges = false;
    
    if (m_protectedRanges)
    {
        delete m_protectedRanges;
        m_protectedRanges = NULL;
    }
    ;
    
    m_has_scenarios = false;
    
    if (m_scenarios)
    {
        delete m_scenarios;
        m_scenarios = NULL;
    }
    ;
    
    m_has_autoFilter = false;
    
    if (m_autoFilter)
    {
        delete m_autoFilter;
        m_autoFilter = NULL;
    }
    ;
    
    m_has_sortState = false;
    
    if (m_sortState)
    {
        delete m_sortState;
        m_sortState = NULL;
    }
    ;
    
    m_has_dataConsolidate = false;
    
    if (m_dataConsolidate)
    {
        delete m_dataConsolidate;
        m_dataConsolidate = NULL;
    }
    ;
    
    m_has_customSheetViews = false;
    
    if (m_customSheetViews)
    {
        delete m_customSheetViews;
        m_customSheetViews = NULL;
    }
    ;
    
    m_has_mergeCells = false;
    
    if (m_mergeCells)
    {
        delete m_mergeCells;
        m_mergeCells = NULL;
    }
    ;
    
    m_has_phoneticPr = false;
    
    if (m_phoneticPr)
    {
        delete m_phoneticPr;
        m_phoneticPr = NULL;
    }
    ;
    
    m_has_conditionalFormatting = false;
    
    if (m_conditionalFormatting)
    {
        delete m_conditionalFormatting;
        m_conditionalFormatting = NULL;
    }
    ;
    
    m_has_dataValidations = false;
    
    if (m_dataValidations)
    {
        delete m_dataValidations;
        m_dataValidations = NULL;
    }
    ;
    
    m_has_hyperlinks = false;
    
    if (m_hyperlinks)
    {
        delete m_hyperlinks;
        m_hyperlinks = NULL;
    }
    ;
    
    m_has_printOptions = false;
    
    if (m_printOptions)
    {
        delete m_printOptions;
        m_printOptions = NULL;
    }
    ;
    
    m_has_pageMargins = false;
    
    if (m_pageMargins)
    {
        delete m_pageMargins;
        m_pageMargins = NULL;
    }
    ;
    
    m_has_pageSetup = false;
    
    if (m_pageSetup)
    {
        delete m_pageSetup;
        m_pageSetup = NULL;
    }
    ;
    
    m_has_headerFooter = false;
    
    if (m_headerFooter)
    {
        delete m_headerFooter;
        m_headerFooter = NULL;
    }
    ;
    
    m_has_rowBreaks = false;
    
    if (m_rowBreaks)
    {
        delete m_rowBreaks;
        m_rowBreaks = NULL;
    }
    ;
    
    m_has_colBreaks = false;
    
    if (m_colBreaks)
    {
        delete m_colBreaks;
        m_colBreaks = NULL;
    }
    ;
    
    m_has_customProperties = false;
    
    if (m_customProperties)
    {
        delete m_customProperties;
        m_customProperties = NULL;
    }
    ;
    
    m_has_cellWatches = false;
    
    if (m_cellWatches)
    {
        delete m_cellWatches;
        m_cellWatches = NULL;
    }
    ;
    
    m_has_ignoredErrors = false;
    
    if (m_ignoredErrors)
    {
        delete m_ignoredErrors;
        m_ignoredErrors = NULL;
    }
    ;
    
    m_has_smartTags = false;
    
    if (m_smartTags)
    {
        delete m_smartTags;
        m_smartTags = NULL;
    }
    ;
    
    m_has_drawing = false;
    
    if (m_drawing)
    {
        delete m_drawing;
        m_drawing = NULL;
    }
    ;
    
    m_has_legacyDrawing = false;
    
    if (m_legacyDrawing)
    {
        delete m_legacyDrawing;
        m_legacyDrawing = NULL;
    }
    ;
    
    m_has_legacyDrawingHF = false;
    
    if (m_legacyDrawingHF)
    {
        delete m_legacyDrawingHF;
        m_legacyDrawingHF = NULL;
    }
    ;
    
    m_has_drawingHF = false;
    
    if (m_drawingHF)
    {
        delete m_drawingHF;
        m_drawingHF = NULL;
    }
    ;
    
    m_has_picture = false;
    
    if (m_picture)
    {
        delete m_picture;
        m_picture = NULL;
    }
    ;
    
    m_has_oleObjects = false;
    
    if (m_oleObjects)
    {
        delete m_oleObjects;
        m_oleObjects = NULL;
    }
    ;
    
    m_has_controls = false;
    
    if (m_controls)
    {
        delete m_controls;
        m_controls = NULL;
    }
    ;
    
    m_has_webPublishItems = false;
    
    if (m_webPublishItems)
    {
        delete m_webPublishItems;
        m_webPublishItems = NULL;
    }
    ;
    
    m_has_tableParts = false;
    
    if (m_tableParts)
    {
        delete m_tableParts;
        m_tableParts = NULL;
    }
    ;
    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& worksheet_element::ChildGroup_1::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

worksheet_element* worksheet_element::default_instance_ = NULL;

    // chartsheet_element
    chartsheet_element::chartsheet_element()
    :m_has_sheetPr(false),
    m_sheetPr(NULL),
    m_has_sheetViews(false),
    m_sheetViews(NULL),
    m_has_sheetProtection(false),
    m_sheetProtection(NULL),
    m_has_customSheetViews(false),
    m_customSheetViews(NULL),
    m_has_pageMargins(false),
    m_pageMargins(NULL),
    m_has_pageSetup(false),
    m_pageSetup(NULL),
    m_has_headerFooter(false),
    m_headerFooter(NULL),
    m_has_drawing(false),
    m_drawing(NULL),
    m_has_legacyDrawing(false),
    m_legacyDrawing(NULL),
    m_has_legacyDrawingHF(false),
    m_legacyDrawingHF(NULL),
    m_has_drawingHF(false),
    m_drawingHF(NULL),
    m_has_picture(false),
    m_picture(NULL),
    m_has_webPublishItems(false),
    m_webPublishItems(NULL),
    m_has_extLst(false),
    m_extLst(NULL)
    {
    }
    chartsheet_element::~chartsheet_element()
{
    clear();    }
    bool chartsheet_element::has_sheetPr() const
    {    
    return m_has_sheetPr;
    }

    CT_ChartsheetPr* chartsheet_element::mutable_sheetPr()
    {    
    m_has_sheetPr = true;
    if (!m_sheetPr)
    {
        m_sheetPr = new CT_ChartsheetPr();
    }
    return m_sheetPr;
    }

    const CT_ChartsheetPr& chartsheet_element::get_sheetPr() const
    {    
    if (m_sheetPr)
    {
        return *m_sheetPr;
    }
    return CT_ChartsheetPr::default_instance();
    }

    bool chartsheet_element::has_sheetViews() const
    {    
    return m_has_sheetViews;
    }

    CT_ChartsheetViews* chartsheet_element::mutable_sheetViews()
    {    
    m_has_sheetViews = true;
    if (!m_sheetViews)
    {
        m_sheetViews = new CT_ChartsheetViews();
    }
    return m_sheetViews;
    }

    const CT_ChartsheetViews& chartsheet_element::get_sheetViews() const
    {    
    if (m_sheetViews)
    {
        return *m_sheetViews;
    }
    return CT_ChartsheetViews::default_instance();
    }

    bool chartsheet_element::has_sheetProtection() const
    {    
    return m_has_sheetProtection;
    }

    CT_ChartsheetProtection* chartsheet_element::mutable_sheetProtection()
    {    
    m_has_sheetProtection = true;
    if (!m_sheetProtection)
    {
        m_sheetProtection = new CT_ChartsheetProtection();
    }
    return m_sheetProtection;
    }

    const CT_ChartsheetProtection& chartsheet_element::get_sheetProtection() const
    {    
    if (m_sheetProtection)
    {
        return *m_sheetProtection;
    }
    return CT_ChartsheetProtection::default_instance();
    }

    bool chartsheet_element::has_customSheetViews() const
    {    
    return m_has_customSheetViews;
    }

    CT_CustomChartsheetViews* chartsheet_element::mutable_customSheetViews()
    {    
    m_has_customSheetViews = true;
    if (!m_customSheetViews)
    {
        m_customSheetViews = new CT_CustomChartsheetViews();
    }
    return m_customSheetViews;
    }

    const CT_CustomChartsheetViews& chartsheet_element::get_customSheetViews() const
    {    
    if (m_customSheetViews)
    {
        return *m_customSheetViews;
    }
    return CT_CustomChartsheetViews::default_instance();
    }

    bool chartsheet_element::has_pageMargins() const
    {    
    return m_has_pageMargins;
    }

    CT_PageMargins* chartsheet_element::mutable_pageMargins()
    {    
    m_has_pageMargins = true;
    if (!m_pageMargins)
    {
        m_pageMargins = new CT_PageMargins();
    }
    return m_pageMargins;
    }

    const CT_PageMargins& chartsheet_element::get_pageMargins() const
    {    
    if (m_pageMargins)
    {
        return *m_pageMargins;
    }
    return CT_PageMargins::default_instance();
    }

    bool chartsheet_element::has_pageSetup() const
    {    
    return m_has_pageSetup;
    }

    CT_CsPageSetup* chartsheet_element::mutable_pageSetup()
    {    
    m_has_pageSetup = true;
    if (!m_pageSetup)
    {
        m_pageSetup = new CT_CsPageSetup();
    }
    return m_pageSetup;
    }

    const CT_CsPageSetup& chartsheet_element::get_pageSetup() const
    {    
    if (m_pageSetup)
    {
        return *m_pageSetup;
    }
    return CT_CsPageSetup::default_instance();
    }

    bool chartsheet_element::has_headerFooter() const
    {    
    return m_has_headerFooter;
    }

    CT_HeaderFooter* chartsheet_element::mutable_headerFooter()
    {    
    m_has_headerFooter = true;
    if (!m_headerFooter)
    {
        m_headerFooter = new CT_HeaderFooter();
    }
    return m_headerFooter;
    }

    const CT_HeaderFooter& chartsheet_element::get_headerFooter() const
    {    
    if (m_headerFooter)
    {
        return *m_headerFooter;
    }
    return CT_HeaderFooter::default_instance();
    }

    bool chartsheet_element::has_drawing() const
    {    
    return m_has_drawing;
    }

    CT_Drawing* chartsheet_element::mutable_drawing()
    {    
    m_has_drawing = true;
    if (!m_drawing)
    {
        m_drawing = new CT_Drawing();
    }
    return m_drawing;
    }

    const CT_Drawing& chartsheet_element::get_drawing() const
    {    
    if (m_drawing)
    {
        return *m_drawing;
    }
    return CT_Drawing::default_instance();
    }

    bool chartsheet_element::has_legacyDrawing() const
    {    
    return m_has_legacyDrawing;
    }

    CT_LegacyDrawing* chartsheet_element::mutable_legacyDrawing()
    {    
    m_has_legacyDrawing = true;
    if (!m_legacyDrawing)
    {
        m_legacyDrawing = new CT_LegacyDrawing();
    }
    return m_legacyDrawing;
    }

    const CT_LegacyDrawing& chartsheet_element::get_legacyDrawing() const
    {    
    if (m_legacyDrawing)
    {
        return *m_legacyDrawing;
    }
    return CT_LegacyDrawing::default_instance();
    }

    bool chartsheet_element::has_legacyDrawingHF() const
    {    
    return m_has_legacyDrawingHF;
    }

    CT_LegacyDrawing* chartsheet_element::mutable_legacyDrawingHF()
    {    
    m_has_legacyDrawingHF = true;
    if (!m_legacyDrawingHF)
    {
        m_legacyDrawingHF = new CT_LegacyDrawing();
    }
    return m_legacyDrawingHF;
    }

    const CT_LegacyDrawing& chartsheet_element::get_legacyDrawingHF() const
    {    
    if (m_legacyDrawingHF)
    {
        return *m_legacyDrawingHF;
    }
    return CT_LegacyDrawing::default_instance();
    }

    bool chartsheet_element::has_drawingHF() const
    {    
    return m_has_drawingHF;
    }

    CT_DrawingHF* chartsheet_element::mutable_drawingHF()
    {    
    m_has_drawingHF = true;
    if (!m_drawingHF)
    {
        m_drawingHF = new CT_DrawingHF();
    }
    return m_drawingHF;
    }

    const CT_DrawingHF& chartsheet_element::get_drawingHF() const
    {    
    if (m_drawingHF)
    {
        return *m_drawingHF;
    }
    return CT_DrawingHF::default_instance();
    }

    bool chartsheet_element::has_picture() const
    {    
    return m_has_picture;
    }

    CT_SheetBackgroundPicture* chartsheet_element::mutable_picture()
    {    
    m_has_picture = true;
    if (!m_picture)
    {
        m_picture = new CT_SheetBackgroundPicture();
    }
    return m_picture;
    }

    const CT_SheetBackgroundPicture& chartsheet_element::get_picture() const
    {    
    if (m_picture)
    {
        return *m_picture;
    }
    return CT_SheetBackgroundPicture::default_instance();
    }

    bool chartsheet_element::has_webPublishItems() const
    {    
    return m_has_webPublishItems;
    }

    CT_WebPublishItems* chartsheet_element::mutable_webPublishItems()
    {    
    m_has_webPublishItems = true;
    if (!m_webPublishItems)
    {
        m_webPublishItems = new CT_WebPublishItems();
    }
    return m_webPublishItems;
    }

    const CT_WebPublishItems& chartsheet_element::get_webPublishItems() const
    {    
    if (m_webPublishItems)
    {
        return *m_webPublishItems;
    }
    return CT_WebPublishItems::default_instance();
    }

    bool chartsheet_element::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* chartsheet_element::mutable_extLst()
    {    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& chartsheet_element::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

    void chartsheet_element::clear()
    {    }

    void chartsheet_element::toXml(std::ostream& _outStream) const
    {    
    _outStream << "<main:chartsheet";
    
    _outStream << " " << "xmlns:main=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\"";
    _outStream << " " << "xmlns:s=\"http://schemas.openxmlformats.org/officeDocument/2006/sharedTypes\"";
    _outStream << " " << "xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\"";
    _outStream << " " << "xmlns:xdr=\"http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing\"";
    
    _outStream << ">";
    
    if (m_has_sheetPr)
    {
        m_sheetPr->toXmlElem("main:sheetPr", "", _outStream);;
    }
    
    if (m_has_sheetViews)
    {
        m_sheetViews->toXmlElem("main:sheetViews", "", _outStream);;
    }
    
    if (m_has_sheetProtection)
    {
        m_sheetProtection->toXmlElem("main:sheetProtection", "", _outStream);;
    }
    
    if (m_has_customSheetViews)
    {
        m_customSheetViews->toXmlElem("main:customSheetViews", "", _outStream);;
    }
    
    if (m_has_pageMargins)
    {
        m_pageMargins->toXmlElem("main:pageMargins", "", _outStream);;
    }
    
    if (m_has_pageSetup)
    {
        m_pageSetup->toXmlElem("main:pageSetup", "", _outStream);;
    }
    
    if (m_has_headerFooter)
    {
        m_headerFooter->toXmlElem("main:headerFooter", "", _outStream);;
    }
    
    if (m_has_drawing)
    {
        m_drawing->toXmlElem("main:drawing", "", _outStream);;
    }
    
    if (m_has_legacyDrawing)
    {
        m_legacyDrawing->toXmlElem("main:legacyDrawing", "", _outStream);;
    }
    
    if (m_has_legacyDrawingHF)
    {
        m_legacyDrawingHF->toXmlElem("main:legacyDrawingHF", "", _outStream);;
    }
    
    if (m_has_drawingHF)
    {
        m_drawingHF->toXmlElem("main:drawingHF", "", _outStream);;
    }
    
    if (m_has_picture)
    {
        m_picture->toXmlElem("main:picture", "", _outStream);;
    }
    
    if (m_has_webPublishItems)
    {
        m_webPublishItems->toXmlElem("main:webPublishItems", "", _outStream);;
    }
    
    if (m_has_extLst)
    {
        m_extLst->toXmlElem("main:extLst", "", _outStream);;
    }
    
    _outStream << "</main:chartsheet>";
    }

    const chartsheet_element& chartsheet_element::default_instance()
    {    
    if (!chartsheet_element::default_instance_)
    {
        chartsheet_element::default_instance_ = new chartsheet_element();
    }
    return *chartsheet_element::default_instance_;
    }

chartsheet_element* chartsheet_element::default_instance_ = NULL;

    // dialogsheet_element
    dialogsheet_element::dialogsheet_element()
    :m_has_sheetPr(false),
    m_sheetPr(NULL),
    m_has_sheetViews(false),
    m_sheetViews(NULL),
    m_has_sheetFormatPr(false),
    m_sheetFormatPr(NULL),
    m_has_sheetProtection(false),
    m_sheetProtection(NULL),
    m_has_customSheetViews(false),
    m_customSheetViews(NULL),
    m_has_printOptions(false),
    m_printOptions(NULL),
    m_has_pageMargins(false),
    m_pageMargins(NULL),
    m_has_pageSetup(false),
    m_pageSetup(NULL),
    m_has_headerFooter(false),
    m_headerFooter(NULL),
    m_has_drawing(false),
    m_drawing(NULL),
    m_has_legacyDrawing(false),
    m_legacyDrawing(NULL),
    m_has_legacyDrawingHF(false),
    m_legacyDrawingHF(NULL),
    m_has_drawingHF(false),
    m_drawingHF(NULL),
    m_has_oleObjects(false),
    m_oleObjects(NULL),
    m_has_controls(false),
    m_controls(NULL),
    m_has_extLst(false),
    m_extLst(NULL)
    {
    }
    dialogsheet_element::~dialogsheet_element()
{
    clear();    }
    bool dialogsheet_element::has_sheetPr() const
    {    
    return m_has_sheetPr;
    }

    CT_SheetPr* dialogsheet_element::mutable_sheetPr()
    {    
    m_has_sheetPr = true;
    if (!m_sheetPr)
    {
        m_sheetPr = new CT_SheetPr();
    }
    return m_sheetPr;
    }

    const CT_SheetPr& dialogsheet_element::get_sheetPr() const
    {    
    if (m_sheetPr)
    {
        return *m_sheetPr;
    }
    return CT_SheetPr::default_instance();
    }

    bool dialogsheet_element::has_sheetViews() const
    {    
    return m_has_sheetViews;
    }

    CT_SheetViews* dialogsheet_element::mutable_sheetViews()
    {    
    m_has_sheetViews = true;
    if (!m_sheetViews)
    {
        m_sheetViews = new CT_SheetViews();
    }
    return m_sheetViews;
    }

    const CT_SheetViews& dialogsheet_element::get_sheetViews() const
    {    
    if (m_sheetViews)
    {
        return *m_sheetViews;
    }
    return CT_SheetViews::default_instance();
    }

    bool dialogsheet_element::has_sheetFormatPr() const
    {    
    return m_has_sheetFormatPr;
    }

    CT_SheetFormatPr* dialogsheet_element::mutable_sheetFormatPr()
    {    
    m_has_sheetFormatPr = true;
    if (!m_sheetFormatPr)
    {
        m_sheetFormatPr = new CT_SheetFormatPr();
    }
    return m_sheetFormatPr;
    }

    const CT_SheetFormatPr& dialogsheet_element::get_sheetFormatPr() const
    {    
    if (m_sheetFormatPr)
    {
        return *m_sheetFormatPr;
    }
    return CT_SheetFormatPr::default_instance();
    }

    bool dialogsheet_element::has_sheetProtection() const
    {    
    return m_has_sheetProtection;
    }

    CT_SheetProtection* dialogsheet_element::mutable_sheetProtection()
    {    
    m_has_sheetProtection = true;
    if (!m_sheetProtection)
    {
        m_sheetProtection = new CT_SheetProtection();
    }
    return m_sheetProtection;
    }

    const CT_SheetProtection& dialogsheet_element::get_sheetProtection() const
    {    
    if (m_sheetProtection)
    {
        return *m_sheetProtection;
    }
    return CT_SheetProtection::default_instance();
    }

    bool dialogsheet_element::has_customSheetViews() const
    {    
    return m_has_customSheetViews;
    }

    CT_CustomSheetViews* dialogsheet_element::mutable_customSheetViews()
    {    
    m_has_customSheetViews = true;
    if (!m_customSheetViews)
    {
        m_customSheetViews = new CT_CustomSheetViews();
    }
    return m_customSheetViews;
    }

    const CT_CustomSheetViews& dialogsheet_element::get_customSheetViews() const
    {    
    if (m_customSheetViews)
    {
        return *m_customSheetViews;
    }
    return CT_CustomSheetViews::default_instance();
    }

    bool dialogsheet_element::has_printOptions() const
    {    
    return m_has_printOptions;
    }

    CT_PrintOptions* dialogsheet_element::mutable_printOptions()
    {    
    m_has_printOptions = true;
    if (!m_printOptions)
    {
        m_printOptions = new CT_PrintOptions();
    }
    return m_printOptions;
    }

    const CT_PrintOptions& dialogsheet_element::get_printOptions() const
    {    
    if (m_printOptions)
    {
        return *m_printOptions;
    }
    return CT_PrintOptions::default_instance();
    }

    bool dialogsheet_element::has_pageMargins() const
    {    
    return m_has_pageMargins;
    }

    CT_PageMargins* dialogsheet_element::mutable_pageMargins()
    {    
    m_has_pageMargins = true;
    if (!m_pageMargins)
    {
        m_pageMargins = new CT_PageMargins();
    }
    return m_pageMargins;
    }

    const CT_PageMargins& dialogsheet_element::get_pageMargins() const
    {    
    if (m_pageMargins)
    {
        return *m_pageMargins;
    }
    return CT_PageMargins::default_instance();
    }

    bool dialogsheet_element::has_pageSetup() const
    {    
    return m_has_pageSetup;
    }

    CT_PageSetup* dialogsheet_element::mutable_pageSetup()
    {    
    m_has_pageSetup = true;
    if (!m_pageSetup)
    {
        m_pageSetup = new CT_PageSetup();
    }
    return m_pageSetup;
    }

    const CT_PageSetup& dialogsheet_element::get_pageSetup() const
    {    
    if (m_pageSetup)
    {
        return *m_pageSetup;
    }
    return CT_PageSetup::default_instance();
    }

    bool dialogsheet_element::has_headerFooter() const
    {    
    return m_has_headerFooter;
    }

    CT_HeaderFooter* dialogsheet_element::mutable_headerFooter()
    {    
    m_has_headerFooter = true;
    if (!m_headerFooter)
    {
        m_headerFooter = new CT_HeaderFooter();
    }
    return m_headerFooter;
    }

    const CT_HeaderFooter& dialogsheet_element::get_headerFooter() const
    {    
    if (m_headerFooter)
    {
        return *m_headerFooter;
    }
    return CT_HeaderFooter::default_instance();
    }

    bool dialogsheet_element::has_drawing() const
    {    
    return m_has_drawing;
    }

    CT_Drawing* dialogsheet_element::mutable_drawing()
    {    
    m_has_drawing = true;
    if (!m_drawing)
    {
        m_drawing = new CT_Drawing();
    }
    return m_drawing;
    }

    const CT_Drawing& dialogsheet_element::get_drawing() const
    {    
    if (m_drawing)
    {
        return *m_drawing;
    }
    return CT_Drawing::default_instance();
    }

    bool dialogsheet_element::has_legacyDrawing() const
    {    
    return m_has_legacyDrawing;
    }

    CT_LegacyDrawing* dialogsheet_element::mutable_legacyDrawing()
    {    
    m_has_legacyDrawing = true;
    if (!m_legacyDrawing)
    {
        m_legacyDrawing = new CT_LegacyDrawing();
    }
    return m_legacyDrawing;
    }

    const CT_LegacyDrawing& dialogsheet_element::get_legacyDrawing() const
    {    
    if (m_legacyDrawing)
    {
        return *m_legacyDrawing;
    }
    return CT_LegacyDrawing::default_instance();
    }

    bool dialogsheet_element::has_legacyDrawingHF() const
    {    
    return m_has_legacyDrawingHF;
    }

    CT_LegacyDrawing* dialogsheet_element::mutable_legacyDrawingHF()
    {    
    m_has_legacyDrawingHF = true;
    if (!m_legacyDrawingHF)
    {
        m_legacyDrawingHF = new CT_LegacyDrawing();
    }
    return m_legacyDrawingHF;
    }

    const CT_LegacyDrawing& dialogsheet_element::get_legacyDrawingHF() const
    {    
    if (m_legacyDrawingHF)
    {
        return *m_legacyDrawingHF;
    }
    return CT_LegacyDrawing::default_instance();
    }

    bool dialogsheet_element::has_drawingHF() const
    {    
    return m_has_drawingHF;
    }

    CT_DrawingHF* dialogsheet_element::mutable_drawingHF()
    {    
    m_has_drawingHF = true;
    if (!m_drawingHF)
    {
        m_drawingHF = new CT_DrawingHF();
    }
    return m_drawingHF;
    }

    const CT_DrawingHF& dialogsheet_element::get_drawingHF() const
    {    
    if (m_drawingHF)
    {
        return *m_drawingHF;
    }
    return CT_DrawingHF::default_instance();
    }

    bool dialogsheet_element::has_oleObjects() const
    {    
    return m_has_oleObjects;
    }

    CT_OleObjects* dialogsheet_element::mutable_oleObjects()
    {    
    m_has_oleObjects = true;
    if (!m_oleObjects)
    {
        m_oleObjects = new CT_OleObjects();
    }
    return m_oleObjects;
    }

    const CT_OleObjects& dialogsheet_element::get_oleObjects() const
    {    
    if (m_oleObjects)
    {
        return *m_oleObjects;
    }
    return CT_OleObjects::default_instance();
    }

    bool dialogsheet_element::has_controls() const
    {    
    return m_has_controls;
    }

    CT_Controls* dialogsheet_element::mutable_controls()
    {    
    m_has_controls = true;
    if (!m_controls)
    {
        m_controls = new CT_Controls();
    }
    return m_controls;
    }

    const CT_Controls& dialogsheet_element::get_controls() const
    {    
    if (m_controls)
    {
        return *m_controls;
    }
    return CT_Controls::default_instance();
    }

    bool dialogsheet_element::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* dialogsheet_element::mutable_extLst()
    {    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& dialogsheet_element::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

    void dialogsheet_element::clear()
    {    }

    void dialogsheet_element::toXml(std::ostream& _outStream) const
    {    
    _outStream << "<main:dialogsheet";
    
    _outStream << " " << "xmlns:main=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\"";
    _outStream << " " << "xmlns:s=\"http://schemas.openxmlformats.org/officeDocument/2006/sharedTypes\"";
    _outStream << " " << "xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\"";
    _outStream << " " << "xmlns:xdr=\"http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing\"";
    
    _outStream << ">";
    
    if (m_has_sheetPr)
    {
        m_sheetPr->toXmlElem("main:sheetPr", "", _outStream);;
    }
    
    if (m_has_sheetViews)
    {
        m_sheetViews->toXmlElem("main:sheetViews", "", _outStream);;
    }
    
    if (m_has_sheetFormatPr)
    {
        m_sheetFormatPr->toXmlElem("main:sheetFormatPr", "", _outStream);;
    }
    
    if (m_has_sheetProtection)
    {
        m_sheetProtection->toXmlElem("main:sheetProtection", "", _outStream);;
    }
    
    if (m_has_customSheetViews)
    {
        m_customSheetViews->toXmlElem("main:customSheetViews", "", _outStream);;
    }
    
    if (m_has_printOptions)
    {
        m_printOptions->toXmlElem("main:printOptions", "", _outStream);;
    }
    
    if (m_has_pageMargins)
    {
        m_pageMargins->toXmlElem("main:pageMargins", "", _outStream);;
    }
    
    if (m_has_pageSetup)
    {
        m_pageSetup->toXmlElem("main:pageSetup", "", _outStream);;
    }
    
    if (m_has_headerFooter)
    {
        m_headerFooter->toXmlElem("main:headerFooter", "", _outStream);;
    }
    
    if (m_has_drawing)
    {
        m_drawing->toXmlElem("main:drawing", "", _outStream);;
    }
    
    if (m_has_legacyDrawing)
    {
        m_legacyDrawing->toXmlElem("main:legacyDrawing", "", _outStream);;
    }
    
    if (m_has_legacyDrawingHF)
    {
        m_legacyDrawingHF->toXmlElem("main:legacyDrawingHF", "", _outStream);;
    }
    
    if (m_has_drawingHF)
    {
        m_drawingHF->toXmlElem("main:drawingHF", "", _outStream);;
    }
    
    if (m_has_oleObjects)
    {
        m_oleObjects->toXmlElem("main:oleObjects", "", _outStream);;
    }
    
    if (m_has_controls)
    {
        m_controls->toXmlElem("main:controls", "", _outStream);;
    }
    
    if (m_has_extLst)
    {
        m_extLst->toXmlElem("main:extLst", "", _outStream);;
    }
    
    _outStream << "</main:dialogsheet>";
    }

    const dialogsheet_element& dialogsheet_element::default_instance()
    {    
    if (!dialogsheet_element::default_instance_)
    {
        dialogsheet_element::default_instance_ = new dialogsheet_element();
    }
    return *dialogsheet_element::default_instance_;
    }

dialogsheet_element* dialogsheet_element::default_instance_ = NULL;

    // metadata_element
    metadata_element::metadata_element()
    :m_has_metadataTypes(false),
    m_metadataTypes(NULL),
    m_has_metadataStrings(false),
    m_metadataStrings(NULL),
    m_has_mdxMetadata(false),
    m_mdxMetadata(NULL)
    {
    }
    metadata_element::~metadata_element()
{
    clear();    }
    bool metadata_element::has_metadataTypes() const
    {    
    return m_has_metadataTypes;
    }

    CT_MetadataTypes* metadata_element::mutable_metadataTypes()
    {    
    m_has_metadataTypes = true;
    if (!m_metadataTypes)
    {
        m_metadataTypes = new CT_MetadataTypes();
    }
    return m_metadataTypes;
    }

    const CT_MetadataTypes& metadata_element::get_metadataTypes() const
    {    
    if (m_metadataTypes)
    {
        return *m_metadataTypes;
    }
    return CT_MetadataTypes::default_instance();
    }

    bool metadata_element::has_metadataStrings() const
    {    
    return m_has_metadataStrings;
    }

    CT_MetadataStrings* metadata_element::mutable_metadataStrings()
    {    
    m_has_metadataStrings = true;
    if (!m_metadataStrings)
    {
        m_metadataStrings = new CT_MetadataStrings();
    }
    return m_metadataStrings;
    }

    const CT_MetadataStrings& metadata_element::get_metadataStrings() const
    {    
    if (m_metadataStrings)
    {
        return *m_metadataStrings;
    }
    return CT_MetadataStrings::default_instance();
    }

    bool metadata_element::has_mdxMetadata() const
    {    
    return m_has_mdxMetadata;
    }

    CT_MdxMetadata* metadata_element::mutable_mdxMetadata()
    {    
    m_has_mdxMetadata = true;
    if (!m_mdxMetadata)
    {
        m_mdxMetadata = new CT_MdxMetadata();
    }
    return m_mdxMetadata;
    }

    const CT_MdxMetadata& metadata_element::get_mdxMetadata() const
    {    
    if (m_mdxMetadata)
    {
        return *m_mdxMetadata;
    }
    return CT_MdxMetadata::default_instance();
    }

    CT_FutureMetadata* metadata_element::add_futureMetadata()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_FutureMetadata* pNewChild = pChildGroup->mutable_futureMetadata();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_MetadataBlocks* metadata_element::add_cellMetadata()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_MetadataBlocks* pNewChild = pChildGroup->mutable_cellMetadata();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_MetadataBlocks* metadata_element::add_valueMetadata()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_MetadataBlocks* pNewChild = pChildGroup->mutable_valueMetadata();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_ExtensionList* metadata_element::add_extLst()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_ExtensionList* pNewChild = pChildGroup->mutable_extLst();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void metadata_element::clear()
    {    
    m_has_metadataTypes = false;
    
    if (m_metadataTypes)
    {
        delete m_metadataTypes;
        m_metadataTypes = NULL;
    }
    
    
    m_has_metadataStrings = false;
    
    if (m_metadataStrings)
    {
        delete m_metadataStrings;
        m_metadataStrings = NULL;
    }
    
    
    m_has_mdxMetadata = false;
    
    if (m_mdxMetadata)
    {
        delete m_mdxMetadata;
        m_mdxMetadata = NULL;
    }
    
     
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void metadata_element::toXml(std::ostream& _outStream) const
    {    
    _outStream << "<main:metadata";
    
    _outStream << " " << "xmlns:main=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\"";
    _outStream << " " << "xmlns:s=\"http://schemas.openxmlformats.org/officeDocument/2006/sharedTypes\"";
    _outStream << " " << "xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\"";
    _outStream << " " << "xmlns:xdr=\"http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing\"";
    
    _outStream << ">";
    
    if (m_has_metadataTypes)
    {
        m_metadataTypes->toXmlElem("main:metadataTypes", "", _outStream);;
    }
    
    if (m_has_metadataStrings)
    {
        m_metadataStrings->toXmlElem("main:metadataStrings", "", _outStream);;
    }
    
    if (m_has_mdxMetadata)
    {
        m_mdxMetadata->toXmlElem("main:mdxMetadata", "", _outStream);;
    }
     
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_futureMetadata())
            {
                (*iter)->get_futureMetadata().toXmlElem("main:futureMetadata", "", _outStream);
            }
            else if ((*iter)->has_cellMetadata())
            {
                (*iter)->get_cellMetadata().toXmlElem("main:cellMetadata", "", _outStream);
            }
            else if ((*iter)->has_valueMetadata())
            {
                (*iter)->get_valueMetadata().toXmlElem("main:valueMetadata", "", _outStream);
            }
            else if ((*iter)->has_extLst())
            {
                (*iter)->get_extLst().toXmlElem("main:extLst", "", _outStream);
            }
        }
    }
    
    _outStream << "</main:metadata>";
    }

    const metadata_element& metadata_element::default_instance()
    {    
    if (!metadata_element::default_instance_)
    {
        metadata_element::default_instance_ = new metadata_element();
    }
    return *metadata_element::default_instance_;
    }


    // metadata_element::ChildGroup_1
    metadata_element::ChildGroup_1::ChildGroup_1()
    :m_has_futureMetadata(false),
    m_futureMetadata(NULL),
    m_has_cellMetadata(false),
    m_cellMetadata(NULL),
    m_has_valueMetadata(false),
    m_valueMetadata(NULL),
    m_has_extLst(false),
    m_extLst(NULL)
    {
    }
    bool metadata_element::ChildGroup_1::has_futureMetadata() const
    {    
    return m_has_futureMetadata;
    }

    CT_FutureMetadata* metadata_element::ChildGroup_1::mutable_futureMetadata()
    {    
    
    m_has_cellMetadata = false;
    
    if (m_cellMetadata)
    {
        delete m_cellMetadata;
        m_cellMetadata = NULL;
    }
    ;
    
    m_has_valueMetadata = false;
    
    if (m_valueMetadata)
    {
        delete m_valueMetadata;
        m_valueMetadata = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_futureMetadata = true;
    if (!m_futureMetadata)
    {
        m_futureMetadata = new CT_FutureMetadata();
    }
    return m_futureMetadata;
    }

    const CT_FutureMetadata& metadata_element::ChildGroup_1::get_futureMetadata() const
    {    
    if (m_futureMetadata)
    {
        return *m_futureMetadata;
    }
    return CT_FutureMetadata::default_instance();
    }

    bool metadata_element::ChildGroup_1::has_cellMetadata() const
    {    
    return m_has_cellMetadata;
    }

    CT_MetadataBlocks* metadata_element::ChildGroup_1::mutable_cellMetadata()
    {    
    
    m_has_futureMetadata = false;
    
    if (m_futureMetadata)
    {
        delete m_futureMetadata;
        m_futureMetadata = NULL;
    }
    ;
    
    m_has_valueMetadata = false;
    
    if (m_valueMetadata)
    {
        delete m_valueMetadata;
        m_valueMetadata = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_cellMetadata = true;
    if (!m_cellMetadata)
    {
        m_cellMetadata = new CT_MetadataBlocks();
    }
    return m_cellMetadata;
    }

    const CT_MetadataBlocks& metadata_element::ChildGroup_1::get_cellMetadata() const
    {    
    if (m_cellMetadata)
    {
        return *m_cellMetadata;
    }
    return CT_MetadataBlocks::default_instance();
    }

    bool metadata_element::ChildGroup_1::has_valueMetadata() const
    {    
    return m_has_valueMetadata;
    }

    CT_MetadataBlocks* metadata_element::ChildGroup_1::mutable_valueMetadata()
    {    
    
    m_has_futureMetadata = false;
    
    if (m_futureMetadata)
    {
        delete m_futureMetadata;
        m_futureMetadata = NULL;
    }
    ;
    
    m_has_cellMetadata = false;
    
    if (m_cellMetadata)
    {
        delete m_cellMetadata;
        m_cellMetadata = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_valueMetadata = true;
    if (!m_valueMetadata)
    {
        m_valueMetadata = new CT_MetadataBlocks();
    }
    return m_valueMetadata;
    }

    const CT_MetadataBlocks& metadata_element::ChildGroup_1::get_valueMetadata() const
    {    
    if (m_valueMetadata)
    {
        return *m_valueMetadata;
    }
    return CT_MetadataBlocks::default_instance();
    }

    bool metadata_element::ChildGroup_1::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* metadata_element::ChildGroup_1::mutable_extLst()
    {    
    
    m_has_futureMetadata = false;
    
    if (m_futureMetadata)
    {
        delete m_futureMetadata;
        m_futureMetadata = NULL;
    }
    ;
    
    m_has_cellMetadata = false;
    
    if (m_cellMetadata)
    {
        delete m_cellMetadata;
        m_cellMetadata = NULL;
    }
    ;
    
    m_has_valueMetadata = false;
    
    if (m_valueMetadata)
    {
        delete m_valueMetadata;
        m_valueMetadata = NULL;
    }
    ;
    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& metadata_element::ChildGroup_1::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

metadata_element* metadata_element::default_instance_ = NULL;

    // singleXmlCells_element
    singleXmlCells_element::singleXmlCells_element()

    {
    }
    singleXmlCells_element::~singleXmlCells_element()
{
    clear();    }
    CT_SingleXmlCell* singleXmlCells_element::add_singleXmlCell()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_SingleXmlCell* pNewChild = pChildGroup->mutable_singleXmlCell();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void singleXmlCells_element::clear()
    {    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void singleXmlCells_element::toXml(std::ostream& _outStream) const
    {    
    _outStream << "<main:singleXmlCells";
    
    _outStream << " " << "xmlns:main=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\"";
    _outStream << " " << "xmlns:s=\"http://schemas.openxmlformats.org/officeDocument/2006/sharedTypes\"";
    _outStream << " " << "xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\"";
    _outStream << " " << "xmlns:xdr=\"http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing\"";
    
    _outStream << ">";
    
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_singleXmlCell())
            {
                (*iter)->get_singleXmlCell().toXmlElem("main:singleXmlCell", "", _outStream);
            }
        }
    }
    
    _outStream << "</main:singleXmlCells>";
    }

    const singleXmlCells_element& singleXmlCells_element::default_instance()
    {    
    if (!singleXmlCells_element::default_instance_)
    {
        singleXmlCells_element::default_instance_ = new singleXmlCells_element();
    }
    return *singleXmlCells_element::default_instance_;
    }


    // singleXmlCells_element::ChildGroup_1
    singleXmlCells_element::ChildGroup_1::ChildGroup_1()
    :m_has_singleXmlCell(false),
    m_singleXmlCell(NULL)
    {
    }
    bool singleXmlCells_element::ChildGroup_1::has_singleXmlCell() const
    {    
    return m_has_singleXmlCell;
    }

    CT_SingleXmlCell* singleXmlCells_element::ChildGroup_1::mutable_singleXmlCell()
    {    
    
    m_has_singleXmlCell = true;
    if (!m_singleXmlCell)
    {
        m_singleXmlCell = new CT_SingleXmlCell();
    }
    return m_singleXmlCell;
    }

    const CT_SingleXmlCell& singleXmlCells_element::ChildGroup_1::get_singleXmlCell() const
    {    
    if (m_singleXmlCell)
    {
        return *m_singleXmlCell;
    }
    return CT_SingleXmlCell::default_instance();
    }

singleXmlCells_element* singleXmlCells_element::default_instance_ = NULL;

    // styleSheet_element
    styleSheet_element::styleSheet_element()
    :m_has_numFmts(false),
    m_numFmts(NULL),
    m_has_fonts(false),
    m_fonts(NULL),
    m_has_fills(false),
    m_fills(NULL),
    m_has_borders(false),
    m_borders(NULL),
    m_has_cellStyleXfs(false),
    m_cellStyleXfs(NULL),
    m_has_cellXfs(false),
    m_cellXfs(NULL),
    m_has_cellStyles(false),
    m_cellStyles(NULL),
    m_has_dxfs(false),
    m_dxfs(NULL),
    m_has_tableStyles(false),
    m_tableStyles(NULL),
    m_has_colors(false),
    m_colors(NULL),
    m_has_extLst(false),
    m_extLst(NULL)
    {
    }
    styleSheet_element::~styleSheet_element()
{
    clear();    }
    bool styleSheet_element::has_numFmts() const
    {    
    return m_has_numFmts;
    }

    CT_NumFmts* styleSheet_element::mutable_numFmts()
    {    
    m_has_numFmts = true;
    if (!m_numFmts)
    {
        m_numFmts = new CT_NumFmts();
    }
    return m_numFmts;
    }

    const CT_NumFmts& styleSheet_element::get_numFmts() const
    {    
    if (m_numFmts)
    {
        return *m_numFmts;
    }
    return CT_NumFmts::default_instance();
    }

    bool styleSheet_element::has_fonts() const
    {    
    return m_has_fonts;
    }

    CT_Fonts* styleSheet_element::mutable_fonts()
    {    
    m_has_fonts = true;
    if (!m_fonts)
    {
        m_fonts = new CT_Fonts();
    }
    return m_fonts;
    }

    const CT_Fonts& styleSheet_element::get_fonts() const
    {    
    if (m_fonts)
    {
        return *m_fonts;
    }
    return CT_Fonts::default_instance();
    }

    bool styleSheet_element::has_fills() const
    {    
    return m_has_fills;
    }

    CT_Fills* styleSheet_element::mutable_fills()
    {    
    m_has_fills = true;
    if (!m_fills)
    {
        m_fills = new CT_Fills();
    }
    return m_fills;
    }

    const CT_Fills& styleSheet_element::get_fills() const
    {    
    if (m_fills)
    {
        return *m_fills;
    }
    return CT_Fills::default_instance();
    }

    bool styleSheet_element::has_borders() const
    {    
    return m_has_borders;
    }

    CT_Borders* styleSheet_element::mutable_borders()
    {    
    m_has_borders = true;
    if (!m_borders)
    {
        m_borders = new CT_Borders();
    }
    return m_borders;
    }

    const CT_Borders& styleSheet_element::get_borders() const
    {    
    if (m_borders)
    {
        return *m_borders;
    }
    return CT_Borders::default_instance();
    }

    bool styleSheet_element::has_cellStyleXfs() const
    {    
    return m_has_cellStyleXfs;
    }

    CT_CellStyleXfs* styleSheet_element::mutable_cellStyleXfs()
    {    
    m_has_cellStyleXfs = true;
    if (!m_cellStyleXfs)
    {
        m_cellStyleXfs = new CT_CellStyleXfs();
    }
    return m_cellStyleXfs;
    }

    const CT_CellStyleXfs& styleSheet_element::get_cellStyleXfs() const
    {    
    if (m_cellStyleXfs)
    {
        return *m_cellStyleXfs;
    }
    return CT_CellStyleXfs::default_instance();
    }

    bool styleSheet_element::has_cellXfs() const
    {    
    return m_has_cellXfs;
    }

    CT_CellXfs* styleSheet_element::mutable_cellXfs()
    {    
    m_has_cellXfs = true;
    if (!m_cellXfs)
    {
        m_cellXfs = new CT_CellXfs();
    }
    return m_cellXfs;
    }

    const CT_CellXfs& styleSheet_element::get_cellXfs() const
    {    
    if (m_cellXfs)
    {
        return *m_cellXfs;
    }
    return CT_CellXfs::default_instance();
    }

    bool styleSheet_element::has_cellStyles() const
    {    
    return m_has_cellStyles;
    }

    CT_CellStyles* styleSheet_element::mutable_cellStyles()
    {    
    m_has_cellStyles = true;
    if (!m_cellStyles)
    {
        m_cellStyles = new CT_CellStyles();
    }
    return m_cellStyles;
    }

    const CT_CellStyles& styleSheet_element::get_cellStyles() const
    {    
    if (m_cellStyles)
    {
        return *m_cellStyles;
    }
    return CT_CellStyles::default_instance();
    }

    bool styleSheet_element::has_dxfs() const
    {    
    return m_has_dxfs;
    }

    CT_Dxfs* styleSheet_element::mutable_dxfs()
    {    
    m_has_dxfs = true;
    if (!m_dxfs)
    {
        m_dxfs = new CT_Dxfs();
    }
    return m_dxfs;
    }

    const CT_Dxfs& styleSheet_element::get_dxfs() const
    {    
    if (m_dxfs)
    {
        return *m_dxfs;
    }
    return CT_Dxfs::default_instance();
    }

    bool styleSheet_element::has_tableStyles() const
    {    
    return m_has_tableStyles;
    }

    CT_TableStyles* styleSheet_element::mutable_tableStyles()
    {    
    m_has_tableStyles = true;
    if (!m_tableStyles)
    {
        m_tableStyles = new CT_TableStyles();
    }
    return m_tableStyles;
    }

    const CT_TableStyles& styleSheet_element::get_tableStyles() const
    {    
    if (m_tableStyles)
    {
        return *m_tableStyles;
    }
    return CT_TableStyles::default_instance();
    }

    bool styleSheet_element::has_colors() const
    {    
    return m_has_colors;
    }

    CT_Colors* styleSheet_element::mutable_colors()
    {    
    m_has_colors = true;
    if (!m_colors)
    {
        m_colors = new CT_Colors();
    }
    return m_colors;
    }

    const CT_Colors& styleSheet_element::get_colors() const
    {    
    if (m_colors)
    {
        return *m_colors;
    }
    return CT_Colors::default_instance();
    }

    bool styleSheet_element::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* styleSheet_element::mutable_extLst()
    {    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& styleSheet_element::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

    void styleSheet_element::clear()
    {    }

    void styleSheet_element::toXml(std::ostream& _outStream) const
    {    
    _outStream << "<main:styleSheet";
    
    _outStream << " " << "xmlns:main=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\"";
    _outStream << " " << "xmlns:s=\"http://schemas.openxmlformats.org/officeDocument/2006/sharedTypes\"";
    _outStream << " " << "xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\"";
    _outStream << " " << "xmlns:xdr=\"http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing\"";
    
    _outStream << ">";
    
    if (m_has_numFmts)
    {
        m_numFmts->toXmlElem("main:numFmts", "", _outStream);;
    }
    
    if (m_has_fonts)
    {
        m_fonts->toXmlElem("main:fonts", "", _outStream);;
    }
    
    if (m_has_fills)
    {
        m_fills->toXmlElem("main:fills", "", _outStream);;
    }
    
    if (m_has_borders)
    {
        m_borders->toXmlElem("main:borders", "", _outStream);;
    }
    
    if (m_has_cellStyleXfs)
    {
        m_cellStyleXfs->toXmlElem("main:cellStyleXfs", "", _outStream);;
    }
    
    if (m_has_cellXfs)
    {
        m_cellXfs->toXmlElem("main:cellXfs", "", _outStream);;
    }
    
    if (m_has_cellStyles)
    {
        m_cellStyles->toXmlElem("main:cellStyles", "", _outStream);;
    }
    
    if (m_has_dxfs)
    {
        m_dxfs->toXmlElem("main:dxfs", "", _outStream);;
    }
    
    if (m_has_tableStyles)
    {
        m_tableStyles->toXmlElem("main:tableStyles", "", _outStream);;
    }
    
    if (m_has_colors)
    {
        m_colors->toXmlElem("main:colors", "", _outStream);;
    }
    
    if (m_has_extLst)
    {
        m_extLst->toXmlElem("main:extLst", "", _outStream);;
    }
    
    _outStream << "</main:styleSheet>";
    }

    const styleSheet_element& styleSheet_element::default_instance()
    {    
    if (!styleSheet_element::default_instance_)
    {
        styleSheet_element::default_instance_ = new styleSheet_element();
    }
    return *styleSheet_element::default_instance_;
    }

styleSheet_element* styleSheet_element::default_instance_ = NULL;

    // externalLink_element
    externalLink_element::externalLink_element()
    :m_has_externalBook(false),
    m_externalBook(NULL),
    m_has_ddeLink(false),
    m_ddeLink(NULL),
    m_has_oleLink(false),
    m_oleLink(NULL),
    m_has_extLst(false),
    m_extLst(NULL)
    {
    }
    externalLink_element::~externalLink_element()
{
    clear();    }
    bool externalLink_element::has_externalBook() const
    {    
    return m_has_externalBook;
    }

    CT_ExternalBook* externalLink_element::mutable_externalBook()
    {    
    
    m_has_ddeLink = false;
    
    if (m_ddeLink)
    {
        delete m_ddeLink;
        m_ddeLink = NULL;
    }
    ;
    
    m_has_oleLink = false;
    
    if (m_oleLink)
    {
        delete m_oleLink;
        m_oleLink = NULL;
    }
    ;
    
    m_has_externalBook = true;
    if (!m_externalBook)
    {
        m_externalBook = new CT_ExternalBook();
    }
    return m_externalBook;
    }

    const CT_ExternalBook& externalLink_element::get_externalBook() const
    {    
    if (m_externalBook)
    {
        return *m_externalBook;
    }
    return CT_ExternalBook::default_instance();
    }

    bool externalLink_element::has_ddeLink() const
    {    
    return m_has_ddeLink;
    }

    CT_DdeLink* externalLink_element::mutable_ddeLink()
    {    
    
    m_has_externalBook = false;
    
    if (m_externalBook)
    {
        delete m_externalBook;
        m_externalBook = NULL;
    }
    ;
    
    m_has_oleLink = false;
    
    if (m_oleLink)
    {
        delete m_oleLink;
        m_oleLink = NULL;
    }
    ;
    
    m_has_ddeLink = true;
    if (!m_ddeLink)
    {
        m_ddeLink = new CT_DdeLink();
    }
    return m_ddeLink;
    }

    const CT_DdeLink& externalLink_element::get_ddeLink() const
    {    
    if (m_ddeLink)
    {
        return *m_ddeLink;
    }
    return CT_DdeLink::default_instance();
    }

    bool externalLink_element::has_oleLink() const
    {    
    return m_has_oleLink;
    }

    CT_OleLink* externalLink_element::mutable_oleLink()
    {    
    
    m_has_externalBook = false;
    
    if (m_externalBook)
    {
        delete m_externalBook;
        m_externalBook = NULL;
    }
    ;
    
    m_has_ddeLink = false;
    
    if (m_ddeLink)
    {
        delete m_ddeLink;
        m_ddeLink = NULL;
    }
    ;
    
    m_has_oleLink = true;
    if (!m_oleLink)
    {
        m_oleLink = new CT_OleLink();
    }
    return m_oleLink;
    }

    const CT_OleLink& externalLink_element::get_oleLink() const
    {    
    if (m_oleLink)
    {
        return *m_oleLink;
    }
    return CT_OleLink::default_instance();
    }

    bool externalLink_element::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* externalLink_element::mutable_extLst()
    {    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& externalLink_element::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

    void externalLink_element::clear()
    {    }

    void externalLink_element::toXml(std::ostream& _outStream) const
    {    
    _outStream << "<main:externalLink";
    
    _outStream << " " << "xmlns:main=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\"";
    _outStream << " " << "xmlns:s=\"http://schemas.openxmlformats.org/officeDocument/2006/sharedTypes\"";
    _outStream << " " << "xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\"";
    _outStream << " " << "xmlns:xdr=\"http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing\"";
    
    _outStream << ">";
    
    if (m_has_externalBook)
    {
        m_externalBook->toXmlElem("main:externalBook", "", _outStream);;
    }
    
    if (m_has_ddeLink)
    {
        m_ddeLink->toXmlElem("main:ddeLink", "", _outStream);;
    }
    
    if (m_has_oleLink)
    {
        m_oleLink->toXmlElem("main:oleLink", "", _outStream);;
    }
     
    if (m_has_extLst)
    {
        m_extLst->toXmlElem("main:extLst", "", _outStream);;
    }
    
    _outStream << "</main:externalLink>";
    }

    const externalLink_element& externalLink_element::default_instance()
    {    
    if (!externalLink_element::default_instance_)
    {
        externalLink_element::default_instance_ = new externalLink_element();
    }
    return *externalLink_element::default_instance_;
    }

externalLink_element* externalLink_element::default_instance_ = NULL;

    // table_element
    table_element::table_element()
    :m_has_autoFilter(false),
    m_autoFilter(NULL),
    m_has_sortState(false),
    m_sortState(NULL),
    m_has_tableColumns(false),
    m_tableColumns(NULL),
    m_has_tableStyleInfo(false),
    m_tableStyleInfo(NULL),
    m_has_extLst(false),
    m_extLst(NULL),
    m_has_id_attr(false),
    m_id_attr(0),
    m_has_name_attr(false),
    m_name_attr(NULL),
    m_has_displayName_attr(false),
    m_displayName_attr(NULL),
    m_has_comment_attr(false),
    m_comment_attr(NULL),
    m_has_ref_attr(false),
    m_ref_attr(NULL),
    m_has_tableType_attr(false),
    m_tableType_attr(NULL),
    m_has_headerRowCount_attr(false),
    m_headerRowCount_attr(0),
    m_has_insertRow_attr(false),
    m_insertRow_attr(false),
    m_has_insertRowShift_attr(false),
    m_insertRowShift_attr(false),
    m_has_totalsRowCount_attr(false),
    m_totalsRowCount_attr(0),
    m_has_totalsRowShown_attr(false),
    m_totalsRowShown_attr(false),
    m_has_published_attr(false),
    m_published_attr(false),
    m_has_headerRowDxfId_attr(false),
    m_headerRowDxfId_attr(NULL),
    m_has_dataDxfId_attr(false),
    m_dataDxfId_attr(NULL),
    m_has_totalsRowDxfId_attr(false),
    m_totalsRowDxfId_attr(NULL),
    m_has_headerRowBorderDxfId_attr(false),
    m_headerRowBorderDxfId_attr(NULL),
    m_has_tableBorderDxfId_attr(false),
    m_tableBorderDxfId_attr(NULL),
    m_has_totalsRowBorderDxfId_attr(false),
    m_totalsRowBorderDxfId_attr(NULL),
    m_has_headerRowCellStyle_attr(false),
    m_headerRowCellStyle_attr(NULL),
    m_has_dataCellStyle_attr(false),
    m_dataCellStyle_attr(NULL),
    m_has_totalsRowCellStyle_attr(false),
    m_totalsRowCellStyle_attr(NULL),
    m_has_connectionId_attr(false),
    m_connectionId_attr(0)
    {
    }
    table_element::~table_element()
{
    clear();    }
    bool table_element::has_autoFilter() const
    {    
    return m_has_autoFilter;
    }

    CT_AutoFilter* table_element::mutable_autoFilter()
    {    
    m_has_autoFilter = true;
    if (!m_autoFilter)
    {
        m_autoFilter = new CT_AutoFilter();
    }
    return m_autoFilter;
    }

    const CT_AutoFilter& table_element::get_autoFilter() const
    {    
    if (m_autoFilter)
    {
        return *m_autoFilter;
    }
    return CT_AutoFilter::default_instance();
    }

    bool table_element::has_sortState() const
    {    
    return m_has_sortState;
    }

    CT_SortState* table_element::mutable_sortState()
    {    
    m_has_sortState = true;
    if (!m_sortState)
    {
        m_sortState = new CT_SortState();
    }
    return m_sortState;
    }

    const CT_SortState& table_element::get_sortState() const
    {    
    if (m_sortState)
    {
        return *m_sortState;
    }
    return CT_SortState::default_instance();
    }

    bool table_element::has_tableColumns() const
    {    
    return m_has_tableColumns;
    }

    CT_TableColumns* table_element::mutable_tableColumns()
    {    
    m_has_tableColumns = true;
    if (!m_tableColumns)
    {
        m_tableColumns = new CT_TableColumns();
    }
    return m_tableColumns;
    }

    const CT_TableColumns& table_element::get_tableColumns() const
    {    
    if (m_tableColumns)
    {
        return *m_tableColumns;
    }
    return CT_TableColumns::default_instance();
    }

    bool table_element::has_tableStyleInfo() const
    {    
    return m_has_tableStyleInfo;
    }

    CT_TableStyleInfo* table_element::mutable_tableStyleInfo()
    {    
    m_has_tableStyleInfo = true;
    if (!m_tableStyleInfo)
    {
        m_tableStyleInfo = new CT_TableStyleInfo();
    }
    return m_tableStyleInfo;
    }

    const CT_TableStyleInfo& table_element::get_tableStyleInfo() const
    {    
    if (m_tableStyleInfo)
    {
        return *m_tableStyleInfo;
    }
    return CT_TableStyleInfo::default_instance();
    }

    bool table_element::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* table_element::mutable_extLst()
    {    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& table_element::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

    void table_element::clear()
    {    
    m_has_id_attr = false;
    m_id_attr = 0;
    
    m_has_name_attr = false;
    
    if (m_name_attr)
    {
        delete m_name_attr;
        m_name_attr = NULL;
    }
    
    
    m_has_displayName_attr = false;
    
    if (m_displayName_attr)
    {
        delete m_displayName_attr;
        m_displayName_attr = NULL;
    }
    
    
    m_has_comment_attr = false;
    
    if (m_comment_attr)
    {
        delete m_comment_attr;
        m_comment_attr = NULL;
    }
    
    
    m_has_ref_attr = false;
    
    if (m_ref_attr)
    {
        delete m_ref_attr;
        m_ref_attr = NULL;
    }
    
    
    m_has_tableType_attr = false;
    
    if (m_tableType_attr)
    {
        delete m_tableType_attr;
        m_tableType_attr = NULL;
    }
    
    
    m_has_headerRowCount_attr = false;
    m_headerRowCount_attr = 0;
    
    m_has_insertRow_attr = false;
    m_insertRow_attr = false;
    
    m_has_insertRowShift_attr = false;
    m_insertRowShift_attr = false;
    
    m_has_totalsRowCount_attr = false;
    m_totalsRowCount_attr = 0;
    
    m_has_totalsRowShown_attr = false;
    m_totalsRowShown_attr = false;
    
    m_has_published_attr = false;
    m_published_attr = false;
    
    m_has_headerRowDxfId_attr = false;
    
    if (m_headerRowDxfId_attr)
    {
        delete m_headerRowDxfId_attr;
        m_headerRowDxfId_attr = NULL;
    }
    
    
    m_has_dataDxfId_attr = false;
    
    if (m_dataDxfId_attr)
    {
        delete m_dataDxfId_attr;
        m_dataDxfId_attr = NULL;
    }
    
    
    m_has_totalsRowDxfId_attr = false;
    
    if (m_totalsRowDxfId_attr)
    {
        delete m_totalsRowDxfId_attr;
        m_totalsRowDxfId_attr = NULL;
    }
    
    
    m_has_headerRowBorderDxfId_attr = false;
    
    if (m_headerRowBorderDxfId_attr)
    {
        delete m_headerRowBorderDxfId_attr;
        m_headerRowBorderDxfId_attr = NULL;
    }
    
    
    m_has_tableBorderDxfId_attr = false;
    
    if (m_tableBorderDxfId_attr)
    {
        delete m_tableBorderDxfId_attr;
        m_tableBorderDxfId_attr = NULL;
    }
    
    
    m_has_totalsRowBorderDxfId_attr = false;
    
    if (m_totalsRowBorderDxfId_attr)
    {
        delete m_totalsRowBorderDxfId_attr;
        m_totalsRowBorderDxfId_attr = NULL;
    }
    
    
    m_has_headerRowCellStyle_attr = false;
    
    if (m_headerRowCellStyle_attr)
    {
        delete m_headerRowCellStyle_attr;
        m_headerRowCellStyle_attr = NULL;
    }
    
    
    m_has_dataCellStyle_attr = false;
    
    if (m_dataCellStyle_attr)
    {
        delete m_dataCellStyle_attr;
        m_dataCellStyle_attr = NULL;
    }
    
    
    m_has_totalsRowCellStyle_attr = false;
    
    if (m_totalsRowCellStyle_attr)
    {
        delete m_totalsRowCellStyle_attr;
        m_totalsRowCellStyle_attr = NULL;
    }
    
    
    m_has_connectionId_attr = false;
    m_connectionId_attr = 0;
    }

    void table_element::toXml(std::ostream& _outStream) const
    {    
    _outStream << "<main:table";
    
    _outStream << " " << "xmlns:main=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\"";
    _outStream << " " << "xmlns:s=\"http://schemas.openxmlformats.org/officeDocument/2006/sharedTypes\"";
    _outStream << " " << "xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\"";
    _outStream << " " << "xmlns:xdr=\"http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing\"";
    
    if (m_has_id_attr)
    {
        _outStream << " " << "id" << "=\"" << m_id_attr << "\"";
    }
    
    
    if (m_has_name_attr)
    {
        m_name_attr->toXmlAttr("name", _outStream);
    }
    
    
    if (m_has_displayName_attr)
    {
        m_displayName_attr->toXmlAttr("displayName", _outStream);
    }
    
    
    if (m_has_comment_attr)
    {
        m_comment_attr->toXmlAttr("comment", _outStream);
    }
    
    
    if (m_has_ref_attr)
    {
        m_ref_attr->toXmlAttr("ref", _outStream);
    }
    
    
    if (m_has_tableType_attr)
    {
        m_tableType_attr->toXmlAttr("tableType", _outStream);
    }
    
    
    if (m_has_headerRowCount_attr)
    {
        _outStream << " " << "headerRowCount" << "=\"" << m_headerRowCount_attr << "\"";
    }
    
    
    if (m_has_insertRow_attr)
    {
        _outStream << " " << "insertRow" << "=\"" << XSD::XMLBooleanStr(m_insertRow_attr) << "\"";
    }
    
    
    if (m_has_insertRowShift_attr)
    {
        _outStream << " " << "insertRowShift" << "=\"" << XSD::XMLBooleanStr(m_insertRowShift_attr) << "\"";
    }
    
    
    if (m_has_totalsRowCount_attr)
    {
        _outStream << " " << "totalsRowCount" << "=\"" << m_totalsRowCount_attr << "\"";
    }
    
    
    if (m_has_totalsRowShown_attr)
    {
        _outStream << " " << "totalsRowShown" << "=\"" << XSD::XMLBooleanStr(m_totalsRowShown_attr) << "\"";
    }
    
    
    if (m_has_published_attr)
    {
        _outStream << " " << "published" << "=\"" << XSD::XMLBooleanStr(m_published_attr) << "\"";
    }
    
    
    if (m_has_headerRowDxfId_attr)
    {
        m_headerRowDxfId_attr->toXmlAttr("headerRowDxfId", _outStream);
    }
    
    
    if (m_has_dataDxfId_attr)
    {
        m_dataDxfId_attr->toXmlAttr("dataDxfId", _outStream);
    }
    
    
    if (m_has_totalsRowDxfId_attr)
    {
        m_totalsRowDxfId_attr->toXmlAttr("totalsRowDxfId", _outStream);
    }
    
    
    if (m_has_headerRowBorderDxfId_attr)
    {
        m_headerRowBorderDxfId_attr->toXmlAttr("headerRowBorderDxfId", _outStream);
    }
    
    
    if (m_has_tableBorderDxfId_attr)
    {
        m_tableBorderDxfId_attr->toXmlAttr("tableBorderDxfId", _outStream);
    }
    
    
    if (m_has_totalsRowBorderDxfId_attr)
    {
        m_totalsRowBorderDxfId_attr->toXmlAttr("totalsRowBorderDxfId", _outStream);
    }
    
    
    if (m_has_headerRowCellStyle_attr)
    {
        m_headerRowCellStyle_attr->toXmlAttr("headerRowCellStyle", _outStream);
    }
    
    
    if (m_has_dataCellStyle_attr)
    {
        m_dataCellStyle_attr->toXmlAttr("dataCellStyle", _outStream);
    }
    
    
    if (m_has_totalsRowCellStyle_attr)
    {
        m_totalsRowCellStyle_attr->toXmlAttr("totalsRowCellStyle", _outStream);
    }
    
    
    if (m_has_connectionId_attr)
    {
        _outStream << " " << "connectionId" << "=\"" << m_connectionId_attr << "\"";
    }
    
    _outStream << ">";
    
    if (m_has_autoFilter)
    {
        m_autoFilter->toXmlElem("main:autoFilter", "", _outStream);;
    }
    
    if (m_has_sortState)
    {
        m_sortState->toXmlElem("main:sortState", "", _outStream);;
    }
    
    if (m_has_tableColumns)
    {
        m_tableColumns->toXmlElem("main:tableColumns", "", _outStream);;
    }
    
    if (m_has_tableStyleInfo)
    {
        m_tableStyleInfo->toXmlElem("main:tableStyleInfo", "", _outStream);;
    }
    
    if (m_has_extLst)
    {
        m_extLst->toXmlElem("main:extLst", "", _outStream);;
    }
    
    _outStream << "</main:table>";
    }

    const table_element& table_element::default_instance()
    {    
    if (!table_element::default_instance_)
    {
        table_element::default_instance_ = new table_element();
    }
    return *table_element::default_instance_;
    }

    bool table_element::has_id_attr() const
    {    
    return m_has_id_attr;
    }

    void table_element::set_id_attr(const XSD::unsignedInt_& _id_attr)
    {    
    m_has_id_attr = true;
    m_id_attr = _id_attr;
    }

    const XSD::unsignedInt_& table_element::get_id_attr() const
    {    
    return m_id_attr;
    }

    bool table_element::has_name_attr() const
    {    
    return m_has_name_attr;
    }

    void table_element::set_name_attr(const ns_s::ST_Xstring& _name_attr)
    {    
    m_has_name_attr = true;
    m_name_attr = new ns_s::ST_Xstring(_name_attr);
    }

    const ns_s::ST_Xstring& table_element::get_name_attr() const
    {    
    if (m_name_attr)
    {
        return *m_name_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool table_element::has_displayName_attr() const
    {    
    return m_has_displayName_attr;
    }

    void table_element::set_displayName_attr(const ns_s::ST_Xstring& _displayName_attr)
    {    
    m_has_displayName_attr = true;
    m_displayName_attr = new ns_s::ST_Xstring(_displayName_attr);
    }

    const ns_s::ST_Xstring& table_element::get_displayName_attr() const
    {    
    if (m_displayName_attr)
    {
        return *m_displayName_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool table_element::has_comment_attr() const
    {    
    return m_has_comment_attr;
    }

    void table_element::set_comment_attr(const ns_s::ST_Xstring& _comment_attr)
    {    
    m_has_comment_attr = true;
    m_comment_attr = new ns_s::ST_Xstring(_comment_attr);
    }

    const ns_s::ST_Xstring& table_element::get_comment_attr() const
    {    
    if (m_comment_attr)
    {
        return *m_comment_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool table_element::has_ref_attr() const
    {    
    return m_has_ref_attr;
    }

    void table_element::set_ref_attr(const ST_Ref& _ref_attr)
    {    
    m_has_ref_attr = true;
    m_ref_attr = new ST_Ref(_ref_attr);
    }

    const ST_Ref& table_element::get_ref_attr() const
    {    
    if (m_ref_attr)
    {
        return *m_ref_attr;
    }
    return ST_Ref::default_instance();
    }

    bool table_element::has_tableType_attr() const
    {    
    return m_has_tableType_attr;
    }

    void table_element::set_tableType_attr(const ST_TableType& _tableType_attr)
    {    
    m_has_tableType_attr = true;
    m_tableType_attr = new ST_TableType(_tableType_attr);
    }

    const ST_TableType& table_element::get_tableType_attr() const
    {    
    if (m_tableType_attr)
    {
        return *m_tableType_attr;
    }
    return ST_TableType::default_instance();
    }

    bool table_element::has_headerRowCount_attr() const
    {    
    return m_has_headerRowCount_attr;
    }

    void table_element::set_headerRowCount_attr(const XSD::unsignedInt_& _headerRowCount_attr)
    {    
    m_has_headerRowCount_attr = true;
    m_headerRowCount_attr = _headerRowCount_attr;
    }

    const XSD::unsignedInt_& table_element::get_headerRowCount_attr() const
    {    
    return m_headerRowCount_attr;
    }

    bool table_element::has_insertRow_attr() const
    {    
    return m_has_insertRow_attr;
    }

    void table_element::set_insertRow_attr(const XSD::boolean_& _insertRow_attr)
    {    
    m_has_insertRow_attr = true;
    m_insertRow_attr = _insertRow_attr;
    }

    const XSD::boolean_& table_element::get_insertRow_attr() const
    {    
    return m_insertRow_attr;
    }

    bool table_element::has_insertRowShift_attr() const
    {    
    return m_has_insertRowShift_attr;
    }

    void table_element::set_insertRowShift_attr(const XSD::boolean_& _insertRowShift_attr)
    {    
    m_has_insertRowShift_attr = true;
    m_insertRowShift_attr = _insertRowShift_attr;
    }

    const XSD::boolean_& table_element::get_insertRowShift_attr() const
    {    
    return m_insertRowShift_attr;
    }

    bool table_element::has_totalsRowCount_attr() const
    {    
    return m_has_totalsRowCount_attr;
    }

    void table_element::set_totalsRowCount_attr(const XSD::unsignedInt_& _totalsRowCount_attr)
    {    
    m_has_totalsRowCount_attr = true;
    m_totalsRowCount_attr = _totalsRowCount_attr;
    }

    const XSD::unsignedInt_& table_element::get_totalsRowCount_attr() const
    {    
    return m_totalsRowCount_attr;
    }

    bool table_element::has_totalsRowShown_attr() const
    {    
    return m_has_totalsRowShown_attr;
    }

    void table_element::set_totalsRowShown_attr(const XSD::boolean_& _totalsRowShown_attr)
    {    
    m_has_totalsRowShown_attr = true;
    m_totalsRowShown_attr = _totalsRowShown_attr;
    }

    const XSD::boolean_& table_element::get_totalsRowShown_attr() const
    {    
    return m_totalsRowShown_attr;
    }

    bool table_element::has_published_attr() const
    {    
    return m_has_published_attr;
    }

    void table_element::set_published_attr(const XSD::boolean_& _published_attr)
    {    
    m_has_published_attr = true;
    m_published_attr = _published_attr;
    }

    const XSD::boolean_& table_element::get_published_attr() const
    {    
    return m_published_attr;
    }

    bool table_element::has_headerRowDxfId_attr() const
    {    
    return m_has_headerRowDxfId_attr;
    }

    void table_element::set_headerRowDxfId_attr(const ST_DxfId& _headerRowDxfId_attr)
    {    
    m_has_headerRowDxfId_attr = true;
    m_headerRowDxfId_attr = new ST_DxfId(_headerRowDxfId_attr);
    }

    const ST_DxfId& table_element::get_headerRowDxfId_attr() const
    {    
    if (m_headerRowDxfId_attr)
    {
        return *m_headerRowDxfId_attr;
    }
    return ST_DxfId::default_instance();
    }

    bool table_element::has_dataDxfId_attr() const
    {    
    return m_has_dataDxfId_attr;
    }

    void table_element::set_dataDxfId_attr(const ST_DxfId& _dataDxfId_attr)
    {    
    m_has_dataDxfId_attr = true;
    m_dataDxfId_attr = new ST_DxfId(_dataDxfId_attr);
    }

    const ST_DxfId& table_element::get_dataDxfId_attr() const
    {    
    if (m_dataDxfId_attr)
    {
        return *m_dataDxfId_attr;
    }
    return ST_DxfId::default_instance();
    }

    bool table_element::has_totalsRowDxfId_attr() const
    {    
    return m_has_totalsRowDxfId_attr;
    }

    void table_element::set_totalsRowDxfId_attr(const ST_DxfId& _totalsRowDxfId_attr)
    {    
    m_has_totalsRowDxfId_attr = true;
    m_totalsRowDxfId_attr = new ST_DxfId(_totalsRowDxfId_attr);
    }

    const ST_DxfId& table_element::get_totalsRowDxfId_attr() const
    {    
    if (m_totalsRowDxfId_attr)
    {
        return *m_totalsRowDxfId_attr;
    }
    return ST_DxfId::default_instance();
    }

    bool table_element::has_headerRowBorderDxfId_attr() const
    {    
    return m_has_headerRowBorderDxfId_attr;
    }

    void table_element::set_headerRowBorderDxfId_attr(const ST_DxfId& _headerRowBorderDxfId_attr)
    {    
    m_has_headerRowBorderDxfId_attr = true;
    m_headerRowBorderDxfId_attr = new ST_DxfId(_headerRowBorderDxfId_attr);
    }

    const ST_DxfId& table_element::get_headerRowBorderDxfId_attr() const
    {    
    if (m_headerRowBorderDxfId_attr)
    {
        return *m_headerRowBorderDxfId_attr;
    }
    return ST_DxfId::default_instance();
    }

    bool table_element::has_tableBorderDxfId_attr() const
    {    
    return m_has_tableBorderDxfId_attr;
    }

    void table_element::set_tableBorderDxfId_attr(const ST_DxfId& _tableBorderDxfId_attr)
    {    
    m_has_tableBorderDxfId_attr = true;
    m_tableBorderDxfId_attr = new ST_DxfId(_tableBorderDxfId_attr);
    }

    const ST_DxfId& table_element::get_tableBorderDxfId_attr() const
    {    
    if (m_tableBorderDxfId_attr)
    {
        return *m_tableBorderDxfId_attr;
    }
    return ST_DxfId::default_instance();
    }

    bool table_element::has_totalsRowBorderDxfId_attr() const
    {    
    return m_has_totalsRowBorderDxfId_attr;
    }

    void table_element::set_totalsRowBorderDxfId_attr(const ST_DxfId& _totalsRowBorderDxfId_attr)
    {    
    m_has_totalsRowBorderDxfId_attr = true;
    m_totalsRowBorderDxfId_attr = new ST_DxfId(_totalsRowBorderDxfId_attr);
    }

    const ST_DxfId& table_element::get_totalsRowBorderDxfId_attr() const
    {    
    if (m_totalsRowBorderDxfId_attr)
    {
        return *m_totalsRowBorderDxfId_attr;
    }
    return ST_DxfId::default_instance();
    }

    bool table_element::has_headerRowCellStyle_attr() const
    {    
    return m_has_headerRowCellStyle_attr;
    }

    void table_element::set_headerRowCellStyle_attr(const ns_s::ST_Xstring& _headerRowCellStyle_attr)
    {    
    m_has_headerRowCellStyle_attr = true;
    m_headerRowCellStyle_attr = new ns_s::ST_Xstring(_headerRowCellStyle_attr);
    }

    const ns_s::ST_Xstring& table_element::get_headerRowCellStyle_attr() const
    {    
    if (m_headerRowCellStyle_attr)
    {
        return *m_headerRowCellStyle_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool table_element::has_dataCellStyle_attr() const
    {    
    return m_has_dataCellStyle_attr;
    }

    void table_element::set_dataCellStyle_attr(const ns_s::ST_Xstring& _dataCellStyle_attr)
    {    
    m_has_dataCellStyle_attr = true;
    m_dataCellStyle_attr = new ns_s::ST_Xstring(_dataCellStyle_attr);
    }

    const ns_s::ST_Xstring& table_element::get_dataCellStyle_attr() const
    {    
    if (m_dataCellStyle_attr)
    {
        return *m_dataCellStyle_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool table_element::has_totalsRowCellStyle_attr() const
    {    
    return m_has_totalsRowCellStyle_attr;
    }

    void table_element::set_totalsRowCellStyle_attr(const ns_s::ST_Xstring& _totalsRowCellStyle_attr)
    {    
    m_has_totalsRowCellStyle_attr = true;
    m_totalsRowCellStyle_attr = new ns_s::ST_Xstring(_totalsRowCellStyle_attr);
    }

    const ns_s::ST_Xstring& table_element::get_totalsRowCellStyle_attr() const
    {    
    if (m_totalsRowCellStyle_attr)
    {
        return *m_totalsRowCellStyle_attr;
    }
    return ns_s::ST_Xstring::default_instance();
    }

    bool table_element::has_connectionId_attr() const
    {    
    return m_has_connectionId_attr;
    }

    void table_element::set_connectionId_attr(const XSD::unsignedInt_& _connectionId_attr)
    {    
    m_has_connectionId_attr = true;
    m_connectionId_attr = _connectionId_attr;
    }

    const XSD::unsignedInt_& table_element::get_connectionId_attr() const
    {    
    return m_connectionId_attr;
    }

table_element* table_element::default_instance_ = NULL;

    // volTypes_element
    volTypes_element::volTypes_element()

    {
    }
    volTypes_element::~volTypes_element()
{
    clear();    }
    CT_VolType* volTypes_element::add_volType()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_VolType* pNewChild = pChildGroup->mutable_volType();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_ExtensionList* volTypes_element::add_extLst()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_ExtensionList* pNewChild = pChildGroup->mutable_extLst();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void volTypes_element::clear()
    {    
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void volTypes_element::toXml(std::ostream& _outStream) const
    {    
    _outStream << "<main:volTypes";
    
    _outStream << " " << "xmlns:main=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\"";
    _outStream << " " << "xmlns:s=\"http://schemas.openxmlformats.org/officeDocument/2006/sharedTypes\"";
    _outStream << " " << "xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\"";
    _outStream << " " << "xmlns:xdr=\"http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing\"";
    
    _outStream << ">";
    
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_volType())
            {
                (*iter)->get_volType().toXmlElem("main:volType", "", _outStream);
            }
            else if ((*iter)->has_extLst())
            {
                (*iter)->get_extLst().toXmlElem("main:extLst", "", _outStream);
            }
        }
    }
    
    _outStream << "</main:volTypes>";
    }

    const volTypes_element& volTypes_element::default_instance()
    {    
    if (!volTypes_element::default_instance_)
    {
        volTypes_element::default_instance_ = new volTypes_element();
    }
    return *volTypes_element::default_instance_;
    }


    // volTypes_element::ChildGroup_1
    volTypes_element::ChildGroup_1::ChildGroup_1()
    :m_has_volType(false),
    m_volType(NULL),
    m_has_extLst(false),
    m_extLst(NULL)
    {
    }
    bool volTypes_element::ChildGroup_1::has_volType() const
    {    
    return m_has_volType;
    }

    CT_VolType* volTypes_element::ChildGroup_1::mutable_volType()
    {    
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_volType = true;
    if (!m_volType)
    {
        m_volType = new CT_VolType();
    }
    return m_volType;
    }

    const CT_VolType& volTypes_element::ChildGroup_1::get_volType() const
    {    
    if (m_volType)
    {
        return *m_volType;
    }
    return CT_VolType::default_instance();
    }

    bool volTypes_element::ChildGroup_1::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* volTypes_element::ChildGroup_1::mutable_extLst()
    {    
    
    m_has_volType = false;
    
    if (m_volType)
    {
        delete m_volType;
        m_volType = NULL;
    }
    ;
    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& volTypes_element::ChildGroup_1::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

volTypes_element* volTypes_element::default_instance_ = NULL;

    // workbook_element
    workbook_element::workbook_element()
    :m_has_fileVersion(false),
    m_fileVersion(NULL),
    m_has_fileSharing(false),
    m_fileSharing(NULL),
    m_has_workbookPr(false),
    m_workbookPr(NULL),
    m_has_workbookProtection(false),
    m_workbookProtection(NULL),
    m_has_bookViews(false),
    m_bookViews(NULL),
    m_has_sheets(false),
    m_sheets(NULL),
    m_has_functionGroups(false),
    m_functionGroups(NULL),
    m_has_externalReferences(false),
    m_externalReferences(NULL),
    m_has_definedNames(false),
    m_definedNames(NULL),
    m_has_calcPr(false),
    m_calcPr(NULL),
    m_has_oleSize(false),
    m_oleSize(NULL),
    m_has_customWorkbookViews(false),
    m_customWorkbookViews(NULL),
    m_has_pivotCaches(false),
    m_pivotCaches(NULL),
    m_has_smartTagPr(false),
    m_smartTagPr(NULL),
    m_has_smartTagTypes(false),
    m_smartTagTypes(NULL),
    m_has_webPublishing(false),
    m_webPublishing(NULL),
    m_has_conformance_attr(false),
    m_conformance_attr(NULL)
    {
    }
    workbook_element::~workbook_element()
{
    clear();    }
    bool workbook_element::has_fileVersion() const
    {    
    return m_has_fileVersion;
    }

    CT_FileVersion* workbook_element::mutable_fileVersion()
    {    
    m_has_fileVersion = true;
    if (!m_fileVersion)
    {
        m_fileVersion = new CT_FileVersion();
    }
    return m_fileVersion;
    }

    const CT_FileVersion& workbook_element::get_fileVersion() const
    {    
    if (m_fileVersion)
    {
        return *m_fileVersion;
    }
    return CT_FileVersion::default_instance();
    }

    bool workbook_element::has_fileSharing() const
    {    
    return m_has_fileSharing;
    }

    CT_FileSharing* workbook_element::mutable_fileSharing()
    {    
    m_has_fileSharing = true;
    if (!m_fileSharing)
    {
        m_fileSharing = new CT_FileSharing();
    }
    return m_fileSharing;
    }

    const CT_FileSharing& workbook_element::get_fileSharing() const
    {    
    if (m_fileSharing)
    {
        return *m_fileSharing;
    }
    return CT_FileSharing::default_instance();
    }

    bool workbook_element::has_workbookPr() const
    {    
    return m_has_workbookPr;
    }

    CT_WorkbookPr* workbook_element::mutable_workbookPr()
    {    
    m_has_workbookPr = true;
    if (!m_workbookPr)
    {
        m_workbookPr = new CT_WorkbookPr();
    }
    return m_workbookPr;
    }

    const CT_WorkbookPr& workbook_element::get_workbookPr() const
    {    
    if (m_workbookPr)
    {
        return *m_workbookPr;
    }
    return CT_WorkbookPr::default_instance();
    }

    bool workbook_element::has_workbookProtection() const
    {    
    return m_has_workbookProtection;
    }

    CT_WorkbookProtection* workbook_element::mutable_workbookProtection()
    {    
    m_has_workbookProtection = true;
    if (!m_workbookProtection)
    {
        m_workbookProtection = new CT_WorkbookProtection();
    }
    return m_workbookProtection;
    }

    const CT_WorkbookProtection& workbook_element::get_workbookProtection() const
    {    
    if (m_workbookProtection)
    {
        return *m_workbookProtection;
    }
    return CT_WorkbookProtection::default_instance();
    }

    bool workbook_element::has_bookViews() const
    {    
    return m_has_bookViews;
    }

    CT_BookViews* workbook_element::mutable_bookViews()
    {    
    m_has_bookViews = true;
    if (!m_bookViews)
    {
        m_bookViews = new CT_BookViews();
    }
    return m_bookViews;
    }

    const CT_BookViews& workbook_element::get_bookViews() const
    {    
    if (m_bookViews)
    {
        return *m_bookViews;
    }
    return CT_BookViews::default_instance();
    }

    bool workbook_element::has_sheets() const
    {    
    return m_has_sheets;
    }

    CT_Sheets* workbook_element::mutable_sheets()
    {    
    m_has_sheets = true;
    if (!m_sheets)
    {
        m_sheets = new CT_Sheets();
    }
    return m_sheets;
    }

    const CT_Sheets& workbook_element::get_sheets() const
    {    
    if (m_sheets)
    {
        return *m_sheets;
    }
    return CT_Sheets::default_instance();
    }

    bool workbook_element::has_functionGroups() const
    {    
    return m_has_functionGroups;
    }

    CT_FunctionGroups* workbook_element::mutable_functionGroups()
    {    
    m_has_functionGroups = true;
    if (!m_functionGroups)
    {
        m_functionGroups = new CT_FunctionGroups();
    }
    return m_functionGroups;
    }

    const CT_FunctionGroups& workbook_element::get_functionGroups() const
    {    
    if (m_functionGroups)
    {
        return *m_functionGroups;
    }
    return CT_FunctionGroups::default_instance();
    }

    bool workbook_element::has_externalReferences() const
    {    
    return m_has_externalReferences;
    }

    CT_ExternalReferences* workbook_element::mutable_externalReferences()
    {    
    m_has_externalReferences = true;
    if (!m_externalReferences)
    {
        m_externalReferences = new CT_ExternalReferences();
    }
    return m_externalReferences;
    }

    const CT_ExternalReferences& workbook_element::get_externalReferences() const
    {    
    if (m_externalReferences)
    {
        return *m_externalReferences;
    }
    return CT_ExternalReferences::default_instance();
    }

    bool workbook_element::has_definedNames() const
    {    
    return m_has_definedNames;
    }

    CT_DefinedNames* workbook_element::mutable_definedNames()
    {    
    m_has_definedNames = true;
    if (!m_definedNames)
    {
        m_definedNames = new CT_DefinedNames();
    }
    return m_definedNames;
    }

    const CT_DefinedNames& workbook_element::get_definedNames() const
    {    
    if (m_definedNames)
    {
        return *m_definedNames;
    }
    return CT_DefinedNames::default_instance();
    }

    bool workbook_element::has_calcPr() const
    {    
    return m_has_calcPr;
    }

    CT_CalcPr* workbook_element::mutable_calcPr()
    {    
    m_has_calcPr = true;
    if (!m_calcPr)
    {
        m_calcPr = new CT_CalcPr();
    }
    return m_calcPr;
    }

    const CT_CalcPr& workbook_element::get_calcPr() const
    {    
    if (m_calcPr)
    {
        return *m_calcPr;
    }
    return CT_CalcPr::default_instance();
    }

    bool workbook_element::has_oleSize() const
    {    
    return m_has_oleSize;
    }

    CT_OleSize* workbook_element::mutable_oleSize()
    {    
    m_has_oleSize = true;
    if (!m_oleSize)
    {
        m_oleSize = new CT_OleSize();
    }
    return m_oleSize;
    }

    const CT_OleSize& workbook_element::get_oleSize() const
    {    
    if (m_oleSize)
    {
        return *m_oleSize;
    }
    return CT_OleSize::default_instance();
    }

    bool workbook_element::has_customWorkbookViews() const
    {    
    return m_has_customWorkbookViews;
    }

    CT_CustomWorkbookViews* workbook_element::mutable_customWorkbookViews()
    {    
    m_has_customWorkbookViews = true;
    if (!m_customWorkbookViews)
    {
        m_customWorkbookViews = new CT_CustomWorkbookViews();
    }
    return m_customWorkbookViews;
    }

    const CT_CustomWorkbookViews& workbook_element::get_customWorkbookViews() const
    {    
    if (m_customWorkbookViews)
    {
        return *m_customWorkbookViews;
    }
    return CT_CustomWorkbookViews::default_instance();
    }

    bool workbook_element::has_pivotCaches() const
    {    
    return m_has_pivotCaches;
    }

    CT_PivotCaches* workbook_element::mutable_pivotCaches()
    {    
    m_has_pivotCaches = true;
    if (!m_pivotCaches)
    {
        m_pivotCaches = new CT_PivotCaches();
    }
    return m_pivotCaches;
    }

    const CT_PivotCaches& workbook_element::get_pivotCaches() const
    {    
    if (m_pivotCaches)
    {
        return *m_pivotCaches;
    }
    return CT_PivotCaches::default_instance();
    }

    bool workbook_element::has_smartTagPr() const
    {    
    return m_has_smartTagPr;
    }

    CT_SmartTagPr* workbook_element::mutable_smartTagPr()
    {    
    m_has_smartTagPr = true;
    if (!m_smartTagPr)
    {
        m_smartTagPr = new CT_SmartTagPr();
    }
    return m_smartTagPr;
    }

    const CT_SmartTagPr& workbook_element::get_smartTagPr() const
    {    
    if (m_smartTagPr)
    {
        return *m_smartTagPr;
    }
    return CT_SmartTagPr::default_instance();
    }

    bool workbook_element::has_smartTagTypes() const
    {    
    return m_has_smartTagTypes;
    }

    CT_SmartTagTypes* workbook_element::mutable_smartTagTypes()
    {    
    m_has_smartTagTypes = true;
    if (!m_smartTagTypes)
    {
        m_smartTagTypes = new CT_SmartTagTypes();
    }
    return m_smartTagTypes;
    }

    const CT_SmartTagTypes& workbook_element::get_smartTagTypes() const
    {    
    if (m_smartTagTypes)
    {
        return *m_smartTagTypes;
    }
    return CT_SmartTagTypes::default_instance();
    }

    bool workbook_element::has_webPublishing() const
    {    
    return m_has_webPublishing;
    }

    CT_WebPublishing* workbook_element::mutable_webPublishing()
    {    
    m_has_webPublishing = true;
    if (!m_webPublishing)
    {
        m_webPublishing = new CT_WebPublishing();
    }
    return m_webPublishing;
    }

    const CT_WebPublishing& workbook_element::get_webPublishing() const
    {    
    if (m_webPublishing)
    {
        return *m_webPublishing;
    }
    return CT_WebPublishing::default_instance();
    }

    CT_FileRecoveryPr* workbook_element::add_fileRecoveryPr()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_FileRecoveryPr* pNewChild = pChildGroup->mutable_fileRecoveryPr();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_WebPublishObjects* workbook_element::add_webPublishObjects()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_WebPublishObjects* pNewChild = pChildGroup->mutable_webPublishObjects();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    CT_ExtensionList* workbook_element::add_extLst()
    {    
    ChildGroup_1 *pChildGroup = new ChildGroup_1();
    CT_ExtensionList* pNewChild = pChildGroup->mutable_extLst();
    m_childGroupList_1.push_back(pChildGroup);
    return pNewChild;
    }

    void workbook_element::clear()
    {    
    m_has_conformance_attr = false;
    
    if (m_conformance_attr)
    {
        delete m_conformance_attr;
        m_conformance_attr = NULL;
    }
    
    
    m_has_fileVersion = false;
    
    if (m_fileVersion)
    {
        delete m_fileVersion;
        m_fileVersion = NULL;
    }
    
    
    m_has_fileSharing = false;
    
    if (m_fileSharing)
    {
        delete m_fileSharing;
        m_fileSharing = NULL;
    }
    
    
    m_has_workbookPr = false;
    
    if (m_workbookPr)
    {
        delete m_workbookPr;
        m_workbookPr = NULL;
    }
    
    
    m_has_workbookProtection = false;
    
    if (m_workbookProtection)
    {
        delete m_workbookProtection;
        m_workbookProtection = NULL;
    }
    
    
    m_has_bookViews = false;
    
    if (m_bookViews)
    {
        delete m_bookViews;
        m_bookViews = NULL;
    }
    
    
    m_has_sheets = false;
    
    if (m_sheets)
    {
        delete m_sheets;
        m_sheets = NULL;
    }
    
    
    m_has_functionGroups = false;
    
    if (m_functionGroups)
    {
        delete m_functionGroups;
        m_functionGroups = NULL;
    }
    
    
    m_has_externalReferences = false;
    
    if (m_externalReferences)
    {
        delete m_externalReferences;
        m_externalReferences = NULL;
    }
    
    
    m_has_definedNames = false;
    
    if (m_definedNames)
    {
        delete m_definedNames;
        m_definedNames = NULL;
    }
    
    
    m_has_calcPr = false;
    
    if (m_calcPr)
    {
        delete m_calcPr;
        m_calcPr = NULL;
    }
    
    
    m_has_oleSize = false;
    
    if (m_oleSize)
    {
        delete m_oleSize;
        m_oleSize = NULL;
    }
    
    
    m_has_customWorkbookViews = false;
    
    if (m_customWorkbookViews)
    {
        delete m_customWorkbookViews;
        m_customWorkbookViews = NULL;
    }
    
    
    m_has_pivotCaches = false;
    
    if (m_pivotCaches)
    {
        delete m_pivotCaches;
        m_pivotCaches = NULL;
    }
    
    
    m_has_smartTagPr = false;
    
    if (m_smartTagPr)
    {
        delete m_smartTagPr;
        m_smartTagPr = NULL;
    }
    
    
    m_has_smartTagTypes = false;
    
    if (m_smartTagTypes)
    {
        delete m_smartTagTypes;
        m_smartTagTypes = NULL;
    }
    
    
    m_has_webPublishing = false;
    
    if (m_webPublishing)
    {
        delete m_webPublishing;
        m_webPublishing = NULL;
    }
    
     
    {
        vector<ChildGroup_1*>::iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            delete *iter;
        }
        m_childGroupList_1.clear();
    }
    }

    void workbook_element::toXml(std::ostream& _outStream) const
    {    
    _outStream << "<main:workbook";
    
    _outStream << " " << "xmlns:main=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\"";
    _outStream << " " << "xmlns:s=\"http://schemas.openxmlformats.org/officeDocument/2006/sharedTypes\"";
    _outStream << " " << "xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\"";
    _outStream << " " << "xmlns:xdr=\"http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing\"";
    
    if (m_has_conformance_attr)
    {
        m_conformance_attr->toXmlAttr("conformance", _outStream);
    }
    
    _outStream << ">";
    
    if (m_has_fileVersion)
    {
        m_fileVersion->toXmlElem("main:fileVersion", "", _outStream);;
    }
    
    if (m_has_fileSharing)
    {
        m_fileSharing->toXmlElem("main:fileSharing", "", _outStream);;
    }
    
    if (m_has_workbookPr)
    {
        m_workbookPr->toXmlElem("main:workbookPr", "", _outStream);;
    }
    
    if (m_has_workbookProtection)
    {
        m_workbookProtection->toXmlElem("main:workbookProtection", "", _outStream);;
    }
    
    if (m_has_bookViews)
    {
        m_bookViews->toXmlElem("main:bookViews", "", _outStream);;
    }
    
    if (m_has_sheets)
    {
        m_sheets->toXmlElem("main:sheets", "", _outStream);;
    }
    
    if (m_has_functionGroups)
    {
        m_functionGroups->toXmlElem("main:functionGroups", "", _outStream);;
    }
    
    if (m_has_externalReferences)
    {
        m_externalReferences->toXmlElem("main:externalReferences", "", _outStream);;
    }
    
    if (m_has_definedNames)
    {
        m_definedNames->toXmlElem("main:definedNames", "", _outStream);;
    }
    
    if (m_has_calcPr)
    {
        m_calcPr->toXmlElem("main:calcPr", "", _outStream);;
    }
    
    if (m_has_oleSize)
    {
        m_oleSize->toXmlElem("main:oleSize", "", _outStream);;
    }
    
    if (m_has_customWorkbookViews)
    {
        m_customWorkbookViews->toXmlElem("main:customWorkbookViews", "", _outStream);;
    }
    
    if (m_has_pivotCaches)
    {
        m_pivotCaches->toXmlElem("main:pivotCaches", "", _outStream);;
    }
    
    if (m_has_smartTagPr)
    {
        m_smartTagPr->toXmlElem("main:smartTagPr", "", _outStream);;
    }
    
    if (m_has_smartTagTypes)
    {
        m_smartTagTypes->toXmlElem("main:smartTagTypes", "", _outStream);;
    }
    
    if (m_has_webPublishing)
    {
        m_webPublishing->toXmlElem("main:webPublishing", "", _outStream);;
    }
     
    {
        vector<ChildGroup_1*>::const_iterator iter;
        for (iter = m_childGroupList_1.begin(); iter != m_childGroupList_1.end(); ++iter)
        {
            if ((*iter)->has_fileRecoveryPr())
            {
                (*iter)->get_fileRecoveryPr().toXmlElem("main:fileRecoveryPr", "", _outStream);
            }
            else if ((*iter)->has_webPublishObjects())
            {
                (*iter)->get_webPublishObjects().toXmlElem("main:webPublishObjects", "", _outStream);
            }
            else if ((*iter)->has_extLst())
            {
                (*iter)->get_extLst().toXmlElem("main:extLst", "", _outStream);
            }
        }
    }
    
    _outStream << "</main:workbook>";
    }

    const workbook_element& workbook_element::default_instance()
    {    
    if (!workbook_element::default_instance_)
    {
        workbook_element::default_instance_ = new workbook_element();
    }
    return *workbook_element::default_instance_;
    }

    bool workbook_element::has_conformance_attr() const
    {    
    return m_has_conformance_attr;
    }

    void workbook_element::set_conformance_attr(const ns_s::ST_ConformanceClass& _conformance_attr)
    {    
    m_has_conformance_attr = true;
    m_conformance_attr = new ns_s::ST_ConformanceClass(_conformance_attr);
    }

    const ns_s::ST_ConformanceClass& workbook_element::get_conformance_attr() const
    {    
    if (m_conformance_attr)
    {
        return *m_conformance_attr;
    }
    return ns_s::ST_ConformanceClass::default_instance();
    }


    // workbook_element::ChildGroup_1
    workbook_element::ChildGroup_1::ChildGroup_1()
    :m_has_fileRecoveryPr(false),
    m_fileRecoveryPr(NULL),
    m_has_webPublishObjects(false),
    m_webPublishObjects(NULL),
    m_has_extLst(false),
    m_extLst(NULL)
    {
    }
    bool workbook_element::ChildGroup_1::has_fileRecoveryPr() const
    {    
    return m_has_fileRecoveryPr;
    }

    CT_FileRecoveryPr* workbook_element::ChildGroup_1::mutable_fileRecoveryPr()
    {    
    
    m_has_webPublishObjects = false;
    
    if (m_webPublishObjects)
    {
        delete m_webPublishObjects;
        m_webPublishObjects = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_fileRecoveryPr = true;
    if (!m_fileRecoveryPr)
    {
        m_fileRecoveryPr = new CT_FileRecoveryPr();
    }
    return m_fileRecoveryPr;
    }

    const CT_FileRecoveryPr& workbook_element::ChildGroup_1::get_fileRecoveryPr() const
    {    
    if (m_fileRecoveryPr)
    {
        return *m_fileRecoveryPr;
    }
    return CT_FileRecoveryPr::default_instance();
    }

    bool workbook_element::ChildGroup_1::has_webPublishObjects() const
    {    
    return m_has_webPublishObjects;
    }

    CT_WebPublishObjects* workbook_element::ChildGroup_1::mutable_webPublishObjects()
    {    
    
    m_has_fileRecoveryPr = false;
    
    if (m_fileRecoveryPr)
    {
        delete m_fileRecoveryPr;
        m_fileRecoveryPr = NULL;
    }
    ;
    
    m_has_extLst = false;
    
    if (m_extLst)
    {
        delete m_extLst;
        m_extLst = NULL;
    }
    ;
    
    m_has_webPublishObjects = true;
    if (!m_webPublishObjects)
    {
        m_webPublishObjects = new CT_WebPublishObjects();
    }
    return m_webPublishObjects;
    }

    const CT_WebPublishObjects& workbook_element::ChildGroup_1::get_webPublishObjects() const
    {    
    if (m_webPublishObjects)
    {
        return *m_webPublishObjects;
    }
    return CT_WebPublishObjects::default_instance();
    }

    bool workbook_element::ChildGroup_1::has_extLst() const
    {    
    return m_has_extLst;
    }

    CT_ExtensionList* workbook_element::ChildGroup_1::mutable_extLst()
    {    
    
    m_has_fileRecoveryPr = false;
    
    if (m_fileRecoveryPr)
    {
        delete m_fileRecoveryPr;
        m_fileRecoveryPr = NULL;
    }
    ;
    
    m_has_webPublishObjects = false;
    
    if (m_webPublishObjects)
    {
        delete m_webPublishObjects;
        m_webPublishObjects = NULL;
    }
    ;
    
    m_has_extLst = true;
    if (!m_extLst)
    {
        m_extLst = new CT_ExtensionList();
    }
    return m_extLst;
    }

    const CT_ExtensionList& workbook_element::ChildGroup_1::get_extLst() const
    {    
    if (m_extLst)
    {
        return *m_extLst;
    }
    return CT_ExtensionList::default_instance();
    }

workbook_element* workbook_element::default_instance_ = NULL;
}