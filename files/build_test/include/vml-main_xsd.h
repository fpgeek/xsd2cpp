namespace ns_v {
class Element;
class Attribute;
class ST_Ext;
class ST_FillType;
class ST_FillMethod;
class ST_ShadowType;
class ST_StrokeLineStyle;
class ST_StrokeJoinStyle;
class ST_StrokeEndCap;
class ST_StrokeArrowLength;
class ST_StrokeArrowWidth;
class ST_StrokeArrowType;
class ST_ImageAspect;
class ST_EditAs;
class CT_Shape;
class CT_Shapetype;
class CT_Group;
class CT_Background;
class CT_Fill;
class CT_Formulas;
class CT_F;
class CT_Handles;
class CT_H;
class CT_ImageData;
class CT_Path;
class CT_Shadow;
class CT_Stroke;
class CT_Textbox;
class CT_TextPath;
class CT_Arc;
class CT_Curve;
class CT_Image;
class CT_Line;
class CT_Oval;
class CT_PolyLine;
class CT_Rect;
class CT_RoundRect;
class shape_element;
class shapetype_element;
class group_element;
class background_element;
class fill_element;
class formulas_element;
class handles_element;
class imagedata_element;
class path_element;
class textbox_element;
class shadow_element;
class stroke_element;
class textpath_element;
class arc_element;
class curve_element;
class image_element;
class line_element;
class oval_element;
class polyline_element;
class rect_element;
class roundrect_element;
}
#ifndef __vml_main_xsd_
#define __vml_main_xsd_ 0

#include "xsdtype.h"
#include <vector>
#include <string>
#include <iostream>
#include "vml-officeDrawing_xsd.h"
#include "wml_xsd.h"
#include "vml-wordprocessingDrawing_xsd.h"
#include "shared-relationshipReference_xsd.h"
#include "vml-spreadsheetDrawing_xsd.h"
#include "vml-presentationDrawing_xsd.h"
#include "shared-commonSimpleTypes_xsd.h"
namespace ns_v {
using namespace std;
class Element: public XSD::Element
{
public:
protected:
private:
};

class Attribute: public XSD::Attribute
{
public:
protected:
private:
};

class ST_Ext: public XSD::SimpleType
{
public:
    enum  Type
    {
        _view_ = 0,
        _edit_,
        _backwardCompatible_
    };
    ST_Ext();
    ST_Ext(const ST_Ext::Type& _type);
    ~ST_Ext();
    bool has_type() const;
    void set_type(const ST_Ext::Type& _type);
    const ST_Ext::Type& get_type() const;
    std::string toString() const;
    void clear();
    void toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const;
    static const ST_Ext& default_instance();
protected:
private:
    static const std::string TypeStrList[];
    static ST_Ext* default_instance_;
    bool m_has_type;
    ST_Ext::Type m_type;
};

class ST_FillType: public XSD::SimpleType
{
public:
    enum  Type
    {
        _solid_ = 0,
        _gradient_,
        _gradientRadial_,
        _tile_,
        _pattern_,
        _frame_
    };
    ST_FillType();
    ST_FillType(const ST_FillType::Type& _type);
    ~ST_FillType();
    bool has_type() const;
    void set_type(const ST_FillType::Type& _type);
    const ST_FillType::Type& get_type() const;
    std::string toString() const;
    void clear();
    void toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const;
    static const ST_FillType& default_instance();
protected:
private:
    static const std::string TypeStrList[];
    static ST_FillType* default_instance_;
    bool m_has_type;
    ST_FillType::Type m_type;
};

class ST_FillMethod: public XSD::SimpleType
{
public:
    enum  Type
    {
        _none_ = 0,
        _linear_,
        _sigma_,
        _any_,
        _linear_sigma_
    };
    ST_FillMethod();
    ST_FillMethod(const ST_FillMethod::Type& _type);
    ~ST_FillMethod();
    bool has_type() const;
    void set_type(const ST_FillMethod::Type& _type);
    const ST_FillMethod::Type& get_type() const;
    std::string toString() const;
    void clear();
    void toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const;
    static const ST_FillMethod& default_instance();
protected:
private:
    static const std::string TypeStrList[];
    static ST_FillMethod* default_instance_;
    bool m_has_type;
    ST_FillMethod::Type m_type;
};

class ST_ShadowType: public XSD::SimpleType
{
public:
    enum  Type
    {
        _single_ = 0,
        _double_,
        _emboss_,
        _perspective_
    };
    ST_ShadowType();
    ST_ShadowType(const ST_ShadowType::Type& _type);
    ~ST_ShadowType();
    bool has_type() const;
    void set_type(const ST_ShadowType::Type& _type);
    const ST_ShadowType::Type& get_type() const;
    std::string toString() const;
    void clear();
    void toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const;
    static const ST_ShadowType& default_instance();
protected:
private:
    static const std::string TypeStrList[];
    static ST_ShadowType* default_instance_;
    bool m_has_type;
    ST_ShadowType::Type m_type;
};

class ST_StrokeLineStyle: public XSD::SimpleType
{
public:
    enum  Type
    {
        _single_ = 0,
        _thinThin_,
        _thinThick_,
        _thickThin_,
        _thickBetweenThin_
    };
    ST_StrokeLineStyle();
    ST_StrokeLineStyle(const ST_StrokeLineStyle::Type& _type);
    ~ST_StrokeLineStyle();
    bool has_type() const;
    void set_type(const ST_StrokeLineStyle::Type& _type);
    const ST_StrokeLineStyle::Type& get_type() const;
    std::string toString() const;
    void clear();
    void toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const;
    static const ST_StrokeLineStyle& default_instance();
protected:
private:
    static const std::string TypeStrList[];
    static ST_StrokeLineStyle* default_instance_;
    bool m_has_type;
    ST_StrokeLineStyle::Type m_type;
};

class ST_StrokeJoinStyle: public XSD::SimpleType
{
public:
    enum  Type
    {
        _round_ = 0,
        _bevel_,
        _miter_
    };
    ST_StrokeJoinStyle();
    ST_StrokeJoinStyle(const ST_StrokeJoinStyle::Type& _type);
    ~ST_StrokeJoinStyle();
    bool has_type() const;
    void set_type(const ST_StrokeJoinStyle::Type& _type);
    const ST_StrokeJoinStyle::Type& get_type() const;
    std::string toString() const;
    void clear();
    void toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const;
    static const ST_StrokeJoinStyle& default_instance();
protected:
private:
    static const std::string TypeStrList[];
    static ST_StrokeJoinStyle* default_instance_;
    bool m_has_type;
    ST_StrokeJoinStyle::Type m_type;
};

class ST_StrokeEndCap: public XSD::SimpleType
{
public:
    enum  Type
    {
        _flat_ = 0,
        _square_,
        _round_
    };
    ST_StrokeEndCap();
    ST_StrokeEndCap(const ST_StrokeEndCap::Type& _type);
    ~ST_StrokeEndCap();
    bool has_type() const;
    void set_type(const ST_StrokeEndCap::Type& _type);
    const ST_StrokeEndCap::Type& get_type() const;
    std::string toString() const;
    void clear();
    void toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const;
    static const ST_StrokeEndCap& default_instance();
protected:
private:
    static const std::string TypeStrList[];
    static ST_StrokeEndCap* default_instance_;
    bool m_has_type;
    ST_StrokeEndCap::Type m_type;
};

class ST_StrokeArrowLength: public XSD::SimpleType
{
public:
    enum  Type
    {
        _short_ = 0,
        _medium_,
        _long_
    };
    ST_StrokeArrowLength();
    ST_StrokeArrowLength(const ST_StrokeArrowLength::Type& _type);
    ~ST_StrokeArrowLength();
    bool has_type() const;
    void set_type(const ST_StrokeArrowLength::Type& _type);
    const ST_StrokeArrowLength::Type& get_type() const;
    std::string toString() const;
    void clear();
    void toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const;
    static const ST_StrokeArrowLength& default_instance();
protected:
private:
    static const std::string TypeStrList[];
    static ST_StrokeArrowLength* default_instance_;
    bool m_has_type;
    ST_StrokeArrowLength::Type m_type;
};

class ST_StrokeArrowWidth: public XSD::SimpleType
{
public:
    enum  Type
    {
        _narrow_ = 0,
        _medium_,
        _wide_
    };
    ST_StrokeArrowWidth();
    ST_StrokeArrowWidth(const ST_StrokeArrowWidth::Type& _type);
    ~ST_StrokeArrowWidth();
    bool has_type() const;
    void set_type(const ST_StrokeArrowWidth::Type& _type);
    const ST_StrokeArrowWidth::Type& get_type() const;
    std::string toString() const;
    void clear();
    void toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const;
    static const ST_StrokeArrowWidth& default_instance();
protected:
private:
    static const std::string TypeStrList[];
    static ST_StrokeArrowWidth* default_instance_;
    bool m_has_type;
    ST_StrokeArrowWidth::Type m_type;
};

class ST_StrokeArrowType: public XSD::SimpleType
{
public:
    enum  Type
    {
        _none_ = 0,
        _block_,
        _classic_,
        _oval_,
        _diamond_,
        _open_
    };
    ST_StrokeArrowType();
    ST_StrokeArrowType(const ST_StrokeArrowType::Type& _type);
    ~ST_StrokeArrowType();
    bool has_type() const;
    void set_type(const ST_StrokeArrowType::Type& _type);
    const ST_StrokeArrowType::Type& get_type() const;
    std::string toString() const;
    void clear();
    void toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const;
    static const ST_StrokeArrowType& default_instance();
protected:
private:
    static const std::string TypeStrList[];
    static ST_StrokeArrowType* default_instance_;
    bool m_has_type;
    ST_StrokeArrowType::Type m_type;
};

class ST_ImageAspect: public XSD::SimpleType
{
public:
    enum  Type
    {
        _ignore_ = 0,
        _atMost_,
        _atLeast_
    };
    ST_ImageAspect();
    ST_ImageAspect(const ST_ImageAspect::Type& _type);
    ~ST_ImageAspect();
    bool has_type() const;
    void set_type(const ST_ImageAspect::Type& _type);
    const ST_ImageAspect::Type& get_type() const;
    std::string toString() const;
    void clear();
    void toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const;
    static const ST_ImageAspect& default_instance();
protected:
private:
    static const std::string TypeStrList[];
    static ST_ImageAspect* default_instance_;
    bool m_has_type;
    ST_ImageAspect::Type m_type;
};

class ST_EditAs: public XSD::SimpleType
{
public:
    enum  Type
    {
        _canvas_ = 0,
        _orgchart_,
        _radial_,
        _cycle_,
        _stacked_,
        _venn_,
        _bullseye_
    };
    ST_EditAs();
    ST_EditAs(const ST_EditAs::Type& _type);
    ~ST_EditAs();
    bool has_type() const;
    void set_type(const ST_EditAs::Type& _type);
    const ST_EditAs::Type& get_type() const;
    std::string toString() const;
    void clear();
    void toXmlAttr(const std::string& _attrName, std::ostream& _outStream) const;
    static const ST_EditAs& default_instance();
protected:
private:
    static const std::string TypeStrList[];
    static ST_EditAs* default_instance_;
    bool m_has_type;
    ST_EditAs::Type m_type;
};

class CT_Shape: public XSD::ComplexType
{
public:
    CT_Shape();
    ~CT_Shape();
    CT_Path* add_path();
    CT_Formulas* add_formulas();
    CT_Handles* add_handles();
    CT_Fill* add_fill();
    CT_Stroke* add_stroke();
    CT_Shadow* add_shadow();
    CT_Textbox* add_textbox();
    CT_TextPath* add_textpath();
    CT_ImageData* add_imagedata();
    ns_o::CT_Skew* add_o_skew();
    ns_o::CT_Extrusion* add_o_extrusion();
    ns_o::CT_Callout* add_o_callout();
    ns_o::CT_Lock* add_o_lock();
    ns_o::CT_ClipPath* add_o_clippath();
    ns_o::CT_SignatureLine* add_o_signatureline();
    ns_w10::CT_Wrap* add_w10_wrap();
    ns_w10::CT_AnchorLock* add_w10_anchorlock();
    ns_w10::CT_Border* add_w10_bordertop();
    ns_w10::CT_Border* add_w10_borderbottom();
    ns_w10::CT_Border* add_w10_borderleft();
    ns_w10::CT_Border* add_w10_borderright();
    ns_x::CT_ClientData* add_x_ClientData();
    ns_pvml::CT_Rel* add_pvml_textdata();
    ns_o::CT_Ink* add_o_ink();
    ns_pvml::CT_Empty* add_pvml_iscomment();
    ns_o::CT_EquationXml* add_o_equationxml();
    void clear();
    void toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const;
    static const CT_Shape& default_instance();
    bool has_type_attr() const;
    void set_type_attr(const XSD::string_& _type_attr);
    const XSD::string_& get_type_attr() const;
    bool has_adj_attr() const;
    void set_adj_attr(const XSD::string_& _adj_attr);
    const XSD::string_& get_adj_attr() const;
    bool has_path_attr() const;
    void set_path_attr(const XSD::string_& _path_attr);
    const XSD::string_& get_path_attr() const;
    bool has_o_gfxdata_attr() const;
    void set_o_gfxdata_attr(const XSD::base64Binary_& _o_gfxdata_attr);
    const XSD::base64Binary_& get_o_gfxdata_attr() const;
    bool has_equationxml_attr() const;
    void set_equationxml_attr(const XSD::string_& _equationxml_attr);
    const XSD::string_& get_equationxml_attr() const;
protected:
private:
    class ChildGroup_1
    {
    public:
        ChildGroup_1();
        bool has_path() const;
        CT_Path* mutable_path();
        const CT_Path& get_path() const;
        bool has_formulas() const;
        CT_Formulas* mutable_formulas();
        const CT_Formulas& get_formulas() const;
        bool has_handles() const;
        CT_Handles* mutable_handles();
        const CT_Handles& get_handles() const;
        bool has_fill() const;
        CT_Fill* mutable_fill();
        const CT_Fill& get_fill() const;
        bool has_stroke() const;
        CT_Stroke* mutable_stroke();
        const CT_Stroke& get_stroke() const;
        bool has_shadow() const;
        CT_Shadow* mutable_shadow();
        const CT_Shadow& get_shadow() const;
        bool has_textbox() const;
        CT_Textbox* mutable_textbox();
        const CT_Textbox& get_textbox() const;
        bool has_textpath() const;
        CT_TextPath* mutable_textpath();
        const CT_TextPath& get_textpath() const;
        bool has_imagedata() const;
        CT_ImageData* mutable_imagedata();
        const CT_ImageData& get_imagedata() const;
        bool has_o_skew() const;
        ns_o::CT_Skew* mutable_o_skew();
        const ns_o::CT_Skew& get_o_skew() const;
        bool has_o_extrusion() const;
        ns_o::CT_Extrusion* mutable_o_extrusion();
        const ns_o::CT_Extrusion& get_o_extrusion() const;
        bool has_o_callout() const;
        ns_o::CT_Callout* mutable_o_callout();
        const ns_o::CT_Callout& get_o_callout() const;
        bool has_o_lock() const;
        ns_o::CT_Lock* mutable_o_lock();
        const ns_o::CT_Lock& get_o_lock() const;
        bool has_o_clippath() const;
        ns_o::CT_ClipPath* mutable_o_clippath();
        const ns_o::CT_ClipPath& get_o_clippath() const;
        bool has_o_signatureline() const;
        ns_o::CT_SignatureLine* mutable_o_signatureline();
        const ns_o::CT_SignatureLine& get_o_signatureline() const;
        bool has_w10_wrap() const;
        ns_w10::CT_Wrap* mutable_w10_wrap();
        const ns_w10::CT_Wrap& get_w10_wrap() const;
        bool has_w10_anchorlock() const;
        ns_w10::CT_AnchorLock* mutable_w10_anchorlock();
        const ns_w10::CT_AnchorLock& get_w10_anchorlock() const;
        bool has_w10_bordertop() const;
        ns_w10::CT_Border* mutable_w10_bordertop();
        const ns_w10::CT_Border& get_w10_bordertop() const;
        bool has_w10_borderbottom() const;
        ns_w10::CT_Border* mutable_w10_borderbottom();
        const ns_w10::CT_Border& get_w10_borderbottom() const;
        bool has_w10_borderleft() const;
        ns_w10::CT_Border* mutable_w10_borderleft();
        const ns_w10::CT_Border& get_w10_borderleft() const;
        bool has_w10_borderright() const;
        ns_w10::CT_Border* mutable_w10_borderright();
        const ns_w10::CT_Border& get_w10_borderright() const;
        bool has_x_ClientData() const;
        ns_x::CT_ClientData* mutable_x_ClientData();
        const ns_x::CT_ClientData& get_x_ClientData() const;
        bool has_pvml_textdata() const;
        ns_pvml::CT_Rel* mutable_pvml_textdata();
        const ns_pvml::CT_Rel& get_pvml_textdata() const;
        bool has_o_ink() const;
        ns_o::CT_Ink* mutable_o_ink();
        const ns_o::CT_Ink& get_o_ink() const;
        bool has_pvml_iscomment() const;
        ns_pvml::CT_Empty* mutable_pvml_iscomment();
        const ns_pvml::CT_Empty& get_pvml_iscomment() const;
        bool has_o_equationxml() const;
        ns_o::CT_EquationXml* mutable_o_equationxml();
        const ns_o::CT_EquationXml& get_o_equationxml() const;
    protected:
    private:
        bool m_has_path;
        CT_Path* m_path;
        bool m_has_formulas;
        CT_Formulas* m_formulas;
        bool m_has_handles;
        CT_Handles* m_handles;
        bool m_has_fill;
        CT_Fill* m_fill;
        bool m_has_stroke;
        CT_Stroke* m_stroke;
        bool m_has_shadow;
        CT_Shadow* m_shadow;
        bool m_has_textbox;
        CT_Textbox* m_textbox;
        bool m_has_textpath;
        CT_TextPath* m_textpath;
        bool m_has_imagedata;
        CT_ImageData* m_imagedata;
        bool m_has_o_skew;
        ns_o::CT_Skew* m_o_skew;
        bool m_has_o_extrusion;
        ns_o::CT_Extrusion* m_o_extrusion;
        bool m_has_o_callout;
        ns_o::CT_Callout* m_o_callout;
        bool m_has_o_lock;
        ns_o::CT_Lock* m_o_lock;
        bool m_has_o_clippath;
        ns_o::CT_ClipPath* m_o_clippath;
        bool m_has_o_signatureline;
        ns_o::CT_SignatureLine* m_o_signatureline;
        bool m_has_w10_wrap;
        ns_w10::CT_Wrap* m_w10_wrap;
        bool m_has_w10_anchorlock;
        ns_w10::CT_AnchorLock* m_w10_anchorlock;
        bool m_has_w10_bordertop;
        ns_w10::CT_Border* m_w10_bordertop;
        bool m_has_w10_borderbottom;
        ns_w10::CT_Border* m_w10_borderbottom;
        bool m_has_w10_borderleft;
        ns_w10::CT_Border* m_w10_borderleft;
        bool m_has_w10_borderright;
        ns_w10::CT_Border* m_w10_borderright;
        bool m_has_x_ClientData;
        ns_x::CT_ClientData* m_x_ClientData;
        bool m_has_pvml_textdata;
        ns_pvml::CT_Rel* m_pvml_textdata;
        bool m_has_o_ink;
        ns_o::CT_Ink* m_o_ink;
        bool m_has_pvml_iscomment;
        ns_pvml::CT_Empty* m_pvml_iscomment;
        bool m_has_o_equationxml;
        ns_o::CT_EquationXml* m_o_equationxml;
    };
    vector<ChildGroup_1*> m_childGroupList_1;
    static CT_Shape* default_instance_;
    bool m_has_type_attr;
    XSD::string_ m_type_attr;
    bool m_has_adj_attr;
    XSD::string_ m_adj_attr;
    bool m_has_path_attr;
    XSD::string_ m_path_attr;
    bool m_has_o_gfxdata_attr;
    XSD::base64Binary_ m_o_gfxdata_attr;
    bool m_has_equationxml_attr;
    XSD::string_ m_equationxml_attr;
};

class CT_Shapetype: public XSD::ComplexType
{
public:
    CT_Shapetype();
    ~CT_Shapetype();
    CT_Path* add_path();
    CT_Formulas* add_formulas();
    CT_Handles* add_handles();
    CT_Fill* add_fill();
    CT_Stroke* add_stroke();
    CT_Shadow* add_shadow();
    CT_Textbox* add_textbox();
    CT_TextPath* add_textpath();
    CT_ImageData* add_imagedata();
    ns_o::CT_Skew* add_o_skew();
    ns_o::CT_Extrusion* add_o_extrusion();
    ns_o::CT_Callout* add_o_callout();
    ns_o::CT_Lock* add_o_lock();
    ns_o::CT_ClipPath* add_o_clippath();
    ns_o::CT_SignatureLine* add_o_signatureline();
    ns_w10::CT_Wrap* add_w10_wrap();
    ns_w10::CT_AnchorLock* add_w10_anchorlock();
    ns_w10::CT_Border* add_w10_bordertop();
    ns_w10::CT_Border* add_w10_borderbottom();
    ns_w10::CT_Border* add_w10_borderleft();
    ns_w10::CT_Border* add_w10_borderright();
    ns_x::CT_ClientData* add_x_ClientData();
    ns_pvml::CT_Rel* add_pvml_textdata();
    bool has_o_complex() const;
    ns_o::CT_Complex* mutable_o_complex();
    const ns_o::CT_Complex& get_o_complex() const;
    void clear();
    void toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const;
    static const CT_Shapetype& default_instance();
    bool has_adj_attr() const;
    void set_adj_attr(const XSD::string_& _adj_attr);
    const XSD::string_& get_adj_attr() const;
    bool has_path_attr() const;
    void set_path_attr(const XSD::string_& _path_attr);
    const XSD::string_& get_path_attr() const;
    bool has_o_master_attr() const;
    void set_o_master_attr(const XSD::string_& _o_master_attr);
    const XSD::string_& get_o_master_attr() const;
protected:
private:
    class ChildGroup_1
    {
    public:
        ChildGroup_1();
        bool has_path() const;
        CT_Path* mutable_path();
        const CT_Path& get_path() const;
        bool has_formulas() const;
        CT_Formulas* mutable_formulas();
        const CT_Formulas& get_formulas() const;
        bool has_handles() const;
        CT_Handles* mutable_handles();
        const CT_Handles& get_handles() const;
        bool has_fill() const;
        CT_Fill* mutable_fill();
        const CT_Fill& get_fill() const;
        bool has_stroke() const;
        CT_Stroke* mutable_stroke();
        const CT_Stroke& get_stroke() const;
        bool has_shadow() const;
        CT_Shadow* mutable_shadow();
        const CT_Shadow& get_shadow() const;
        bool has_textbox() const;
        CT_Textbox* mutable_textbox();
        const CT_Textbox& get_textbox() const;
        bool has_textpath() const;
        CT_TextPath* mutable_textpath();
        const CT_TextPath& get_textpath() const;
        bool has_imagedata() const;
        CT_ImageData* mutable_imagedata();
        const CT_ImageData& get_imagedata() const;
        bool has_o_skew() const;
        ns_o::CT_Skew* mutable_o_skew();
        const ns_o::CT_Skew& get_o_skew() const;
        bool has_o_extrusion() const;
        ns_o::CT_Extrusion* mutable_o_extrusion();
        const ns_o::CT_Extrusion& get_o_extrusion() const;
        bool has_o_callout() const;
        ns_o::CT_Callout* mutable_o_callout();
        const ns_o::CT_Callout& get_o_callout() const;
        bool has_o_lock() const;
        ns_o::CT_Lock* mutable_o_lock();
        const ns_o::CT_Lock& get_o_lock() const;
        bool has_o_clippath() const;
        ns_o::CT_ClipPath* mutable_o_clippath();
        const ns_o::CT_ClipPath& get_o_clippath() const;
        bool has_o_signatureline() const;
        ns_o::CT_SignatureLine* mutable_o_signatureline();
        const ns_o::CT_SignatureLine& get_o_signatureline() const;
        bool has_w10_wrap() const;
        ns_w10::CT_Wrap* mutable_w10_wrap();
        const ns_w10::CT_Wrap& get_w10_wrap() const;
        bool has_w10_anchorlock() const;
        ns_w10::CT_AnchorLock* mutable_w10_anchorlock();
        const ns_w10::CT_AnchorLock& get_w10_anchorlock() const;
        bool has_w10_bordertop() const;
        ns_w10::CT_Border* mutable_w10_bordertop();
        const ns_w10::CT_Border& get_w10_bordertop() const;
        bool has_w10_borderbottom() const;
        ns_w10::CT_Border* mutable_w10_borderbottom();
        const ns_w10::CT_Border& get_w10_borderbottom() const;
        bool has_w10_borderleft() const;
        ns_w10::CT_Border* mutable_w10_borderleft();
        const ns_w10::CT_Border& get_w10_borderleft() const;
        bool has_w10_borderright() const;
        ns_w10::CT_Border* mutable_w10_borderright();
        const ns_w10::CT_Border& get_w10_borderright() const;
        bool has_x_ClientData() const;
        ns_x::CT_ClientData* mutable_x_ClientData();
        const ns_x::CT_ClientData& get_x_ClientData() const;
        bool has_pvml_textdata() const;
        ns_pvml::CT_Rel* mutable_pvml_textdata();
        const ns_pvml::CT_Rel& get_pvml_textdata() const;
    protected:
    private:
        bool m_has_path;
        CT_Path* m_path;
        bool m_has_formulas;
        CT_Formulas* m_formulas;
        bool m_has_handles;
        CT_Handles* m_handles;
        bool m_has_fill;
        CT_Fill* m_fill;
        bool m_has_stroke;
        CT_Stroke* m_stroke;
        bool m_has_shadow;
        CT_Shadow* m_shadow;
        bool m_has_textbox;
        CT_Textbox* m_textbox;
        bool m_has_textpath;
        CT_TextPath* m_textpath;
        bool m_has_imagedata;
        CT_ImageData* m_imagedata;
        bool m_has_o_skew;
        ns_o::CT_Skew* m_o_skew;
        bool m_has_o_extrusion;
        ns_o::CT_Extrusion* m_o_extrusion;
        bool m_has_o_callout;
        ns_o::CT_Callout* m_o_callout;
        bool m_has_o_lock;
        ns_o::CT_Lock* m_o_lock;
        bool m_has_o_clippath;
        ns_o::CT_ClipPath* m_o_clippath;
        bool m_has_o_signatureline;
        ns_o::CT_SignatureLine* m_o_signatureline;
        bool m_has_w10_wrap;
        ns_w10::CT_Wrap* m_w10_wrap;
        bool m_has_w10_anchorlock;
        ns_w10::CT_AnchorLock* m_w10_anchorlock;
        bool m_has_w10_bordertop;
        ns_w10::CT_Border* m_w10_bordertop;
        bool m_has_w10_borderbottom;
        ns_w10::CT_Border* m_w10_borderbottom;
        bool m_has_w10_borderleft;
        ns_w10::CT_Border* m_w10_borderleft;
        bool m_has_w10_borderright;
        ns_w10::CT_Border* m_w10_borderright;
        bool m_has_x_ClientData;
        ns_x::CT_ClientData* m_x_ClientData;
        bool m_has_pvml_textdata;
        ns_pvml::CT_Rel* m_pvml_textdata;
    };
    vector<ChildGroup_1*> m_childGroupList_1;
    bool m_has_o_complex;
    ns_o::CT_Complex* m_o_complex;
    static CT_Shapetype* default_instance_;
    bool m_has_adj_attr;
    XSD::string_ m_adj_attr;
    bool m_has_path_attr;
    XSD::string_ m_path_attr;
    bool m_has_o_master_attr;
    XSD::string_ m_o_master_attr;
};

class CT_Group: public XSD::ComplexType
{
public:
    CT_Group();
    ~CT_Group();
    CT_Path* add_path();
    CT_Formulas* add_formulas();
    CT_Handles* add_handles();
    CT_Fill* add_fill();
    CT_Stroke* add_stroke();
    CT_Shadow* add_shadow();
    CT_Textbox* add_textbox();
    CT_TextPath* add_textpath();
    CT_ImageData* add_imagedata();
    ns_o::CT_Skew* add_o_skew();
    ns_o::CT_Extrusion* add_o_extrusion();
    ns_o::CT_Callout* add_o_callout();
    ns_o::CT_Lock* add_o_lock();
    ns_o::CT_ClipPath* add_o_clippath();
    ns_o::CT_SignatureLine* add_o_signatureline();
    ns_w10::CT_Wrap* add_w10_wrap();
    ns_w10::CT_AnchorLock* add_w10_anchorlock();
    ns_w10::CT_Border* add_w10_bordertop();
    ns_w10::CT_Border* add_w10_borderbottom();
    ns_w10::CT_Border* add_w10_borderleft();
    ns_w10::CT_Border* add_w10_borderright();
    ns_x::CT_ClientData* add_x_ClientData();
    ns_pvml::CT_Rel* add_pvml_textdata();
    CT_Group* add_group();
    CT_Shape* add_shape();
    CT_Shapetype* add_shapetype();
    CT_Arc* add_arc();
    CT_Curve* add_curve();
    CT_Image* add_image();
    CT_Line* add_line();
    CT_Oval* add_oval();
    CT_PolyLine* add_polyline();
    CT_Rect* add_rect();
    CT_RoundRect* add_roundrect();
    ns_o::CT_Diagram* add_o_diagram();
    void clear();
    void toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const;
    static const CT_Group& default_instance();
    bool has_filled_attr() const;
    void set_filled_attr(const ns_s::ST_TrueFalse& _filled_attr);
    const ns_s::ST_TrueFalse& get_filled_attr() const;
    bool has_fillcolor_attr() const;
    void set_fillcolor_attr(const ns_s::ST_ColorType& _fillcolor_attr);
    const ns_s::ST_ColorType& get_fillcolor_attr() const;
    bool has_editas_attr() const;
    void set_editas_attr(const ST_EditAs& _editas_attr);
    const ST_EditAs& get_editas_attr() const;
    bool has_o_tableproperties_attr() const;
    void set_o_tableproperties_attr(const XSD::string_& _o_tableproperties_attr);
    const XSD::string_& get_o_tableproperties_attr() const;
    bool has_o_tablelimits_attr() const;
    void set_o_tablelimits_attr(const XSD::string_& _o_tablelimits_attr);
    const XSD::string_& get_o_tablelimits_attr() const;
protected:
private:
    class ChildGroup_1
    {
    public:
        ChildGroup_1();
        bool has_path() const;
        CT_Path* mutable_path();
        const CT_Path& get_path() const;
        bool has_formulas() const;
        CT_Formulas* mutable_formulas();
        const CT_Formulas& get_formulas() const;
        bool has_handles() const;
        CT_Handles* mutable_handles();
        const CT_Handles& get_handles() const;
        bool has_fill() const;
        CT_Fill* mutable_fill();
        const CT_Fill& get_fill() const;
        bool has_stroke() const;
        CT_Stroke* mutable_stroke();
        const CT_Stroke& get_stroke() const;
        bool has_shadow() const;
        CT_Shadow* mutable_shadow();
        const CT_Shadow& get_shadow() const;
        bool has_textbox() const;
        CT_Textbox* mutable_textbox();
        const CT_Textbox& get_textbox() const;
        bool has_textpath() const;
        CT_TextPath* mutable_textpath();
        const CT_TextPath& get_textpath() const;
        bool has_imagedata() const;
        CT_ImageData* mutable_imagedata();
        const CT_ImageData& get_imagedata() const;
        bool has_o_skew() const;
        ns_o::CT_Skew* mutable_o_skew();
        const ns_o::CT_Skew& get_o_skew() const;
        bool has_o_extrusion() const;
        ns_o::CT_Extrusion* mutable_o_extrusion();
        const ns_o::CT_Extrusion& get_o_extrusion() const;
        bool has_o_callout() const;
        ns_o::CT_Callout* mutable_o_callout();
        const ns_o::CT_Callout& get_o_callout() const;
        bool has_o_lock() const;
        ns_o::CT_Lock* mutable_o_lock();
        const ns_o::CT_Lock& get_o_lock() const;
        bool has_o_clippath() const;
        ns_o::CT_ClipPath* mutable_o_clippath();
        const ns_o::CT_ClipPath& get_o_clippath() const;
        bool has_o_signatureline() const;
        ns_o::CT_SignatureLine* mutable_o_signatureline();
        const ns_o::CT_SignatureLine& get_o_signatureline() const;
        bool has_w10_wrap() const;
        ns_w10::CT_Wrap* mutable_w10_wrap();
        const ns_w10::CT_Wrap& get_w10_wrap() const;
        bool has_w10_anchorlock() const;
        ns_w10::CT_AnchorLock* mutable_w10_anchorlock();
        const ns_w10::CT_AnchorLock& get_w10_anchorlock() const;
        bool has_w10_bordertop() const;
        ns_w10::CT_Border* mutable_w10_bordertop();
        const ns_w10::CT_Border& get_w10_bordertop() const;
        bool has_w10_borderbottom() const;
        ns_w10::CT_Border* mutable_w10_borderbottom();
        const ns_w10::CT_Border& get_w10_borderbottom() const;
        bool has_w10_borderleft() const;
        ns_w10::CT_Border* mutable_w10_borderleft();
        const ns_w10::CT_Border& get_w10_borderleft() const;
        bool has_w10_borderright() const;
        ns_w10::CT_Border* mutable_w10_borderright();
        const ns_w10::CT_Border& get_w10_borderright() const;
        bool has_x_ClientData() const;
        ns_x::CT_ClientData* mutable_x_ClientData();
        const ns_x::CT_ClientData& get_x_ClientData() const;
        bool has_pvml_textdata() const;
        ns_pvml::CT_Rel* mutable_pvml_textdata();
        const ns_pvml::CT_Rel& get_pvml_textdata() const;
        bool has_group() const;
        CT_Group* mutable_group();
        const CT_Group& get_group() const;
        bool has_shape() const;
        CT_Shape* mutable_shape();
        const CT_Shape& get_shape() const;
        bool has_shapetype() const;
        CT_Shapetype* mutable_shapetype();
        const CT_Shapetype& get_shapetype() const;
        bool has_arc() const;
        CT_Arc* mutable_arc();
        const CT_Arc& get_arc() const;
        bool has_curve() const;
        CT_Curve* mutable_curve();
        const CT_Curve& get_curve() const;
        bool has_image() const;
        CT_Image* mutable_image();
        const CT_Image& get_image() const;
        bool has_line() const;
        CT_Line* mutable_line();
        const CT_Line& get_line() const;
        bool has_oval() const;
        CT_Oval* mutable_oval();
        const CT_Oval& get_oval() const;
        bool has_polyline() const;
        CT_PolyLine* mutable_polyline();
        const CT_PolyLine& get_polyline() const;
        bool has_rect() const;
        CT_Rect* mutable_rect();
        const CT_Rect& get_rect() const;
        bool has_roundrect() const;
        CT_RoundRect* mutable_roundrect();
        const CT_RoundRect& get_roundrect() const;
        bool has_o_diagram() const;
        ns_o::CT_Diagram* mutable_o_diagram();
        const ns_o::CT_Diagram& get_o_diagram() const;
    protected:
    private:
        bool m_has_path;
        CT_Path* m_path;
        bool m_has_formulas;
        CT_Formulas* m_formulas;
        bool m_has_handles;
        CT_Handles* m_handles;
        bool m_has_fill;
        CT_Fill* m_fill;
        bool m_has_stroke;
        CT_Stroke* m_stroke;
        bool m_has_shadow;
        CT_Shadow* m_shadow;
        bool m_has_textbox;
        CT_Textbox* m_textbox;
        bool m_has_textpath;
        CT_TextPath* m_textpath;
        bool m_has_imagedata;
        CT_ImageData* m_imagedata;
        bool m_has_o_skew;
        ns_o::CT_Skew* m_o_skew;
        bool m_has_o_extrusion;
        ns_o::CT_Extrusion* m_o_extrusion;
        bool m_has_o_callout;
        ns_o::CT_Callout* m_o_callout;
        bool m_has_o_lock;
        ns_o::CT_Lock* m_o_lock;
        bool m_has_o_clippath;
        ns_o::CT_ClipPath* m_o_clippath;
        bool m_has_o_signatureline;
        ns_o::CT_SignatureLine* m_o_signatureline;
        bool m_has_w10_wrap;
        ns_w10::CT_Wrap* m_w10_wrap;
        bool m_has_w10_anchorlock;
        ns_w10::CT_AnchorLock* m_w10_anchorlock;
        bool m_has_w10_bordertop;
        ns_w10::CT_Border* m_w10_bordertop;
        bool m_has_w10_borderbottom;
        ns_w10::CT_Border* m_w10_borderbottom;
        bool m_has_w10_borderleft;
        ns_w10::CT_Border* m_w10_borderleft;
        bool m_has_w10_borderright;
        ns_w10::CT_Border* m_w10_borderright;
        bool m_has_x_ClientData;
        ns_x::CT_ClientData* m_x_ClientData;
        bool m_has_pvml_textdata;
        ns_pvml::CT_Rel* m_pvml_textdata;
        bool m_has_group;
        CT_Group* m_group;
        bool m_has_shape;
        CT_Shape* m_shape;
        bool m_has_shapetype;
        CT_Shapetype* m_shapetype;
        bool m_has_arc;
        CT_Arc* m_arc;
        bool m_has_curve;
        CT_Curve* m_curve;
        bool m_has_image;
        CT_Image* m_image;
        bool m_has_line;
        CT_Line* m_line;
        bool m_has_oval;
        CT_Oval* m_oval;
        bool m_has_polyline;
        CT_PolyLine* m_polyline;
        bool m_has_rect;
        CT_Rect* m_rect;
        bool m_has_roundrect;
        CT_RoundRect* m_roundrect;
        bool m_has_o_diagram;
        ns_o::CT_Diagram* m_o_diagram;
    };
    vector<ChildGroup_1*> m_childGroupList_1;
    static CT_Group* default_instance_;
    bool m_has_filled_attr;
    ns_s::ST_TrueFalse* m_filled_attr;
    bool m_has_fillcolor_attr;
    ns_s::ST_ColorType* m_fillcolor_attr;
    bool m_has_editas_attr;
    ST_EditAs* m_editas_attr;
    bool m_has_o_tableproperties_attr;
    XSD::string_ m_o_tableproperties_attr;
    bool m_has_o_tablelimits_attr;
    XSD::string_ m_o_tablelimits_attr;
};

class CT_Background: public XSD::ComplexType
{
public:
    CT_Background();
    ~CT_Background();
    bool has_fill() const;
    CT_Fill* mutable_fill();
    const CT_Fill& get_fill() const;
    void clear();
    void toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const;
    static const CT_Background& default_instance();
    bool has_id_attr() const;
    void set_id_attr(const XSD::string_& _id_attr);
    const XSD::string_& get_id_attr() const;
    bool has_filled_attr() const;
    void set_filled_attr(const ns_s::ST_TrueFalse& _filled_attr);
    const ns_s::ST_TrueFalse& get_filled_attr() const;
    bool has_fillcolor_attr() const;
    void set_fillcolor_attr(const ns_s::ST_ColorType& _fillcolor_attr);
    const ns_s::ST_ColorType& get_fillcolor_attr() const;
    bool has_o_bwmode_attr() const;
    void set_o_bwmode_attr(const ns_o::ST_BWMode& _o_bwmode_attr);
    const ns_o::ST_BWMode& get_o_bwmode_attr() const;
    bool has_o_bwpure_attr() const;
    void set_o_bwpure_attr(const ns_o::ST_BWMode& _o_bwpure_attr);
    const ns_o::ST_BWMode& get_o_bwpure_attr() const;
    bool has_o_bwnormal_attr() const;
    void set_o_bwnormal_attr(const ns_o::ST_BWMode& _o_bwnormal_attr);
    const ns_o::ST_BWMode& get_o_bwnormal_attr() const;
    bool has_o_targetscreensize_attr() const;
    void set_o_targetscreensize_attr(const ns_o::ST_ScreenSize& _o_targetscreensize_attr);
    const ns_o::ST_ScreenSize& get_o_targetscreensize_attr() const;
protected:
private:
    bool m_has_fill;
    CT_Fill* m_fill;
    static CT_Background* default_instance_;
    bool m_has_id_attr;
    XSD::string_ m_id_attr;
    bool m_has_filled_attr;
    ns_s::ST_TrueFalse* m_filled_attr;
    bool m_has_fillcolor_attr;
    ns_s::ST_ColorType* m_fillcolor_attr;
    bool m_has_o_bwmode_attr;
    ns_o::ST_BWMode* m_o_bwmode_attr;
    bool m_has_o_bwpure_attr;
    ns_o::ST_BWMode* m_o_bwpure_attr;
    bool m_has_o_bwnormal_attr;
    ns_o::ST_BWMode* m_o_bwnormal_attr;
    bool m_has_o_targetscreensize_attr;
    ns_o::ST_ScreenSize* m_o_targetscreensize_attr;
};

class CT_Fill: public XSD::ComplexType
{
public:
    CT_Fill();
    ~CT_Fill();
    bool has_o_fill() const;
    ns_o::CT_Fill* mutable_o_fill();
    const ns_o::CT_Fill& get_o_fill() const;
    void clear();
    void toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const;
    static const CT_Fill& default_instance();
    bool has_id_attr() const;
    void set_id_attr(const XSD::string_& _id_attr);
    const XSD::string_& get_id_attr() const;
    bool has_type_attr() const;
    void set_type_attr(const ST_FillType& _type_attr);
    const ST_FillType& get_type_attr() const;
    bool has_on_attr() const;
    void set_on_attr(const ns_s::ST_TrueFalse& _on_attr);
    const ns_s::ST_TrueFalse& get_on_attr() const;
    bool has_color_attr() const;
    void set_color_attr(const ns_s::ST_ColorType& _color_attr);
    const ns_s::ST_ColorType& get_color_attr() const;
    bool has_opacity_attr() const;
    void set_opacity_attr(const XSD::string_& _opacity_attr);
    const XSD::string_& get_opacity_attr() const;
    bool has_color2_attr() const;
    void set_color2_attr(const ns_s::ST_ColorType& _color2_attr);
    const ns_s::ST_ColorType& get_color2_attr() const;
    bool has_src_attr() const;
    void set_src_attr(const XSD::string_& _src_attr);
    const XSD::string_& get_src_attr() const;
    bool has_o_href_attr() const;
    void set_o_href_attr(const XSD::string_& _o_href_attr);
    const XSD::string_& get_o_href_attr() const;
    bool has_o_althref_attr() const;
    void set_o_althref_attr(const XSD::string_& _o_althref_attr);
    const XSD::string_& get_o_althref_attr() const;
    bool has_size_attr() const;
    void set_size_attr(const XSD::string_& _size_attr);
    const XSD::string_& get_size_attr() const;
    bool has_origin_attr() const;
    void set_origin_attr(const XSD::string_& _origin_attr);
    const XSD::string_& get_origin_attr() const;
    bool has_position_attr() const;
    void set_position_attr(const XSD::string_& _position_attr);
    const XSD::string_& get_position_attr() const;
    bool has_aspect_attr() const;
    void set_aspect_attr(const ST_ImageAspect& _aspect_attr);
    const ST_ImageAspect& get_aspect_attr() const;
    bool has_colors_attr() const;
    void set_colors_attr(const XSD::string_& _colors_attr);
    const XSD::string_& get_colors_attr() const;
    bool has_angle_attr() const;
    void set_angle_attr(const XSD::decimal_& _angle_attr);
    const XSD::decimal_& get_angle_attr() const;
    bool has_alignshape_attr() const;
    void set_alignshape_attr(const ns_s::ST_TrueFalse& _alignshape_attr);
    const ns_s::ST_TrueFalse& get_alignshape_attr() const;
    bool has_focus_attr() const;
    void set_focus_attr(const XSD::string_& _focus_attr);
    const XSD::string_& get_focus_attr() const;
    bool has_focussize_attr() const;
    void set_focussize_attr(const XSD::string_& _focussize_attr);
    const XSD::string_& get_focussize_attr() const;
    bool has_focusposition_attr() const;
    void set_focusposition_attr(const XSD::string_& _focusposition_attr);
    const XSD::string_& get_focusposition_attr() const;
    bool has_method_attr() const;
    void set_method_attr(const ST_FillMethod& _method_attr);
    const ST_FillMethod& get_method_attr() const;
    bool has_o_detectmouseclick_attr() const;
    void set_o_detectmouseclick_attr(const ns_s::ST_TrueFalse& _o_detectmouseclick_attr);
    const ns_s::ST_TrueFalse& get_o_detectmouseclick_attr() const;
    bool has_o_title_attr() const;
    void set_o_title_attr(const XSD::string_& _o_title_attr);
    const XSD::string_& get_o_title_attr() const;
    bool has_o_opacity2_attr() const;
    void set_o_opacity2_attr(const XSD::string_& _o_opacity2_attr);
    const XSD::string_& get_o_opacity2_attr() const;
    bool has_recolor_attr() const;
    void set_recolor_attr(const ns_s::ST_TrueFalse& _recolor_attr);
    const ns_s::ST_TrueFalse& get_recolor_attr() const;
    bool has_rotate_attr() const;
    void set_rotate_attr(const ns_s::ST_TrueFalse& _rotate_attr);
    const ns_s::ST_TrueFalse& get_rotate_attr() const;
    bool has_r_id_attr() const;
    void set_r_id_attr(const ns_r::ST_RelationshipId& _r_id_attr);
    const ns_r::ST_RelationshipId& get_r_id_attr() const;
    bool has_o_relid_attr() const;
    void set_o_relid_attr(const ns_r::ST_RelationshipId& _o_relid_attr);
    const ns_r::ST_RelationshipId& get_o_relid_attr() const;
protected:
private:
    bool m_has_o_fill;
    ns_o::CT_Fill* m_o_fill;
    static CT_Fill* default_instance_;
    bool m_has_id_attr;
    XSD::string_ m_id_attr;
    bool m_has_type_attr;
    ST_FillType* m_type_attr;
    bool m_has_on_attr;
    ns_s::ST_TrueFalse* m_on_attr;
    bool m_has_color_attr;
    ns_s::ST_ColorType* m_color_attr;
    bool m_has_opacity_attr;
    XSD::string_ m_opacity_attr;
    bool m_has_color2_attr;
    ns_s::ST_ColorType* m_color2_attr;
    bool m_has_src_attr;
    XSD::string_ m_src_attr;
    bool m_has_o_href_attr;
    XSD::string_ m_o_href_attr;
    bool m_has_o_althref_attr;
    XSD::string_ m_o_althref_attr;
    bool m_has_size_attr;
    XSD::string_ m_size_attr;
    bool m_has_origin_attr;
    XSD::string_ m_origin_attr;
    bool m_has_position_attr;
    XSD::string_ m_position_attr;
    bool m_has_aspect_attr;
    ST_ImageAspect* m_aspect_attr;
    bool m_has_colors_attr;
    XSD::string_ m_colors_attr;
    bool m_has_angle_attr;
    XSD::decimal_ m_angle_attr;
    bool m_has_alignshape_attr;
    ns_s::ST_TrueFalse* m_alignshape_attr;
    bool m_has_focus_attr;
    XSD::string_ m_focus_attr;
    bool m_has_focussize_attr;
    XSD::string_ m_focussize_attr;
    bool m_has_focusposition_attr;
    XSD::string_ m_focusposition_attr;
    bool m_has_method_attr;
    ST_FillMethod* m_method_attr;
    bool m_has_o_detectmouseclick_attr;
    ns_s::ST_TrueFalse* m_o_detectmouseclick_attr;
    bool m_has_o_title_attr;
    XSD::string_ m_o_title_attr;
    bool m_has_o_opacity2_attr;
    XSD::string_ m_o_opacity2_attr;
    bool m_has_recolor_attr;
    ns_s::ST_TrueFalse* m_recolor_attr;
    bool m_has_rotate_attr;
    ns_s::ST_TrueFalse* m_rotate_attr;
    bool m_has_r_id_attr;
    ns_r::ST_RelationshipId* m_r_id_attr;
    bool m_has_o_relid_attr;
    ns_r::ST_RelationshipId* m_o_relid_attr;
};

class CT_Formulas: public XSD::ComplexType
{
public:
    CT_Formulas();
    ~CT_Formulas();
    CT_F* add_f();
    void clear();
    void toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const;
    static const CT_Formulas& default_instance();
protected:
private:
    class ChildGroup_1
    {
    public:
        ChildGroup_1();
        bool has_f() const;
        CT_F* mutable_f();
        const CT_F& get_f() const;
    protected:
    private:
        bool m_has_f;
        CT_F* m_f;
    };
    vector<ChildGroup_1*> m_childGroupList_1;
    static CT_Formulas* default_instance_;
};

class CT_F: public XSD::ComplexType
{
public:
    CT_F();
    ~CT_F();
    void clear();
    void toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const;
    static const CT_F& default_instance();
    bool has_eqn_attr() const;
    void set_eqn_attr(const XSD::string_& _eqn_attr);
    const XSD::string_& get_eqn_attr() const;
protected:
private:
    static CT_F* default_instance_;
    bool m_has_eqn_attr;
    XSD::string_ m_eqn_attr;
};

class CT_Handles: public XSD::ComplexType
{
public:
    CT_Handles();
    ~CT_Handles();
    CT_H* add_h();
    void clear();
    void toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const;
    static const CT_Handles& default_instance();
protected:
private:
    class ChildGroup_1
    {
    public:
        ChildGroup_1();
        bool has_h() const;
        CT_H* mutable_h();
        const CT_H& get_h() const;
    protected:
    private:
        bool m_has_h;
        CT_H* m_h;
    };
    vector<ChildGroup_1*> m_childGroupList_1;
    static CT_Handles* default_instance_;
};

class CT_H: public XSD::ComplexType
{
public:
    CT_H();
    ~CT_H();
    void clear();
    void toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const;
    static const CT_H& default_instance();
    bool has_position_attr() const;
    void set_position_attr(const XSD::string_& _position_attr);
    const XSD::string_& get_position_attr() const;
    bool has_polar_attr() const;
    void set_polar_attr(const XSD::string_& _polar_attr);
    const XSD::string_& get_polar_attr() const;
    bool has_map_attr() const;
    void set_map_attr(const XSD::string_& _map_attr);
    const XSD::string_& get_map_attr() const;
    bool has_invx_attr() const;
    void set_invx_attr(const ns_s::ST_TrueFalse& _invx_attr);
    const ns_s::ST_TrueFalse& get_invx_attr() const;
    bool has_invy_attr() const;
    void set_invy_attr(const ns_s::ST_TrueFalse& _invy_attr);
    const ns_s::ST_TrueFalse& get_invy_attr() const;
    bool has_switch_attr() const;
    void set_switch_attr(const ns_s::ST_TrueFalseBlank& _switch_attr);
    const ns_s::ST_TrueFalseBlank& get_switch_attr() const;
    bool has_xrange_attr() const;
    void set_xrange_attr(const XSD::string_& _xrange_attr);
    const XSD::string_& get_xrange_attr() const;
    bool has_yrange_attr() const;
    void set_yrange_attr(const XSD::string_& _yrange_attr);
    const XSD::string_& get_yrange_attr() const;
    bool has_radiusrange_attr() const;
    void set_radiusrange_attr(const XSD::string_& _radiusrange_attr);
    const XSD::string_& get_radiusrange_attr() const;
protected:
private:
    static CT_H* default_instance_;
    bool m_has_position_attr;
    XSD::string_ m_position_attr;
    bool m_has_polar_attr;
    XSD::string_ m_polar_attr;
    bool m_has_map_attr;
    XSD::string_ m_map_attr;
    bool m_has_invx_attr;
    ns_s::ST_TrueFalse* m_invx_attr;
    bool m_has_invy_attr;
    ns_s::ST_TrueFalse* m_invy_attr;
    bool m_has_switch_attr;
    ns_s::ST_TrueFalseBlank* m_switch_attr;
    bool m_has_xrange_attr;
    XSD::string_ m_xrange_attr;
    bool m_has_yrange_attr;
    XSD::string_ m_yrange_attr;
    bool m_has_radiusrange_attr;
    XSD::string_ m_radiusrange_attr;
};

class CT_ImageData: public XSD::ComplexType
{
public:
    CT_ImageData();
    ~CT_ImageData();
    void clear();
    void toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const;
    static const CT_ImageData& default_instance();
    bool has_id_attr() const;
    void set_id_attr(const XSD::string_& _id_attr);
    const XSD::string_& get_id_attr() const;
    bool has_src_attr() const;
    void set_src_attr(const XSD::string_& _src_attr);
    const XSD::string_& get_src_attr() const;
    bool has_cropleft_attr() const;
    void set_cropleft_attr(const XSD::string_& _cropleft_attr);
    const XSD::string_& get_cropleft_attr() const;
    bool has_croptop_attr() const;
    void set_croptop_attr(const XSD::string_& _croptop_attr);
    const XSD::string_& get_croptop_attr() const;
    bool has_cropright_attr() const;
    void set_cropright_attr(const XSD::string_& _cropright_attr);
    const XSD::string_& get_cropright_attr() const;
    bool has_cropbottom_attr() const;
    void set_cropbottom_attr(const XSD::string_& _cropbottom_attr);
    const XSD::string_& get_cropbottom_attr() const;
    bool has_gain_attr() const;
    void set_gain_attr(const XSD::string_& _gain_attr);
    const XSD::string_& get_gain_attr() const;
    bool has_blacklevel_attr() const;
    void set_blacklevel_attr(const XSD::string_& _blacklevel_attr);
    const XSD::string_& get_blacklevel_attr() const;
    bool has_gamma_attr() const;
    void set_gamma_attr(const XSD::string_& _gamma_attr);
    const XSD::string_& get_gamma_attr() const;
    bool has_grayscale_attr() const;
    void set_grayscale_attr(const ns_s::ST_TrueFalse& _grayscale_attr);
    const ns_s::ST_TrueFalse& get_grayscale_attr() const;
    bool has_bilevel_attr() const;
    void set_bilevel_attr(const ns_s::ST_TrueFalse& _bilevel_attr);
    const ns_s::ST_TrueFalse& get_bilevel_attr() const;
    bool has_chromakey_attr() const;
    void set_chromakey_attr(const ns_s::ST_ColorType& _chromakey_attr);
    const ns_s::ST_ColorType& get_chromakey_attr() const;
    bool has_embosscolor_attr() const;
    void set_embosscolor_attr(const ns_s::ST_ColorType& _embosscolor_attr);
    const ns_s::ST_ColorType& get_embosscolor_attr() const;
    bool has_recolortarget_attr() const;
    void set_recolortarget_attr(const ns_s::ST_ColorType& _recolortarget_attr);
    const ns_s::ST_ColorType& get_recolortarget_attr() const;
    bool has_o_href_attr() const;
    void set_o_href_attr(const XSD::string_& _o_href_attr);
    const XSD::string_& get_o_href_attr() const;
    bool has_o_althref_attr() const;
    void set_o_althref_attr(const XSD::string_& _o_althref_attr);
    const XSD::string_& get_o_althref_attr() const;
    bool has_o_title_attr() const;
    void set_o_title_attr(const XSD::string_& _o_title_attr);
    const XSD::string_& get_o_title_attr() const;
    bool has_o_oleid_attr() const;
    void set_o_oleid_attr(const XSD::float_& _o_oleid_attr);
    const XSD::float_& get_o_oleid_attr() const;
    bool has_o_detectmouseclick_attr() const;
    void set_o_detectmouseclick_attr(const ns_s::ST_TrueFalse& _o_detectmouseclick_attr);
    const ns_s::ST_TrueFalse& get_o_detectmouseclick_attr() const;
    bool has_o_movie_attr() const;
    void set_o_movie_attr(const XSD::float_& _o_movie_attr);
    const XSD::float_& get_o_movie_attr() const;
    bool has_o_relid_attr() const;
    void set_o_relid_attr(const ns_r::ST_RelationshipId& _o_relid_attr);
    const ns_r::ST_RelationshipId& get_o_relid_attr() const;
    bool has_r_id_attr() const;
    void set_r_id_attr(const ns_r::ST_RelationshipId& _r_id_attr);
    const ns_r::ST_RelationshipId& get_r_id_attr() const;
    bool has_r_pict_attr() const;
    void set_r_pict_attr(const ns_r::ST_RelationshipId& _r_pict_attr);
    const ns_r::ST_RelationshipId& get_r_pict_attr() const;
    bool has_r_href_attr() const;
    void set_r_href_attr(const ns_r::ST_RelationshipId& _r_href_attr);
    const ns_r::ST_RelationshipId& get_r_href_attr() const;
protected:
private:
    static CT_ImageData* default_instance_;
    bool m_has_id_attr;
    XSD::string_ m_id_attr;
    bool m_has_src_attr;
    XSD::string_ m_src_attr;
    bool m_has_cropleft_attr;
    XSD::string_ m_cropleft_attr;
    bool m_has_croptop_attr;
    XSD::string_ m_croptop_attr;
    bool m_has_cropright_attr;
    XSD::string_ m_cropright_attr;
    bool m_has_cropbottom_attr;
    XSD::string_ m_cropbottom_attr;
    bool m_has_gain_attr;
    XSD::string_ m_gain_attr;
    bool m_has_blacklevel_attr;
    XSD::string_ m_blacklevel_attr;
    bool m_has_gamma_attr;
    XSD::string_ m_gamma_attr;
    bool m_has_grayscale_attr;
    ns_s::ST_TrueFalse* m_grayscale_attr;
    bool m_has_bilevel_attr;
    ns_s::ST_TrueFalse* m_bilevel_attr;
    bool m_has_chromakey_attr;
    ns_s::ST_ColorType* m_chromakey_attr;
    bool m_has_embosscolor_attr;
    ns_s::ST_ColorType* m_embosscolor_attr;
    bool m_has_recolortarget_attr;
    ns_s::ST_ColorType* m_recolortarget_attr;
    bool m_has_o_href_attr;
    XSD::string_ m_o_href_attr;
    bool m_has_o_althref_attr;
    XSD::string_ m_o_althref_attr;
    bool m_has_o_title_attr;
    XSD::string_ m_o_title_attr;
    bool m_has_o_oleid_attr;
    XSD::float_ m_o_oleid_attr;
    bool m_has_o_detectmouseclick_attr;
    ns_s::ST_TrueFalse* m_o_detectmouseclick_attr;
    bool m_has_o_movie_attr;
    XSD::float_ m_o_movie_attr;
    bool m_has_o_relid_attr;
    ns_r::ST_RelationshipId* m_o_relid_attr;
    bool m_has_r_id_attr;
    ns_r::ST_RelationshipId* m_r_id_attr;
    bool m_has_r_pict_attr;
    ns_r::ST_RelationshipId* m_r_pict_attr;
    bool m_has_r_href_attr;
    ns_r::ST_RelationshipId* m_r_href_attr;
};

class CT_Path: public XSD::ComplexType
{
public:
    CT_Path();
    ~CT_Path();
    void clear();
    void toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const;
    static const CT_Path& default_instance();
    bool has_id_attr() const;
    void set_id_attr(const XSD::string_& _id_attr);
    const XSD::string_& get_id_attr() const;
    bool has_v_attr() const;
    void set_v_attr(const XSD::string_& _v_attr);
    const XSD::string_& get_v_attr() const;
    bool has_limo_attr() const;
    void set_limo_attr(const XSD::string_& _limo_attr);
    const XSD::string_& get_limo_attr() const;
    bool has_textboxrect_attr() const;
    void set_textboxrect_attr(const XSD::string_& _textboxrect_attr);
    const XSD::string_& get_textboxrect_attr() const;
    bool has_fillok_attr() const;
    void set_fillok_attr(const ns_s::ST_TrueFalse& _fillok_attr);
    const ns_s::ST_TrueFalse& get_fillok_attr() const;
    bool has_strokeok_attr() const;
    void set_strokeok_attr(const ns_s::ST_TrueFalse& _strokeok_attr);
    const ns_s::ST_TrueFalse& get_strokeok_attr() const;
    bool has_shadowok_attr() const;
    void set_shadowok_attr(const ns_s::ST_TrueFalse& _shadowok_attr);
    const ns_s::ST_TrueFalse& get_shadowok_attr() const;
    bool has_arrowok_attr() const;
    void set_arrowok_attr(const ns_s::ST_TrueFalse& _arrowok_attr);
    const ns_s::ST_TrueFalse& get_arrowok_attr() const;
    bool has_gradientshapeok_attr() const;
    void set_gradientshapeok_attr(const ns_s::ST_TrueFalse& _gradientshapeok_attr);
    const ns_s::ST_TrueFalse& get_gradientshapeok_attr() const;
    bool has_textpathok_attr() const;
    void set_textpathok_attr(const ns_s::ST_TrueFalse& _textpathok_attr);
    const ns_s::ST_TrueFalse& get_textpathok_attr() const;
    bool has_insetpenok_attr() const;
    void set_insetpenok_attr(const ns_s::ST_TrueFalse& _insetpenok_attr);
    const ns_s::ST_TrueFalse& get_insetpenok_attr() const;
    bool has_o_connecttype_attr() const;
    void set_o_connecttype_attr(const ns_o::ST_ConnectType& _o_connecttype_attr);
    const ns_o::ST_ConnectType& get_o_connecttype_attr() const;
    bool has_o_connectlocs_attr() const;
    void set_o_connectlocs_attr(const XSD::string_& _o_connectlocs_attr);
    const XSD::string_& get_o_connectlocs_attr() const;
    bool has_o_connectangles_attr() const;
    void set_o_connectangles_attr(const XSD::string_& _o_connectangles_attr);
    const XSD::string_& get_o_connectangles_attr() const;
    bool has_o_extrusionok_attr() const;
    void set_o_extrusionok_attr(const ns_s::ST_TrueFalse& _o_extrusionok_attr);
    const ns_s::ST_TrueFalse& get_o_extrusionok_attr() const;
protected:
private:
    static CT_Path* default_instance_;
    bool m_has_id_attr;
    XSD::string_ m_id_attr;
    bool m_has_v_attr;
    XSD::string_ m_v_attr;
    bool m_has_limo_attr;
    XSD::string_ m_limo_attr;
    bool m_has_textboxrect_attr;
    XSD::string_ m_textboxrect_attr;
    bool m_has_fillok_attr;
    ns_s::ST_TrueFalse* m_fillok_attr;
    bool m_has_strokeok_attr;
    ns_s::ST_TrueFalse* m_strokeok_attr;
    bool m_has_shadowok_attr;
    ns_s::ST_TrueFalse* m_shadowok_attr;
    bool m_has_arrowok_attr;
    ns_s::ST_TrueFalse* m_arrowok_attr;
    bool m_has_gradientshapeok_attr;
    ns_s::ST_TrueFalse* m_gradientshapeok_attr;
    bool m_has_textpathok_attr;
    ns_s::ST_TrueFalse* m_textpathok_attr;
    bool m_has_insetpenok_attr;
    ns_s::ST_TrueFalse* m_insetpenok_attr;
    bool m_has_o_connecttype_attr;
    ns_o::ST_ConnectType* m_o_connecttype_attr;
    bool m_has_o_connectlocs_attr;
    XSD::string_ m_o_connectlocs_attr;
    bool m_has_o_connectangles_attr;
    XSD::string_ m_o_connectangles_attr;
    bool m_has_o_extrusionok_attr;
    ns_s::ST_TrueFalse* m_o_extrusionok_attr;
};

class CT_Shadow: public XSD::ComplexType
{
public:
    CT_Shadow();
    ~CT_Shadow();
    void clear();
    void toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const;
    static const CT_Shadow& default_instance();
    bool has_id_attr() const;
    void set_id_attr(const XSD::string_& _id_attr);
    const XSD::string_& get_id_attr() const;
    bool has_on_attr() const;
    void set_on_attr(const ns_s::ST_TrueFalse& _on_attr);
    const ns_s::ST_TrueFalse& get_on_attr() const;
    bool has_type_attr() const;
    void set_type_attr(const ST_ShadowType& _type_attr);
    const ST_ShadowType& get_type_attr() const;
    bool has_obscured_attr() const;
    void set_obscured_attr(const ns_s::ST_TrueFalse& _obscured_attr);
    const ns_s::ST_TrueFalse& get_obscured_attr() const;
    bool has_color_attr() const;
    void set_color_attr(const ns_s::ST_ColorType& _color_attr);
    const ns_s::ST_ColorType& get_color_attr() const;
    bool has_opacity_attr() const;
    void set_opacity_attr(const XSD::string_& _opacity_attr);
    const XSD::string_& get_opacity_attr() const;
    bool has_offset_attr() const;
    void set_offset_attr(const XSD::string_& _offset_attr);
    const XSD::string_& get_offset_attr() const;
    bool has_color2_attr() const;
    void set_color2_attr(const ns_s::ST_ColorType& _color2_attr);
    const ns_s::ST_ColorType& get_color2_attr() const;
    bool has_offset2_attr() const;
    void set_offset2_attr(const XSD::string_& _offset2_attr);
    const XSD::string_& get_offset2_attr() const;
    bool has_origin_attr() const;
    void set_origin_attr(const XSD::string_& _origin_attr);
    const XSD::string_& get_origin_attr() const;
    bool has_matrix_attr() const;
    void set_matrix_attr(const XSD::string_& _matrix_attr);
    const XSD::string_& get_matrix_attr() const;
protected:
private:
    static CT_Shadow* default_instance_;
    bool m_has_id_attr;
    XSD::string_ m_id_attr;
    bool m_has_on_attr;
    ns_s::ST_TrueFalse* m_on_attr;
    bool m_has_type_attr;
    ST_ShadowType* m_type_attr;
    bool m_has_obscured_attr;
    ns_s::ST_TrueFalse* m_obscured_attr;
    bool m_has_color_attr;
    ns_s::ST_ColorType* m_color_attr;
    bool m_has_opacity_attr;
    XSD::string_ m_opacity_attr;
    bool m_has_offset_attr;
    XSD::string_ m_offset_attr;
    bool m_has_color2_attr;
    ns_s::ST_ColorType* m_color2_attr;
    bool m_has_offset2_attr;
    XSD::string_ m_offset2_attr;
    bool m_has_origin_attr;
    XSD::string_ m_origin_attr;
    bool m_has_matrix_attr;
    XSD::string_ m_matrix_attr;
};

class CT_Stroke: public XSD::ComplexType
{
public:
    CT_Stroke();
    ~CT_Stroke();
    bool has_o_left() const;
    ns_o::CT_StrokeChild* mutable_o_left();
    const ns_o::CT_StrokeChild& get_o_left() const;
    bool has_o_top() const;
    ns_o::CT_StrokeChild* mutable_o_top();
    const ns_o::CT_StrokeChild& get_o_top() const;
    bool has_o_right() const;
    ns_o::CT_StrokeChild* mutable_o_right();
    const ns_o::CT_StrokeChild& get_o_right() const;
    bool has_o_bottom() const;
    ns_o::CT_StrokeChild* mutable_o_bottom();
    const ns_o::CT_StrokeChild& get_o_bottom() const;
    bool has_o_column() const;
    ns_o::CT_StrokeChild* mutable_o_column();
    const ns_o::CT_StrokeChild& get_o_column() const;
    void clear();
    void toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const;
    static const CT_Stroke& default_instance();
    bool has_id_attr() const;
    void set_id_attr(const XSD::string_& _id_attr);
    const XSD::string_& get_id_attr() const;
    bool has_on_attr() const;
    void set_on_attr(const ns_s::ST_TrueFalse& _on_attr);
    const ns_s::ST_TrueFalse& get_on_attr() const;
    bool has_weight_attr() const;
    void set_weight_attr(const XSD::string_& _weight_attr);
    const XSD::string_& get_weight_attr() const;
    bool has_color_attr() const;
    void set_color_attr(const ns_s::ST_ColorType& _color_attr);
    const ns_s::ST_ColorType& get_color_attr() const;
    bool has_opacity_attr() const;
    void set_opacity_attr(const XSD::string_& _opacity_attr);
    const XSD::string_& get_opacity_attr() const;
    bool has_linestyle_attr() const;
    void set_linestyle_attr(const ST_StrokeLineStyle& _linestyle_attr);
    const ST_StrokeLineStyle& get_linestyle_attr() const;
    bool has_miterlimit_attr() const;
    void set_miterlimit_attr(const XSD::decimal_& _miterlimit_attr);
    const XSD::decimal_& get_miterlimit_attr() const;
    bool has_joinstyle_attr() const;
    void set_joinstyle_attr(const ST_StrokeJoinStyle& _joinstyle_attr);
    const ST_StrokeJoinStyle& get_joinstyle_attr() const;
    bool has_endcap_attr() const;
    void set_endcap_attr(const ST_StrokeEndCap& _endcap_attr);
    const ST_StrokeEndCap& get_endcap_attr() const;
    bool has_dashstyle_attr() const;
    void set_dashstyle_attr(const XSD::string_& _dashstyle_attr);
    const XSD::string_& get_dashstyle_attr() const;
    bool has_filltype_attr() const;
    void set_filltype_attr(const ST_FillType& _filltype_attr);
    const ST_FillType& get_filltype_attr() const;
    bool has_src_attr() const;
    void set_src_attr(const XSD::string_& _src_attr);
    const XSD::string_& get_src_attr() const;
    bool has_imageaspect_attr() const;
    void set_imageaspect_attr(const ST_ImageAspect& _imageaspect_attr);
    const ST_ImageAspect& get_imageaspect_attr() const;
    bool has_imagesize_attr() const;
    void set_imagesize_attr(const XSD::string_& _imagesize_attr);
    const XSD::string_& get_imagesize_attr() const;
    bool has_imagealignshape_attr() const;
    void set_imagealignshape_attr(const ns_s::ST_TrueFalse& _imagealignshape_attr);
    const ns_s::ST_TrueFalse& get_imagealignshape_attr() const;
    bool has_color2_attr() const;
    void set_color2_attr(const ns_s::ST_ColorType& _color2_attr);
    const ns_s::ST_ColorType& get_color2_attr() const;
    bool has_startarrow_attr() const;
    void set_startarrow_attr(const ST_StrokeArrowType& _startarrow_attr);
    const ST_StrokeArrowType& get_startarrow_attr() const;
    bool has_startarrowwidth_attr() const;
    void set_startarrowwidth_attr(const ST_StrokeArrowWidth& _startarrowwidth_attr);
    const ST_StrokeArrowWidth& get_startarrowwidth_attr() const;
    bool has_startarrowlength_attr() const;
    void set_startarrowlength_attr(const ST_StrokeArrowLength& _startarrowlength_attr);
    const ST_StrokeArrowLength& get_startarrowlength_attr() const;
    bool has_endarrow_attr() const;
    void set_endarrow_attr(const ST_StrokeArrowType& _endarrow_attr);
    const ST_StrokeArrowType& get_endarrow_attr() const;
    bool has_endarrowwidth_attr() const;
    void set_endarrowwidth_attr(const ST_StrokeArrowWidth& _endarrowwidth_attr);
    const ST_StrokeArrowWidth& get_endarrowwidth_attr() const;
    bool has_endarrowlength_attr() const;
    void set_endarrowlength_attr(const ST_StrokeArrowLength& _endarrowlength_attr);
    const ST_StrokeArrowLength& get_endarrowlength_attr() const;
    bool has_o_href_attr() const;
    void set_o_href_attr(const XSD::string_& _o_href_attr);
    const XSD::string_& get_o_href_attr() const;
    bool has_o_althref_attr() const;
    void set_o_althref_attr(const XSD::string_& _o_althref_attr);
    const XSD::string_& get_o_althref_attr() const;
    bool has_o_title_attr() const;
    void set_o_title_attr(const XSD::string_& _o_title_attr);
    const XSD::string_& get_o_title_attr() const;
    bool has_o_forcedash_attr() const;
    void set_o_forcedash_attr(const ns_s::ST_TrueFalse& _o_forcedash_attr);
    const ns_s::ST_TrueFalse& get_o_forcedash_attr() const;
    bool has_r_id_attr() const;
    void set_r_id_attr(const ns_r::ST_RelationshipId& _r_id_attr);
    const ns_r::ST_RelationshipId& get_r_id_attr() const;
    bool has_insetpen_attr() const;
    void set_insetpen_attr(const ns_s::ST_TrueFalse& _insetpen_attr);
    const ns_s::ST_TrueFalse& get_insetpen_attr() const;
    bool has_o_relid_attr() const;
    void set_o_relid_attr(const ns_r::ST_RelationshipId& _o_relid_attr);
    const ns_r::ST_RelationshipId& get_o_relid_attr() const;
protected:
private:
    bool m_has_o_left;
    ns_o::CT_StrokeChild* m_o_left;
    bool m_has_o_top;
    ns_o::CT_StrokeChild* m_o_top;
    bool m_has_o_right;
    ns_o::CT_StrokeChild* m_o_right;
    bool m_has_o_bottom;
    ns_o::CT_StrokeChild* m_o_bottom;
    bool m_has_o_column;
    ns_o::CT_StrokeChild* m_o_column;
    static CT_Stroke* default_instance_;
    bool m_has_id_attr;
    XSD::string_ m_id_attr;
    bool m_has_on_attr;
    ns_s::ST_TrueFalse* m_on_attr;
    bool m_has_weight_attr;
    XSD::string_ m_weight_attr;
    bool m_has_color_attr;
    ns_s::ST_ColorType* m_color_attr;
    bool m_has_opacity_attr;
    XSD::string_ m_opacity_attr;
    bool m_has_linestyle_attr;
    ST_StrokeLineStyle* m_linestyle_attr;
    bool m_has_miterlimit_attr;
    XSD::decimal_ m_miterlimit_attr;
    bool m_has_joinstyle_attr;
    ST_StrokeJoinStyle* m_joinstyle_attr;
    bool m_has_endcap_attr;
    ST_StrokeEndCap* m_endcap_attr;
    bool m_has_dashstyle_attr;
    XSD::string_ m_dashstyle_attr;
    bool m_has_filltype_attr;
    ST_FillType* m_filltype_attr;
    bool m_has_src_attr;
    XSD::string_ m_src_attr;
    bool m_has_imageaspect_attr;
    ST_ImageAspect* m_imageaspect_attr;
    bool m_has_imagesize_attr;
    XSD::string_ m_imagesize_attr;
    bool m_has_imagealignshape_attr;
    ns_s::ST_TrueFalse* m_imagealignshape_attr;
    bool m_has_color2_attr;
    ns_s::ST_ColorType* m_color2_attr;
    bool m_has_startarrow_attr;
    ST_StrokeArrowType* m_startarrow_attr;
    bool m_has_startarrowwidth_attr;
    ST_StrokeArrowWidth* m_startarrowwidth_attr;
    bool m_has_startarrowlength_attr;
    ST_StrokeArrowLength* m_startarrowlength_attr;
    bool m_has_endarrow_attr;
    ST_StrokeArrowType* m_endarrow_attr;
    bool m_has_endarrowwidth_attr;
    ST_StrokeArrowWidth* m_endarrowwidth_attr;
    bool m_has_endarrowlength_attr;
    ST_StrokeArrowLength* m_endarrowlength_attr;
    bool m_has_o_href_attr;
    XSD::string_ m_o_href_attr;
    bool m_has_o_althref_attr;
    XSD::string_ m_o_althref_attr;
    bool m_has_o_title_attr;
    XSD::string_ m_o_title_attr;
    bool m_has_o_forcedash_attr;
    ns_s::ST_TrueFalse* m_o_forcedash_attr;
    bool m_has_r_id_attr;
    ns_r::ST_RelationshipId* m_r_id_attr;
    bool m_has_insetpen_attr;
    ns_s::ST_TrueFalse* m_insetpen_attr;
    bool m_has_o_relid_attr;
    ns_r::ST_RelationshipId* m_o_relid_attr;
};

class CT_Textbox: public XSD::ComplexType
{
public:
    CT_Textbox();
    ~CT_Textbox();
    bool has_w_txbxContent() const;
    ns_w::CT_TxbxContent* mutable_w_txbxContent();
    const ns_w::CT_TxbxContent& get_w_txbxContent() const;
    void clear();
    void toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const;
    static const CT_Textbox& default_instance();
    bool has_id_attr() const;
    void set_id_attr(const XSD::string_& _id_attr);
    const XSD::string_& get_id_attr() const;
    bool has_style_attr() const;
    void set_style_attr(const XSD::string_& _style_attr);
    const XSD::string_& get_style_attr() const;
    bool has_inset_attr() const;
    void set_inset_attr(const XSD::string_& _inset_attr);
    const XSD::string_& get_inset_attr() const;
    bool has_o_singleclick_attr() const;
    void set_o_singleclick_attr(const ns_s::ST_TrueFalse& _o_singleclick_attr);
    const ns_s::ST_TrueFalse& get_o_singleclick_attr() const;
    bool has_o_insetmode_attr() const;
    void set_o_insetmode_attr(const ns_o::ST_InsetMode& _o_insetmode_attr);
    const ns_o::ST_InsetMode& get_o_insetmode_attr() const;
protected:
private:
    bool m_has_w_txbxContent;
    ns_w::CT_TxbxContent* m_w_txbxContent;
    bool m_has__any;
    XSD::Element* m__any;
    static CT_Textbox* default_instance_;
    bool m_has_id_attr;
    XSD::string_ m_id_attr;
    bool m_has_style_attr;
    XSD::string_ m_style_attr;
    bool m_has_inset_attr;
    XSD::string_ m_inset_attr;
    bool m_has_o_singleclick_attr;
    ns_s::ST_TrueFalse* m_o_singleclick_attr;
    bool m_has_o_insetmode_attr;
    ns_o::ST_InsetMode* m_o_insetmode_attr;
};

class CT_TextPath: public XSD::ComplexType
{
public:
    CT_TextPath();
    ~CT_TextPath();
    void clear();
    void toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const;
    static const CT_TextPath& default_instance();
    bool has_id_attr() const;
    void set_id_attr(const XSD::string_& _id_attr);
    const XSD::string_& get_id_attr() const;
    bool has_style_attr() const;
    void set_style_attr(const XSD::string_& _style_attr);
    const XSD::string_& get_style_attr() const;
    bool has_on_attr() const;
    void set_on_attr(const ns_s::ST_TrueFalse& _on_attr);
    const ns_s::ST_TrueFalse& get_on_attr() const;
    bool has_fitshape_attr() const;
    void set_fitshape_attr(const ns_s::ST_TrueFalse& _fitshape_attr);
    const ns_s::ST_TrueFalse& get_fitshape_attr() const;
    bool has_fitpath_attr() const;
    void set_fitpath_attr(const ns_s::ST_TrueFalse& _fitpath_attr);
    const ns_s::ST_TrueFalse& get_fitpath_attr() const;
    bool has_trim_attr() const;
    void set_trim_attr(const ns_s::ST_TrueFalse& _trim_attr);
    const ns_s::ST_TrueFalse& get_trim_attr() const;
    bool has_xscale_attr() const;
    void set_xscale_attr(const ns_s::ST_TrueFalse& _xscale_attr);
    const ns_s::ST_TrueFalse& get_xscale_attr() const;
    bool has_string_attr() const;
    void set_string_attr(const XSD::string_& _string_attr);
    const XSD::string_& get_string_attr() const;
protected:
private:
    static CT_TextPath* default_instance_;
    bool m_has_id_attr;
    XSD::string_ m_id_attr;
    bool m_has_style_attr;
    XSD::string_ m_style_attr;
    bool m_has_on_attr;
    ns_s::ST_TrueFalse* m_on_attr;
    bool m_has_fitshape_attr;
    ns_s::ST_TrueFalse* m_fitshape_attr;
    bool m_has_fitpath_attr;
    ns_s::ST_TrueFalse* m_fitpath_attr;
    bool m_has_trim_attr;
    ns_s::ST_TrueFalse* m_trim_attr;
    bool m_has_xscale_attr;
    ns_s::ST_TrueFalse* m_xscale_attr;
    bool m_has_string_attr;
    XSD::string_ m_string_attr;
};

class CT_Arc: public XSD::ComplexType
{
public:
    CT_Arc();
    ~CT_Arc();
    CT_Path* add_path();
    CT_Formulas* add_formulas();
    CT_Handles* add_handles();
    CT_Fill* add_fill();
    CT_Stroke* add_stroke();
    CT_Shadow* add_shadow();
    CT_Textbox* add_textbox();
    CT_TextPath* add_textpath();
    CT_ImageData* add_imagedata();
    ns_o::CT_Skew* add_o_skew();
    ns_o::CT_Extrusion* add_o_extrusion();
    ns_o::CT_Callout* add_o_callout();
    ns_o::CT_Lock* add_o_lock();
    ns_o::CT_ClipPath* add_o_clippath();
    ns_o::CT_SignatureLine* add_o_signatureline();
    ns_w10::CT_Wrap* add_w10_wrap();
    ns_w10::CT_AnchorLock* add_w10_anchorlock();
    ns_w10::CT_Border* add_w10_bordertop();
    ns_w10::CT_Border* add_w10_borderbottom();
    ns_w10::CT_Border* add_w10_borderleft();
    ns_w10::CT_Border* add_w10_borderright();
    ns_x::CT_ClientData* add_x_ClientData();
    ns_pvml::CT_Rel* add_pvml_textdata();
    void clear();
    void toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const;
    static const CT_Arc& default_instance();
    bool has_startAngle_attr() const;
    void set_startAngle_attr(const XSD::decimal_& _startAngle_attr);
    const XSD::decimal_& get_startAngle_attr() const;
    bool has_endAngle_attr() const;
    void set_endAngle_attr(const XSD::decimal_& _endAngle_attr);
    const XSD::decimal_& get_endAngle_attr() const;
protected:
private:
    class ChildGroup_1
    {
    public:
        ChildGroup_1();
        bool has_path() const;
        CT_Path* mutable_path();
        const CT_Path& get_path() const;
        bool has_formulas() const;
        CT_Formulas* mutable_formulas();
        const CT_Formulas& get_formulas() const;
        bool has_handles() const;
        CT_Handles* mutable_handles();
        const CT_Handles& get_handles() const;
        bool has_fill() const;
        CT_Fill* mutable_fill();
        const CT_Fill& get_fill() const;
        bool has_stroke() const;
        CT_Stroke* mutable_stroke();
        const CT_Stroke& get_stroke() const;
        bool has_shadow() const;
        CT_Shadow* mutable_shadow();
        const CT_Shadow& get_shadow() const;
        bool has_textbox() const;
        CT_Textbox* mutable_textbox();
        const CT_Textbox& get_textbox() const;
        bool has_textpath() const;
        CT_TextPath* mutable_textpath();
        const CT_TextPath& get_textpath() const;
        bool has_imagedata() const;
        CT_ImageData* mutable_imagedata();
        const CT_ImageData& get_imagedata() const;
        bool has_o_skew() const;
        ns_o::CT_Skew* mutable_o_skew();
        const ns_o::CT_Skew& get_o_skew() const;
        bool has_o_extrusion() const;
        ns_o::CT_Extrusion* mutable_o_extrusion();
        const ns_o::CT_Extrusion& get_o_extrusion() const;
        bool has_o_callout() const;
        ns_o::CT_Callout* mutable_o_callout();
        const ns_o::CT_Callout& get_o_callout() const;
        bool has_o_lock() const;
        ns_o::CT_Lock* mutable_o_lock();
        const ns_o::CT_Lock& get_o_lock() const;
        bool has_o_clippath() const;
        ns_o::CT_ClipPath* mutable_o_clippath();
        const ns_o::CT_ClipPath& get_o_clippath() const;
        bool has_o_signatureline() const;
        ns_o::CT_SignatureLine* mutable_o_signatureline();
        const ns_o::CT_SignatureLine& get_o_signatureline() const;
        bool has_w10_wrap() const;
        ns_w10::CT_Wrap* mutable_w10_wrap();
        const ns_w10::CT_Wrap& get_w10_wrap() const;
        bool has_w10_anchorlock() const;
        ns_w10::CT_AnchorLock* mutable_w10_anchorlock();
        const ns_w10::CT_AnchorLock& get_w10_anchorlock() const;
        bool has_w10_bordertop() const;
        ns_w10::CT_Border* mutable_w10_bordertop();
        const ns_w10::CT_Border& get_w10_bordertop() const;
        bool has_w10_borderbottom() const;
        ns_w10::CT_Border* mutable_w10_borderbottom();
        const ns_w10::CT_Border& get_w10_borderbottom() const;
        bool has_w10_borderleft() const;
        ns_w10::CT_Border* mutable_w10_borderleft();
        const ns_w10::CT_Border& get_w10_borderleft() const;
        bool has_w10_borderright() const;
        ns_w10::CT_Border* mutable_w10_borderright();
        const ns_w10::CT_Border& get_w10_borderright() const;
        bool has_x_ClientData() const;
        ns_x::CT_ClientData* mutable_x_ClientData();
        const ns_x::CT_ClientData& get_x_ClientData() const;
        bool has_pvml_textdata() const;
        ns_pvml::CT_Rel* mutable_pvml_textdata();
        const ns_pvml::CT_Rel& get_pvml_textdata() const;
    protected:
    private:
        bool m_has_path;
        CT_Path* m_path;
        bool m_has_formulas;
        CT_Formulas* m_formulas;
        bool m_has_handles;
        CT_Handles* m_handles;
        bool m_has_fill;
        CT_Fill* m_fill;
        bool m_has_stroke;
        CT_Stroke* m_stroke;
        bool m_has_shadow;
        CT_Shadow* m_shadow;
        bool m_has_textbox;
        CT_Textbox* m_textbox;
        bool m_has_textpath;
        CT_TextPath* m_textpath;
        bool m_has_imagedata;
        CT_ImageData* m_imagedata;
        bool m_has_o_skew;
        ns_o::CT_Skew* m_o_skew;
        bool m_has_o_extrusion;
        ns_o::CT_Extrusion* m_o_extrusion;
        bool m_has_o_callout;
        ns_o::CT_Callout* m_o_callout;
        bool m_has_o_lock;
        ns_o::CT_Lock* m_o_lock;
        bool m_has_o_clippath;
        ns_o::CT_ClipPath* m_o_clippath;
        bool m_has_o_signatureline;
        ns_o::CT_SignatureLine* m_o_signatureline;
        bool m_has_w10_wrap;
        ns_w10::CT_Wrap* m_w10_wrap;
        bool m_has_w10_anchorlock;
        ns_w10::CT_AnchorLock* m_w10_anchorlock;
        bool m_has_w10_bordertop;
        ns_w10::CT_Border* m_w10_bordertop;
        bool m_has_w10_borderbottom;
        ns_w10::CT_Border* m_w10_borderbottom;
        bool m_has_w10_borderleft;
        ns_w10::CT_Border* m_w10_borderleft;
        bool m_has_w10_borderright;
        ns_w10::CT_Border* m_w10_borderright;
        bool m_has_x_ClientData;
        ns_x::CT_ClientData* m_x_ClientData;
        bool m_has_pvml_textdata;
        ns_pvml::CT_Rel* m_pvml_textdata;
    };
    vector<ChildGroup_1*> m_childGroupList_1;
    static CT_Arc* default_instance_;
    bool m_has_startAngle_attr;
    XSD::decimal_ m_startAngle_attr;
    bool m_has_endAngle_attr;
    XSD::decimal_ m_endAngle_attr;
};

class CT_Curve: public XSD::ComplexType
{
public:
    CT_Curve();
    ~CT_Curve();
    CT_Path* add_path();
    CT_Formulas* add_formulas();
    CT_Handles* add_handles();
    CT_Fill* add_fill();
    CT_Stroke* add_stroke();
    CT_Shadow* add_shadow();
    CT_Textbox* add_textbox();
    CT_TextPath* add_textpath();
    CT_ImageData* add_imagedata();
    ns_o::CT_Skew* add_o_skew();
    ns_o::CT_Extrusion* add_o_extrusion();
    ns_o::CT_Callout* add_o_callout();
    ns_o::CT_Lock* add_o_lock();
    ns_o::CT_ClipPath* add_o_clippath();
    ns_o::CT_SignatureLine* add_o_signatureline();
    ns_w10::CT_Wrap* add_w10_wrap();
    ns_w10::CT_AnchorLock* add_w10_anchorlock();
    ns_w10::CT_Border* add_w10_bordertop();
    ns_w10::CT_Border* add_w10_borderbottom();
    ns_w10::CT_Border* add_w10_borderleft();
    ns_w10::CT_Border* add_w10_borderright();
    ns_x::CT_ClientData* add_x_ClientData();
    ns_pvml::CT_Rel* add_pvml_textdata();
    void clear();
    void toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const;
    static const CT_Curve& default_instance();
    bool has_from_attr() const;
    void set_from_attr(const XSD::string_& _from_attr);
    const XSD::string_& get_from_attr() const;
    bool has_control1_attr() const;
    void set_control1_attr(const XSD::string_& _control1_attr);
    const XSD::string_& get_control1_attr() const;
    bool has_control2_attr() const;
    void set_control2_attr(const XSD::string_& _control2_attr);
    const XSD::string_& get_control2_attr() const;
    bool has_to_attr() const;
    void set_to_attr(const XSD::string_& _to_attr);
    const XSD::string_& get_to_attr() const;
protected:
private:
    class ChildGroup_1
    {
    public:
        ChildGroup_1();
        bool has_path() const;
        CT_Path* mutable_path();
        const CT_Path& get_path() const;
        bool has_formulas() const;
        CT_Formulas* mutable_formulas();
        const CT_Formulas& get_formulas() const;
        bool has_handles() const;
        CT_Handles* mutable_handles();
        const CT_Handles& get_handles() const;
        bool has_fill() const;
        CT_Fill* mutable_fill();
        const CT_Fill& get_fill() const;
        bool has_stroke() const;
        CT_Stroke* mutable_stroke();
        const CT_Stroke& get_stroke() const;
        bool has_shadow() const;
        CT_Shadow* mutable_shadow();
        const CT_Shadow& get_shadow() const;
        bool has_textbox() const;
        CT_Textbox* mutable_textbox();
        const CT_Textbox& get_textbox() const;
        bool has_textpath() const;
        CT_TextPath* mutable_textpath();
        const CT_TextPath& get_textpath() const;
        bool has_imagedata() const;
        CT_ImageData* mutable_imagedata();
        const CT_ImageData& get_imagedata() const;
        bool has_o_skew() const;
        ns_o::CT_Skew* mutable_o_skew();
        const ns_o::CT_Skew& get_o_skew() const;
        bool has_o_extrusion() const;
        ns_o::CT_Extrusion* mutable_o_extrusion();
        const ns_o::CT_Extrusion& get_o_extrusion() const;
        bool has_o_callout() const;
        ns_o::CT_Callout* mutable_o_callout();
        const ns_o::CT_Callout& get_o_callout() const;
        bool has_o_lock() const;
        ns_o::CT_Lock* mutable_o_lock();
        const ns_o::CT_Lock& get_o_lock() const;
        bool has_o_clippath() const;
        ns_o::CT_ClipPath* mutable_o_clippath();
        const ns_o::CT_ClipPath& get_o_clippath() const;
        bool has_o_signatureline() const;
        ns_o::CT_SignatureLine* mutable_o_signatureline();
        const ns_o::CT_SignatureLine& get_o_signatureline() const;
        bool has_w10_wrap() const;
        ns_w10::CT_Wrap* mutable_w10_wrap();
        const ns_w10::CT_Wrap& get_w10_wrap() const;
        bool has_w10_anchorlock() const;
        ns_w10::CT_AnchorLock* mutable_w10_anchorlock();
        const ns_w10::CT_AnchorLock& get_w10_anchorlock() const;
        bool has_w10_bordertop() const;
        ns_w10::CT_Border* mutable_w10_bordertop();
        const ns_w10::CT_Border& get_w10_bordertop() const;
        bool has_w10_borderbottom() const;
        ns_w10::CT_Border* mutable_w10_borderbottom();
        const ns_w10::CT_Border& get_w10_borderbottom() const;
        bool has_w10_borderleft() const;
        ns_w10::CT_Border* mutable_w10_borderleft();
        const ns_w10::CT_Border& get_w10_borderleft() const;
        bool has_w10_borderright() const;
        ns_w10::CT_Border* mutable_w10_borderright();
        const ns_w10::CT_Border& get_w10_borderright() const;
        bool has_x_ClientData() const;
        ns_x::CT_ClientData* mutable_x_ClientData();
        const ns_x::CT_ClientData& get_x_ClientData() const;
        bool has_pvml_textdata() const;
        ns_pvml::CT_Rel* mutable_pvml_textdata();
        const ns_pvml::CT_Rel& get_pvml_textdata() const;
    protected:
    private:
        bool m_has_path;
        CT_Path* m_path;
        bool m_has_formulas;
        CT_Formulas* m_formulas;
        bool m_has_handles;
        CT_Handles* m_handles;
        bool m_has_fill;
        CT_Fill* m_fill;
        bool m_has_stroke;
        CT_Stroke* m_stroke;
        bool m_has_shadow;
        CT_Shadow* m_shadow;
        bool m_has_textbox;
        CT_Textbox* m_textbox;
        bool m_has_textpath;
        CT_TextPath* m_textpath;
        bool m_has_imagedata;
        CT_ImageData* m_imagedata;
        bool m_has_o_skew;
        ns_o::CT_Skew* m_o_skew;
        bool m_has_o_extrusion;
        ns_o::CT_Extrusion* m_o_extrusion;
        bool m_has_o_callout;
        ns_o::CT_Callout* m_o_callout;
        bool m_has_o_lock;
        ns_o::CT_Lock* m_o_lock;
        bool m_has_o_clippath;
        ns_o::CT_ClipPath* m_o_clippath;
        bool m_has_o_signatureline;
        ns_o::CT_SignatureLine* m_o_signatureline;
        bool m_has_w10_wrap;
        ns_w10::CT_Wrap* m_w10_wrap;
        bool m_has_w10_anchorlock;
        ns_w10::CT_AnchorLock* m_w10_anchorlock;
        bool m_has_w10_bordertop;
        ns_w10::CT_Border* m_w10_bordertop;
        bool m_has_w10_borderbottom;
        ns_w10::CT_Border* m_w10_borderbottom;
        bool m_has_w10_borderleft;
        ns_w10::CT_Border* m_w10_borderleft;
        bool m_has_w10_borderright;
        ns_w10::CT_Border* m_w10_borderright;
        bool m_has_x_ClientData;
        ns_x::CT_ClientData* m_x_ClientData;
        bool m_has_pvml_textdata;
        ns_pvml::CT_Rel* m_pvml_textdata;
    };
    vector<ChildGroup_1*> m_childGroupList_1;
    static CT_Curve* default_instance_;
    bool m_has_from_attr;
    XSD::string_ m_from_attr;
    bool m_has_control1_attr;
    XSD::string_ m_control1_attr;
    bool m_has_control2_attr;
    XSD::string_ m_control2_attr;
    bool m_has_to_attr;
    XSD::string_ m_to_attr;
};

class CT_Image: public XSD::ComplexType
{
public:
    CT_Image();
    ~CT_Image();
    CT_Path* add_path();
    CT_Formulas* add_formulas();
    CT_Handles* add_handles();
    CT_Fill* add_fill();
    CT_Stroke* add_stroke();
    CT_Shadow* add_shadow();
    CT_Textbox* add_textbox();
    CT_TextPath* add_textpath();
    CT_ImageData* add_imagedata();
    ns_o::CT_Skew* add_o_skew();
    ns_o::CT_Extrusion* add_o_extrusion();
    ns_o::CT_Callout* add_o_callout();
    ns_o::CT_Lock* add_o_lock();
    ns_o::CT_ClipPath* add_o_clippath();
    ns_o::CT_SignatureLine* add_o_signatureline();
    ns_w10::CT_Wrap* add_w10_wrap();
    ns_w10::CT_AnchorLock* add_w10_anchorlock();
    ns_w10::CT_Border* add_w10_bordertop();
    ns_w10::CT_Border* add_w10_borderbottom();
    ns_w10::CT_Border* add_w10_borderleft();
    ns_w10::CT_Border* add_w10_borderright();
    ns_x::CT_ClientData* add_x_ClientData();
    ns_pvml::CT_Rel* add_pvml_textdata();
    void clear();
    void toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const;
    static const CT_Image& default_instance();
    bool has_src_attr() const;
    void set_src_attr(const XSD::string_& _src_attr);
    const XSD::string_& get_src_attr() const;
    bool has_cropleft_attr() const;
    void set_cropleft_attr(const XSD::string_& _cropleft_attr);
    const XSD::string_& get_cropleft_attr() const;
    bool has_croptop_attr() const;
    void set_croptop_attr(const XSD::string_& _croptop_attr);
    const XSD::string_& get_croptop_attr() const;
    bool has_cropright_attr() const;
    void set_cropright_attr(const XSD::string_& _cropright_attr);
    const XSD::string_& get_cropright_attr() const;
    bool has_cropbottom_attr() const;
    void set_cropbottom_attr(const XSD::string_& _cropbottom_attr);
    const XSD::string_& get_cropbottom_attr() const;
    bool has_gain_attr() const;
    void set_gain_attr(const XSD::string_& _gain_attr);
    const XSD::string_& get_gain_attr() const;
    bool has_blacklevel_attr() const;
    void set_blacklevel_attr(const XSD::string_& _blacklevel_attr);
    const XSD::string_& get_blacklevel_attr() const;
    bool has_gamma_attr() const;
    void set_gamma_attr(const XSD::string_& _gamma_attr);
    const XSD::string_& get_gamma_attr() const;
    bool has_grayscale_attr() const;
    void set_grayscale_attr(const ns_s::ST_TrueFalse& _grayscale_attr);
    const ns_s::ST_TrueFalse& get_grayscale_attr() const;
    bool has_bilevel_attr() const;
    void set_bilevel_attr(const ns_s::ST_TrueFalse& _bilevel_attr);
    const ns_s::ST_TrueFalse& get_bilevel_attr() const;
protected:
private:
    class ChildGroup_1
    {
    public:
        ChildGroup_1();
        bool has_path() const;
        CT_Path* mutable_path();
        const CT_Path& get_path() const;
        bool has_formulas() const;
        CT_Formulas* mutable_formulas();
        const CT_Formulas& get_formulas() const;
        bool has_handles() const;
        CT_Handles* mutable_handles();
        const CT_Handles& get_handles() const;
        bool has_fill() const;
        CT_Fill* mutable_fill();
        const CT_Fill& get_fill() const;
        bool has_stroke() const;
        CT_Stroke* mutable_stroke();
        const CT_Stroke& get_stroke() const;
        bool has_shadow() const;
        CT_Shadow* mutable_shadow();
        const CT_Shadow& get_shadow() const;
        bool has_textbox() const;
        CT_Textbox* mutable_textbox();
        const CT_Textbox& get_textbox() const;
        bool has_textpath() const;
        CT_TextPath* mutable_textpath();
        const CT_TextPath& get_textpath() const;
        bool has_imagedata() const;
        CT_ImageData* mutable_imagedata();
        const CT_ImageData& get_imagedata() const;
        bool has_o_skew() const;
        ns_o::CT_Skew* mutable_o_skew();
        const ns_o::CT_Skew& get_o_skew() const;
        bool has_o_extrusion() const;
        ns_o::CT_Extrusion* mutable_o_extrusion();
        const ns_o::CT_Extrusion& get_o_extrusion() const;
        bool has_o_callout() const;
        ns_o::CT_Callout* mutable_o_callout();
        const ns_o::CT_Callout& get_o_callout() const;
        bool has_o_lock() const;
        ns_o::CT_Lock* mutable_o_lock();
        const ns_o::CT_Lock& get_o_lock() const;
        bool has_o_clippath() const;
        ns_o::CT_ClipPath* mutable_o_clippath();
        const ns_o::CT_ClipPath& get_o_clippath() const;
        bool has_o_signatureline() const;
        ns_o::CT_SignatureLine* mutable_o_signatureline();
        const ns_o::CT_SignatureLine& get_o_signatureline() const;
        bool has_w10_wrap() const;
        ns_w10::CT_Wrap* mutable_w10_wrap();
        const ns_w10::CT_Wrap& get_w10_wrap() const;
        bool has_w10_anchorlock() const;
        ns_w10::CT_AnchorLock* mutable_w10_anchorlock();
        const ns_w10::CT_AnchorLock& get_w10_anchorlock() const;
        bool has_w10_bordertop() const;
        ns_w10::CT_Border* mutable_w10_bordertop();
        const ns_w10::CT_Border& get_w10_bordertop() const;
        bool has_w10_borderbottom() const;
        ns_w10::CT_Border* mutable_w10_borderbottom();
        const ns_w10::CT_Border& get_w10_borderbottom() const;
        bool has_w10_borderleft() const;
        ns_w10::CT_Border* mutable_w10_borderleft();
        const ns_w10::CT_Border& get_w10_borderleft() const;
        bool has_w10_borderright() const;
        ns_w10::CT_Border* mutable_w10_borderright();
        const ns_w10::CT_Border& get_w10_borderright() const;
        bool has_x_ClientData() const;
        ns_x::CT_ClientData* mutable_x_ClientData();
        const ns_x::CT_ClientData& get_x_ClientData() const;
        bool has_pvml_textdata() const;
        ns_pvml::CT_Rel* mutable_pvml_textdata();
        const ns_pvml::CT_Rel& get_pvml_textdata() const;
    protected:
    private:
        bool m_has_path;
        CT_Path* m_path;
        bool m_has_formulas;
        CT_Formulas* m_formulas;
        bool m_has_handles;
        CT_Handles* m_handles;
        bool m_has_fill;
        CT_Fill* m_fill;
        bool m_has_stroke;
        CT_Stroke* m_stroke;
        bool m_has_shadow;
        CT_Shadow* m_shadow;
        bool m_has_textbox;
        CT_Textbox* m_textbox;
        bool m_has_textpath;
        CT_TextPath* m_textpath;
        bool m_has_imagedata;
        CT_ImageData* m_imagedata;
        bool m_has_o_skew;
        ns_o::CT_Skew* m_o_skew;
        bool m_has_o_extrusion;
        ns_o::CT_Extrusion* m_o_extrusion;
        bool m_has_o_callout;
        ns_o::CT_Callout* m_o_callout;
        bool m_has_o_lock;
        ns_o::CT_Lock* m_o_lock;
        bool m_has_o_clippath;
        ns_o::CT_ClipPath* m_o_clippath;
        bool m_has_o_signatureline;
        ns_o::CT_SignatureLine* m_o_signatureline;
        bool m_has_w10_wrap;
        ns_w10::CT_Wrap* m_w10_wrap;
        bool m_has_w10_anchorlock;
        ns_w10::CT_AnchorLock* m_w10_anchorlock;
        bool m_has_w10_bordertop;
        ns_w10::CT_Border* m_w10_bordertop;
        bool m_has_w10_borderbottom;
        ns_w10::CT_Border* m_w10_borderbottom;
        bool m_has_w10_borderleft;
        ns_w10::CT_Border* m_w10_borderleft;
        bool m_has_w10_borderright;
        ns_w10::CT_Border* m_w10_borderright;
        bool m_has_x_ClientData;
        ns_x::CT_ClientData* m_x_ClientData;
        bool m_has_pvml_textdata;
        ns_pvml::CT_Rel* m_pvml_textdata;
    };
    vector<ChildGroup_1*> m_childGroupList_1;
    static CT_Image* default_instance_;
    bool m_has_src_attr;
    XSD::string_ m_src_attr;
    bool m_has_cropleft_attr;
    XSD::string_ m_cropleft_attr;
    bool m_has_croptop_attr;
    XSD::string_ m_croptop_attr;
    bool m_has_cropright_attr;
    XSD::string_ m_cropright_attr;
    bool m_has_cropbottom_attr;
    XSD::string_ m_cropbottom_attr;
    bool m_has_gain_attr;
    XSD::string_ m_gain_attr;
    bool m_has_blacklevel_attr;
    XSD::string_ m_blacklevel_attr;
    bool m_has_gamma_attr;
    XSD::string_ m_gamma_attr;
    bool m_has_grayscale_attr;
    ns_s::ST_TrueFalse* m_grayscale_attr;
    bool m_has_bilevel_attr;
    ns_s::ST_TrueFalse* m_bilevel_attr;
};

class CT_Line: public XSD::ComplexType
{
public:
    CT_Line();
    ~CT_Line();
    CT_Path* add_path();
    CT_Formulas* add_formulas();
    CT_Handles* add_handles();
    CT_Fill* add_fill();
    CT_Stroke* add_stroke();
    CT_Shadow* add_shadow();
    CT_Textbox* add_textbox();
    CT_TextPath* add_textpath();
    CT_ImageData* add_imagedata();
    ns_o::CT_Skew* add_o_skew();
    ns_o::CT_Extrusion* add_o_extrusion();
    ns_o::CT_Callout* add_o_callout();
    ns_o::CT_Lock* add_o_lock();
    ns_o::CT_ClipPath* add_o_clippath();
    ns_o::CT_SignatureLine* add_o_signatureline();
    ns_w10::CT_Wrap* add_w10_wrap();
    ns_w10::CT_AnchorLock* add_w10_anchorlock();
    ns_w10::CT_Border* add_w10_bordertop();
    ns_w10::CT_Border* add_w10_borderbottom();
    ns_w10::CT_Border* add_w10_borderleft();
    ns_w10::CT_Border* add_w10_borderright();
    ns_x::CT_ClientData* add_x_ClientData();
    ns_pvml::CT_Rel* add_pvml_textdata();
    void clear();
    void toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const;
    static const CT_Line& default_instance();
    bool has_from_attr() const;
    void set_from_attr(const XSD::string_& _from_attr);
    const XSD::string_& get_from_attr() const;
    bool has_to_attr() const;
    void set_to_attr(const XSD::string_& _to_attr);
    const XSD::string_& get_to_attr() const;
protected:
private:
    class ChildGroup_1
    {
    public:
        ChildGroup_1();
        bool has_path() const;
        CT_Path* mutable_path();
        const CT_Path& get_path() const;
        bool has_formulas() const;
        CT_Formulas* mutable_formulas();
        const CT_Formulas& get_formulas() const;
        bool has_handles() const;
        CT_Handles* mutable_handles();
        const CT_Handles& get_handles() const;
        bool has_fill() const;
        CT_Fill* mutable_fill();
        const CT_Fill& get_fill() const;
        bool has_stroke() const;
        CT_Stroke* mutable_stroke();
        const CT_Stroke& get_stroke() const;
        bool has_shadow() const;
        CT_Shadow* mutable_shadow();
        const CT_Shadow& get_shadow() const;
        bool has_textbox() const;
        CT_Textbox* mutable_textbox();
        const CT_Textbox& get_textbox() const;
        bool has_textpath() const;
        CT_TextPath* mutable_textpath();
        const CT_TextPath& get_textpath() const;
        bool has_imagedata() const;
        CT_ImageData* mutable_imagedata();
        const CT_ImageData& get_imagedata() const;
        bool has_o_skew() const;
        ns_o::CT_Skew* mutable_o_skew();
        const ns_o::CT_Skew& get_o_skew() const;
        bool has_o_extrusion() const;
        ns_o::CT_Extrusion* mutable_o_extrusion();
        const ns_o::CT_Extrusion& get_o_extrusion() const;
        bool has_o_callout() const;
        ns_o::CT_Callout* mutable_o_callout();
        const ns_o::CT_Callout& get_o_callout() const;
        bool has_o_lock() const;
        ns_o::CT_Lock* mutable_o_lock();
        const ns_o::CT_Lock& get_o_lock() const;
        bool has_o_clippath() const;
        ns_o::CT_ClipPath* mutable_o_clippath();
        const ns_o::CT_ClipPath& get_o_clippath() const;
        bool has_o_signatureline() const;
        ns_o::CT_SignatureLine* mutable_o_signatureline();
        const ns_o::CT_SignatureLine& get_o_signatureline() const;
        bool has_w10_wrap() const;
        ns_w10::CT_Wrap* mutable_w10_wrap();
        const ns_w10::CT_Wrap& get_w10_wrap() const;
        bool has_w10_anchorlock() const;
        ns_w10::CT_AnchorLock* mutable_w10_anchorlock();
        const ns_w10::CT_AnchorLock& get_w10_anchorlock() const;
        bool has_w10_bordertop() const;
        ns_w10::CT_Border* mutable_w10_bordertop();
        const ns_w10::CT_Border& get_w10_bordertop() const;
        bool has_w10_borderbottom() const;
        ns_w10::CT_Border* mutable_w10_borderbottom();
        const ns_w10::CT_Border& get_w10_borderbottom() const;
        bool has_w10_borderleft() const;
        ns_w10::CT_Border* mutable_w10_borderleft();
        const ns_w10::CT_Border& get_w10_borderleft() const;
        bool has_w10_borderright() const;
        ns_w10::CT_Border* mutable_w10_borderright();
        const ns_w10::CT_Border& get_w10_borderright() const;
        bool has_x_ClientData() const;
        ns_x::CT_ClientData* mutable_x_ClientData();
        const ns_x::CT_ClientData& get_x_ClientData() const;
        bool has_pvml_textdata() const;
        ns_pvml::CT_Rel* mutable_pvml_textdata();
        const ns_pvml::CT_Rel& get_pvml_textdata() const;
    protected:
    private:
        bool m_has_path;
        CT_Path* m_path;
        bool m_has_formulas;
        CT_Formulas* m_formulas;
        bool m_has_handles;
        CT_Handles* m_handles;
        bool m_has_fill;
        CT_Fill* m_fill;
        bool m_has_stroke;
        CT_Stroke* m_stroke;
        bool m_has_shadow;
        CT_Shadow* m_shadow;
        bool m_has_textbox;
        CT_Textbox* m_textbox;
        bool m_has_textpath;
        CT_TextPath* m_textpath;
        bool m_has_imagedata;
        CT_ImageData* m_imagedata;
        bool m_has_o_skew;
        ns_o::CT_Skew* m_o_skew;
        bool m_has_o_extrusion;
        ns_o::CT_Extrusion* m_o_extrusion;
        bool m_has_o_callout;
        ns_o::CT_Callout* m_o_callout;
        bool m_has_o_lock;
        ns_o::CT_Lock* m_o_lock;
        bool m_has_o_clippath;
        ns_o::CT_ClipPath* m_o_clippath;
        bool m_has_o_signatureline;
        ns_o::CT_SignatureLine* m_o_signatureline;
        bool m_has_w10_wrap;
        ns_w10::CT_Wrap* m_w10_wrap;
        bool m_has_w10_anchorlock;
        ns_w10::CT_AnchorLock* m_w10_anchorlock;
        bool m_has_w10_bordertop;
        ns_w10::CT_Border* m_w10_bordertop;
        bool m_has_w10_borderbottom;
        ns_w10::CT_Border* m_w10_borderbottom;
        bool m_has_w10_borderleft;
        ns_w10::CT_Border* m_w10_borderleft;
        bool m_has_w10_borderright;
        ns_w10::CT_Border* m_w10_borderright;
        bool m_has_x_ClientData;
        ns_x::CT_ClientData* m_x_ClientData;
        bool m_has_pvml_textdata;
        ns_pvml::CT_Rel* m_pvml_textdata;
    };
    vector<ChildGroup_1*> m_childGroupList_1;
    static CT_Line* default_instance_;
    bool m_has_from_attr;
    XSD::string_ m_from_attr;
    bool m_has_to_attr;
    XSD::string_ m_to_attr;
};

class CT_Oval: public XSD::ComplexType
{
public:
    CT_Oval();
    ~CT_Oval();
    CT_Path* add_path();
    CT_Formulas* add_formulas();
    CT_Handles* add_handles();
    CT_Fill* add_fill();
    CT_Stroke* add_stroke();
    CT_Shadow* add_shadow();
    CT_Textbox* add_textbox();
    CT_TextPath* add_textpath();
    CT_ImageData* add_imagedata();
    ns_o::CT_Skew* add_o_skew();
    ns_o::CT_Extrusion* add_o_extrusion();
    ns_o::CT_Callout* add_o_callout();
    ns_o::CT_Lock* add_o_lock();
    ns_o::CT_ClipPath* add_o_clippath();
    ns_o::CT_SignatureLine* add_o_signatureline();
    ns_w10::CT_Wrap* add_w10_wrap();
    ns_w10::CT_AnchorLock* add_w10_anchorlock();
    ns_w10::CT_Border* add_w10_bordertop();
    ns_w10::CT_Border* add_w10_borderbottom();
    ns_w10::CT_Border* add_w10_borderleft();
    ns_w10::CT_Border* add_w10_borderright();
    ns_x::CT_ClientData* add_x_ClientData();
    ns_pvml::CT_Rel* add_pvml_textdata();
    void clear();
    void toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const;
    static const CT_Oval& default_instance();
protected:
private:
    class ChildGroup_1
    {
    public:
        ChildGroup_1();
        bool has_path() const;
        CT_Path* mutable_path();
        const CT_Path& get_path() const;
        bool has_formulas() const;
        CT_Formulas* mutable_formulas();
        const CT_Formulas& get_formulas() const;
        bool has_handles() const;
        CT_Handles* mutable_handles();
        const CT_Handles& get_handles() const;
        bool has_fill() const;
        CT_Fill* mutable_fill();
        const CT_Fill& get_fill() const;
        bool has_stroke() const;
        CT_Stroke* mutable_stroke();
        const CT_Stroke& get_stroke() const;
        bool has_shadow() const;
        CT_Shadow* mutable_shadow();
        const CT_Shadow& get_shadow() const;
        bool has_textbox() const;
        CT_Textbox* mutable_textbox();
        const CT_Textbox& get_textbox() const;
        bool has_textpath() const;
        CT_TextPath* mutable_textpath();
        const CT_TextPath& get_textpath() const;
        bool has_imagedata() const;
        CT_ImageData* mutable_imagedata();
        const CT_ImageData& get_imagedata() const;
        bool has_o_skew() const;
        ns_o::CT_Skew* mutable_o_skew();
        const ns_o::CT_Skew& get_o_skew() const;
        bool has_o_extrusion() const;
        ns_o::CT_Extrusion* mutable_o_extrusion();
        const ns_o::CT_Extrusion& get_o_extrusion() const;
        bool has_o_callout() const;
        ns_o::CT_Callout* mutable_o_callout();
        const ns_o::CT_Callout& get_o_callout() const;
        bool has_o_lock() const;
        ns_o::CT_Lock* mutable_o_lock();
        const ns_o::CT_Lock& get_o_lock() const;
        bool has_o_clippath() const;
        ns_o::CT_ClipPath* mutable_o_clippath();
        const ns_o::CT_ClipPath& get_o_clippath() const;
        bool has_o_signatureline() const;
        ns_o::CT_SignatureLine* mutable_o_signatureline();
        const ns_o::CT_SignatureLine& get_o_signatureline() const;
        bool has_w10_wrap() const;
        ns_w10::CT_Wrap* mutable_w10_wrap();
        const ns_w10::CT_Wrap& get_w10_wrap() const;
        bool has_w10_anchorlock() const;
        ns_w10::CT_AnchorLock* mutable_w10_anchorlock();
        const ns_w10::CT_AnchorLock& get_w10_anchorlock() const;
        bool has_w10_bordertop() const;
        ns_w10::CT_Border* mutable_w10_bordertop();
        const ns_w10::CT_Border& get_w10_bordertop() const;
        bool has_w10_borderbottom() const;
        ns_w10::CT_Border* mutable_w10_borderbottom();
        const ns_w10::CT_Border& get_w10_borderbottom() const;
        bool has_w10_borderleft() const;
        ns_w10::CT_Border* mutable_w10_borderleft();
        const ns_w10::CT_Border& get_w10_borderleft() const;
        bool has_w10_borderright() const;
        ns_w10::CT_Border* mutable_w10_borderright();
        const ns_w10::CT_Border& get_w10_borderright() const;
        bool has_x_ClientData() const;
        ns_x::CT_ClientData* mutable_x_ClientData();
        const ns_x::CT_ClientData& get_x_ClientData() const;
        bool has_pvml_textdata() const;
        ns_pvml::CT_Rel* mutable_pvml_textdata();
        const ns_pvml::CT_Rel& get_pvml_textdata() const;
    protected:
    private:
        bool m_has_path;
        CT_Path* m_path;
        bool m_has_formulas;
        CT_Formulas* m_formulas;
        bool m_has_handles;
        CT_Handles* m_handles;
        bool m_has_fill;
        CT_Fill* m_fill;
        bool m_has_stroke;
        CT_Stroke* m_stroke;
        bool m_has_shadow;
        CT_Shadow* m_shadow;
        bool m_has_textbox;
        CT_Textbox* m_textbox;
        bool m_has_textpath;
        CT_TextPath* m_textpath;
        bool m_has_imagedata;
        CT_ImageData* m_imagedata;
        bool m_has_o_skew;
        ns_o::CT_Skew* m_o_skew;
        bool m_has_o_extrusion;
        ns_o::CT_Extrusion* m_o_extrusion;
        bool m_has_o_callout;
        ns_o::CT_Callout* m_o_callout;
        bool m_has_o_lock;
        ns_o::CT_Lock* m_o_lock;
        bool m_has_o_clippath;
        ns_o::CT_ClipPath* m_o_clippath;
        bool m_has_o_signatureline;
        ns_o::CT_SignatureLine* m_o_signatureline;
        bool m_has_w10_wrap;
        ns_w10::CT_Wrap* m_w10_wrap;
        bool m_has_w10_anchorlock;
        ns_w10::CT_AnchorLock* m_w10_anchorlock;
        bool m_has_w10_bordertop;
        ns_w10::CT_Border* m_w10_bordertop;
        bool m_has_w10_borderbottom;
        ns_w10::CT_Border* m_w10_borderbottom;
        bool m_has_w10_borderleft;
        ns_w10::CT_Border* m_w10_borderleft;
        bool m_has_w10_borderright;
        ns_w10::CT_Border* m_w10_borderright;
        bool m_has_x_ClientData;
        ns_x::CT_ClientData* m_x_ClientData;
        bool m_has_pvml_textdata;
        ns_pvml::CT_Rel* m_pvml_textdata;
    };
    vector<ChildGroup_1*> m_childGroupList_1;
    static CT_Oval* default_instance_;
};

class CT_PolyLine: public XSD::ComplexType
{
public:
    CT_PolyLine();
    ~CT_PolyLine();
    CT_Path* add_path();
    CT_Formulas* add_formulas();
    CT_Handles* add_handles();
    CT_Fill* add_fill();
    CT_Stroke* add_stroke();
    CT_Shadow* add_shadow();
    CT_Textbox* add_textbox();
    CT_TextPath* add_textpath();
    CT_ImageData* add_imagedata();
    ns_o::CT_Skew* add_o_skew();
    ns_o::CT_Extrusion* add_o_extrusion();
    ns_o::CT_Callout* add_o_callout();
    ns_o::CT_Lock* add_o_lock();
    ns_o::CT_ClipPath* add_o_clippath();
    ns_o::CT_SignatureLine* add_o_signatureline();
    ns_w10::CT_Wrap* add_w10_wrap();
    ns_w10::CT_AnchorLock* add_w10_anchorlock();
    ns_w10::CT_Border* add_w10_bordertop();
    ns_w10::CT_Border* add_w10_borderbottom();
    ns_w10::CT_Border* add_w10_borderleft();
    ns_w10::CT_Border* add_w10_borderright();
    ns_x::CT_ClientData* add_x_ClientData();
    ns_pvml::CT_Rel* add_pvml_textdata();
    ns_o::CT_Ink* add_o_ink();
    void clear();
    void toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const;
    static const CT_PolyLine& default_instance();
    bool has_points_attr() const;
    void set_points_attr(const XSD::string_& _points_attr);
    const XSD::string_& get_points_attr() const;
protected:
private:
    class ChildGroup_1
    {
    public:
        ChildGroup_1();
        bool has_path() const;
        CT_Path* mutable_path();
        const CT_Path& get_path() const;
        bool has_formulas() const;
        CT_Formulas* mutable_formulas();
        const CT_Formulas& get_formulas() const;
        bool has_handles() const;
        CT_Handles* mutable_handles();
        const CT_Handles& get_handles() const;
        bool has_fill() const;
        CT_Fill* mutable_fill();
        const CT_Fill& get_fill() const;
        bool has_stroke() const;
        CT_Stroke* mutable_stroke();
        const CT_Stroke& get_stroke() const;
        bool has_shadow() const;
        CT_Shadow* mutable_shadow();
        const CT_Shadow& get_shadow() const;
        bool has_textbox() const;
        CT_Textbox* mutable_textbox();
        const CT_Textbox& get_textbox() const;
        bool has_textpath() const;
        CT_TextPath* mutable_textpath();
        const CT_TextPath& get_textpath() const;
        bool has_imagedata() const;
        CT_ImageData* mutable_imagedata();
        const CT_ImageData& get_imagedata() const;
        bool has_o_skew() const;
        ns_o::CT_Skew* mutable_o_skew();
        const ns_o::CT_Skew& get_o_skew() const;
        bool has_o_extrusion() const;
        ns_o::CT_Extrusion* mutable_o_extrusion();
        const ns_o::CT_Extrusion& get_o_extrusion() const;
        bool has_o_callout() const;
        ns_o::CT_Callout* mutable_o_callout();
        const ns_o::CT_Callout& get_o_callout() const;
        bool has_o_lock() const;
        ns_o::CT_Lock* mutable_o_lock();
        const ns_o::CT_Lock& get_o_lock() const;
        bool has_o_clippath() const;
        ns_o::CT_ClipPath* mutable_o_clippath();
        const ns_o::CT_ClipPath& get_o_clippath() const;
        bool has_o_signatureline() const;
        ns_o::CT_SignatureLine* mutable_o_signatureline();
        const ns_o::CT_SignatureLine& get_o_signatureline() const;
        bool has_w10_wrap() const;
        ns_w10::CT_Wrap* mutable_w10_wrap();
        const ns_w10::CT_Wrap& get_w10_wrap() const;
        bool has_w10_anchorlock() const;
        ns_w10::CT_AnchorLock* mutable_w10_anchorlock();
        const ns_w10::CT_AnchorLock& get_w10_anchorlock() const;
        bool has_w10_bordertop() const;
        ns_w10::CT_Border* mutable_w10_bordertop();
        const ns_w10::CT_Border& get_w10_bordertop() const;
        bool has_w10_borderbottom() const;
        ns_w10::CT_Border* mutable_w10_borderbottom();
        const ns_w10::CT_Border& get_w10_borderbottom() const;
        bool has_w10_borderleft() const;
        ns_w10::CT_Border* mutable_w10_borderleft();
        const ns_w10::CT_Border& get_w10_borderleft() const;
        bool has_w10_borderright() const;
        ns_w10::CT_Border* mutable_w10_borderright();
        const ns_w10::CT_Border& get_w10_borderright() const;
        bool has_x_ClientData() const;
        ns_x::CT_ClientData* mutable_x_ClientData();
        const ns_x::CT_ClientData& get_x_ClientData() const;
        bool has_pvml_textdata() const;
        ns_pvml::CT_Rel* mutable_pvml_textdata();
        const ns_pvml::CT_Rel& get_pvml_textdata() const;
        bool has_o_ink() const;
        ns_o::CT_Ink* mutable_o_ink();
        const ns_o::CT_Ink& get_o_ink() const;
    protected:
    private:
        bool m_has_path;
        CT_Path* m_path;
        bool m_has_formulas;
        CT_Formulas* m_formulas;
        bool m_has_handles;
        CT_Handles* m_handles;
        bool m_has_fill;
        CT_Fill* m_fill;
        bool m_has_stroke;
        CT_Stroke* m_stroke;
        bool m_has_shadow;
        CT_Shadow* m_shadow;
        bool m_has_textbox;
        CT_Textbox* m_textbox;
        bool m_has_textpath;
        CT_TextPath* m_textpath;
        bool m_has_imagedata;
        CT_ImageData* m_imagedata;
        bool m_has_o_skew;
        ns_o::CT_Skew* m_o_skew;
        bool m_has_o_extrusion;
        ns_o::CT_Extrusion* m_o_extrusion;
        bool m_has_o_callout;
        ns_o::CT_Callout* m_o_callout;
        bool m_has_o_lock;
        ns_o::CT_Lock* m_o_lock;
        bool m_has_o_clippath;
        ns_o::CT_ClipPath* m_o_clippath;
        bool m_has_o_signatureline;
        ns_o::CT_SignatureLine* m_o_signatureline;
        bool m_has_w10_wrap;
        ns_w10::CT_Wrap* m_w10_wrap;
        bool m_has_w10_anchorlock;
        ns_w10::CT_AnchorLock* m_w10_anchorlock;
        bool m_has_w10_bordertop;
        ns_w10::CT_Border* m_w10_bordertop;
        bool m_has_w10_borderbottom;
        ns_w10::CT_Border* m_w10_borderbottom;
        bool m_has_w10_borderleft;
        ns_w10::CT_Border* m_w10_borderleft;
        bool m_has_w10_borderright;
        ns_w10::CT_Border* m_w10_borderright;
        bool m_has_x_ClientData;
        ns_x::CT_ClientData* m_x_ClientData;
        bool m_has_pvml_textdata;
        ns_pvml::CT_Rel* m_pvml_textdata;
        bool m_has_o_ink;
        ns_o::CT_Ink* m_o_ink;
    };
    vector<ChildGroup_1*> m_childGroupList_1;
    static CT_PolyLine* default_instance_;
    bool m_has_points_attr;
    XSD::string_ m_points_attr;
};

class CT_Rect: public XSD::ComplexType
{
public:
    CT_Rect();
    ~CT_Rect();
    CT_Path* add_path();
    CT_Formulas* add_formulas();
    CT_Handles* add_handles();
    CT_Fill* add_fill();
    CT_Stroke* add_stroke();
    CT_Shadow* add_shadow();
    CT_Textbox* add_textbox();
    CT_TextPath* add_textpath();
    CT_ImageData* add_imagedata();
    ns_o::CT_Skew* add_o_skew();
    ns_o::CT_Extrusion* add_o_extrusion();
    ns_o::CT_Callout* add_o_callout();
    ns_o::CT_Lock* add_o_lock();
    ns_o::CT_ClipPath* add_o_clippath();
    ns_o::CT_SignatureLine* add_o_signatureline();
    ns_w10::CT_Wrap* add_w10_wrap();
    ns_w10::CT_AnchorLock* add_w10_anchorlock();
    ns_w10::CT_Border* add_w10_bordertop();
    ns_w10::CT_Border* add_w10_borderbottom();
    ns_w10::CT_Border* add_w10_borderleft();
    ns_w10::CT_Border* add_w10_borderright();
    ns_x::CT_ClientData* add_x_ClientData();
    ns_pvml::CT_Rel* add_pvml_textdata();
    void clear();
    void toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const;
    static const CT_Rect& default_instance();
protected:
private:
    class ChildGroup_1
    {
    public:
        ChildGroup_1();
        bool has_path() const;
        CT_Path* mutable_path();
        const CT_Path& get_path() const;
        bool has_formulas() const;
        CT_Formulas* mutable_formulas();
        const CT_Formulas& get_formulas() const;
        bool has_handles() const;
        CT_Handles* mutable_handles();
        const CT_Handles& get_handles() const;
        bool has_fill() const;
        CT_Fill* mutable_fill();
        const CT_Fill& get_fill() const;
        bool has_stroke() const;
        CT_Stroke* mutable_stroke();
        const CT_Stroke& get_stroke() const;
        bool has_shadow() const;
        CT_Shadow* mutable_shadow();
        const CT_Shadow& get_shadow() const;
        bool has_textbox() const;
        CT_Textbox* mutable_textbox();
        const CT_Textbox& get_textbox() const;
        bool has_textpath() const;
        CT_TextPath* mutable_textpath();
        const CT_TextPath& get_textpath() const;
        bool has_imagedata() const;
        CT_ImageData* mutable_imagedata();
        const CT_ImageData& get_imagedata() const;
        bool has_o_skew() const;
        ns_o::CT_Skew* mutable_o_skew();
        const ns_o::CT_Skew& get_o_skew() const;
        bool has_o_extrusion() const;
        ns_o::CT_Extrusion* mutable_o_extrusion();
        const ns_o::CT_Extrusion& get_o_extrusion() const;
        bool has_o_callout() const;
        ns_o::CT_Callout* mutable_o_callout();
        const ns_o::CT_Callout& get_o_callout() const;
        bool has_o_lock() const;
        ns_o::CT_Lock* mutable_o_lock();
        const ns_o::CT_Lock& get_o_lock() const;
        bool has_o_clippath() const;
        ns_o::CT_ClipPath* mutable_o_clippath();
        const ns_o::CT_ClipPath& get_o_clippath() const;
        bool has_o_signatureline() const;
        ns_o::CT_SignatureLine* mutable_o_signatureline();
        const ns_o::CT_SignatureLine& get_o_signatureline() const;
        bool has_w10_wrap() const;
        ns_w10::CT_Wrap* mutable_w10_wrap();
        const ns_w10::CT_Wrap& get_w10_wrap() const;
        bool has_w10_anchorlock() const;
        ns_w10::CT_AnchorLock* mutable_w10_anchorlock();
        const ns_w10::CT_AnchorLock& get_w10_anchorlock() const;
        bool has_w10_bordertop() const;
        ns_w10::CT_Border* mutable_w10_bordertop();
        const ns_w10::CT_Border& get_w10_bordertop() const;
        bool has_w10_borderbottom() const;
        ns_w10::CT_Border* mutable_w10_borderbottom();
        const ns_w10::CT_Border& get_w10_borderbottom() const;
        bool has_w10_borderleft() const;
        ns_w10::CT_Border* mutable_w10_borderleft();
        const ns_w10::CT_Border& get_w10_borderleft() const;
        bool has_w10_borderright() const;
        ns_w10::CT_Border* mutable_w10_borderright();
        const ns_w10::CT_Border& get_w10_borderright() const;
        bool has_x_ClientData() const;
        ns_x::CT_ClientData* mutable_x_ClientData();
        const ns_x::CT_ClientData& get_x_ClientData() const;
        bool has_pvml_textdata() const;
        ns_pvml::CT_Rel* mutable_pvml_textdata();
        const ns_pvml::CT_Rel& get_pvml_textdata() const;
    protected:
    private:
        bool m_has_path;
        CT_Path* m_path;
        bool m_has_formulas;
        CT_Formulas* m_formulas;
        bool m_has_handles;
        CT_Handles* m_handles;
        bool m_has_fill;
        CT_Fill* m_fill;
        bool m_has_stroke;
        CT_Stroke* m_stroke;
        bool m_has_shadow;
        CT_Shadow* m_shadow;
        bool m_has_textbox;
        CT_Textbox* m_textbox;
        bool m_has_textpath;
        CT_TextPath* m_textpath;
        bool m_has_imagedata;
        CT_ImageData* m_imagedata;
        bool m_has_o_skew;
        ns_o::CT_Skew* m_o_skew;
        bool m_has_o_extrusion;
        ns_o::CT_Extrusion* m_o_extrusion;
        bool m_has_o_callout;
        ns_o::CT_Callout* m_o_callout;
        bool m_has_o_lock;
        ns_o::CT_Lock* m_o_lock;
        bool m_has_o_clippath;
        ns_o::CT_ClipPath* m_o_clippath;
        bool m_has_o_signatureline;
        ns_o::CT_SignatureLine* m_o_signatureline;
        bool m_has_w10_wrap;
        ns_w10::CT_Wrap* m_w10_wrap;
        bool m_has_w10_anchorlock;
        ns_w10::CT_AnchorLock* m_w10_anchorlock;
        bool m_has_w10_bordertop;
        ns_w10::CT_Border* m_w10_bordertop;
        bool m_has_w10_borderbottom;
        ns_w10::CT_Border* m_w10_borderbottom;
        bool m_has_w10_borderleft;
        ns_w10::CT_Border* m_w10_borderleft;
        bool m_has_w10_borderright;
        ns_w10::CT_Border* m_w10_borderright;
        bool m_has_x_ClientData;
        ns_x::CT_ClientData* m_x_ClientData;
        bool m_has_pvml_textdata;
        ns_pvml::CT_Rel* m_pvml_textdata;
    };
    vector<ChildGroup_1*> m_childGroupList_1;
    static CT_Rect* default_instance_;
};

class CT_RoundRect: public XSD::ComplexType
{
public:
    CT_RoundRect();
    ~CT_RoundRect();
    CT_Path* add_path();
    CT_Formulas* add_formulas();
    CT_Handles* add_handles();
    CT_Fill* add_fill();
    CT_Stroke* add_stroke();
    CT_Shadow* add_shadow();
    CT_Textbox* add_textbox();
    CT_TextPath* add_textpath();
    CT_ImageData* add_imagedata();
    ns_o::CT_Skew* add_o_skew();
    ns_o::CT_Extrusion* add_o_extrusion();
    ns_o::CT_Callout* add_o_callout();
    ns_o::CT_Lock* add_o_lock();
    ns_o::CT_ClipPath* add_o_clippath();
    ns_o::CT_SignatureLine* add_o_signatureline();
    ns_w10::CT_Wrap* add_w10_wrap();
    ns_w10::CT_AnchorLock* add_w10_anchorlock();
    ns_w10::CT_Border* add_w10_bordertop();
    ns_w10::CT_Border* add_w10_borderbottom();
    ns_w10::CT_Border* add_w10_borderleft();
    ns_w10::CT_Border* add_w10_borderright();
    ns_x::CT_ClientData* add_x_ClientData();
    ns_pvml::CT_Rel* add_pvml_textdata();
    void clear();
    void toXmlElem(const std::string& _elemName, const std::string& _xmlNsStr, std::ostream& _outStream) const;
    static const CT_RoundRect& default_instance();
    bool has_arcsize_attr() const;
    void set_arcsize_attr(const XSD::string_& _arcsize_attr);
    const XSD::string_& get_arcsize_attr() const;
protected:
private:
    class ChildGroup_1
    {
    public:
        ChildGroup_1();
        bool has_path() const;
        CT_Path* mutable_path();
        const CT_Path& get_path() const;
        bool has_formulas() const;
        CT_Formulas* mutable_formulas();
        const CT_Formulas& get_formulas() const;
        bool has_handles() const;
        CT_Handles* mutable_handles();
        const CT_Handles& get_handles() const;
        bool has_fill() const;
        CT_Fill* mutable_fill();
        const CT_Fill& get_fill() const;
        bool has_stroke() const;
        CT_Stroke* mutable_stroke();
        const CT_Stroke& get_stroke() const;
        bool has_shadow() const;
        CT_Shadow* mutable_shadow();
        const CT_Shadow& get_shadow() const;
        bool has_textbox() const;
        CT_Textbox* mutable_textbox();
        const CT_Textbox& get_textbox() const;
        bool has_textpath() const;
        CT_TextPath* mutable_textpath();
        const CT_TextPath& get_textpath() const;
        bool has_imagedata() const;
        CT_ImageData* mutable_imagedata();
        const CT_ImageData& get_imagedata() const;
        bool has_o_skew() const;
        ns_o::CT_Skew* mutable_o_skew();
        const ns_o::CT_Skew& get_o_skew() const;
        bool has_o_extrusion() const;
        ns_o::CT_Extrusion* mutable_o_extrusion();
        const ns_o::CT_Extrusion& get_o_extrusion() const;
        bool has_o_callout() const;
        ns_o::CT_Callout* mutable_o_callout();
        const ns_o::CT_Callout& get_o_callout() const;
        bool has_o_lock() const;
        ns_o::CT_Lock* mutable_o_lock();
        const ns_o::CT_Lock& get_o_lock() const;
        bool has_o_clippath() const;
        ns_o::CT_ClipPath* mutable_o_clippath();
        const ns_o::CT_ClipPath& get_o_clippath() const;
        bool has_o_signatureline() const;
        ns_o::CT_SignatureLine* mutable_o_signatureline();
        const ns_o::CT_SignatureLine& get_o_signatureline() const;
        bool has_w10_wrap() const;
        ns_w10::CT_Wrap* mutable_w10_wrap();
        const ns_w10::CT_Wrap& get_w10_wrap() const;
        bool has_w10_anchorlock() const;
        ns_w10::CT_AnchorLock* mutable_w10_anchorlock();
        const ns_w10::CT_AnchorLock& get_w10_anchorlock() const;
        bool has_w10_bordertop() const;
        ns_w10::CT_Border* mutable_w10_bordertop();
        const ns_w10::CT_Border& get_w10_bordertop() const;
        bool has_w10_borderbottom() const;
        ns_w10::CT_Border* mutable_w10_borderbottom();
        const ns_w10::CT_Border& get_w10_borderbottom() const;
        bool has_w10_borderleft() const;
        ns_w10::CT_Border* mutable_w10_borderleft();
        const ns_w10::CT_Border& get_w10_borderleft() const;
        bool has_w10_borderright() const;
        ns_w10::CT_Border* mutable_w10_borderright();
        const ns_w10::CT_Border& get_w10_borderright() const;
        bool has_x_ClientData() const;
        ns_x::CT_ClientData* mutable_x_ClientData();
        const ns_x::CT_ClientData& get_x_ClientData() const;
        bool has_pvml_textdata() const;
        ns_pvml::CT_Rel* mutable_pvml_textdata();
        const ns_pvml::CT_Rel& get_pvml_textdata() const;
    protected:
    private:
        bool m_has_path;
        CT_Path* m_path;
        bool m_has_formulas;
        CT_Formulas* m_formulas;
        bool m_has_handles;
        CT_Handles* m_handles;
        bool m_has_fill;
        CT_Fill* m_fill;
        bool m_has_stroke;
        CT_Stroke* m_stroke;
        bool m_has_shadow;
        CT_Shadow* m_shadow;
        bool m_has_textbox;
        CT_Textbox* m_textbox;
        bool m_has_textpath;
        CT_TextPath* m_textpath;
        bool m_has_imagedata;
        CT_ImageData* m_imagedata;
        bool m_has_o_skew;
        ns_o::CT_Skew* m_o_skew;
        bool m_has_o_extrusion;
        ns_o::CT_Extrusion* m_o_extrusion;
        bool m_has_o_callout;
        ns_o::CT_Callout* m_o_callout;
        bool m_has_o_lock;
        ns_o::CT_Lock* m_o_lock;
        bool m_has_o_clippath;
        ns_o::CT_ClipPath* m_o_clippath;
        bool m_has_o_signatureline;
        ns_o::CT_SignatureLine* m_o_signatureline;
        bool m_has_w10_wrap;
        ns_w10::CT_Wrap* m_w10_wrap;
        bool m_has_w10_anchorlock;
        ns_w10::CT_AnchorLock* m_w10_anchorlock;
        bool m_has_w10_bordertop;
        ns_w10::CT_Border* m_w10_bordertop;
        bool m_has_w10_borderbottom;
        ns_w10::CT_Border* m_w10_borderbottom;
        bool m_has_w10_borderleft;
        ns_w10::CT_Border* m_w10_borderleft;
        bool m_has_w10_borderright;
        ns_w10::CT_Border* m_w10_borderright;
        bool m_has_x_ClientData;
        ns_x::CT_ClientData* m_x_ClientData;
        bool m_has_pvml_textdata;
        ns_pvml::CT_Rel* m_pvml_textdata;
    };
    vector<ChildGroup_1*> m_childGroupList_1;
    static CT_RoundRect* default_instance_;
    bool m_has_arcsize_attr;
    XSD::string_ m_arcsize_attr;
};

class shape_element: public Element
{
public:
    shape_element();
    ~shape_element();
    CT_Path* add_path();
    CT_Formulas* add_formulas();
    CT_Handles* add_handles();
    CT_Fill* add_fill();
    CT_Stroke* add_stroke();
    CT_Shadow* add_shadow();
    CT_Textbox* add_textbox();
    CT_TextPath* add_textpath();
    CT_ImageData* add_imagedata();
    ns_o::CT_Skew* add_o_skew();
    ns_o::CT_Extrusion* add_o_extrusion();
    ns_o::CT_Callout* add_o_callout();
    ns_o::CT_Lock* add_o_lock();
    ns_o::CT_ClipPath* add_o_clippath();
    ns_o::CT_SignatureLine* add_o_signatureline();
    ns_w10::CT_Wrap* add_w10_wrap();
    ns_w10::CT_AnchorLock* add_w10_anchorlock();
    ns_w10::CT_Border* add_w10_bordertop();
    ns_w10::CT_Border* add_w10_borderbottom();
    ns_w10::CT_Border* add_w10_borderleft();
    ns_w10::CT_Border* add_w10_borderright();
    ns_x::CT_ClientData* add_x_ClientData();
    ns_pvml::CT_Rel* add_pvml_textdata();
    ns_o::CT_Ink* add_o_ink();
    ns_pvml::CT_Empty* add_pvml_iscomment();
    ns_o::CT_EquationXml* add_o_equationxml();
    void clear();
    void toXml(std::ostream& _outStream) const;
    static const shape_element& default_instance();
    bool has_type_attr() const;
    void set_type_attr(const XSD::string_& _type_attr);
    const XSD::string_& get_type_attr() const;
    bool has_adj_attr() const;
    void set_adj_attr(const XSD::string_& _adj_attr);
    const XSD::string_& get_adj_attr() const;
    bool has_path_attr() const;
    void set_path_attr(const XSD::string_& _path_attr);
    const XSD::string_& get_path_attr() const;
    bool has_o_gfxdata_attr() const;
    void set_o_gfxdata_attr(const XSD::base64Binary_& _o_gfxdata_attr);
    const XSD::base64Binary_& get_o_gfxdata_attr() const;
    bool has_equationxml_attr() const;
    void set_equationxml_attr(const XSD::string_& _equationxml_attr);
    const XSD::string_& get_equationxml_attr() const;
protected:
private:
    class ChildGroup_1
    {
    public:
        ChildGroup_1();
        bool has_path() const;
        CT_Path* mutable_path();
        const CT_Path& get_path() const;
        bool has_formulas() const;
        CT_Formulas* mutable_formulas();
        const CT_Formulas& get_formulas() const;
        bool has_handles() const;
        CT_Handles* mutable_handles();
        const CT_Handles& get_handles() const;
        bool has_fill() const;
        CT_Fill* mutable_fill();
        const CT_Fill& get_fill() const;
        bool has_stroke() const;
        CT_Stroke* mutable_stroke();
        const CT_Stroke& get_stroke() const;
        bool has_shadow() const;
        CT_Shadow* mutable_shadow();
        const CT_Shadow& get_shadow() const;
        bool has_textbox() const;
        CT_Textbox* mutable_textbox();
        const CT_Textbox& get_textbox() const;
        bool has_textpath() const;
        CT_TextPath* mutable_textpath();
        const CT_TextPath& get_textpath() const;
        bool has_imagedata() const;
        CT_ImageData* mutable_imagedata();
        const CT_ImageData& get_imagedata() const;
        bool has_o_skew() const;
        ns_o::CT_Skew* mutable_o_skew();
        const ns_o::CT_Skew& get_o_skew() const;
        bool has_o_extrusion() const;
        ns_o::CT_Extrusion* mutable_o_extrusion();
        const ns_o::CT_Extrusion& get_o_extrusion() const;
        bool has_o_callout() const;
        ns_o::CT_Callout* mutable_o_callout();
        const ns_o::CT_Callout& get_o_callout() const;
        bool has_o_lock() const;
        ns_o::CT_Lock* mutable_o_lock();
        const ns_o::CT_Lock& get_o_lock() const;
        bool has_o_clippath() const;
        ns_o::CT_ClipPath* mutable_o_clippath();
        const ns_o::CT_ClipPath& get_o_clippath() const;
        bool has_o_signatureline() const;
        ns_o::CT_SignatureLine* mutable_o_signatureline();
        const ns_o::CT_SignatureLine& get_o_signatureline() const;
        bool has_w10_wrap() const;
        ns_w10::CT_Wrap* mutable_w10_wrap();
        const ns_w10::CT_Wrap& get_w10_wrap() const;
        bool has_w10_anchorlock() const;
        ns_w10::CT_AnchorLock* mutable_w10_anchorlock();
        const ns_w10::CT_AnchorLock& get_w10_anchorlock() const;
        bool has_w10_bordertop() const;
        ns_w10::CT_Border* mutable_w10_bordertop();
        const ns_w10::CT_Border& get_w10_bordertop() const;
        bool has_w10_borderbottom() const;
        ns_w10::CT_Border* mutable_w10_borderbottom();
        const ns_w10::CT_Border& get_w10_borderbottom() const;
        bool has_w10_borderleft() const;
        ns_w10::CT_Border* mutable_w10_borderleft();
        const ns_w10::CT_Border& get_w10_borderleft() const;
        bool has_w10_borderright() const;
        ns_w10::CT_Border* mutable_w10_borderright();
        const ns_w10::CT_Border& get_w10_borderright() const;
        bool has_x_ClientData() const;
        ns_x::CT_ClientData* mutable_x_ClientData();
        const ns_x::CT_ClientData& get_x_ClientData() const;
        bool has_pvml_textdata() const;
        ns_pvml::CT_Rel* mutable_pvml_textdata();
        const ns_pvml::CT_Rel& get_pvml_textdata() const;
        bool has_o_ink() const;
        ns_o::CT_Ink* mutable_o_ink();
        const ns_o::CT_Ink& get_o_ink() const;
        bool has_pvml_iscomment() const;
        ns_pvml::CT_Empty* mutable_pvml_iscomment();
        const ns_pvml::CT_Empty& get_pvml_iscomment() const;
        bool has_o_equationxml() const;
        ns_o::CT_EquationXml* mutable_o_equationxml();
        const ns_o::CT_EquationXml& get_o_equationxml() const;
    protected:
    private:
        bool m_has_path;
        CT_Path* m_path;
        bool m_has_formulas;
        CT_Formulas* m_formulas;
        bool m_has_handles;
        CT_Handles* m_handles;
        bool m_has_fill;
        CT_Fill* m_fill;
        bool m_has_stroke;
        CT_Stroke* m_stroke;
        bool m_has_shadow;
        CT_Shadow* m_shadow;
        bool m_has_textbox;
        CT_Textbox* m_textbox;
        bool m_has_textpath;
        CT_TextPath* m_textpath;
        bool m_has_imagedata;
        CT_ImageData* m_imagedata;
        bool m_has_o_skew;
        ns_o::CT_Skew* m_o_skew;
        bool m_has_o_extrusion;
        ns_o::CT_Extrusion* m_o_extrusion;
        bool m_has_o_callout;
        ns_o::CT_Callout* m_o_callout;
        bool m_has_o_lock;
        ns_o::CT_Lock* m_o_lock;
        bool m_has_o_clippath;
        ns_o::CT_ClipPath* m_o_clippath;
        bool m_has_o_signatureline;
        ns_o::CT_SignatureLine* m_o_signatureline;
        bool m_has_w10_wrap;
        ns_w10::CT_Wrap* m_w10_wrap;
        bool m_has_w10_anchorlock;
        ns_w10::CT_AnchorLock* m_w10_anchorlock;
        bool m_has_w10_bordertop;
        ns_w10::CT_Border* m_w10_bordertop;
        bool m_has_w10_borderbottom;
        ns_w10::CT_Border* m_w10_borderbottom;
        bool m_has_w10_borderleft;
        ns_w10::CT_Border* m_w10_borderleft;
        bool m_has_w10_borderright;
        ns_w10::CT_Border* m_w10_borderright;
        bool m_has_x_ClientData;
        ns_x::CT_ClientData* m_x_ClientData;
        bool m_has_pvml_textdata;
        ns_pvml::CT_Rel* m_pvml_textdata;
        bool m_has_o_ink;
        ns_o::CT_Ink* m_o_ink;
        bool m_has_pvml_iscomment;
        ns_pvml::CT_Empty* m_pvml_iscomment;
        bool m_has_o_equationxml;
        ns_o::CT_EquationXml* m_o_equationxml;
    };
    vector<ChildGroup_1*> m_childGroupList_1;
    static shape_element* default_instance_;
    bool m_has_type_attr;
    XSD::string_ m_type_attr;
    bool m_has_adj_attr;
    XSD::string_ m_adj_attr;
    bool m_has_path_attr;
    XSD::string_ m_path_attr;
    bool m_has_o_gfxdata_attr;
    XSD::base64Binary_ m_o_gfxdata_attr;
    bool m_has_equationxml_attr;
    XSD::string_ m_equationxml_attr;
};

class shapetype_element: public Element
{
public:
    shapetype_element();
    ~shapetype_element();
    CT_Path* add_path();
    CT_Formulas* add_formulas();
    CT_Handles* add_handles();
    CT_Fill* add_fill();
    CT_Stroke* add_stroke();
    CT_Shadow* add_shadow();
    CT_Textbox* add_textbox();
    CT_TextPath* add_textpath();
    CT_ImageData* add_imagedata();
    ns_o::CT_Skew* add_o_skew();
    ns_o::CT_Extrusion* add_o_extrusion();
    ns_o::CT_Callout* add_o_callout();
    ns_o::CT_Lock* add_o_lock();
    ns_o::CT_ClipPath* add_o_clippath();
    ns_o::CT_SignatureLine* add_o_signatureline();
    ns_w10::CT_Wrap* add_w10_wrap();
    ns_w10::CT_AnchorLock* add_w10_anchorlock();
    ns_w10::CT_Border* add_w10_bordertop();
    ns_w10::CT_Border* add_w10_borderbottom();
    ns_w10::CT_Border* add_w10_borderleft();
    ns_w10::CT_Border* add_w10_borderright();
    ns_x::CT_ClientData* add_x_ClientData();
    ns_pvml::CT_Rel* add_pvml_textdata();
    bool has_o_complex() const;
    ns_o::CT_Complex* mutable_o_complex();
    const ns_o::CT_Complex& get_o_complex() const;
    void clear();
    void toXml(std::ostream& _outStream) const;
    static const shapetype_element& default_instance();
    bool has_adj_attr() const;
    void set_adj_attr(const XSD::string_& _adj_attr);
    const XSD::string_& get_adj_attr() const;
    bool has_path_attr() const;
    void set_path_attr(const XSD::string_& _path_attr);
    const XSD::string_& get_path_attr() const;
    bool has_o_master_attr() const;
    void set_o_master_attr(const XSD::string_& _o_master_attr);
    const XSD::string_& get_o_master_attr() const;
protected:
private:
    class ChildGroup_1
    {
    public:
        ChildGroup_1();
        bool has_path() const;
        CT_Path* mutable_path();
        const CT_Path& get_path() const;
        bool has_formulas() const;
        CT_Formulas* mutable_formulas();
        const CT_Formulas& get_formulas() const;
        bool has_handles() const;
        CT_Handles* mutable_handles();
        const CT_Handles& get_handles() const;
        bool has_fill() const;
        CT_Fill* mutable_fill();
        const CT_Fill& get_fill() const;
        bool has_stroke() const;
        CT_Stroke* mutable_stroke();
        const CT_Stroke& get_stroke() const;
        bool has_shadow() const;
        CT_Shadow* mutable_shadow();
        const CT_Shadow& get_shadow() const;
        bool has_textbox() const;
        CT_Textbox* mutable_textbox();
        const CT_Textbox& get_textbox() const;
        bool has_textpath() const;
        CT_TextPath* mutable_textpath();
        const CT_TextPath& get_textpath() const;
        bool has_imagedata() const;
        CT_ImageData* mutable_imagedata();
        const CT_ImageData& get_imagedata() const;
        bool has_o_skew() const;
        ns_o::CT_Skew* mutable_o_skew();
        const ns_o::CT_Skew& get_o_skew() const;
        bool has_o_extrusion() const;
        ns_o::CT_Extrusion* mutable_o_extrusion();
        const ns_o::CT_Extrusion& get_o_extrusion() const;
        bool has_o_callout() const;
        ns_o::CT_Callout* mutable_o_callout();
        const ns_o::CT_Callout& get_o_callout() const;
        bool has_o_lock() const;
        ns_o::CT_Lock* mutable_o_lock();
        const ns_o::CT_Lock& get_o_lock() const;
        bool has_o_clippath() const;
        ns_o::CT_ClipPath* mutable_o_clippath();
        const ns_o::CT_ClipPath& get_o_clippath() const;
        bool has_o_signatureline() const;
        ns_o::CT_SignatureLine* mutable_o_signatureline();
        const ns_o::CT_SignatureLine& get_o_signatureline() const;
        bool has_w10_wrap() const;
        ns_w10::CT_Wrap* mutable_w10_wrap();
        const ns_w10::CT_Wrap& get_w10_wrap() const;
        bool has_w10_anchorlock() const;
        ns_w10::CT_AnchorLock* mutable_w10_anchorlock();
        const ns_w10::CT_AnchorLock& get_w10_anchorlock() const;
        bool has_w10_bordertop() const;
        ns_w10::CT_Border* mutable_w10_bordertop();
        const ns_w10::CT_Border& get_w10_bordertop() const;
        bool has_w10_borderbottom() const;
        ns_w10::CT_Border* mutable_w10_borderbottom();
        const ns_w10::CT_Border& get_w10_borderbottom() const;
        bool has_w10_borderleft() const;
        ns_w10::CT_Border* mutable_w10_borderleft();
        const ns_w10::CT_Border& get_w10_borderleft() const;
        bool has_w10_borderright() const;
        ns_w10::CT_Border* mutable_w10_borderright();
        const ns_w10::CT_Border& get_w10_borderright() const;
        bool has_x_ClientData() const;
        ns_x::CT_ClientData* mutable_x_ClientData();
        const ns_x::CT_ClientData& get_x_ClientData() const;
        bool has_pvml_textdata() const;
        ns_pvml::CT_Rel* mutable_pvml_textdata();
        const ns_pvml::CT_Rel& get_pvml_textdata() const;
    protected:
    private:
        bool m_has_path;
        CT_Path* m_path;
        bool m_has_formulas;
        CT_Formulas* m_formulas;
        bool m_has_handles;
        CT_Handles* m_handles;
        bool m_has_fill;
        CT_Fill* m_fill;
        bool m_has_stroke;
        CT_Stroke* m_stroke;
        bool m_has_shadow;
        CT_Shadow* m_shadow;
        bool m_has_textbox;
        CT_Textbox* m_textbox;
        bool m_has_textpath;
        CT_TextPath* m_textpath;
        bool m_has_imagedata;
        CT_ImageData* m_imagedata;
        bool m_has_o_skew;
        ns_o::CT_Skew* m_o_skew;
        bool m_has_o_extrusion;
        ns_o::CT_Extrusion* m_o_extrusion;
        bool m_has_o_callout;
        ns_o::CT_Callout* m_o_callout;
        bool m_has_o_lock;
        ns_o::CT_Lock* m_o_lock;
        bool m_has_o_clippath;
        ns_o::CT_ClipPath* m_o_clippath;
        bool m_has_o_signatureline;
        ns_o::CT_SignatureLine* m_o_signatureline;
        bool m_has_w10_wrap;
        ns_w10::CT_Wrap* m_w10_wrap;
        bool m_has_w10_anchorlock;
        ns_w10::CT_AnchorLock* m_w10_anchorlock;
        bool m_has_w10_bordertop;
        ns_w10::CT_Border* m_w10_bordertop;
        bool m_has_w10_borderbottom;
        ns_w10::CT_Border* m_w10_borderbottom;
        bool m_has_w10_borderleft;
        ns_w10::CT_Border* m_w10_borderleft;
        bool m_has_w10_borderright;
        ns_w10::CT_Border* m_w10_borderright;
        bool m_has_x_ClientData;
        ns_x::CT_ClientData* m_x_ClientData;
        bool m_has_pvml_textdata;
        ns_pvml::CT_Rel* m_pvml_textdata;
    };
    vector<ChildGroup_1*> m_childGroupList_1;
    bool m_has_o_complex;
    ns_o::CT_Complex* m_o_complex;
    static shapetype_element* default_instance_;
    bool m_has_adj_attr;
    XSD::string_ m_adj_attr;
    bool m_has_path_attr;
    XSD::string_ m_path_attr;
    bool m_has_o_master_attr;
    XSD::string_ m_o_master_attr;
};

class group_element: public Element
{
public:
    group_element();
    ~group_element();
    CT_Path* add_path();
    CT_Formulas* add_formulas();
    CT_Handles* add_handles();
    CT_Fill* add_fill();
    CT_Stroke* add_stroke();
    CT_Shadow* add_shadow();
    CT_Textbox* add_textbox();
    CT_TextPath* add_textpath();
    CT_ImageData* add_imagedata();
    ns_o::CT_Skew* add_o_skew();
    ns_o::CT_Extrusion* add_o_extrusion();
    ns_o::CT_Callout* add_o_callout();
    ns_o::CT_Lock* add_o_lock();
    ns_o::CT_ClipPath* add_o_clippath();
    ns_o::CT_SignatureLine* add_o_signatureline();
    ns_w10::CT_Wrap* add_w10_wrap();
    ns_w10::CT_AnchorLock* add_w10_anchorlock();
    ns_w10::CT_Border* add_w10_bordertop();
    ns_w10::CT_Border* add_w10_borderbottom();
    ns_w10::CT_Border* add_w10_borderleft();
    ns_w10::CT_Border* add_w10_borderright();
    ns_x::CT_ClientData* add_x_ClientData();
    ns_pvml::CT_Rel* add_pvml_textdata();
    CT_Group* add_group();
    CT_Shape* add_shape();
    CT_Shapetype* add_shapetype();
    CT_Arc* add_arc();
    CT_Curve* add_curve();
    CT_Image* add_image();
    CT_Line* add_line();
    CT_Oval* add_oval();
    CT_PolyLine* add_polyline();
    CT_Rect* add_rect();
    CT_RoundRect* add_roundrect();
    ns_o::CT_Diagram* add_o_diagram();
    void clear();
    void toXml(std::ostream& _outStream) const;
    static const group_element& default_instance();
    bool has_filled_attr() const;
    void set_filled_attr(const ns_s::ST_TrueFalse& _filled_attr);
    const ns_s::ST_TrueFalse& get_filled_attr() const;
    bool has_fillcolor_attr() const;
    void set_fillcolor_attr(const ns_s::ST_ColorType& _fillcolor_attr);
    const ns_s::ST_ColorType& get_fillcolor_attr() const;
    bool has_editas_attr() const;
    void set_editas_attr(const ST_EditAs& _editas_attr);
    const ST_EditAs& get_editas_attr() const;
    bool has_o_tableproperties_attr() const;
    void set_o_tableproperties_attr(const XSD::string_& _o_tableproperties_attr);
    const XSD::string_& get_o_tableproperties_attr() const;
    bool has_o_tablelimits_attr() const;
    void set_o_tablelimits_attr(const XSD::string_& _o_tablelimits_attr);
    const XSD::string_& get_o_tablelimits_attr() const;
protected:
private:
    class ChildGroup_1
    {
    public:
        ChildGroup_1();
        bool has_path() const;
        CT_Path* mutable_path();
        const CT_Path& get_path() const;
        bool has_formulas() const;
        CT_Formulas* mutable_formulas();
        const CT_Formulas& get_formulas() const;
        bool has_handles() const;
        CT_Handles* mutable_handles();
        const CT_Handles& get_handles() const;
        bool has_fill() const;
        CT_Fill* mutable_fill();
        const CT_Fill& get_fill() const;
        bool has_stroke() const;
        CT_Stroke* mutable_stroke();
        const CT_Stroke& get_stroke() const;
        bool has_shadow() const;
        CT_Shadow* mutable_shadow();
        const CT_Shadow& get_shadow() const;
        bool has_textbox() const;
        CT_Textbox* mutable_textbox();
        const CT_Textbox& get_textbox() const;
        bool has_textpath() const;
        CT_TextPath* mutable_textpath();
        const CT_TextPath& get_textpath() const;
        bool has_imagedata() const;
        CT_ImageData* mutable_imagedata();
        const CT_ImageData& get_imagedata() const;
        bool has_o_skew() const;
        ns_o::CT_Skew* mutable_o_skew();
        const ns_o::CT_Skew& get_o_skew() const;
        bool has_o_extrusion() const;
        ns_o::CT_Extrusion* mutable_o_extrusion();
        const ns_o::CT_Extrusion& get_o_extrusion() const;
        bool has_o_callout() const;
        ns_o::CT_Callout* mutable_o_callout();
        const ns_o::CT_Callout& get_o_callout() const;
        bool has_o_lock() const;
        ns_o::CT_Lock* mutable_o_lock();
        const ns_o::CT_Lock& get_o_lock() const;
        bool has_o_clippath() const;
        ns_o::CT_ClipPath* mutable_o_clippath();
        const ns_o::CT_ClipPath& get_o_clippath() const;
        bool has_o_signatureline() const;
        ns_o::CT_SignatureLine* mutable_o_signatureline();
        const ns_o::CT_SignatureLine& get_o_signatureline() const;
        bool has_w10_wrap() const;
        ns_w10::CT_Wrap* mutable_w10_wrap();
        const ns_w10::CT_Wrap& get_w10_wrap() const;
        bool has_w10_anchorlock() const;
        ns_w10::CT_AnchorLock* mutable_w10_anchorlock();
        const ns_w10::CT_AnchorLock& get_w10_anchorlock() const;
        bool has_w10_bordertop() const;
        ns_w10::CT_Border* mutable_w10_bordertop();
        const ns_w10::CT_Border& get_w10_bordertop() const;
        bool has_w10_borderbottom() const;
        ns_w10::CT_Border* mutable_w10_borderbottom();
        const ns_w10::CT_Border& get_w10_borderbottom() const;
        bool has_w10_borderleft() const;
        ns_w10::CT_Border* mutable_w10_borderleft();
        const ns_w10::CT_Border& get_w10_borderleft() const;
        bool has_w10_borderright() const;
        ns_w10::CT_Border* mutable_w10_borderright();
        const ns_w10::CT_Border& get_w10_borderright() const;
        bool has_x_ClientData() const;
        ns_x::CT_ClientData* mutable_x_ClientData();
        const ns_x::CT_ClientData& get_x_ClientData() const;
        bool has_pvml_textdata() const;
        ns_pvml::CT_Rel* mutable_pvml_textdata();
        const ns_pvml::CT_Rel& get_pvml_textdata() const;
        bool has_group() const;
        CT_Group* mutable_group();
        const CT_Group& get_group() const;
        bool has_shape() const;
        CT_Shape* mutable_shape();
        const CT_Shape& get_shape() const;
        bool has_shapetype() const;
        CT_Shapetype* mutable_shapetype();
        const CT_Shapetype& get_shapetype() const;
        bool has_arc() const;
        CT_Arc* mutable_arc();
        const CT_Arc& get_arc() const;
        bool has_curve() const;
        CT_Curve* mutable_curve();
        const CT_Curve& get_curve() const;
        bool has_image() const;
        CT_Image* mutable_image();
        const CT_Image& get_image() const;
        bool has_line() const;
        CT_Line* mutable_line();
        const CT_Line& get_line() const;
        bool has_oval() const;
        CT_Oval* mutable_oval();
        const CT_Oval& get_oval() const;
        bool has_polyline() const;
        CT_PolyLine* mutable_polyline();
        const CT_PolyLine& get_polyline() const;
        bool has_rect() const;
        CT_Rect* mutable_rect();
        const CT_Rect& get_rect() const;
        bool has_roundrect() const;
        CT_RoundRect* mutable_roundrect();
        const CT_RoundRect& get_roundrect() const;
        bool has_o_diagram() const;
        ns_o::CT_Diagram* mutable_o_diagram();
        const ns_o::CT_Diagram& get_o_diagram() const;
    protected:
    private:
        bool m_has_path;
        CT_Path* m_path;
        bool m_has_formulas;
        CT_Formulas* m_formulas;
        bool m_has_handles;
        CT_Handles* m_handles;
        bool m_has_fill;
        CT_Fill* m_fill;
        bool m_has_stroke;
        CT_Stroke* m_stroke;
        bool m_has_shadow;
        CT_Shadow* m_shadow;
        bool m_has_textbox;
        CT_Textbox* m_textbox;
        bool m_has_textpath;
        CT_TextPath* m_textpath;
        bool m_has_imagedata;
        CT_ImageData* m_imagedata;
        bool m_has_o_skew;
        ns_o::CT_Skew* m_o_skew;
        bool m_has_o_extrusion;
        ns_o::CT_Extrusion* m_o_extrusion;
        bool m_has_o_callout;
        ns_o::CT_Callout* m_o_callout;
        bool m_has_o_lock;
        ns_o::CT_Lock* m_o_lock;
        bool m_has_o_clippath;
        ns_o::CT_ClipPath* m_o_clippath;
        bool m_has_o_signatureline;
        ns_o::CT_SignatureLine* m_o_signatureline;
        bool m_has_w10_wrap;
        ns_w10::CT_Wrap* m_w10_wrap;
        bool m_has_w10_anchorlock;
        ns_w10::CT_AnchorLock* m_w10_anchorlock;
        bool m_has_w10_bordertop;
        ns_w10::CT_Border* m_w10_bordertop;
        bool m_has_w10_borderbottom;
        ns_w10::CT_Border* m_w10_borderbottom;
        bool m_has_w10_borderleft;
        ns_w10::CT_Border* m_w10_borderleft;
        bool m_has_w10_borderright;
        ns_w10::CT_Border* m_w10_borderright;
        bool m_has_x_ClientData;
        ns_x::CT_ClientData* m_x_ClientData;
        bool m_has_pvml_textdata;
        ns_pvml::CT_Rel* m_pvml_textdata;
        bool m_has_group;
        CT_Group* m_group;
        bool m_has_shape;
        CT_Shape* m_shape;
        bool m_has_shapetype;
        CT_Shapetype* m_shapetype;
        bool m_has_arc;
        CT_Arc* m_arc;
        bool m_has_curve;
        CT_Curve* m_curve;
        bool m_has_image;
        CT_Image* m_image;
        bool m_has_line;
        CT_Line* m_line;
        bool m_has_oval;
        CT_Oval* m_oval;
        bool m_has_polyline;
        CT_PolyLine* m_polyline;
        bool m_has_rect;
        CT_Rect* m_rect;
        bool m_has_roundrect;
        CT_RoundRect* m_roundrect;
        bool m_has_o_diagram;
        ns_o::CT_Diagram* m_o_diagram;
    };
    vector<ChildGroup_1*> m_childGroupList_1;
    static group_element* default_instance_;
    bool m_has_filled_attr;
    ns_s::ST_TrueFalse* m_filled_attr;
    bool m_has_fillcolor_attr;
    ns_s::ST_ColorType* m_fillcolor_attr;
    bool m_has_editas_attr;
    ST_EditAs* m_editas_attr;
    bool m_has_o_tableproperties_attr;
    XSD::string_ m_o_tableproperties_attr;
    bool m_has_o_tablelimits_attr;
    XSD::string_ m_o_tablelimits_attr;
};

class background_element: public Element
{
public:
    background_element();
    ~background_element();
    bool has_fill() const;
    CT_Fill* mutable_fill();
    const CT_Fill& get_fill() const;
    void clear();
    void toXml(std::ostream& _outStream) const;
    static const background_element& default_instance();
    bool has_id_attr() const;
    void set_id_attr(const XSD::string_& _id_attr);
    const XSD::string_& get_id_attr() const;
    bool has_filled_attr() const;
    void set_filled_attr(const ns_s::ST_TrueFalse& _filled_attr);
    const ns_s::ST_TrueFalse& get_filled_attr() const;
    bool has_fillcolor_attr() const;
    void set_fillcolor_attr(const ns_s::ST_ColorType& _fillcolor_attr);
    const ns_s::ST_ColorType& get_fillcolor_attr() const;
    bool has_o_bwmode_attr() const;
    void set_o_bwmode_attr(const ns_o::ST_BWMode& _o_bwmode_attr);
    const ns_o::ST_BWMode& get_o_bwmode_attr() const;
    bool has_o_bwpure_attr() const;
    void set_o_bwpure_attr(const ns_o::ST_BWMode& _o_bwpure_attr);
    const ns_o::ST_BWMode& get_o_bwpure_attr() const;
    bool has_o_bwnormal_attr() const;
    void set_o_bwnormal_attr(const ns_o::ST_BWMode& _o_bwnormal_attr);
    const ns_o::ST_BWMode& get_o_bwnormal_attr() const;
    bool has_o_targetscreensize_attr() const;
    void set_o_targetscreensize_attr(const ns_o::ST_ScreenSize& _o_targetscreensize_attr);
    const ns_o::ST_ScreenSize& get_o_targetscreensize_attr() const;
protected:
private:
    bool m_has_fill;
    CT_Fill* m_fill;
    static background_element* default_instance_;
    bool m_has_id_attr;
    XSD::string_ m_id_attr;
    bool m_has_filled_attr;
    ns_s::ST_TrueFalse* m_filled_attr;
    bool m_has_fillcolor_attr;
    ns_s::ST_ColorType* m_fillcolor_attr;
    bool m_has_o_bwmode_attr;
    ns_o::ST_BWMode* m_o_bwmode_attr;
    bool m_has_o_bwpure_attr;
    ns_o::ST_BWMode* m_o_bwpure_attr;
    bool m_has_o_bwnormal_attr;
    ns_o::ST_BWMode* m_o_bwnormal_attr;
    bool m_has_o_targetscreensize_attr;
    ns_o::ST_ScreenSize* m_o_targetscreensize_attr;
};

class fill_element: public Element
{
public:
    fill_element();
    ~fill_element();
    bool has_o_fill() const;
    ns_o::CT_Fill* mutable_o_fill();
    const ns_o::CT_Fill& get_o_fill() const;
    void clear();
    void toXml(std::ostream& _outStream) const;
    static const fill_element& default_instance();
    bool has_id_attr() const;
    void set_id_attr(const XSD::string_& _id_attr);
    const XSD::string_& get_id_attr() const;
    bool has_type_attr() const;
    void set_type_attr(const ST_FillType& _type_attr);
    const ST_FillType& get_type_attr() const;
    bool has_on_attr() const;
    void set_on_attr(const ns_s::ST_TrueFalse& _on_attr);
    const ns_s::ST_TrueFalse& get_on_attr() const;
    bool has_color_attr() const;
    void set_color_attr(const ns_s::ST_ColorType& _color_attr);
    const ns_s::ST_ColorType& get_color_attr() const;
    bool has_opacity_attr() const;
    void set_opacity_attr(const XSD::string_& _opacity_attr);
    const XSD::string_& get_opacity_attr() const;
    bool has_color2_attr() const;
    void set_color2_attr(const ns_s::ST_ColorType& _color2_attr);
    const ns_s::ST_ColorType& get_color2_attr() const;
    bool has_src_attr() const;
    void set_src_attr(const XSD::string_& _src_attr);
    const XSD::string_& get_src_attr() const;
    bool has_o_href_attr() const;
    void set_o_href_attr(const XSD::string_& _o_href_attr);
    const XSD::string_& get_o_href_attr() const;
    bool has_o_althref_attr() const;
    void set_o_althref_attr(const XSD::string_& _o_althref_attr);
    const XSD::string_& get_o_althref_attr() const;
    bool has_size_attr() const;
    void set_size_attr(const XSD::string_& _size_attr);
    const XSD::string_& get_size_attr() const;
    bool has_origin_attr() const;
    void set_origin_attr(const XSD::string_& _origin_attr);
    const XSD::string_& get_origin_attr() const;
    bool has_position_attr() const;
    void set_position_attr(const XSD::string_& _position_attr);
    const XSD::string_& get_position_attr() const;
    bool has_aspect_attr() const;
    void set_aspect_attr(const ST_ImageAspect& _aspect_attr);
    const ST_ImageAspect& get_aspect_attr() const;
    bool has_colors_attr() const;
    void set_colors_attr(const XSD::string_& _colors_attr);
    const XSD::string_& get_colors_attr() const;
    bool has_angle_attr() const;
    void set_angle_attr(const XSD::decimal_& _angle_attr);
    const XSD::decimal_& get_angle_attr() const;
    bool has_alignshape_attr() const;
    void set_alignshape_attr(const ns_s::ST_TrueFalse& _alignshape_attr);
    const ns_s::ST_TrueFalse& get_alignshape_attr() const;
    bool has_focus_attr() const;
    void set_focus_attr(const XSD::string_& _focus_attr);
    const XSD::string_& get_focus_attr() const;
    bool has_focussize_attr() const;
    void set_focussize_attr(const XSD::string_& _focussize_attr);
    const XSD::string_& get_focussize_attr() const;
    bool has_focusposition_attr() const;
    void set_focusposition_attr(const XSD::string_& _focusposition_attr);
    const XSD::string_& get_focusposition_attr() const;
    bool has_method_attr() const;
    void set_method_attr(const ST_FillMethod& _method_attr);
    const ST_FillMethod& get_method_attr() const;
    bool has_o_detectmouseclick_attr() const;
    void set_o_detectmouseclick_attr(const ns_s::ST_TrueFalse& _o_detectmouseclick_attr);
    const ns_s::ST_TrueFalse& get_o_detectmouseclick_attr() const;
    bool has_o_title_attr() const;
    void set_o_title_attr(const XSD::string_& _o_title_attr);
    const XSD::string_& get_o_title_attr() const;
    bool has_o_opacity2_attr() const;
    void set_o_opacity2_attr(const XSD::string_& _o_opacity2_attr);
    const XSD::string_& get_o_opacity2_attr() const;
    bool has_recolor_attr() const;
    void set_recolor_attr(const ns_s::ST_TrueFalse& _recolor_attr);
    const ns_s::ST_TrueFalse& get_recolor_attr() const;
    bool has_rotate_attr() const;
    void set_rotate_attr(const ns_s::ST_TrueFalse& _rotate_attr);
    const ns_s::ST_TrueFalse& get_rotate_attr() const;
    bool has_r_id_attr() const;
    void set_r_id_attr(const ns_r::ST_RelationshipId& _r_id_attr);
    const ns_r::ST_RelationshipId& get_r_id_attr() const;
    bool has_o_relid_attr() const;
    void set_o_relid_attr(const ns_r::ST_RelationshipId& _o_relid_attr);
    const ns_r::ST_RelationshipId& get_o_relid_attr() const;
protected:
private:
    bool m_has_o_fill;
    ns_o::CT_Fill* m_o_fill;
    static fill_element* default_instance_;
    bool m_has_id_attr;
    XSD::string_ m_id_attr;
    bool m_has_type_attr;
    ST_FillType* m_type_attr;
    bool m_has_on_attr;
    ns_s::ST_TrueFalse* m_on_attr;
    bool m_has_color_attr;
    ns_s::ST_ColorType* m_color_attr;
    bool m_has_opacity_attr;
    XSD::string_ m_opacity_attr;
    bool m_has_color2_attr;
    ns_s::ST_ColorType* m_color2_attr;
    bool m_has_src_attr;
    XSD::string_ m_src_attr;
    bool m_has_o_href_attr;
    XSD::string_ m_o_href_attr;
    bool m_has_o_althref_attr;
    XSD::string_ m_o_althref_attr;
    bool m_has_size_attr;
    XSD::string_ m_size_attr;
    bool m_has_origin_attr;
    XSD::string_ m_origin_attr;
    bool m_has_position_attr;
    XSD::string_ m_position_attr;
    bool m_has_aspect_attr;
    ST_ImageAspect* m_aspect_attr;
    bool m_has_colors_attr;
    XSD::string_ m_colors_attr;
    bool m_has_angle_attr;
    XSD::decimal_ m_angle_attr;
    bool m_has_alignshape_attr;
    ns_s::ST_TrueFalse* m_alignshape_attr;
    bool m_has_focus_attr;
    XSD::string_ m_focus_attr;
    bool m_has_focussize_attr;
    XSD::string_ m_focussize_attr;
    bool m_has_focusposition_attr;
    XSD::string_ m_focusposition_attr;
    bool m_has_method_attr;
    ST_FillMethod* m_method_attr;
    bool m_has_o_detectmouseclick_attr;
    ns_s::ST_TrueFalse* m_o_detectmouseclick_attr;
    bool m_has_o_title_attr;
    XSD::string_ m_o_title_attr;
    bool m_has_o_opacity2_attr;
    XSD::string_ m_o_opacity2_attr;
    bool m_has_recolor_attr;
    ns_s::ST_TrueFalse* m_recolor_attr;
    bool m_has_rotate_attr;
    ns_s::ST_TrueFalse* m_rotate_attr;
    bool m_has_r_id_attr;
    ns_r::ST_RelationshipId* m_r_id_attr;
    bool m_has_o_relid_attr;
    ns_r::ST_RelationshipId* m_o_relid_attr;
};

class formulas_element: public Element
{
public:
    formulas_element();
    ~formulas_element();
    CT_F* add_f();
    void clear();
    void toXml(std::ostream& _outStream) const;
    static const formulas_element& default_instance();
protected:
private:
    class ChildGroup_1
    {
    public:
        ChildGroup_1();
        bool has_f() const;
        CT_F* mutable_f();
        const CT_F& get_f() const;
    protected:
    private:
        bool m_has_f;
        CT_F* m_f;
    };
    vector<ChildGroup_1*> m_childGroupList_1;
    static formulas_element* default_instance_;
};

class handles_element: public Element
{
public:
    handles_element();
    ~handles_element();
    CT_H* add_h();
    void clear();
    void toXml(std::ostream& _outStream) const;
    static const handles_element& default_instance();
protected:
private:
    class ChildGroup_1
    {
    public:
        ChildGroup_1();
        bool has_h() const;
        CT_H* mutable_h();
        const CT_H& get_h() const;
    protected:
    private:
        bool m_has_h;
        CT_H* m_h;
    };
    vector<ChildGroup_1*> m_childGroupList_1;
    static handles_element* default_instance_;
};

class imagedata_element: public Element
{
public:
    imagedata_element();
    ~imagedata_element();
    void clear();
    void toXml(std::ostream& _outStream) const;
    static const imagedata_element& default_instance();
    bool has_id_attr() const;
    void set_id_attr(const XSD::string_& _id_attr);
    const XSD::string_& get_id_attr() const;
    bool has_src_attr() const;
    void set_src_attr(const XSD::string_& _src_attr);
    const XSD::string_& get_src_attr() const;
    bool has_cropleft_attr() const;
    void set_cropleft_attr(const XSD::string_& _cropleft_attr);
    const XSD::string_& get_cropleft_attr() const;
    bool has_croptop_attr() const;
    void set_croptop_attr(const XSD::string_& _croptop_attr);
    const XSD::string_& get_croptop_attr() const;
    bool has_cropright_attr() const;
    void set_cropright_attr(const XSD::string_& _cropright_attr);
    const XSD::string_& get_cropright_attr() const;
    bool has_cropbottom_attr() const;
    void set_cropbottom_attr(const XSD::string_& _cropbottom_attr);
    const XSD::string_& get_cropbottom_attr() const;
    bool has_gain_attr() const;
    void set_gain_attr(const XSD::string_& _gain_attr);
    const XSD::string_& get_gain_attr() const;
    bool has_blacklevel_attr() const;
    void set_blacklevel_attr(const XSD::string_& _blacklevel_attr);
    const XSD::string_& get_blacklevel_attr() const;
    bool has_gamma_attr() const;
    void set_gamma_attr(const XSD::string_& _gamma_attr);
    const XSD::string_& get_gamma_attr() const;
    bool has_grayscale_attr() const;
    void set_grayscale_attr(const ns_s::ST_TrueFalse& _grayscale_attr);
    const ns_s::ST_TrueFalse& get_grayscale_attr() const;
    bool has_bilevel_attr() const;
    void set_bilevel_attr(const ns_s::ST_TrueFalse& _bilevel_attr);
    const ns_s::ST_TrueFalse& get_bilevel_attr() const;
    bool has_chromakey_attr() const;
    void set_chromakey_attr(const ns_s::ST_ColorType& _chromakey_attr);
    const ns_s::ST_ColorType& get_chromakey_attr() const;
    bool has_embosscolor_attr() const;
    void set_embosscolor_attr(const ns_s::ST_ColorType& _embosscolor_attr);
    const ns_s::ST_ColorType& get_embosscolor_attr() const;
    bool has_recolortarget_attr() const;
    void set_recolortarget_attr(const ns_s::ST_ColorType& _recolortarget_attr);
    const ns_s::ST_ColorType& get_recolortarget_attr() const;
    bool has_o_href_attr() const;
    void set_o_href_attr(const XSD::string_& _o_href_attr);
    const XSD::string_& get_o_href_attr() const;
    bool has_o_althref_attr() const;
    void set_o_althref_attr(const XSD::string_& _o_althref_attr);
    const XSD::string_& get_o_althref_attr() const;
    bool has_o_title_attr() const;
    void set_o_title_attr(const XSD::string_& _o_title_attr);
    const XSD::string_& get_o_title_attr() const;
    bool has_o_oleid_attr() const;
    void set_o_oleid_attr(const XSD::float_& _o_oleid_attr);
    const XSD::float_& get_o_oleid_attr() const;
    bool has_o_detectmouseclick_attr() const;
    void set_o_detectmouseclick_attr(const ns_s::ST_TrueFalse& _o_detectmouseclick_attr);
    const ns_s::ST_TrueFalse& get_o_detectmouseclick_attr() const;
    bool has_o_movie_attr() const;
    void set_o_movie_attr(const XSD::float_& _o_movie_attr);
    const XSD::float_& get_o_movie_attr() const;
    bool has_o_relid_attr() const;
    void set_o_relid_attr(const ns_r::ST_RelationshipId& _o_relid_attr);
    const ns_r::ST_RelationshipId& get_o_relid_attr() const;
    bool has_r_id_attr() const;
    void set_r_id_attr(const ns_r::ST_RelationshipId& _r_id_attr);
    const ns_r::ST_RelationshipId& get_r_id_attr() const;
    bool has_r_pict_attr() const;
    void set_r_pict_attr(const ns_r::ST_RelationshipId& _r_pict_attr);
    const ns_r::ST_RelationshipId& get_r_pict_attr() const;
    bool has_r_href_attr() const;
    void set_r_href_attr(const ns_r::ST_RelationshipId& _r_href_attr);
    const ns_r::ST_RelationshipId& get_r_href_attr() const;
protected:
private:
    static imagedata_element* default_instance_;
    bool m_has_id_attr;
    XSD::string_ m_id_attr;
    bool m_has_src_attr;
    XSD::string_ m_src_attr;
    bool m_has_cropleft_attr;
    XSD::string_ m_cropleft_attr;
    bool m_has_croptop_attr;
    XSD::string_ m_croptop_attr;
    bool m_has_cropright_attr;
    XSD::string_ m_cropright_attr;
    bool m_has_cropbottom_attr;
    XSD::string_ m_cropbottom_attr;
    bool m_has_gain_attr;
    XSD::string_ m_gain_attr;
    bool m_has_blacklevel_attr;
    XSD::string_ m_blacklevel_attr;
    bool m_has_gamma_attr;
    XSD::string_ m_gamma_attr;
    bool m_has_grayscale_attr;
    ns_s::ST_TrueFalse* m_grayscale_attr;
    bool m_has_bilevel_attr;
    ns_s::ST_TrueFalse* m_bilevel_attr;
    bool m_has_chromakey_attr;
    ns_s::ST_ColorType* m_chromakey_attr;
    bool m_has_embosscolor_attr;
    ns_s::ST_ColorType* m_embosscolor_attr;
    bool m_has_recolortarget_attr;
    ns_s::ST_ColorType* m_recolortarget_attr;
    bool m_has_o_href_attr;
    XSD::string_ m_o_href_attr;
    bool m_has_o_althref_attr;
    XSD::string_ m_o_althref_attr;
    bool m_has_o_title_attr;
    XSD::string_ m_o_title_attr;
    bool m_has_o_oleid_attr;
    XSD::float_ m_o_oleid_attr;
    bool m_has_o_detectmouseclick_attr;
    ns_s::ST_TrueFalse* m_o_detectmouseclick_attr;
    bool m_has_o_movie_attr;
    XSD::float_ m_o_movie_attr;
    bool m_has_o_relid_attr;
    ns_r::ST_RelationshipId* m_o_relid_attr;
    bool m_has_r_id_attr;
    ns_r::ST_RelationshipId* m_r_id_attr;
    bool m_has_r_pict_attr;
    ns_r::ST_RelationshipId* m_r_pict_attr;
    bool m_has_r_href_attr;
    ns_r::ST_RelationshipId* m_r_href_attr;
};

class path_element: public Element
{
public:
    path_element();
    ~path_element();
    void clear();
    void toXml(std::ostream& _outStream) const;
    static const path_element& default_instance();
    bool has_id_attr() const;
    void set_id_attr(const XSD::string_& _id_attr);
    const XSD::string_& get_id_attr() const;
    bool has_v_attr() const;
    void set_v_attr(const XSD::string_& _v_attr);
    const XSD::string_& get_v_attr() const;
    bool has_limo_attr() const;
    void set_limo_attr(const XSD::string_& _limo_attr);
    const XSD::string_& get_limo_attr() const;
    bool has_textboxrect_attr() const;
    void set_textboxrect_attr(const XSD::string_& _textboxrect_attr);
    const XSD::string_& get_textboxrect_attr() const;
    bool has_fillok_attr() const;
    void set_fillok_attr(const ns_s::ST_TrueFalse& _fillok_attr);
    const ns_s::ST_TrueFalse& get_fillok_attr() const;
    bool has_strokeok_attr() const;
    void set_strokeok_attr(const ns_s::ST_TrueFalse& _strokeok_attr);
    const ns_s::ST_TrueFalse& get_strokeok_attr() const;
    bool has_shadowok_attr() const;
    void set_shadowok_attr(const ns_s::ST_TrueFalse& _shadowok_attr);
    const ns_s::ST_TrueFalse& get_shadowok_attr() const;
    bool has_arrowok_attr() const;
    void set_arrowok_attr(const ns_s::ST_TrueFalse& _arrowok_attr);
    const ns_s::ST_TrueFalse& get_arrowok_attr() const;
    bool has_gradientshapeok_attr() const;
    void set_gradientshapeok_attr(const ns_s::ST_TrueFalse& _gradientshapeok_attr);
    const ns_s::ST_TrueFalse& get_gradientshapeok_attr() const;
    bool has_textpathok_attr() const;
    void set_textpathok_attr(const ns_s::ST_TrueFalse& _textpathok_attr);
    const ns_s::ST_TrueFalse& get_textpathok_attr() const;
    bool has_insetpenok_attr() const;
    void set_insetpenok_attr(const ns_s::ST_TrueFalse& _insetpenok_attr);
    const ns_s::ST_TrueFalse& get_insetpenok_attr() const;
    bool has_o_connecttype_attr() const;
    void set_o_connecttype_attr(const ns_o::ST_ConnectType& _o_connecttype_attr);
    const ns_o::ST_ConnectType& get_o_connecttype_attr() const;
    bool has_o_connectlocs_attr() const;
    void set_o_connectlocs_attr(const XSD::string_& _o_connectlocs_attr);
    const XSD::string_& get_o_connectlocs_attr() const;
    bool has_o_connectangles_attr() const;
    void set_o_connectangles_attr(const XSD::string_& _o_connectangles_attr);
    const XSD::string_& get_o_connectangles_attr() const;
    bool has_o_extrusionok_attr() const;
    void set_o_extrusionok_attr(const ns_s::ST_TrueFalse& _o_extrusionok_attr);
    const ns_s::ST_TrueFalse& get_o_extrusionok_attr() const;
protected:
private:
    static path_element* default_instance_;
    bool m_has_id_attr;
    XSD::string_ m_id_attr;
    bool m_has_v_attr;
    XSD::string_ m_v_attr;
    bool m_has_limo_attr;
    XSD::string_ m_limo_attr;
    bool m_has_textboxrect_attr;
    XSD::string_ m_textboxrect_attr;
    bool m_has_fillok_attr;
    ns_s::ST_TrueFalse* m_fillok_attr;
    bool m_has_strokeok_attr;
    ns_s::ST_TrueFalse* m_strokeok_attr;
    bool m_has_shadowok_attr;
    ns_s::ST_TrueFalse* m_shadowok_attr;
    bool m_has_arrowok_attr;
    ns_s::ST_TrueFalse* m_arrowok_attr;
    bool m_has_gradientshapeok_attr;
    ns_s::ST_TrueFalse* m_gradientshapeok_attr;
    bool m_has_textpathok_attr;
    ns_s::ST_TrueFalse* m_textpathok_attr;
    bool m_has_insetpenok_attr;
    ns_s::ST_TrueFalse* m_insetpenok_attr;
    bool m_has_o_connecttype_attr;
    ns_o::ST_ConnectType* m_o_connecttype_attr;
    bool m_has_o_connectlocs_attr;
    XSD::string_ m_o_connectlocs_attr;
    bool m_has_o_connectangles_attr;
    XSD::string_ m_o_connectangles_attr;
    bool m_has_o_extrusionok_attr;
    ns_s::ST_TrueFalse* m_o_extrusionok_attr;
};

class textbox_element: public Element
{
public:
    textbox_element();
    ~textbox_element();
    bool has_w_txbxContent() const;
    ns_w::CT_TxbxContent* mutable_w_txbxContent();
    const ns_w::CT_TxbxContent& get_w_txbxContent() const;
    void clear();
    void toXml(std::ostream& _outStream) const;
    static const textbox_element& default_instance();
    bool has_id_attr() const;
    void set_id_attr(const XSD::string_& _id_attr);
    const XSD::string_& get_id_attr() const;
    bool has_style_attr() const;
    void set_style_attr(const XSD::string_& _style_attr);
    const XSD::string_& get_style_attr() const;
    bool has_inset_attr() const;
    void set_inset_attr(const XSD::string_& _inset_attr);
    const XSD::string_& get_inset_attr() const;
    bool has_o_singleclick_attr() const;
    void set_o_singleclick_attr(const ns_s::ST_TrueFalse& _o_singleclick_attr);
    const ns_s::ST_TrueFalse& get_o_singleclick_attr() const;
    bool has_o_insetmode_attr() const;
    void set_o_insetmode_attr(const ns_o::ST_InsetMode& _o_insetmode_attr);
    const ns_o::ST_InsetMode& get_o_insetmode_attr() const;
protected:
private:
    bool m_has_w_txbxContent;
    ns_w::CT_TxbxContent* m_w_txbxContent;
    bool m_has__any;
    XSD::Element* m__any;
    static textbox_element* default_instance_;
    bool m_has_id_attr;
    XSD::string_ m_id_attr;
    bool m_has_style_attr;
    XSD::string_ m_style_attr;
    bool m_has_inset_attr;
    XSD::string_ m_inset_attr;
    bool m_has_o_singleclick_attr;
    ns_s::ST_TrueFalse* m_o_singleclick_attr;
    bool m_has_o_insetmode_attr;
    ns_o::ST_InsetMode* m_o_insetmode_attr;
};

class shadow_element: public Element
{
public:
    shadow_element();
    ~shadow_element();
    void clear();
    void toXml(std::ostream& _outStream) const;
    static const shadow_element& default_instance();
    bool has_id_attr() const;
    void set_id_attr(const XSD::string_& _id_attr);
    const XSD::string_& get_id_attr() const;
    bool has_on_attr() const;
    void set_on_attr(const ns_s::ST_TrueFalse& _on_attr);
    const ns_s::ST_TrueFalse& get_on_attr() const;
    bool has_type_attr() const;
    void set_type_attr(const ST_ShadowType& _type_attr);
    const ST_ShadowType& get_type_attr() const;
    bool has_obscured_attr() const;
    void set_obscured_attr(const ns_s::ST_TrueFalse& _obscured_attr);
    const ns_s::ST_TrueFalse& get_obscured_attr() const;
    bool has_color_attr() const;
    void set_color_attr(const ns_s::ST_ColorType& _color_attr);
    const ns_s::ST_ColorType& get_color_attr() const;
    bool has_opacity_attr() const;
    void set_opacity_attr(const XSD::string_& _opacity_attr);
    const XSD::string_& get_opacity_attr() const;
    bool has_offset_attr() const;
    void set_offset_attr(const XSD::string_& _offset_attr);
    const XSD::string_& get_offset_attr() const;
    bool has_color2_attr() const;
    void set_color2_attr(const ns_s::ST_ColorType& _color2_attr);
    const ns_s::ST_ColorType& get_color2_attr() const;
    bool has_offset2_attr() const;
    void set_offset2_attr(const XSD::string_& _offset2_attr);
    const XSD::string_& get_offset2_attr() const;
    bool has_origin_attr() const;
    void set_origin_attr(const XSD::string_& _origin_attr);
    const XSD::string_& get_origin_attr() const;
    bool has_matrix_attr() const;
    void set_matrix_attr(const XSD::string_& _matrix_attr);
    const XSD::string_& get_matrix_attr() const;
protected:
private:
    static shadow_element* default_instance_;
    bool m_has_id_attr;
    XSD::string_ m_id_attr;
    bool m_has_on_attr;
    ns_s::ST_TrueFalse* m_on_attr;
    bool m_has_type_attr;
    ST_ShadowType* m_type_attr;
    bool m_has_obscured_attr;
    ns_s::ST_TrueFalse* m_obscured_attr;
    bool m_has_color_attr;
    ns_s::ST_ColorType* m_color_attr;
    bool m_has_opacity_attr;
    XSD::string_ m_opacity_attr;
    bool m_has_offset_attr;
    XSD::string_ m_offset_attr;
    bool m_has_color2_attr;
    ns_s::ST_ColorType* m_color2_attr;
    bool m_has_offset2_attr;
    XSD::string_ m_offset2_attr;
    bool m_has_origin_attr;
    XSD::string_ m_origin_attr;
    bool m_has_matrix_attr;
    XSD::string_ m_matrix_attr;
};

class stroke_element: public Element
{
public:
    stroke_element();
    ~stroke_element();
    bool has_o_left() const;
    ns_o::CT_StrokeChild* mutable_o_left();
    const ns_o::CT_StrokeChild& get_o_left() const;
    bool has_o_top() const;
    ns_o::CT_StrokeChild* mutable_o_top();
    const ns_o::CT_StrokeChild& get_o_top() const;
    bool has_o_right() const;
    ns_o::CT_StrokeChild* mutable_o_right();
    const ns_o::CT_StrokeChild& get_o_right() const;
    bool has_o_bottom() const;
    ns_o::CT_StrokeChild* mutable_o_bottom();
    const ns_o::CT_StrokeChild& get_o_bottom() const;
    bool has_o_column() const;
    ns_o::CT_StrokeChild* mutable_o_column();
    const ns_o::CT_StrokeChild& get_o_column() const;
    void clear();
    void toXml(std::ostream& _outStream) const;
    static const stroke_element& default_instance();
    bool has_id_attr() const;
    void set_id_attr(const XSD::string_& _id_attr);
    const XSD::string_& get_id_attr() const;
    bool has_on_attr() const;
    void set_on_attr(const ns_s::ST_TrueFalse& _on_attr);
    const ns_s::ST_TrueFalse& get_on_attr() const;
    bool has_weight_attr() const;
    void set_weight_attr(const XSD::string_& _weight_attr);
    const XSD::string_& get_weight_attr() const;
    bool has_color_attr() const;
    void set_color_attr(const ns_s::ST_ColorType& _color_attr);
    const ns_s::ST_ColorType& get_color_attr() const;
    bool has_opacity_attr() const;
    void set_opacity_attr(const XSD::string_& _opacity_attr);
    const XSD::string_& get_opacity_attr() const;
    bool has_linestyle_attr() const;
    void set_linestyle_attr(const ST_StrokeLineStyle& _linestyle_attr);
    const ST_StrokeLineStyle& get_linestyle_attr() const;
    bool has_miterlimit_attr() const;
    void set_miterlimit_attr(const XSD::decimal_& _miterlimit_attr);
    const XSD::decimal_& get_miterlimit_attr() const;
    bool has_joinstyle_attr() const;
    void set_joinstyle_attr(const ST_StrokeJoinStyle& _joinstyle_attr);
    const ST_StrokeJoinStyle& get_joinstyle_attr() const;
    bool has_endcap_attr() const;
    void set_endcap_attr(const ST_StrokeEndCap& _endcap_attr);
    const ST_StrokeEndCap& get_endcap_attr() const;
    bool has_dashstyle_attr() const;
    void set_dashstyle_attr(const XSD::string_& _dashstyle_attr);
    const XSD::string_& get_dashstyle_attr() const;
    bool has_filltype_attr() const;
    void set_filltype_attr(const ST_FillType& _filltype_attr);
    const ST_FillType& get_filltype_attr() const;
    bool has_src_attr() const;
    void set_src_attr(const XSD::string_& _src_attr);
    const XSD::string_& get_src_attr() const;
    bool has_imageaspect_attr() const;
    void set_imageaspect_attr(const ST_ImageAspect& _imageaspect_attr);
    const ST_ImageAspect& get_imageaspect_attr() const;
    bool has_imagesize_attr() const;
    void set_imagesize_attr(const XSD::string_& _imagesize_attr);
    const XSD::string_& get_imagesize_attr() const;
    bool has_imagealignshape_attr() const;
    void set_imagealignshape_attr(const ns_s::ST_TrueFalse& _imagealignshape_attr);
    const ns_s::ST_TrueFalse& get_imagealignshape_attr() const;
    bool has_color2_attr() const;
    void set_color2_attr(const ns_s::ST_ColorType& _color2_attr);
    const ns_s::ST_ColorType& get_color2_attr() const;
    bool has_startarrow_attr() const;
    void set_startarrow_attr(const ST_StrokeArrowType& _startarrow_attr);
    const ST_StrokeArrowType& get_startarrow_attr() const;
    bool has_startarrowwidth_attr() const;
    void set_startarrowwidth_attr(const ST_StrokeArrowWidth& _startarrowwidth_attr);
    const ST_StrokeArrowWidth& get_startarrowwidth_attr() const;
    bool has_startarrowlength_attr() const;
    void set_startarrowlength_attr(const ST_StrokeArrowLength& _startarrowlength_attr);
    const ST_StrokeArrowLength& get_startarrowlength_attr() const;
    bool has_endarrow_attr() const;
    void set_endarrow_attr(const ST_StrokeArrowType& _endarrow_attr);
    const ST_StrokeArrowType& get_endarrow_attr() const;
    bool has_endarrowwidth_attr() const;
    void set_endarrowwidth_attr(const ST_StrokeArrowWidth& _endarrowwidth_attr);
    const ST_StrokeArrowWidth& get_endarrowwidth_attr() const;
    bool has_endarrowlength_attr() const;
    void set_endarrowlength_attr(const ST_StrokeArrowLength& _endarrowlength_attr);
    const ST_StrokeArrowLength& get_endarrowlength_attr() const;
    bool has_o_href_attr() const;
    void set_o_href_attr(const XSD::string_& _o_href_attr);
    const XSD::string_& get_o_href_attr() const;
    bool has_o_althref_attr() const;
    void set_o_althref_attr(const XSD::string_& _o_althref_attr);
    const XSD::string_& get_o_althref_attr() const;
    bool has_o_title_attr() const;
    void set_o_title_attr(const XSD::string_& _o_title_attr);
    const XSD::string_& get_o_title_attr() const;
    bool has_o_forcedash_attr() const;
    void set_o_forcedash_attr(const ns_s::ST_TrueFalse& _o_forcedash_attr);
    const ns_s::ST_TrueFalse& get_o_forcedash_attr() const;
    bool has_r_id_attr() const;
    void set_r_id_attr(const ns_r::ST_RelationshipId& _r_id_attr);
    const ns_r::ST_RelationshipId& get_r_id_attr() const;
    bool has_insetpen_attr() const;
    void set_insetpen_attr(const ns_s::ST_TrueFalse& _insetpen_attr);
    const ns_s::ST_TrueFalse& get_insetpen_attr() const;
    bool has_o_relid_attr() const;
    void set_o_relid_attr(const ns_r::ST_RelationshipId& _o_relid_attr);
    const ns_r::ST_RelationshipId& get_o_relid_attr() const;
protected:
private:
    bool m_has_o_left;
    ns_o::CT_StrokeChild* m_o_left;
    bool m_has_o_top;
    ns_o::CT_StrokeChild* m_o_top;
    bool m_has_o_right;
    ns_o::CT_StrokeChild* m_o_right;
    bool m_has_o_bottom;
    ns_o::CT_StrokeChild* m_o_bottom;
    bool m_has_o_column;
    ns_o::CT_StrokeChild* m_o_column;
    static stroke_element* default_instance_;
    bool m_has_id_attr;
    XSD::string_ m_id_attr;
    bool m_has_on_attr;
    ns_s::ST_TrueFalse* m_on_attr;
    bool m_has_weight_attr;
    XSD::string_ m_weight_attr;
    bool m_has_color_attr;
    ns_s::ST_ColorType* m_color_attr;
    bool m_has_opacity_attr;
    XSD::string_ m_opacity_attr;
    bool m_has_linestyle_attr;
    ST_StrokeLineStyle* m_linestyle_attr;
    bool m_has_miterlimit_attr;
    XSD::decimal_ m_miterlimit_attr;
    bool m_has_joinstyle_attr;
    ST_StrokeJoinStyle* m_joinstyle_attr;
    bool m_has_endcap_attr;
    ST_StrokeEndCap* m_endcap_attr;
    bool m_has_dashstyle_attr;
    XSD::string_ m_dashstyle_attr;
    bool m_has_filltype_attr;
    ST_FillType* m_filltype_attr;
    bool m_has_src_attr;
    XSD::string_ m_src_attr;
    bool m_has_imageaspect_attr;
    ST_ImageAspect* m_imageaspect_attr;
    bool m_has_imagesize_attr;
    XSD::string_ m_imagesize_attr;
    bool m_has_imagealignshape_attr;
    ns_s::ST_TrueFalse* m_imagealignshape_attr;
    bool m_has_color2_attr;
    ns_s::ST_ColorType* m_color2_attr;
    bool m_has_startarrow_attr;
    ST_StrokeArrowType* m_startarrow_attr;
    bool m_has_startarrowwidth_attr;
    ST_StrokeArrowWidth* m_startarrowwidth_attr;
    bool m_has_startarrowlength_attr;
    ST_StrokeArrowLength* m_startarrowlength_attr;
    bool m_has_endarrow_attr;
    ST_StrokeArrowType* m_endarrow_attr;
    bool m_has_endarrowwidth_attr;
    ST_StrokeArrowWidth* m_endarrowwidth_attr;
    bool m_has_endarrowlength_attr;
    ST_StrokeArrowLength* m_endarrowlength_attr;
    bool m_has_o_href_attr;
    XSD::string_ m_o_href_attr;
    bool m_has_o_althref_attr;
    XSD::string_ m_o_althref_attr;
    bool m_has_o_title_attr;
    XSD::string_ m_o_title_attr;
    bool m_has_o_forcedash_attr;
    ns_s::ST_TrueFalse* m_o_forcedash_attr;
    bool m_has_r_id_attr;
    ns_r::ST_RelationshipId* m_r_id_attr;
    bool m_has_insetpen_attr;
    ns_s::ST_TrueFalse* m_insetpen_attr;
    bool m_has_o_relid_attr;
    ns_r::ST_RelationshipId* m_o_relid_attr;
};

class textpath_element: public Element
{
public:
    textpath_element();
    ~textpath_element();
    void clear();
    void toXml(std::ostream& _outStream) const;
    static const textpath_element& default_instance();
    bool has_id_attr() const;
    void set_id_attr(const XSD::string_& _id_attr);
    const XSD::string_& get_id_attr() const;
    bool has_style_attr() const;
    void set_style_attr(const XSD::string_& _style_attr);
    const XSD::string_& get_style_attr() const;
    bool has_on_attr() const;
    void set_on_attr(const ns_s::ST_TrueFalse& _on_attr);
    const ns_s::ST_TrueFalse& get_on_attr() const;
    bool has_fitshape_attr() const;
    void set_fitshape_attr(const ns_s::ST_TrueFalse& _fitshape_attr);
    const ns_s::ST_TrueFalse& get_fitshape_attr() const;
    bool has_fitpath_attr() const;
    void set_fitpath_attr(const ns_s::ST_TrueFalse& _fitpath_attr);
    const ns_s::ST_TrueFalse& get_fitpath_attr() const;
    bool has_trim_attr() const;
    void set_trim_attr(const ns_s::ST_TrueFalse& _trim_attr);
    const ns_s::ST_TrueFalse& get_trim_attr() const;
    bool has_xscale_attr() const;
    void set_xscale_attr(const ns_s::ST_TrueFalse& _xscale_attr);
    const ns_s::ST_TrueFalse& get_xscale_attr() const;
    bool has_string_attr() const;
    void set_string_attr(const XSD::string_& _string_attr);
    const XSD::string_& get_string_attr() const;
protected:
private:
    static textpath_element* default_instance_;
    bool m_has_id_attr;
    XSD::string_ m_id_attr;
    bool m_has_style_attr;
    XSD::string_ m_style_attr;
    bool m_has_on_attr;
    ns_s::ST_TrueFalse* m_on_attr;
    bool m_has_fitshape_attr;
    ns_s::ST_TrueFalse* m_fitshape_attr;
    bool m_has_fitpath_attr;
    ns_s::ST_TrueFalse* m_fitpath_attr;
    bool m_has_trim_attr;
    ns_s::ST_TrueFalse* m_trim_attr;
    bool m_has_xscale_attr;
    ns_s::ST_TrueFalse* m_xscale_attr;
    bool m_has_string_attr;
    XSD::string_ m_string_attr;
};

class arc_element: public Element
{
public:
    arc_element();
    ~arc_element();
    CT_Path* add_path();
    CT_Formulas* add_formulas();
    CT_Handles* add_handles();
    CT_Fill* add_fill();
    CT_Stroke* add_stroke();
    CT_Shadow* add_shadow();
    CT_Textbox* add_textbox();
    CT_TextPath* add_textpath();
    CT_ImageData* add_imagedata();
    ns_o::CT_Skew* add_o_skew();
    ns_o::CT_Extrusion* add_o_extrusion();
    ns_o::CT_Callout* add_o_callout();
    ns_o::CT_Lock* add_o_lock();
    ns_o::CT_ClipPath* add_o_clippath();
    ns_o::CT_SignatureLine* add_o_signatureline();
    ns_w10::CT_Wrap* add_w10_wrap();
    ns_w10::CT_AnchorLock* add_w10_anchorlock();
    ns_w10::CT_Border* add_w10_bordertop();
    ns_w10::CT_Border* add_w10_borderbottom();
    ns_w10::CT_Border* add_w10_borderleft();
    ns_w10::CT_Border* add_w10_borderright();
    ns_x::CT_ClientData* add_x_ClientData();
    ns_pvml::CT_Rel* add_pvml_textdata();
    void clear();
    void toXml(std::ostream& _outStream) const;
    static const arc_element& default_instance();
    bool has_startAngle_attr() const;
    void set_startAngle_attr(const XSD::decimal_& _startAngle_attr);
    const XSD::decimal_& get_startAngle_attr() const;
    bool has_endAngle_attr() const;
    void set_endAngle_attr(const XSD::decimal_& _endAngle_attr);
    const XSD::decimal_& get_endAngle_attr() const;
protected:
private:
    class ChildGroup_1
    {
    public:
        ChildGroup_1();
        bool has_path() const;
        CT_Path* mutable_path();
        const CT_Path& get_path() const;
        bool has_formulas() const;
        CT_Formulas* mutable_formulas();
        const CT_Formulas& get_formulas() const;
        bool has_handles() const;
        CT_Handles* mutable_handles();
        const CT_Handles& get_handles() const;
        bool has_fill() const;
        CT_Fill* mutable_fill();
        const CT_Fill& get_fill() const;
        bool has_stroke() const;
        CT_Stroke* mutable_stroke();
        const CT_Stroke& get_stroke() const;
        bool has_shadow() const;
        CT_Shadow* mutable_shadow();
        const CT_Shadow& get_shadow() const;
        bool has_textbox() const;
        CT_Textbox* mutable_textbox();
        const CT_Textbox& get_textbox() const;
        bool has_textpath() const;
        CT_TextPath* mutable_textpath();
        const CT_TextPath& get_textpath() const;
        bool has_imagedata() const;
        CT_ImageData* mutable_imagedata();
        const CT_ImageData& get_imagedata() const;
        bool has_o_skew() const;
        ns_o::CT_Skew* mutable_o_skew();
        const ns_o::CT_Skew& get_o_skew() const;
        bool has_o_extrusion() const;
        ns_o::CT_Extrusion* mutable_o_extrusion();
        const ns_o::CT_Extrusion& get_o_extrusion() const;
        bool has_o_callout() const;
        ns_o::CT_Callout* mutable_o_callout();
        const ns_o::CT_Callout& get_o_callout() const;
        bool has_o_lock() const;
        ns_o::CT_Lock* mutable_o_lock();
        const ns_o::CT_Lock& get_o_lock() const;
        bool has_o_clippath() const;
        ns_o::CT_ClipPath* mutable_o_clippath();
        const ns_o::CT_ClipPath& get_o_clippath() const;
        bool has_o_signatureline() const;
        ns_o::CT_SignatureLine* mutable_o_signatureline();
        const ns_o::CT_SignatureLine& get_o_signatureline() const;
        bool has_w10_wrap() const;
        ns_w10::CT_Wrap* mutable_w10_wrap();
        const ns_w10::CT_Wrap& get_w10_wrap() const;
        bool has_w10_anchorlock() const;
        ns_w10::CT_AnchorLock* mutable_w10_anchorlock();
        const ns_w10::CT_AnchorLock& get_w10_anchorlock() const;
        bool has_w10_bordertop() const;
        ns_w10::CT_Border* mutable_w10_bordertop();
        const ns_w10::CT_Border& get_w10_bordertop() const;
        bool has_w10_borderbottom() const;
        ns_w10::CT_Border* mutable_w10_borderbottom();
        const ns_w10::CT_Border& get_w10_borderbottom() const;
        bool has_w10_borderleft() const;
        ns_w10::CT_Border* mutable_w10_borderleft();
        const ns_w10::CT_Border& get_w10_borderleft() const;
        bool has_w10_borderright() const;
        ns_w10::CT_Border* mutable_w10_borderright();
        const ns_w10::CT_Border& get_w10_borderright() const;
        bool has_x_ClientData() const;
        ns_x::CT_ClientData* mutable_x_ClientData();
        const ns_x::CT_ClientData& get_x_ClientData() const;
        bool has_pvml_textdata() const;
        ns_pvml::CT_Rel* mutable_pvml_textdata();
        const ns_pvml::CT_Rel& get_pvml_textdata() const;
    protected:
    private:
        bool m_has_path;
        CT_Path* m_path;
        bool m_has_formulas;
        CT_Formulas* m_formulas;
        bool m_has_handles;
        CT_Handles* m_handles;
        bool m_has_fill;
        CT_Fill* m_fill;
        bool m_has_stroke;
        CT_Stroke* m_stroke;
        bool m_has_shadow;
        CT_Shadow* m_shadow;
        bool m_has_textbox;
        CT_Textbox* m_textbox;
        bool m_has_textpath;
        CT_TextPath* m_textpath;
        bool m_has_imagedata;
        CT_ImageData* m_imagedata;
        bool m_has_o_skew;
        ns_o::CT_Skew* m_o_skew;
        bool m_has_o_extrusion;
        ns_o::CT_Extrusion* m_o_extrusion;
        bool m_has_o_callout;
        ns_o::CT_Callout* m_o_callout;
        bool m_has_o_lock;
        ns_o::CT_Lock* m_o_lock;
        bool m_has_o_clippath;
        ns_o::CT_ClipPath* m_o_clippath;
        bool m_has_o_signatureline;
        ns_o::CT_SignatureLine* m_o_signatureline;
        bool m_has_w10_wrap;
        ns_w10::CT_Wrap* m_w10_wrap;
        bool m_has_w10_anchorlock;
        ns_w10::CT_AnchorLock* m_w10_anchorlock;
        bool m_has_w10_bordertop;
        ns_w10::CT_Border* m_w10_bordertop;
        bool m_has_w10_borderbottom;
        ns_w10::CT_Border* m_w10_borderbottom;
        bool m_has_w10_borderleft;
        ns_w10::CT_Border* m_w10_borderleft;
        bool m_has_w10_borderright;
        ns_w10::CT_Border* m_w10_borderright;
        bool m_has_x_ClientData;
        ns_x::CT_ClientData* m_x_ClientData;
        bool m_has_pvml_textdata;
        ns_pvml::CT_Rel* m_pvml_textdata;
    };
    vector<ChildGroup_1*> m_childGroupList_1;
    static arc_element* default_instance_;
    bool m_has_startAngle_attr;
    XSD::decimal_ m_startAngle_attr;
    bool m_has_endAngle_attr;
    XSD::decimal_ m_endAngle_attr;
};

class curve_element: public Element
{
public:
    curve_element();
    ~curve_element();
    CT_Path* add_path();
    CT_Formulas* add_formulas();
    CT_Handles* add_handles();
    CT_Fill* add_fill();
    CT_Stroke* add_stroke();
    CT_Shadow* add_shadow();
    CT_Textbox* add_textbox();
    CT_TextPath* add_textpath();
    CT_ImageData* add_imagedata();
    ns_o::CT_Skew* add_o_skew();
    ns_o::CT_Extrusion* add_o_extrusion();
    ns_o::CT_Callout* add_o_callout();
    ns_o::CT_Lock* add_o_lock();
    ns_o::CT_ClipPath* add_o_clippath();
    ns_o::CT_SignatureLine* add_o_signatureline();
    ns_w10::CT_Wrap* add_w10_wrap();
    ns_w10::CT_AnchorLock* add_w10_anchorlock();
    ns_w10::CT_Border* add_w10_bordertop();
    ns_w10::CT_Border* add_w10_borderbottom();
    ns_w10::CT_Border* add_w10_borderleft();
    ns_w10::CT_Border* add_w10_borderright();
    ns_x::CT_ClientData* add_x_ClientData();
    ns_pvml::CT_Rel* add_pvml_textdata();
    void clear();
    void toXml(std::ostream& _outStream) const;
    static const curve_element& default_instance();
    bool has_from_attr() const;
    void set_from_attr(const XSD::string_& _from_attr);
    const XSD::string_& get_from_attr() const;
    bool has_control1_attr() const;
    void set_control1_attr(const XSD::string_& _control1_attr);
    const XSD::string_& get_control1_attr() const;
    bool has_control2_attr() const;
    void set_control2_attr(const XSD::string_& _control2_attr);
    const XSD::string_& get_control2_attr() const;
    bool has_to_attr() const;
    void set_to_attr(const XSD::string_& _to_attr);
    const XSD::string_& get_to_attr() const;
protected:
private:
    class ChildGroup_1
    {
    public:
        ChildGroup_1();
        bool has_path() const;
        CT_Path* mutable_path();
        const CT_Path& get_path() const;
        bool has_formulas() const;
        CT_Formulas* mutable_formulas();
        const CT_Formulas& get_formulas() const;
        bool has_handles() const;
        CT_Handles* mutable_handles();
        const CT_Handles& get_handles() const;
        bool has_fill() const;
        CT_Fill* mutable_fill();
        const CT_Fill& get_fill() const;
        bool has_stroke() const;
        CT_Stroke* mutable_stroke();
        const CT_Stroke& get_stroke() const;
        bool has_shadow() const;
        CT_Shadow* mutable_shadow();
        const CT_Shadow& get_shadow() const;
        bool has_textbox() const;
        CT_Textbox* mutable_textbox();
        const CT_Textbox& get_textbox() const;
        bool has_textpath() const;
        CT_TextPath* mutable_textpath();
        const CT_TextPath& get_textpath() const;
        bool has_imagedata() const;
        CT_ImageData* mutable_imagedata();
        const CT_ImageData& get_imagedata() const;
        bool has_o_skew() const;
        ns_o::CT_Skew* mutable_o_skew();
        const ns_o::CT_Skew& get_o_skew() const;
        bool has_o_extrusion() const;
        ns_o::CT_Extrusion* mutable_o_extrusion();
        const ns_o::CT_Extrusion& get_o_extrusion() const;
        bool has_o_callout() const;
        ns_o::CT_Callout* mutable_o_callout();
        const ns_o::CT_Callout& get_o_callout() const;
        bool has_o_lock() const;
        ns_o::CT_Lock* mutable_o_lock();
        const ns_o::CT_Lock& get_o_lock() const;
        bool has_o_clippath() const;
        ns_o::CT_ClipPath* mutable_o_clippath();
        const ns_o::CT_ClipPath& get_o_clippath() const;
        bool has_o_signatureline() const;
        ns_o::CT_SignatureLine* mutable_o_signatureline();
        const ns_o::CT_SignatureLine& get_o_signatureline() const;
        bool has_w10_wrap() const;
        ns_w10::CT_Wrap* mutable_w10_wrap();
        const ns_w10::CT_Wrap& get_w10_wrap() const;
        bool has_w10_anchorlock() const;
        ns_w10::CT_AnchorLock* mutable_w10_anchorlock();
        const ns_w10::CT_AnchorLock& get_w10_anchorlock() const;
        bool has_w10_bordertop() const;
        ns_w10::CT_Border* mutable_w10_bordertop();
        const ns_w10::CT_Border& get_w10_bordertop() const;
        bool has_w10_borderbottom() const;
        ns_w10::CT_Border* mutable_w10_borderbottom();
        const ns_w10::CT_Border& get_w10_borderbottom() const;
        bool has_w10_borderleft() const;
        ns_w10::CT_Border* mutable_w10_borderleft();
        const ns_w10::CT_Border& get_w10_borderleft() const;
        bool has_w10_borderright() const;
        ns_w10::CT_Border* mutable_w10_borderright();
        const ns_w10::CT_Border& get_w10_borderright() const;
        bool has_x_ClientData() const;
        ns_x::CT_ClientData* mutable_x_ClientData();
        const ns_x::CT_ClientData& get_x_ClientData() const;
        bool has_pvml_textdata() const;
        ns_pvml::CT_Rel* mutable_pvml_textdata();
        const ns_pvml::CT_Rel& get_pvml_textdata() const;
    protected:
    private:
        bool m_has_path;
        CT_Path* m_path;
        bool m_has_formulas;
        CT_Formulas* m_formulas;
        bool m_has_handles;
        CT_Handles* m_handles;
        bool m_has_fill;
        CT_Fill* m_fill;
        bool m_has_stroke;
        CT_Stroke* m_stroke;
        bool m_has_shadow;
        CT_Shadow* m_shadow;
        bool m_has_textbox;
        CT_Textbox* m_textbox;
        bool m_has_textpath;
        CT_TextPath* m_textpath;
        bool m_has_imagedata;
        CT_ImageData* m_imagedata;
        bool m_has_o_skew;
        ns_o::CT_Skew* m_o_skew;
        bool m_has_o_extrusion;
        ns_o::CT_Extrusion* m_o_extrusion;
        bool m_has_o_callout;
        ns_o::CT_Callout* m_o_callout;
        bool m_has_o_lock;
        ns_o::CT_Lock* m_o_lock;
        bool m_has_o_clippath;
        ns_o::CT_ClipPath* m_o_clippath;
        bool m_has_o_signatureline;
        ns_o::CT_SignatureLine* m_o_signatureline;
        bool m_has_w10_wrap;
        ns_w10::CT_Wrap* m_w10_wrap;
        bool m_has_w10_anchorlock;
        ns_w10::CT_AnchorLock* m_w10_anchorlock;
        bool m_has_w10_bordertop;
        ns_w10::CT_Border* m_w10_bordertop;
        bool m_has_w10_borderbottom;
        ns_w10::CT_Border* m_w10_borderbottom;
        bool m_has_w10_borderleft;
        ns_w10::CT_Border* m_w10_borderleft;
        bool m_has_w10_borderright;
        ns_w10::CT_Border* m_w10_borderright;
        bool m_has_x_ClientData;
        ns_x::CT_ClientData* m_x_ClientData;
        bool m_has_pvml_textdata;
        ns_pvml::CT_Rel* m_pvml_textdata;
    };
    vector<ChildGroup_1*> m_childGroupList_1;
    static curve_element* default_instance_;
    bool m_has_from_attr;
    XSD::string_ m_from_attr;
    bool m_has_control1_attr;
    XSD::string_ m_control1_attr;
    bool m_has_control2_attr;
    XSD::string_ m_control2_attr;
    bool m_has_to_attr;
    XSD::string_ m_to_attr;
};

class image_element: public Element
{
public:
    image_element();
    ~image_element();
    CT_Path* add_path();
    CT_Formulas* add_formulas();
    CT_Handles* add_handles();
    CT_Fill* add_fill();
    CT_Stroke* add_stroke();
    CT_Shadow* add_shadow();
    CT_Textbox* add_textbox();
    CT_TextPath* add_textpath();
    CT_ImageData* add_imagedata();
    ns_o::CT_Skew* add_o_skew();
    ns_o::CT_Extrusion* add_o_extrusion();
    ns_o::CT_Callout* add_o_callout();
    ns_o::CT_Lock* add_o_lock();
    ns_o::CT_ClipPath* add_o_clippath();
    ns_o::CT_SignatureLine* add_o_signatureline();
    ns_w10::CT_Wrap* add_w10_wrap();
    ns_w10::CT_AnchorLock* add_w10_anchorlock();
    ns_w10::CT_Border* add_w10_bordertop();
    ns_w10::CT_Border* add_w10_borderbottom();
    ns_w10::CT_Border* add_w10_borderleft();
    ns_w10::CT_Border* add_w10_borderright();
    ns_x::CT_ClientData* add_x_ClientData();
    ns_pvml::CT_Rel* add_pvml_textdata();
    void clear();
    void toXml(std::ostream& _outStream) const;
    static const image_element& default_instance();
    bool has_src_attr() const;
    void set_src_attr(const XSD::string_& _src_attr);
    const XSD::string_& get_src_attr() const;
    bool has_cropleft_attr() const;
    void set_cropleft_attr(const XSD::string_& _cropleft_attr);
    const XSD::string_& get_cropleft_attr() const;
    bool has_croptop_attr() const;
    void set_croptop_attr(const XSD::string_& _croptop_attr);
    const XSD::string_& get_croptop_attr() const;
    bool has_cropright_attr() const;
    void set_cropright_attr(const XSD::string_& _cropright_attr);
    const XSD::string_& get_cropright_attr() const;
    bool has_cropbottom_attr() const;
    void set_cropbottom_attr(const XSD::string_& _cropbottom_attr);
    const XSD::string_& get_cropbottom_attr() const;
    bool has_gain_attr() const;
    void set_gain_attr(const XSD::string_& _gain_attr);
    const XSD::string_& get_gain_attr() const;
    bool has_blacklevel_attr() const;
    void set_blacklevel_attr(const XSD::string_& _blacklevel_attr);
    const XSD::string_& get_blacklevel_attr() const;
    bool has_gamma_attr() const;
    void set_gamma_attr(const XSD::string_& _gamma_attr);
    const XSD::string_& get_gamma_attr() const;
    bool has_grayscale_attr() const;
    void set_grayscale_attr(const ns_s::ST_TrueFalse& _grayscale_attr);
    const ns_s::ST_TrueFalse& get_grayscale_attr() const;
    bool has_bilevel_attr() const;
    void set_bilevel_attr(const ns_s::ST_TrueFalse& _bilevel_attr);
    const ns_s::ST_TrueFalse& get_bilevel_attr() const;
protected:
private:
    class ChildGroup_1
    {
    public:
        ChildGroup_1();
        bool has_path() const;
        CT_Path* mutable_path();
        const CT_Path& get_path() const;
        bool has_formulas() const;
        CT_Formulas* mutable_formulas();
        const CT_Formulas& get_formulas() const;
        bool has_handles() const;
        CT_Handles* mutable_handles();
        const CT_Handles& get_handles() const;
        bool has_fill() const;
        CT_Fill* mutable_fill();
        const CT_Fill& get_fill() const;
        bool has_stroke() const;
        CT_Stroke* mutable_stroke();
        const CT_Stroke& get_stroke() const;
        bool has_shadow() const;
        CT_Shadow* mutable_shadow();
        const CT_Shadow& get_shadow() const;
        bool has_textbox() const;
        CT_Textbox* mutable_textbox();
        const CT_Textbox& get_textbox() const;
        bool has_textpath() const;
        CT_TextPath* mutable_textpath();
        const CT_TextPath& get_textpath() const;
        bool has_imagedata() const;
        CT_ImageData* mutable_imagedata();
        const CT_ImageData& get_imagedata() const;
        bool has_o_skew() const;
        ns_o::CT_Skew* mutable_o_skew();
        const ns_o::CT_Skew& get_o_skew() const;
        bool has_o_extrusion() const;
        ns_o::CT_Extrusion* mutable_o_extrusion();
        const ns_o::CT_Extrusion& get_o_extrusion() const;
        bool has_o_callout() const;
        ns_o::CT_Callout* mutable_o_callout();
        const ns_o::CT_Callout& get_o_callout() const;
        bool has_o_lock() const;
        ns_o::CT_Lock* mutable_o_lock();
        const ns_o::CT_Lock& get_o_lock() const;
        bool has_o_clippath() const;
        ns_o::CT_ClipPath* mutable_o_clippath();
        const ns_o::CT_ClipPath& get_o_clippath() const;
        bool has_o_signatureline() const;
        ns_o::CT_SignatureLine* mutable_o_signatureline();
        const ns_o::CT_SignatureLine& get_o_signatureline() const;
        bool has_w10_wrap() const;
        ns_w10::CT_Wrap* mutable_w10_wrap();
        const ns_w10::CT_Wrap& get_w10_wrap() const;
        bool has_w10_anchorlock() const;
        ns_w10::CT_AnchorLock* mutable_w10_anchorlock();
        const ns_w10::CT_AnchorLock& get_w10_anchorlock() const;
        bool has_w10_bordertop() const;
        ns_w10::CT_Border* mutable_w10_bordertop();
        const ns_w10::CT_Border& get_w10_bordertop() const;
        bool has_w10_borderbottom() const;
        ns_w10::CT_Border* mutable_w10_borderbottom();
        const ns_w10::CT_Border& get_w10_borderbottom() const;
        bool has_w10_borderleft() const;
        ns_w10::CT_Border* mutable_w10_borderleft();
        const ns_w10::CT_Border& get_w10_borderleft() const;
        bool has_w10_borderright() const;
        ns_w10::CT_Border* mutable_w10_borderright();
        const ns_w10::CT_Border& get_w10_borderright() const;
        bool has_x_ClientData() const;
        ns_x::CT_ClientData* mutable_x_ClientData();
        const ns_x::CT_ClientData& get_x_ClientData() const;
        bool has_pvml_textdata() const;
        ns_pvml::CT_Rel* mutable_pvml_textdata();
        const ns_pvml::CT_Rel& get_pvml_textdata() const;
    protected:
    private:
        bool m_has_path;
        CT_Path* m_path;
        bool m_has_formulas;
        CT_Formulas* m_formulas;
        bool m_has_handles;
        CT_Handles* m_handles;
        bool m_has_fill;
        CT_Fill* m_fill;
        bool m_has_stroke;
        CT_Stroke* m_stroke;
        bool m_has_shadow;
        CT_Shadow* m_shadow;
        bool m_has_textbox;
        CT_Textbox* m_textbox;
        bool m_has_textpath;
        CT_TextPath* m_textpath;
        bool m_has_imagedata;
        CT_ImageData* m_imagedata;
        bool m_has_o_skew;
        ns_o::CT_Skew* m_o_skew;
        bool m_has_o_extrusion;
        ns_o::CT_Extrusion* m_o_extrusion;
        bool m_has_o_callout;
        ns_o::CT_Callout* m_o_callout;
        bool m_has_o_lock;
        ns_o::CT_Lock* m_o_lock;
        bool m_has_o_clippath;
        ns_o::CT_ClipPath* m_o_clippath;
        bool m_has_o_signatureline;
        ns_o::CT_SignatureLine* m_o_signatureline;
        bool m_has_w10_wrap;
        ns_w10::CT_Wrap* m_w10_wrap;
        bool m_has_w10_anchorlock;
        ns_w10::CT_AnchorLock* m_w10_anchorlock;
        bool m_has_w10_bordertop;
        ns_w10::CT_Border* m_w10_bordertop;
        bool m_has_w10_borderbottom;
        ns_w10::CT_Border* m_w10_borderbottom;
        bool m_has_w10_borderleft;
        ns_w10::CT_Border* m_w10_borderleft;
        bool m_has_w10_borderright;
        ns_w10::CT_Border* m_w10_borderright;
        bool m_has_x_ClientData;
        ns_x::CT_ClientData* m_x_ClientData;
        bool m_has_pvml_textdata;
        ns_pvml::CT_Rel* m_pvml_textdata;
    };
    vector<ChildGroup_1*> m_childGroupList_1;
    static image_element* default_instance_;
    bool m_has_src_attr;
    XSD::string_ m_src_attr;
    bool m_has_cropleft_attr;
    XSD::string_ m_cropleft_attr;
    bool m_has_croptop_attr;
    XSD::string_ m_croptop_attr;
    bool m_has_cropright_attr;
    XSD::string_ m_cropright_attr;
    bool m_has_cropbottom_attr;
    XSD::string_ m_cropbottom_attr;
    bool m_has_gain_attr;
    XSD::string_ m_gain_attr;
    bool m_has_blacklevel_attr;
    XSD::string_ m_blacklevel_attr;
    bool m_has_gamma_attr;
    XSD::string_ m_gamma_attr;
    bool m_has_grayscale_attr;
    ns_s::ST_TrueFalse* m_grayscale_attr;
    bool m_has_bilevel_attr;
    ns_s::ST_TrueFalse* m_bilevel_attr;
};

class line_element: public Element
{
public:
    line_element();
    ~line_element();
    CT_Path* add_path();
    CT_Formulas* add_formulas();
    CT_Handles* add_handles();
    CT_Fill* add_fill();
    CT_Stroke* add_stroke();
    CT_Shadow* add_shadow();
    CT_Textbox* add_textbox();
    CT_TextPath* add_textpath();
    CT_ImageData* add_imagedata();
    ns_o::CT_Skew* add_o_skew();
    ns_o::CT_Extrusion* add_o_extrusion();
    ns_o::CT_Callout* add_o_callout();
    ns_o::CT_Lock* add_o_lock();
    ns_o::CT_ClipPath* add_o_clippath();
    ns_o::CT_SignatureLine* add_o_signatureline();
    ns_w10::CT_Wrap* add_w10_wrap();
    ns_w10::CT_AnchorLock* add_w10_anchorlock();
    ns_w10::CT_Border* add_w10_bordertop();
    ns_w10::CT_Border* add_w10_borderbottom();
    ns_w10::CT_Border* add_w10_borderleft();
    ns_w10::CT_Border* add_w10_borderright();
    ns_x::CT_ClientData* add_x_ClientData();
    ns_pvml::CT_Rel* add_pvml_textdata();
    void clear();
    void toXml(std::ostream& _outStream) const;
    static const line_element& default_instance();
    bool has_from_attr() const;
    void set_from_attr(const XSD::string_& _from_attr);
    const XSD::string_& get_from_attr() const;
    bool has_to_attr() const;
    void set_to_attr(const XSD::string_& _to_attr);
    const XSD::string_& get_to_attr() const;
protected:
private:
    class ChildGroup_1
    {
    public:
        ChildGroup_1();
        bool has_path() const;
        CT_Path* mutable_path();
        const CT_Path& get_path() const;
        bool has_formulas() const;
        CT_Formulas* mutable_formulas();
        const CT_Formulas& get_formulas() const;
        bool has_handles() const;
        CT_Handles* mutable_handles();
        const CT_Handles& get_handles() const;
        bool has_fill() const;
        CT_Fill* mutable_fill();
        const CT_Fill& get_fill() const;
        bool has_stroke() const;
        CT_Stroke* mutable_stroke();
        const CT_Stroke& get_stroke() const;
        bool has_shadow() const;
        CT_Shadow* mutable_shadow();
        const CT_Shadow& get_shadow() const;
        bool has_textbox() const;
        CT_Textbox* mutable_textbox();
        const CT_Textbox& get_textbox() const;
        bool has_textpath() const;
        CT_TextPath* mutable_textpath();
        const CT_TextPath& get_textpath() const;
        bool has_imagedata() const;
        CT_ImageData* mutable_imagedata();
        const CT_ImageData& get_imagedata() const;
        bool has_o_skew() const;
        ns_o::CT_Skew* mutable_o_skew();
        const ns_o::CT_Skew& get_o_skew() const;
        bool has_o_extrusion() const;
        ns_o::CT_Extrusion* mutable_o_extrusion();
        const ns_o::CT_Extrusion& get_o_extrusion() const;
        bool has_o_callout() const;
        ns_o::CT_Callout* mutable_o_callout();
        const ns_o::CT_Callout& get_o_callout() const;
        bool has_o_lock() const;
        ns_o::CT_Lock* mutable_o_lock();
        const ns_o::CT_Lock& get_o_lock() const;
        bool has_o_clippath() const;
        ns_o::CT_ClipPath* mutable_o_clippath();
        const ns_o::CT_ClipPath& get_o_clippath() const;
        bool has_o_signatureline() const;
        ns_o::CT_SignatureLine* mutable_o_signatureline();
        const ns_o::CT_SignatureLine& get_o_signatureline() const;
        bool has_w10_wrap() const;
        ns_w10::CT_Wrap* mutable_w10_wrap();
        const ns_w10::CT_Wrap& get_w10_wrap() const;
        bool has_w10_anchorlock() const;
        ns_w10::CT_AnchorLock* mutable_w10_anchorlock();
        const ns_w10::CT_AnchorLock& get_w10_anchorlock() const;
        bool has_w10_bordertop() const;
        ns_w10::CT_Border* mutable_w10_bordertop();
        const ns_w10::CT_Border& get_w10_bordertop() const;
        bool has_w10_borderbottom() const;
        ns_w10::CT_Border* mutable_w10_borderbottom();
        const ns_w10::CT_Border& get_w10_borderbottom() const;
        bool has_w10_borderleft() const;
        ns_w10::CT_Border* mutable_w10_borderleft();
        const ns_w10::CT_Border& get_w10_borderleft() const;
        bool has_w10_borderright() const;
        ns_w10::CT_Border* mutable_w10_borderright();
        const ns_w10::CT_Border& get_w10_borderright() const;
        bool has_x_ClientData() const;
        ns_x::CT_ClientData* mutable_x_ClientData();
        const ns_x::CT_ClientData& get_x_ClientData() const;
        bool has_pvml_textdata() const;
        ns_pvml::CT_Rel* mutable_pvml_textdata();
        const ns_pvml::CT_Rel& get_pvml_textdata() const;
    protected:
    private:
        bool m_has_path;
        CT_Path* m_path;
        bool m_has_formulas;
        CT_Formulas* m_formulas;
        bool m_has_handles;
        CT_Handles* m_handles;
        bool m_has_fill;
        CT_Fill* m_fill;
        bool m_has_stroke;
        CT_Stroke* m_stroke;
        bool m_has_shadow;
        CT_Shadow* m_shadow;
        bool m_has_textbox;
        CT_Textbox* m_textbox;
        bool m_has_textpath;
        CT_TextPath* m_textpath;
        bool m_has_imagedata;
        CT_ImageData* m_imagedata;
        bool m_has_o_skew;
        ns_o::CT_Skew* m_o_skew;
        bool m_has_o_extrusion;
        ns_o::CT_Extrusion* m_o_extrusion;
        bool m_has_o_callout;
        ns_o::CT_Callout* m_o_callout;
        bool m_has_o_lock;
        ns_o::CT_Lock* m_o_lock;
        bool m_has_o_clippath;
        ns_o::CT_ClipPath* m_o_clippath;
        bool m_has_o_signatureline;
        ns_o::CT_SignatureLine* m_o_signatureline;
        bool m_has_w10_wrap;
        ns_w10::CT_Wrap* m_w10_wrap;
        bool m_has_w10_anchorlock;
        ns_w10::CT_AnchorLock* m_w10_anchorlock;
        bool m_has_w10_bordertop;
        ns_w10::CT_Border* m_w10_bordertop;
        bool m_has_w10_borderbottom;
        ns_w10::CT_Border* m_w10_borderbottom;
        bool m_has_w10_borderleft;
        ns_w10::CT_Border* m_w10_borderleft;
        bool m_has_w10_borderright;
        ns_w10::CT_Border* m_w10_borderright;
        bool m_has_x_ClientData;
        ns_x::CT_ClientData* m_x_ClientData;
        bool m_has_pvml_textdata;
        ns_pvml::CT_Rel* m_pvml_textdata;
    };
    vector<ChildGroup_1*> m_childGroupList_1;
    static line_element* default_instance_;
    bool m_has_from_attr;
    XSD::string_ m_from_attr;
    bool m_has_to_attr;
    XSD::string_ m_to_attr;
};

class oval_element: public Element
{
public:
    oval_element();
    ~oval_element();
    CT_Path* add_path();
    CT_Formulas* add_formulas();
    CT_Handles* add_handles();
    CT_Fill* add_fill();
    CT_Stroke* add_stroke();
    CT_Shadow* add_shadow();
    CT_Textbox* add_textbox();
    CT_TextPath* add_textpath();
    CT_ImageData* add_imagedata();
    ns_o::CT_Skew* add_o_skew();
    ns_o::CT_Extrusion* add_o_extrusion();
    ns_o::CT_Callout* add_o_callout();
    ns_o::CT_Lock* add_o_lock();
    ns_o::CT_ClipPath* add_o_clippath();
    ns_o::CT_SignatureLine* add_o_signatureline();
    ns_w10::CT_Wrap* add_w10_wrap();
    ns_w10::CT_AnchorLock* add_w10_anchorlock();
    ns_w10::CT_Border* add_w10_bordertop();
    ns_w10::CT_Border* add_w10_borderbottom();
    ns_w10::CT_Border* add_w10_borderleft();
    ns_w10::CT_Border* add_w10_borderright();
    ns_x::CT_ClientData* add_x_ClientData();
    ns_pvml::CT_Rel* add_pvml_textdata();
    void clear();
    void toXml(std::ostream& _outStream) const;
    static const oval_element& default_instance();
protected:
private:
    class ChildGroup_1
    {
    public:
        ChildGroup_1();
        bool has_path() const;
        CT_Path* mutable_path();
        const CT_Path& get_path() const;
        bool has_formulas() const;
        CT_Formulas* mutable_formulas();
        const CT_Formulas& get_formulas() const;
        bool has_handles() const;
        CT_Handles* mutable_handles();
        const CT_Handles& get_handles() const;
        bool has_fill() const;
        CT_Fill* mutable_fill();
        const CT_Fill& get_fill() const;
        bool has_stroke() const;
        CT_Stroke* mutable_stroke();
        const CT_Stroke& get_stroke() const;
        bool has_shadow() const;
        CT_Shadow* mutable_shadow();
        const CT_Shadow& get_shadow() const;
        bool has_textbox() const;
        CT_Textbox* mutable_textbox();
        const CT_Textbox& get_textbox() const;
        bool has_textpath() const;
        CT_TextPath* mutable_textpath();
        const CT_TextPath& get_textpath() const;
        bool has_imagedata() const;
        CT_ImageData* mutable_imagedata();
        const CT_ImageData& get_imagedata() const;
        bool has_o_skew() const;
        ns_o::CT_Skew* mutable_o_skew();
        const ns_o::CT_Skew& get_o_skew() const;
        bool has_o_extrusion() const;
        ns_o::CT_Extrusion* mutable_o_extrusion();
        const ns_o::CT_Extrusion& get_o_extrusion() const;
        bool has_o_callout() const;
        ns_o::CT_Callout* mutable_o_callout();
        const ns_o::CT_Callout& get_o_callout() const;
        bool has_o_lock() const;
        ns_o::CT_Lock* mutable_o_lock();
        const ns_o::CT_Lock& get_o_lock() const;
        bool has_o_clippath() const;
        ns_o::CT_ClipPath* mutable_o_clippath();
        const ns_o::CT_ClipPath& get_o_clippath() const;
        bool has_o_signatureline() const;
        ns_o::CT_SignatureLine* mutable_o_signatureline();
        const ns_o::CT_SignatureLine& get_o_signatureline() const;
        bool has_w10_wrap() const;
        ns_w10::CT_Wrap* mutable_w10_wrap();
        const ns_w10::CT_Wrap& get_w10_wrap() const;
        bool has_w10_anchorlock() const;
        ns_w10::CT_AnchorLock* mutable_w10_anchorlock();
        const ns_w10::CT_AnchorLock& get_w10_anchorlock() const;
        bool has_w10_bordertop() const;
        ns_w10::CT_Border* mutable_w10_bordertop();
        const ns_w10::CT_Border& get_w10_bordertop() const;
        bool has_w10_borderbottom() const;
        ns_w10::CT_Border* mutable_w10_borderbottom();
        const ns_w10::CT_Border& get_w10_borderbottom() const;
        bool has_w10_borderleft() const;
        ns_w10::CT_Border* mutable_w10_borderleft();
        const ns_w10::CT_Border& get_w10_borderleft() const;
        bool has_w10_borderright() const;
        ns_w10::CT_Border* mutable_w10_borderright();
        const ns_w10::CT_Border& get_w10_borderright() const;
        bool has_x_ClientData() const;
        ns_x::CT_ClientData* mutable_x_ClientData();
        const ns_x::CT_ClientData& get_x_ClientData() const;
        bool has_pvml_textdata() const;
        ns_pvml::CT_Rel* mutable_pvml_textdata();
        const ns_pvml::CT_Rel& get_pvml_textdata() const;
    protected:
    private:
        bool m_has_path;
        CT_Path* m_path;
        bool m_has_formulas;
        CT_Formulas* m_formulas;
        bool m_has_handles;
        CT_Handles* m_handles;
        bool m_has_fill;
        CT_Fill* m_fill;
        bool m_has_stroke;
        CT_Stroke* m_stroke;
        bool m_has_shadow;
        CT_Shadow* m_shadow;
        bool m_has_textbox;
        CT_Textbox* m_textbox;
        bool m_has_textpath;
        CT_TextPath* m_textpath;
        bool m_has_imagedata;
        CT_ImageData* m_imagedata;
        bool m_has_o_skew;
        ns_o::CT_Skew* m_o_skew;
        bool m_has_o_extrusion;
        ns_o::CT_Extrusion* m_o_extrusion;
        bool m_has_o_callout;
        ns_o::CT_Callout* m_o_callout;
        bool m_has_o_lock;
        ns_o::CT_Lock* m_o_lock;
        bool m_has_o_clippath;
        ns_o::CT_ClipPath* m_o_clippath;
        bool m_has_o_signatureline;
        ns_o::CT_SignatureLine* m_o_signatureline;
        bool m_has_w10_wrap;
        ns_w10::CT_Wrap* m_w10_wrap;
        bool m_has_w10_anchorlock;
        ns_w10::CT_AnchorLock* m_w10_anchorlock;
        bool m_has_w10_bordertop;
        ns_w10::CT_Border* m_w10_bordertop;
        bool m_has_w10_borderbottom;
        ns_w10::CT_Border* m_w10_borderbottom;
        bool m_has_w10_borderleft;
        ns_w10::CT_Border* m_w10_borderleft;
        bool m_has_w10_borderright;
        ns_w10::CT_Border* m_w10_borderright;
        bool m_has_x_ClientData;
        ns_x::CT_ClientData* m_x_ClientData;
        bool m_has_pvml_textdata;
        ns_pvml::CT_Rel* m_pvml_textdata;
    };
    vector<ChildGroup_1*> m_childGroupList_1;
    static oval_element* default_instance_;
};

class polyline_element: public Element
{
public:
    polyline_element();
    ~polyline_element();
    CT_Path* add_path();
    CT_Formulas* add_formulas();
    CT_Handles* add_handles();
    CT_Fill* add_fill();
    CT_Stroke* add_stroke();
    CT_Shadow* add_shadow();
    CT_Textbox* add_textbox();
    CT_TextPath* add_textpath();
    CT_ImageData* add_imagedata();
    ns_o::CT_Skew* add_o_skew();
    ns_o::CT_Extrusion* add_o_extrusion();
    ns_o::CT_Callout* add_o_callout();
    ns_o::CT_Lock* add_o_lock();
    ns_o::CT_ClipPath* add_o_clippath();
    ns_o::CT_SignatureLine* add_o_signatureline();
    ns_w10::CT_Wrap* add_w10_wrap();
    ns_w10::CT_AnchorLock* add_w10_anchorlock();
    ns_w10::CT_Border* add_w10_bordertop();
    ns_w10::CT_Border* add_w10_borderbottom();
    ns_w10::CT_Border* add_w10_borderleft();
    ns_w10::CT_Border* add_w10_borderright();
    ns_x::CT_ClientData* add_x_ClientData();
    ns_pvml::CT_Rel* add_pvml_textdata();
    ns_o::CT_Ink* add_o_ink();
    void clear();
    void toXml(std::ostream& _outStream) const;
    static const polyline_element& default_instance();
    bool has_points_attr() const;
    void set_points_attr(const XSD::string_& _points_attr);
    const XSD::string_& get_points_attr() const;
protected:
private:
    class ChildGroup_1
    {
    public:
        ChildGroup_1();
        bool has_path() const;
        CT_Path* mutable_path();
        const CT_Path& get_path() const;
        bool has_formulas() const;
        CT_Formulas* mutable_formulas();
        const CT_Formulas& get_formulas() const;
        bool has_handles() const;
        CT_Handles* mutable_handles();
        const CT_Handles& get_handles() const;
        bool has_fill() const;
        CT_Fill* mutable_fill();
        const CT_Fill& get_fill() const;
        bool has_stroke() const;
        CT_Stroke* mutable_stroke();
        const CT_Stroke& get_stroke() const;
        bool has_shadow() const;
        CT_Shadow* mutable_shadow();
        const CT_Shadow& get_shadow() const;
        bool has_textbox() const;
        CT_Textbox* mutable_textbox();
        const CT_Textbox& get_textbox() const;
        bool has_textpath() const;
        CT_TextPath* mutable_textpath();
        const CT_TextPath& get_textpath() const;
        bool has_imagedata() const;
        CT_ImageData* mutable_imagedata();
        const CT_ImageData& get_imagedata() const;
        bool has_o_skew() const;
        ns_o::CT_Skew* mutable_o_skew();
        const ns_o::CT_Skew& get_o_skew() const;
        bool has_o_extrusion() const;
        ns_o::CT_Extrusion* mutable_o_extrusion();
        const ns_o::CT_Extrusion& get_o_extrusion() const;
        bool has_o_callout() const;
        ns_o::CT_Callout* mutable_o_callout();
        const ns_o::CT_Callout& get_o_callout() const;
        bool has_o_lock() const;
        ns_o::CT_Lock* mutable_o_lock();
        const ns_o::CT_Lock& get_o_lock() const;
        bool has_o_clippath() const;
        ns_o::CT_ClipPath* mutable_o_clippath();
        const ns_o::CT_ClipPath& get_o_clippath() const;
        bool has_o_signatureline() const;
        ns_o::CT_SignatureLine* mutable_o_signatureline();
        const ns_o::CT_SignatureLine& get_o_signatureline() const;
        bool has_w10_wrap() const;
        ns_w10::CT_Wrap* mutable_w10_wrap();
        const ns_w10::CT_Wrap& get_w10_wrap() const;
        bool has_w10_anchorlock() const;
        ns_w10::CT_AnchorLock* mutable_w10_anchorlock();
        const ns_w10::CT_AnchorLock& get_w10_anchorlock() const;
        bool has_w10_bordertop() const;
        ns_w10::CT_Border* mutable_w10_bordertop();
        const ns_w10::CT_Border& get_w10_bordertop() const;
        bool has_w10_borderbottom() const;
        ns_w10::CT_Border* mutable_w10_borderbottom();
        const ns_w10::CT_Border& get_w10_borderbottom() const;
        bool has_w10_borderleft() const;
        ns_w10::CT_Border* mutable_w10_borderleft();
        const ns_w10::CT_Border& get_w10_borderleft() const;
        bool has_w10_borderright() const;
        ns_w10::CT_Border* mutable_w10_borderright();
        const ns_w10::CT_Border& get_w10_borderright() const;
        bool has_x_ClientData() const;
        ns_x::CT_ClientData* mutable_x_ClientData();
        const ns_x::CT_ClientData& get_x_ClientData() const;
        bool has_pvml_textdata() const;
        ns_pvml::CT_Rel* mutable_pvml_textdata();
        const ns_pvml::CT_Rel& get_pvml_textdata() const;
        bool has_o_ink() const;
        ns_o::CT_Ink* mutable_o_ink();
        const ns_o::CT_Ink& get_o_ink() const;
    protected:
    private:
        bool m_has_path;
        CT_Path* m_path;
        bool m_has_formulas;
        CT_Formulas* m_formulas;
        bool m_has_handles;
        CT_Handles* m_handles;
        bool m_has_fill;
        CT_Fill* m_fill;
        bool m_has_stroke;
        CT_Stroke* m_stroke;
        bool m_has_shadow;
        CT_Shadow* m_shadow;
        bool m_has_textbox;
        CT_Textbox* m_textbox;
        bool m_has_textpath;
        CT_TextPath* m_textpath;
        bool m_has_imagedata;
        CT_ImageData* m_imagedata;
        bool m_has_o_skew;
        ns_o::CT_Skew* m_o_skew;
        bool m_has_o_extrusion;
        ns_o::CT_Extrusion* m_o_extrusion;
        bool m_has_o_callout;
        ns_o::CT_Callout* m_o_callout;
        bool m_has_o_lock;
        ns_o::CT_Lock* m_o_lock;
        bool m_has_o_clippath;
        ns_o::CT_ClipPath* m_o_clippath;
        bool m_has_o_signatureline;
        ns_o::CT_SignatureLine* m_o_signatureline;
        bool m_has_w10_wrap;
        ns_w10::CT_Wrap* m_w10_wrap;
        bool m_has_w10_anchorlock;
        ns_w10::CT_AnchorLock* m_w10_anchorlock;
        bool m_has_w10_bordertop;
        ns_w10::CT_Border* m_w10_bordertop;
        bool m_has_w10_borderbottom;
        ns_w10::CT_Border* m_w10_borderbottom;
        bool m_has_w10_borderleft;
        ns_w10::CT_Border* m_w10_borderleft;
        bool m_has_w10_borderright;
        ns_w10::CT_Border* m_w10_borderright;
        bool m_has_x_ClientData;
        ns_x::CT_ClientData* m_x_ClientData;
        bool m_has_pvml_textdata;
        ns_pvml::CT_Rel* m_pvml_textdata;
        bool m_has_o_ink;
        ns_o::CT_Ink* m_o_ink;
    };
    vector<ChildGroup_1*> m_childGroupList_1;
    static polyline_element* default_instance_;
    bool m_has_points_attr;
    XSD::string_ m_points_attr;
};

class rect_element: public Element
{
public:
    rect_element();
    ~rect_element();
    CT_Path* add_path();
    CT_Formulas* add_formulas();
    CT_Handles* add_handles();
    CT_Fill* add_fill();
    CT_Stroke* add_stroke();
    CT_Shadow* add_shadow();
    CT_Textbox* add_textbox();
    CT_TextPath* add_textpath();
    CT_ImageData* add_imagedata();
    ns_o::CT_Skew* add_o_skew();
    ns_o::CT_Extrusion* add_o_extrusion();
    ns_o::CT_Callout* add_o_callout();
    ns_o::CT_Lock* add_o_lock();
    ns_o::CT_ClipPath* add_o_clippath();
    ns_o::CT_SignatureLine* add_o_signatureline();
    ns_w10::CT_Wrap* add_w10_wrap();
    ns_w10::CT_AnchorLock* add_w10_anchorlock();
    ns_w10::CT_Border* add_w10_bordertop();
    ns_w10::CT_Border* add_w10_borderbottom();
    ns_w10::CT_Border* add_w10_borderleft();
    ns_w10::CT_Border* add_w10_borderright();
    ns_x::CT_ClientData* add_x_ClientData();
    ns_pvml::CT_Rel* add_pvml_textdata();
    void clear();
    void toXml(std::ostream& _outStream) const;
    static const rect_element& default_instance();
protected:
private:
    class ChildGroup_1
    {
    public:
        ChildGroup_1();
        bool has_path() const;
        CT_Path* mutable_path();
        const CT_Path& get_path() const;
        bool has_formulas() const;
        CT_Formulas* mutable_formulas();
        const CT_Formulas& get_formulas() const;
        bool has_handles() const;
        CT_Handles* mutable_handles();
        const CT_Handles& get_handles() const;
        bool has_fill() const;
        CT_Fill* mutable_fill();
        const CT_Fill& get_fill() const;
        bool has_stroke() const;
        CT_Stroke* mutable_stroke();
        const CT_Stroke& get_stroke() const;
        bool has_shadow() const;
        CT_Shadow* mutable_shadow();
        const CT_Shadow& get_shadow() const;
        bool has_textbox() const;
        CT_Textbox* mutable_textbox();
        const CT_Textbox& get_textbox() const;
        bool has_textpath() const;
        CT_TextPath* mutable_textpath();
        const CT_TextPath& get_textpath() const;
        bool has_imagedata() const;
        CT_ImageData* mutable_imagedata();
        const CT_ImageData& get_imagedata() const;
        bool has_o_skew() const;
        ns_o::CT_Skew* mutable_o_skew();
        const ns_o::CT_Skew& get_o_skew() const;
        bool has_o_extrusion() const;
        ns_o::CT_Extrusion* mutable_o_extrusion();
        const ns_o::CT_Extrusion& get_o_extrusion() const;
        bool has_o_callout() const;
        ns_o::CT_Callout* mutable_o_callout();
        const ns_o::CT_Callout& get_o_callout() const;
        bool has_o_lock() const;
        ns_o::CT_Lock* mutable_o_lock();
        const ns_o::CT_Lock& get_o_lock() const;
        bool has_o_clippath() const;
        ns_o::CT_ClipPath* mutable_o_clippath();
        const ns_o::CT_ClipPath& get_o_clippath() const;
        bool has_o_signatureline() const;
        ns_o::CT_SignatureLine* mutable_o_signatureline();
        const ns_o::CT_SignatureLine& get_o_signatureline() const;
        bool has_w10_wrap() const;
        ns_w10::CT_Wrap* mutable_w10_wrap();
        const ns_w10::CT_Wrap& get_w10_wrap() const;
        bool has_w10_anchorlock() const;
        ns_w10::CT_AnchorLock* mutable_w10_anchorlock();
        const ns_w10::CT_AnchorLock& get_w10_anchorlock() const;
        bool has_w10_bordertop() const;
        ns_w10::CT_Border* mutable_w10_bordertop();
        const ns_w10::CT_Border& get_w10_bordertop() const;
        bool has_w10_borderbottom() const;
        ns_w10::CT_Border* mutable_w10_borderbottom();
        const ns_w10::CT_Border& get_w10_borderbottom() const;
        bool has_w10_borderleft() const;
        ns_w10::CT_Border* mutable_w10_borderleft();
        const ns_w10::CT_Border& get_w10_borderleft() const;
        bool has_w10_borderright() const;
        ns_w10::CT_Border* mutable_w10_borderright();
        const ns_w10::CT_Border& get_w10_borderright() const;
        bool has_x_ClientData() const;
        ns_x::CT_ClientData* mutable_x_ClientData();
        const ns_x::CT_ClientData& get_x_ClientData() const;
        bool has_pvml_textdata() const;
        ns_pvml::CT_Rel* mutable_pvml_textdata();
        const ns_pvml::CT_Rel& get_pvml_textdata() const;
    protected:
    private:
        bool m_has_path;
        CT_Path* m_path;
        bool m_has_formulas;
        CT_Formulas* m_formulas;
        bool m_has_handles;
        CT_Handles* m_handles;
        bool m_has_fill;
        CT_Fill* m_fill;
        bool m_has_stroke;
        CT_Stroke* m_stroke;
        bool m_has_shadow;
        CT_Shadow* m_shadow;
        bool m_has_textbox;
        CT_Textbox* m_textbox;
        bool m_has_textpath;
        CT_TextPath* m_textpath;
        bool m_has_imagedata;
        CT_ImageData* m_imagedata;
        bool m_has_o_skew;
        ns_o::CT_Skew* m_o_skew;
        bool m_has_o_extrusion;
        ns_o::CT_Extrusion* m_o_extrusion;
        bool m_has_o_callout;
        ns_o::CT_Callout* m_o_callout;
        bool m_has_o_lock;
        ns_o::CT_Lock* m_o_lock;
        bool m_has_o_clippath;
        ns_o::CT_ClipPath* m_o_clippath;
        bool m_has_o_signatureline;
        ns_o::CT_SignatureLine* m_o_signatureline;
        bool m_has_w10_wrap;
        ns_w10::CT_Wrap* m_w10_wrap;
        bool m_has_w10_anchorlock;
        ns_w10::CT_AnchorLock* m_w10_anchorlock;
        bool m_has_w10_bordertop;
        ns_w10::CT_Border* m_w10_bordertop;
        bool m_has_w10_borderbottom;
        ns_w10::CT_Border* m_w10_borderbottom;
        bool m_has_w10_borderleft;
        ns_w10::CT_Border* m_w10_borderleft;
        bool m_has_w10_borderright;
        ns_w10::CT_Border* m_w10_borderright;
        bool m_has_x_ClientData;
        ns_x::CT_ClientData* m_x_ClientData;
        bool m_has_pvml_textdata;
        ns_pvml::CT_Rel* m_pvml_textdata;
    };
    vector<ChildGroup_1*> m_childGroupList_1;
    static rect_element* default_instance_;
};

class roundrect_element: public Element
{
public:
    roundrect_element();
    ~roundrect_element();
    CT_Path* add_path();
    CT_Formulas* add_formulas();
    CT_Handles* add_handles();
    CT_Fill* add_fill();
    CT_Stroke* add_stroke();
    CT_Shadow* add_shadow();
    CT_Textbox* add_textbox();
    CT_TextPath* add_textpath();
    CT_ImageData* add_imagedata();
    ns_o::CT_Skew* add_o_skew();
    ns_o::CT_Extrusion* add_o_extrusion();
    ns_o::CT_Callout* add_o_callout();
    ns_o::CT_Lock* add_o_lock();
    ns_o::CT_ClipPath* add_o_clippath();
    ns_o::CT_SignatureLine* add_o_signatureline();
    ns_w10::CT_Wrap* add_w10_wrap();
    ns_w10::CT_AnchorLock* add_w10_anchorlock();
    ns_w10::CT_Border* add_w10_bordertop();
    ns_w10::CT_Border* add_w10_borderbottom();
    ns_w10::CT_Border* add_w10_borderleft();
    ns_w10::CT_Border* add_w10_borderright();
    ns_x::CT_ClientData* add_x_ClientData();
    ns_pvml::CT_Rel* add_pvml_textdata();
    void clear();
    void toXml(std::ostream& _outStream) const;
    static const roundrect_element& default_instance();
    bool has_arcsize_attr() const;
    void set_arcsize_attr(const XSD::string_& _arcsize_attr);
    const XSD::string_& get_arcsize_attr() const;
protected:
private:
    class ChildGroup_1
    {
    public:
        ChildGroup_1();
        bool has_path() const;
        CT_Path* mutable_path();
        const CT_Path& get_path() const;
        bool has_formulas() const;
        CT_Formulas* mutable_formulas();
        const CT_Formulas& get_formulas() const;
        bool has_handles() const;
        CT_Handles* mutable_handles();
        const CT_Handles& get_handles() const;
        bool has_fill() const;
        CT_Fill* mutable_fill();
        const CT_Fill& get_fill() const;
        bool has_stroke() const;
        CT_Stroke* mutable_stroke();
        const CT_Stroke& get_stroke() const;
        bool has_shadow() const;
        CT_Shadow* mutable_shadow();
        const CT_Shadow& get_shadow() const;
        bool has_textbox() const;
        CT_Textbox* mutable_textbox();
        const CT_Textbox& get_textbox() const;
        bool has_textpath() const;
        CT_TextPath* mutable_textpath();
        const CT_TextPath& get_textpath() const;
        bool has_imagedata() const;
        CT_ImageData* mutable_imagedata();
        const CT_ImageData& get_imagedata() const;
        bool has_o_skew() const;
        ns_o::CT_Skew* mutable_o_skew();
        const ns_o::CT_Skew& get_o_skew() const;
        bool has_o_extrusion() const;
        ns_o::CT_Extrusion* mutable_o_extrusion();
        const ns_o::CT_Extrusion& get_o_extrusion() const;
        bool has_o_callout() const;
        ns_o::CT_Callout* mutable_o_callout();
        const ns_o::CT_Callout& get_o_callout() const;
        bool has_o_lock() const;
        ns_o::CT_Lock* mutable_o_lock();
        const ns_o::CT_Lock& get_o_lock() const;
        bool has_o_clippath() const;
        ns_o::CT_ClipPath* mutable_o_clippath();
        const ns_o::CT_ClipPath& get_o_clippath() const;
        bool has_o_signatureline() const;
        ns_o::CT_SignatureLine* mutable_o_signatureline();
        const ns_o::CT_SignatureLine& get_o_signatureline() const;
        bool has_w10_wrap() const;
        ns_w10::CT_Wrap* mutable_w10_wrap();
        const ns_w10::CT_Wrap& get_w10_wrap() const;
        bool has_w10_anchorlock() const;
        ns_w10::CT_AnchorLock* mutable_w10_anchorlock();
        const ns_w10::CT_AnchorLock& get_w10_anchorlock() const;
        bool has_w10_bordertop() const;
        ns_w10::CT_Border* mutable_w10_bordertop();
        const ns_w10::CT_Border& get_w10_bordertop() const;
        bool has_w10_borderbottom() const;
        ns_w10::CT_Border* mutable_w10_borderbottom();
        const ns_w10::CT_Border& get_w10_borderbottom() const;
        bool has_w10_borderleft() const;
        ns_w10::CT_Border* mutable_w10_borderleft();
        const ns_w10::CT_Border& get_w10_borderleft() const;
        bool has_w10_borderright() const;
        ns_w10::CT_Border* mutable_w10_borderright();
        const ns_w10::CT_Border& get_w10_borderright() const;
        bool has_x_ClientData() const;
        ns_x::CT_ClientData* mutable_x_ClientData();
        const ns_x::CT_ClientData& get_x_ClientData() const;
        bool has_pvml_textdata() const;
        ns_pvml::CT_Rel* mutable_pvml_textdata();
        const ns_pvml::CT_Rel& get_pvml_textdata() const;
    protected:
    private:
        bool m_has_path;
        CT_Path* m_path;
        bool m_has_formulas;
        CT_Formulas* m_formulas;
        bool m_has_handles;
        CT_Handles* m_handles;
        bool m_has_fill;
        CT_Fill* m_fill;
        bool m_has_stroke;
        CT_Stroke* m_stroke;
        bool m_has_shadow;
        CT_Shadow* m_shadow;
        bool m_has_textbox;
        CT_Textbox* m_textbox;
        bool m_has_textpath;
        CT_TextPath* m_textpath;
        bool m_has_imagedata;
        CT_ImageData* m_imagedata;
        bool m_has_o_skew;
        ns_o::CT_Skew* m_o_skew;
        bool m_has_o_extrusion;
        ns_o::CT_Extrusion* m_o_extrusion;
        bool m_has_o_callout;
        ns_o::CT_Callout* m_o_callout;
        bool m_has_o_lock;
        ns_o::CT_Lock* m_o_lock;
        bool m_has_o_clippath;
        ns_o::CT_ClipPath* m_o_clippath;
        bool m_has_o_signatureline;
        ns_o::CT_SignatureLine* m_o_signatureline;
        bool m_has_w10_wrap;
        ns_w10::CT_Wrap* m_w10_wrap;
        bool m_has_w10_anchorlock;
        ns_w10::CT_AnchorLock* m_w10_anchorlock;
        bool m_has_w10_bordertop;
        ns_w10::CT_Border* m_w10_bordertop;
        bool m_has_w10_borderbottom;
        ns_w10::CT_Border* m_w10_borderbottom;
        bool m_has_w10_borderleft;
        ns_w10::CT_Border* m_w10_borderleft;
        bool m_has_w10_borderright;
        ns_w10::CT_Border* m_w10_borderright;
        bool m_has_x_ClientData;
        ns_x::CT_ClientData* m_x_ClientData;
        bool m_has_pvml_textdata;
        ns_pvml::CT_Rel* m_pvml_textdata;
    };
    vector<ChildGroup_1*> m_childGroupList_1;
    static roundrect_element* default_instance_;
    bool m_has_arcsize_attr;
    XSD::string_ m_arcsize_attr;
};

}
#endif